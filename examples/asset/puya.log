>> poetry run puyapy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 --log-level=debug asset
debug: Building AWST for __init__.py
debug: Building AWST for asset
debug: Building AWST for embedded puyapy lib at <puya>/puyapy_lib_bytes.py
debug: Building AWST for embedded puyapy lib at <puya>/puyapy.py
debug: Building AWST for asset/contract.py
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L36
debug: Terminated block@0: // L36
debug: Sealing block@0: // L53
debug: Terminated block@0: // L53
debug: Sealing block@0: // L17
debug: Terminated block@0: // L17
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@None: // on_create_L17
debug: Terminated block@1: // on_create_L17
debug: Sealing block@2: // entrypoint_L17
debug: Terminated block@2: // entrypoint_L17
debug: Sealing block@None: // if_body_L21
debug: Sealing block@None: // else_body_L21
debug: Terminated block@3: // if_body_L21
debug: Sealing block@None: // if_body_L22
debug: Sealing block@None: // else_body_L22
debug: Terminated block@4: // if_body_L22
debug: Terminated block@5: // else_body_L22
debug: Sealing block@None: // if_body_L25
debug: Sealing block@None: // else_body_L25
debug: Terminated block@6: // if_body_L25
debug: Terminated block@7: // else_body_L25
debug: Sealing block@8: // after_if_else_L25
debug: Terminated block@8: // after_if_else_L25
debug: Sealing block@9: // after_if_else_L22
debug: Terminated block@9: // after_if_else_L22
debug: Sealing block@10: // after_if_else_L21
debug: Terminated block@10: // after_if_else_L21
debug: Sealing block@0: // L32
debug: Terminated block@0: // L32
debug: Output IR to <git root>/examples/asset/out/contract_Reference.ssa.ir
info: Optimizing examples.asset.contract.Reference at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.asset.contract.Reference.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@8: // after_if_else_L25 with block@6: // if_body_L25 in block@9: // after_if_else_L22
debug: Merged linear block@8: // after_if_else_L25 into block@6: // if_body_L25
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@9: // after_if_else_L22
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.opt_into_asset
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.is_opted_asset
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.__init__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/asset/out/contract_Reference.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.asset.contract.Reference.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.opt_into_asset
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.is_opted_asset
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.__init__
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.asset.contract.Reference.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to <git root>/examples/asset/out/contract_Reference.cssa.ir
debug: Removing Phis from examples.asset.contract.Reference.approval_program
debug: Removing Phis from examples.asset.contract.Reference.opt_into_asset
debug: Removing Phis from examples.asset.contract.Reference.is_opted_asset
debug: Removing Phis from examples.asset.contract.Reference.__init__
debug: Removing Phis from examples.asset.contract.Reference.clear_state_program
debug: Output IR to <git root>/examples/asset/out/contract_Reference.post_ssa.ir
debug: Sequentializing parallel copies in examples.asset.contract.Reference.approval_program
debug: Sequentializing parallel copies in examples.asset.contract.Reference.opt_into_asset
debug: Sequentializing parallel copies in examples.asset.contract.Reference.is_opted_asset
debug: Sequentializing parallel copies in examples.asset.contract.Reference.__init__
debug: Sequentializing parallel copies in examples.asset.contract.Reference.clear_state_program
debug: Output IR to <git root>/examples/asset/out/contract_Reference.parallel_copies.ir
debug: Coalescing local variables in examples.asset.contract.Reference.approval_program using strategy RootOperandGrouping
debug: Coalescing asset#0 with [asset#1]
debug: Coalescing resulted in 2 replacement/s
debug: Coalescing local variables in examples.asset.contract.Reference.opt_into_asset using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.asset.contract.Reference.is_opted_asset using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.asset.contract.Reference.__init__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.asset.contract.Reference.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/asset/out/contract_Reference.final.ir
debug: Inserted main_block@0.ops[1]: 'store app_id%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load app_id%0#0' with 'load app_id%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[3]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[6]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[8]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[1]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[3]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[6]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[8]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_if_body@4.ops[1]: 'store asset#0 to l-stack (copy)'
debug: Replaced main_if_body@4.ops[3]: 'load asset#0' with 'load asset#0 from l-stack (no copy)'
debug: Inserted main_else_body@5.ops[1]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_else_body@5.ops[3]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_else_body@5.ops[6]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_else_body@5.ops[8]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[1]: 'store asset#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[3]: 'load asset#0' with 'load asset#0 from l-stack (no copy)'
debug: Found 4 edge set/s for examples.asset.contract.Reference.approval_program
debug: Inserted opt_into_asset_block@0.ops[7]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[9]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[20]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[22]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[33]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[35]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[6]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[15]: 'store app_global_get_ex_did_exist%4#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[18]: 'load app_global_get_ex_did_exist%4#0' with 'load app_global_get_ex_did_exist%4#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[6]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[18]: 'store app_global_get_ex_value%3#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[22]: 'load app_global_get_ex_value%3#0' with 'load app_global_get_ex_value%3#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[10]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[12]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[23]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[25]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[35]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[37]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[47]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[49]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[60]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[62]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[73]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[75]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[86]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[88]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[102]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[104]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[117]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[119]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[132]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[134]: 'load tmp%32#0' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[147]: 'store tmp%36#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[149]: 'load tmp%36#0' with 'load tmp%36#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[162]: 'store tmp%40#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[164]: 'load tmp%40#0' with 'load tmp%40#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[177]: 'store tmp%44#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[179]: 'load tmp%44#0' with 'load tmp%44#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[3]: 'store app_global_get_ex_did_exist%1#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[6]: 'load app_global_get_ex_did_exist%1#0' with 'load app_global_get_ex_did_exist%1#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[17]: 'store maybe_value_did_exist%4#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[20]: 'load maybe_value_did_exist%4#0' with 'load maybe_value_did_exist%4#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[31]: 'store maybe_value_did_exist%7#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[34]: 'load maybe_value_did_exist%7#0' with 'load maybe_value_did_exist%7#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[44]: 'store maybe_value_did_exist%10#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[47]: 'load maybe_value_did_exist%10#0' with 'load maybe_value_did_exist%10#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[57]: 'store maybe_value_did_exist%13#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[60]: 'load maybe_value_did_exist%13#0' with 'load maybe_value_did_exist%13#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[71]: 'store maybe_value_did_exist%16#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[74]: 'load maybe_value_did_exist%16#0' with 'load maybe_value_did_exist%16#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[85]: 'store maybe_value_did_exist%19#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[88]: 'load maybe_value_did_exist%19#0' with 'load maybe_value_did_exist%19#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[99]: 'store maybe_value_did_exist%22#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[102]: 'load maybe_value_did_exist%22#0' with 'load maybe_value_did_exist%22#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[106]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[109]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[117]: 'store maybe_value_did_exist%26#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[120]: 'load maybe_value_did_exist%26#0' with 'load maybe_value_did_exist%26#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[123]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[126]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[134]: 'store maybe_value_did_exist%30#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[137]: 'load maybe_value_did_exist%30#0' with 'load maybe_value_did_exist%30#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[140]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[143]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[151]: 'store maybe_value_did_exist%34#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[154]: 'load maybe_value_did_exist%34#0' with 'load maybe_value_did_exist%34#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[157]: 'store tmp%35#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[160]: 'load tmp%35#0' with 'load tmp%35#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[168]: 'store maybe_value_did_exist%38#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[171]: 'load maybe_value_did_exist%38#0' with 'load maybe_value_did_exist%38#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[174]: 'store tmp%39#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[177]: 'load tmp%39#0' with 'load tmp%39#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[185]: 'store maybe_value_did_exist%42#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[188]: 'load maybe_value_did_exist%42#0' with 'load maybe_value_did_exist%42#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[191]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[194]: 'load tmp%43#0' with 'load tmp%43#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[5]: 'store app_global_get_ex_value%0#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[9]: 'load app_global_get_ex_value%0#0' with 'load app_global_get_ex_value%0#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[20]: 'store maybe_value%3#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[24]: 'load maybe_value%3#0' with 'load maybe_value%3#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[35]: 'store maybe_value%6#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[39]: 'load maybe_value%6#0' with 'load maybe_value%6#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[49]: 'store maybe_value%9#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[53]: 'load maybe_value%9#0' with 'load maybe_value%9#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[63]: 'store maybe_value%12#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[67]: 'load maybe_value%12#0' with 'load maybe_value%12#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[78]: 'store maybe_value%15#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[82]: 'load maybe_value%15#0' with 'load maybe_value%15#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[93]: 'store maybe_value%18#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[97]: 'load maybe_value%18#0' with 'load maybe_value%18#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[126]: 'store maybe_value%25#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[133]: 'load maybe_value%25#0' with 'load maybe_value%25#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[144]: 'store maybe_value%29#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[151]: 'load maybe_value%29#0' with 'load maybe_value%29#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[162]: 'store maybe_value%33#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[169]: 'load maybe_value%33#0' with 'load maybe_value%33#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[180]: 'store maybe_value%37#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[187]: 'load maybe_value%37#0' with 'load maybe_value%37#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[198]: 'store maybe_value%41#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[205]: 'load maybe_value%41#0' with 'load maybe_value%41#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[108]: 'store maybe_value%21#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[116]: 'load maybe_value%21#0' with 'load maybe_value%21#0 from l-stack (no copy)'
info: Writing asset/out/contract.approval.teal
info: Writing asset/out/contract.approval.debug.teal
info: Writing asset/out/contract.clear.teal
info: Writing asset/out/contract.clear.debug.teal
>> exit code = 0