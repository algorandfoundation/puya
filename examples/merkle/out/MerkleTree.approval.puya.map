{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAQA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;AAKK;;AAAA;AAAA;AAAA;;AAAA;AALL;;;AAAA;;;AAKK;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEG;AAHR;;;AAGQ;AAFH;;AAIL;;;AAEe;AAAA;AAAA;AAAA;AAMO;;AAAA;AAAA;AAAP;;;AAAA;;AAAA;;AAAA;AAAf;;;AACuC;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMT;;AAAA;AAAT;;;AAAA;;AAAA;AAAA;AAAV;AAAA;;AAPI;;AAAA;AAAA;AAAA;;;;;AAOkE;;AAAA;;;;AAblE;;AAAA;;AAAA;AAAP;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32"
    },
    "6": {
      "op": "bytecblock \"root\""
    },
    "13": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "bz main_after_if_else@8",
      "stack_out": []
    },
    "18": {
      "op": "pushbytess 0x8424203b 0xc0290ad5 // method \"create(byte[32])void\", method \"verify(byte[32][],byte[32])bool\"",
      "defined_out": [
        "Method(create(byte[32])void)",
        "Method(verify(byte[32][],byte[32])bool)"
      ],
      "stack_out": [
        "Method(create(byte[32])void)",
        "Method(verify(byte[32][],byte[32])bool)"
      ]
    },
    "30": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create(byte[32])void)",
        "Method(verify(byte[32][],byte[32])bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create(byte[32])void)",
        "Method(verify(byte[32][],byte[32])bool)",
        "tmp%2#0"
      ]
    },
    "33": {
      "op": "match main_create_route@3 main_verify_route@4",
      "stack_out": []
    },
    "39": {
      "block": "main_after_if_else@8",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "40": {
      "block": "main_verify_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "42": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "43": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "44": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "46": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "47": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[32][])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[32][])%0#0"
      ]
    },
    "50": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[32][])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[32][])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0"
      ]
    },
    "53": {
      "callsub": "examples.merkle.contract.MerkleTree.verify",
      "op": "callsub verify",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "56": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x00"
      ]
    },
    "59": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x00",
        "0"
      ]
    },
    "60": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%11#0"
      ]
    },
    "62": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "63": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "69": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "70": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "71": {
      "op": "log",
      "stack_out": []
    },
    "72": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "73": {
      "op": "return",
      "stack_out": []
    },
    "74": {
      "block": "main_create_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "76": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "77": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "78": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "80": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "81": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "82": {
      "op": "bytec_0 // \"root\"",
      "defined_out": [
        "\"root\""
      ],
      "stack_out": [
        "\"root\""
      ]
    },
    "83": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"root\"",
        "root#0"
      ],
      "stack_out": [
        "\"root\"",
        "root#0"
      ]
    },
    "86": {
      "op": "app_global_put",
      "stack_out": []
    },
    "87": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "88": {
      "op": "return",
      "stack_out": []
    },
    "89": {
      "subroutine": "examples.merkle.contract.MerkleTree.verify",
      "params": {
        "proof#0": "bytes",
        "leaf#0": "bytes"
      },
      "block": "verify",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "92": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "93": {
      "op": "bytec_0 // \"root\"",
      "defined_out": [
        "\"root\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"root\""
      ]
    },
    "94": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "95": {
      "error": "check self.root exists",
      "op": "assert // check self.root exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "96": {
      "op": "frame_dig -2",
      "defined_out": [
        "maybe_value%0#0",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "proof#0 (copy)"
      ]
    },
    "98": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "proof#0 (copy)",
        "0"
      ]
    },
    "99": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "100": {
      "op": "intc_0 // 0"
    },
    "101": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%array_length%0#0",
        "computed#1",
        "idx#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1"
      ]
    },
    "103": {
      "block": "verify_for_header@2",
      "stack_in": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "idx#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "idx#0"
      ]
    },
    "105": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%array_length%0#0",
        "idx#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "idx#0",
        "aggregate%array_length%0#0"
      ]
    },
    "107": {
      "op": "<",
      "defined_out": [
        "aggregate%array_length%0#0",
        "continue_looping%0#0",
        "idx#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "continue_looping%0#0"
      ]
    },
    "108": {
      "op": "bz verify_after_for@7",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1"
      ]
    },
    "111": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%array_length%0#0",
        "idx#0",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "proof#0 (copy)"
      ]
    },
    "113": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "idx#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "116": {
      "op": "frame_dig 2",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "aggregate%array_trimmed%0#0",
        "idx#0"
      ]
    },
    "118": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "idx#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "aggregate%array_trimmed%0#0",
        "idx#0",
        "32"
      ]
    },
    "119": {
      "op": "*",
      "defined_out": [
        "aggregate%array_length%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "idx#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "120": {
      "op": "intc_2 // 32",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "32"
      ]
    },
    "121": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%array_length%0#0",
        "b#0",
        "idx#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "b#0"
      ]
    },
    "122": {
      "op": "dup",
      "defined_out": [
        "aggregate%array_length%0#0",
        "b#0",
        "idx#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "b#0",
        "b#0"
      ]
    },
    "123": {
      "op": "frame_dig 3",
      "defined_out": [
        "aggregate%array_length%0#0",
        "b#0",
        "computed#1",
        "idx#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "b#0",
        "b#0",
        "computed#1"
      ]
    },
    "125": {
      "op": "b>",
      "defined_out": [
        "aggregate%array_length%0#0",
        "b#0",
        "computed#1",
        "idx#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "b#0",
        "tmp%0#0"
      ]
    },
    "126": {
      "op": "bz verify_ternary_false@5",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "b#0"
      ]
    },
    "129": {
      "op": "frame_dig 3",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "b#0",
        "computed#1"
      ]
    },
    "131": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "computed#1",
        "b#0"
      ]
    },
    "132": {
      "op": "concat",
      "defined_out": [
        "aggregate%array_length%0#0",
        "computed#1",
        "idx#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "ternary_result%0#0"
      ]
    },
    "133": {
      "block": "verify_ternary_merge@6",
      "stack_in": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "ternary_result%0#0"
      ],
      "op": "sha256",
      "defined_out": [
        "computed#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "computed#1"
      ]
    },
    "134": {
      "op": "frame_bury 3",
      "defined_out": [
        "computed#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1"
      ]
    },
    "136": {
      "op": "frame_dig 2",
      "defined_out": [
        "computed#1",
        "idx#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "idx#0"
      ]
    },
    "138": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "idx#0",
        "1"
      ]
    },
    "139": {
      "op": "+",
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "idx#0"
      ]
    },
    "140": {
      "op": "frame_bury 2",
      "defined_out": [
        "computed#1",
        "idx#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1"
      ]
    },
    "142": {
      "op": "b verify_for_header@2"
    },
    "145": {
      "block": "verify_ternary_false@5",
      "stack_in": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "b#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "b#0",
        "computed#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "b#0",
        "computed#1"
      ]
    },
    "147": {
      "op": "concat",
      "defined_out": [
        "computed#1",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "ternary_result%0#0"
      ]
    },
    "148": {
      "op": "b verify_ternary_merge@6"
    },
    "151": {
      "block": "verify_after_for@7",
      "stack_in": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "maybe_value%0#0"
      ]
    },
    "153": {
      "op": "frame_dig 3",
      "defined_out": [
        "computed#1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "maybe_value%0#0",
        "computed#1"
      ]
    },
    "155": {
      "op": "==",
      "defined_out": [
        "computed#1",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%array_length%0#0",
        "idx#0",
        "computed#1",
        "tmp%0#0"
      ]
    },
    "156": {
      "op": "frame_bury 0"
    },
    "158": {
      "retsub": true,
      "op": "retsub"
    }
  }
}