main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L9
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create(byte[32])void" => block@3, method "verify(byte[32][],byte[32])bool" => block@4, * => block@8}
    block@3: // create_route_L10
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (! tmp%5#0)
        (assert tmp%6#0) // can only call when creating
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        examples.merkle.contract.MerkleTree.create(reinterpret_Encoded(uint8[32])%0#0)
        let examples.merkle.contract.MerkleTree.__puya_arc4_router__%0#0: bool = 1u
        goto block@9
    block@4: // verify_route_L14
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        (assert tmp%9#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = (txna ApplicationArgs 2)
        let tmp%11#0: bool = examples.merkle.contract.MerkleTree.verify(reinterpret_Encoded(len+uint8[32][])%0#0, reinterpret_Encoded(uint8[32])%1#0)
        let aggregate%encoded_bool%0#1: bytes[1] = (setbit 0x00 0u tmp%11#0)
        let aggregate%as_Encoded(bool8)%0#1: Encoded(bool8) = aggregate%encoded_bool%0#1
        let tmp%12#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#1
        let tmp%13#0: bytes = (concat 0x151f7c75 tmp%12#0)
        (log tmp%13#0)
        let examples.merkle.contract.MerkleTree.__puya_arc4_router__%0#1: bool = 1u
        goto block@9
    block@8: // after_if_else_L9
        let examples.merkle.contract.MerkleTree.__puya_arc4_router__%0#2: bool = 0u
        goto block@9
    block@9: // after_inlined_examples.merkle.contract.MerkleTree.__puya_arc4_router___L1
        let tmp%0#0: bool = φ(examples.merkle.contract.MerkleTree.__puya_arc4_router__%0#0 <- block@3, examples.merkle.contract.MerkleTree.__puya_arc4_router__%0#1 <- block@4, examples.merkle.contract.MerkleTree.__puya_arc4_router__%0#2 <- block@8)
        return tmp%0#0

subroutine examples.merkle.contract.MerkleTree.create(root: Encoded(uint8[32])) -> void:
    block@0: // L10
        (app_global_put "root" root#0)
        return 

subroutine examples.merkle.contract.MerkleTree.verify(proof: Encoded(len+uint8[32][]), leaf: Encoded(uint8[32])) -> bool:
    block@0: // L14
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "root")
        (assert maybe_exists%0#0) // check self.root exists
        let array_length%0#0: uint64 = (extract_uint16 proof#0 0u)
        let idx#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L22
        let idx#1: uint64 = φ(idx#0 <- block@0, idx#2 <- block@6)
        let computed#1: bytes = φ(leaf#0 <- block@0, computed#2 <- block@6)
        let continue_looping%0#0: bool = (< idx#1 array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@7
    block@3: // for_body_L23
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) proof#0)
        let aggregate%bytes_offset%0#1: uint64 = (* idx#1 32u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 32u) // on error: index access is out of bounds
        let b#0: bytes = aggregate%encoded_element%0#1
        let tmp%0#2: bool = (b< computed#1 b#0)
        goto tmp%0#2 ? block@4 : block@5
    block@4: // ternary_true_L29
        let ternary_result%0#0: bytes = (concat computed#1 b#0)
        goto block@6
    block@5: // ternary_false_L29
        let ternary_result%0#1: bytes = (concat b#0 computed#1)
        goto block@6
    block@6: // ternary_merge_L29
        let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@4, ternary_result%0#1 <- block@5)
        let computed#2: bytes = (sha256 ternary_result%0#2)
        let idx#2: uint64 = (+ idx#1 1u)
        goto block@2
    block@7: // after_for_L22
        let tmp%0#0: bool = (== maybe_value%0#0 computed#1)
        return tmp%0#0