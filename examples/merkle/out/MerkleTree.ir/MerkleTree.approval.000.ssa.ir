main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = examples.merkle.contract.MerkleTree.__puya_arc4_router__()
        return tmp%0#0

subroutine examples.merkle.contract.compute_root_hash(proof: Encoded(len+uint8[32][]), leaf: bytes) -> <bytes, Encoded(len+uint8[32][])>:
    block@0: // L19
        let proof%is_original#0: bool = 1u
        let proof%out#0: Encoded(len+uint8[32][]) = proof#0
        let computed#0: bytes = leaf#0
        let tmp%0#0: uint64 = array_len(proof#0)
        (assert 1u) // Step cannot be zero
        let idx#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L22
        let idx#1: uint64 = φ(idx#0 <- block@0, idx#2 <- block@3)
        let computed#1: bytes = φ(computed#0 <- block@0, computed#2 <- block@3)
        let continue_looping%0#0: bool = (< idx#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L23
        let array_item%0#0: Encoded(uint8[32]) = extract_value(proof#0, idx#1)
        let tmp%1#0: bytes = examples.merkle.contract.hash_pair(computed#1, array_item%0#0)
        let computed#2: bytes = tmp%1#0
        goto block@3
    block@3: // for_footer_L22
        let idx#2: uint64 = (+ idx#1 1u)
        goto block@1
    block@4: // after_for_L22
        return computed#1 proof#0

subroutine examples.merkle.contract.hash_pair(a: bytes, b: bytes) -> bytes:
    block@0: // L27
        let reinterpret_biguint%0#0: biguint = a#0
        let reinterpret_biguint%1#0: biguint = b#0
        let tmp%0#0: bool = (b< reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // ternary_true_L29
        let ternary_result%0#0: bytes = (concat a#0 b#0)
        goto block@3
    block@2: // ternary_false_L29
        let ternary_result%0#1: bytes = (concat b#0 a#0)
        goto block@3
    block@3: // ternary_merge_L29
        let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2)
        let tmp%1#0: bytes = (sha256 ternary_result%0#2)
        return tmp%1#0

subroutine examples.merkle.contract.MerkleTree.__puya_arc4_router__() -> bool:
    block@0: // L9
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@1, 1u => block@5, 2u => block@9, 3u => block@10, 4u => block@11, 5u => block@12, 6u => block@13, 7u => block@14, 8u => block@15, 9u => block@16, 10u => block@17, 11u => block@18, * => block@19}
    block@1: // switch_case_0_L9
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "verify(byte[32][],byte[32])bool" => block@2, * => block@3}
    block@2: // verify_route_L14
        examples.merkle.contract.MerkleTree.verify[routing]()
        goto block@4
    block@3: // switch_case_default_L9
        goto block@4
    block@4: // switch_case_next_L9
        fail // this contract does not implement the given ABI method for call NoOp
    block@5: // switch_case_1_L9
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "create(byte[32])void" => block@6, * => block@7}
    block@6: // create_route_L10
        examples.merkle.contract.MerkleTree.create[routing]()
        goto block@8
    block@7: // switch_case_default_L9
        goto block@8
    block@8: // switch_case_next_L9
        fail // this contract does not implement the given ABI method for create NoOp
    block@9: // switch_case_2_L9
        goto block@19
    block@10: // switch_case_3_L9
        goto block@19
    block@11: // switch_case_4_L9
        goto block@19
    block@12: // switch_case_5_L9
        goto block@19
    block@13: // switch_case_6_L9
        goto block@19
    block@14: // switch_case_7_L9
        goto block@19
    block@15: // switch_case_8_L9
        goto block@19
    block@16: // switch_case_9_L9
        goto block@19
    block@17: // switch_case_10_L9
        goto block@19
    block@18: // switch_case_11_L9
        goto block@19
    block@19: // switch_case_default_L9
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine examples.merkle.contract.MerkleTree.create[routing]() -> void:
    block@0: // L10
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        examples.merkle.contract.MerkleTree.create(reinterpret_Encoded(uint8[32])%0#0)
        exit 1u

subroutine examples.merkle.contract.MerkleTree.verify[routing]() -> void:
    block@0: // L14
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 2)
        let tmp%0#0: bool = examples.merkle.contract.MerkleTree.verify(reinterpret_Encoded(len+uint8[32][])%0#0, reinterpret_Encoded(uint8[32])%0#0)
        let tmp%1#0: Encoded(bool8) = bytes_encode<bool8>(tmp%0#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine examples.merkle.contract.MerkleTree.create(root: Encoded(uint8[32])) -> void:
    block@0: // L10
        (app_global_put "root" root#0)
        return 

subroutine examples.merkle.contract.MerkleTree.verify(proof: Encoded(len+uint8[32][]), leaf: Encoded(uint8[32])) -> bool:
    block@0: // L14
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "root")
        (assert maybe_exists%0#0) // check self.root exists
        let (compute_root_hash%0#0: bytes, compute_root_hash%1#0: Encoded(len+uint8[32][])) = examples.merkle.contract.compute_root_hash(proof#0, leaf#0)
        let proof#1: Encoded(len+uint8[32][]) = compute_root_hash%1#0
        let tmp%0#0: bool = (== maybe_value%0#0 compute_root_hash%0#0)
        return tmp%0#0