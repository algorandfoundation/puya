// Op                                                                                          Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // merkle/contract.py:9
        // class MerkleTree(arc4.ARC4Contract):
        txn OnCompletion                                                                       tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                                         tmp%0#1
        !                                                                                      tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                         tmp%1#0
        assert // OnCompletion must be NoOp
        txn ApplicationID                                                                      tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                         tmp%2#0
        bz main_create_NoOp@5 ; b main_call_NoOp@2

    main_call_NoOp@2:
        // merkle/contract.py:9
        // class MerkleTree(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                                 tmp%4#0
        v-store tmp%4#0
        method verify(byte[32][],byte[32])bool                                                 Method(verify(byte[32][],byte[32])bool)
        v-load tmp%4#0                                                                         Method(verify(byte[32][],byte[32])bool),tmp%4#0
        match main_verify_route@3 ; b main_after_if_else@8

    main_verify_route@3:
        // merkle/contract.py:14
        // @arc4.abimethod
        callsub verify
        b main_after_if_else@8

    main_create_NoOp@5:
        // merkle/contract.py:9
        // class MerkleTree(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                                 tmp%5#0
        v-store tmp%5#0
        method create(byte[32])void                                                            Method(create(byte[32])void)
        v-load tmp%5#0                                                                         Method(create(byte[32])void),tmp%5#0
        match main_create_route@6 ; b main_after_if_else@8

    main_create_route@6:
        // merkle/contract.py:10
        // @arc4.abimethod(create="require")
        callsub create
        b main_after_if_else@8

    main_after_if_else@8:
        // merkle/contract.py:9
        // class MerkleTree(arc4.ARC4Contract):
        err


// examples.merkle.contract.MerkleTree.create[routing]() -> void:
subroutine create:
    create_block@0:
        // merkle/contract.py:10
        // @arc4.abimethod(create="require")
        txna ApplicationArgs 1                                                                 root#0
        v-store root#0
        v-load root#0                                                                          root#0
        len                                                                                    len%0#0
        v-store len%0#0
        v-load len%0#0                                                                         len%0#0
        int 32                                                                                 len%0#0,32
        ==                                                                                     eq%0#0
        v-store eq%0#0
        v-load eq%0#0                                                                          eq%0#0
        assert // invalid number of bytes for uint8[32]
        // merkle/contract.py:12
        // self.root = root.bytes
        byte "root"                                                                            "root"
        v-load root#0                                                                          "root",root#0
        app_global_put
        // merkle/contract.py:10
        // @arc4.abimethod(create="require")
        int 1                                                                                  1
        return


// examples.merkle.contract.MerkleTree.verify[routing]() -> void:
subroutine verify:
    verify_block@0:
        // merkle/contract.py:14
        // @arc4.abimethod
        txna ApplicationArgs 1                                                                 proof#0
        v-store proof#0
        v-load proof#0                                                                         proof#0
        int 0                                                                                  proof#0,0
        extract_uint16                                                                         aggregate%array_length%0#0
        v-store aggregate%array_length%0#0
        v-load aggregate%array_length%0#0                                                      aggregate%array_length%0#0
        int 32                                                                                 aggregate%array_length%0#0,32
        *                                                                                      mul%0#0
        v-store mul%0#0
        v-load mul%0#0                                                                         mul%0#0
        int 2                                                                                  mul%0#0,2
        +                                                                                      add%0#0
        v-store add%0#0
        v-load proof#0                                                                         proof#0
        len                                                                                    len%0#0
        v-store len%0#0
        v-load len%0#0                                                                         len%0#0
        v-load add%0#0                                                                         len%0#0,add%0#0
        ==                                                                                     eq%0#0
        v-store eq%0#0
        v-load eq%0#0                                                                          eq%0#0
        assert // invalid number of bytes for (len+uint8[32][])
        txna ApplicationArgs 2                                                                 leaf#0
        v-store leaf#0
        v-load leaf#0                                                                          leaf#0
        len                                                                                    len%1#0
        v-store len%1#0
        v-load len%1#0                                                                         len%1#0
        int 32                                                                                 len%1#0,32
        ==                                                                                     eq%1#0
        v-store eq%1#0
        v-load eq%1#0                                                                          eq%1#0
        assert // invalid number of bytes for uint8[32]
        // merkle/contract.py:16
        // return self.root == compute_root_hash(proof, leaf.bytes)
        int 0                                                                                  0
        byte "root"                                                                            0,"root"
        app_global_get_ex                                                                      maybe_value%0#0,maybe_exists%0#0
        v-store maybe_exists%0#0                                                               maybe_value%0#0
        v-store maybe_value%0#0
        v-load maybe_exists%0#0                                                                maybe_exists%0#0
        assert // check self.root exists
        // merkle/contract.py:22
        // for idx in urange(proof.length):
        int 0                                                                                  0
        v-store value_internal%0#0
        v-load leaf#0                                                                          leaf#0
        v-store computed#1
        v-load value_internal%0#0                                                              value_internal%0#0
        v-store idx#0
        b verify_for_header@2

    verify_for_header@2:
        // merkle/contract.py:22
        // for idx in urange(proof.length):
        v-load idx#0                                                                           idx#0
        v-load aggregate%array_length%0#0                                                      idx#0,aggregate%array_length%0#0
        <                                                                                      continue_looping%0#0
        v-store continue_looping%0#0
        v-load continue_looping%0#0                                                            continue_looping%0#0
        bz verify_after_for@7 ; b verify_for_body@3

    verify_for_body@3:
        // merkle/contract.py:23
        // computed = hash_pair(computed, proof[idx].bytes)
        v-load proof#0                                                                         proof#0
        extract 2 0                                                                            aggregate%array_trimmed%0#0
        v-store aggregate%array_trimmed%0#0
        v-load idx#0                                                                           idx#0
        int 32                                                                                 idx#0,32
        *                                                                                      aggregate%bytes_offset%0#0
        v-store aggregate%bytes_offset%0#0
        v-load aggregate%array_trimmed%0#0                                                     aggregate%array_trimmed%0#0
        v-load aggregate%bytes_offset%0#0                                                      aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0
        int 32                                                                                 aggregate%array_trimmed%0#0,aggregate%bytes_offset%0#0,32
        extract3 // on error: index access is out of bounds                                    b#0
        v-store b#0
        // merkle/contract.py:29
        // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
        v-load computed#1                                                                      computed#1
        v-load b#0                                                                             computed#1,b#0
        b<                                                                                     tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                                         tmp%0#1
        bz verify_ternary_false@5 ; b verify_ternary_true@4

    verify_ternary_true@4:
        // merkle/contract.py:29
        // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
        v-load computed#1                                                                      computed#1
        v-load b#0                                                                             computed#1,b#0
        concat                                                                                 ternary_result%0#0
        v-store ternary_result%0#0
        b verify_ternary_merge@6

    verify_ternary_false@5:
        // merkle/contract.py:29
        // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
        v-load b#0                                                                             b#0
        v-load computed#1                                                                      b#0,computed#1
        concat                                                                                 ternary_result%0#0
        v-store ternary_result%0#0
        b verify_ternary_merge@6

    verify_ternary_merge@6:
        // merkle/contract.py:29
        // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
        v-load ternary_result%0#0                                                              ternary_result%0#0
        sha256                                                                                 computed#1
        v-store computed#1
        // merkle/contract.py:22
        // for idx in urange(proof.length):
        v-load idx#0                                                                           idx#0
        int 1                                                                                  idx#0,1
        +                                                                                      value_internal%0#0
        v-store value_internal%0#0
        v-load value_internal%0#0                                                              value_internal%0#0
        v-store idx#0
        b verify_for_header@2

    verify_after_for@7:
        // merkle/contract.py:16
        // return self.root == compute_root_hash(proof, leaf.bytes)
        v-load maybe_value%0#0                                                                 maybe_value%0#0
        v-load computed#1                                                                      maybe_value%0#0,computed#1
        ==                                                                                     tmp%0#1
        v-store tmp%0#1
        // merkle/contract.py:14
        // @arc4.abimethod
        byte 0x00                                                                              0x00
        int 0                                                                                  0x00,0
        v-load tmp%0#1                                                                         0x00,0,tmp%0#1
        setbit                                                                                 aggregate%encoded_bool%0#0
        v-store aggregate%encoded_bool%0#0
        byte 0x151f7c75                                                                        0x151f7c75
        v-load aggregate%encoded_bool%0#0                                                      0x151f7c75,aggregate%encoded_bool%0#0
        concat                                                                                 tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                         tmp%4#0
        log
        int 1                                                                                  1
        return


