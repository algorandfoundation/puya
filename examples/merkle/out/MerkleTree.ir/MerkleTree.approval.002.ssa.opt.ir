main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%1#0: uint64 = (txn OnCompletion)
        let tmp%2#0: bool = (! tmp%1#0)
        (assert tmp%2#0) // OnCompletion is not NoOp
        let tmp%4#0: bool = (txn ApplicationID)
        goto tmp%4#0 ? block@4 : block@8
    block@4: // call_NoOp_L9
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        let eq%tmp%5#0: bool = (== tmp%5#0 method "verify(byte[32][],byte[32])bool")
        (assert eq%tmp%5#0)
        examples.merkle.contract.MerkleTree.verify[routing]()
        goto block@12
    block@8: // create_NoOp_L9
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        let eq%tmp%6#0: bool = (== tmp%6#0 method "create(byte[32])void")
        (assert eq%tmp%6#0)
        examples.merkle.contract.MerkleTree.create[routing]()
        goto block@12
    block@12: // after_if_else_L9
        fail

subroutine examples.merkle.contract.MerkleTree.create[routing]() -> void:
    block@0: // L10
        let root#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        (app_global_put "root" root#0)
        exit 1u

subroutine examples.merkle.contract.MerkleTree.verify[routing]() -> void:
    block@0: // L14
        let proof#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let leaf#0: Encoded(uint8[32]) = (txna ApplicationArgs 2)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "root")
        (assert maybe_exists%0#0) // check self.root exists
        let tmp%0#2: uint64 = array_len(proof#0)
        let idx#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L22
        let idx#1: uint64 = φ(idx#0 <- block@0, idx#2 <- block@6)
        let computed#1: bytes = φ(leaf#0 <- block@0, computed#2 <- block@6)
        let continue_looping%0#0: bool = (< idx#1 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@7
    block@3: // for_body_L23
        let b#0: bytes = extract_value(proof#0, idx#1)
        let tmp%0#3: bool = (b< computed#1 b#0)
        goto tmp%0#3 ? block@4 : block@5
    block@4: // ternary_true_L29
        let ternary_result%0#0: bytes = (concat computed#1 b#0)
        goto block@6
    block@5: // ternary_false_L29
        let ternary_result%0#1: bytes = (concat b#0 computed#1)
        goto block@6
    block@6: // ternary_merge_L29
        let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@4, ternary_result%0#1 <- block@5)
        let computed#2: bytes = (sha256 ternary_result%0#2)
        let idx#2: uint64 = (+ idx#1 1u)
        goto block@2
    block@7: // after_for_L22
        let tmp%0#1: bool = (== maybe_value%0#0 computed#1)
        let tmp%1#0: Encoded(bool8) = bytes_encode<bool8>(tmp%0#1)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u