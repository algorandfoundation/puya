// Op                                                                                          Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // merkle/contract.py:9
        // class MerkleTree(arc4.ARC4Contract):
        txn NumAppArgs                                                                         tmp%0#1
        bz main_after_if_else@8 ; b main_abi_routing@2

    main_abi_routing@2:
        // merkle/contract.py:9
        // class MerkleTree(arc4.ARC4Contract):
        txna ApplicationArgs 0                                                                 tmp%2#0
        method create(byte[32])void                                                            tmp%2#0,Method(create(byte[32])void)
        method verify(byte[32][],byte[32])bool                                                 tmp%2#0,Method(create(byte[32])void),Method(verify(byte[32][],byte[32])bool)
        l-load tmp%2#0 2                                                                       Method(create(byte[32])void),Method(verify(byte[32][],byte[32])bool),tmp%2#0
        match main_create_route@3 main_verify_route@4 ; b main_after_if_else@8

    main_create_route@3:
        // merkle/contract.py:10
        // @arc4.abimethod(create="require")
        txn OnCompletion                                                                       tmp%3#0
        !                                                                                      tmp%4#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                      tmp%5#0
        !                                                                                      tmp%6#0
        assert // can only call when creating
        // merkle/contract.py:9
        // class MerkleTree(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                 reinterpret_Encoded(uint8[32])%0#0
        // merkle/contract.py:10
        // @arc4.abimethod(create="require")
        callsub create
        int 1                                                                                  tmp%0#0
        x-store tmp%0#0                                                                        (洧뎶) tmp%0#0 |
        b main_after_inlined_examples.merkle.contract.MerkleTree.__puya_arc4_router__@9        (洧뎶) tmp%0#0 |

    main_verify_route@4:
        // merkle/contract.py:14
        // @arc4.abimethod
        txn OnCompletion                                                                       tmp%7#0
        !                                                                                      tmp%8#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                      tmp%9#0
        assert // can only call when not creating
        // merkle/contract.py:9
        // class MerkleTree(arc4.ARC4Contract):
        txna ApplicationArgs 1                                                                 reinterpret_Encoded(len+uint8[32][])%0#0
        txna ApplicationArgs 2                                                                 reinterpret_Encoded(len+uint8[32][])%0#0,reinterpret_Encoded(uint8[32])%1#0
        // merkle/contract.py:14
        // @arc4.abimethod
        l-load reinterpret_Encoded(len+uint8[32][])%0#0 1                                      reinterpret_Encoded(uint8[32])%1#0,reinterpret_Encoded(len+uint8[32][])%0#0
        l-load reinterpret_Encoded(uint8[32])%1#0 1                                            reinterpret_Encoded(len+uint8[32][])%0#0,reinterpret_Encoded(uint8[32])%1#0
        callsub verify                                                                         to_encode%0#0
        byte 0x00                                                                              to_encode%0#0,0x00
        int 0                                                                                  to_encode%0#0,0x00,0
        l-load to_encode%0#0 2                                                                 0x00,0,to_encode%0#0
        setbit                                                                                 encoded_bool%0#0
        byte 0x151f7c75                                                                        encoded_bool%0#0,0x151f7c75
        l-load encoded_bool%0#0 1                                                              0x151f7c75,encoded_bool%0#0
        concat                                                                                 tmp%11#0
        log
        int 1                                                                                  tmp%0#0
        x-store tmp%0#0                                                                        (洧뎶) tmp%0#0 |
        b main_after_inlined_examples.merkle.contract.MerkleTree.__puya_arc4_router__@9        (洧뎶) tmp%0#0 |

    main_after_if_else@8:
        // merkle/contract.py:9
        // class MerkleTree(arc4.ARC4Contract):
        int 0                                                                                  tmp%0#0
        x-store tmp%0#0                                                                        (洧뎶) tmp%0#0 |
        b main_after_inlined_examples.merkle.contract.MerkleTree.__puya_arc4_router__@9        (洧뎶) tmp%0#0 |

    main_after_inlined_examples.merkle.contract.MerkleTree.__puya_arc4_router__@9:             (洧뎶) tmp%0#0 |
        x-load tmp%0#0                                                                         tmp%0#0
        return


// examples.merkle.contract.MerkleTree.create(root: bytes) -> void:
subroutine create:
    create_block@0:                                                                            (洧도) root#0 |
        // merkle/contract.py:12
        // self.root = root.bytes
        byte "root"                                                                            (洧도) root#0 | "root"
        p-load root#0                                                                          (洧도) root#0 | "root",root#0 (copy)
        app_global_put                                                                         (洧도) root#0 |
        retsub


// examples.merkle.contract.MerkleTree.verify(proof: bytes, leaf: bytes) -> uint64:
subroutine verify:
    verify_block@0:                                                                            (洧도) proof#0,leaf#0 |
        // merkle/contract.py:16
        // return self.root == compute_root_hash(proof, leaf.bytes)
        int 0                                                                                  (洧도) proof#0,leaf#0 | 0
        byte "root"                                                                            (洧도) proof#0,leaf#0 | 0,"root"
        app_global_get_ex                                                                      (洧도) proof#0,leaf#0 | maybe_value%0#0,maybe_exists%0#0
        l-store maybe_exists%0#0 1                                                             (洧도) proof#0,leaf#0 | maybe_exists%0#0,maybe_value%0#0
        f-store maybe_value%0#0                                                                (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0 | maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                              (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0 | maybe_exists%0#0
        assert // check self.root exists                                                       (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0 |
        // merkle/contract.py:22
        // for idx in urange(proof.length):
        p-load proof#0                                                                         (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0 | proof#0 (copy)
        int 0                                                                                  (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0 | proof#0 (copy),0
        extract_uint16                                                                         (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0 | array%array_length%0#1
        f-store array%array_length%0#1                                                         (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1 |
        int 0                                                                                  (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1 | idx#0
        f-store idx#0                                                                          (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0 |
        p-load leaf#0                                                                          (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0 | computed#1
        f-store computed#1                                                                     (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 |
        b verify_for_header@2                                                                  (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 |

    verify_for_header@2:                                                                       (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 |
        // merkle/contract.py:22
        // for idx in urange(proof.length):
        f-load idx#0                                                                           (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | idx#0
        f-load array%array_length%0#1                                                          (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | idx#0,array%array_length%0#1
        <                                                                                      (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | continue_looping%0#0
        bz verify_after_for@7 ; b verify_for_body@3                                            (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 |

    verify_for_body@3:                                                                         (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 |
        // merkle/contract.py:23
        // computed = hash_pair(computed, proof[idx].bytes)
        p-load proof#0                                                                         (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | proof#0 (copy)
        extract 2 0                                                                            (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | array_trimmed%0#0
        f-load idx#0                                                                           (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | array_trimmed%0#0,idx#0
        int 32                                                                                 (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | array_trimmed%0#0,idx#0,32
        *                                                                                      (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | array_trimmed%0#0,bytes_offset%0#0
        l-load array_trimmed%0#0 1                                                             (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | bytes_offset%0#0,array_trimmed%0#0
        l-load bytes_offset%0#0 1                                                              (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | array_trimmed%0#0,bytes_offset%0#0
        int 32                                                                                 (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | array_trimmed%0#0,bytes_offset%0#0,32
        extract3 // on error: index access is out of bounds                                    (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | b#0
        l-store-copy b#0 0                                                                     (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | b#0,b#0
        x-store b#0                                                                            (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | (洧뎶) b#0 | b#0
        // merkle/contract.py:29
        // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
        f-load computed#1                                                                      (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | (洧뎶) b#0 | b#0,computed#1
        l-load b#0 1                                                                           (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | (洧뎶) b#0 | computed#1,b#0
        b<                                                                                     (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | (洧뎶) b#0 | tmp%0#0
        bz verify_ternary_false@5 ; b verify_ternary_true@4                                    (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | (洧뎶) b#0 |

    verify_ternary_true@4:                                                                     (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | (洧뎶) b#0 |
        // merkle/contract.py:29
        // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
        f-load computed#1                                                                      (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | (洧뎶) b#0 | computed#1
        x-load b#0                                                                             (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | computed#1,b#0
        concat                                                                                 (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | ternary_result%0#0
        x-store ternary_result%0#0                                                             (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | (洧뎶) ternary_result%0#0 |
        b verify_ternary_merge@6                                                               (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | (洧뎶) ternary_result%0#0 |

    verify_ternary_false@5:                                                                    (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | (洧뎶) b#0 |
        // merkle/contract.py:29
        // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
        x-load b#0                                                                             (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | b#0
        f-load computed#1                                                                      (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | b#0,computed#1
        concat                                                                                 (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | ternary_result%0#0
        x-store ternary_result%0#0                                                             (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | (洧뎶) ternary_result%0#0 |
        b verify_ternary_merge@6                                                               (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | (洧뎶) ternary_result%0#0 |

    verify_ternary_merge@6:                                                                    (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | (洧뎶) ternary_result%0#0 |
        // merkle/contract.py:29
        // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
        x-load ternary_result%0#0                                                              (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | ternary_result%0#0
        sha256                                                                                 (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | computed#1
        f-store computed#1                                                                     (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 |
        // merkle/contract.py:22
        // for idx in urange(proof.length):
        f-load idx#0                                                                           (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | idx#0
        int 1                                                                                  (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | idx#0,1
        +                                                                                      (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | idx#0
        f-store idx#0                                                                          (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 |
        b verify_for_header@2                                                                  (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 |

    verify_after_for@7:                                                                        (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 |
        // merkle/contract.py:16
        // return self.root == compute_root_hash(proof, leaf.bytes)
        f-load maybe_value%0#0                                                                 (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | maybe_value%0#0
        f-load computed#1                                                                      (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | maybe_value%0#0,computed#1
        ==                                                                                     (洧도) proof#0,leaf#0 | (洧뎽) maybe_value%0#0,array%array_length%0#1,idx#0,computed#1 | tmp%0#0
        retsub                                                                                 tmp%0#0


