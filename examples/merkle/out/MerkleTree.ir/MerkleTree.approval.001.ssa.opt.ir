main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn OnCompletion)
        let tmp%1#0: bool = (! tmp%0#1)
        (assert tmp%1#0) // OnCompletion must be NoOp
        let tmp%2#0: uint64 = (txn ApplicationID)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        goto tmp%2#0 ? block@2 : block@5
    block@2: // call_NoOp_L9
        let tmp%4#0: bytes = (txna ApplicationArgs 0)
        switch tmp%4#0 {method "verify(byte[32][],byte[32])bool" => block@3, * => block@8}
    block@3: // verify_route_L14
        examples.merkle.contract.MerkleTree.verify[routing]()
        goto block@8
    block@5: // create_NoOp_L9
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "create(byte[32])void" => block@6, * => block@8}
    block@6: // create_route_L10
        examples.merkle.contract.MerkleTree.create[routing]()
        goto block@8
    block@8: // after_if_else_L9
        fail

subroutine examples.merkle.contract.compute_root_hash(proof: Encoded(len+uint8[32][]), leaf: bytes) -> <bytes, Encoded(len+uint8[32][])>:
    block@0: // L19
        let tmp%0#0: uint64 = array_len(proof#0)
        let value_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L22
        let idx#0: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@8)
        let computed#1: bytes = φ(leaf#0 <- block@0, computed#2 <- block@8)
        let continue_looping%0#0: bool = (< idx#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L23
        let b#0: bytes = extract_value(proof#0, idx#0)
        let tmp%0#1: bool = (b< computed#1 b#0)
        goto tmp%0#1 ? block@6 : block@7
    block@6: // ternary_true_L29
        let ternary_result%0#0: bytes = (concat computed#1 b#0)
        goto block@8
    block@7: // ternary_false_L29
        let ternary_result%0#1: bytes = (concat b#0 computed#1)
        goto block@8
    block@8: // ternary_merge_L29
        let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@6, ternary_result%0#1 <- block@7)
        let computed#2: bytes = (sha256 ternary_result%0#2)
        let value_internal%0#2: uint64 = (+ idx#0 1u)
        goto block@1
    block@4: // after_for_L22
        return computed#1 proof#0

subroutine examples.merkle.contract.MerkleTree.create[routing]() -> void:
    block@0: // L10
        let root#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len root#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for uint8[32]
        (app_global_put "root" root#0)
        exit 1u

subroutine examples.merkle.contract.MerkleTree.verify[routing]() -> void:
    block@0: // L14
        let proof#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(proof#0)
        let mul%0#0: uint64 = (* length%0#0 32u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len proof#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint8[32][])
        let leaf#0: Encoded(uint8[32]) = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len leaf#0)
        let eq%1#0: bool = (== len%1#0 32u)
        (assert eq%1#0) // invalid number of bytes for uint8[32]
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "root")
        (assert maybe_exists%0#0) // check self.root exists
        let (compute_root_hash%0#0: bytes, proof#1: Encoded(len+uint8[32][])) = examples.merkle.contract.compute_root_hash(proof#0, leaf#0)
        let tmp%0#1: bool = (== maybe_value%0#0 compute_root_hash%0#0)
        let tmp%3#0: Encoded(bool8) = bytes_encode<bool8>(tmp%0#1)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u