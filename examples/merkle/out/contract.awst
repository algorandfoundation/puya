contract MerkleTree
{
  globals {
    ['root']: algopy.Bytes
  }
  
  abimethod create(root: algopy.arc4.StaticArray[algopy.arc4.Byte, typing.Literal[32]]): None
  {
    this.root: algopy.Bytes = reinterpret_cast<algopy.Bytes>(root)
  }
  
  abimethod verify(proof: algopy.arc4.DynamicArray[algopy.arc4.StaticArray[algopy.arc4.Byte, typing.Literal[32]]], leaf: algopy.arc4.StaticArray[algopy.arc4.Byte, typing.Literal[32]]): bool
  {
    return this.root == examples.merkle.contract::compute_root_hash(proof, reinterpret_cast<algopy.Bytes>(leaf))
  }
}

subroutine compute_root_hash(proof: algopy.arc4.DynamicArray[algopy.arc4.StaticArray[algopy.arc4.Byte, typing.Literal[32]]], leaf: algopy.Bytes): algopy.Bytes
{
  computed: algopy.Bytes = leaf
  for idx in range(0u, extract_uint16(proof, 0u), 1u) {
    computed: algopy.Bytes = examples.merkle.contract::hash_pair(computed, reinterpret_cast<algopy.Bytes>(proof[idx]))
  }
  return computed
}

subroutine hash_pair(a: algopy.Bytes, b: algopy.Bytes): algopy.Bytes
{
  return sha256((reinterpret_cast<algopy.BigUInt>(a) < reinterpret_cast<algopy.BigUInt>(b)) ? (a + b) : (b + a))
}