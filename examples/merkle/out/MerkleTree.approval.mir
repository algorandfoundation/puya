// Op                                                          //                                                           Op Description                                                                                    Stack (out)                                                                                             Live (out)            X stack                                                                             Source code                                                                         Source line

#pragma version 10

// examples.merkle.contract.MerkleTree.approval_program() -> uint64:
main_block@0:
    txna ApplicationArgs 0                                     //                                                                                                                                                             {txna}                                                                                                                                                                                                            class MerkleTree(arc4.ARC4Contract):                                                merkle/contract.py:9
    //                                                         virtual: store tmp%0#0 to l-stack (no copy)                  tmp%0#0                                                                                                                                                                                                                         class MerkleTree(arc4.ARC4Contract):                                                merkle/contract.py:9
    method "create(byte[32])void"                              //                                                                                                                                                             tmp%0#0,method<"create(byte[32])void">                                                                                                                                                                            class MerkleTree(arc4.ARC4Contract):                                                merkle/contract.py:9
    method "verify(byte[32][],byte[32])bool"                   //                                                                                                                                                             tmp%0#0,method<"create(byte[32])void">,method<"verify(byte[32][],byte[32])bool">                                                                                                                                  class MerkleTree(arc4.ARC4Contract):                                                merkle/contract.py:9
    uncover 2                                                  //                                                           load tmp%0#0 from l-stack (no copy)                                                               method<"create(byte[32])void">,method<"verify(byte[32][],byte[32])bool">,tmp%0#0                                                                                                                                  class MerkleTree(arc4.ARC4Contract):                                                merkle/contract.py:9
    match main_create_route@1 main_verify_route@2              //                                                                                                                                                                                                                                                                                                                                                                               class MerkleTree(arc4.ARC4Contract):                                                merkle/contract.py:9
    err // reject transaction                                  //                                                                                                                                                                                                                                                                                                                                                                               class MerkleTree(arc4.ARC4Contract):                                                merkle/contract.py:9

main_create_route@1:
    txn OnCompletion                                           //                                                                                                                                                             {txn}                                                                                                                                                                                                             arc4.abimethod(create="require")                                                    merkle/contract.py:10
    //                                                         virtual: store tmp%1#0 to l-stack (no copy)                  tmp%1#0                                                                                                                                                                                                                         arc4.abimethod(create="require")                                                    merkle/contract.py:10
    //                                                         virtual: load tmp%1#0 from l-stack (no copy)                 tmp%1#0                                                                                                                                                                                                                         arc4.abimethod(create="require")                                                    merkle/contract.py:10
    !                                                          //                                                                                                                                                             {!}                                                                                                                                                                                                               arc4.abimethod(create="require")                                                    merkle/contract.py:10
    //                                                         virtual: store tmp%2#0 to l-stack (no copy)                  tmp%2#0                                                                                                                                                                                                                         arc4.abimethod(create="require")                                                    merkle/contract.py:10
    //                                                         virtual: load tmp%2#0 from l-stack (no copy)                 tmp%2#0                                                                                                                                                                                                                         arc4.abimethod(create="require")                                                    merkle/contract.py:10
    assert // OnCompletion is NoOp                             //                                                                                                                                                                                                                                                                                                                                                                               arc4.abimethod(create="require")                                                    merkle/contract.py:10
    txn ApplicationID                                          //                                                                                                                                                             {txn}                                                                                                                                                                                                             arc4.abimethod(create="require")                                                    merkle/contract.py:10
    //                                                         virtual: store tmp%3#0 to l-stack (no copy)                  tmp%3#0                                                                                                                                                                                                                         arc4.abimethod(create="require")                                                    merkle/contract.py:10
    //                                                         virtual: load tmp%3#0 from l-stack (no copy)                 tmp%3#0                                                                                                                                                                                                                         arc4.abimethod(create="require")                                                    merkle/contract.py:10
    !                                                          //                                                                                                                                                             {!}                                                                                                                                                                                                               arc4.abimethod(create="require")                                                    merkle/contract.py:10
    //                                                         virtual: store tmp%4#0 to l-stack (no copy)                  tmp%4#0                                                                                                                                                                                                                         arc4.abimethod(create="require")                                                    merkle/contract.py:10
    //                                                         virtual: load tmp%4#0 from l-stack (no copy)                 tmp%4#0                                                                                                                                                                                                                         arc4.abimethod(create="require")                                                    merkle/contract.py:10
    assert // is creating                                      //                                                                                                                                                                                                                                                                                                                                                                               arc4.abimethod(create="require")                                                    merkle/contract.py:10
    txna ApplicationArgs 1                                     //                                                                                                                                                             {txna}                                                                                                                                                                                                            class MerkleTree(arc4.ARC4Contract):                                                merkle/contract.py:9
    //                                                         virtual: store tmp%5#0 to l-stack (no copy)                  tmp%5#0                                                                                                                                                                                                                         class MerkleTree(arc4.ARC4Contract):                                                merkle/contract.py:9
    //                                                         virtual: load tmp%5#0 from l-stack (no copy)                 tmp%5#0                                                                                                                                                                                                                         arc4.abimethod(create="require")                                                    merkle/contract.py:10
    callsub create                                             //                                                                                                                                                                                                                                                                                                                                                                               arc4.abimethod(create="require")                                                    merkle/contract.py:10
    int 1                                                      //                                                                                                                                                             1                                                                                                                                                                                                                 arc4.abimethod(create="require")                                                    merkle/contract.py:10
    return                                                     //                                                                                                                                                                                                                                                                                                                                                                               arc4.abimethod(create="require")                                                    merkle/contract.py:10

main_verify_route@2:
    txn OnCompletion                                           //                                                                                                                                                             {txn}                                                                                                                                                                                                             arc4.abimethod                                                                      merkle/contract.py:14
    //                                                         virtual: store tmp%6#0 to l-stack (no copy)                  tmp%6#0                                                                                                                                                                                                                         arc4.abimethod                                                                      merkle/contract.py:14
    //                                                         virtual: load tmp%6#0 from l-stack (no copy)                 tmp%6#0                                                                                                                                                                                                                         arc4.abimethod                                                                      merkle/contract.py:14
    !                                                          //                                                                                                                                                             {!}                                                                                                                                                                                                               arc4.abimethod                                                                      merkle/contract.py:14
    //                                                         virtual: store tmp%7#0 to l-stack (no copy)                  tmp%7#0                                                                                                                                                                                                                         arc4.abimethod                                                                      merkle/contract.py:14
    //                                                         virtual: load tmp%7#0 from l-stack (no copy)                 tmp%7#0                                                                                                                                                                                                                         arc4.abimethod                                                                      merkle/contract.py:14
    assert // OnCompletion is NoOp                             //                                                                                                                                                                                                                                                                                                                                                                               arc4.abimethod                                                                      merkle/contract.py:14
    txn ApplicationID                                          //                                                                                                                                                             {txn}                                                                                                                                                                                                             arc4.abimethod                                                                      merkle/contract.py:14
    //                                                         virtual: store tmp%8#0 to l-stack (no copy)                  tmp%8#0                                                                                                                                                                                                                         arc4.abimethod                                                                      merkle/contract.py:14
    //                                                         virtual: load tmp%8#0 from l-stack (no copy)                 tmp%8#0                                                                                                                                                                                                                         arc4.abimethod                                                                      merkle/contract.py:14
    assert // is not creating                                  //                                                                                                                                                                                                                                                                                                                                                                               arc4.abimethod                                                                      merkle/contract.py:14
    txna ApplicationArgs 1                                     //                                                                                                                                                             {txna}                                                                                                                                                                                                            class MerkleTree(arc4.ARC4Contract):                                                merkle/contract.py:9
    //                                                         virtual: store tmp%9#0 to l-stack (no copy)                  tmp%9#0                                                                                                                                                                                                                         class MerkleTree(arc4.ARC4Contract):                                                merkle/contract.py:9
    txna ApplicationArgs 2                                     //                                                                                                                                                             tmp%9#0,{txna}                                                                                                                                                                                                    class MerkleTree(arc4.ARC4Contract):                                                merkle/contract.py:9
    //                                                         virtual: store tmp%10#0 to l-stack (no copy)                 tmp%9#0,tmp%10#0                                                                                                                                                                                                                class MerkleTree(arc4.ARC4Contract):                                                merkle/contract.py:9
    //                                                         virtual: load tmp%9#0 from l-stack (no copy)                 tmp%10#0,tmp%9#0                                                                                                                                                                                                                arc4.abimethod                                                                      merkle/contract.py:14
    //                                                         virtual: load tmp%10#0 from l-stack (no copy)                tmp%9#0,tmp%10#0                                                                                                                                                                                                                arc4.abimethod                                                                      merkle/contract.py:14
    callsub verify                                             //                                                                                                                                                             {verify}                                                                                                                                                                                                          arc4.abimethod                                                                      merkle/contract.py:14
    //                                                         virtual: store tmp%11#0 to l-stack (no copy)                 tmp%11#0                                                                                                                                                                                                                        arc4.abimethod                                                                      merkle/contract.py:14
    byte 0x00                                                  //                                                                                                                                                             tmp%11#0,0x00                                                                                                                                                                                                     arc4.abimethod                                                                      merkle/contract.py:14
    int 0                                                      //                                                                                                                                                             tmp%11#0,0x00,0                                                                                                                                                                                                   arc4.abimethod                                                                      merkle/contract.py:14
    uncover 2                                                  //                                                           load tmp%11#0 from l-stack (no copy)                                                              0x00,0,tmp%11#0                                                                                                                                                                                                   arc4.abimethod                                                                      merkle/contract.py:14
    setbit                                                     //                                                                                                                                                             {setbit}                                                                                                                                                                                                          arc4.abimethod                                                                      merkle/contract.py:14
    //                                                         virtual: store tmp%12#0 to l-stack (no copy)                 tmp%12#0                                                                                                                                                                                                                        arc4.abimethod                                                                      merkle/contract.py:14
    byte 0x151f7c75                                            //                                                                                                                                                             tmp%12#0,0x151f7c75                                                                                                                                                                                               arc4.abimethod                                                                      merkle/contract.py:14
    swap                                                       //                                                           load tmp%12#0 from l-stack (no copy)                                                              0x151f7c75,tmp%12#0                                                                                                                                                                                               arc4.abimethod                                                                      merkle/contract.py:14
    concat                                                     //                                                                                                                                                             {concat}                                                                                                                                                                                                          arc4.abimethod                                                                      merkle/contract.py:14
    //                                                         virtual: store tmp%13#0 to l-stack (no copy)                 tmp%13#0                                                                                                                                                                                                                        arc4.abimethod                                                                      merkle/contract.py:14
    //                                                         virtual: load tmp%13#0 from l-stack (no copy)                tmp%13#0                                                                                                                                                                                                                        arc4.abimethod                                                                      merkle/contract.py:14
    log                                                        //                                                                                                                                                                                                                                                                                                                                                                               arc4.abimethod                                                                      merkle/contract.py:14
    int 1                                                      //                                                                                                                                                             1                                                                                                                                                                                                                 arc4.abimethod                                                                      merkle/contract.py:14
    return                                                     //                                                                                                                                                                                                                                                                                                                                                                               arc4.abimethod                                                                      merkle/contract.py:14


// examples.merkle.contract.MerkleTree.create(root: bytes) -> void:
create:
    proto 1 0                                                  //                                                                                                                                                             (𝕡) root#0 |                                                                                                                                                                                                      @arc4.abimethod(create="require")\ndef create(self, root: Bytes32) -> None:         merkle/contract.py:10-11

create_block@0:
    byte "root"                                                //                                                                                                                                                             (𝕡) root#0 | "root"                                                                                                                                                                                               self.root                                                                           merkle/contract.py:12
    frame_dig -1                                               //                                                           load root#0 from parameters                                                                       (𝕡) root#0 | "root",root#0                                                                                                                                                                                        self.root = root.bytes                                                              merkle/contract.py:12
    app_global_put                                             //                                                                                                                                                             (𝕡) root#0 |                                                                                                                                                                                                      self.root = root.bytes                                                              merkle/contract.py:12
    retsub                                                     //


// examples.merkle.contract.MerkleTree.verify(proof: bytes, leaf: bytes) -> uint64:
verify:
    proto 2 1                                                  //                                                                                                                                                             (𝕡) proof#0,leaf#0 |                                                                                                                                                                                              @arc4.abimethod\ndef verify(self, proof: Proof, leaf: Bytes32) -> bool:             merkle/contract.py:14-15

verify_block@0:
    int 0                                                      //                                                                                                                                                             (𝕡) proof#0,leaf#0 | 0                                                                                                                                                                                            self.root                                                                           merkle/contract.py:16
    byte "root"                                                //                                                                                                                                                             (𝕡) proof#0,leaf#0 | 0,"root"                                                                                                                                                                                     self.root                                                                           merkle/contract.py:16
    app_global_get_ex                                          //                                                                                                                                                             (𝕡) proof#0,leaf#0 | {app_global_get_ex}.0,{app_global_get_ex}.1                                                                                                                                                  self.root                                                                           merkle/contract.py:16
    //                                                         virtual: store root_exists%0#0 to l-stack (no copy)          (𝕡) proof#0,leaf#0 | root_exists%0#0,{app_global_get_ex}.0                                                                                                                                                                      self.root                                                                           merkle/contract.py:16
    //                                                         virtual: store root_value%0#0 to l-stack (no copy)           (𝕡) proof#0,leaf#0 | root_value%0#0,root_exists%0#0                                                                                                                                                                             self.root                                                                           merkle/contract.py:16
    //                                                         virtual: load root_exists%0#0 from l-stack (no copy)         (𝕡) proof#0,leaf#0 | root_value%0#0,root_exists%0#0                                                                                                                                                                             self.root                                                                           merkle/contract.py:16
    assert // check root exists                                //                                                                                                                                                             (𝕡) proof#0,leaf#0 | root_value%0#0                                                                                                                                                                               self.root                                                                           merkle/contract.py:16
    frame_dig -2                                               //                                                           load proof#0 from parameters                                                                      (𝕡) proof#0,leaf#0 | root_value%0#0,proof#0                                                                                                                                                                       compute_root_hash(proof, leaf.bytes)                                                merkle/contract.py:16
    frame_dig -1                                               //                                                           load leaf#0 from parameters                                                                       (𝕡) proof#0,leaf#0 | root_value%0#0,proof#0,leaf#0                                                                                                                                                                compute_root_hash(proof, leaf.bytes)                                                merkle/contract.py:16
    callsub compute_root_hash                                  //                                                                                                                                                             (𝕡) proof#0,leaf#0 | root_value%0#0,{compute_root_hash}.0,{compute_root_hash}.1                                                                                                                                   compute_root_hash(proof, leaf.bytes)                                                merkle/contract.py:16
    frame_bury -2                                              //                                                           store proof#0 to parameters (no copy)                                                             (𝕡) proof#0,leaf#0 | root_value%0#0,{compute_root_hash}.0                                                                                                                                                         compute_root_hash(proof, leaf.bytes)                                                merkle/contract.py:16
    //                                                         virtual: store compute_root_hash%0#0 to l-stack (no copy)    (𝕡) proof#0,leaf#0 | root_value%0#0,compute_root_hash%0#0                                                                                                                                                                       compute_root_hash(proof, leaf.bytes)                                                merkle/contract.py:16
    //                                                         virtual: load root_value%0#0 from l-stack (no copy)          (𝕡) proof#0,leaf#0 | compute_root_hash%0#0,root_value%0#0                                                                                                                                                                       self.root == compute_root_hash(proof, leaf.bytes)                                   merkle/contract.py:16
    //                                                         virtual: load compute_root_hash%0#0 from l-stack (no copy)   (𝕡) proof#0,leaf#0 | root_value%0#0,compute_root_hash%0#0                                                                                                                                                                       self.root == compute_root_hash(proof, leaf.bytes)                                   merkle/contract.py:16
    ==                                                         //                                                                                                                                                             (𝕡) proof#0,leaf#0 | {==}                                                                                                                                                                                         self.root == compute_root_hash(proof, leaf.bytes)                                   merkle/contract.py:16
    //                                                         virtual: store tmp%0#0 to l-stack (no copy)                  (𝕡) proof#0,leaf#0 | tmp%0#0                                                                                                                                                                                                    self.root == compute_root_hash(proof, leaf.bytes)                                   merkle/contract.py:16
    //                                                         virtual: load tmp%0#0 from l-stack (no copy)                 (𝕡) proof#0,leaf#0 | tmp%0#0                                                                                                                                                                                                    return self.root == compute_root_hash(proof, leaf.bytes)                            merkle/contract.py:16
    retsub                                                     //                                                                                                                                                             tmp%0#0                                                                                                                                                                                                           return self.root == compute_root_hash(proof, leaf.bytes)                            merkle/contract.py:16


// examples.merkle.contract.compute_root_hash(proof: bytes, leaf: bytes) -> bytes, bytes:
compute_root_hash:
    proto 2 2                                                  //                                                                                                                                                             (𝕡) proof#0,leaf#0 |                                                                                                                                                                                              @subroutine\ndef compute_root_hash(proof: Proof, leaf: Bytes) -> Bytes:             merkle/contract.py:19-20

compute_root_hash_block@0:
    frame_dig -2                                               //                                                           load proof#0 from parameters                                                                      (𝕡) proof#0,leaf#0 | proof#0                                                                                                                                                                                      proof.length                                                                        merkle/contract.py:22
    int 0                                                      //                                                                                                                                                             (𝕡) proof#0,leaf#0 | proof#0,0                                                                                                                                                                                    proof.length                                                                        merkle/contract.py:22
    extract_uint16                                             //                                                                                                                                                             (𝕡) proof#0,leaf#0 | {extract_uint16}                                                                                                                                                                             proof.length                                                                        merkle/contract.py:22
    //                                                         virtual: store tmp%0#0 to f-stack                            (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0 |                                                                                                                                                                                              proof.length                                                                        merkle/contract.py:22
    int 0                                                      //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0 | 0                                                                                                                                                                              urange(proof.length)                                                                merkle/contract.py:22
    //                                                         virtual: store range_item%0#0 to l-stack (no copy)           (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0 | range_item%0#0                                                                                                                                                                               idx                                                                                 merkle/contract.py:22
    frame_dig -1                                               //                                                           load leaf#0 from parameters                                                                       (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0 | range_item%0#0,leaf#0
    swap                                                       //                                                           store computed#2 to f-stack                                                                       (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2 | range_item%0#0
    //                                                         virtual: load range_item%0#0 from l-stack (no copy)          (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2 | range_item%0#0
    //                                                         virtual: store idx#0 to f-stack                              (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 |
    // Implicit fall through to compute_root_hash_for_header@1 //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 |

compute_root_hash_for_header@1:
    frame_dig 2                                                //                                                           load idx#0 from f-stack                                                                           (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0                                                                                                                                                         urange(proof.length)                                                                merkle/contract.py:22
    frame_dig 0                                                //                                                           load tmp%0#0 from f-stack                                                                         (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,tmp%0#0                                                                                                                                                 urange(proof.length)                                                                merkle/contract.py:22
    <                                                          //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | {<}                                                                                                                                                           urange(proof.length)                                                                merkle/contract.py:22
    //                                                         virtual: store continue_looping%0#0 to l-stack (no copy)     (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | continue_looping%0#0                                                                                                                                                        urange(proof.length)                                                                merkle/contract.py:22
    //                                                         virtual: load continue_looping%0#0 from l-stack (no copy)    (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | continue_looping%0#0                                                                                                                                                        for idx in urange(proof.length):                                                    merkle/contract.py:22
    bz compute_root_hash_after_for@5                           //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 |                                                                                                                                                               for idx in urange(proof.length):                                                    merkle/contract.py:22
    // Implicit fall through to compute_root_hash_for_body@2   //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 |                                                                                                                                                               for idx in urange(proof.length):                                                    merkle/contract.py:22

compute_root_hash_for_body@2:
    frame_dig -2                                               //                                                           load proof#0 from parameters                                                                      (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | proof#0                                                                                                                                                       proof[idx]                                                                          merkle/contract.py:23
    extract 2 0                                                //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | {extract}                                                                                                                                                     proof[idx]                                                                          merkle/contract.py:23
    //                                                         virtual: store array_head_and_tail%0#0 to l-stack (no copy)  (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | array_head_and_tail%0#0                                                                                                                                                     proof[idx]                                                                          merkle/contract.py:23
    frame_dig 2                                                //                                                           load idx#0 from f-stack                                                                           (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | array_head_and_tail%0#0,idx#0                                                                                                                                 proof[idx]                                                                          merkle/contract.py:23
    dup
    cover 2                                                    //                                                           store idx#0 to l-stack (copy)                                                                     (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,array_head_and_tail%0#0,idx#0                                                                                                                           proof[idx]                                                                          merkle/contract.py:23
    int 32                                                     //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,array_head_and_tail%0#0,idx#0,32                                                                                                                        proof[idx]                                                                          merkle/contract.py:23
    *                                                          //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,array_head_and_tail%0#0,{*}                                                                                                                             proof[idx]                                                                          merkle/contract.py:23
    //                                                         virtual: store item_offset%0#0 to l-stack (no copy)          (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,array_head_and_tail%0#0,item_offset%0#0                                                                                                                               proof[idx]                                                                          merkle/contract.py:23
    //                                                         virtual: load array_head_and_tail%0#0 from l-stack (no copy) (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,item_offset%0#0,array_head_and_tail%0#0                                                                                                                               proof[idx]                                                                          merkle/contract.py:23
    //                                                         virtual: load item_offset%0#0 from l-stack (no copy)         (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,array_head_and_tail%0#0,item_offset%0#0                                                                                                                               proof[idx]                                                                          merkle/contract.py:23
    int 32                                                     //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,array_head_and_tail%0#0,item_offset%0#0,32                                                                                                              proof[idx]                                                                          merkle/contract.py:23
    extract3 // on error: Index access is out of bounds        //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,{extract3}                                                                                                                                              proof[idx]                                                                          merkle/contract.py:23
    //                                                         virtual: store tmp%1#0 to l-stack (no copy)                  (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,tmp%1#0                                                                                                                                                               proof[idx]                                                                          merkle/contract.py:23
    frame_dig 1                                                //                                                           load computed#2 from f-stack                                                                      (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,tmp%1#0,computed#2                                                                                                                                      computed = hash_pair(computed, proof[idx].bytes)                                    merkle/contract.py:23
    swap                                                       //                                                           load tmp%1#0 from l-stack (no copy)                                                               (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,computed#2,tmp%1#0                                                                                                                                      computed = hash_pair(computed, proof[idx].bytes)                                    merkle/contract.py:23
    callsub hash_pair                                          //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,{hash_pair}                                                                                                                                             hash_pair(computed, proof[idx].bytes)                                               merkle/contract.py:23
    frame_bury 1                                               //                                                           store computed#2 to f-stack                                                                       (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0                                                                                                                                                         computed = hash_pair(computed, proof[idx].bytes)                                    merkle/contract.py:23
    //                                                         virtual: load idx#0 from l-stack (no copy)                   (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0                                                                                                                                                                       for idx in urange(proof.length):                                                    merkle/contract.py:22
    int 1                                                      //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | idx#0,1                                                                                                                                                       urange(proof.length)                                                                merkle/contract.py:22
    +                                                          //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | {+}                                                                                                                                                           urange(proof.length)                                                                merkle/contract.py:22
    //                                                         virtual: store range_item%0#0 to l-stack (no copy)           (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | range_item%0#0                                                                                                                                                              for idx in urange(proof.length):                                                    merkle/contract.py:22
    //                                                         virtual: load range_item%0#0 from l-stack (no copy)          (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | range_item%0#0
    frame_bury 2                                               //                                                           store idx#0 to f-stack                                                                            (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 |
    b compute_root_hash_for_header@1                           //                                                                                                                                                             (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 |

compute_root_hash_after_for@5:
    frame_dig 1                                                //                                                           load computed#2 from f-stack                                                                      (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | computed#2                                                                                                                                                    return computed                                                                     merkle/contract.py:24
    frame_dig -2                                               //                                                           load proof#0 from parameters                                                                      (𝕡) proof#0,leaf#0 | (𝕗) tmp%0#0,computed#2,idx#0 | computed#2,proof#0                                                                                                                                            return computed                                                                     merkle/contract.py:24
    frame_bury 1
    frame_bury 0
    retsub                                                     //                                                                                                                                                             computed#2,proof#0                                                                                                                                                                                                return computed                                                                     merkle/contract.py:24


// examples.merkle.contract.hash_pair(a: bytes, b: bytes) -> bytes:
hash_pair:
    proto 2 1                                                  //                                                                                                                                                             (𝕡) a#0,b#0 |                                                                                                                                                                                                     @subroutine\ndef hash_pair(a: Bytes, b: Bytes) -> Bytes:                            merkle/contract.py:27-28

hash_pair_block@0:
    frame_dig -2                                               //                                                           load a#0 from parameters                                                                          (𝕡) a#0,b#0 | a#0                                                                                                                                                                                                 BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)                           merkle/contract.py:29
    frame_dig -1                                               //                                                           load b#0 from parameters                                                                          (𝕡) a#0,b#0 | a#0,b#0                                                                                                                                                                                             BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)                           merkle/contract.py:29
    b<                                                         //                                                                                                                                                             (𝕡) a#0,b#0 | {b<}                                                                                                                                                                                                BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)                           merkle/contract.py:29
    //                                                         virtual: store tmp%0#0 to l-stack (no copy)                  (𝕡) a#0,b#0 | tmp%0#0                                                                                                                                                                                                           BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)                           merkle/contract.py:29
    //                                                         virtual: load tmp%0#0 from l-stack (no copy)                 (𝕡) a#0,b#0 | tmp%0#0                                                                                                                                                                                                           a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a                   merkle/contract.py:29
    bz hash_pair_ternary_false@2                               //                                                                                                                                                             (𝕡) a#0,b#0 |                                                                                                                                                                                                     a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a                   merkle/contract.py:29
    // Implicit fall through to hash_pair_ternary_true@1       //                                                                                                                                                             (𝕡) a#0,b#0 |                                                                                                                                                                                                     a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a                   merkle/contract.py:29

hash_pair_ternary_true@1:
    frame_dig -2                                               //                                                           load a#0 from parameters                                                                          (𝕡) a#0,b#0 | a#0                                                                                                                                                                                                 a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a                   merkle/contract.py:29
    frame_dig -1                                               //                                                           load b#0 from parameters                                                                          (𝕡) a#0,b#0 | a#0,b#0                                                                                                                                                                                             a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a                   merkle/contract.py:29
    concat                                                     //                                                                                                                                                             (𝕡) a#0,b#0 | {concat}                                                                                                                                                                                            a + b                                                                               merkle/contract.py:29
    //                                                         virtual: store ternary_result%0#0 to x-stack (no copy)       (𝕡) a#0,b#0 | (𝕏) ternary_result%0#0 |                                                                                                                                                                                          a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a                   merkle/contract.py:29
    b hash_pair_ternary_merge@3                                //                                                                                                                                                             (𝕡) a#0,b#0 | (𝕏) ternary_result%0#0 |                                                                                        ternary_result%0#0

hash_pair_ternary_false@2:
    frame_dig -1                                               //                                                           load b#0 from parameters                                                                          (𝕡) a#0,b#0 | b#0                                                                                                                                                                                                 a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a                   merkle/contract.py:29
    frame_dig -2                                               //                                                           load a#0 from parameters                                                                          (𝕡) a#0,b#0 | b#0,a#0                                                                                                                                                                                             a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a                   merkle/contract.py:29
    concat                                                     //                                                                                                                                                             (𝕡) a#0,b#0 | {concat}                                                                                                                                                                                            b + a                                                                               merkle/contract.py:29
    //                                                         virtual: store ternary_result%0#0 to x-stack (no copy)       (𝕡) a#0,b#0 | (𝕏) ternary_result%0#0 |                                                                                                                                                                                          a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a                   merkle/contract.py:29
    // Implicit fall through to hash_pair_ternary_merge@3      //                                                                                                                                                             (𝕡) a#0,b#0 | (𝕏) ternary_result%0#0 |                                                                                        ternary_result%0#0

hash_pair_ternary_merge@3:
    //                                                         virtual: load ternary_result%0#0 from x-stack                (𝕡) a#0,b#0 | ternary_result%0#0                                                                                                                                                                          ternary_result%0#0    op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)        merkle/contract.py:29
    sha256                                                     //                                                                                                                                                             (𝕡) a#0,b#0 | {sha256}                                                                                                                                                                                            op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)        merkle/contract.py:29
    //                                                         virtual: store tmp%1#0 to l-stack (no copy)                  (𝕡) a#0,b#0 | tmp%1#0                                                                                                                                                                                                           op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)        merkle/contract.py:29
    //                                                         virtual: load tmp%1#0 from l-stack (no copy)                 (𝕡) a#0,b#0 | tmp%1#0                                                                                                                                                                                                           return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a) merkle/contract.py:29
    retsub                                                     //                                                                                                                                                             tmp%1#0                                                                                                                                                                                                           return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a) merkle/contract.py:29

