// Op                                                                                      Stack (out)
// examples.merkle.contract.MerkleTree.approval_program() -> uint64:
main_block@0:
    callsub __puya_arc4_router__                                                           tmp%0#0
    return


// examples.merkle.contract.MerkleTree.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    proto 0 1

__puya_arc4_router___block@0:
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txn NumAppArgs                                                                         tmp%0#0
    bz __puya_arc4_router___after_if_else@7
    // Implicit fall through to __puya_arc4_router___abi_routing@1

__puya_arc4_router___abi_routing@1:
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txna ApplicationArgs 0                                                                 tmp%2#0
    method create(byte[32])void                                                            tmp%2#0,Method(create(byte[32])void)
    method verify(byte[32][],byte[32])bool                                                 tmp%2#0,Method(create(byte[32])void),Method(verify(byte[32][],byte[32])bool)
    l-load tmp%2#0 2                                                                       Method(create(byte[32])void),Method(verify(byte[32][],byte[32])bool),tmp%2#0
    match __puya_arc4_router___create_route@2 __puya_arc4_router___verify_route@3
    int 0                                                                                  0
    retsub                                                                                 0

__puya_arc4_router___create_route@2:
    // merkle/contract.py:10
    // @arc4.abimethod(create="require")
    txn OnCompletion                                                                       tmp%3#0
    !                                                                                      tmp%4#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                      tmp%5#0
    !                                                                                      tmp%6#0
    assert // can only call when creating
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txna ApplicationArgs 1                                                                 tmp%7#0
    // merkle/contract.py:10
    // @arc4.abimethod(create="require")
    callsub create
    int 1                                                                                  1
    retsub                                                                                 1

__puya_arc4_router___verify_route@3:
    // merkle/contract.py:14
    // @arc4.abimethod
    txn OnCompletion                                                                       tmp%8#0
    !                                                                                      tmp%9#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                      tmp%10#0
    assert // can only call when not creating
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txna ApplicationArgs 1                                                                 tmp%12#0
    txna ApplicationArgs 2                                                                 tmp%12#0,tmp%13#0
    // merkle/contract.py:14
    // @arc4.abimethod
    l-load tmp%12#0 1                                                                      tmp%13#0,tmp%12#0
    l-load tmp%13#0 1                                                                      tmp%12#0,tmp%13#0
    callsub verify                                                                         to_encode%0#0
    byte 0x00                                                                              to_encode%0#0,0x00
    int 0                                                                                  to_encode%0#0,0x00,0
    l-load to_encode%0#0 2                                                                 0x00,0,to_encode%0#0
    setbit                                                                                 encoded_bool%0#0
    byte 0x151f7c75                                                                        encoded_bool%0#0,0x151f7c75
    l-load encoded_bool%0#0 1                                                              0x151f7c75,encoded_bool%0#0
    concat                                                                                 tmp%14#0
    log
    int 1                                                                                  1
    retsub                                                                                 1

__puya_arc4_router___after_if_else@7:
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    int 0                                                                                  0
    retsub                                                                                 0


// examples.merkle.contract.MerkleTree.create(root: bytes) -> void:
create:                                                                                    (洧도) root#0 |
    // merkle/contract.py:10-11
    // @arc4.abimethod(create="require")
    // def create(self, root: Bytes32) -> None:
    proto 1 0                                                                              (洧도) root#0 |

create_block@0:                                                                            (洧도) root#0 |
    // merkle/contract.py:12
    // self.root = root.bytes
    byte "root"                                                                            (洧도) root#0 | "root"
    p-load root#0                                                                          (洧도) root#0 | "root",root#0 (copy)
    app_global_put                                                                         (洧도) root#0 |
    retsub


// examples.merkle.contract.MerkleTree.verify(proof: bytes, leaf: bytes) -> uint64:
verify:                                                                                    (洧도) proof#0,leaf#0 |
    // merkle/contract.py:14-15
    // @arc4.abimethod
    // def verify(self, proof: Proof, leaf: Bytes32) -> bool:
    proto 2 1                                                                              (洧도) proof#0,leaf#0 |

verify_block@0:                                                                            (洧도) proof#0,leaf#0 |
    // merkle/contract.py:16
    // return self.root == compute_root_hash(proof, leaf.bytes)
    int 0                                                                                  (洧도) proof#0,leaf#0 | 0
    byte "root"                                                                            (洧도) proof#0,leaf#0 | 0,"root"
    app_global_get_ex                                                                      (洧도) proof#0,leaf#0 | maybe_value%0#0,maybe_exists%0#0
    assert // check self.root exists                                                       (洧도) proof#0,leaf#0 | maybe_value%0#0
    p-load proof#0                                                                         (洧도) proof#0,leaf#0 | maybe_value%0#0,proof#0 (copy)
    p-load leaf#0                                                                          (洧도) proof#0,leaf#0 | maybe_value%0#0,proof#0 (copy),leaf#0 (copy)
    callsub compute_root_hash                                                              (洧도) proof#0,leaf#0 | maybe_value%0#0,compute_root_hash%0#0,proof#0
    p-store proof#0                                                                        (洧도) proof#0,leaf#0 | maybe_value%0#0,compute_root_hash%0#0
    l-store compute_root_hash%0#0 0                                                        (洧도) proof#0,leaf#0 | maybe_value%0#0,compute_root_hash%0#0
    l-load maybe_value%0#0 1                                                               (洧도) proof#0,leaf#0 | compute_root_hash%0#0,maybe_value%0#0
    l-load compute_root_hash%0#0 1                                                         (洧도) proof#0,leaf#0 | maybe_value%0#0,compute_root_hash%0#0
    ==                                                                                     (洧도) proof#0,leaf#0 | tmp%0#0
    retsub                                                                                 tmp%0#0


// examples.merkle.contract.compute_root_hash(proof: bytes, leaf: bytes) -> bytes, bytes:
compute_root_hash:                                                                         (洧도) proof#0,leaf#0 |
    // merkle/contract.py:19-20
    // @subroutine
    // def compute_root_hash(proof: Proof, leaf: Bytes) -> Bytes:
    proto 2 2                                                                              (洧도) proof#0,leaf#0 |

compute_root_hash_block@0:                                                                 (洧도) proof#0,leaf#0 |
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    p-load proof#0                                                                         (洧도) proof#0,leaf#0 | proof#0 (copy)
    int 0                                                                                  (洧도) proof#0,leaf#0 | proof#0 (copy),0
    extract_uint16                                                                         (洧도) proof#0,leaf#0 | tmp%0#0
    f-store tmp%0#0                                                                        (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0 |
    int 0                                                                                  (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0 | idx#0
    f-store idx#0                                                                          (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0 |
    p-load leaf#0                                                                          (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0 | computed#1
    f-store computed#1                                                                     (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 |
    // Implicit fall through to compute_root_hash_for_header@1                             (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 |

compute_root_hash_for_header@1:                                                            (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 |
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    f-load idx#0                                                                           (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0
    f-load tmp%0#0                                                                         (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0,tmp%0#0
    <                                                                                      (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | continue_looping%0#0
    bz compute_root_hash_after_for@4                                                       (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 |
    // Implicit fall through to compute_root_hash_for_body@2                               (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 |

compute_root_hash_for_body@2:                                                              (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 |
    // merkle/contract.py:23
    // computed = hash_pair(computed, proof[idx].bytes)
    p-load proof#0                                                                         (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | proof#0 (copy)
    extract 2 0                                                                            (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | array_head_and_tail%0#0
    f-load idx#0                                                                           (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | array_head_and_tail%0#0,idx#0
    l-store-copy idx#0 1                                                                   (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0,array_head_and_tail%0#0,idx#0 (copy)
    int 32                                                                                 (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0,array_head_and_tail%0#0,idx#0 (copy),32
    *                                                                                      (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0,array_head_and_tail%0#0,item_offset%0#0
    l-load array_head_and_tail%0#0 1                                                       (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0,item_offset%0#0,array_head_and_tail%0#0
    l-load item_offset%0#0 1                                                               (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0,array_head_and_tail%0#0,item_offset%0#0
    int 32                                                                                 (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0,array_head_and_tail%0#0,item_offset%0#0,32
    extract3 // on error: Index access is out of bounds                                    (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0,tmp%1#0
    f-load computed#1                                                                      (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0,tmp%1#0,computed#1
    l-load tmp%1#0 1                                                                       (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0,computed#1,tmp%1#0
    callsub hash_pair                                                                      (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0,computed#1
    f-store computed#1                                                                     (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    l-load idx#0 0                                                                         (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0
    int 1                                                                                  (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0,1
    +                                                                                      (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | idx#0
    f-store idx#0                                                                          (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 |
    b compute_root_hash_for_header@1                                                       (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 |

compute_root_hash_after_for@4:                                                             (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 |
    // merkle/contract.py:24
    // return computed
    f-load computed#1                                                                      (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | computed#1
    p-load proof#0                                                                         (洧도) proof#0,leaf#0 | (洧뎽) tmp%0#0,idx#0,computed#1 | computed#1,proof#0 (copy)
    retsub                                                                                 computed#1,proof#0 (copy)


// examples.merkle.contract.hash_pair(a: bytes, b: bytes) -> bytes:
hash_pair:                                                                                 (洧도) a#0,b#0 |
    // merkle/contract.py:27-28
    // @subroutine
    // def hash_pair(a: Bytes, b: Bytes) -> Bytes:
    proto 2 1                                                                              (洧도) a#0,b#0 |

hash_pair_block@0:                                                                         (洧도) a#0,b#0 |
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    p-load a#0                                                                             (洧도) a#0,b#0 | a#0 (copy)
    p-load b#0                                                                             (洧도) a#0,b#0 | a#0 (copy),b#0 (copy)
    b<                                                                                     (洧도) a#0,b#0 | tmp%0#0
    bz hash_pair_ternary_false@2                                                           (洧도) a#0,b#0 |
    // Implicit fall through to hash_pair_ternary_true@1                                   (洧도) a#0,b#0 |

hash_pair_ternary_true@1:                                                                  (洧도) a#0,b#0 |
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    p-load a#0                                                                             (洧도) a#0,b#0 | a#0 (copy)
    p-load b#0                                                                             (洧도) a#0,b#0 | a#0 (copy),b#0 (copy)
    concat                                                                                 (洧도) a#0,b#0 | ternary_result%0#0
    x-store ternary_result%0#0                                                             (洧도) a#0,b#0 | (洧뎶) ternary_result%0#0 |
    b hash_pair_ternary_merge@3                                                            (洧도) a#0,b#0 | (洧뎶) ternary_result%0#0 |

hash_pair_ternary_false@2:                                                                 (洧도) a#0,b#0 |
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    p-load b#0                                                                             (洧도) a#0,b#0 | b#0 (copy)
    p-load a#0                                                                             (洧도) a#0,b#0 | b#0 (copy),a#0 (copy)
    concat                                                                                 (洧도) a#0,b#0 | ternary_result%0#0
    x-store ternary_result%0#0                                                             (洧도) a#0,b#0 | (洧뎶) ternary_result%0#0 |
    // Implicit fall through to hash_pair_ternary_merge@3                                  (洧도) a#0,b#0 | (洧뎶) ternary_result%0#0 |

hash_pair_ternary_merge@3:                                                                 (洧도) a#0,b#0 | (洧뎶) ternary_result%0#0 |
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    x-load ternary_result%0#0                                                              (洧도) a#0,b#0 | ternary_result%0#0
    sha256                                                                                 (洧도) a#0,b#0 | tmp%1#0
    retsub                                                                                 tmp%1#0


