#pragma version 10

examples.merkle.contract.MerkleTree.approval_program:
    // merkle/contract.py:14
    // class MerkleTree(arc4.ARC4Contract):
    method "create(byte[32])void"
    method "verify(byte[32][],byte[32])bool"
    txna ApplicationArgs 0
    match main_create_route@1 main_verify_route@2
    err // reject transaction

main_create_route@1:
    // merkle/contract.py:31
    // @arc4.abimethod(create=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // merkle/contract.py:14
    // class MerkleTree(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // merkle/contract.py:31
    // @arc4.abimethod(create=True)
    callsub create
    int 1
    return

main_verify_route@2:
    // merkle/contract.py:35
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // merkle/contract.py:14
    // class MerkleTree(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // merkle/contract.py:35
    // @arc4.abimethod
    callsub verify
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return


// examples.merkle.contract.MerkleTree.create(root: bytes) -> void:
create:
    // merkle/contract.py:31-32
    // @arc4.abimethod(create=True)
    // def create(self, root: Bytes32) -> None:
    proto 1 0
    // merkle/contract.py:33
    // self.root = root.copy()
    byte "root"
    frame_dig -1
    app_global_put
    retsub


// examples.merkle.contract.MerkleTree.verify(proof: bytes, leaf: bytes) -> uint64:
verify:
    // merkle/contract.py:35-36
    // @arc4.abimethod
    // def verify(self, proof: Proof, leaf: Bytes32) -> bool:
    proto 2 1
    // merkle/contract.py:37
    // return self.root == self.compute_root_hash(proof, leaf)
    int 0
    byte "root"
    app_global_get_ex
    assert // check root exists
    frame_dig -2
    frame_dig -1
    callsub compute_root_hash
    frame_bury -1
    frame_bury -2
    ==
    retsub


// examples.merkle.contract.MerkleTree.compute_root_hash(proof: bytes, leaf: bytes) -> bytes, bytes, bytes:
compute_root_hash:
    // merkle/contract.py:24-25
    // @subroutine
    // def compute_root_hash(self, proof: Proof, leaf: Bytes32) -> Bytes32:
    proto 2 3
    // merkle/contract.py:27
    // for proof_hash in proof:
    frame_dig -2
    int 0
    extract_uint16
    frame_dig -2
    extract 2 0
    int 0
    frame_dig -1

compute_root_hash_for_header@1:
    // merkle/contract.py:27
    // for proof_hash in proof:
    frame_dig 2
    frame_dig 0
    <
    bz compute_root_hash_after_for@4
    frame_dig 2
    dup
    int 32
    *
    frame_dig 1
    swap
    int 32
    extract3
    // merkle/contract.py:28
    // computed = self.hash_pair(computed, proof_hash)
    frame_dig 3
    swap
    callsub hash_pair
    popn 2
    frame_bury 3
    int 1
    +
    frame_bury 2
    b compute_root_hash_for_header@1

compute_root_hash_after_for@4:
    // merkle/contract.py:29
    // return computed
    frame_dig 3
    frame_dig -2
    frame_dig -1
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub


// examples.merkle.contract.MerkleTree.hash_pair(a: bytes, b: bytes) -> bytes, bytes, bytes:
hash_pair:
    // merkle/contract.py:15-16
    // @subroutine
    // def hash_pair(self, a: Bytes32, b: Bytes32) -> Bytes32:
    proto 2 3
    // merkle/contract.py:19
    // if BigUInt.from_bytes(a.bytes) < BigUInt.from_bytes(b.bytes)
    frame_dig -2
    frame_dig -1
    b<
    // merkle/contract.py:18-20
    // a.bytes + b.bytes
    // if BigUInt.from_bytes(a.bytes) < BigUInt.from_bytes(b.bytes)
    // else b.bytes + a.bytes
    bz hash_pair_ternary_false@2
    frame_dig -2
    frame_dig -1
    // merkle/contract.py:18
    // a.bytes + b.bytes
    concat
    b hash_pair_ternary_merge@3

hash_pair_ternary_false@2:
    // merkle/contract.py:18-20
    // a.bytes + b.bytes
    // if BigUInt.from_bytes(a.bytes) < BigUInt.from_bytes(b.bytes)
    // else b.bytes + a.bytes
    frame_dig -1
    frame_dig -2
    // merkle/contract.py:20
    // else b.bytes + a.bytes
    concat

hash_pair_ternary_merge@3:
    // merkle/contract.py:17-21
    // hash_bytes = op.sha256(
    //     a.bytes + b.bytes
    //     if BigUInt.from_bytes(a.bytes) < BigUInt.from_bytes(b.bytes)
    //     else b.bytes + a.bytes
    // )
    sha256
    // merkle/contract.py:22
    // return Bytes32.from_bytes(hash_bytes)
    frame_dig -2
    frame_dig -1
    retsub
