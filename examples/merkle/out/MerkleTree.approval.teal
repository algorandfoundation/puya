#pragma version 10

examples.merkle.contract.MerkleTree.approval_program:
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    callsub __puya_arc4_router__
    return


// examples.merkle.contract.MerkleTree.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___after_if_else@7
    method "create(byte[32])void"
    method "verify(byte[32][],byte[32])bool"
    txna ApplicationArgs 0
    match __puya_arc4_router___create_route@2 __puya_arc4_router___verify_route@3
    int 0
    retsub

__puya_arc4_router___create_route@2:
    // merkle/contract.py:10
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // merkle/contract.py:10
    // @arc4.abimethod(create="require")
    callsub create
    int 1
    retsub

__puya_arc4_router___verify_route@3:
    // merkle/contract.py:14
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // merkle/contract.py:14
    // @arc4.abimethod
    callsub verify
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___after_if_else@7:
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    int 0
    retsub


// examples.merkle.contract.MerkleTree.create(root: bytes) -> void:
create:
    // merkle/contract.py:10-11
    // @arc4.abimethod(create="require")
    // def create(self, root: Bytes32) -> None:
    proto 1 0
    // merkle/contract.py:12
    // self.root = root.bytes
    byte "root"
    frame_dig -1
    app_global_put
    retsub


// examples.merkle.contract.MerkleTree.verify(proof: bytes, leaf: bytes) -> uint64:
verify:
    // merkle/contract.py:14-15
    // @arc4.abimethod
    // def verify(self, proof: Proof, leaf: Bytes32) -> bool:
    proto 2 1
    // merkle/contract.py:16
    // return self.root == compute_root_hash(proof, leaf.bytes)
    int 0
    // merkle/contract.py:12
    // self.root = root.bytes
    byte "root"
    // merkle/contract.py:16
    // return self.root == compute_root_hash(proof, leaf.bytes)
    app_global_get_ex
    assert // check self.root exists
    frame_dig -2
    frame_dig -1
    callsub compute_root_hash
    frame_bury -2
    ==
    retsub


// examples.merkle.contract.compute_root_hash(proof: bytes, leaf: bytes) -> bytes, bytes:
compute_root_hash:
    // merkle/contract.py:19-20
    // @subroutine
    // def compute_root_hash(proof: Proof, leaf: Bytes) -> Bytes:
    proto 2 2
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    frame_dig -2
    int 0
    extract_uint16
    int 0
    frame_dig -1

compute_root_hash_for_header@1:
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    frame_dig 1
    frame_dig 0
    <
    bz compute_root_hash_after_for@4
    // merkle/contract.py:23
    // computed = hash_pair(computed, proof[idx].bytes)
    frame_dig -2
    extract 2 0
    frame_dig 1
    dup
    cover 2
    int 32
    *
    int 32
    extract3 // on error: Index access is out of bounds
    frame_dig 2
    swap
    callsub hash_pair
    frame_bury 2
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    int 1
    +
    frame_bury 1
    b compute_root_hash_for_header@1

compute_root_hash_after_for@4:
    // merkle/contract.py:24
    // return computed
    frame_dig 2
    frame_dig -2
    frame_bury 1
    frame_bury 0
    retsub


// examples.merkle.contract.hash_pair(a: bytes, b: bytes) -> bytes:
hash_pair:
    // merkle/contract.py:27-28
    // @subroutine
    // def hash_pair(a: Bytes, b: Bytes) -> Bytes:
    proto 2 1
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    frame_dig -2
    frame_dig -1
    b<
    bz hash_pair_ternary_false@2
    frame_dig -2
    frame_dig -1
    concat
    b hash_pair_ternary_merge@3

hash_pair_ternary_false@2:
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    frame_dig -1
    frame_dig -2
    concat

hash_pair_ternary_merge@3:
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    sha256
    retsub
