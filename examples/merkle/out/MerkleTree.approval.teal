#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 32
    bytecblock "root"
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@8
    pushbytess 0x8424203b 0xc0290ad5 // method "create(byte[32])void", method "verify(byte[32][],byte[32])bool"
    txna ApplicationArgs 0
    match main_create_route@3 main_verify_route@4

main_after_if_else@8:
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    intc_0 // 0
    return

main_verify_route@4:
    // merkle/contract.py:14
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // merkle/contract.py:14
    // @arc4.abimethod
    callsub verify
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_create_route@3:
    // merkle/contract.py:10
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // merkle/contract.py:10
    // @arc4.abimethod(create="require")
    callsub create
    intc_1 // 1
    return


// examples.merkle.contract.MerkleTree.create(root: bytes) -> void:
create:
    // merkle/contract.py:10-11
    // @arc4.abimethod(create="require")
    // def create(self, root: Bytes32) -> None:
    proto 1 0
    // merkle/contract.py:12
    // self.root = root.bytes
    bytec_0 // "root"
    frame_dig -1
    app_global_put
    retsub


// examples.merkle.contract.MerkleTree.verify(proof: bytes, leaf: bytes) -> uint64:
verify:
    // merkle/contract.py:14-15
    // @arc4.abimethod
    // def verify(self, proof: Proof, leaf: Bytes32) -> bool:
    proto 2 1
    // merkle/contract.py:16
    // return self.root == compute_root_hash(proof, leaf.bytes)
    intc_0 // 0
    bytec_0 // "root"
    app_global_get_ex
    assert // check self.root exists
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    frame_dig -1

verify_for_header@2:
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    frame_dig 2
    frame_dig 1
    <
    bz verify_after_for@7
    // merkle/contract.py:23
    // computed = hash_pair(computed, proof[idx].bytes)
    frame_dig -2
    extract 2 0
    frame_dig 2
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: index access is out of bounds
    dup
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    frame_dig 3
    b>
    bz verify_ternary_false@5
    frame_dig 3
    swap
    concat

verify_ternary_merge@6:
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    sha256
    frame_bury 3
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b verify_for_header@2

verify_ternary_false@5:
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    frame_dig 3
    concat
    b verify_ternary_merge@6

verify_after_for@7:
    // merkle/contract.py:16
    // return self.root == compute_root_hash(proof, leaf.bytes)
    frame_dig 0
    frame_dig 3
    ==
    frame_bury 0
    retsub
