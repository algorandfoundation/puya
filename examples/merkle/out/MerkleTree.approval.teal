#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 32
    bytecblock "root"
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    bz main_create_NoOp@8
    txna ApplicationArgs 0
    pushbytes 0xc0290ad5 // method "verify(byte[32][],byte[32])bool"
    ==
    assert
    // merkle/contract.py:14
    // @arc4.abimethod
    b verify

main_create_NoOp@8:
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x8424203b // method "create(byte[32])void"
    ==
    assert
    // merkle/contract.py:10
    // @arc4.abimethod(create="require")
    b create


// examples.merkle.contract.MerkleTree.create[routing]() -> void:
create:
    // merkle/contract.py:12
    // self.root = root.bytes
    bytec_0 // "root"
    // merkle/contract.py:10
    // @arc4.abimethod(create="require")
    txna ApplicationArgs 1
    // merkle/contract.py:12
    // self.root = root.bytes
    app_global_put
    // merkle/contract.py:10
    // @arc4.abimethod(create="require")
    intc_1 // 1
    return


// examples.merkle.contract.MerkleTree.verify[routing]() -> void:
verify:
    // merkle/contract.py:14
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    txna ApplicationArgs 2
    // merkle/contract.py:16
    // return self.root == compute_root_hash(proof, leaf.bytes)
    intc_0 // 0
    bytec_0 // "root"
    app_global_get_ex
    swap
    cover 3
    assert // check self.root exists
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    swap
    intc_0 // 0
    extract_uint16
    swap
    intc_0 // 0
    swap

verify_for_header@2:
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    dig 1
    dig 3
    <
    bz verify_after_for@7
    // merkle/contract.py:23
    // computed = hash_pair(computed, proof[idx].bytes)
    dig 4
    extract 2 0
    dig 2
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: index access is out of bounds
    dup
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    dig 2
    b>
    bz verify_ternary_false@5
    dig 1
    swap
    concat

verify_ternary_merge@6:
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    sha256
    bury 1
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    dig 1
    intc_1 // 1
    +
    bury 2
    b verify_for_header@2

verify_ternary_false@5:
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    dig 1
    concat
    b verify_ternary_merge@6

verify_after_for@7:
    // merkle/contract.py:16
    // return self.root == compute_root_hash(proof, leaf.bytes)
    dig 3
    dig 1
    ==
    // merkle/contract.py:14
    // @arc4.abimethod
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return
