{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAQA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;AAKK;;;;;;AALL;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AACK;;;;;;AASJ;;;;;;AAEG;;AACkB;;AAAA;AAAA;AAAP;AAAf;AAAe;;;;AAAf;;AAAA;;AAAA;AAAA;;;AAAA;;;AAAQ;;AAC+B;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAApB;;AAAA;;AAAA;;;AAAX;;;;;AADO;;AAAA;AAAA;AAAA;;;;;AAEX;;AAAA;;AAAA;;AAAA;;AAAA;AAGH;;;;;;;AAE6B;;AAAwB;;AAAxB;AAAT;;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;;;AAAV;;AAAA;AAAP;;AAAA;AAA6E;;AAAA;;AAAA;AAAA;;;;;;;;AAnB5E;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAJA;;;;;;AAEG;AAAA;;AAAA;;AAEH;;;;;;AAEU;AAAA;AAAA;AAAA;AAAa;;AAAA;;AAAA;;;AAAA;;AAAb;AAAP;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 32 1 2"
    },
    "7": {
      "op": "bytecblock \"root\""
    },
    "14": {
      "op": "b main_block@0"
    },
    "17": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "20": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "22": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "NoOp"
      ]
    },
    "23": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "24": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "25": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "27": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "28": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "29": {
      "op": "bz main_create_NoOp@5",
      "stack_out": []
    },
    "32": {
      "op": "b main_call_NoOp@2"
    },
    "35": {
      "block": "main_call_NoOp@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "38": {
      "op": "pushbytes 0xc0290ad5 // method \"verify(byte[32][],byte[32])bool\"",
      "defined_out": [
        "Method(verify(byte[32][],byte[32])bool)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "Method(verify(byte[32][],byte[32])bool)"
      ]
    },
    "44": {
      "op": "uncover 1",
      "stack_out": [
        "Method(verify(byte[32][],byte[32])bool)",
        "tmp%4#0"
      ]
    },
    "46": {
      "op": "match main_verify_route@3",
      "stack_out": []
    },
    "50": {
      "op": "b main_switch_case_next@4"
    },
    "53": {
      "block": "main_switch_case_next@4",
      "stack_in": [],
      "op": "b main_after_if_else@8"
    },
    "56": {
      "block": "main_after_if_else@8",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "57": {
      "block": "main_verify_route@3",
      "stack_in": [],
      "callsub": "examples.merkle.contract.MerkleTree.verify[routing]",
      "op": "callsub verify"
    },
    "60": {
      "op": "b main_switch_case_next@4"
    },
    "63": {
      "block": "main_create_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "66": {
      "op": "pushbytes 0x8424203b // method \"create(byte[32])void\"",
      "defined_out": [
        "Method(create(byte[32])void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(create(byte[32])void)"
      ]
    },
    "72": {
      "op": "uncover 1",
      "stack_out": [
        "Method(create(byte[32])void)",
        "tmp%5#0"
      ]
    },
    "74": {
      "op": "match main_create_route@6",
      "stack_out": []
    },
    "78": {
      "op": "b main_switch_case_next@7"
    },
    "81": {
      "block": "main_switch_case_next@7",
      "stack_in": [],
      "op": "b main_after_if_else@8"
    },
    "84": {
      "block": "main_create_route@6",
      "stack_in": [],
      "callsub": "examples.merkle.contract.MerkleTree.create[routing]",
      "op": "callsub create"
    },
    "87": {
      "op": "b main_switch_case_next@7"
    },
    "90": {
      "subroutine": "examples.merkle.contract.compute_root_hash",
      "params": {
        "proof#0": "bytes",
        "leaf#0": "bytes"
      },
      "block": "compute_root_hash",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "93": {
      "op": "b compute_root_hash_block@0"
    },
    "96": {
      "block": "compute_root_hash_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [],
      "stack_out": [
        "computed#0"
      ]
    },
    "98": {
      "op": "frame_dig -2",
      "defined_out": [
        "proof#0 (copy)"
      ],
      "stack_out": [
        "computed#0",
        "proof#0 (copy)"
      ]
    },
    "100": {
      "op": "intc_0 // 0",
      "stack_out": [
        "computed#0",
        "proof#0 (copy)",
        "0"
      ]
    },
    "101": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [],
      "stack_out": [
        "computed#0",
        "tmp%0#0"
      ]
    },
    "102": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "1"
      ]
    },
    "103": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "computed#0",
        "tmp%0#0"
      ]
    },
    "104": {
      "op": "intc_0 // 0",
      "defined_out": [],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0"
      ]
    },
    "105": {
      "op": "b compute_root_hash_for_header@1"
    },
    "108": {
      "block": "compute_root_hash_for_header@1",
      "stack_in": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "110": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "tmp%0#0"
      ]
    },
    "112": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "113": {
      "op": "bz compute_root_hash_after_for@4",
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0"
      ]
    },
    "116": {
      "op": "b compute_root_hash_for_body@2"
    },
    "119": {
      "block": "compute_root_hash_for_body@2",
      "stack_in": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "idx#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "idx#0"
      ]
    },
    "121": {
      "op": "frame_dig -2",
      "defined_out": [
        "idx#0",
        "proof#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "idx#0",
        "proof#0 (copy)"
      ]
    },
    "123": {
      "op": "len",
      "defined_out": [
        "aggregate%total_length%0#0",
        "idx#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "idx#0",
        "aggregate%total_length%0#0"
      ]
    },
    "124": {
      "op": "frame_dig -2",
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "idx#0",
        "aggregate%total_length%0#0",
        "proof#0 (copy)"
      ]
    },
    "126": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%total_length%0#0",
        "idx#0",
        "proof#0 (copy)",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "idx#0",
        "aggregate%total_length%0#0",
        "proof#0 (copy)",
        "2"
      ]
    },
    "127": {
      "op": "uncover 2",
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "idx#0",
        "proof#0 (copy)",
        "2",
        "aggregate%total_length%0#0"
      ]
    },
    "129": {
      "op": "substring3",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "idx#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "idx#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "130": {
      "op": "uncover 1",
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "idx#0"
      ]
    },
    "132": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "aggregate%array_trimmed%0#0",
        "idx#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "idx#0",
        "32"
      ]
    },
    "133": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "134": {
      "op": "intc_1 // 32",
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "32"
      ]
    },
    "135": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%0#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "array_item%0#0"
      ]
    },
    "136": {
      "op": "frame_dig 0",
      "defined_out": [
        "array_item%0#0",
        "computed#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "array_item%0#0",
        "computed#0"
      ]
    },
    "138": {
      "op": "uncover 1",
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "computed#0",
        "array_item%0#0"
      ]
    },
    "140": {
      "callsub": "examples.merkle.contract.hash_pair",
      "op": "callsub hash_pair",
      "defined_out": [
        "computed#0",
        "tmp%1#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "tmp%1#0"
      ]
    },
    "143": {
      "op": "frame_bury 0",
      "defined_out": [
        "computed#0",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0"
      ]
    },
    "145": {
      "op": "b compute_root_hash_for_footer@3"
    },
    "148": {
      "block": "compute_root_hash_for_footer@3",
      "stack_in": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "150": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1",
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "value_internal%0#0",
        "1"
      ]
    },
    "151": {
      "op": "+",
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "value_internal%0#0"
      ]
    },
    "152": {
      "op": "frame_bury 2",
      "defined_out": [
        "value_internal%0#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0"
      ]
    },
    "154": {
      "op": "b compute_root_hash_for_header@1"
    },
    "157": {
      "block": "compute_root_hash_after_for@4",
      "stack_in": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "computed#0"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "computed#0"
      ]
    },
    "159": {
      "op": "frame_dig -2",
      "defined_out": [
        "computed#0",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "computed#0",
        "tmp%0#0",
        "value_internal%0#0",
        "computed#0",
        "proof#0 (copy)"
      ]
    },
    "161": {
      "op": "frame_bury 1"
    },
    "163": {
      "op": "frame_bury 0"
    },
    "165": {
      "retsub": true,
      "op": "retsub"
    },
    "166": {
      "subroutine": "examples.merkle.contract.hash_pair",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "hash_pair",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "169": {
      "op": "intc_0 // 0",
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "170": {
      "op": "b hash_pair_block@0"
    },
    "173": {
      "block": "hash_pair_block@0",
      "stack_in": [
        "ternary_result%0#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "175": {
      "op": "frame_dig -1",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "177": {
      "op": "b<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "tmp%0#0"
      ]
    },
    "178": {
      "op": "bz hash_pair_ternary_false@2",
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "181": {
      "op": "b hash_pair_ternary_true@1"
    },
    "184": {
      "block": "hash_pair_ternary_true@1",
      "stack_in": [
        "ternary_result%0#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "a#0 (copy)"
      ]
    },
    "186": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "188": {
      "op": "concat",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "ternary_result%0#0"
      ]
    },
    "189": {
      "op": "frame_bury 0",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "191": {
      "op": "b hash_pair_ternary_merge@3"
    },
    "194": {
      "block": "hash_pair_ternary_merge@3",
      "stack_in": [
        "ternary_result%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "ternary_result%0#0"
      ]
    },
    "196": {
      "op": "sha256",
      "defined_out": [
        "ternary_result%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "tmp%1#0"
      ]
    },
    "197": {
      "op": "uncover 1"
    },
    "199": {
      "retsub": true,
      "op": "retsub"
    },
    "200": {
      "block": "hash_pair_ternary_false@2",
      "stack_in": [
        "ternary_result%0#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "b#0 (copy)"
      ]
    },
    "202": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "b#0 (copy)",
        "a#0 (copy)"
      ]
    },
    "204": {
      "op": "concat",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0",
        "ternary_result%0#0"
      ]
    },
    "205": {
      "op": "frame_bury 0",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "207": {
      "op": "b hash_pair_ternary_merge@3"
    },
    "210": {
      "subroutine": "examples.merkle.contract.MerkleTree.create[routing]",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "b create_block@0"
    },
    "213": {
      "block": "create_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "216": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "217": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "218": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "32"
      ]
    },
    "219": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "220": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "defined_out": [
        "as_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint8[32])%0#0"
      ]
    },
    "221": {
      "callsub": "examples.merkle.contract.MerkleTree.create",
      "op": "callsub examples.merkle.contract.MerkleTree.create",
      "stack_out": []
    },
    "224": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "225": {
      "op": "return",
      "stack_out": []
    },
    "226": {
      "subroutine": "examples.merkle.contract.MerkleTree.verify[routing]",
      "params": {},
      "block": "verify",
      "stack_in": [],
      "op": "b verify_block@0"
    },
    "229": {
      "block": "verify_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "232": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "233": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "234": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0"
      ]
    },
    "235": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "length%0#0",
        "32"
      ]
    },
    "236": {
      "op": "*",
      "defined_out": [
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0"
      ]
    },
    "237": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "mul%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "mul%0#0",
        "2"
      ]
    },
    "238": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "239": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "241": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "242": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "243": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.static_array<arc4.uint8, 32>>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.static_array<arc4.uint8, 32>>",
      "defined_out": [
        "as_Encoded(len+uint8[32][])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[32][])%0#0"
      ]
    },
    "244": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "as_Encoded(len+uint8[32][])%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[32][])%0#0",
        "tmp%1#0"
      ]
    },
    "247": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(len+uint8[32][])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[32][])%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "248": {
      "op": "len",
      "defined_out": [
        "as_Encoded(len+uint8[32][])%0#0",
        "len%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[32][])%0#0",
        "tmp%1#0",
        "len%1#0"
      ]
    },
    "249": {
      "op": "intc_1 // 32",
      "stack_out": [
        "as_Encoded(len+uint8[32][])%0#0",
        "tmp%1#0",
        "len%1#0",
        "32"
      ]
    },
    "250": {
      "op": "==",
      "defined_out": [
        "as_Encoded(len+uint8[32][])%0#0",
        "eq%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[32][])%0#0",
        "tmp%1#0",
        "eq%1#0"
      ]
    },
    "251": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "defined_out": [
        "as_Encoded(len+uint8[32][])%0#0",
        "as_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "as_Encoded(len+uint8[32][])%0#0",
        "as_Encoded(uint8[32])%0#0"
      ]
    },
    "252": {
      "callsub": "examples.merkle.contract.MerkleTree.verify",
      "op": "callsub examples.merkle.contract.MerkleTree.verify",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "255": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x00"
      ]
    },
    "258": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0x00",
        "0"
      ]
    },
    "259": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%2#0"
      ]
    },
    "261": {
      "op": "setbit",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "262": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "268": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%3#0"
      ]
    },
    "270": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "271": {
      "op": "log",
      "stack_out": []
    },
    "272": {
      "op": "intc_2 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "273": {
      "op": "return",
      "stack_out": []
    },
    "274": {
      "subroutine": "examples.merkle.contract.MerkleTree.create",
      "params": {
        "root#0": "bytes"
      },
      "block": "examples.merkle.contract.MerkleTree.create",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "277": {
      "op": "b examples.merkle.contract.MerkleTree.create_block@0"
    },
    "280": {
      "block": "examples.merkle.contract.MerkleTree.create_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"root\"",
      "defined_out": [
        "\"root\""
      ],
      "stack_out": [
        "\"root\""
      ]
    },
    "281": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"root\"",
        "root#0 (copy)"
      ],
      "stack_out": [
        "\"root\"",
        "root#0 (copy)"
      ]
    },
    "283": {
      "op": "app_global_put",
      "stack_out": []
    },
    "284": {
      "retsub": true,
      "op": "retsub"
    },
    "285": {
      "subroutine": "examples.merkle.contract.MerkleTree.verify",
      "params": {
        "proof#0": "bytes",
        "leaf#0": "bytes"
      },
      "block": "examples.merkle.contract.MerkleTree.verify",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "288": {
      "op": "b examples.merkle.contract.MerkleTree.verify_block@0"
    },
    "291": {
      "block": "examples.merkle.contract.MerkleTree.verify_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "292": {
      "op": "bytec_0 // \"root\"",
      "defined_out": [
        "\"root\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"root\""
      ]
    },
    "293": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "294": {
      "error": "check self.root exists",
      "op": "assert // check self.root exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "295": {
      "op": "frame_dig -2",
      "defined_out": [
        "maybe_value%0#0",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "proof#0 (copy)"
      ]
    },
    "297": {
      "op": "frame_dig -1",
      "defined_out": [
        "leaf#0 (copy)",
        "maybe_value%0#0",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "proof#0 (copy)",
        "leaf#0 (copy)"
      ]
    },
    "299": {
      "callsub": "examples.merkle.contract.compute_root_hash",
      "op": "callsub compute_root_hash",
      "defined_out": [
        "compute_root_hash%0#0",
        "compute_root_hash%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "compute_root_hash%0#0",
        "compute_root_hash%1#0"
      ]
    },
    "302": {
      "op": "cover 2",
      "defined_out": [
        "compute_root_hash%0#0",
        "compute_root_hash%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "compute_root_hash%1#0",
        "maybe_value%0#0",
        "compute_root_hash%0#0"
      ]
    },
    "304": {
      "op": "==",
      "defined_out": [
        "compute_root_hash%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "compute_root_hash%1#0",
        "tmp%0#0"
      ]
    },
    "305": {
      "op": "uncover 1"
    },
    "307": {
      "retsub": true,
      "op": "retsub"
    }
  }
}