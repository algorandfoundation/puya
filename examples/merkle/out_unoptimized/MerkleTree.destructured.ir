contract examples.merkle.contract.MerkleTree:
    program approval:
        subroutine examples.merkle.contract.MerkleTree.approval_program() -> bool:
            block@0: // L9
                let tmp%0#0: bytes = (txna ApplicationArgs 0)
                switch tmp%0#0 {method "create(byte[32])void" => block@1, method "verify(byte[32][],byte[32])bool" => block@2, * => block@3}
            block@1: // create_route_L10
                let tmp%1#0: uint64 = (txn OnCompletion)
                let tmp%2#0: bool = (== tmp%1#0 NoOp)
                (assert tmp%2#0) // OnCompletion is NoOp
                let tmp%3#0: bool = (txn ApplicationID)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // is creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                examples.merkle.contract.MerkleTree.create(tmp%5#0)
                return 1u
            block@2: // verify_route_L14
                let tmp%6#0: uint64 = (txn OnCompletion)
                let tmp%7#0: bool = (== tmp%6#0 NoOp)
                (assert tmp%7#0) // OnCompletion is NoOp
                let tmp%8#0: bool = (txn ApplicationID)
                (assert tmp%8#0) // is not creating
                let tmp%9#0: bytes = (txna ApplicationArgs 1)
                let tmp%10#0: bytes = (txna ApplicationArgs 2)
                let tmp%11#0: bool = examples.merkle.contract.MerkleTree.verify(tmp%9#0, tmp%10#0)
                let tmp%12#0: bytes = (setbit 0x00 0u tmp%11#0)
                let tmp%13#0: bytes = (concat 0x151f7c75 tmp%12#0)
                (log tmp%13#0)
                return 1u
            block@3: // switch_case_default_L9
                goto block@4
            block@4: // switch_case_next_L9
                fail // reject transaction
        
        subroutine examples.merkle.contract.MerkleTree.create(root: bytes) -> void:
            block@0: // L10
                (app_global_put "root" root#0)
                return 
        
        subroutine examples.merkle.contract.MerkleTree.verify(proof: bytes, leaf: bytes) -> bool:
            block@0: // L14
                let (root_value%0#0: bytes, root_exists%0#0: bool) = (app_global_get_ex 0u "root")
                (assert root_exists%0#0) // check root exists
                let (compute_root_hash%0#0: bytes, compute_root_hash%1#0: bytes) = examples.merkle.contract.compute_root_hash(proof#0, leaf#0)
                let tmp%0#0: bool = (== root_value%0#0 compute_root_hash%0#0)
                return tmp%0#0
        
        subroutine examples.merkle.contract.compute_root_hash(proof: bytes, leaf: bytes) -> <bytes, bytes>:
            block@0: // L19
                let computed#0: bytes = leaf#0
                let tmp%0#0: uint64 = (extract_uint16 proof#0 0u)
                (assert 1u) // Step cannot be zero
                let range_item%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L22
                let continue_looping%0#0: bool = (< range_item%0#0 tmp%0#0)
                goto continue_looping%0#0 ? block@2 : block@5
            block@2: // for_body_L22
                let idx#0: uint64 = range_item%0#0
                let array_head_and_tail%0#0: bytes = ((extract 2 0) proof#0)
                let item_offset%0#0: uint64 = (* idx#0 32u)
                let tmp%1#0: bytes = (extract3 array_head_and_tail%0#0 item_offset%0#0 32u) // on error: Index access is out of bounds
                let computed#0: bytes = examples.merkle.contract.hash_pair(computed#0, tmp%1#0)
                goto block@3
            block@3: // for_footer_L22
                goto block@4
            block@4: // for_increment_L22
                let range_item%0#0: uint64 = (+ range_item%0#0 1u)
                goto block@1
            block@5: // after_for_L22
                return computed#0 proof#0
        
        subroutine examples.merkle.contract.hash_pair(a: bytes, b: bytes) -> bytes:
            block@0: // L27
                let reinterpret_biguint%0#0: biguint = a#0
                let reinterpret_biguint%1#0: biguint = b#0
                let tmp%0#0: bool = (b< reinterpret_biguint%0#0 reinterpret_biguint%1#0)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // ternary_true_L29
                let ternary_result%0#0: bytes = (concat a#0 b#0)
                goto block@3
            block@2: // ternary_false_L29
                let ternary_result%0#0: bytes = (concat b#0 a#0)
                goto block@3
            block@3: // ternary_merge_L29
                let tmp%1#0: bytes = (sha256 ternary_result%0#0)
                return tmp%1#0
    
    program clear-state:
        subroutine examples.merkle.contract.MerkleTree.clear_state_program() -> bool:
            block@0: // L9
                return 1u