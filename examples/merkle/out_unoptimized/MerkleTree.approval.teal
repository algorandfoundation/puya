#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 32
    bytecblock "root"

main_block@1:
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@7

main_abi_routing@2:
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x8424203b // method "create(byte[32])void"
    pushbytes 0xc0290ad5 // method "verify(byte[32][],byte[32])bool"
    uncover 2
    match main_create_route@3 main_verify_route@4

main_switch_case_default@5:

main_switch_case_next@6:

main_after_if_else@8:
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    intc_0 // 0

main_after_inlined_examples.merkle.contract.MerkleTree.__puya_arc4_router__@9:
    return

main_verify_route@4:
    // merkle/contract.py:14
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // merkle/contract.py:14
    // @arc4.abimethod
    callsub verify
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_examples.merkle.contract.MerkleTree.__puya_arc4_router__@9

main_create_route@3:
    // merkle/contract.py:10
    // @arc4.abimethod(create="require")
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating
    // merkle/contract.py:9
    // class MerkleTree(arc4.ARC4Contract):
    txna ApplicationArgs 1
    // merkle/contract.py:10
    // @arc4.abimethod(create="require")
    callsub create
    intc_1 // 1
    b main_after_inlined_examples.merkle.contract.MerkleTree.__puya_arc4_router__@9

main_bare_routing@7:
    b main_after_if_else@8


// examples.merkle.contract.MerkleTree.create(root: bytes) -> void:
create:
    // merkle/contract.py:10-11
    // @arc4.abimethod(create="require")
    // def create(self, root: Bytes32) -> None:
    proto 1 0
    // merkle/contract.py:12
    // self.root = root.bytes
    bytec_0 // "root"
    frame_dig -1
    app_global_put
    retsub


// examples.merkle.contract.MerkleTree.verify(proof: bytes, leaf: bytes) -> uint64:
verify:
    // merkle/contract.py:14-15
    // @arc4.abimethod
    // def verify(self, proof: Proof, leaf: Bytes32) -> bool:
    proto 2 1
    // merkle/contract.py:16
    // return self.root == compute_root_hash(proof, leaf.bytes)
    intc_0 // 0
    bytec_0 // "root"
    app_global_get_ex
    assert // check self.root exists
    frame_dig -2
    frame_dig -1
    callsub compute_root_hash
    pop
    ==
    retsub


// examples.merkle.contract.compute_root_hash(proof: bytes, leaf: bytes) -> bytes, bytes:
compute_root_hash:
    // merkle/contract.py:19-20
    // @subroutine
    // def compute_root_hash(proof: Proof, leaf: Bytes) -> Bytes:
    proto 2 2
    // merkle/contract.py:21
    // computed = leaf
    frame_dig -1
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    frame_dig -2
    intc_0 // 0
    extract_uint16
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0

compute_root_hash_for_header@1:
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    frame_dig 2
    frame_dig 1
    <
    bz compute_root_hash_after_for@4

compute_root_hash_for_body@2:
    // merkle/contract.py:23
    // computed = hash_pair(computed, proof[idx].bytes)
    frame_dig -2
    extract 2 0
    frame_dig 2
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: Index access is out of bounds
    frame_dig 0
    swap
    callsub hash_pair
    frame_bury 0

compute_root_hash_for_footer@3:
    // merkle/contract.py:22
    // for idx in urange(proof.length):
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b compute_root_hash_for_header@1

compute_root_hash_after_for@4:
    // merkle/contract.py:24
    // return computed
    frame_dig 0
    frame_dig -2
    frame_bury 1
    frame_bury 0
    retsub


// examples.merkle.contract.hash_pair(a: bytes, b: bytes) -> bytes:
hash_pair:
    // merkle/contract.py:27-28
    // @subroutine
    // def hash_pair(a: Bytes, b: Bytes) -> Bytes:
    proto 2 1
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    frame_dig -2
    frame_dig -1
    b<
    bz hash_pair_ternary_false@2

hash_pair_ternary_true@1:
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    frame_dig -2
    frame_dig -1
    concat

hash_pair_ternary_merge@3:
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    sha256
    retsub

hash_pair_ternary_false@2:
    // merkle/contract.py:29
    // return op.sha256(a + b if BigUInt.from_bytes(a) < BigUInt.from_bytes(b) else b + a)
    frame_dig -1
    frame_dig -2
    concat
    b hash_pair_ternary_merge@3
