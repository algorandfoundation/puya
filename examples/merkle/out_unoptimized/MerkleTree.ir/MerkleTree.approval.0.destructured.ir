main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L9
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // abi_routing_L9
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create(byte[32])void" => block@3, method "verify(byte[32][],byte[32])bool" => block@4, * => block@5}
    block@3: // create_route_L10
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        (assert tmp%6#0) // can only call when creating
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        examples.merkle.contract.MerkleTree.create(reinterpret_Encoded(uint8[32])%0#0)
        let examples.merkle.contract.MerkleTree.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.merkle.contract.MerkleTree.__puya_arc4_router__%0#0
        goto block@9
    block@4: // verify_route_L14
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[32][])%0#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint8[32])%1#0: Encoded(uint8[32]) = (txna ApplicationArgs 2)
        let to_encode%0#0: bool = examples.merkle.contract.MerkleTree.verify(reinterpret_Encoded(len+uint8[32][])%0#0, reinterpret_Encoded(uint8[32])%1#0)
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u to_encode%0#0)
        let tmp%11#0: bytes = (concat 0x151f7c75 encoded_bool%0#0)
        (log tmp%11#0)
        let examples.merkle.contract.MerkleTree.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.merkle.contract.MerkleTree.__puya_arc4_router__%0#0
        goto block@9
    block@5: // switch_case_default_L9
        goto block@6
    block@6: // switch_case_next_L9
        goto block@8
    block@7: // bare_routing_L9
        goto block@8
    block@8: // after_if_else_L9
        let examples.merkle.contract.MerkleTree.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = examples.merkle.contract.MerkleTree.__puya_arc4_router__%0#0
        goto block@9
    block@9: // after_inlined_examples.merkle.contract.MerkleTree.__puya_arc4_router___L1
        return tmp%0#0

subroutine examples.merkle.contract.compute_root_hash(proof: Encoded(len+uint8[32][]), leaf: bytes) -> <bytes, Encoded(len+uint8[32][])>:
    block@0: // L19
        let computed#0: bytes = leaf#0
        let array%array_length%0#1: uint64 = (extract_uint16 proof#0 0u)
        let tmp%0#0: uint64 = array%array_length%0#1
        (assert 1u) // Step cannot be zero
        let idx#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L22
        let continue_looping%0#0: bool = (< idx#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L23
        let array_trimmed%0#0: bytes = ((extract 2 0) proof#0)
        let bytes_offset%0#0: uint64 = (* idx#0 32u)
        let encoded_element%0#0: bytes = (extract3 array_trimmed%0#0 bytes_offset%0#0 32u) // on error: index access is out of bounds
        let materialized_values%0#0: bytes = examples.merkle.contract.hash_pair(computed#0, encoded_element%0#0)
        let computed#0: bytes = materialized_values%0#0
        goto block@3
    block@3: // for_footer_L22
        let idx#0: uint64 = (+ idx#0 1u)
        goto block@1
    block@4: // after_for_L22
        return computed#0 proof#0

subroutine examples.merkle.contract.hash_pair(a: bytes, b: bytes) -> bytes:
    block@0: // L27
        let reinterpret_biguint%0#0: biguint = a#0
        let reinterpret_biguint%1#0: biguint = b#0
        let tmp%0#0: bool = (b< reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // ternary_true_L29
        let ternary_result%0#0: bytes = (concat a#0 b#0)
        goto block@3
    block@2: // ternary_false_L29
        let ternary_result%0#0: bytes = (concat b#0 a#0)
        goto block@3
    block@3: // ternary_merge_L29
        let tmp%1#0: bytes = (sha256 ternary_result%0#0)
        return tmp%1#0

subroutine examples.merkle.contract.MerkleTree.create(root: Encoded(uint8[32])) -> void:
    block@0: // L10
        (app_global_put "root" root#0)
        return 

subroutine examples.merkle.contract.MerkleTree.verify(proof: Encoded(len+uint8[32][]), leaf: Encoded(uint8[32])) -> bool:
    block@0: // L14
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "root")
        (assert maybe_exists%0#0) // check self.root exists
        let (compute_root_hash%0#0: bytes, compute_root_hash%1#0: Encoded(len+uint8[32][])) = examples.merkle.contract.compute_root_hash(proof#0, leaf#0)
        let tmp%0#0: bool = (== maybe_value%0#0 compute_root_hash%0#0)
        return tmp%0#0