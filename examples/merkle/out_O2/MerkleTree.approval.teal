#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 32
    bytecblock "root"
    intc_0 // 0
    dupn 2
    pushbytes ""
    dup
    txn ApplicationID
    !
    txn OnCompletion
    intc_1 // 1
    shl
    +
    switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_NoOp:
    pushbytes 0x8424203b // method "create(byte[32])void"
    txna ApplicationArgs 0
    match create_route@7
    err // this contract does not implement the given ABI method for create NoOp

create_route@7:
    bytec_0 // "root"
    txna ApplicationArgs 1
    app_global_put
    intc_1 // 1
    return

call_NoOp:
    pushbytes 0xc0290ad5 // method "verify(byte[32][],byte[32])bool"
    txna ApplicationArgs 0
    match verify_route@3
    err // this contract does not implement the given ABI method for call NoOp

verify_route@3:
    txna ApplicationArgs 1
    dup
    bury 4
    txna ApplicationArgs 2
    intc_0 // 0
    bytec_0 // "root"
    app_global_get_ex
    swap
    bury 7
    assert // check self.root exists
    swap
    intc_0 // 0
    extract_uint16
    bury 3
    intc_0 // 0
    bury 2
    bury 5

for_header@22:
    dup
    dig 2
    <
    bz after_for@27
    dig 2
    extract 2 0
    dig 1
    intc_2 // 32
    *
    intc_2 // 32
    extract3 // on error: index access is out of bounds
    dup
    dig 6
    b>
    bz ternary_false@25
    dig 5
    swap
    concat

ternary_merge@26:
    sha256
    bury 5
    dup
    intc_1 // 1
    +
    bury 1
    b for_header@22

ternary_false@25:
    dig 5
    concat
    b ternary_merge@26

after_for@27:
    dig 3
    dig 5
    ==
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return
