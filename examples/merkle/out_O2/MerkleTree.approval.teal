#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 32 1
    bytecblock "root"
    intc_0 // 0
    dupn 2
    pushbytes ""
    dup
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@5
    pushbytes 0xc0290ad5 // method "verify(byte[32][],byte[32])bool"
    txna ApplicationArgs 0
    match main_verify_route@3
    err

main_verify_route@3:
    txna ApplicationArgs 1
    dup
    bury 4
    dup
    intc_0 // 0
    extract_uint16
    dup
    bury 4
    intc_1 // 32
    *
    pushint 2 // 2
    +
    swap
    len
    ==
    assert // invalid number of bytes for (len+uint8[32][])
    txna ApplicationArgs 2
    dup
    len
    intc_1 // 32
    ==
    assert // invalid number of bytes for uint8[32]
    intc_0 // 0
    bytec_0 // "root"
    app_global_get_ex
    swap
    bury 6
    assert // check self.root exists
    intc_0 // 0
    swap
    bury 6
    bury 1

main_for_header@10:
    dup
    dig 2
    <
    bz main_after_for@15
    dig 2
    extract 2 0
    dig 1
    intc_1 // 32
    *
    intc_1 // 32
    extract3 // on error: index access is out of bounds
    dup
    dig 6
    b>
    bz main_ternary_false@13
    dig 5
    swap
    concat

main_ternary_merge@14:
    sha256
    bury 5
    dup
    intc_2 // 1
    +
    bury 1
    b main_for_header@10

main_ternary_false@13:
    dig 5
    concat
    b main_ternary_merge@14

main_after_for@15:
    dig 3
    dig 5
    ==
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_2 // 1
    return

main_create_NoOp@5:
    pushbytes 0x8424203b // method "create(byte[32])void"
    txna ApplicationArgs 0
    match main_create_route@6
    err

main_create_route@6:
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 32
    ==
    assert // invalid number of bytes for uint8[32]
    bytec_0 // "root"
    swap
    app_global_put
    intc_2 // 1
    return
