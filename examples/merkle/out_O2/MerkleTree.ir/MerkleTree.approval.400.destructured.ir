main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@6, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20][tmp%4#0] else goto block@20
    block@2: // switch_case_0_L9
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "verify(byte[32][],byte[32])bool" => block@3, * => block@5}
    block@3: // verify_route_L14
        let proof#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let leaf#0: Encoded(uint8[32]) = (txna ApplicationArgs 2)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "root")
        (assert maybe_exists%0#0) // check self.root exists
        let aggregate%array_length%0#0: uint64 = (extract_uint16 proof#0 0u)
        let idx#0: uint64 = 0u
        let computed#1: bytes = leaf#0
        goto block@22
    block@22: // for_header_L22
        let continue_looping%0#0: bool = (< idx#0 aggregate%array_length%0#0)
        goto continue_looping%0#0 ? block@23 : block@27
    block@23: // for_body_L23
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) proof#0)
        let aggregate%bytes_offset%0#0: uint64 = (* idx#0 32u)
        let b#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 32u) // on error: index access is out of bounds
        let tmp%0#1: bool = (b< computed#1 b#0)
        goto tmp%0#1 ? block@24 : block@25
    block@24: // ternary_true_L29
        let ternary_result%0#0: bytes = (concat computed#1 b#0)
        goto block@26
    block@25: // ternary_false_L29
        let ternary_result%0#0: bytes = (concat b#0 computed#1)
        goto block@26
    block@26: // ternary_merge_L29
        let computed#1: bytes = (sha256 ternary_result%0#0)
        let idx#0: uint64 = (+ idx#0 1u)
        goto block@22
    block@27: // after_for_L22
        let tmp%0#1: bool = (== maybe_value%0#0 computed#1)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%0#1)
        let tmp%2#1: bytes = (concat 0x151f7c75 aggregate%encoded_bool%0#0)
        (log tmp%2#1)
        exit 1u
    block@5: // switch_case_next_L9
        fail // this contract does not implement the given ABI method for call NoOp
    block@6: // switch_case_1_L9
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "create(byte[32])void" => block@7, * => block@9}
    block@7: // create_route_L10
        let root#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        (app_global_put "root" root#0)
        exit 1u
    block@9: // switch_case_next_L9
        fail // this contract does not implement the given ABI method for create NoOp
    block@20: // switch_case_default_L9
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?