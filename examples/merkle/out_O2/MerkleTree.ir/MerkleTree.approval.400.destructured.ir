main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn OnCompletion)
        let tmp%1#0: bool = (! tmp%0#1)
        (assert tmp%1#0) // OnCompletion must be NoOp
        let tmp%2#0: uint64 = (txn ApplicationID)
        goto tmp%2#0 ? block@2 : block@5
    block@2: // call_NoOp_L9
        let tmp%4#0: bytes = (txna ApplicationArgs 0)
        switch tmp%4#0 {method "verify(byte[32][],byte[32])bool" => block@3, * => block@8}
    block@3: // verify_route_L14
        let proof#0: Encoded(len+uint8[32][]) = (txna ApplicationArgs 1)
        let aggregate%array_length%0#0: uint64 = (extract_uint16 proof#0 0u) // on error: invalid array length header
        let mul%0#0: uint64 = (* aggregate%array_length%0#0 32u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let len%0#0: uint64 = (len proof#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for arc4.dynamic_array<arc4.static_array<arc4.uint8, 32>>
        let leaf#0: Encoded(uint8[32]) = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len leaf#0)
        let eq%1#0: bool = (== len%1#0 32u)
        (assert eq%1#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "root")
        (assert maybe_exists%0#0) // check self.root exists
        let value_internal%0#0: uint64 = 0u
        let computed#1: bytes = leaf#0
        let idx#0: uint64 = value_internal%0#0
        goto block@10
    block@10: // for_header_L22
        let continue_looping%0#0: bool = (< idx#0 aggregate%array_length%0#0)
        goto continue_looping%0#0 ? block@11 : block@15
    block@11: // for_body_L23
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) proof#0)
        let aggregate%bytes_offset%0#0: uint64 = (* idx#0 32u)
        let b#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 32u) // on error: index access is out of bounds
        let tmp%0#3: bool = (b< computed#1 b#0)
        goto tmp%0#3 ? block@12 : block@13
    block@12: // ternary_true_L29
        let ternary_result%0#0: bytes = (concat computed#1 b#0)
        goto block@14
    block@13: // ternary_false_L29
        let ternary_result%0#0: bytes = (concat b#0 computed#1)
        goto block@14
    block@14: // ternary_merge_L29
        let computed#1: bytes = (sha256 ternary_result%0#0)
        let value_internal%0#0: uint64 = (+ idx#0 1u)
        let idx#0: uint64 = value_internal%0#0
        goto block@10
    block@15: // after_for_L22
        let tmp%0#3: bool = (== maybe_value%0#0 computed#1)
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%0#3)
        let tmp%4#0: bytes = (concat 0x151f7c75 aggregate%encoded_bool%0#0)
        (log tmp%4#0)
        exit 1u
    block@5: // create_NoOp_L9
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "create(byte[32])void" => block@6, * => block@8}
    block@6: // create_route_L10
        let root#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len root#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.static_array<arc4.uint8, 32>
        (app_global_put "root" root#0)
        exit 1u
    block@8: // after_if_else_L9
        fail