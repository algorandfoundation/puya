{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAQA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAKK;;AAAA;AAAA;AAAA;;AAAA;AALL;;;AAAA;AAAA;;AAAA;;;AAOe;AAAA;AAAA;AAAA;AAAA;;AAAA;AAMO;AAAA;AAAA;AAAA;;AAAP;AAAP;;;;AAAO;AAAA;AAAf;;;AACuC;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMT;;AAAA;AAAT;;;AAAA;;AAAA;AAAA;AAAV;AAAA;;AAPI;;AAAA;AAAA;AAAA;;;;;AAOkE;;AAAA;;;;AAblE;;AAAA;;AAAA;AAFV;;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAEG;AAHR;;;AAGQ;AAFH;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32"
    },
    "6": {
      "op": "bytecblock \"root\""
    },
    "13": {
      "op": "intc_0 // 0",
      "stack_out": [
        "computed#1"
      ]
    },
    "14": {
      "op": "dupn 2",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0"
      ]
    },
    "16": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0"
      ]
    },
    "18": {
      "op": "dup",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "19": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "21": {
      "op": "bz main_after_if_else@8",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "24": {
      "op": "pushbytess 0x8424203b 0xc0290ad5 // method \"create(byte[32])void\", method \"verify(byte[32][],byte[32])bool\""
    },
    "36": {
      "op": "txna ApplicationArgs 0"
    },
    "39": {
      "op": "match main_create_route@3 main_verify_route@4"
    },
    "45": {
      "block": "main_after_if_else@8",
      "stack_in": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%0#0"
      ]
    },
    "46": {
      "op": "return"
    },
    "47": {
      "block": "main_verify_route@4",
      "stack_in": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%8#0"
      ]
    },
    "49": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%9#0"
      ]
    },
    "50": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "51": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%10#0"
      ]
    },
    "53": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "54": {
      "op": "txna ApplicationArgs 1"
    },
    "57": {
      "op": "dup",
      "defined_out": [
        "proof#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "proof#0",
        "proof#0"
      ]
    },
    "58": {
      "op": "bury 4",
      "defined_out": [
        "proof#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "proof#0"
      ]
    },
    "60": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "leaf#0",
        "proof#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "proof#0",
        "leaf#0"
      ]
    },
    "63": {
      "op": "intc_0 // 0",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "proof#0",
        "leaf#0",
        "0"
      ]
    },
    "64": {
      "op": "bytec_0 // \"root\"",
      "defined_out": [
        "\"root\"",
        "0",
        "leaf#0",
        "proof#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "proof#0",
        "leaf#0",
        "0",
        "\"root\""
      ]
    },
    "65": {
      "op": "app_global_get_ex",
      "defined_out": [
        "leaf#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "proof#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "proof#0",
        "leaf#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "66": {
      "op": "swap",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "proof#0",
        "leaf#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "67": {
      "op": "bury 7",
      "defined_out": [
        "leaf#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "proof#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "proof#0",
        "leaf#0",
        "maybe_exists%0#0"
      ]
    },
    "69": {
      "error": "check self.root exists",
      "op": "assert // check self.root exists",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "proof#0",
        "leaf#0"
      ]
    },
    "70": {
      "op": "swap",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "leaf#0",
        "proof#0"
      ]
    },
    "71": {
      "op": "intc_0 // 0",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "leaf#0",
        "proof#0",
        "0"
      ]
    },
    "72": {
      "op": "extract_uint16",
      "defined_out": [
        "leaf#0",
        "maybe_value%0#0",
        "proof#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "leaf#0",
        "tmp%0#1"
      ]
    },
    "73": {
      "op": "bury 2",
      "defined_out": [
        "leaf#0",
        "maybe_value%0#0",
        "proof#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "leaf#0"
      ]
    },
    "75": {
      "op": "intc_0 // 0",
      "defined_out": [
        "idx#0",
        "leaf#0",
        "maybe_value%0#0",
        "proof#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "leaf#0",
        "idx#0"
      ]
    },
    "76": {
      "op": "bury 3",
      "defined_out": [
        "computed#1",
        "idx#0",
        "maybe_value%0#0",
        "proof#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "computed#1"
      ]
    },
    "78": {
      "op": "bury 5",
      "defined_out": [
        "computed#1",
        "idx#0",
        "maybe_value%0#0",
        "proof#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "80": {
      "block": "main_for_header@11",
      "stack_in": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ],
      "op": "dup2",
      "defined_out": [
        "idx#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "81": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "idx#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "continue_looping%0#0"
      ]
    },
    "82": {
      "op": "bz main_after_for@16",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "85": {
      "op": "dig 2"
    },
    "87": {
      "op": "extract 2 0"
    },
    "90": {
      "op": "dig 2"
    },
    "92": {
      "op": "intc_2 // 32"
    },
    "93": {
      "op": "*"
    },
    "94": {
      "op": "intc_2 // 32"
    },
    "95": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "96": {
      "op": "dup"
    },
    "97": {
      "op": "dig 6"
    },
    "99": {
      "op": "b>"
    },
    "100": {
      "op": "bz main_ternary_false@14"
    },
    "103": {
      "op": "dig 5"
    },
    "105": {
      "op": "swap"
    },
    "106": {
      "op": "concat"
    },
    "107": {
      "block": "main_ternary_merge@15",
      "stack_in": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "ternary_result%0#0"
      ],
      "op": "sha256",
      "defined_out": [
        "computed#1"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "computed#1"
      ]
    },
    "108": {
      "op": "bury 5",
      "defined_out": [
        "computed#1"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "110": {
      "op": "dig 1",
      "defined_out": [
        "computed#1",
        "idx#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "idx#0"
      ]
    },
    "112": {
      "op": "intc_1 // 1",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "idx#0",
        "1"
      ]
    },
    "113": {
      "op": "+",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "idx#0"
      ]
    },
    "114": {
      "op": "bury 2",
      "defined_out": [
        "computed#1",
        "idx#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "116": {
      "op": "b main_for_header@11"
    },
    "119": {
      "block": "main_ternary_false@14",
      "stack_in": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "b#0"
      ],
      "op": "dig 5",
      "defined_out": [
        "b#0",
        "computed#1"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "b#0",
        "computed#1"
      ]
    },
    "121": {
      "op": "concat",
      "defined_out": [
        "computed#1",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "ternary_result%0#0"
      ]
    },
    "122": {
      "op": "b main_ternary_merge@15"
    },
    "125": {
      "block": "main_after_for@16",
      "stack_in": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ],
      "op": "dig 3",
      "defined_out": [
        "maybe_value%0#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "127": {
      "op": "dig 5",
      "defined_out": [
        "computed#1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "maybe_value%0#0",
        "computed#1"
      ]
    },
    "129": {
      "op": "==",
      "defined_out": [
        "computed#1",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%0#0"
      ]
    },
    "130": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "computed#1",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%0#0",
        "0x00"
      ]
    },
    "133": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "computed#1",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%0#0",
        "0x00",
        "0"
      ]
    },
    "134": {
      "op": "uncover 2",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "0x00",
        "0",
        "tmp%0#0"
      ]
    },
    "136": {
      "op": "setbit",
      "defined_out": [
        "computed#1",
        "encoded_bool%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "encoded_bool%0#0"
      ]
    },
    "137": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "computed#1",
        "encoded_bool%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "143": {
      "op": "swap",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "144": {
      "op": "concat",
      "defined_out": [
        "computed#1",
        "maybe_value%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%14#0"
      ]
    },
    "145": {
      "op": "log",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "146": {
      "op": "intc_1 // 1",
      "defined_out": [
        "computed#1",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%0#0"
      ]
    },
    "147": {
      "op": "return"
    },
    "148": {
      "block": "main_create_route@3",
      "stack_in": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%3#0"
      ]
    },
    "150": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%4#0"
      ]
    },
    "151": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "152": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%5#0"
      ]
    },
    "154": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%6#0"
      ]
    },
    "155": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "156": {
      "op": "bytec_0 // \"root\""
    },
    "157": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"root\"",
        "root#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "\"root\"",
        "root#0"
      ]
    },
    "160": {
      "op": "app_global_put",
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1"
      ]
    },
    "161": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "computed#1",
        "maybe_value%0#0",
        "proof#0",
        "idx#0",
        "tmp%0#1",
        "tmp%0#0"
      ]
    },
    "162": {
      "op": "return"
    }
  }
}