struct TestStruct {
  b_val: puyapy.arc4.Bool
  u_val: puyapy.arc4.UIntN[typing.Literal[8]]
  s_val_1: puyapy.arc4.String
  s_val_2: puyapy.arc4.String
}

contract Arc4MutationContract
{
  approval_program(): bool
  {
    this::dynamic_array_fixed_size()
    this::dynamic_array_bool()
    this::dynamic_array_string()
    this::array_of_array_dynamic()
    this::array_of_array_static()
    this::index_assign()
    this::struct_assign()
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine array_of_array_dynamic(): None
  {
    array_of_array: puyapy.arc4.DynamicArray[puyapy.arc4.DynamicArray[puyapy.arc4.UIntN[typing.Literal[8]]]] = arc4_array_encode([], puyapy.arc4.DynamicArray[puyapy.arc4.DynamicArray[puyapy.arc4.UIntN[typing.Literal[8]]]])
    assert(reinterpret_cast<puyapy.Bytes>(array_of_array) == hex<"0000">)
    array_of_array.extend((arc4_array_encode([10arc4u8], puyapy.arc4.DynamicArray[puyapy.arc4.UIntN[typing.Literal[8]]])))
    assert(reinterpret_cast<puyapy.Bytes>(array_of_array) == hex<"0001000200010A">)
    array_of_array.extend((arc4_array_encode([16arc4u8], puyapy.arc4.DynamicArray[puyapy.arc4.UIntN[typing.Literal[8]]])))
    assert(reinterpret_cast<puyapy.Bytes>(array_of_array) == hex<"00020004000700010A000110">)
    array_of_array[0u].extend((255arc4u8))
    assert(reinterpret_cast<puyapy.Bytes>(array_of_array) == hex<"00020004000800020AFF000110">)
    array_of_array[0u][1u]: puyapy.arc4.UIntN[typing.Literal[8]] = 0arc4u8
    assert(reinterpret_cast<puyapy.Bytes>(array_of_array) == hex<"00020004000800020A00000110">)
  }
  
  subroutine array_of_array_static(): None
  {
    array_of_array: puyapy.arc4.StaticArray[puyapy.arc4.StaticArray[puyapy.arc4.UIntN[typing.Literal[8]], typing.Literal[2]], typing.Literal[2]] = arc4_array_encode([arc4_array_encode([10arc4u8, 9arc4u8], puyapy.arc4.StaticArray[puyapy.arc4.UIntN[typing.Literal[8]], typing.Literal[2]]), arc4_array_encode([64arc4u8, 128arc4u8], puyapy.arc4.StaticArray[puyapy.arc4.UIntN[typing.Literal[8]], typing.Literal[2]])], puyapy.arc4.StaticArray[puyapy.arc4.StaticArray[puyapy.arc4.UIntN[typing.Literal[8]], typing.Literal[2]], typing.Literal[2]])
    assert(reinterpret_cast<puyapy.Bytes>(array_of_array) == hex<"0A094080">)
    array_of_array[0u]: puyapy.arc4.StaticArray[puyapy.arc4.UIntN[typing.Literal[8]], typing.Literal[2]] = arc4_array_encode([255arc4u8, 254arc4u8], puyapy.arc4.StaticArray[puyapy.arc4.UIntN[typing.Literal[8]], typing.Literal[2]])
    assert(reinterpret_cast<puyapy.Bytes>(array_of_array) == hex<"FFFE4080">)
    array_of_array[1u][0u]: puyapy.arc4.UIntN[typing.Literal[8]] = 1arc4u8
    assert(reinterpret_cast<puyapy.Bytes>(array_of_array) == hex<"FFFE0180">)
  }
  
  subroutine index_assign(): None
  {
    dynamic_uint8_array: puyapy.arc4.DynamicArray[puyapy.arc4.UIntN[typing.Literal[8]]] = arc4_array_encode([1arc4u8, 2arc4u8], puyapy.arc4.DynamicArray[puyapy.arc4.UIntN[typing.Literal[8]]])
    dynamic_uint8_array[0u]: puyapy.arc4.UIntN[typing.Literal[8]] = 255arc4u8
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_uint8_array) == hex<"0002FF02">)
    static_uint8_array: puyapy.arc4.StaticArray[puyapy.arc4.UIntN[typing.Literal[8]], typing.Literal[2]] = arc4_array_encode([1arc4u8, 2arc4u8], puyapy.arc4.StaticArray[puyapy.arc4.UIntN[typing.Literal[8]], typing.Literal[2]])
    static_uint8_array[1u]: puyapy.arc4.UIntN[typing.Literal[8]] = 255arc4u8
    assert(reinterpret_cast<puyapy.Bytes>(static_uint8_array) == hex<"01FF">)
    dynamic_bool_array: puyapy.arc4.DynamicArray[puyapy.arc4.Bool] = arc4_array_encode([arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool)], puyapy.arc4.DynamicArray[puyapy.arc4.Bool])
    dynamic_bool_array[0u]: puyapy.arc4.Bool = arc4_encode(false, puyapy.arc4.Bool)
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_bool_array) == hex<"000200">)
    static_bool_array: puyapy.arc4.StaticArray[puyapy.arc4.Bool, typing.Literal[2]] = arc4_array_encode([arc4_encode(true, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool)], puyapy.arc4.StaticArray[puyapy.arc4.Bool, typing.Literal[2]])
    static_bool_array[1u]: puyapy.arc4.Bool = arc4_encode(false, puyapy.arc4.Bool)
    assert(reinterpret_cast<puyapy.Bytes>(static_bool_array) == hex<"80">)
  }
  
  subroutine struct_assign(): None
  {
    test_struct: examples.arc4_types.mutation.TestStruct = arc4_encode((arc4_encode(true, puyapy.arc4.Bool), 50arc4u8, arc4_encode('Happy', puyapy.arc4.String), arc4_encode('Days', puyapy.arc4.String)), examples.arc4_types.mutation.TestStruct)
    test_struct[0u]: puyapy.arc4.Bool = arc4_encode(false, puyapy.arc4.Bool)
    test_struct[1u]: puyapy.arc4.UIntN[typing.Literal[8]] = 12arc4u8
    assert(reinterpret_cast<puyapy.Bytes>(test_struct) == reinterpret_cast<puyapy.Bytes>(arc4_encode((arc4_encode(false, puyapy.arc4.Bool), 12arc4u8, arc4_encode('Happy', puyapy.arc4.String), arc4_encode('Days', puyapy.arc4.String)), examples.arc4_types.mutation.TestStruct)))
    test_struct[2u]: puyapy.arc4.String = arc4_encode('Hmmmm', puyapy.arc4.String)
    test_struct[3u]: puyapy.arc4.String = arc4_encode('Oh well', puyapy.arc4.String)
    assert(reinterpret_cast<puyapy.Bytes>(test_struct) == reinterpret_cast<puyapy.Bytes>(arc4_encode((arc4_encode(false, puyapy.arc4.Bool), 12arc4u8, arc4_encode('Hmmmm', puyapy.arc4.String), arc4_encode('Oh well', puyapy.arc4.String)), examples.arc4_types.mutation.TestStruct)))
  }
  
  subroutine dynamic_array_fixed_size(): None
  {
    dynamic_uint8_array: puyapy.arc4.DynamicArray[puyapy.arc4.UIntN[typing.Literal[8]]] = arc4_array_encode([1arc4u8, 2arc4u8], puyapy.arc4.DynamicArray[puyapy.arc4.UIntN[typing.Literal[8]]])
    dynamic_uint8_array.extend((50arc4u8))
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_uint8_array) == reinterpret_cast<puyapy.Bytes>(arc4_array_encode([1arc4u8, 2arc4u8, 50arc4u8], puyapy.arc4.DynamicArray[puyapy.arc4.UIntN[typing.Literal[8]]])))
    dynamic_uint8_array.extend(dynamic_uint8_array)
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_uint8_array) == reinterpret_cast<puyapy.Bytes>(arc4_array_encode([1arc4u8, 2arc4u8, 50arc4u8, 1arc4u8, 2arc4u8, 50arc4u8], puyapy.arc4.DynamicArray[puyapy.arc4.UIntN[typing.Literal[8]]])))
    dynamic_uint8_array.extend((4arc4u8, 90arc4u8))
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_uint8_array) == reinterpret_cast<puyapy.Bytes>(arc4_array_encode([1arc4u8, 2arc4u8, 50arc4u8, 1arc4u8, 2arc4u8, 50arc4u8, 4arc4u8, 90arc4u8], puyapy.arc4.DynamicArray[puyapy.arc4.UIntN[typing.Literal[8]]])))
    popped: puyapy.arc4.UIntN[typing.Literal[8]] = dynamic_uint8_array.pop()
    assert(reinterpret_cast<puyapy.Bytes>(popped) == reinterpret_cast<puyapy.Bytes>(90arc4u8))
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_uint8_array) == reinterpret_cast<puyapy.Bytes>(arc4_array_encode([1arc4u8, 2arc4u8, 50arc4u8, 1arc4u8, 2arc4u8, 50arc4u8, 4arc4u8], puyapy.arc4.DynamicArray[puyapy.arc4.UIntN[typing.Literal[8]]])))
  }
  
  subroutine dynamic_array_bool(): None
  {
    dynamic_bool_array: puyapy.arc4.DynamicArray[puyapy.arc4.Bool] = arc4_array_encode([arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool)], puyapy.arc4.DynamicArray[puyapy.arc4.Bool])
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_bool_array) == hex<"000280">)
    dynamic_bool_array.extend((arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool)))
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_bool_array) == hex<"0004A0">)
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_bool_array) == reinterpret_cast<puyapy.Bytes>(arc4_array_encode([arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool)], puyapy.arc4.DynamicArray[puyapy.arc4.Bool])))
    dynamic_bool_array.extend(dynamic_bool_array)
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_bool_array) == reinterpret_cast<puyapy.Bytes>(arc4_array_encode([arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool)], puyapy.arc4.DynamicArray[puyapy.arc4.Bool])))
    dynamic_bool_array.extend((arc4_encode(true, puyapy.arc4.Bool)))
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_bool_array) == reinterpret_cast<puyapy.Bytes>(arc4_array_encode([arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool), arc4_encode(false, puyapy.arc4.Bool), arc4_encode(true, puyapy.arc4.Bool)], puyapy.arc4.DynamicArray[puyapy.arc4.Bool])))
  }
  
  subroutine dynamic_array_string(): None
  {
    hello: puyapy.arc4.String = arc4_encode('Hello', puyapy.arc4.String)
    world: puyapy.arc4.String = arc4_encode('World', puyapy.arc4.String)
    foo: puyapy.arc4.String = arc4_encode('Foo', puyapy.arc4.String)
    bar: puyapy.arc4.String = arc4_encode('Bar', puyapy.arc4.String)
    dynamic_string_array: puyapy.arc4.DynamicArray[puyapy.arc4.String] = arc4_array_encode([hello, world], puyapy.arc4.DynamicArray[puyapy.arc4.String])
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_string_array) == '\x00\x02\x00\x04\x00\x0b\x00\x05Hello\x00\x05World')
    dynamic_string_array.extend((foo, bar))
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_string_array) == '\x00\x04\x00\x08\x00\x0f\x00\x16\x00\x1b\x00\x05Hello\x00\x05World\x00\x03Foo\x00\x03Bar')
    dynamic_string_array.extend(dynamic_string_array)
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_string_array) == reinterpret_cast<puyapy.Bytes>(arc4_array_encode([hello, world, foo, bar, hello, world, foo, bar], puyapy.arc4.DynamicArray[puyapy.arc4.String])))
    dynamic_string_array: puyapy.arc4.DynamicArray[puyapy.arc4.String] = arc4_array_encode([hello, world, foo, bar, hello, world, foo, bar], puyapy.arc4.DynamicArray[puyapy.arc4.String])
    dynamic_string_array[3u]: puyapy.arc4.String = hello
    dynamic_string_array[5u]: puyapy.arc4.String = hello
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_string_array) == reinterpret_cast<puyapy.Bytes>(arc4_array_encode([hello, world, foo, hello, hello, hello, foo, bar], puyapy.arc4.DynamicArray[puyapy.arc4.String])))
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_string_array.pop()) == reinterpret_cast<puyapy.Bytes>(bar))
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_string_array.pop()) == reinterpret_cast<puyapy.Bytes>(foo))
    assert(reinterpret_cast<puyapy.Bytes>(dynamic_string_array) == reinterpret_cast<puyapy.Bytes>(arc4_array_encode([hello, world, foo, hello, hello, hello], puyapy.arc4.DynamicArray[puyapy.arc4.String])))
  }
}