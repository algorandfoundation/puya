contract contract.EventEmitter:
    program approval:
        subroutine contract.EventEmitter.approval_program() -> bool:
            block@0: // L9
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@5
            block@1: // abi_routing_L9
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "emit_swapped(uint64,uint64)void" => block@2, * => block@3}
            block@2: // emit_swapped_route_L10
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (== tmp%2#0 NoOp)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                let tmp%6#0: bytes = (txna ApplicationArgs 2)
                contract.EventEmitter.emit_swapped(tmp%5#0, tmp%6#0)
                return 1u
            block@3: // switch_case_default_L9
                goto block@4
            block@4: // switch_case_next_L9
                fail // reject transaction
            block@5: // bare_routing_L9
                let tmp%7#0: uint64 = (txn OnCompletion)
                switch tmp%7#0 {0u => block@6, * => block@7}
            block@6: // create_L9
                let tmp%8#0: bool = (txn ApplicationID)
                let tmp%9#0: bool = (! tmp%8#0)
                (assert tmp%9#0) // is creating
                return 1u
            block@7: // reject_bare_on_completion_L9
                fail // reject transaction
        
        subroutine contract.EventEmitter.emit_swapped(a: bytes, b: bytes) -> void:
            block@0: // L10
                let current_tail_offset%0#0: uint64 = 16u
                let encoded_tuple_buffer%0#0: bytes = 0x
                let encoded_tuple_buffer%0#1: bytes = (concat encoded_tuple_buffer%0#0 b#0)
                let encoded_tuple_buffer%0#2: bytes = (concat encoded_tuple_buffer%0#1 a#0)
                let tmp%0#0: bytes = (concat method "Swapped(uint64,uint64)" encoded_tuple_buffer%0#2)
                (log tmp%0#0)
                let current_tail_offset%1#0: uint64 = 16u
                let encoded_tuple_buffer%1#0: bytes = 0x
                let encoded_tuple_buffer%1#1: bytes = (concat encoded_tuple_buffer%1#0 b#0)
                let encoded_tuple_buffer%1#2: bytes = (concat encoded_tuple_buffer%1#1 a#0)
                let tmp%1#0: bytes = (concat method "Swapped(uint64,uint64)" encoded_tuple_buffer%1#2)
                (log tmp%1#0)
                let current_tail_offset%2#0: uint64 = 16u
                let encoded_tuple_buffer%2#0: bytes = 0x
                let encoded_tuple_buffer%2#1: bytes = (concat encoded_tuple_buffer%2#0 b#0)
                let encoded_tuple_buffer%2#2: bytes = (concat encoded_tuple_buffer%2#1 a#0)
                let tmp%2#0: bytes = (concat method "Swapped(uint64,uint64)" encoded_tuple_buffer%2#2)
                (log tmp%2#0)
                return 
    
    program clear-state:
        subroutine contract.EventEmitter.clear_state_program() -> bool:
            block@0: // L9
                return 1u