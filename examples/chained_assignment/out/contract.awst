WAVE = b'\xf0\x9f\x91\x8b'

abstract contract BaseContract
{
  globals {
    ['state1']: puyapy.Bytes
    ['state2']: puyapy.Bytes
  }
  
  constructor()
  {
    this.globals['state2']: puyapy.Bytes = tmp$0: puyapy.Bytes := examples.chained_assignment.contract::join_log_and_return(right='\xf0\x9f\x91\x8b', left='Hello, world!')
    this.globals['state1']: puyapy.Bytes = tmp$0
  }
}

contract ChainedAssignment extends (examples.chained_assignment.contract::BaseContract)
{
  constructor()
  {
    examples.chained_assignment.contract::BaseContract::__init__()
  }
  
  approval_program(): bool
  {
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}

subroutine join_log_and_return(left: puyapy.Bytes, right: puyapy.Bytes): puyapy.Bytes
{
  result: puyapy.Bytes = left + ' ' + right
  log(result)
  return result
}