{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;AAQA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;;;;AAAA;AACK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAL;;;;;;AAEe;;;;;;;;;AAAA;;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "b main_block@0"
    },
    "8": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "11": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "13": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "14": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "15": {
      "op": "bz main___algopy_default_create@6",
      "stack_out": []
    },
    "18": {
      "op": "b main_abi_routing@2"
    },
    "21": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "24": {
      "op": "pushbytes 0x02bece11 // method \"hello(string)string\"",
      "defined_out": [
        "Method(hello(string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(hello(string)string)"
      ]
    },
    "30": {
      "op": "uncover 1",
      "stack_out": [
        "Method(hello(string)string)",
        "tmp%2#0"
      ]
    },
    "32": {
      "op": "match main_hello_route@3",
      "stack_out": []
    },
    "36": {
      "op": "b main_switch_case_default@4"
    },
    "39": {
      "block": "main_switch_case_default@4",
      "stack_in": [],
      "op": "b main_switch_case_next@5"
    },
    "42": {
      "block": "main_switch_case_next@5",
      "stack_in": [],
      "op": "b main_after_if_else@7"
    },
    "45": {
      "block": "main_after_if_else@7",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "46": {
      "block": "main_hello_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "48": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "49": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "50": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "52": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "53": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "54": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "55": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "56": {
      "callsub": "examples.hello_world_arc4.contract.HelloWorldContract.hello[routing]",
      "op": "callsub hello"
    },
    "59": {
      "op": "b main_switch_case_next@5"
    },
    "62": {
      "block": "main___algopy_default_create@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "64": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "65": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "66": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "68": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "0"
      ]
    },
    "69": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "70": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "71": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "72": {
      "op": "b main_block@9"
    },
    "75": {
      "block": "main_block@9",
      "stack_in": [],
      "op": "b main_after_inlined_examples.hello_world_arc4.contract.HelloWorldContract.__algopy_default_create@10"
    },
    "78": {
      "block": "main_after_inlined_examples.hello_world_arc4.contract.HelloWorldContract.__algopy_default_create@10",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "79": {
      "op": "return",
      "stack_out": []
    },
    "80": {
      "subroutine": "examples.hello_world_arc4.contract.HelloWorldContract.hello[routing]",
      "params": {},
      "block": "hello",
      "stack_in": [],
      "op": "b hello_block@0"
    },
    "83": {
      "block": "hello_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "86": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "89": {
      "callsub": "examples.hello_world_arc4.contract.HelloWorldContract.hello",
      "op": "callsub examples.hello_world_arc4.contract.HelloWorldContract.hello",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "92": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "93": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length%0#0"
      ]
    },
    "94": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "95": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "98": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%1#0"
      ]
    },
    "100": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "101": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "107": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%2#0"
      ]
    },
    "109": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "110": {
      "op": "log",
      "stack_out": []
    },
    "111": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "112": {
      "op": "return",
      "stack_out": []
    },
    "113": {
      "subroutine": "examples.hello_world_arc4.contract.HelloWorldContract.hello",
      "params": {
        "name#0": "bytes"
      },
      "block": "examples.hello_world_arc4.contract.HelloWorldContract.hello",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "116": {
      "op": "b examples.hello_world_arc4.contract.HelloWorldContract.hello_block@0"
    },
    "119": {
      "block": "examples.hello_world_arc4.contract.HelloWorldContract.hello_block@0",
      "stack_in": [],
      "op": "pushbytes \"Hello, \"",
      "defined_out": [
        "\"Hello, \""
      ],
      "stack_out": [
        "\"Hello, \""
      ]
    },
    "128": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Hello, \"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"Hello, \"",
        "name#0 (copy)"
      ]
    },
    "130": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "131": {
      "retsub": true,
      "op": "retsub"
    }
  }
}