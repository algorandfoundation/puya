main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L9
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "hello(string)string" => block@3, * => block@4}
    block@3: // hello_route_L10
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        examples.hello_world_arc4.contract.HelloWorldContract.hello[routing]()
        goto block@4
    block@4: // switch_case_next_L9
        fail
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine examples.hello_world_arc4.contract.HelloWorldContract.hello[routing]() -> void:
    block@0: // L10
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let name#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%0#0)
        let tmp%0#1: bytes = (concat "Hello, " name#0)
        let tmp%2#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%0#1)
        let tmp%3#0: bytes = (concat 0x151f7c75 tmp%2#0)
        (log tmp%3#0)
        exit 1u