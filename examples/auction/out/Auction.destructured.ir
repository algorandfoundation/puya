contract examples.auction.contract.Auction:
    program approval:
        subroutine examples.auction.contract.Auction.approval_program() -> bool:
            block@0: // L16
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L17
                examples.auction.contract.Auction.__init__()
                goto block@2
            block@2: // entrypoint_L17
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@3 : block@12
            block@3: // abi_routing_L16
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "opt_into_asset(asset)void" => block@4, method "start_auction(uint64,uint64,axfer)void" => block@5, method "opt_in()void" => block@6, method "bid(pay)void" => block@7, method "claim_bids()void" => block@8, method "claim_asset(asset)void" => block@9, * => fail // reject transaction}
            block@4: // opt_into_asset_route_L25
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                let tmp%6#0: uint64 = (btoi tmp%5#0)
                let tmp%7#0: uint64 = ((txnas Assets) tmp%6#0)
                examples.auction.contract.Auction.opt_into_asset(tmp%7#0)
                return 1u
            block@5: // start_auction_route_L40
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: bool = (! tmp%8#0)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: bool = (txn ApplicationID)
                (assert tmp%10#0) // is not creating
                let tmp%11#0: bytes = (txna ApplicationArgs 1)
                let tmp%12#0: uint64 = (btoi tmp%11#0)
                let tmp%13#0: bytes = (txna ApplicationArgs 2)
                let tmp%14#0: uint64 = (btoi tmp%13#0)
                let tmp%15#0: uint64 = (txn GroupIndex)
                let awst_tmp%0#0: uint64 = (- tmp%15#0 1u)
                let tmp%16#0: uint64 = ((gtxns TypeEnum) awst_tmp%0#0)
                let tmp%17#0: bool = (== tmp%16#0 axfer)
                (assert tmp%17#0) // transaction type is axfer
                examples.auction.contract.Auction.start_auction(tmp%12#0, tmp%14#0, awst_tmp%0#0)
                return 1u
            block@6: // opt_in_route_L62
                let tmp%18#0: uint64 = (txn OnCompletion)
                let tmp%19#0: bool = (! tmp%18#0)
                (assert tmp%19#0) // OnCompletion is NoOp
                let tmp%20#0: bool = (txn ApplicationID)
                (assert tmp%20#0) // is not creating
                examples.auction.contract.Auction.opt_in()
                return 1u
            block@7: // bid_route_L66
                let tmp%21#0: uint64 = (txn OnCompletion)
                let tmp%22#0: bool = (! tmp%21#0)
                (assert tmp%22#0) // OnCompletion is NoOp
                let tmp%23#0: bool = (txn ApplicationID)
                (assert tmp%23#0) // is not creating
                let tmp%24#0: uint64 = (txn GroupIndex)
                let awst_tmp%1#0: uint64 = (- tmp%24#0 1u)
                let tmp%25#0: uint64 = ((gtxns TypeEnum) awst_tmp%1#0)
                let tmp%26#0: bool = (== tmp%25#0 pay)
                (assert tmp%26#0) // transaction type is pay
                examples.auction.contract.Auction.bid(awst_tmp%1#0)
                return 1u
            block@8: // claim_bids_route_L82
                let tmp%27#0: uint64 = (txn OnCompletion)
                let tmp%28#0: bool = (! tmp%27#0)
                (assert tmp%28#0) // OnCompletion is NoOp
                let tmp%29#0: bool = (txn ApplicationID)
                (assert tmp%29#0) // is not creating
                examples.auction.contract.Auction.claim_bids()
                return 1u
            block@9: // claim_asset_route_L97
                let tmp%30#0: uint64 = (txn OnCompletion)
                let tmp%31#0: bool = (! tmp%30#0)
                (assert tmp%31#0) // OnCompletion is NoOp
                let tmp%32#0: bool = (txn ApplicationID)
                (assert tmp%32#0) // is not creating
                let tmp%33#0: bytes = (txna ApplicationArgs 1)
                let tmp%34#0: uint64 = (btoi tmp%33#0)
                let tmp%35#0: uint64 = ((txnas Assets) tmp%34#0)
                examples.auction.contract.Auction.claim_asset(tmp%35#0)
                return 1u
            block@12: // bare_routing_L16
                let tmp%36#0: uint64 = (txn OnCompletion)
                let not%tmp%36#0: bool = (! tmp%36#0)
                (assert not%tmp%36#0) // reject transaction
                let tmp%37#0: bool = (txn ApplicationID)
                let tmp%38#0: bool = (! tmp%37#0)
                (assert tmp%38#0) // is creating
                return 1u
        
        subroutine examples.auction.contract.Auction.opt_into_asset(asset: uint64) -> void:
            block@0: // L25
                let tmp%0#0: bytes = (txn Sender)
                let tmp%1#0: bytes = (global CreatorAddress)
                let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
                (assert tmp%2#0) // Only creator can opt in to ASA
                let (asa_value%0#0: uint64, asa_exists%0#0: bool) = (app_global_get_ex 0u "asa")
                (assert asa_exists%0#0) // check asa exists
                let tmp%3#0: bool = (! asa_value%0#0)
                (assert tmp%3#0) // ASA already opted in
                (app_global_put "asa" asset#0)
                itxn_begin
                let inner_txn_params%0%%param_AssetReceiver_idx_0#0: bytes = (global CurrentApplicationAddress)
                ((itxn_field XferAsset) asset#0)
                ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
                ((itxn_field TypeEnum) axfer)
                ((itxn_field Fee) 0u)
                itxn_submit
                return 
        
        subroutine examples.auction.contract.Auction.start_auction(starting_price: uint64, length: uint64, axfer: uint64) -> void:
            block@0: // L40
                let tmp%0#0: bytes = (txn Sender)
                let tmp%1#0: bytes = (global CreatorAddress)
                let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
                (assert tmp%2#0) // auction must be started by creator
                let (auction_end_value%0#0: uint64, auction_end_exists%0#0: bool) = (app_global_get_ex 0u "auction_end")
                (assert auction_end_exists%0#0) // check auction_end exists
                let tmp%3#0: bool = (! auction_end_value%0#0)
                (assert tmp%3#0) // auction already started
                let tmp%4#0: bytes = ((gtxns AssetReceiver) axfer#0)
                let tmp%5#0: bytes = (global CurrentApplicationAddress)
                let tmp%6#0: bool = (== tmp%4#0 tmp%5#0)
                (assert tmp%6#0) // axfer must transfer to this app
                let new_state_value%0#0: uint64 = ((gtxns AssetAmount) axfer#0)
                (app_global_put "asa_amount" new_state_value%0#0)
                let tmp%7#0: uint64 = (global LatestTimestamp)
                let new_state_value%1#0: uint64 = (+ tmp%7#0 length#0)
                (app_global_put "auction_end" new_state_value%1#0)
                (app_global_put "previous_bid" starting_price#0)
                return 
        
        subroutine examples.auction.contract.Auction.opt_in() -> void:
            block@0: // L62
                return 
        
        subroutine examples.auction.contract.Auction.bid(pay: uint64) -> void:
            block@0: // L66
                let tmp%0#0: uint64 = (global LatestTimestamp)
                let (auction_end_value%0#0: uint64, auction_end_exists%0#0: bool) = (app_global_get_ex 0u "auction_end")
                (assert auction_end_exists%0#0) // check auction_end exists
                let tmp%1#0: bool = (< tmp%0#0 auction_end_value%0#0)
                (assert tmp%1#0) // auction has ended
                let tmp%2#0: bytes = ((gtxns Sender) pay#0)
                let tmp%3#0: bytes = (txn Sender)
                let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
                (assert tmp%4#0) // payment sender must match transaction sender
                let tmp%5#0: uint64 = ((gtxns Amount) pay#0)
                let (previous_bid_value%0#0: uint64, previous_bid_exists%0#0: bool) = (app_global_get_ex 0u "previous_bid")
                (assert previous_bid_exists%0#0) // check previous_bid exists
                let tmp%6#0: bool = (> tmp%5#0 previous_bid_value%0#0)
                (assert tmp%6#0) // Bid must be higher than previous bid
                (app_global_put "previous_bid" tmp%5#0)
                (app_global_put "previous_bidder" tmp%2#0)
                let tmp%7#0: bytes = (txn Sender)
                (app_local_put tmp%7#0 "claim" tmp%5#0)
                return 
        
        subroutine examples.auction.contract.Auction.claim_bids() -> void:
            block@0: // L82
                let tmp%0#0: bytes = (txn Sender)
                let (original_amount#0: uint64, claimable_amount_exists%0#0: bool) = (app_local_get_ex tmp%0#0 0u "claim")
                (assert claimable_amount_exists%0#0) // check claimable_amount exists for account
                let tmp%1#0: bytes = (txn Sender)
                let (previous_bidder_value%0#0: bytes, previous_bidder_exists%0#0: bool) = (app_global_get_ex 0u "previous_bidder")
                (assert previous_bidder_exists%0#0) // check previous_bidder exists
                let tmp%2#0: bool = (== tmp%1#0 previous_bidder_value%0#0)
                let amount#1: uint64 = original_amount#0
                goto tmp%2#0 ? block@1 : block@2
            block@1: // if_body_L86
                let (previous_bid_value%0#0: uint64, previous_bid_exists%0#0: bool) = (app_global_get_ex 0u "previous_bid")
                (assert previous_bid_exists%0#0) // check previous_bid exists
                let amount#1: uint64 = (- original_amount#0 previous_bid_value%0#0)
                goto block@2
            block@2: // after_if_else_L86
                itxn_begin
                let inner_txn_params%0%%param_Receiver_idx_0#0: bytes = (txn Sender)
                ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
                ((itxn_field Amount) amount#1)
                ((itxn_field TypeEnum) pay)
                ((itxn_field Fee) 0u)
                itxn_submit
                let new_state_value%0#0: uint64 = (- original_amount#0 amount#1)
                let tmp%3#0: bytes = (txn Sender)
                (app_local_put tmp%3#0 "claim" new_state_value%0#0)
                return 
        
        subroutine examples.auction.contract.Auction.claim_asset(asset: uint64) -> void:
            block@0: // L97
                let tmp%0#0: uint64 = (global LatestTimestamp)
                let (auction_end_value%0#0: uint64, auction_end_exists%0#0: bool) = (app_global_get_ex 0u "auction_end")
                (assert auction_end_exists%0#0) // check auction_end exists
                let tmp%1#0: bool = (> tmp%0#0 auction_end_value%0#0)
                (assert tmp%1#0) // auction has not ended
                itxn_begin
                let (previous_bidder_value%0#0: bytes, previous_bidder_exists%0#0: bool) = (app_global_get_ex 0u "previous_bidder")
                (assert previous_bidder_exists%0#0) // check previous_bidder exists
                let (previous_bidder_value%1#0: bytes, previous_bidder_exists%1#0: bool) = (app_global_get_ex 0u "previous_bidder")
                (assert previous_bidder_exists%1#0) // check previous_bidder exists
                let (asa_amount_value%0#0: uint64, asa_amount_exists%0#0: bool) = (app_global_get_ex 0u "asa_amount")
                (assert asa_amount_exists%0#0) // check asa_amount exists
                ((itxn_field AssetAmount) asa_amount_value%0#0)
                ((itxn_field AssetReceiver) previous_bidder_value%1#0)
                ((itxn_field AssetCloseTo) previous_bidder_value%0#0)
                ((itxn_field XferAsset) asset#0)
                ((itxn_field TypeEnum) axfer)
                ((itxn_field Fee) 0u)
                itxn_submit
                return 
        
        subroutine examples.auction.contract.Auction.__init__() -> void:
            block@0: // L17
                (app_global_put "auction_end" 0u)
                (app_global_put "previous_bid" 0u)
                (app_global_put "asa_amount" 0u)
                (app_global_put "asa" 0u)
                let new_state_value%0#0: bytes = (global ZeroAddress)
                (app_global_put "previous_bidder" new_state_value%0#0)
                return 
    
    program clear-state:
        subroutine examples.auction.contract.Auction.clear_state_program() -> bool:
            block@0: // L115
                return 1u