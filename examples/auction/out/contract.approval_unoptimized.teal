#pragma version 10

examples.auction.contract.Auction.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // auction/contract.py:14
    // class Auction(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@12
    txna ApplicationArgs 0
    method "opt_into_asset(asset)void"
    method "start_auction(uint64,uint64,axfer)void"
    method "opt_in()void"
    method "bid(pay)void"
    method "claim_bids()void"
    method "claim_asset(asset)void"
    uncover 6
    match main_opt_into_asset_route@4 main_start_auction_route@5 main_opt_in_route@6 main_bid_route@7 main_claim_bids_route@8 main_claim_asset_route@9
    b main_switch_case_default@10

main_opt_into_asset_route@4:
    // auction/contract.py:24
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // auction/contract.py:14
    // class Auction(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // auction/contract.py:24
    // @arc4.abimethod
    callsub opt_into_asset
    int 1
    return

main_start_auction_route@5:
    // auction/contract.py:40
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // auction/contract.py:14
    // class Auction(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int axfer
    ==
    assert // transaction type is axfer
    // auction/contract.py:40
    // @arc4.abimethod
    uncover 2
    uncover 2
    uncover 2
    callsub start_auction
    int 1
    return

main_opt_in_route@6:
    // auction/contract.py:62
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub opt_in
    int 1
    return

main_bid_route@7:
    // auction/contract.py:66
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // auction/contract.py:14
    // class Auction(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // auction/contract.py:66
    // @arc4.abimethod
    callsub bid
    int 1
    return

main_claim_bids_route@8:
    // auction/contract.py:82
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub claim_bids
    int 1
    return

main_claim_asset_route@9:
    // auction/contract.py:98
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // auction/contract.py:14
    // class Auction(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // auction/contract.py:98
    // @arc4.abimethod
    callsub claim_asset
    int 1
    return

main_switch_case_default@10:
    b main_after_if_else@15

main_bare_routing@12:
    // auction/contract.py:14
    // class Auction(ARC4Contract):
    txn OnCompletion
    int 0
    swap
    match main_create@13
    b main_reject_bare_on_completion@14

main_create@13:
    // auction/contract.py:14
    // class Auction(ARC4Contract):
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_reject_bare_on_completion@14:
    // auction/contract.py:14
    // class Auction(ARC4Contract):
    err // reject transaction

main_after_if_else@15:
    // auction/contract.py:14
    // class Auction(ARC4Contract):
    err // reject transaction


// examples.auction.contract.Auction.opt_into_asset(asset: uint64) -> void:
opt_into_asset:
    // auction/contract.py:24-25
    // @arc4.abimethod
    // def opt_into_asset(self, asset: Asset) -> None:
    proto 1 0
    // auction/contract.py:26-27
    // # Only allow app creator to opt the app account into a ASA
    // assert op.Txn.sender == op.Global.creator_address, "Only creator can opt in to ASA"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    // auction/contract.py:28-29
    // # Verify a ASA hasn't already been opted into
    // assert self.asa.asset_id == 0, "ASA already opted in"
    int 0
    byte "asa"
    app_global_get_ex
    assert // check value exists
    int 0
    ==
    assert // ASA already opted in
    // auction/contract.py:30-31
    // # Save ASA ID in global state
    // self.asa = asset
    byte "asa"
    frame_dig -1
    app_global_put
    // auction/contract.py:33-38
    // # Submit opt-in transaction: 0 asset transfer to self
    // itxn.AssetTransferTransactionParams(
    //     asset_receiver=op.Global.current_application_address,
    //     xfer_asset=asset,
    //     fee=0,
    // ).submit()
    itxn_begin
    // auction/contract.py:35
    // asset_receiver=op.Global.current_application_address,
    global CurrentApplicationAddress
    // auction/contract.py:37
    // fee=0,
    int 0
    swap
    // auction/contract.py:33-34
    // # Submit opt-in transaction: 0 asset transfer to self
    // itxn.AssetTransferTransactionParams(
    int axfer
    cover 2
    // auction/contract.py:25
    // def opt_into_asset(self, asset: Asset) -> None:
    frame_dig -1
    cover 3
    itxn_field AssetReceiver
    itxn_field Fee
    itxn_field TypeEnum
    itxn_field XferAsset
    // auction/contract.py:33-38
    // # Submit opt-in transaction: 0 asset transfer to self
    // itxn.AssetTransferTransactionParams(
    //     asset_receiver=op.Global.current_application_address,
    //     xfer_asset=asset,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub


// examples.auction.contract.Auction.start_auction(starting_price: bytes, length: bytes, axfer: uint64) -> void:
start_auction:
    // auction/contract.py:40-46
    // @arc4.abimethod
    // def start_auction(
    //     self,
    //     starting_price: arc4.UInt64,
    //     length: arc4.UInt64,
    //     axfer: gtxn.AssetTransferTransaction,
    // ) -> None:
    proto 3 0
    // auction/contract.py:47
    // assert op.Txn.sender == op.Global.creator_address, "auction must be started by creator"
    txn Sender
    global CreatorAddress
    ==
    assert // auction must be started by creator
    // auction/contract.py:49-50
    // # Ensure the auction hasn't already been started
    // assert self.auction_end == 0, "auction already started"
    int 0
    byte "auction_end"
    app_global_get_ex
    assert // check value exists
    int 0
    ==
    assert // auction already started
    // auction/contract.py:54
    // axfer.asset_receiver == op.Global.current_application_address
    frame_dig -1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    // auction/contract.py:52-55
    // # Verify axfer
    // assert (
    //     axfer.asset_receiver == op.Global.current_application_address
    // ), "axfer must transfer to this app"
    assert // axfer must transfer to this app
    // auction/contract.py:57-58
    // # Set global state
    // self.asa_amount = axfer.asset_amount
    frame_dig -1
    gtxns AssetAmount
    byte "asa_amount"
    swap
    app_global_put
    // auction/contract.py:59
    // self.auction_end = op.Global.latest_timestamp + length.decode()
    global LatestTimestamp
    frame_dig -2
    btoi
    +
    byte "auction_end"
    swap
    app_global_put
    // auction/contract.py:60
    // self.previous_bid = starting_price.decode()
    frame_dig -3
    btoi
    byte "previous_bid"
    swap
    app_global_put
    retsub


// examples.auction.contract.Auction.opt_in() -> void:
opt_in:
    // auction/contract.py:62-63
    // @arc4.abimethod
    // def opt_in(self) -> None:
    proto 0 0
    retsub


// examples.auction.contract.Auction.bid(pay: uint64) -> void:
bid:
    // auction/contract.py:66-67
    // @arc4.abimethod
    // def bid(self, pay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // auction/contract.py:68-69
    // # Ensure auction hasn't ended
    // assert op.Global.latest_timestamp < self.auction_end, "auction has ended"
    global LatestTimestamp
    int 0
    byte "auction_end"
    app_global_get_ex
    assert // check value exists
    <
    assert // auction has ended
    // auction/contract.py:71-72
    // # Verify payment transaction
    // assert pay.sender == op.Txn.sender, "payment sender must match transaction sender"
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // payment sender must match transaction sender
    // auction/contract.py:73
    // assert pay.amount > self.previous_bid, "Bid must be higher than previous bid"
    frame_dig -1
    gtxns Amount
    int 0
    byte "previous_bid"
    app_global_get_ex
    assert // check value exists
    >
    assert // Bid must be higher than previous bid
    // auction/contract.py:75-76
    // # set global state
    // self.previous_bid = pay.amount
    frame_dig -1
    gtxns Amount
    byte "previous_bid"
    swap
    app_global_put
    // auction/contract.py:77
    // self.previous_bidder = pay.sender
    frame_dig -1
    gtxns Sender
    byte "previous_bidder"
    swap
    app_global_put
    // auction/contract.py:79-80
    // # Update claimable amount
    // self.claimable_amount[op.Txn.sender] = pay.amount
    frame_dig -1
    gtxns Amount
    txn Sender
    byte "claimable_amount"
    uncover 2
    app_local_put
    retsub


// examples.auction.contract.Auction.claim_bids() -> void:
claim_bids:
    // auction/contract.py:82-83
    // @arc4.abimethod
    // def claim_bids(self) -> None:
    proto 0 0
    // auction/contract.py:84
    // amount = original_amount = self.claimable_amount[op.Txn.sender]
    txn Sender
    int 0
    byte "claimable_amount"
    app_local_get_ex
    assert // check value exists
    dup
    swap
    dup
    swap
    // auction/contract.py:86-87
    // # subtract previous bid if sender is previous bidder
    // if op.Txn.sender == self.previous_bidder:
    txn Sender
    int 0
    byte "previous_bidder"
    app_global_get_ex
    assert // check value exists
    ==
    bz claim_bids_after_if_else@2
    // auction/contract.py:88
    // amount -= self.previous_bid
    int 0
    byte "previous_bid"
    app_global_get_ex
    assert // check value exists
    frame_dig 1
    swap
    -
    frame_bury 2

claim_bids_after_if_else@2:
    frame_dig 2
    dup
    frame_bury 1
    // auction/contract.py:90-94
    // itxn.PaymentTransactionParams(
    //     fee=0,
    //     amount=amount,
    //     receiver=op.Txn.sender,
    // ).submit()
    itxn_begin
    // auction/contract.py:91
    // fee=0,
    int 0
    swap
    // auction/contract.py:93
    // receiver=op.Txn.sender,
    txn Sender
    cover 2
    // auction/contract.py:90
    // itxn.PaymentTransactionParams(
    int pay
    cover 3
    itxn_field Amount
    itxn_field Fee
    itxn_field Receiver
    itxn_field TypeEnum
    // auction/contract.py:90-94
    // itxn.PaymentTransactionParams(
    //     fee=0,
    //     amount=amount,
    //     receiver=op.Txn.sender,
    // ).submit()
    itxn_submit
    // auction/contract.py:96
    // self.claimable_amount[op.Txn.sender] = original_amount - amount
    frame_dig 0
    frame_dig 1
    -
    txn Sender
    byte "claimable_amount"
    uncover 2
    app_local_put
    retsub


// examples.auction.contract.Auction.claim_asset(asset: uint64) -> void:
claim_asset:
    // auction/contract.py:98-99
    // @arc4.abimethod
    // def claim_asset(self, asset: Asset) -> None:
    proto 1 0
    // auction/contract.py:100
    // assert op.Global.latest_timestamp > self.auction_end, "auction has not ended"
    global LatestTimestamp
    int 0
    byte "auction_end"
    app_global_get_ex
    assert // check value exists
    >
    assert // auction has not ended
    // auction/contract.py:101-108
    // # Send ASA to previous bidder
    // itxn.AssetTransferTransactionParams(
    //     fee=0,
    //     xfer_asset=asset,
    //     asset_close_to=self.previous_bidder,
    //     asset_receiver=self.previous_bidder,
    //     asset_amount=self.asa_amount,
    // ).submit()
    itxn_begin
    // auction/contract.py:107
    // asset_amount=self.asa_amount,
    int 0
    byte "asa_amount"
    app_global_get_ex
    assert // check value exists
    // auction/contract.py:105
    // asset_close_to=self.previous_bidder,
    int 0
    byte "previous_bidder"
    app_global_get_ex
    assert // check value exists
    // auction/contract.py:106
    // asset_receiver=self.previous_bidder,
    int 0
    byte "previous_bidder"
    app_global_get_ex
    assert // check value exists
    // auction/contract.py:103
    // fee=0,
    int 0
    swap
    // auction/contract.py:101-102
    // # Send ASA to previous bidder
    // itxn.AssetTransferTransactionParams(
    int axfer
    cover 2
    // auction/contract.py:99
    // def claim_asset(self, asset: Asset) -> None:
    frame_dig -1
    cover 3
    uncover 5
    itxn_field AssetAmount
    uncover 4
    itxn_field AssetCloseTo
    itxn_field AssetReceiver
    itxn_field Fee
    itxn_field TypeEnum
    itxn_field XferAsset
    // auction/contract.py:101-108
    // # Send ASA to previous bidder
    // itxn.AssetTransferTransactionParams(
    //     fee=0,
    //     xfer_asset=asset,
    //     asset_close_to=self.previous_bidder,
    //     asset_receiver=self.previous_bidder,
    //     asset_amount=self.asa_amount,
    // ).submit()
    itxn_submit
    retsub


// examples.auction.contract.Auction.__init__() -> void:
__init__:
    // auction/contract.py:15
    // def __init__(self) -> None:
    proto 0 0
    // auction/contract.py:16
    // self.auction_end = UInt64(0)
    byte "auction_end"
    int 0
    app_global_put
    // auction/contract.py:17
    // self.previous_bid = UInt64(0)
    byte "previous_bid"
    int 0
    app_global_put
    // auction/contract.py:18
    // self.asa_amount = UInt64(0)
    byte "asa_amount"
    int 0
    app_global_put
    // auction/contract.py:19
    // self.asa = Asset(0)
    byte "asa"
    int 0
    app_global_put
    // auction/contract.py:20-21
    // # Use zero address rather than an empty string for Account type safety
    // self.previous_bidder = op.Global.zero_address
    global ZeroAddress
    byte "previous_bidder"
    swap
    app_global_put
    retsub
