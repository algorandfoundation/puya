#pragma version 8

// examples.auction.contract.Auction.approval_program() -> uint64:
main_block@0:
        txn ApplicationID
        bnz main_entrypoint@2

main_on_create@1:
        callsub __init__

main_entrypoint@2:
        txn NumAppArgs
        bz main_bare_routing@12

main_abi_routing@3:
        txna ApplicationArgs 0
        method "opt_into_asset(asset)void"
        method "start_auction(uint64,uint64,axfer)void"
        method "opt_in()void"
        method "bid(pay)void"
        method "claim_bids()void"
        method "claim_asset(asset)void"
        uncover 6
        match main_opt_into_asset_route@4 main_start_auction_route@5 main_opt_in_route@6 main_bid_route@7 main_claim_bids_route@8 main_claim_asset_route@9
        b main_switch_case_default@10

main_opt_into_asset_route@4:
        txn OnCompletion
        int NoOp
        ==
        assert // OnCompletion is NoOp
        txn ApplicationID
        assert // is not creating
        txna ApplicationArgs 1
        btoi
        txnas Assets
        callsub opt_into_asset
        int 1
        return

main_start_auction_route@5:
        txn OnCompletion
        int NoOp
        ==
        assert // OnCompletion is NoOp
        txn ApplicationID
        assert // is not creating
        txna ApplicationArgs 1
        txna ApplicationArgs 2
        txn GroupIndex
        int 1
        -
        dup
        gtxns TypeEnum
        int axfer
        ==
        assert // transaction type is axfer
        uncover 2
        uncover 2
        uncover 2
        callsub start_auction
        int 1
        return

main_opt_in_route@6:
        txn OnCompletion
        int NoOp
        ==
        assert // OnCompletion is NoOp
        txn ApplicationID
        assert // is not creating
        callsub opt_in
        int 1
        return

main_bid_route@7:
        txn OnCompletion
        int NoOp
        ==
        assert // OnCompletion is NoOp
        txn ApplicationID
        assert // is not creating
        txn GroupIndex
        int 1
        -
        dup
        gtxns TypeEnum
        int pay
        ==
        assert // transaction type is pay
        callsub bid
        int 1
        return

main_claim_bids_route@8:
        txn OnCompletion
        int NoOp
        ==
        assert // OnCompletion is NoOp
        txn ApplicationID
        assert // is not creating
        callsub claim_bids
        int 1
        return

main_claim_asset_route@9:
        txn OnCompletion
        int NoOp
        ==
        assert // OnCompletion is NoOp
        txn ApplicationID
        assert // is not creating
        txna ApplicationArgs 1
        btoi
        txnas Assets
        callsub claim_asset
        int 1
        return

main_switch_case_default@10:

main_switch_case_next@11:
        b main_after_if_else@15

main_bare_routing@12:
        txn OnCompletion
        int 0
        swap
        match main_create@13
        b main_reject_bare_on_completion@14

main_create@13:
        txn ApplicationID
        !
        assert // is creating
        int 1
        return

main_reject_bare_on_completion@14:
        err // reject transaction

main_after_if_else@15:
        err // reject transaction


// examples.auction.contract.Auction.opt_into_asset(asset#0: uint64) -> void:
opt_into_asset:
        proto 1 0

opt_into_asset_block@0:
        txn Sender
        global CreatorAddress
        ==
        assert // Only creator can opt in to ASA
        int 0
        byte "asa"
        app_global_get_ex
        assert // check value exists
        int 0
        ==
        assert // ASA already opted in
        byte "asa"
        frame_dig -1
        app_global_put
        itxn_begin
        int axfer
        itxn_field TypeEnum
        int 0
        itxn_field Fee
        global CurrentApplicationAddress
        itxn_field AssetReceiver
        frame_dig -1
        itxn_field XferAsset
        itxn_submit
        retsub


// examples.auction.contract.Auction.start_auction(starting_price#0: bytes, length#0: bytes, axfer#0: uint64) -> void:
start_auction:
        proto 3 0

start_auction_block@0:
        txn Sender
        global CreatorAddress
        ==
        assert // auction must be started by creator
        int 0
        byte "auction_end"
        app_global_get_ex
        assert // check value exists
        int 0
        ==
        assert // auction already started
        frame_dig -1
        gtxns AssetReceiver
        global CurrentApplicationAddress
        ==
        assert // axfer must transfer to this app
        frame_dig -1
        gtxns AssetAmount
        byte "asa_amount"
        swap
        app_global_put
        global LatestTimestamp
        frame_dig -2
        btoi
        +
        byte "auction_end"
        swap
        app_global_put
        frame_dig -3
        btoi
        byte "previous_bid"
        swap
        app_global_put
        retsub


// examples.auction.contract.Auction.opt_in() -> void:
opt_in:
        proto 0 0

opt_in_block@0:
        retsub


// examples.auction.contract.Auction.bid(pay#0: uint64) -> void:
bid:
        proto 1 0

bid_block@0:
        global LatestTimestamp
        int 0
        byte "auction_end"
        app_global_get_ex
        assert // check value exists
        <
        assert // auction has ended
        frame_dig -1
        gtxns Sender
        txn Sender
        ==
        assert // payment sender must match transaction sender
        frame_dig -1
        gtxns Amount
        int 0
        byte "previous_bid"
        app_global_get_ex
        assert // check value exists
        >
        assert // Bid must be higher than previous bid
        frame_dig -1
        gtxns Amount
        byte "previous_bid"
        swap
        app_global_put
        frame_dig -1
        gtxns Sender
        byte "previous_bidder"
        swap
        app_global_put
        frame_dig -1
        gtxns Amount
        txn Sender
        byte "claimable_amount"
        uncover 2
        app_local_put
        retsub


// examples.auction.contract.Auction.claim_bids() -> void:
claim_bids:
        proto 0 0

claim_bids_block@0:
        txn Sender
        int 0
        byte "claimable_amount"
        app_local_get_ex
        assert // check value exists
        dup
        swap
        dup
        swap
        txn Sender
        int 0
        byte "previous_bidder"
        app_global_get_ex
        assert // check value exists
        ==
        bz claim_bids_after_if_else@2

claim_bids_if_body@1:
        int 0
        byte "previous_bid"
        app_global_get_ex
        assert // check value exists
        frame_dig 1
        swap
        -
        frame_bury 2

claim_bids_after_if_else@2:
        frame_dig 2
        itxn_begin
        int pay
        itxn_field TypeEnum
        int 0
        itxn_field Fee
        txn Sender
        itxn_field Receiver
        dup
        itxn_field AssetAmount
        itxn_submit
        frame_dig 0
        swap
        -
        txn Sender
        byte "claimable_amount"
        uncover 2
        app_local_put
        retsub


// examples.auction.contract.Auction.claim_asset(asset#0: uint64) -> void:
claim_asset:
        proto 1 0

claim_asset_block@0:
        global LatestTimestamp
        int 0
        byte "auction_end"
        app_global_get_ex
        assert // check value exists
        >
        assert // auction has not ended
        itxn_begin
        int axfer
        itxn_field TypeEnum
        int 0
        itxn_field Fee
        int 0
        byte "previous_bidder"
        app_global_get_ex
        assert // check value exists
        itxn_field AssetReceiver
        frame_dig -1
        itxn_field XferAsset
        int 0
        byte "asa_amount"
        app_global_get_ex
        assert // check value exists
        itxn_field AssetAmount
        int 0
        byte "previous_bidder"
        app_global_get_ex
        assert // check value exists
        itxn_field AssetCloseTo
        itxn_submit
        retsub


// examples.auction.contract.Auction.__init__() -> void:
__init__:
        proto 0 0

__init___block@0:
        byte "auction_end"
        int 0
        app_global_put
        byte "previous_bid"
        int 0
        app_global_put
        byte "asa_amount"
        int 0
        app_global_put
        byte "asa"
        int 0
        app_global_put
        global ZeroAddress
        byte "previous_bidder"
        swap
        app_global_put
        retsub

