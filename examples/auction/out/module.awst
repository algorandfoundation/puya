contract Auction
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  globals {
    ['auction_end']: uint64
    ['previous_bid']: uint64
    ['asa_amount']: uint64
    ['asa']: asset
    ['previous_bidder']: account
  }
  locals {
    ['claim']: uint64
  }
  
  subroutine examples.auction.contract.Auction.__algopy_entrypoint_with_init(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return this::approval_program()
  }
  
  subroutine examples.auction.contract.Auction.clear_state_program(): bool
  {
    return true
  }
  
  subroutine examples.auction.contract.Auction.__init__(): void
  {
    GlobalState['auction_end']: uint64 = 0u
    GlobalState['previous_bid']: uint64 = 0u
    GlobalState['asa_amount']: uint64 = 0u
    GlobalState['asa']: asset = reinterpret_cast<asset>(0u)
    GlobalState['previous_bidder']: account = global<ZeroAddress>()
  }
  
  abimethod examples.auction.contract.Auction.opt_into_asset(asset: asset): void
  {
    assert(txn<Sender>() == global<CreatorAddress>(), comment="Only creator can opt in to ASA")
    assert(reinterpret_cast<uint64>(GlobalState['asa']) == 0u, comment="ASA already opted in")
    GlobalState['asa']: asset = asset
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=axfer, AssetReceiver=global<CurrentApplicationAddress>(), XferAsset=asset))
  }
  
  abimethod examples.auction.contract.Auction.start_auction(starting_price: uint64, length: uint64, axfer: group_transaction_axfer): void
  {
    assert(txn<Sender>() == global<CreatorAddress>(), comment="auction must be started by creator")
    assert(GlobalState['auction_end'] == 0u, comment="auction already started")
    assert(gtxns<AssetReceiver>(axfer) == global<CurrentApplicationAddress>(), comment="axfer must transfer to this app")
    GlobalState['asa_amount']: uint64 = gtxns<AssetAmount>(axfer)
    GlobalState['auction_end']: uint64 = global<LatestTimestamp>() + length
    GlobalState['previous_bid']: uint64 = starting_price
  }
  
  abimethod examples.auction.contract.Auction.opt_in(): void
  {
  }
  
  abimethod examples.auction.contract.Auction.bid(pay: group_transaction_pay): void
  {
    assert(global<LatestTimestamp>() < GlobalState['auction_end'], comment="auction has ended")
    assert(gtxns<Sender>(pay) == txn<Sender>(), comment="payment sender must match transaction sender")
    assert(gtxns<Amount>(pay) > GlobalState['previous_bid'], comment="Bid must be higher than previous bid")
    GlobalState['previous_bid']: uint64 = gtxns<Amount>(pay)
    GlobalState['previous_bidder']: account = gtxns<Sender>(pay)
    LocalState['claim', txn<Sender>()]: uint64 = gtxns<Amount>(pay)
  }
  
  abimethod examples.auction.contract.Auction.claim_bids(): void
  {
    original_amount: uint64 = SINGLE_EVAL(id=0, source=LocalState['claim', txn<Sender>()])
    amount: uint64 = SINGLE_EVAL(id=0)
    if (txn<Sender>() == GlobalState['previous_bidder']) {
      amount -= GlobalState['previous_bid']
    }
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=pay, Amount=amount, Receiver=txn<Sender>()))
    LocalState['claim', txn<Sender>()]: uint64 = original_amount - amount
  }
  
  abimethod examples.auction.contract.Auction.claim_asset(asset: asset): void
  {
    assert(global<LatestTimestamp>() > GlobalState['auction_end'], comment="auction has not ended")
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=axfer, XferAsset=asset, AssetCloseTo=GlobalState['previous_bidder'], AssetReceiver=GlobalState['previous_bidder'], AssetAmount=GlobalState['asa_amount']))
  }
  
  subroutine examples.auction.contract.Auction.delete_application(): void
  {
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=pay, Receiver=global<CreatorAddress>(), CloseRemainderTo=global<CreatorAddress>()))
  }
  
  baremethod examples.auction.contract.Auction.__algopy_default_create(): void
  {
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
}