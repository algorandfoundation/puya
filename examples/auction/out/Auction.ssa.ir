contract examples.auction.contract.Auction:
    program approval:
        subroutine examples.auction.contract.Auction.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = (txn ApplicationID)
                goto tmp%0#0 ? block@2 : block@1
            block@1: // call __init___L1
                examples.auction.contract.Auction.__init__()
                goto block@2
            block@2: // after_if_else_L1
                let tmp%1#0: bool = examples.auction.contract.Auction.__puya_arc4_router__()
                return tmp%1#0
        
        subroutine examples.auction.contract.Auction.__init__() -> void:
            block@0: // L17
                (app_global_put "auction_end" 0u)
                (app_global_put "previous_bid" 0u)
                (app_global_put "asa_amount" 0u)
                (app_global_put "asa" 0u)
                let new_state_value%0#0: bytes = (global ZeroAddress)
                (app_global_put "previous_bidder" new_state_value%0#0)
                return 
        
        subroutine examples.auction.contract.Auction.__puya_arc4_router__() -> bool:
            block@0: // L16
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@10
            block@1: // abi_routing_L16
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "opt_into_asset(asset)void" => block@2, method "start_auction(uint64,uint64,axfer)void" => block@3, method "opt_in()void" => block@4, method "bid(pay)void" => block@5, method "claim_bids()void" => block@6, method "claim_asset(asset)void" => block@7, * => block@8}
            block@2: // opt_into_asset_route_L25
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is not NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // can only call when not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: uint64 = (btoi tmp%7#0)
                let tmp%9#0: uint64 = ((txnas Assets) tmp%8#0)
                examples.auction.contract.Auction.opt_into_asset(tmp%9#0)
                return 1u
            block@3: // start_auction_route_L40
                let tmp%10#0: uint64 = (txn OnCompletion)
                let tmp%11#0: bool = (== tmp%10#0 NoOp)
                (assert tmp%11#0) // OnCompletion is not NoOp
                let tmp%12#0: uint64 = (txn ApplicationID)
                let tmp%13#0: bool = (!= tmp%12#0 0u)
                (assert tmp%13#0) // can only call when not creating
                let tmp%14#0: bytes = (txna ApplicationArgs 1)
                let tmp%15#0: uint64 = (btoi tmp%14#0)
                let tmp%16#0: bytes = (txna ApplicationArgs 2)
                let tmp%17#0: uint64 = (btoi tmp%16#0)
                let tmp%18#0: uint64 = (txn GroupIndex)
                let gtxn_idx%0#0: uint64 = (- tmp%18#0 1u)
                let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
                let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 axfer)
                (assert gtxn_type_matches%0#0) // transaction type is axfer
                examples.auction.contract.Auction.start_auction(tmp%15#0, tmp%17#0, gtxn_idx%0#0)
                return 1u
            block@4: // opt_in_route_L62
                let tmp%19#0: uint64 = (txn OnCompletion)
                let tmp%20#0: bool = (== tmp%19#0 NoOp)
                (assert tmp%20#0) // OnCompletion is not NoOp
                let tmp%21#0: uint64 = (txn ApplicationID)
                let tmp%22#0: bool = (!= tmp%21#0 0u)
                (assert tmp%22#0) // can only call when not creating
                examples.auction.contract.Auction.opt_in()
                return 1u
            block@5: // bid_route_L66
                let tmp%23#0: uint64 = (txn OnCompletion)
                let tmp%24#0: bool = (== tmp%23#0 NoOp)
                (assert tmp%24#0) // OnCompletion is not NoOp
                let tmp%25#0: uint64 = (txn ApplicationID)
                let tmp%26#0: bool = (!= tmp%25#0 0u)
                (assert tmp%26#0) // can only call when not creating
                let tmp%27#0: uint64 = (txn GroupIndex)
                let gtxn_idx%1#0: uint64 = (- tmp%27#0 1u)
                let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
                let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
                (assert gtxn_type_matches%1#0) // transaction type is pay
                examples.auction.contract.Auction.bid(gtxn_idx%1#0)
                return 1u
            block@6: // claim_bids_route_L82
                let tmp%28#0: uint64 = (txn OnCompletion)
                let tmp%29#0: bool = (== tmp%28#0 NoOp)
                (assert tmp%29#0) // OnCompletion is not NoOp
                let tmp%30#0: uint64 = (txn ApplicationID)
                let tmp%31#0: bool = (!= tmp%30#0 0u)
                (assert tmp%31#0) // can only call when not creating
                examples.auction.contract.Auction.claim_bids()
                return 1u
            block@7: // claim_asset_route_L97
                let tmp%32#0: uint64 = (txn OnCompletion)
                let tmp%33#0: bool = (== tmp%32#0 NoOp)
                (assert tmp%33#0) // OnCompletion is not NoOp
                let tmp%34#0: uint64 = (txn ApplicationID)
                let tmp%35#0: bool = (!= tmp%34#0 0u)
                (assert tmp%35#0) // can only call when not creating
                let tmp%36#0: bytes = (txna ApplicationArgs 1)
                let tmp%37#0: uint64 = (btoi tmp%36#0)
                let tmp%38#0: uint64 = ((txnas Assets) tmp%37#0)
                examples.auction.contract.Auction.claim_asset(tmp%38#0)
                return 1u
            block@8: // switch_case_default_L16
                goto block@9
            block@9: // switch_case_next_L16
                goto block@14
            block@10: // bare_routing_L16
                let tmp%39#0: uint64 = (txn OnCompletion)
                switch tmp%39#0 {0u => block@11, * => block@12}
            block@11: // __algopy_default_create_L1
                let tmp%40#0: uint64 = (txn ApplicationID)
                let tmp%41#0: bool = (== tmp%40#0 0u)
                (assert tmp%41#0) // can only call when creating
                examples.auction.contract.Auction.__algopy_default_create()
                return 1u
            block@12: // switch_case_default_L16
                goto block@13
            block@13: // switch_case_next_L16
                goto block@14
            block@14: // after_if_else_L16
                return 0u
        
        subroutine examples.auction.contract.Auction.opt_into_asset(asset: uint64) -> void:
            block@0: // L25
                let tmp%0#0: bytes = (txn Sender)
                let tmp%1#0: bytes = (global CreatorAddress)
                let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
                (assert tmp%2#0) // Only creator can opt in to ASA
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
                (assert maybe_exists%0#0) // check self.asa exists
                let tmp%3#0: bool = (== maybe_value%0#0 0u)
                (assert tmp%3#0) // ASA already opted in
                (app_global_put "asa" asset#0)
                itxn_begin
                let inner_txn_params%0#0: itxn_field_set = itxn_field_set(0)
                let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%Fee_length#0: uint64 = 1u
                let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = axfer
                let inner_txn_params%0%%TypeEnum_length#0: uint64 = 1u
                let inner_txn_params%0%%param_AssetReceiver_idx_0#0: bytes = (global CurrentApplicationAddress)
                let inner_txn_params%0%%AssetReceiver_length#0: uint64 = 1u
                let inner_txn_params%0%%param_XferAsset_idx_0#0: uint64 = asset#0
                let inner_txn_params%0%%XferAsset_length#0: uint64 = 1u
                let inner_txn_params%0%%Sender_length#0: uint64 = 0u
                let inner_txn_params%0%%Note_length#0: uint64 = 0u
                let inner_txn_params%0%%Receiver_length#0: uint64 = 0u
                let inner_txn_params%0%%Amount_length#0: uint64 = 0u
                let inner_txn_params%0%%CloseRemainderTo_length#0: uint64 = 0u
                let inner_txn_params%0%%VotePK_length#0: uint64 = 0u
                let inner_txn_params%0%%SelectionPK_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteFirst_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteLast_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteKeyDilution_length#0: uint64 = 0u
                let inner_txn_params%0%%Type_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetAmount_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetSender_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetCloseTo_length#0: uint64 = 0u
                let inner_txn_params%0%%ApplicationID_length#0: uint64 = 0u
                let inner_txn_params%0%%OnCompletion_length#0: uint64 = 0u
                let inner_txn_params%0%%ApprovalProgram_length#0: uint64 = 0u
                let inner_txn_params%0%%ClearStateProgram_length#0: uint64 = 0u
                let inner_txn_params%0%%RekeyTo_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAsset_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetTotal_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetDecimals_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetDefaultFrozen_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetUnitName_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetName_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetURL_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetMetadataHash_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetManager_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetReserve_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetFreeze_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetClawback_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAsset_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAssetAccount_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAssetFrozen_length#0: uint64 = 0u
                let inner_txn_params%0%%GlobalNumUint_length#0: uint64 = 0u
                let inner_txn_params%0%%GlobalNumByteSlice_length#0: uint64 = 0u
                let inner_txn_params%0%%LocalNumUint_length#0: uint64 = 0u
                let inner_txn_params%0%%LocalNumByteSlice_length#0: uint64 = 0u
                let inner_txn_params%0%%ExtraProgramPages_length#0: uint64 = 0u
                let inner_txn_params%0%%Nonparticipation_length#0: uint64 = 0u
                let inner_txn_params%0%%StateProofPK_length#0: uint64 = 0u
                let inner_txn_params%0%%ApplicationArgs_length#0: uint64 = 0u
                let inner_txn_params%0%%Accounts_length#0: uint64 = 0u
                let inner_txn_params%0%%Assets_length#0: uint64 = 0u
                let inner_txn_params%0%%Applications_length#0: uint64 = 0u
                let inner_txn_params%0%%ApprovalProgramPages_length#0: uint64 = 0u
                let inner_txn_params%0%%ClearStateProgramPages_length#0: uint64 = 0u
                ((itxn_field XferAsset) inner_txn_params%0%%param_XferAsset_idx_0#0)
                ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
                ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
                ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
                goto block@1
            block@1: // next_txn_L35
                itxn_submit
                return 
        
        subroutine examples.auction.contract.Auction.start_auction(starting_price: uint64, length: uint64, axfer: uint64) -> void:
            block@0: // L40
                let tmp%0#0: bytes = (txn Sender)
                let tmp%1#0: bytes = (global CreatorAddress)
                let tmp%2#0: bool = (== tmp%0#0 tmp%1#0)
                (assert tmp%2#0) // auction must be started by creator
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "auction_end")
                (assert maybe_exists%0#0) // check self.auction_end exists
                let tmp%3#0: bool = (== maybe_value%0#0 0u)
                (assert tmp%3#0) // auction already started
                let tmp%4#0: bytes = ((gtxns AssetReceiver) axfer#0)
                let tmp%5#0: bytes = (global CurrentApplicationAddress)
                let tmp%6#0: bool = (== tmp%4#0 tmp%5#0)
                (assert tmp%6#0) // axfer must transfer to this app
                let new_state_value%0#0: uint64 = ((gtxns AssetAmount) axfer#0)
                (app_global_put "asa_amount" new_state_value%0#0)
                let tmp%7#0: uint64 = (global LatestTimestamp)
                let new_state_value%1#0: uint64 = (+ tmp%7#0 length#0)
                (app_global_put "auction_end" new_state_value%1#0)
                (app_global_put "previous_bid" starting_price#0)
                return 
        
        subroutine examples.auction.contract.Auction.opt_in() -> void:
            block@0: // L62
                return 
        
        subroutine examples.auction.contract.Auction.bid(pay: uint64) -> void:
            block@0: // L66
                let tmp%0#0: uint64 = (global LatestTimestamp)
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "auction_end")
                (assert maybe_exists%0#0) // check self.auction_end exists
                let tmp%1#0: bool = (< tmp%0#0 maybe_value%0#0)
                (assert tmp%1#0) // auction has ended
                let tmp%2#0: bytes = ((gtxns Sender) pay#0)
                let tmp%3#0: bytes = (txn Sender)
                let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
                (assert tmp%4#0) // payment sender must match transaction sender
                let tmp%5#0: uint64 = ((gtxns Amount) pay#0)
                let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "previous_bid")
                (assert maybe_exists%1#0) // check self.previous_bid exists
                let tmp%6#0: bool = (> tmp%5#0 maybe_value%1#0)
                (assert tmp%6#0) // Bid must be higher than previous bid
                let new_state_value%0#0: uint64 = ((gtxns Amount) pay#0)
                (app_global_put "previous_bid" new_state_value%0#0)
                let new_state_value%1#0: bytes = ((gtxns Sender) pay#0)
                (app_global_put "previous_bidder" new_state_value%1#0)
                let tmp%7#0: bytes = (txn Sender)
                let new_state_value%2#0: uint64 = ((gtxns Amount) pay#0)
                (app_local_put tmp%7#0 "claim" new_state_value%2#0)
                return 
        
        subroutine examples.auction.contract.Auction.claim_bids() -> void:
            block@0: // L82
                let tmp%0#0: bytes = (txn Sender)
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#0 0u "claim")
                (assert maybe_exists%0#0) // check self.claimable_amount exists for account
                let original_amount#0: uint64 = maybe_value%0#0
                let amount#0: uint64 = maybe_value%0#0
                let tmp%1#0: bytes = (txn Sender)
                let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "previous_bidder")
                (assert maybe_exists%1#0) // check self.previous_bidder exists
                let tmp%2#0: bool = (== tmp%1#0 maybe_value%1#0)
                goto tmp%2#0 ? block@1 : block@2
            block@1: // if_body_L88
                let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "previous_bid")
                (assert maybe_exists%2#0) // check self.previous_bid exists
                let amount#1: uint64 = (- amount#0 maybe_value%2#0)
                goto block@2
            block@2: // after_if_else_L87
                let amount#2: uint64 = φ(amount#0 <- block@0, amount#1 <- block@1)
                itxn_begin
                let inner_txn_params%0#0: itxn_field_set = itxn_field_set(0)
                let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%Fee_length#0: uint64 = 1u
                let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = pay
                let inner_txn_params%0%%TypeEnum_length#0: uint64 = 1u
                let inner_txn_params%0%%param_Amount_idx_0#0: uint64 = amount#2
                let inner_txn_params%0%%Amount_length#0: uint64 = 1u
                let inner_txn_params%0%%param_Receiver_idx_0#0: bytes = (txn Sender)
                let inner_txn_params%0%%Receiver_length#0: uint64 = 1u
                let inner_txn_params%0%%Sender_length#0: uint64 = 0u
                let inner_txn_params%0%%Note_length#0: uint64 = 0u
                let inner_txn_params%0%%CloseRemainderTo_length#0: uint64 = 0u
                let inner_txn_params%0%%VotePK_length#0: uint64 = 0u
                let inner_txn_params%0%%SelectionPK_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteFirst_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteLast_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteKeyDilution_length#0: uint64 = 0u
                let inner_txn_params%0%%Type_length#0: uint64 = 0u
                let inner_txn_params%0%%XferAsset_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetAmount_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetSender_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetReceiver_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetCloseTo_length#0: uint64 = 0u
                let inner_txn_params%0%%ApplicationID_length#0: uint64 = 0u
                let inner_txn_params%0%%OnCompletion_length#0: uint64 = 0u
                let inner_txn_params%0%%ApprovalProgram_length#0: uint64 = 0u
                let inner_txn_params%0%%ClearStateProgram_length#0: uint64 = 0u
                let inner_txn_params%0%%RekeyTo_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAsset_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetTotal_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetDecimals_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetDefaultFrozen_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetUnitName_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetName_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetURL_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetMetadataHash_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetManager_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetReserve_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetFreeze_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetClawback_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAsset_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAssetAccount_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAssetFrozen_length#0: uint64 = 0u
                let inner_txn_params%0%%GlobalNumUint_length#0: uint64 = 0u
                let inner_txn_params%0%%GlobalNumByteSlice_length#0: uint64 = 0u
                let inner_txn_params%0%%LocalNumUint_length#0: uint64 = 0u
                let inner_txn_params%0%%LocalNumByteSlice_length#0: uint64 = 0u
                let inner_txn_params%0%%ExtraProgramPages_length#0: uint64 = 0u
                let inner_txn_params%0%%Nonparticipation_length#0: uint64 = 0u
                let inner_txn_params%0%%StateProofPK_length#0: uint64 = 0u
                let inner_txn_params%0%%ApplicationArgs_length#0: uint64 = 0u
                let inner_txn_params%0%%Accounts_length#0: uint64 = 0u
                let inner_txn_params%0%%Assets_length#0: uint64 = 0u
                let inner_txn_params%0%%Applications_length#0: uint64 = 0u
                let inner_txn_params%0%%ApprovalProgramPages_length#0: uint64 = 0u
                let inner_txn_params%0%%ClearStateProgramPages_length#0: uint64 = 0u
                ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
                ((itxn_field Amount) inner_txn_params%0%%param_Amount_idx_0#0)
                ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
                ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
                goto block@3
            block@3: // next_txn_L90
                itxn_submit
                let tmp%3#0: bytes = (txn Sender)
                let new_state_value%0#0: uint64 = (- original_amount#0 amount#2)
                (app_local_put tmp%3#0 "claim" new_state_value%0#0)
                return 
        
        subroutine examples.auction.contract.Auction.claim_asset(asset: uint64) -> void:
            block@0: // L97
                let tmp%0#0: uint64 = (global LatestTimestamp)
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "auction_end")
                (assert maybe_exists%0#0) // check self.auction_end exists
                let tmp%1#0: bool = (> tmp%0#0 maybe_value%0#0)
                (assert tmp%1#0) // auction has not ended
                itxn_begin
                let inner_txn_params%0#0: itxn_field_set = itxn_field_set(0)
                let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%Fee_length#0: uint64 = 1u
                let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = axfer
                let inner_txn_params%0%%TypeEnum_length#0: uint64 = 1u
                let inner_txn_params%0%%param_XferAsset_idx_0#0: uint64 = asset#0
                let inner_txn_params%0%%XferAsset_length#0: uint64 = 1u
                let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "previous_bidder")
                (assert maybe_exists%1#0) // check self.previous_bidder exists
                let inner_txn_params%0%%param_AssetCloseTo_idx_0#0: bytes = maybe_value%1#0
                let inner_txn_params%0%%AssetCloseTo_length#0: uint64 = 1u
                let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "previous_bidder")
                (assert maybe_exists%2#0) // check self.previous_bidder exists
                let inner_txn_params%0%%param_AssetReceiver_idx_0#0: bytes = maybe_value%2#0
                let inner_txn_params%0%%AssetReceiver_length#0: uint64 = 1u
                let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "asa_amount")
                (assert maybe_exists%3#0) // check self.asa_amount exists
                let inner_txn_params%0%%param_AssetAmount_idx_0#0: uint64 = maybe_value%3#0
                let inner_txn_params%0%%AssetAmount_length#0: uint64 = 1u
                let inner_txn_params%0%%Sender_length#0: uint64 = 0u
                let inner_txn_params%0%%Note_length#0: uint64 = 0u
                let inner_txn_params%0%%Receiver_length#0: uint64 = 0u
                let inner_txn_params%0%%Amount_length#0: uint64 = 0u
                let inner_txn_params%0%%CloseRemainderTo_length#0: uint64 = 0u
                let inner_txn_params%0%%VotePK_length#0: uint64 = 0u
                let inner_txn_params%0%%SelectionPK_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteFirst_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteLast_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteKeyDilution_length#0: uint64 = 0u
                let inner_txn_params%0%%Type_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetSender_length#0: uint64 = 0u
                let inner_txn_params%0%%ApplicationID_length#0: uint64 = 0u
                let inner_txn_params%0%%OnCompletion_length#0: uint64 = 0u
                let inner_txn_params%0%%ApprovalProgram_length#0: uint64 = 0u
                let inner_txn_params%0%%ClearStateProgram_length#0: uint64 = 0u
                let inner_txn_params%0%%RekeyTo_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAsset_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetTotal_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetDecimals_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetDefaultFrozen_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetUnitName_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetName_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetURL_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetMetadataHash_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetManager_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetReserve_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetFreeze_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetClawback_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAsset_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAssetAccount_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAssetFrozen_length#0: uint64 = 0u
                let inner_txn_params%0%%GlobalNumUint_length#0: uint64 = 0u
                let inner_txn_params%0%%GlobalNumByteSlice_length#0: uint64 = 0u
                let inner_txn_params%0%%LocalNumUint_length#0: uint64 = 0u
                let inner_txn_params%0%%LocalNumByteSlice_length#0: uint64 = 0u
                let inner_txn_params%0%%ExtraProgramPages_length#0: uint64 = 0u
                let inner_txn_params%0%%Nonparticipation_length#0: uint64 = 0u
                let inner_txn_params%0%%StateProofPK_length#0: uint64 = 0u
                let inner_txn_params%0%%ApplicationArgs_length#0: uint64 = 0u
                let inner_txn_params%0%%Accounts_length#0: uint64 = 0u
                let inner_txn_params%0%%Assets_length#0: uint64 = 0u
                let inner_txn_params%0%%Applications_length#0: uint64 = 0u
                let inner_txn_params%0%%ApprovalProgramPages_length#0: uint64 = 0u
                let inner_txn_params%0%%ClearStateProgramPages_length#0: uint64 = 0u
                ((itxn_field AssetAmount) inner_txn_params%0%%param_AssetAmount_idx_0#0)
                ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
                ((itxn_field AssetCloseTo) inner_txn_params%0%%param_AssetCloseTo_idx_0#0)
                ((itxn_field XferAsset) inner_txn_params%0%%param_XferAsset_idx_0#0)
                ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
                ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
                goto block@1
            block@1: // next_txn_L101
                itxn_submit
                return 
        
        subroutine examples.auction.contract.Auction.__algopy_default_create() -> void:
            block@0: // L1
                return 
    
    program clear-state:
        subroutine examples.auction.contract.Auction.clear_state_program() -> bool:
            block@0: // L115
                return 1u