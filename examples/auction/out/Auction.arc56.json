{
    "name": "Auction",
    "structs": {},
    "methods": [
        {
            "name": "opt_into_asset",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "start_auction",
            "args": [
                {
                    "type": "uint64",
                    "name": "starting_price"
                },
                {
                    "type": "uint64",
                    "name": "length"
                },
                {
                    "type": "axfer",
                    "name": "axfer"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_in",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bid",
            "args": [
                {
                    "type": "pay",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_bids",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_asset",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 1
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "auction_end": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXVjdGlvbl9lbmQ="
                },
                "previous_bid": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cHJldmlvdXNfYmlk"
                },
                "asa_amount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNhX2Ftb3VudA=="
                },
                "asa": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNh"
                },
                "previous_bidder": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "cHJldmlvdXNfYmlkZGVy"
                }
            },
            "local": {
                "claimable_amount": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2xhaW0=",
                    "desc": "The claimable amount"
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        279
                    ],
                    "errorMessage": "ASA already opted in"
                },
                {
                    "pc": [
                        376
                    ],
                    "errorMessage": "Bid must be higher than previous bid"
                },
                {
                    "pc": [
                        151,
                        167,
                        179,
                        201,
                        210,
                        240
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        272
                    ],
                    "errorMessage": "Only creator can opt in to ASA"
                },
                {
                    "pc": [
                        316
                    ],
                    "errorMessage": "auction already started"
                },
                {
                    "pc": [
                        355
                    ],
                    "errorMessage": "auction has ended"
                },
                {
                    "pc": [
                        466
                    ],
                    "errorMessage": "auction has not ended"
                },
                {
                    "pc": [
                        310
                    ],
                    "errorMessage": "auction must be started by creator"
                },
                {
                    "pc": [
                        324
                    ],
                    "errorMessage": "axfer must transfer to this app"
                },
                {
                    "pc": [
                        261
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        154,
                        170,
                        182,
                        204,
                        213,
                        243
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        277
                    ],
                    "errorMessage": "check self.asa exists"
                },
                {
                    "pc": [
                        475
                    ],
                    "errorMessage": "check self.asa_amount exists"
                },
                {
                    "pc": [
                        314,
                        353,
                        464
                    ],
                    "errorMessage": "check self.auction_end exists"
                },
                {
                    "pc": [
                        406
                    ],
                    "errorMessage": "check self.claimable_amount exists for account"
                },
                {
                    "pc": [
                        372,
                        420
                    ],
                    "errorMessage": "check self.previous_bid exists"
                },
                {
                    "pc": [
                        412,
                        471
                    ],
                    "errorMessage": "check self.previous_bidder exists"
                },
                {
                    "pc": [
                        364
                    ],
                    "errorMessage": "payment sender must match transaction sender"
                },
                {
                    "pc": [
                        231
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        192
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBleGFtcGxlcy5hdWN0aW9uLmNvbnRyYWN0LkF1Y3Rpb24uY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIC8vIGF1Y3Rpb24vY29udHJhY3QucHk6MTE2CiAgICAvLyByZXR1cm4gVHJ1ZQogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiADAAEEJgYLYXVjdGlvbl9lbmQMcHJldmlvdXNfYmlkD3ByZXZpb3VzX2JpZGRlcgphc2FfYW1vdW50A2FzYQVjbGFpbTEYQAARKCJnKSJnKyJnJwQiZyoyA2cxG0EAnIIGBNj2LZoE8KpwIwQwxtWKBNt/6EME5lRiWwRZsqsmNhoAjgYAWwA9ADQAHgASAAIiQzEZFEQxGEQ2GgEXiAEmI0MxGRREMRhEiADbI0MxGRREMRhEMRYjCUk4ECMSRIgAlSNDMRkURDEYRCNDMRkURDEYRDYaARc2GgIXMRYjCUk4ECQSRIgAQyNDMRkURDEYRDYaAReIAA0jQzEZQP+QMRgURCNDigEAMQAyCRJEIicEZUQURCcEi/9nsTIKi/+yEbIUJLIQIrIBs4mKAwAxADIJEkQiKGVEFESL/zgUMgoSRIv/OBIrTGcyB4v+CChMZymL/WeJigEAMgciKGVEDESL/zgASTEAEkSL/zgIIillREsBDEQpSwFnKk8CZzEAJwVPAmaJigAAMQAiJwVjTElPAkQxACIqZUQSQQAKIillRIsATAmMAbExALIHiwFJsggjshAisgGziwBMCTEAJwVPAmaJigEAMgciKGVEDUSxIiplRCIrZUSyEkmyFLIVi/+yESSyECKyAbOJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}