// Op                                                                                        Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        txn ApplicationID                                                                    tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                       tmp%0#0
        bz main_call___init__@1 ; b main_after_if_else@2

    main_call___init__@1:
        // auction/contract.py:18
        // self.auction_end = UInt64(0)
        byte "auction_end"                                                                   "auction_end"
        int 0                                                                                "auction_end",0
        app_global_put
        // auction/contract.py:19
        // self.previous_bid = UInt64(0)
        byte "previous_bid"                                                                  "previous_bid"
        int 0                                                                                "previous_bid",0
        app_global_put
        // auction/contract.py:20
        // self.asa_amount = UInt64(0)
        byte "asa_amount"                                                                    "asa_amount"
        int 0                                                                                "asa_amount",0
        app_global_put
        // auction/contract.py:21
        // self.asa = Asset()
        byte "asa"                                                                           "asa"
        int 0                                                                                "asa",0
        app_global_put
        // auction/contract.py:22
        // self.previous_bidder = Account()
        global ZeroAddress                                                                   tmp%0#2
        v-store tmp%0#2
        byte "previous_bidder"                                                               "previous_bidder"
        v-load tmp%0#2                                                                       "previous_bidder",tmp%0#2
        app_global_put
        b main_after_if_else@2

    main_after_if_else@2:
        // auction/contract.py:16
        // class Auction(ARC4Contract):
        txn NumAppArgs                                                                       tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                                       tmp%0#1
        bz main___algopy_default_create@15 ; b main_abi_routing@4

    main_abi_routing@4:
        // auction/contract.py:16
        // class Auction(ARC4Contract):
        txn OnCompletion                                                                     tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                       tmp%2#0
        !                                                                                    tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                       tmp%3#0
        assert // OnCompletion must be NoOp
        txn ApplicationID                                                                    tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                       tmp%4#0
        assert
        txna ApplicationArgs 0                                                               tmp%6#0
        v-store tmp%6#0
        method opt_into_asset(uint64)void                                                    Method(opt_into_asset(uint64)void)
        method start_auction(uint64,uint64,axfer)void                                        Method(opt_into_asset(uint64)void),Method(start_auction(uint64,uint64,axfer)void)
        method opt_in()void                                                                  Method(opt_into_asset(uint64)void),Method(start_auction(uint64,uint64,axfer)void),Method(opt_in()void)
        method bid(pay)void                                                                  Method(opt_into_asset(uint64)void),Method(start_auction(uint64,uint64,axfer)void),Method(opt_in()void),Method(bid(pay)void)
        method claim_bids()void                                                              Method(opt_into_asset(uint64)void),Method(start_auction(uint64,uint64,axfer)void),Method(opt_in()void),Method(bid(pay)void),Method(claim_bids()void)
        method claim_asset(uint64)void                                                       Method(opt_into_asset(uint64)void),Method(start_auction(uint64,uint64,axfer)void),Method(opt_in()void),Method(bid(pay)void),Method(claim_bids()void),Method(claim_asset(uint64)void)
        v-load tmp%6#0                                                                       Method(opt_into_asset(uint64)void),Method(start_auction(uint64,uint64,axfer)void),Method(opt_in()void),Method(bid(pay)void),Method(claim_bids()void),Method(claim_asset(uint64)void),tmp%6#0
        match main_opt_into_asset_route@6 main_start_auction_route@7 main_opt_in_route@8 main_bid_route@9 main_claim_bids_route@10 main_claim_asset_route@11 ; b main_after_if_else@14 

    main_opt_into_asset_route@6:
        // auction/contract.py:25
        // @arc4.abimethod
        callsub opt_into_asset
        b main_after_if_else@14

    main_start_auction_route@7:
        // auction/contract.py:40
        // @arc4.abimethod
        callsub start_auction
        b main_after_if_else@14

    main_opt_in_route@8:
        // auction/contract.py:62
        // @arc4.abimethod
        int 1                                                                                1
        return

    main_bid_route@9:
        // auction/contract.py:66
        // @arc4.abimethod
        callsub bid
        b main_after_if_else@14

    main_claim_bids_route@10:
        // auction/contract.py:82
        // @arc4.abimethod
        callsub claim_bids
        b main_after_if_else@14

    main_claim_asset_route@11:
        // auction/contract.py:97
        // @arc4.abimethod
        callsub claim_asset
        b main_after_if_else@14

    main_after_if_else@14:
        // auction/contract.py:16
        // class Auction(ARC4Contract):
        err

    main___algopy_default_create@15:
        txn OnCompletion                                                                     tmp%7#0
        v-store tmp%7#0
        v-load tmp%7#0                                                                       tmp%7#0
        !                                                                                    tmp%8#0
        v-store tmp%8#0
        txn ApplicationID                                                                    tmp%9#0
        v-store tmp%9#0
        v-load tmp%9#0                                                                       tmp%9#0
        !                                                                                    tmp%10#0
        v-store tmp%10#0
        v-load tmp%8#0                                                                       tmp%8#0
        v-load tmp%10#0                                                                      tmp%8#0,tmp%10#0
        &&                                                                                   tmp%11#0
        v-store tmp%11#0
        v-load tmp%11#0                                                                      tmp%11#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                                                1
        return


// examples.auction.contract.Auction.opt_into_asset[routing]() -> void:
subroutine opt_into_asset:
    opt_into_asset_block@0:
        // auction/contract.py:25
        // @arc4.abimethod
        txna ApplicationArgs 1                                                               tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                       tmp%0#0
        len                                                                                  len%0#0
        v-store len%0#0
        v-load len%0#0                                                                       len%0#0
        int 8                                                                                len%0#0,8
        ==                                                                                   eq%0#0
        v-store eq%0#0
        v-load eq%0#0                                                                        eq%0#0
        assert // invalid number of bytes for uint64
        v-load tmp%0#0                                                                       tmp%0#0
        btoi                                                                                 asset#0
        v-store asset#0
        // auction/contract.py:28
        // assert Txn.sender == Global.creator_address, "Only creator can opt in to ASA"
        txn Sender                                                                           tmp%0#1
        v-store tmp%0#1
        global CreatorAddress                                                                tmp%1#1
        v-store tmp%1#1
        v-load tmp%0#1                                                                       tmp%0#1
        v-load tmp%1#1                                                                       tmp%0#1,tmp%1#1
        ==                                                                                   tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                       tmp%2#0
        assert // Only creator can opt in to ASA
        // auction/contract.py:30
        // assert self.asa.id == 0, "ASA already opted in"
        int 0                                                                                0
        byte "asa"                                                                           0,"asa"
        app_global_get_ex                                                                    maybe_value%0#0,maybe_exists%0#0
        v-store maybe_exists%0#0                                                             maybe_value%0#0
        v-store maybe_value%0#0
        v-load maybe_exists%0#0                                                              maybe_exists%0#0
        assert // check self.asa exists
        v-load maybe_value%0#0                                                               maybe_value%0#0
        !                                                                                    tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                       tmp%3#0
        assert // ASA already opted in
        // auction/contract.py:32
        // self.asa = asset
        byte "asa"                                                                           "asa"
        v-load asset#0                                                                       "asa",asset#0
        app_global_put
        // auction/contract.py:35-38
        // itxn.AssetTransfer(
        //     asset_receiver=Global.current_application_address,
        //     xfer_asset=asset,
        // ).submit()
        itxn_begin
        // auction/contract.py:36
        // asset_receiver=Global.current_application_address,
        global CurrentApplicationAddress                                                     inner_txn_params%0%%param_AssetReceiver_idx_0#0
        v-store inner_txn_params%0%%param_AssetReceiver_idx_0#0
        v-load asset#0                                                                       asset#0
        itxn_field XferAsset
        v-load inner_txn_params%0%%param_AssetReceiver_idx_0#0                               inner_txn_params%0%%param_AssetReceiver_idx_0#0
        itxn_field AssetReceiver
        // auction/contract.py:35
        // itxn.AssetTransfer(
        int axfer                                                                            axfer
        itxn_field TypeEnum
        int 0                                                                                0
        itxn_field Fee
        // auction/contract.py:35-38
        // itxn.AssetTransfer(
        //     asset_receiver=Global.current_application_address,
        //     xfer_asset=asset,
        // ).submit()
        itxn_submit
        // auction/contract.py:25
        // @arc4.abimethod
        int 1                                                                                1
        return


// examples.auction.contract.Auction.start_auction[routing]() -> void:
subroutine start_auction:
    start_auction_block@0:
        // auction/contract.py:40
        // @arc4.abimethod
        txna ApplicationArgs 1                                                               tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                       tmp%0#0
        len                                                                                  len%0#0
        v-store len%0#0
        v-load len%0#0                                                                       len%0#0
        int 8                                                                                len%0#0,8
        ==                                                                                   eq%0#0
        v-store eq%0#0
        v-load eq%0#0                                                                        eq%0#0
        assert // invalid number of bytes for uint64
        v-load tmp%0#0                                                                       tmp%0#0
        btoi                                                                                 starting_price#0
        v-store starting_price#0
        txna ApplicationArgs 2                                                               tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                       tmp%2#0
        len                                                                                  len%1#0
        v-store len%1#0
        v-load len%1#0                                                                       len%1#0
        int 8                                                                                len%1#0,8
        ==                                                                                   eq%1#0
        v-store eq%1#0
        v-load eq%1#0                                                                        eq%1#0
        assert // invalid number of bytes for uint64
        v-load tmp%2#0                                                                       tmp%2#0
        btoi                                                                                 length#0
        v-store length#0
        txn GroupIndex                                                                       tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                       tmp%4#0
        int 1                                                                                tmp%4#0,1
        -                                                                                    axfer#0
        v-store axfer#0
        v-load axfer#0                                                                       axfer#0
        gtxns TypeEnum                                                                       gtxn_type%0#0
        v-store gtxn_type%0#0
        v-load gtxn_type%0#0                                                                 gtxn_type%0#0
        int axfer                                                                            gtxn_type%0#0,axfer
        ==                                                                                   gtxn_type_matches%0#0
        v-store gtxn_type_matches%0#0
        v-load gtxn_type_matches%0#0                                                         gtxn_type_matches%0#0
        assert // transaction type is axfer
        // auction/contract.py:47
        // assert Txn.sender == Global.creator_address, "auction must be started by creator"
        txn Sender                                                                           tmp%0#1
        v-store tmp%0#1
        global CreatorAddress                                                                tmp%1#1
        v-store tmp%1#1
        v-load tmp%0#1                                                                       tmp%0#1
        v-load tmp%1#1                                                                       tmp%0#1,tmp%1#1
        ==                                                                                   tmp%2#1
        v-store tmp%2#1
        v-load tmp%2#1                                                                       tmp%2#1
        assert // auction must be started by creator
        // auction/contract.py:50
        // assert self.auction_end == 0, "auction already started"
        int 0                                                                                0
        byte "auction_end"                                                                   0,"auction_end"
        app_global_get_ex                                                                    maybe_value%0#0,maybe_exists%0#0
        v-store maybe_exists%0#0                                                             maybe_value%0#0
        v-store maybe_value%0#0
        v-load maybe_exists%0#0                                                              maybe_exists%0#0
        assert // check self.auction_end exists
        v-load maybe_value%0#0                                                               maybe_value%0#0
        !                                                                                    tmp%3#1
        v-store tmp%3#1
        v-load tmp%3#1                                                                       tmp%3#1
        assert // auction already started
        // auction/contract.py:54
        // axfer.asset_receiver == Global.current_application_address
        v-load axfer#0                                                                       axfer#0
        gtxns AssetReceiver                                                                  tmp%4#1
        v-store tmp%4#1
        global CurrentApplicationAddress                                                     tmp%5#0
        v-store tmp%5#0
        v-load tmp%4#1                                                                       tmp%4#1
        v-load tmp%5#0                                                                       tmp%4#1,tmp%5#0
        ==                                                                                   tmp%6#0
        v-store tmp%6#0
        // auction/contract.py:53-55
        // assert (
        //     axfer.asset_receiver == Global.current_application_address
        // ), "axfer must transfer to this app"
        v-load tmp%6#0                                                                       tmp%6#0
        assert // axfer must transfer to this app
        // auction/contract.py:58
        // self.asa_amount = axfer.asset_amount
        v-load axfer#0                                                                       axfer#0
        gtxns AssetAmount                                                                    tmp%7#0
        v-store tmp%7#0
        byte "asa_amount"                                                                    "asa_amount"
        v-load tmp%7#0                                                                       "asa_amount",tmp%7#0
        app_global_put
        // auction/contract.py:59
        // self.auction_end = Global.latest_timestamp + length
        global LatestTimestamp                                                               tmp%8#0
        v-store tmp%8#0
        v-load tmp%8#0                                                                       tmp%8#0
        v-load length#0                                                                      tmp%8#0,length#0
        +                                                                                    tmp%9#0
        v-store tmp%9#0
        byte "auction_end"                                                                   "auction_end"
        v-load tmp%9#0                                                                       "auction_end",tmp%9#0
        app_global_put
        // auction/contract.py:60
        // self.previous_bid = starting_price
        byte "previous_bid"                                                                  "previous_bid"
        v-load starting_price#0                                                              "previous_bid",starting_price#0
        app_global_put
        // auction/contract.py:40
        // @arc4.abimethod
        int 1                                                                                1
        return


// examples.auction.contract.Auction.bid[routing]() -> void:
subroutine bid:
    bid_block@0:
        // auction/contract.py:66
        // @arc4.abimethod
        txn GroupIndex                                                                       tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                       tmp%0#0
        int 1                                                                                tmp%0#0,1
        -                                                                                    pay#0
        v-store pay#0
        v-load pay#0                                                                         pay#0
        gtxns TypeEnum                                                                       gtxn_type%0#0
        v-store gtxn_type%0#0
        v-load gtxn_type%0#0                                                                 gtxn_type%0#0
        int pay                                                                              gtxn_type%0#0,pay
        ==                                                                                   gtxn_type_matches%0#0
        v-store gtxn_type_matches%0#0
        v-load gtxn_type_matches%0#0                                                         gtxn_type_matches%0#0
        assert // transaction type is pay
        // auction/contract.py:69
        // assert Global.latest_timestamp < self.auction_end, "auction has ended"
        global LatestTimestamp                                                               tmp%0#0
        v-store tmp%0#0
        int 0                                                                                0
        byte "auction_end"                                                                   0,"auction_end"
        app_global_get_ex                                                                    maybe_value%0#0,maybe_exists%0#0
        v-store maybe_exists%0#0                                                             maybe_value%0#0
        v-store maybe_value%0#0
        v-load maybe_exists%0#0                                                              maybe_exists%0#0
        assert // check self.auction_end exists
        v-load tmp%0#0                                                                       tmp%0#0
        v-load maybe_value%0#0                                                               tmp%0#0,maybe_value%0#0
        <                                                                                    tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                       tmp%1#0
        assert // auction has ended
        // auction/contract.py:72
        // assert pay.sender == Txn.sender, "payment sender must match transaction sender"
        v-load pay#0                                                                         pay#0
        gtxns Sender                                                                         tmp%2#0
        v-store tmp%2#0
        txn Sender                                                                           tmp%3#0
        v-store tmp%3#0
        v-load tmp%2#0                                                                       tmp%2#0
        v-load tmp%3#0                                                                       tmp%2#0,tmp%3#0
        ==                                                                                   tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                       tmp%4#0
        assert // payment sender must match transaction sender
        // auction/contract.py:73
        // assert pay.amount > self.previous_bid, "Bid must be higher than previous bid"
        v-load pay#0                                                                         pay#0
        gtxns Amount                                                                         tmp%5#0
        v-store tmp%5#0
        int 0                                                                                0
        byte "previous_bid"                                                                  0,"previous_bid"
        app_global_get_ex                                                                    maybe_value%1#0,maybe_exists%1#0
        v-store maybe_exists%1#0                                                             maybe_value%1#0
        v-store maybe_value%1#0
        v-load maybe_exists%1#0                                                              maybe_exists%1#0
        assert // check self.previous_bid exists
        v-load tmp%5#0                                                                       tmp%5#0
        v-load maybe_value%1#0                                                               tmp%5#0,maybe_value%1#0
        >                                                                                    tmp%6#0
        v-store tmp%6#0
        v-load tmp%6#0                                                                       tmp%6#0
        assert // Bid must be higher than previous bid
        // auction/contract.py:76
        // self.previous_bid = pay.amount
        byte "previous_bid"                                                                  "previous_bid"
        v-load tmp%5#0                                                                       "previous_bid",tmp%5#0
        app_global_put
        // auction/contract.py:77
        // self.previous_bidder = pay.sender
        byte "previous_bidder"                                                               "previous_bidder"
        v-load tmp%2#0                                                                       "previous_bidder",tmp%2#0
        app_global_put
        // auction/contract.py:80
        // self.claimable_amount[Txn.sender] = pay.amount
        txn Sender                                                                           tmp%10#0
        v-store tmp%10#0
        v-load tmp%10#0                                                                      tmp%10#0
        byte "claim"                                                                         tmp%10#0,"claim"
        v-load tmp%5#0                                                                       tmp%10#0,"claim",tmp%5#0
        app_local_put
        // auction/contract.py:66
        // @arc4.abimethod
        int 1                                                                                1
        return


// examples.auction.contract.Auction.claim_bids[routing]() -> void:
subroutine claim_bids:
    claim_bids_block@0:
        // auction/contract.py:84
        // amount = original_amount = self.claimable_amount[Txn.sender]
        txn Sender                                                                           tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                       tmp%0#0
        int 0                                                                                tmp%0#0,0
        byte "claim"                                                                         tmp%0#0,0,"claim"
        app_local_get_ex                                                                     original_amount#0,maybe_exists%0#0
        v-store maybe_exists%0#0                                                             original_amount#0
        v-store original_amount#0
        v-load maybe_exists%0#0                                                              maybe_exists%0#0
        assert // check self.claimable_amount exists for account
        // auction/contract.py:87
        // if Txn.sender == self.previous_bidder:
        txn Sender                                                                           tmp%1#0
        v-store tmp%1#0
        int 0                                                                                0
        byte "previous_bidder"                                                               0,"previous_bidder"
        app_global_get_ex                                                                    maybe_value%1#0,maybe_exists%1#0
        v-store maybe_exists%1#0                                                             maybe_value%1#0
        v-store maybe_value%1#0
        v-load maybe_exists%1#0                                                              maybe_exists%1#0
        assert // check self.previous_bidder exists
        v-load tmp%1#0                                                                       tmp%1#0
        v-load maybe_value%1#0                                                               tmp%1#0,maybe_value%1#0
        ==                                                                                   tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                       tmp%2#0
        bz claim_bids_block@4 ; b claim_bids_if_body@2

    claim_bids_block@4:
        v-load original_amount#0                                                             original_amount#0
        v-store amount#1
        // auction/contract.py:87
        // if Txn.sender == self.previous_bidder:
        b claim_bids_after_if_else@3

    claim_bids_if_body@2:
        // auction/contract.py:88
        // amount -= self.previous_bid
        int 0                                                                                0
        byte "previous_bid"                                                                  0,"previous_bid"
        app_global_get_ex                                                                    maybe_value%2#0,maybe_exists%2#0
        v-store maybe_exists%2#0                                                             maybe_value%2#0
        v-store maybe_value%2#0
        v-load maybe_exists%2#0                                                              maybe_exists%2#0
        assert // check self.previous_bid exists
        v-load original_amount#0                                                             original_amount#0
        v-load maybe_value%2#0                                                               original_amount#0,maybe_value%2#0
        -                                                                                    amount#1
        v-store amount#1
        b claim_bids_after_if_else@3

    claim_bids_after_if_else@3:
        // auction/contract.py:90-93
        // itxn.Payment(
        //     amount=amount,
        //     receiver=Txn.sender,
        // ).submit()
        itxn_begin
        // auction/contract.py:92
        // receiver=Txn.sender,
        txn Sender                                                                           inner_txn_params%0%%param_Receiver_idx_0#0
        v-store inner_txn_params%0%%param_Receiver_idx_0#0
        v-load inner_txn_params%0%%param_Receiver_idx_0#0                                    inner_txn_params%0%%param_Receiver_idx_0#0
        itxn_field Receiver
        v-load amount#1                                                                      amount#1
        itxn_field Amount
        // auction/contract.py:90
        // itxn.Payment(
        int pay                                                                              pay
        itxn_field TypeEnum
        int 0                                                                                0
        itxn_field Fee
        // auction/contract.py:90-93
        // itxn.Payment(
        //     amount=amount,
        //     receiver=Txn.sender,
        // ).submit()
        itxn_submit
        // auction/contract.py:95
        // self.claimable_amount[Txn.sender] = original_amount - amount
        v-load original_amount#0                                                             original_amount#0
        v-load amount#1                                                                      original_amount#0,amount#1
        -                                                                                    tmp%4#0
        v-store tmp%4#0
        txn Sender                                                                           tmp%5#0
        v-store tmp%5#0
        v-load tmp%5#0                                                                       tmp%5#0
        byte "claim"                                                                         tmp%5#0,"claim"
        v-load tmp%4#0                                                                       tmp%5#0,"claim",tmp%4#0
        app_local_put
        // auction/contract.py:82
        // @arc4.abimethod
        int 1                                                                                1
        return


// examples.auction.contract.Auction.claim_asset[routing]() -> void:
subroutine claim_asset:
    claim_asset_block@0:
        // auction/contract.py:97
        // @arc4.abimethod
        txna ApplicationArgs 1                                                               tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                                       tmp%0#0
        len                                                                                  len%0#0
        v-store len%0#0
        v-load len%0#0                                                                       len%0#0
        int 8                                                                                len%0#0,8
        ==                                                                                   eq%0#0
        v-store eq%0#0
        v-load eq%0#0                                                                        eq%0#0
        assert // invalid number of bytes for uint64
        v-load tmp%0#0                                                                       tmp%0#0
        btoi                                                                                 asset#0
        v-store asset#0
        // auction/contract.py:99
        // assert Global.latest_timestamp > self.auction_end, "auction has not ended"
        global LatestTimestamp                                                               tmp%0#1
        v-store tmp%0#1
        int 0                                                                                0
        byte "auction_end"                                                                   0,"auction_end"
        app_global_get_ex                                                                    maybe_value%0#0,maybe_exists%0#0
        v-store maybe_exists%0#0                                                             maybe_value%0#0
        v-store maybe_value%0#0
        v-load maybe_exists%0#0                                                              maybe_exists%0#0
        assert // check self.auction_end exists
        v-load tmp%0#1                                                                       tmp%0#1
        v-load maybe_value%0#0                                                               tmp%0#1,maybe_value%0#0
        >                                                                                    tmp%1#1
        v-store tmp%1#1
        v-load tmp%1#1                                                                       tmp%1#1
        assert // auction has not ended
        // auction/contract.py:101-106
        // itxn.AssetTransfer(
        //     xfer_asset=asset,
        //     asset_close_to=self.previous_bidder,
        //     asset_receiver=self.previous_bidder,
        //     asset_amount=self.asa_amount,
        // ).submit()
        itxn_begin
        // auction/contract.py:103
        // asset_close_to=self.previous_bidder,
        int 0                                                                                0
        byte "previous_bidder"                                                               0,"previous_bidder"
        app_global_get_ex                                                                    maybe_value%1#0,maybe_exists%1#0
        v-store maybe_exists%1#0                                                             maybe_value%1#0
        v-store maybe_value%1#0
        v-load maybe_exists%1#0                                                              maybe_exists%1#0
        assert // check self.previous_bidder exists
        // auction/contract.py:105
        // asset_amount=self.asa_amount,
        int 0                                                                                0
        byte "asa_amount"                                                                    0,"asa_amount"
        app_global_get_ex                                                                    maybe_value%3#0,maybe_exists%3#0
        v-store maybe_exists%3#0                                                             maybe_value%3#0
        v-store maybe_value%3#0
        v-load maybe_exists%3#0                                                              maybe_exists%3#0
        assert // check self.asa_amount exists
        v-load maybe_value%3#0                                                               maybe_value%3#0
        itxn_field AssetAmount
        v-load maybe_value%1#0                                                               maybe_value%1#0
        itxn_field AssetReceiver
        v-load maybe_value%1#0                                                               maybe_value%1#0
        itxn_field AssetCloseTo
        v-load asset#0                                                                       asset#0
        itxn_field XferAsset
        // auction/contract.py:101
        // itxn.AssetTransfer(
        int axfer                                                                            axfer
        itxn_field TypeEnum
        int 0                                                                                0
        itxn_field Fee
        // auction/contract.py:101-106
        // itxn.AssetTransfer(
        //     xfer_asset=asset,
        //     asset_close_to=self.previous_bidder,
        //     asset_receiver=self.previous_bidder,
        //     asset_amount=self.asa_amount,
        // ).submit()
        itxn_submit
        // auction/contract.py:97
        // @arc4.abimethod
        int 1                                                                                1
        return


