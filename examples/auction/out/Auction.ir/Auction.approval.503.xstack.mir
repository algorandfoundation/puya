// Op                                                                                        Stack (out)
// examples.auction.contract.Auction.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    block@0:
        txn ApplicationID                                                                    tmp%0#0
        bz call___init__@1 ; b after_if_else@2

    call___init__@1:
        // auction/contract.py:18
        // self.auction_end = UInt64(0)
        byte "auction_end"                                                                   "auction_end"
        int 0                                                                                "auction_end",0
        app_global_put
        // auction/contract.py:19
        // self.previous_bid = UInt64(0)
        byte "previous_bid"                                                                  "previous_bid"
        int 0                                                                                "previous_bid",0
        app_global_put
        // auction/contract.py:20
        // self.asa_amount = UInt64(0)
        byte "asa_amount"                                                                    "asa_amount"
        int 0                                                                                "asa_amount",0
        app_global_put
        // auction/contract.py:21
        // self.asa = Asset()
        byte "asa"                                                                           "asa"
        int 0                                                                                "asa",0
        app_global_put
        // auction/contract.py:22
        // self.previous_bidder = Account()
        global ZeroAddress                                                                   tmp%0#2
        byte "previous_bidder"                                                               tmp%0#2,"previous_bidder"
        l-load tmp%0#2 1                                                                     "previous_bidder",tmp%0#2
        app_global_put
        b after_if_else@2

    after_if_else@2:
        // auction/contract.py:16
        // class Auction(ARC4Contract):
        txn ApplicationID                                                                    tmp%0#0
        !                                                                                    tmp%1#0
        txn OnCompletion                                                                     tmp%1#0,tmp%2#0
        int 1                                                                                tmp%1#0,tmp%2#0,1
        shl                                                                                  tmp%1#0,tmp%3#0
        l-load tmp%1#0 1                                                                     tmp%3#0,tmp%1#0
        l-load tmp%3#0 1                                                                     tmp%1#0,tmp%3#0
        +                                                                                    tmp%4#0
        switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED ; b *NOT_IMPLEMENTED 

    call_NoOp:
        // auction/contract.py:16
        // class Auction(ARC4Contract):
        txna ApplicationArgs 0                                                               tmp%5#0
        method opt_into_asset(uint64)void                                                    tmp%5#0,Method(opt_into_asset(uint64)void)
        method start_auction(uint64,uint64,axfer)void                                        tmp%5#0,Method(opt_into_asset(uint64)void),Method(start_auction(uint64,uint64,axfer)void)
        method opt_in()void                                                                  tmp%5#0,Method(opt_into_asset(uint64)void),Method(start_auction(uint64,uint64,axfer)void),Method(opt_in()void)
        method bid(pay)void                                                                  tmp%5#0,Method(opt_into_asset(uint64)void),Method(start_auction(uint64,uint64,axfer)void),Method(opt_in()void),Method(bid(pay)void)
        method claim_bids()void                                                              tmp%5#0,Method(opt_into_asset(uint64)void),Method(start_auction(uint64,uint64,axfer)void),Method(opt_in()void),Method(bid(pay)void),Method(claim_bids()void)
        method claim_asset(uint64)void                                                       tmp%5#0,Method(opt_into_asset(uint64)void),Method(start_auction(uint64,uint64,axfer)void),Method(opt_in()void),Method(bid(pay)void),Method(claim_bids()void),Method(claim_asset(uint64)void)
        l-load tmp%5#0 6                                                                     Method(opt_into_asset(uint64)void),Method(start_auction(uint64,uint64,axfer)void),Method(opt_in()void),Method(bid(pay)void),Method(claim_bids()void),Method(claim_asset(uint64)void),tmp%5#0
        match opt_into_asset_route@5 start_auction_route@6 opt_in_route@7 bid_route@8 claim_bids_route@9 claim_asset_route@10 ; b switch_case_next@11 

    opt_into_asset_route@5:
        // auction/contract.py:16
        // class Auction(ARC4Contract):
        callsub opt_into_asset
        b switch_case_next@11

    start_auction_route@6:
        // auction/contract.py:16
        // class Auction(ARC4Contract):
        callsub start_auction
        b switch_case_next@11

    opt_in_route@7:
        // auction/contract.py:62
        // @arc4.abimethod
        int 1                                                                                1
        return

    bid_route@8:
        // auction/contract.py:16
        // class Auction(ARC4Contract):
        callsub bid
        b switch_case_next@11

    claim_bids_route@9:
        // auction/contract.py:16
        // class Auction(ARC4Contract):
        callsub claim_bids
        b switch_case_next@11

    claim_asset_route@10:
        // auction/contract.py:16
        // class Auction(ARC4Contract):
        callsub claim_asset
        b switch_case_next@11

    switch_case_next@11:
        // auction/contract.py:16
        // class Auction(ARC4Contract):
        err // this contract does not implement the given ABI method for call NoOp

    create_NoOp:
        // auction/contract.py:16
        // class Auction(ARC4Contract):
        txn NumAppArgs                                                                       tmp%6#0
        !                                                                                    tmp%7#0
        assert // this contract does not implement the given ABI method for create NoOp
        int 1                                                                                1
        return

    *NOT_IMPLEMENTED:
        // auction/contract.py:16
        // class Auction(ARC4Contract):
        err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID? 


// examples.auction.contract.Auction.opt_into_asset[routing]() -> void:
subroutine opt_into_asset:
    opt_into_asset_block@0:
        // auction/contract.py:25
        // @arc4.abimethod
        txna ApplicationArgs 1                                                               reinterpret_Encoded(uint64)%0#0
        btoi                                                                                 asset#0
        // auction/contract.py:28
        // assert Txn.sender == Global.creator_address, "Only creator can opt in to ASA"
        txn Sender                                                                           asset#0,tmp%0#1
        global CreatorAddress                                                                asset#0,tmp%0#1,tmp%1#0
        l-load tmp%0#1 1                                                                     asset#0,tmp%1#0,tmp%0#1
        l-load tmp%1#0 1                                                                     asset#0,tmp%0#1,tmp%1#0
        ==                                                                                   asset#0,tmp%2#0
        assert // Only creator can opt in to ASA                                             asset#0
        // auction/contract.py:30
        // assert self.asa.id == 0, "ASA already opted in"
        int 0                                                                                asset#0,0
        byte "asa"                                                                           asset#0,0,"asa"
        app_global_get_ex                                                                    asset#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.asa exists                                                      asset#0,maybe_value%0#0
        l-load maybe_value%0#0 0                                                             asset#0,maybe_value%0#0
        !                                                                                    asset#0,tmp%3#0
        assert // ASA already opted in                                                       asset#0
        // auction/contract.py:32
        // self.asa = asset
        byte "asa"                                                                           asset#0,"asa"
        l-load-copy asset#0 1                                                                asset#0,"asa",asset#0 (copy)
        app_global_put                                                                       asset#0
        // auction/contract.py:35-38
        // itxn.AssetTransfer(
        //     asset_receiver=Global.current_application_address,
        //     xfer_asset=asset,
        // ).submit()
        itxn_begin                                                                           asset#0
        // auction/contract.py:36
        // asset_receiver=Global.current_application_address,
        global CurrentApplicationAddress                                                     asset#0,inner_txn_params%0%%param_AssetReceiver_idx_0#0
        l-load asset#0 1                                                                     inner_txn_params%0%%param_AssetReceiver_idx_0#0,asset#0
        itxn_field XferAsset                                                                 inner_txn_params%0%%param_AssetReceiver_idx_0#0
        l-load inner_txn_params%0%%param_AssetReceiver_idx_0#0 0                             inner_txn_params%0%%param_AssetReceiver_idx_0#0
        itxn_field AssetReceiver
        // auction/contract.py:35
        // itxn.AssetTransfer(
        int axfer                                                                            axfer
        itxn_field TypeEnum
        int 0                                                                                0
        itxn_field Fee
        // auction/contract.py:35-38
        // itxn.AssetTransfer(
        //     asset_receiver=Global.current_application_address,
        //     xfer_asset=asset,
        // ).submit()
        itxn_submit
        // auction/contract.py:25
        // @arc4.abimethod
        int 1                                                                                1
        return


// examples.auction.contract.Auction.start_auction[routing]() -> void:
subroutine start_auction:
    start_auction_block@0:
        // auction/contract.py:40
        // @arc4.abimethod
        txna ApplicationArgs 1                                                               reinterpret_Encoded(uint64)%0#0
        btoi                                                                                 starting_price#0
        txna ApplicationArgs 2                                                               starting_price#0,reinterpret_Encoded(uint64)%1#0
        btoi                                                                                 starting_price#0,length#0
        txn GroupIndex                                                                       starting_price#0,length#0,tmp%2#0
        int 1                                                                                starting_price#0,length#0,tmp%2#0,1
        -                                                                                    starting_price#0,length#0,axfer#0
        l-load-copy axfer#0 0                                                                starting_price#0,length#0,axfer#0,axfer#0 (copy)
        gtxns TypeEnum                                                                       starting_price#0,length#0,axfer#0,gtxn_type%0#0
        int axfer                                                                            starting_price#0,length#0,axfer#0,gtxn_type%0#0,axfer
        ==                                                                                   starting_price#0,length#0,axfer#0,gtxn_type_matches%0#0
        assert // transaction type is axfer                                                  starting_price#0,length#0,axfer#0
        // auction/contract.py:47
        // assert Txn.sender == Global.creator_address, "auction must be started by creator"
        txn Sender                                                                           starting_price#0,length#0,axfer#0,tmp%0#1
        global CreatorAddress                                                                starting_price#0,length#0,axfer#0,tmp%0#1,tmp%1#1
        l-load tmp%0#1 1                                                                     starting_price#0,length#0,axfer#0,tmp%1#1,tmp%0#1
        l-load tmp%1#1 1                                                                     starting_price#0,length#0,axfer#0,tmp%0#1,tmp%1#1
        ==                                                                                   starting_price#0,length#0,axfer#0,tmp%2#1
        assert // auction must be started by creator                                         starting_price#0,length#0,axfer#0
        // auction/contract.py:50
        // assert self.auction_end == 0, "auction already started"
        int 0                                                                                starting_price#0,length#0,axfer#0,0
        byte "auction_end"                                                                   starting_price#0,length#0,axfer#0,0,"auction_end"
        app_global_get_ex                                                                    starting_price#0,length#0,axfer#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.auction_end exists                                              starting_price#0,length#0,axfer#0,maybe_value%0#0
        l-load maybe_value%0#0 0                                                             starting_price#0,length#0,axfer#0,maybe_value%0#0
        !                                                                                    starting_price#0,length#0,axfer#0,tmp%3#0
        assert // auction already started                                                    starting_price#0,length#0,axfer#0
        // auction/contract.py:54
        // axfer.asset_receiver == Global.current_application_address
        l-load-copy axfer#0 0                                                                starting_price#0,length#0,axfer#0,axfer#0 (copy)
        gtxns AssetReceiver                                                                  starting_price#0,length#0,axfer#0,tmp%4#0
        global CurrentApplicationAddress                                                     starting_price#0,length#0,axfer#0,tmp%4#0,tmp%5#0
        l-load tmp%4#0 1                                                                     starting_price#0,length#0,axfer#0,tmp%5#0,tmp%4#0
        l-load tmp%5#0 1                                                                     starting_price#0,length#0,axfer#0,tmp%4#0,tmp%5#0
        ==                                                                                   starting_price#0,length#0,axfer#0,tmp%6#0
        // auction/contract.py:53-55
        // assert (
        //     axfer.asset_receiver == Global.current_application_address
        // ), "axfer must transfer to this app"
        assert // axfer must transfer to this app                                            starting_price#0,length#0,axfer#0
        // auction/contract.py:58
        // self.asa_amount = axfer.asset_amount
        l-load axfer#0 0                                                                     starting_price#0,length#0,axfer#0
        gtxns AssetAmount                                                                    starting_price#0,length#0,tmp%7#0
        byte "asa_amount"                                                                    starting_price#0,length#0,tmp%7#0,"asa_amount"
        l-load tmp%7#0 1                                                                     starting_price#0,length#0,"asa_amount",tmp%7#0
        app_global_put                                                                       starting_price#0,length#0
        // auction/contract.py:59
        // self.auction_end = Global.latest_timestamp + length
        global LatestTimestamp                                                               starting_price#0,length#0,tmp%8#0
        l-load length#0 1                                                                    starting_price#0,tmp%8#0,length#0
        +                                                                                    starting_price#0,tmp%9#0
        byte "auction_end"                                                                   starting_price#0,tmp%9#0,"auction_end"
        l-load tmp%9#0 1                                                                     starting_price#0,"auction_end",tmp%9#0
        app_global_put                                                                       starting_price#0
        // auction/contract.py:60
        // self.previous_bid = starting_price
        byte "previous_bid"                                                                  starting_price#0,"previous_bid"
        l-load starting_price#0 1                                                            "previous_bid",starting_price#0
        app_global_put
        // auction/contract.py:40
        // @arc4.abimethod
        int 1                                                                                1
        return


// examples.auction.contract.Auction.bid[routing]() -> void:
subroutine bid:
    bid_block@0:
        // auction/contract.py:66
        // @arc4.abimethod
        txn GroupIndex                                                                       tmp%0#0
        int 1                                                                                tmp%0#0,1
        -                                                                                    pay#0
        l-load-copy pay#0 0                                                                  pay#0,pay#0 (copy)
        gtxns TypeEnum                                                                       pay#0,gtxn_type%0#0
        int pay                                                                              pay#0,gtxn_type%0#0,pay
        ==                                                                                   pay#0,gtxn_type_matches%0#0
        assert // transaction type is pay                                                    pay#0
        // auction/contract.py:69
        // assert Global.latest_timestamp < self.auction_end, "auction has ended"
        global LatestTimestamp                                                               pay#0,tmp%0#0
        int 0                                                                                pay#0,tmp%0#0,0
        byte "auction_end"                                                                   pay#0,tmp%0#0,0,"auction_end"
        app_global_get_ex                                                                    pay#0,tmp%0#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.auction_end exists                                              pay#0,tmp%0#0,maybe_value%0#0
        l-load tmp%0#0 1                                                                     pay#0,maybe_value%0#0,tmp%0#0
        l-load maybe_value%0#0 1                                                             pay#0,tmp%0#0,maybe_value%0#0
        <                                                                                    pay#0,tmp%1#0
        assert // auction has ended                                                          pay#0
        // auction/contract.py:72
        // assert pay.sender == Txn.sender, "payment sender must match transaction sender"
        l-load-copy pay#0 0                                                                  pay#0,pay#0 (copy)
        gtxns Sender                                                                         pay#0,tmp%2#0
        txn Sender                                                                           pay#0,tmp%2#0,tmp%3#0
        l-load-copy tmp%2#0 1                                                                pay#0,tmp%2#0,tmp%3#0,tmp%2#0 (copy)
        l-load tmp%3#0 1                                                                     pay#0,tmp%2#0,tmp%2#0 (copy),tmp%3#0
        ==                                                                                   pay#0,tmp%2#0,tmp%4#0
        assert // payment sender must match transaction sender                               pay#0,tmp%2#0
        // auction/contract.py:73
        // assert pay.amount > self.previous_bid, "Bid must be higher than previous bid"
        l-load pay#0 1                                                                       tmp%2#0,pay#0
        gtxns Amount                                                                         tmp%2#0,tmp%5#0
        int 0                                                                                tmp%2#0,tmp%5#0,0
        byte "previous_bid"                                                                  tmp%2#0,tmp%5#0,0,"previous_bid"
        app_global_get_ex                                                                    tmp%2#0,tmp%5#0,maybe_value%1#0,maybe_exists%1#0
        assert // check self.previous_bid exists                                             tmp%2#0,tmp%5#0,maybe_value%1#0
        l-load-copy tmp%5#0 1                                                                tmp%2#0,tmp%5#0,maybe_value%1#0,tmp%5#0 (copy)
        l-load maybe_value%1#0 1                                                             tmp%2#0,tmp%5#0,tmp%5#0 (copy),maybe_value%1#0
        >                                                                                    tmp%2#0,tmp%5#0,tmp%6#0
        assert // Bid must be higher than previous bid                                       tmp%2#0,tmp%5#0
        // auction/contract.py:76
        // self.previous_bid = pay.amount
        byte "previous_bid"                                                                  tmp%2#0,tmp%5#0,"previous_bid"
        l-load-copy tmp%5#0 1                                                                tmp%2#0,tmp%5#0,"previous_bid",tmp%5#0 (copy)
        app_global_put                                                                       tmp%2#0,tmp%5#0
        // auction/contract.py:77
        // self.previous_bidder = pay.sender
        byte "previous_bidder"                                                               tmp%2#0,tmp%5#0,"previous_bidder"
        l-load tmp%2#0 2                                                                     tmp%5#0,"previous_bidder",tmp%2#0
        app_global_put                                                                       tmp%5#0
        // auction/contract.py:80
        // self.claimable_amount[Txn.sender] = pay.amount
        txn Sender                                                                           tmp%5#0,tmp%10#0
        byte "claim"                                                                         tmp%5#0,tmp%10#0,"claim"
        l-load tmp%5#0 2                                                                     tmp%10#0,"claim",tmp%5#0
        app_local_put
        // auction/contract.py:66
        // @arc4.abimethod
        int 1                                                                                1
        return


// examples.auction.contract.Auction.claim_bids[routing]() -> void:
subroutine claim_bids:
    claim_bids_block@0:
        // auction/contract.py:84
        // amount = original_amount = self.claimable_amount[Txn.sender]
        txn Sender                                                                           tmp%0#0
        int 0                                                                                tmp%0#0,0
        byte "claim"                                                                         tmp%0#0,0,"claim"
        app_local_get_ex                                                                     original_amount#0,maybe_exists%0#0
        l-store maybe_exists%0#0 1                                                           maybe_exists%0#0,original_amount#0
        l-store-copy original_amount#0 1                                                     original_amount#0,maybe_exists%0#0,original_amount#0 (copy)
        v-store original_amount#0                                                            original_amount#0,maybe_exists%0#0
        l-load maybe_exists%0#0 0                                                            original_amount#0,maybe_exists%0#0
        assert // check self.claimable_amount exists for account                             original_amount#0
        // auction/contract.py:87
        // if Txn.sender == self.previous_bidder:
        txn Sender                                                                           original_amount#0,tmp%1#0
        int 0                                                                                original_amount#0,tmp%1#0,0
        byte "previous_bidder"                                                               original_amount#0,tmp%1#0,0,"previous_bidder"
        app_global_get_ex                                                                    original_amount#0,tmp%1#0,maybe_value%1#0,maybe_exists%1#0
        assert // check self.previous_bidder exists                                          original_amount#0,tmp%1#0,maybe_value%1#0
        l-load tmp%1#0 1                                                                     original_amount#0,maybe_value%1#0,tmp%1#0
        l-load maybe_value%1#0 1                                                             original_amount#0,tmp%1#0,maybe_value%1#0
        ==                                                                                   original_amount#0,tmp%2#0
        l-load original_amount#0 1                                                           tmp%2#0,original_amount#0
        v-store amount#1                                                                     tmp%2#0
        l-load tmp%2#0 0                                                                     tmp%2#0
        bz claim_bids_after_if_else@3 ; b claim_bids_if_body@2

    claim_bids_if_body@2:
        // auction/contract.py:88
        // amount -= self.previous_bid
        int 0                                                                                0
        byte "previous_bid"                                                                  0,"previous_bid"
        app_global_get_ex                                                                    maybe_value%2#0,maybe_exists%2#0
        assert // check self.previous_bid exists                                             maybe_value%2#0
        v-load original_amount#0                                                             maybe_value%2#0,original_amount#0
        l-load maybe_value%2#0 1                                                             original_amount#0,maybe_value%2#0
        -                                                                                    amount#1
        v-store amount#1
        b claim_bids_after_if_else@3

    claim_bids_after_if_else@3:
        // auction/contract.py:90-93
        // itxn.Payment(
        //     amount=amount,
        //     receiver=Txn.sender,
        // ).submit()
        itxn_begin
        // auction/contract.py:92
        // receiver=Txn.sender,
        txn Sender                                                                           inner_txn_params%0%%param_Receiver_idx_0#0
        itxn_field Receiver
        v-load amount#1                                                                      amount#1
        l-store-copy amount#1 0                                                              amount#1,amount#1 (copy)
        itxn_field Amount                                                                    amount#1
        // auction/contract.py:90
        // itxn.Payment(
        int pay                                                                              amount#1,pay
        itxn_field TypeEnum                                                                  amount#1
        int 0                                                                                amount#1,0
        itxn_field Fee                                                                       amount#1
        // auction/contract.py:90-93
        // itxn.Payment(
        //     amount=amount,
        //     receiver=Txn.sender,
        // ).submit()
        itxn_submit                                                                          amount#1
        // auction/contract.py:95
        // self.claimable_amount[Txn.sender] = original_amount - amount
        v-load original_amount#0                                                             amount#1,original_amount#0
        l-load amount#1 1                                                                    original_amount#0,amount#1
        -                                                                                    tmp%4#0
        txn Sender                                                                           tmp%4#0,tmp%5#0
        byte "claim"                                                                         tmp%4#0,tmp%5#0,"claim"
        l-load tmp%4#0 2                                                                     tmp%5#0,"claim",tmp%4#0
        app_local_put
        // auction/contract.py:82
        // @arc4.abimethod
        int 1                                                                                1
        return


// examples.auction.contract.Auction.claim_asset[routing]() -> void:
subroutine claim_asset:
    claim_asset_block@0:
        // auction/contract.py:97
        // @arc4.abimethod
        txna ApplicationArgs 1                                                               reinterpret_Encoded(uint64)%0#0
        btoi                                                                                 asset#0
        // auction/contract.py:99
        // assert Global.latest_timestamp > self.auction_end, "auction has not ended"
        global LatestTimestamp                                                               asset#0,tmp%0#1
        int 0                                                                                asset#0,tmp%0#1,0
        byte "auction_end"                                                                   asset#0,tmp%0#1,0,"auction_end"
        app_global_get_ex                                                                    asset#0,tmp%0#1,maybe_value%0#0,maybe_exists%0#0
        assert // check self.auction_end exists                                              asset#0,tmp%0#1,maybe_value%0#0
        l-load tmp%0#1 1                                                                     asset#0,maybe_value%0#0,tmp%0#1
        l-load maybe_value%0#0 1                                                             asset#0,tmp%0#1,maybe_value%0#0
        >                                                                                    asset#0,tmp%1#0
        assert // auction has not ended                                                      asset#0
        // auction/contract.py:101-106
        // itxn.AssetTransfer(
        //     xfer_asset=asset,
        //     asset_close_to=self.previous_bidder,
        //     asset_receiver=self.previous_bidder,
        //     asset_amount=self.asa_amount,
        // ).submit()
        itxn_begin                                                                           asset#0
        // auction/contract.py:103
        // asset_close_to=self.previous_bidder,
        int 0                                                                                asset#0,0
        byte "previous_bidder"                                                               asset#0,0,"previous_bidder"
        app_global_get_ex                                                                    asset#0,maybe_value%1#0,maybe_exists%1#0
        assert // check self.previous_bidder exists                                          asset#0,maybe_value%1#0
        // auction/contract.py:105
        // asset_amount=self.asa_amount,
        int 0                                                                                asset#0,maybe_value%1#0,0
        byte "asa_amount"                                                                    asset#0,maybe_value%1#0,0,"asa_amount"
        app_global_get_ex                                                                    asset#0,maybe_value%1#0,maybe_value%3#0,maybe_exists%3#0
        assert // check self.asa_amount exists                                               asset#0,maybe_value%1#0,maybe_value%3#0
        l-load maybe_value%3#0 0                                                             asset#0,maybe_value%1#0,maybe_value%3#0
        itxn_field AssetAmount                                                               asset#0,maybe_value%1#0
        l-load-copy maybe_value%1#0 0                                                        asset#0,maybe_value%1#0,maybe_value%1#0 (copy)
        itxn_field AssetReceiver                                                             asset#0,maybe_value%1#0
        l-load maybe_value%1#0 0                                                             asset#0,maybe_value%1#0
        itxn_field AssetCloseTo                                                              asset#0
        l-load asset#0 0                                                                     asset#0
        itxn_field XferAsset
        // auction/contract.py:101
        // itxn.AssetTransfer(
        int axfer                                                                            axfer
        itxn_field TypeEnum
        int 0                                                                                0
        itxn_field Fee
        // auction/contract.py:101-106
        // itxn.AssetTransfer(
        //     xfer_asset=asset,
        //     asset_close_to=self.previous_bidder,
        //     asset_receiver=self.previous_bidder,
        //     asset_amount=self.asa_amount,
        // ).submit()
        itxn_submit
        // auction/contract.py:97
        // @arc4.abimethod
        int 1                                                                                1
        return


