#pragma version 10

examples.auction.contract.Auction.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // auction/contract.py:15
    // class Auction(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@12
    method "opt_into_asset(asset)void"
    method "start_auction(uint64,uint64,axfer)void"
    method "opt_in()void"
    method "bid(pay)void"
    method "claim_bids()void"
    method "claim_asset(asset)void"
    txna ApplicationArgs 0
    match main_opt_into_asset_route@4 main_start_auction_route@5 main_opt_in_route@6 main_bid_route@7 main_claim_bids_route@8 main_claim_asset_route@9
    err // reject transaction

main_opt_into_asset_route@4:
    // auction/contract.py:25
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // auction/contract.py:15
    // class Auction(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // auction/contract.py:25
    // @arc4.abimethod
    callsub opt_into_asset
    int 1
    return

main_start_auction_route@5:
    // auction/contract.py:41
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // auction/contract.py:15
    // class Auction(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int axfer
    ==
    assert // transaction type is axfer
    // auction/contract.py:41
    // @arc4.abimethod
    callsub start_auction
    int 1
    return

main_opt_in_route@6:
    // auction/contract.py:63
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub opt_in
    int 1
    return

main_bid_route@7:
    // auction/contract.py:67
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // auction/contract.py:15
    // class Auction(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // auction/contract.py:67
    // @arc4.abimethod
    callsub bid
    int 1
    return

main_claim_bids_route@8:
    // auction/contract.py:83
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub claim_bids
    int 1
    return

main_claim_asset_route@9:
    // auction/contract.py:99
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // auction/contract.py:15
    // class Auction(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // auction/contract.py:99
    // @arc4.abimethod
    callsub claim_asset
    int 1
    return

main_bare_routing@12:
    // auction/contract.py:15
    // class Auction(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// examples.auction.contract.Auction.opt_into_asset(asset: uint64) -> void:
opt_into_asset:
    // auction/contract.py:25-26
    // @arc4.abimethod
    // def opt_into_asset(self, asset: Asset) -> None:
    proto 1 0
    // auction/contract.py:27-28
    // # Only allow app creator to opt the app account into a ASA
    // assert Txn.sender == Global.creator_address, "Only creator can opt in to ASA"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    // auction/contract.py:29-30
    // # Verify a ASA hasn't already been opted into
    // assert self.asa.id == 0, "ASA already opted in"
    int 0
    byte "asa"
    app_global_get_ex
    assert // check asa exists
    !
    assert // ASA already opted in
    // auction/contract.py:31-32
    // # Save ASA ID in global state
    // self.asa = asset
    byte "asa"
    frame_dig -1
    app_global_put
    // auction/contract.py:34-39
    // # Submit opt-in transaction: 0 asset transfer to self
    // itxn.AssetTransfer(
    //     asset_receiver=Global.current_application_address,
    //     xfer_asset=asset,
    //     fee=0,
    // ).submit()
    itxn_begin
    // auction/contract.py:36
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // auction/contract.py:38
    // fee=0,
    int 0
    itxn_field Fee
    frame_dig -1
    itxn_field XferAsset
    itxn_field AssetReceiver
    // auction/contract.py:34-35
    // # Submit opt-in transaction: 0 asset transfer to self
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // auction/contract.py:34-39
    // # Submit opt-in transaction: 0 asset transfer to self
    // itxn.AssetTransfer(
    //     asset_receiver=Global.current_application_address,
    //     xfer_asset=asset,
    //     fee=0,
    // ).submit()
    itxn_submit
    retsub


// examples.auction.contract.Auction.start_auction(starting_price: bytes, length: bytes, axfer: uint64) -> void:
start_auction:
    // auction/contract.py:41-47
    // @arc4.abimethod
    // def start_auction(
    //     self,
    //     starting_price: arc4.UInt64,
    //     length: arc4.UInt64,
    //     axfer: gtxn.AssetTransferTransaction,
    // ) -> None:
    proto 3 0
    // auction/contract.py:48
    // assert Txn.sender == Global.creator_address, "auction must be started by creator"
    txn Sender
    global CreatorAddress
    ==
    assert // auction must be started by creator
    // auction/contract.py:50-51
    // # Ensure the auction hasn't already been started
    // assert self.auction_end == 0, "auction already started"
    int 0
    byte "auction_end"
    app_global_get_ex
    assert // check auction_end exists
    !
    assert // auction already started
    // auction/contract.py:55
    // axfer.asset_receiver == Global.current_application_address
    frame_dig -1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    // auction/contract.py:53-56
    // # Verify axfer
    // assert (
    //     axfer.asset_receiver == Global.current_application_address
    // ), "axfer must transfer to this app"
    assert // axfer must transfer to this app
    // auction/contract.py:58-59
    // # Set global state
    // self.asa_amount = axfer.asset_amount
    frame_dig -1
    gtxns AssetAmount
    byte "asa_amount"
    swap
    app_global_put
    // auction/contract.py:60
    // self.auction_end = Global.latest_timestamp + length.decode()
    global LatestTimestamp
    frame_dig -2
    btoi
    +
    byte "auction_end"
    swap
    app_global_put
    // auction/contract.py:61
    // self.previous_bid = starting_price.decode()
    frame_dig -3
    btoi
    byte "previous_bid"
    swap
    app_global_put
    retsub


// examples.auction.contract.Auction.opt_in() -> void:
opt_in:
    // auction/contract.py:63-64
    // @arc4.abimethod
    // def opt_in(self) -> None:
    proto 0 0
    retsub


// examples.auction.contract.Auction.bid(pay: uint64) -> void:
bid:
    // auction/contract.py:67-68
    // @arc4.abimethod
    // def bid(self, pay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // auction/contract.py:69-70
    // # Ensure auction hasn't ended
    // assert Global.latest_timestamp < self.auction_end, "auction has ended"
    global LatestTimestamp
    int 0
    byte "auction_end"
    app_global_get_ex
    assert // check auction_end exists
    <
    assert // auction has ended
    // auction/contract.py:72-73
    // # Verify payment transaction
    // assert pay.sender == Txn.sender, "payment sender must match transaction sender"
    frame_dig -1
    gtxns Sender
    dup
    txn Sender
    ==
    assert // payment sender must match transaction sender
    // auction/contract.py:74
    // assert pay.amount > self.previous_bid, "Bid must be higher than previous bid"
    frame_dig -1
    gtxns Amount
    int 0
    byte "previous_bid"
    app_global_get_ex
    assert // check previous_bid exists
    dig 1
    <
    assert // Bid must be higher than previous bid
    // auction/contract.py:76-77
    // # set global state
    // self.previous_bid = pay.amount
    byte "previous_bid"
    dig 1
    app_global_put
    // auction/contract.py:78
    // self.previous_bidder = pay.sender
    byte "previous_bidder"
    uncover 2
    app_global_put
    // auction/contract.py:80-81
    // # Update claimable amount
    // self.claimable_amount[Txn.sender] = pay.amount
    txn Sender
    byte "claim"
    uncover 2
    app_local_put
    retsub


// examples.auction.contract.Auction.claim_bids() -> void:
claim_bids:
    // auction/contract.py:83-84
    // @arc4.abimethod
    // def claim_bids(self) -> None:
    proto 0 0
    // auction/contract.py:85
    // amount = original_amount = self.claimable_amount[Txn.sender]
    txn Sender
    int 0
    byte "claim"
    app_local_get_ex
    swap
    dup
    uncover 2
    assert // check claimable_amount exists for account
    // auction/contract.py:87-88
    // # subtract previous bid if sender is previous bidder
    // if Txn.sender == self.previous_bidder:
    txn Sender
    int 0
    byte "previous_bidder"
    app_global_get_ex
    assert // check previous_bidder exists
    ==
    bz claim_bids_after_if_else@2
    // auction/contract.py:89
    // amount -= self.previous_bid
    int 0
    byte "previous_bid"
    app_global_get_ex
    assert // check previous_bid exists
    frame_dig 0
    swap
    -
    frame_bury 1

claim_bids_after_if_else@2:
    // auction/contract.py:91-95
    // itxn.Payment(
    //     fee=0,
    //     amount=amount,
    //     receiver=Txn.sender,
    // ).submit()
    itxn_begin
    // auction/contract.py:94
    // receiver=Txn.sender,
    txn Sender
    itxn_field Receiver
    frame_dig 1
    dup
    itxn_field Amount
    // auction/contract.py:92
    // fee=0,
    int 0
    itxn_field Fee
    // auction/contract.py:91
    // itxn.Payment(
    int pay
    itxn_field TypeEnum
    // auction/contract.py:91-95
    // itxn.Payment(
    //     fee=0,
    //     amount=amount,
    //     receiver=Txn.sender,
    // ).submit()
    itxn_submit
    // auction/contract.py:97
    // self.claimable_amount[Txn.sender] = original_amount - amount
    frame_dig 0
    swap
    -
    txn Sender
    byte "claim"
    uncover 2
    app_local_put
    retsub


// examples.auction.contract.Auction.claim_asset(asset: uint64) -> void:
claim_asset:
    // auction/contract.py:99-100
    // @arc4.abimethod
    // def claim_asset(self, asset: Asset) -> None:
    proto 1 0
    // auction/contract.py:101
    // assert Global.latest_timestamp > self.auction_end, "auction has not ended"
    global LatestTimestamp
    int 0
    byte "auction_end"
    app_global_get_ex
    assert // check auction_end exists
    >
    assert // auction has not ended
    // auction/contract.py:102-109
    // # Send ASA to previous bidder
    // itxn.AssetTransfer(
    //     fee=0,
    //     xfer_asset=asset,
    //     asset_close_to=self.previous_bidder,
    //     asset_receiver=self.previous_bidder,
    //     asset_amount=self.asa_amount,
    // ).submit()
    itxn_begin
    // auction/contract.py:106
    // asset_close_to=self.previous_bidder,
    int 0
    byte "previous_bidder"
    app_global_get_ex
    assert // check previous_bidder exists
    // auction/contract.py:107
    // asset_receiver=self.previous_bidder,
    int 0
    byte "previous_bidder"
    app_global_get_ex
    assert // check previous_bidder exists
    // auction/contract.py:108
    // asset_amount=self.asa_amount,
    int 0
    byte "asa_amount"
    app_global_get_ex
    assert // check asa_amount exists
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field AssetCloseTo
    frame_dig -1
    itxn_field XferAsset
    // auction/contract.py:104
    // fee=0,
    int 0
    itxn_field Fee
    // auction/contract.py:102-103
    // # Send ASA to previous bidder
    // itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // auction/contract.py:102-109
    // # Send ASA to previous bidder
    // itxn.AssetTransfer(
    //     fee=0,
    //     xfer_asset=asset,
    //     asset_close_to=self.previous_bidder,
    //     asset_receiver=self.previous_bidder,
    //     asset_amount=self.asa_amount,
    // ).submit()
    itxn_submit
    retsub


// examples.auction.contract.Auction.__init__() -> void:
__init__:
    // auction/contract.py:16
    // def __init__(self) -> None:
    proto 0 0
    // auction/contract.py:17
    // self.auction_end = UInt64(0)
    byte "auction_end"
    int 0
    app_global_put
    // auction/contract.py:18
    // self.previous_bid = UInt64(0)
    byte "previous_bid"
    int 0
    app_global_put
    // auction/contract.py:19
    // self.asa_amount = UInt64(0)
    byte "asa_amount"
    int 0
    app_global_put
    // auction/contract.py:20
    // self.asa = Asset(0)
    byte "asa"
    int 0
    app_global_put
    // auction/contract.py:21-22
    // # Use zero address rather than an empty string for Account type safety
    // self.previous_bidder = Global.zero_address
    byte "previous_bidder"
    global ZeroAddress
    app_global_put
    retsub
