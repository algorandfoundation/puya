#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 8 4
    bytecblock "auction_end" "previous_bid" "previous_bidder" "asa_amount" "asa" "claim"
    txn ApplicationID
    bnz main_after_if_else@2
    // auction/contract.py:18
    // self.auction_end = UInt64(0)
    bytec_0 // "auction_end"
    intc_0 // 0
    app_global_put
    // auction/contract.py:19
    // self.previous_bid = UInt64(0)
    bytec_1 // "previous_bid"
    intc_0 // 0
    app_global_put
    // auction/contract.py:20
    // self.asa_amount = UInt64(0)
    bytec_3 // "asa_amount"
    intc_0 // 0
    app_global_put
    // auction/contract.py:21
    // self.asa = Asset()
    bytec 4 // "asa"
    intc_0 // 0
    app_global_put
    // auction/contract.py:22
    // self.previous_bidder = Account()
    bytec_2 // "previous_bidder"
    global ZeroAddress
    app_global_put

main_after_if_else@2:
    // auction/contract.py:16
    // class Auction(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@15
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xd8f62d9a 0xf0aa7023 0x30c6d58a 0xdb7fe843 0xe654625b 0x59b2ab26 // method "opt_into_asset(uint64)void", method "start_auction(uint64,uint64,axfer)void", method "opt_in()void", method "bid(pay)void", method "claim_bids()void", method "claim_asset(uint64)void"
    txna ApplicationArgs 0
    match opt_into_asset start_auction main_opt_in_route@8 bid claim_bids claim_asset
    err

main_opt_in_route@8:
    // auction/contract.py:62
    // @arc4.abimethod
    intc_1 // 1
    return

main___algopy_default_create@15:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_1 // 1
    return


// examples.auction.contract.Auction.opt_into_asset[routing]() -> void:
opt_into_asset:
    // auction/contract.py:25
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    // auction/contract.py:27-28
    // # Only allow app creator to opt the app account into a ASA
    // assert Txn.sender == Global.creator_address, "Only creator can opt in to ASA"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    // auction/contract.py:29-30
    // # Verify a ASA hasn't already been opted into
    // assert self.asa.id == 0, "ASA already opted in"
    intc_0 // 0
    bytec 4 // "asa"
    app_global_get_ex
    assert // check self.asa exists
    !
    assert // ASA already opted in
    // auction/contract.py:31-32
    // # Save ASA ID in global state
    // self.asa = asset
    bytec 4 // "asa"
    dig 1
    app_global_put
    // auction/contract.py:34-38
    // # Submit opt-in transaction: 0 asset transfer to self
    // itxn.AssetTransfer(
    //     asset_receiver=Global.current_application_address,
    //     xfer_asset=asset,
    // ).submit()
    itxn_begin
    // auction/contract.py:36
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    itxn_field XferAsset
    // auction/contract.py:34-35
    // # Submit opt-in transaction: 0 asset transfer to self
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // auction/contract.py:34-38
    // # Submit opt-in transaction: 0 asset transfer to self
    // itxn.AssetTransfer(
    //     asset_receiver=Global.current_application_address,
    //     xfer_asset=asset,
    // ).submit()
    itxn_submit
    // auction/contract.py:25
    // @arc4.abimethod
    intc_1 // 1
    return


// examples.auction.contract.Auction.start_auction[routing]() -> void:
start_auction:
    // auction/contract.py:40
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    txna ApplicationArgs 2
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    // auction/contract.py:47
    // assert Txn.sender == Global.creator_address, "auction must be started by creator"
    txn Sender
    global CreatorAddress
    ==
    assert // auction must be started by creator
    // auction/contract.py:49-50
    // # Ensure the auction hasn't already been started
    // assert self.auction_end == 0, "auction already started"
    intc_0 // 0
    bytec_0 // "auction_end"
    app_global_get_ex
    assert // check self.auction_end exists
    !
    assert // auction already started
    // auction/contract.py:54
    // axfer.asset_receiver == Global.current_application_address
    dup
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    // auction/contract.py:52-55
    // # Verify axfer
    // assert (
    //     axfer.asset_receiver == Global.current_application_address
    // ), "axfer must transfer to this app"
    assert // axfer must transfer to this app
    // auction/contract.py:57-58
    // # Set global state
    // self.asa_amount = axfer.asset_amount
    gtxns AssetAmount
    bytec_3 // "asa_amount"
    swap
    app_global_put
    // auction/contract.py:59
    // self.auction_end = Global.latest_timestamp + length
    global LatestTimestamp
    +
    bytec_0 // "auction_end"
    swap
    app_global_put
    // auction/contract.py:60
    // self.previous_bid = starting_price
    bytec_1 // "previous_bid"
    swap
    app_global_put
    // auction/contract.py:40
    // @arc4.abimethod
    intc_1 // 1
    return


// examples.auction.contract.Auction.bid[routing]() -> void:
bid:
    // auction/contract.py:66
    // @arc4.abimethod
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // auction/contract.py:68-69
    // # Ensure auction hasn't ended
    // assert Global.latest_timestamp < self.auction_end, "auction has ended"
    global LatestTimestamp
    intc_0 // 0
    bytec_0 // "auction_end"
    app_global_get_ex
    assert // check self.auction_end exists
    <
    assert // auction has ended
    // auction/contract.py:71-72
    // # Verify payment transaction
    // assert pay.sender == Txn.sender, "payment sender must match transaction sender"
    dup
    gtxns Sender
    dup
    txn Sender
    ==
    assert // payment sender must match transaction sender
    // auction/contract.py:73
    // assert pay.amount > self.previous_bid, "Bid must be higher than previous bid"
    swap
    gtxns Amount
    intc_0 // 0
    bytec_1 // "previous_bid"
    app_global_get_ex
    assert // check self.previous_bid exists
    dig 1
    <
    assert // Bid must be higher than previous bid
    // auction/contract.py:75-76
    // # set global state
    // self.previous_bid = pay.amount
    bytec_1 // "previous_bid"
    dig 1
    app_global_put
    // auction/contract.py:77
    // self.previous_bidder = pay.sender
    bytec_2 // "previous_bidder"
    uncover 2
    app_global_put
    // auction/contract.py:79-80
    // # Update claimable amount
    // self.claimable_amount[Txn.sender] = pay.amount
    txn Sender
    bytec 5 // "claim"
    uncover 2
    app_local_put
    // auction/contract.py:66
    // @arc4.abimethod
    intc_1 // 1
    return


// examples.auction.contract.Auction.claim_bids[routing]() -> void:
claim_bids:
    // auction/contract.py:84
    // amount = original_amount = self.claimable_amount[Txn.sender]
    txn Sender
    intc_0 // 0
    bytec 5 // "claim"
    app_local_get_ex
    assert // check self.claimable_amount exists for account
    // auction/contract.py:86-87
    // # subtract previous bid if sender is previous bidder
    // if Txn.sender == self.previous_bidder:
    txn Sender
    intc_0 // 0
    bytec_2 // "previous_bidder"
    app_global_get_ex
    assert // check self.previous_bidder exists
    ==
    bnz claim_bids_if_body@2
    dup

claim_bids_after_if_else@3:
    // auction/contract.py:90-93
    // itxn.Payment(
    //     amount=amount,
    //     receiver=Txn.sender,
    // ).submit()
    itxn_begin
    // auction/contract.py:92
    // receiver=Txn.sender,
    txn Sender
    itxn_field Receiver
    dup
    itxn_field Amount
    // auction/contract.py:90
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // auction/contract.py:90-93
    // itxn.Payment(
    //     amount=amount,
    //     receiver=Txn.sender,
    // ).submit()
    itxn_submit
    // auction/contract.py:95
    // self.claimable_amount[Txn.sender] = original_amount - amount
    dig 1
    swap
    -
    txn Sender
    bytec 5 // "claim"
    uncover 2
    app_local_put
    // auction/contract.py:82
    // @arc4.abimethod
    intc_1 // 1
    return

claim_bids_if_body@2:
    // auction/contract.py:88
    // amount -= self.previous_bid
    intc_0 // 0
    bytec_1 // "previous_bid"
    app_global_get_ex
    assert // check self.previous_bid exists
    dig 1
    swap
    -
    b claim_bids_after_if_else@3


// examples.auction.contract.Auction.claim_asset[routing]() -> void:
claim_asset:
    // auction/contract.py:97
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    len
    intc_2 // 8
    ==
    assert // invalid number of bytes for uint64
    btoi
    // auction/contract.py:99
    // assert Global.latest_timestamp > self.auction_end, "auction has not ended"
    global LatestTimestamp
    intc_0 // 0
    bytec_0 // "auction_end"
    app_global_get_ex
    assert // check self.auction_end exists
    >
    assert // auction has not ended
    // auction/contract.py:100-106
    // # Send ASA to previous bidder
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_close_to=self.previous_bidder,
    //     asset_receiver=self.previous_bidder,
    //     asset_amount=self.asa_amount,
    // ).submit()
    itxn_begin
    // auction/contract.py:103
    // asset_close_to=self.previous_bidder,
    intc_0 // 0
    bytec_2 // "previous_bidder"
    app_global_get_ex
    assert // check self.previous_bidder exists
    // auction/contract.py:105
    // asset_amount=self.asa_amount,
    intc_0 // 0
    bytec_3 // "asa_amount"
    app_global_get_ex
    assert // check self.asa_amount exists
    itxn_field AssetAmount
    dup
    itxn_field AssetReceiver
    itxn_field AssetCloseTo
    itxn_field XferAsset
    // auction/contract.py:100-101
    // # Send ASA to previous bidder
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // auction/contract.py:100-106
    // # Send ASA to previous bidder
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_close_to=self.previous_bidder,
    //     asset_receiver=self.previous_bidder,
    //     asset_amount=self.asa_amount,
    // ).submit()
    itxn_submit
    // auction/contract.py:97
    // @arc4.abimethod
    intc_1 // 1
    return
