#pragma version 9

// This TEAL was generated by TEALScript v0.65.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp call_OptIn NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_DeleteApplication

NOT_IMPLEMENTED:
	err

// createApplication()void
abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

createApplication:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0

	// auction.algo.ts:18
	// this.auctionEnd.value = 0
	byte 0x61756374696f6e456e64 // "auctionEnd"
	int 0
	app_global_put

	// auction.algo.ts:19
	// this.previousBid.value = 0
	byte 0x70726576696f7573426964 // "previousBid"
	int 0
	app_global_put

	// auction.algo.ts:20
	// this.asaAmt.value = 0
	byte 0x617361416d74 // "asaAmt"
	int 0
	app_global_put

	// auction.algo.ts:21
	// this.asa.value = Asset.zeroIndex
	byte 0x617361 // "asa"
	int 0
	app_global_put

	// auction.algo.ts:24
	// this.previousBidder.value = globals.zeroAddress
	byte 0x70726576696f7573426964646572 // "previousBidder"
	global ZeroAddress
	app_global_put
	retsub

// optIntoAsset(asset)void
abi_route_optIntoAsset:
	// asset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute optIntoAsset(asset)void
	callsub optIntoAsset
	int 1
	return

optIntoAsset:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 0

	// Only allow app creator to opt the app account into a ASA
	// auction.algo.ts:29
	// verifyTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==
	assert

	// Verify a ASA hasn't already been opted into
	// auction.algo.ts:32
	// assert(this.asa.value === Asset.zeroIndex)
	byte 0x617361 // "asa"
	app_global_get
	int 0
	==
	assert

	// Save ASA ID in global state
	// auction.algo.ts:35
	// this.asa.value = asset
	byte 0x617361 // "asa"
	frame_dig -1 // asset: asset
	app_global_put

	// Submit opt-in transaction: 0 asset transfer to self
	// auction.algo.ts:38
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       xferAsset: asset,
	//       assetAmount: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// auction.algo.ts:39
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// auction.algo.ts:40
	// xferAsset: asset
	frame_dig -1 // asset: asset
	itxn_field XferAsset

	// auction.algo.ts:41
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// startAuction(axfer,uint64,uint64)void
abi_route_startAuction:
	// axfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// length: uint64
	txna ApplicationArgs 2
	btoi

	// startingPrice: uint64
	txna ApplicationArgs 1
	btoi

	// execute startAuction(axfer,uint64,uint64)void
	callsub startAuction
	int 1
	return

startAuction:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 3 0

	// auction.algo.ts:46
	// verifyTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==
	assert

	// Ensure the auction hasn't already been started
	// auction.algo.ts:49
	// assert(this.auctionEnd.value === 0)
	byte 0x61756374696f6e456e64 // "auctionEnd"
	app_global_get
	int 0
	==
	assert

	// Verify axfer
	// auction.algo.ts:52
	// verifyTxn(axfer, { assetReceiver: this.app.address })
	// verify assetReceiver
	frame_dig -3 // axfer: axfer
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// Set global state
	// auction.algo.ts:55
	// this.asaAmt.value = axfer.assetAmount
	byte 0x617361416d74 // "asaAmt"
	frame_dig -3 // axfer: axfer
	gtxns AssetAmount
	app_global_put

	// auction.algo.ts:56
	// this.auctionEnd.value = globals.latestTimestamp + length
	byte 0x61756374696f6e456e64 // "auctionEnd"
	global LatestTimestamp
	frame_dig -2 // length: uint64
	+
	app_global_put

	// auction.algo.ts:57
	// this.previousBid.value = startingPrice
	byte 0x70726576696f7573426964 // "previousBid"
	frame_dig -1 // startingPrice: uint64
	app_global_put
	retsub

pay:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 0

	// auction.algo.ts:61
	// sendPayment({
	//       receiver: receiver,
	//       amount: amount,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// auction.algo.ts:62
	// receiver: receiver
	frame_dig -1 // receiver: account
	itxn_field Receiver

	// auction.algo.ts:63
	// amount: amount
	frame_dig -2 // amount: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// optInToApplication()void
abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	int 1
	return

optInToApplication:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0
	retsub

// bid(pay)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_bid:
	// payment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute bid(pay)void
	callsub bid
	int 1
	return

bid:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 0

	// Ensure auction hasn't ended
	// auction.algo.ts:72
	// assert(globals.latestTimestamp < this.auctionEnd.value)
	global LatestTimestamp
	byte 0x61756374696f6e456e64 // "auctionEnd"
	app_global_get
	<
	assert

	// Verify payment transaction
	// auction.algo.ts:75
	// verifyTxn(payment, {
	//       sender: this.txn.sender,
	//       amount: { greaterThan: this.previousBid.value },
	//     })
	// verify sender
	frame_dig -1 // payment: pay
	gtxns Sender
	txn Sender
	==
	assert

	// verify amount
	frame_dig -1 // payment: pay
	gtxns Amount
	byte 0x70726576696f7573426964 // "previousBid"
	app_global_get
	>
	assert

	// Set global state
	// auction.algo.ts:81
	// this.previousBid.value = payment.amount
	byte 0x70726576696f7573426964 // "previousBid"
	frame_dig -1 // payment: pay
	gtxns Amount
	app_global_put

	// auction.algo.ts:82
	// this.previousBidder.value = payment.sender
	byte 0x70726576696f7573426964646572 // "previousBidder"
	frame_dig -1 // payment: pay
	gtxns Sender
	app_global_put

	// Update claimable amount
	// auction.algo.ts:85
	// this.claimableAmount(this.txn.sender).value = payment.amount
	txn Sender
	byte 0x636c61696d61626c65416d6f756e74 // "claimableAmount"
	frame_dig -1 // payment: pay
	gtxns Amount
	app_local_put
	retsub

// claimBids()void
abi_route_claimBids:
	// execute claimBids()void
	callsub claimBids
	int 1
	return

claimBids:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0; byte 0x; dupn 1

	// auction.algo.ts:89
	// originalAmount = this.claimableAmount(this.txn.sender).value
	txn Sender
	byte 0x636c61696d61626c65416d6f756e74 // "claimableAmount"
	app_local_get
	frame_bury 0 // originalAmount: uint64

	// auction.algo.ts:90
	// amount = originalAmount
	frame_dig 0 // originalAmount: uint64
	frame_bury 1 // amount: uint64

	// subtract previous bid if sender is previous bidder
	// if0_condition
	// auction.algo.ts:93
	// this.txn.sender === this.previousBidder.value
	txn Sender
	byte 0x70726576696f7573426964646572 // "previousBidder"
	app_global_get
	==
	bz if0_end

	// if0_consequent
	// auction.algo.ts:93
	// amount = amount - this.previousBid.value
	frame_dig 1 // amount: uint64
	byte 0x70726576696f7573426964 // "previousBid"
	app_global_get
	-
	frame_bury 1 // amount: uint64

if0_end:
	// auction.algo.ts:95
	// this.pay(this.txn.sender, amount)
	frame_dig 1 // amount: uint64
	txn Sender
	callsub pay

	// auction.algo.ts:96
	// this.claimableAmount(this.txn.sender).value = originalAmount - amount
	txn Sender
	byte 0x636c61696d61626c65416d6f756e74 // "claimableAmount"
	frame_dig 0 // originalAmount: uint64
	frame_dig 1 // amount: uint64
	-
	app_local_put
	retsub

// claim_asset(asset)void
abi_route_claim_asset:
	// asset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute claim_asset(asset)void
	callsub claim_asset
	int 1
	return

claim_asset:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 0

	// auction.algo.ts:100
	// assert(globals.latestTimestamp > this.auctionEnd.value)
	global LatestTimestamp
	byte 0x61756374696f6e456e64 // "auctionEnd"
	app_global_get
	>
	assert

	// Send ASA to previous bidder
	// auction.algo.ts:103
	// sendAssetTransfer({
	//       assetReceiver: this.previousBidder.value,
	//       xferAsset: asset,
	//       assetAmount: this.asaAmt.value,
	//       assetCloseTo: this.previousBidder.value,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// auction.algo.ts:104
	// assetReceiver: this.previousBidder.value
	byte 0x70726576696f7573426964646572 // "previousBidder"
	app_global_get
	itxn_field AssetReceiver

	// auction.algo.ts:105
	// xferAsset: asset
	frame_dig -1 // asset: asset
	itxn_field XferAsset

	// auction.algo.ts:106
	// assetAmount: this.asaAmt.value
	byte 0x617361416d74 // "asaAmt"
	app_global_get
	itxn_field AssetAmount

	// auction.algo.ts:107
	// assetCloseTo: this.previousBidder.value
	byte 0x70726576696f7573426964646572 // "previousBidder"
	app_global_get
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// deleteApplication()void
abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

deleteApplication:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 0 0

	// auction.algo.ts:112
	// sendPayment({
	//       receiver: globals.creatorAddress,
	//       closeRemainderTo: globals.creatorAddress,
	//       amount: 0,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// auction.algo.ts:113
	// receiver: globals.creatorAddress
	global CreatorAddress
	itxn_field Receiver

	// auction.algo.ts:114
	// closeRemainderTo: globals.creatorAddress
	global CreatorAddress
	itxn_field CloseRemainderTo

	// auction.algo.ts:115
	// amount: 0
	int 0
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "optIntoAsset(asset)void"
	method "startAuction(uint64,uint64,axfer)void"
	method "bid(pay)void"
	method "claimBids()void"
	method "claim_asset(asset)void"
	txna ApplicationArgs 0
	match abi_route_optIntoAsset abi_route_startAuction abi_route_bid abi_route_claimBids abi_route_claim_asset
	err

call_OptIn:
	method "optInToApplication()void"
	txna ApplicationArgs 0
	match abi_route_optInToApplication
	err

call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match abi_route_deleteApplication
	err