main examples.auction.contract.Auction.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "auction_end" 0u)
        (app_global_put "previous_bid" 0u)
        (app_global_put "asa_amount" 0u)
        (app_global_put "asa" 0u)
        let materialized_values%0#0: bytes[32] = (global ZeroAddress)
        (app_global_put "previous_bidder" materialized_values%0#0)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@13
    block@4: // abi_routing_L16
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "opt_into_asset(asset)void" => block@5, method "start_auction(uint64,uint64,axfer)void" => block@6, method "opt_in()void" => block@7, method "bid(pay)void" => block@8, method "claim_bids()void" => block@9, method "claim_asset(asset)void" => block@12, * => block@15}
    block@5: // opt_into_asset_route_L25
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[1]%0#0)
        let asset#0: uint64 = ((txnas Assets) tmp%7#0)
        let tmp%0#4: bytes[32] = (txn Sender)
        let tmp%1#2: bytes[32] = (global CreatorAddress)
        let tmp%2#1: bool = (== tmp%0#4 tmp%1#2)
        (assert tmp%2#1) // Only creator can opt in to ASA
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%3#3: bool = (! maybe_value%0#0)
        (assert tmp%3#3) // ASA already opted in
        (app_global_put "asa" asset#0)
        itxn_begin
        let inner_txn_params%0%%param_AssetReceiver_idx_0#1: bytes[32] = (global CurrentApplicationAddress)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#1)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        let examples.auction.contract.Auction.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.auction.contract.Auction.__puya_arc4_router__%0#0
        goto block@16
    block@6: // start_auction_route_L40
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let starting_price#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 2)
        let length#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let tmp%15#0: uint64 = (txn GroupIndex)
        let axfer#0: uint64 = (- tmp%15#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) axfer#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 axfer)
        (assert gtxn_type_matches%0#0) // transaction type is axfer
        let tmp%0#4: bytes[32] = (txn Sender)
        let tmp%1#2: bytes[32] = (global CreatorAddress)
        let tmp%2#1: bool = (== tmp%0#4 tmp%1#2)
        (assert tmp%2#1) // auction must be started by creator
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "auction_end")
        (assert maybe_exists%0#0) // check self.auction_end exists
        let tmp%3#3: bool = (! maybe_value%0#0)
        (assert tmp%3#3) // auction already started
        let tmp%4#2: bytes[32] = ((gtxns AssetReceiver) axfer#0)
        let tmp%5#2: bytes[32] = (global CurrentApplicationAddress)
        let tmp%6#1: bool = (== tmp%4#2 tmp%5#2)
        (assert tmp%6#1) // axfer must transfer to this app
        let materialized_values%0#1: uint64 = ((gtxns AssetAmount) axfer#0)
        (app_global_put "asa_amount" materialized_values%0#1)
        let tmp%7#0: uint64 = (global LatestTimestamp)
        let materialized_values%1#1: uint64 = (+ tmp%7#0 length#0)
        (app_global_put "auction_end" materialized_values%1#1)
        (app_global_put "previous_bid" starting_price#0)
        let examples.auction.contract.Auction.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.auction.contract.Auction.__puya_arc4_router__%0#0
        goto block@16
    block@7: // opt_in_route_L62
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        (assert tmp%18#0) // can only call when not creating
        let examples.auction.contract.Auction.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.auction.contract.Auction.__puya_arc4_router__%0#0
        goto block@16
    block@8: // bid_route_L66
        let tmp%20#0: uint64 = (txn OnCompletion)
        let tmp%21#0: bool = (! tmp%20#0)
        (assert tmp%21#0) // OnCompletion is not NoOp
        let tmp%22#0: uint64 = (txn ApplicationID)
        (assert tmp%22#0) // can only call when not creating
        let tmp%24#0: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%24#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
        (assert gtxn_type_matches%1#0) // transaction type is pay
        let tmp%0#2: uint64 = (global LatestTimestamp)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "auction_end")
        (assert maybe_exists%0#0) // check self.auction_end exists
        let tmp%1#1: bool = (< tmp%0#2 maybe_value%0#0)
        (assert tmp%1#1) // auction has ended
        let tmp%2#2: bytes[32] = ((gtxns Sender) pay#0)
        let tmp%3#1: bytes[32] = (txn Sender)
        let tmp%4#0: bool = (== tmp%2#2 tmp%3#1)
        (assert tmp%4#0) // payment sender must match transaction sender
        let tmp%5#0: uint64 = ((gtxns Amount) pay#0)
        let (maybe_value%1#2: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "previous_bid")
        (assert maybe_exists%1#0) // check self.previous_bid exists
        let tmp%6#1: bool = (> tmp%5#0 maybe_value%1#2)
        (assert tmp%6#1) // Bid must be higher than previous bid
        (app_global_put "previous_bid" tmp%5#0)
        (app_global_put "previous_bidder" tmp%2#2)
        let tmp%7#1: bytes[32] = (txn Sender)
        (app_local_put tmp%7#1 "claim" tmp%5#0)
        let examples.auction.contract.Auction.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.auction.contract.Auction.__puya_arc4_router__%0#0
        goto block@16
    block@9: // claim_bids_route_L82
        let tmp%25#0: uint64 = (txn OnCompletion)
        let tmp%26#0: bool = (! tmp%25#0)
        (assert tmp%26#0) // OnCompletion is not NoOp
        let tmp%27#0: uint64 = (txn ApplicationID)
        (assert tmp%27#0) // can only call when not creating
        let tmp%0#4: bytes[32] = (txn Sender)
        let (original_amount#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#4 0u "claim")
        (assert maybe_exists%0#0) // check self.claimable_amount exists for account
        let tmp%1#2: bytes[32] = (txn Sender)
        let (maybe_value%1#0: bytes[32], maybe_exists%1#0: bool) = (app_global_get_ex 0u "previous_bidder")
        (assert maybe_exists%1#0) // check self.previous_bidder exists
        let tmp%2#1: bool = (== tmp%1#2 maybe_value%1#0)
        let amount#1: uint64 = original_amount#0
        goto tmp%2#1 ? block@10 : block@11
    block@10: // if_body_L88
        let (maybe_value%2#1: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "previous_bid")
        (assert maybe_exists%2#0) // check self.previous_bid exists
        let amount#1: uint64 = (- original_amount#0 maybe_value%2#1)
        goto block@11
    block@11: // after_if_else_L87
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: bytes[32] = (txn Sender)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field Amount) amount#1)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%3#1: bytes[32] = (txn Sender)
        let materialized_values%0#1: uint64 = (- original_amount#0 amount#1)
        (app_local_put tmp%3#1 "claim" materialized_values%0#1)
        let examples.auction.contract.Auction.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.auction.contract.Auction.__puya_arc4_router__%0#0
        goto block@16
    block@12: // claim_asset_route_L97
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        let reinterpret_bytes[1]%1#0: bytes[1] = (txna ApplicationArgs 1)
        let tmp%33#0: uint64 = (btoi reinterpret_bytes[1]%1#0)
        let asset#0: uint64 = ((txnas Assets) tmp%33#0)
        let tmp%0#2: uint64 = (global LatestTimestamp)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "auction_end")
        (assert maybe_exists%0#0) // check self.auction_end exists
        let tmp%1#1: bool = (> tmp%0#2 maybe_value%0#0)
        (assert tmp%1#1) // auction has not ended
        itxn_begin
        let (maybe_value%1#0: bytes[32], maybe_exists%1#0: bool) = (app_global_get_ex 0u "previous_bidder")
        (assert maybe_exists%1#0) // check self.previous_bidder exists
        let (maybe_value%2#0: bytes[32], maybe_exists%2#0: bool) = (app_global_get_ex 0u "previous_bidder")
        (assert maybe_exists%2#0) // check self.previous_bidder exists
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "asa_amount")
        (assert maybe_exists%3#0) // check self.asa_amount exists
        ((itxn_field AssetAmount) maybe_value%3#0)
        ((itxn_field AssetReceiver) maybe_value%2#0)
        ((itxn_field AssetCloseTo) maybe_value%1#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        let examples.auction.contract.Auction.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.auction.contract.Auction.__puya_arc4_router__%0#0
        goto block@16
    block@13: // bare_routing_L16
        let tmp%35#0: uint64 = (txn OnCompletion)
        goto tmp%35#0 ? block@15 : block@14
    block@14: // __algopy_default_create_L1
        let tmp%36#0: uint64 = (txn ApplicationID)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // can only call when creating
        let examples.auction.contract.Auction.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.auction.contract.Auction.__puya_arc4_router__%0#0
        goto block@16
    block@15: // after_if_else_L16
        let examples.auction.contract.Auction.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = examples.auction.contract.Auction.__puya_arc4_router__%0#0
        goto block@16
    block@16: // after_inlined_examples.auction.contract.Auction.__puya_arc4_router___L1
        return tmp%0#0