main examples.auction.contract.Auction.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "auction_end" 0u)
        (app_global_put "previous_bid" 0u)
        (app_global_put "asa_amount" 0u)
        (app_global_put "asa" 0u)
        let tmp%0#2: account = (global ZeroAddress)
        (app_global_put "previous_bidder" tmp%0#2)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@4, block@12, block@13, block@13, block@13, block@13, block@13, block@13, block@13, block@13, block@13, block@13][tmp%4#0] else goto block@13
    block@4: // switch_case_0_L16
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "opt_into_asset(uint64)void" => block@5, method "start_auction(uint64,uint64,axfer)void" => block@6, method "opt_in()void" => block@7, method "bid(pay)void" => block@8, method "claim_bids()void" => block@9, method "claim_asset(uint64)void" => block@10, * => block@11}
    block@5: // opt_into_asset_route_L25
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%0#2: account = (txn Sender)
        let tmp%1#3: account = (global CreatorAddress)
        let tmp%2#2: bool = (== tmp%0#2 tmp%1#3)
        (assert tmp%2#2) // Only creator can opt in to ASA
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asa")
        (assert maybe_exists%0#0) // check self.asa exists
        let tmp%3#2: bool = (! maybe_value%0#0)
        (assert tmp%3#2) // ASA already opted in
        (app_global_put "asa" asset#0)
        itxn_begin
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = (global CurrentApplicationAddress)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u
    block@6: // start_auction_route_L40
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let starting_price#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let length#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let tmp%2#0: uint64 = (txn GroupIndex)
        let axfer#0: uint64 = (- tmp%2#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) axfer#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 axfer)
        (assert gtxn_type_matches%0#0) // transaction type is axfer
        let tmp%0#2: account = (txn Sender)
        let tmp%1#3: account = (global CreatorAddress)
        let tmp%2#2: bool = (== tmp%0#2 tmp%1#3)
        (assert tmp%2#2) // auction must be started by creator
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "auction_end")
        (assert maybe_exists%0#0) // check self.auction_end exists
        let tmp%3#2: bool = (! maybe_value%0#0)
        (assert tmp%3#2) // auction already started
        let tmp%4#3: account = ((gtxns AssetReceiver) axfer#0)
        let tmp%5#1: account = (global CurrentApplicationAddress)
        let tmp%6#1: bool = (== tmp%4#3 tmp%5#1)
        (assert tmp%6#1) // axfer must transfer to this app
        let tmp%7#1: uint64 = ((gtxns AssetAmount) axfer#0)
        (app_global_put "asa_amount" tmp%7#1)
        let tmp%8#0: uint64 = (global LatestTimestamp)
        let tmp%9#0: uint64 = (+ tmp%8#0 length#0)
        (app_global_put "auction_end" tmp%9#0)
        (app_global_put "previous_bid" starting_price#0)
        exit 1u
    block@7: // opt_in_route_L62
        exit 1u
    block@8: // bid_route_L66
        let tmp%0#5: uint64 = (txn GroupIndex)
        let pay#0: uint64 = (- tmp%0#5 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pay#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%0#5: uint64 = (global LatestTimestamp)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "auction_end")
        (assert maybe_exists%0#0) // check self.auction_end exists
        let tmp%1#0: bool = (< tmp%0#5 maybe_value%0#0)
        (assert tmp%1#0) // auction has ended
        let tmp%2#3: account = ((gtxns Sender) pay#0)
        let tmp%3#1: account = (txn Sender)
        let tmp%4#2: bool = (== tmp%2#3 tmp%3#1)
        (assert tmp%4#2) // payment sender must match transaction sender
        let tmp%5#2: uint64 = ((gtxns Amount) pay#0)
        let (maybe_value%1#2: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "previous_bid")
        (assert maybe_exists%1#0) // check self.previous_bid exists
        let tmp%6#1: bool = (> tmp%5#2 maybe_value%1#2)
        (assert tmp%6#1) // Bid must be higher than previous bid
        (app_global_put "previous_bid" tmp%5#2)
        (app_global_put "previous_bidder" tmp%2#3)
        let tmp%10#0: account = (txn Sender)
        (app_local_put tmp%10#0 "claim" tmp%5#2)
        exit 1u
    block@9: // claim_bids_route_L82
        let tmp%0#2: account = (txn Sender)
        let (original_amount#0: uint64, maybe_exists%0#0: bool) = (app_local_get_ex tmp%0#2 0u "claim")
        (assert maybe_exists%0#0) // check self.claimable_amount exists for account
        let tmp%1#3: account = (txn Sender)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "previous_bidder")
        (assert maybe_exists%1#0) // check self.previous_bidder exists
        let tmp%2#2: bool = (== tmp%1#3 maybe_value%1#0)
        let amount#1: uint64 = original_amount#0
        goto tmp%2#2 ? block@17 : block@18
    block@17: // if_body_L88
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "previous_bid")
        (assert maybe_exists%2#0) // check self.previous_bid exists
        let amount#1: uint64 = (- original_amount#0 maybe_value%2#0)
        goto block@18
    block@18: // after_if_else_L87
        itxn_begin
        let inner_txn_params%0%%param_Receiver_idx_0#0: account = (txn Sender)
        ((itxn_field Receiver) inner_txn_params%0%%param_Receiver_idx_0#0)
        ((itxn_field Amount) amount#1)
        ((itxn_field TypeEnum) pay)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%4#0: uint64 = (- original_amount#0 amount#1)
        let tmp%5#1: account = (txn Sender)
        (app_local_put tmp%5#1 "claim" tmp%4#0)
        exit 1u
    block@10: // claim_asset_route_L97
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let asset#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let tmp%0#5: uint64 = (global LatestTimestamp)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "auction_end")
        (assert maybe_exists%0#0) // check self.auction_end exists
        let tmp%1#0: bool = (> tmp%0#5 maybe_value%0#0)
        (assert tmp%1#0) // auction has not ended
        itxn_begin
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "previous_bidder")
        (assert maybe_exists%1#0) // check self.previous_bidder exists
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "asa_amount")
        (assert maybe_exists%3#0) // check self.asa_amount exists
        ((itxn_field AssetAmount) maybe_value%3#0)
        ((itxn_field AssetReceiver) maybe_value%1#0)
        ((itxn_field AssetCloseTo) maybe_value%1#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        exit 1u
    block@11: // switch_case_next_L16
        fail // this contract does not implement the given ABI method for call NoOp
    block@12: // switch_case_1_L16
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@13: // switch_case_default_L16
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?