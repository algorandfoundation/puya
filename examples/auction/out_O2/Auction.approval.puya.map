{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBQ;AAAmB;AAAnB;AACA;AAAoB;AAApB;AACA;AAAkB;AAAlB;AACA;;AAAW;AAAX;AACA;AAAuB;;AAAvB;AANR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AAiFK;;AAAA;AAAA;AAAA;;AAAA;AAjFL;;;AAAA;AAAA;;AAmFe;;AAA0B;AAAA;AAAA;AAAA;AAA1B;AAAP;AAEA;AAEmB;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACF;AAAA;AAAA;AAAA;;;;;;;;;AAJjB;;;AAAA;;;AAAA;AAJH;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAEoD;;AAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGxB;;AAAc;AAAA;AAAA;AAAA;AAAd;;;;AAAX;;;AACsB;AAAA;AAAA;AAAA;AAAV;;AAAA;AAAA;AAAA;;AAEJ;AAEa;;;;;;;;;AAFb;;;AAAA;;;AAAA;AAKsB;;AAAc;;AAAA;;AAAA;AAApC;;AAAA;AAAA;AAbH;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAlDL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqDe;;AAA0B;AAAA;AAAA;AAAA;AAA1B;AAAP;AAGO;AAAA;;AAAA;AAAc;;AAAd;AAAP;AACO;AAAA;;AAAa;AAAA;AAAA;AAAA;AAAb;;AAAA;AAAP;AAGA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAGsB;;AAAtB;;AAAA;;AAAA;AAdH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAxBL;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+Be;;AAAc;;AAAd;AAAP;AAGO;AAAA;AAAA;AAAA;AAAA;AAAP;AAII;AAAA;;AAAwB;;AAAxB;AADJ;AAKkB;;AAAlB;AAAA;AAAA;AACmB;;AAAA;AAAnB;AAAA;AAAA;AACA;AAAA;AAAA;AApBH;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AATL;;;AAAA;AAAA;;AAYe;;AAAc;;AAAd;AAAP;AAEO;AAAA;;AAAA;AAAA;AAAA;AAAP;AAEA;;AAAA;;AAAA;AAGA;AACmB;;;;;;AADnB;;;AAAA;;;AAAA;AAVH;;AATL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.auction.contract.Auction.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4"
    },
    "6": {
      "op": "bytecblock \"auction_end\" \"previous_bid\" \"previous_bidder\" \"asa_amount\" \"asa\" \"claim\""
    },
    "70": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "amount#1"
      ]
    },
    "72": {
      "op": "dup",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "73": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%0#0"
      ]
    },
    "75": {
      "op": "bnz main_after_if_else@2",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "78": {
      "op": "bytec_0 // \"auction_end\""
    },
    "79": {
      "op": "intc_0 // 0"
    },
    "80": {
      "op": "app_global_put"
    },
    "81": {
      "op": "bytec_1 // \"previous_bid\""
    },
    "82": {
      "op": "intc_0 // 0"
    },
    "83": {
      "op": "app_global_put"
    },
    "84": {
      "op": "bytec_3 // \"asa_amount\""
    },
    "85": {
      "op": "intc_0 // 0"
    },
    "86": {
      "op": "app_global_put"
    },
    "87": {
      "op": "bytec 4 // \"asa\""
    },
    "89": {
      "op": "intc_0 // 0"
    },
    "90": {
      "op": "app_global_put"
    },
    "91": {
      "op": "bytec_2 // \"previous_bidder\""
    },
    "92": {
      "op": "global ZeroAddress"
    },
    "94": {
      "op": "app_global_put"
    },
    "95": {
      "block": "main_after_if_else@2",
      "stack_in": [
        "amount#1",
        "original_amount#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%0#2"
      ]
    },
    "97": {
      "op": "bz main_bare_routing@13",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "100": {
      "op": "pushbytess 0x2826b202 0xf0aa7023 0x30c6d58a 0xdb7fe843 0xe654625b 0x1ec12bef // method \"opt_into_asset(asset)void\", method \"start_auction(uint64,uint64,axfer)void\", method \"opt_in()void\", method \"bid(pay)void\", method \"claim_bids()void\", method \"claim_asset(asset)void\""
    },
    "132": {
      "op": "txna ApplicationArgs 0"
    },
    "135": {
      "op": "match main_opt_into_asset_route@5 main_start_auction_route@6 main_opt_in_route@7 main_bid_route@8 main_claim_bids_route@9 main_claim_asset_route@12"
    },
    "149": {
      "block": "main_after_if_else@15",
      "stack_in": [
        "amount#1",
        "original_amount#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%0#0"
      ]
    },
    "150": {
      "op": "return"
    },
    "151": {
      "block": "main_claim_asset_route@12",
      "stack_in": [
        "amount#1",
        "original_amount#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%32#0"
      ]
    },
    "153": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%33#0"
      ]
    },
    "154": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "155": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%34#0"
      ]
    },
    "157": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "158": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%36#0"
      ]
    },
    "161": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%37#0"
      ]
    },
    "162": {
      "op": "txnas Assets",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0"
      ]
    },
    "164": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "asset#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "tmp%0#2"
      ]
    },
    "166": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "tmp%0#2",
        "0"
      ]
    },
    "167": {
      "op": "bytec_0 // \"auction_end\"",
      "defined_out": [
        "\"auction_end\"",
        "0",
        "asset#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "tmp%0#2",
        "0",
        "\"auction_end\""
      ]
    },
    "168": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "tmp%0#2",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "169": {
      "error": "check self.auction_end exists",
      "op": "assert // check self.auction_end exists",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "tmp%0#2",
        "maybe_value%0#0"
      ]
    },
    "170": {
      "op": ">",
      "defined_out": [
        "asset#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "tmp%1#1"
      ]
    },
    "171": {
      "error": "auction has not ended",
      "op": "assert // auction has not ended",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0"
      ]
    },
    "172": {
      "op": "itxn_begin"
    },
    "173": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "0"
      ]
    },
    "174": {
      "op": "bytec_2 // \"previous_bidder\"",
      "defined_out": [
        "\"previous_bidder\"",
        "0",
        "asset#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "0",
        "\"previous_bidder\""
      ]
    },
    "175": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "176": {
      "error": "check self.previous_bidder exists",
      "op": "assert // check self.previous_bidder exists",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%1#0"
      ]
    },
    "177": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "178": {
      "op": "bytec_2 // \"previous_bidder\"",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%1#0",
        "0",
        "\"previous_bidder\""
      ]
    },
    "179": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "180": {
      "error": "check self.previous_bidder exists",
      "op": "assert // check self.previous_bidder exists",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "181": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "182": {
      "op": "bytec_3 // \"asa_amount\"",
      "defined_out": [
        "\"asa_amount\"",
        "0",
        "asset#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"asa_amount\""
      ]
    },
    "183": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "184": {
      "error": "check self.asa_amount exists",
      "op": "assert // check self.asa_amount exists",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "185": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "187": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%1#0"
      ]
    },
    "189": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0"
      ]
    },
    "191": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "193": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "axfer"
      ]
    },
    "194": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "196": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "0"
      ]
    },
    "197": {
      "op": "itxn_field Fee",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "199": {
      "op": "itxn_submit"
    },
    "200": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%0#0"
      ]
    },
    "201": {
      "op": "return"
    },
    "202": {
      "block": "main_claim_bids_route@9",
      "stack_in": [
        "amount#1",
        "original_amount#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%28#0"
      ]
    },
    "204": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%29#0"
      ]
    },
    "205": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "206": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%30#0"
      ]
    },
    "208": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "209": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#4"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%0#4"
      ]
    },
    "211": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#4"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%0#4",
        "0"
      ]
    },
    "212": {
      "op": "bytec 5 // \"claim\"",
      "defined_out": [
        "\"claim\"",
        "0",
        "tmp%0#4"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%0#4",
        "0",
        "\"claim\""
      ]
    },
    "214": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "original_amount#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "original_amount#0",
        "maybe_exists%0#0"
      ]
    },
    "215": {
      "op": "swap",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "maybe_exists%0#0",
        "original_amount#0"
      ]
    },
    "216": {
      "op": "dup",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "maybe_exists%0#0",
        "original_amount#0",
        "original_amount#0 (copy)"
      ]
    },
    "217": {
      "op": "cover 2",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "original_amount#0",
        "maybe_exists%0#0",
        "original_amount#0"
      ]
    },
    "219": {
      "op": "bury 3",
      "defined_out": [
        "maybe_exists%0#0",
        "original_amount#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "original_amount#0",
        "maybe_exists%0#0"
      ]
    },
    "221": {
      "error": "check self.claimable_amount exists for account",
      "op": "assert // check self.claimable_amount exists for account",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "original_amount#0"
      ]
    },
    "222": {
      "op": "txn Sender",
      "defined_out": [
        "original_amount#0",
        "tmp%1#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "original_amount#0",
        "tmp%1#2"
      ]
    },
    "224": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "original_amount#0",
        "tmp%1#2",
        "0"
      ]
    },
    "225": {
      "op": "bytec_2 // \"previous_bidder\"",
      "defined_out": [
        "\"previous_bidder\"",
        "0",
        "original_amount#0",
        "tmp%1#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "original_amount#0",
        "tmp%1#2",
        "0",
        "\"previous_bidder\""
      ]
    },
    "226": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "original_amount#0",
        "tmp%1#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "original_amount#0",
        "tmp%1#2",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "227": {
      "error": "check self.previous_bidder exists",
      "op": "assert // check self.previous_bidder exists",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "original_amount#0",
        "tmp%1#2",
        "maybe_value%1#0"
      ]
    },
    "228": {
      "op": "==",
      "defined_out": [
        "original_amount#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "original_amount#0",
        "tmp%2#1"
      ]
    },
    "229": {
      "op": "swap",
      "defined_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#1",
        "amount#1"
      ]
    },
    "230": {
      "op": "bury 3",
      "defined_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#1"
      ]
    },
    "232": {
      "op": "bz main_after_if_else@11",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "235": {
      "op": "intc_0 // 0"
    },
    "236": {
      "op": "bytec_1 // \"previous_bid\""
    },
    "237": {
      "op": "app_global_get_ex"
    },
    "238": {
      "error": "check self.previous_bid exists",
      "op": "assert // check self.previous_bid exists"
    },
    "239": {
      "op": "dig 1"
    },
    "241": {
      "op": "swap"
    },
    "242": {
      "op": "-"
    },
    "243": {
      "op": "bury 2"
    },
    "245": {
      "block": "main_after_if_else@11",
      "stack_in": [
        "amount#1",
        "original_amount#0"
      ],
      "op": "itxn_begin"
    },
    "246": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "248": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "250": {
      "op": "dig 1",
      "defined_out": [
        "amount#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "amount#1"
      ]
    },
    "252": {
      "op": "dup",
      "defined_out": [
        "amount#1",
        "amount#1 (copy)"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "amount#1",
        "amount#1 (copy)"
      ]
    },
    "253": {
      "op": "itxn_field Amount",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "amount#1"
      ]
    },
    "255": {
      "op": "intc_1 // pay",
      "defined_out": [
        "amount#1",
        "pay"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "amount#1",
        "pay"
      ]
    },
    "256": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "amount#1"
      ]
    },
    "258": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "amount#1",
        "0"
      ]
    },
    "259": {
      "op": "itxn_field Fee",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "amount#1"
      ]
    },
    "261": {
      "op": "itxn_submit"
    },
    "262": {
      "op": "txn Sender",
      "defined_out": [
        "amount#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "amount#1",
        "tmp%3#1"
      ]
    },
    "264": {
      "op": "dig 2",
      "defined_out": [
        "amount#1",
        "original_amount#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "amount#1",
        "tmp%3#1",
        "original_amount#0"
      ]
    },
    "266": {
      "op": "uncover 2",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%3#1",
        "original_amount#0",
        "amount#1"
      ]
    },
    "268": {
      "op": "-",
      "defined_out": [
        "amount#1",
        "new_state_value%0#1",
        "original_amount#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%3#1",
        "new_state_value%0#1"
      ]
    },
    "269": {
      "op": "bytec 5 // \"claim\""
    },
    "271": {
      "op": "swap",
      "defined_out": [
        "\"claim\"",
        "amount#1",
        "new_state_value%0#1",
        "original_amount#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%3#1",
        "\"claim\"",
        "new_state_value%0#1"
      ]
    },
    "272": {
      "op": "app_local_put",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "273": {
      "op": "intc_1 // 1",
      "defined_out": [
        "amount#1",
        "original_amount#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "return"
    },
    "275": {
      "block": "main_bid_route@8",
      "stack_in": [
        "amount#1",
        "original_amount#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%23#0"
      ]
    },
    "277": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%24#0"
      ]
    },
    "278": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "279": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%25#0"
      ]
    },
    "281": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "282": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%27#0"
      ]
    },
    "284": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%27#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%27#0",
        "1"
      ]
    },
    "285": {
      "op": "-",
      "defined_out": [
        "pay#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0"
      ]
    },
    "286": {
      "op": "dup",
      "defined_out": [
        "pay#0",
        "pay#0 (copy)"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "pay#0 (copy)"
      ]
    },
    "287": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%1#0",
        "pay#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "gtxn_type%1#0"
      ]
    },
    "289": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_type%1#0",
        "pay",
        "pay#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "290": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%1#0",
        "pay#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "291": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0"
      ]
    },
    "292": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "pay#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "tmp%0#2"
      ]
    },
    "294": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "pay#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "tmp%0#2",
        "0"
      ]
    },
    "295": {
      "op": "bytec_0 // \"auction_end\"",
      "defined_out": [
        "\"auction_end\"",
        "0",
        "pay#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "tmp%0#2",
        "0",
        "\"auction_end\""
      ]
    },
    "296": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "pay#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "tmp%0#2",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "297": {
      "error": "check self.auction_end exists",
      "op": "assert // check self.auction_end exists",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "tmp%0#2",
        "maybe_value%0#0"
      ]
    },
    "298": {
      "op": "<",
      "defined_out": [
        "pay#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "tmp%1#1"
      ]
    },
    "299": {
      "error": "auction has ended",
      "op": "assert // auction has ended",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0"
      ]
    },
    "300": {
      "op": "dup",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "pay#0 (copy)"
      ]
    },
    "301": {
      "op": "gtxns Sender",
      "defined_out": [
        "pay#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "tmp%2#0"
      ]
    },
    "303": {
      "op": "dup"
    },
    "304": {
      "op": "txn Sender",
      "defined_out": [
        "pay#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%3#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "tmp%3#1"
      ]
    },
    "306": {
      "op": "==",
      "defined_out": [
        "pay#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "307": {
      "error": "payment sender must match transaction sender",
      "op": "assert // payment sender must match transaction sender",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "pay#0",
        "tmp%2#0"
      ]
    },
    "308": {
      "op": "swap",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#0",
        "pay#0"
      ]
    },
    "309": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#0",
        "tmp%5#0"
      ]
    },
    "311": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#0",
        "tmp%5#0",
        "0"
      ]
    },
    "312": {
      "op": "bytec_1 // \"previous_bid\"",
      "defined_out": [
        "\"previous_bid\"",
        "0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#0",
        "tmp%5#0",
        "0",
        "\"previous_bid\""
      ]
    },
    "313": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#2",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#0",
        "tmp%5#0",
        "maybe_value%1#2",
        "maybe_exists%1#0"
      ]
    },
    "314": {
      "error": "check self.previous_bid exists",
      "op": "assert // check self.previous_bid exists",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#0",
        "tmp%5#0",
        "maybe_value%1#2"
      ]
    },
    "315": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%1#2",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#0",
        "tmp%5#0",
        "maybe_value%1#2",
        "tmp%5#0 (copy)"
      ]
    },
    "317": {
      "op": "<",
      "defined_out": [
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%6#1"
      ]
    },
    "318": {
      "error": "Bid must be higher than previous bid",
      "op": "assert // Bid must be higher than previous bid",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#0",
        "tmp%5#0"
      ]
    },
    "319": {
      "op": "bytec_1 // \"previous_bid\"",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#0",
        "tmp%5#0",
        "\"previous_bid\""
      ]
    },
    "320": {
      "op": "dig 1",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#0",
        "tmp%5#0",
        "\"previous_bid\"",
        "tmp%5#0 (copy)"
      ]
    },
    "322": {
      "op": "app_global_put",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#0",
        "tmp%5#0"
      ]
    },
    "323": {
      "op": "bytec_2 // \"previous_bidder\"",
      "defined_out": [
        "\"previous_bidder\"",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%2#0",
        "tmp%5#0",
        "\"previous_bidder\""
      ]
    },
    "324": {
      "op": "uncover 2",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%5#0",
        "\"previous_bidder\"",
        "tmp%2#0"
      ]
    },
    "326": {
      "op": "app_global_put",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%5#0"
      ]
    },
    "327": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "329": {
      "op": "bytec 5 // \"claim\"",
      "defined_out": [
        "\"claim\"",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%5#0",
        "tmp%7#0",
        "\"claim\""
      ]
    },
    "331": {
      "op": "uncover 2",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%7#0",
        "\"claim\"",
        "tmp%5#0"
      ]
    },
    "333": {
      "op": "app_local_put",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "334": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%0#0"
      ]
    },
    "335": {
      "op": "return"
    },
    "336": {
      "block": "main_opt_in_route@7",
      "stack_in": [
        "amount#1",
        "original_amount#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%19#0"
      ]
    },
    "338": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%20#0"
      ]
    },
    "339": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "340": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%21#0"
      ]
    },
    "342": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "343": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%0#0"
      ]
    },
    "344": {
      "op": "return"
    },
    "345": {
      "block": "main_start_auction_route@6",
      "stack_in": [
        "amount#1",
        "original_amount#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%10#0"
      ]
    },
    "347": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%11#0"
      ]
    },
    "348": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "349": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%12#0"
      ]
    },
    "351": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "352": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%14#0"
      ]
    },
    "355": {
      "op": "btoi",
      "defined_out": [
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0"
      ]
    },
    "356": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "starting_price#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "tmp%16#0"
      ]
    },
    "359": {
      "op": "btoi",
      "defined_out": [
        "length#0",
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0"
      ]
    },
    "360": {
      "op": "txn GroupIndex",
      "defined_out": [
        "length#0",
        "starting_price#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "tmp%18#0"
      ]
    },
    "362": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "length#0",
        "starting_price#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "tmp%18#0",
        "1"
      ]
    },
    "363": {
      "op": "-",
      "defined_out": [
        "axfer#0",
        "length#0",
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0"
      ]
    },
    "364": {
      "op": "dup",
      "defined_out": [
        "axfer#0",
        "axfer#0 (copy)",
        "length#0",
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "axfer#0 (copy)"
      ]
    },
    "365": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "axfer#0",
        "gtxn_type%0#0",
        "length#0",
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "gtxn_type%0#0"
      ]
    },
    "367": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "axfer#0",
        "gtxn_type%0#0",
        "length#0",
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "368": {
      "op": "==",
      "defined_out": [
        "axfer#0",
        "gtxn_type_matches%0#0",
        "length#0",
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "369": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0"
      ]
    },
    "370": {
      "op": "txn Sender"
    },
    "372": {
      "op": "global CreatorAddress",
      "defined_out": [
        "axfer#0",
        "length#0",
        "starting_price#0",
        "tmp%0#4",
        "tmp%1#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "tmp%0#4",
        "tmp%1#2"
      ]
    },
    "374": {
      "op": "==",
      "defined_out": [
        "axfer#0",
        "length#0",
        "starting_price#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "tmp%2#1"
      ]
    },
    "375": {
      "error": "auction must be started by creator",
      "op": "assert // auction must be started by creator",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0"
      ]
    },
    "376": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "axfer#0",
        "length#0",
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "0"
      ]
    },
    "377": {
      "op": "bytec_0 // \"auction_end\"",
      "defined_out": [
        "\"auction_end\"",
        "0",
        "axfer#0",
        "length#0",
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "0",
        "\"auction_end\""
      ]
    },
    "378": {
      "op": "app_global_get_ex",
      "defined_out": [
        "axfer#0",
        "length#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "379": {
      "error": "check self.auction_end exists",
      "op": "assert // check self.auction_end exists",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "maybe_value%0#0"
      ]
    },
    "380": {
      "op": "!",
      "defined_out": [
        "axfer#0",
        "length#0",
        "starting_price#0",
        "tmp%3#3"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "tmp%3#3"
      ]
    },
    "381": {
      "error": "auction already started",
      "op": "assert // auction already started",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0"
      ]
    },
    "382": {
      "op": "dup",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "axfer#0 (copy)"
      ]
    },
    "383": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "axfer#0",
        "length#0",
        "starting_price#0",
        "tmp%4#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "tmp%4#2"
      ]
    },
    "385": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "axfer#0",
        "length#0",
        "starting_price#0",
        "tmp%4#2",
        "tmp%5#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "tmp%4#2",
        "tmp%5#2"
      ]
    },
    "387": {
      "op": "==",
      "defined_out": [
        "axfer#0",
        "length#0",
        "starting_price#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0",
        "tmp%6#1"
      ]
    },
    "388": {
      "error": "axfer must transfer to this app",
      "op": "assert // axfer must transfer to this app",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "axfer#0"
      ]
    },
    "389": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "length#0",
        "new_state_value%0#1",
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "new_state_value%0#1"
      ]
    },
    "391": {
      "op": "bytec_3 // \"asa_amount\"",
      "defined_out": [
        "\"asa_amount\"",
        "length#0",
        "new_state_value%0#1",
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "new_state_value%0#1",
        "\"asa_amount\""
      ]
    },
    "392": {
      "op": "swap",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "\"asa_amount\"",
        "new_state_value%0#1"
      ]
    },
    "393": {
      "op": "app_global_put",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0"
      ]
    },
    "394": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "length#0",
        "starting_price#0",
        "tmp%7#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "length#0",
        "tmp%7#2"
      ]
    },
    "396": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#1",
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "new_state_value%1#1"
      ]
    },
    "397": {
      "op": "bytec_0 // \"auction_end\"",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "new_state_value%1#1",
        "\"auction_end\""
      ]
    },
    "398": {
      "op": "swap",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "\"auction_end\"",
        "new_state_value%1#1"
      ]
    },
    "399": {
      "op": "app_global_put",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0"
      ]
    },
    "400": {
      "op": "bytec_1 // \"previous_bid\"",
      "defined_out": [
        "\"previous_bid\"",
        "starting_price#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "starting_price#0",
        "\"previous_bid\""
      ]
    },
    "401": {
      "op": "swap",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "\"previous_bid\"",
        "starting_price#0"
      ]
    },
    "402": {
      "op": "app_global_put",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "403": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%0#0"
      ]
    },
    "404": {
      "op": "return"
    },
    "405": {
      "block": "main_opt_into_asset_route@5",
      "stack_in": [
        "amount#1",
        "original_amount#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%3#0"
      ]
    },
    "407": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%4#0"
      ]
    },
    "408": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "409": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%5#0"
      ]
    },
    "411": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "412": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%7#0"
      ]
    },
    "415": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%8#0"
      ]
    },
    "416": {
      "op": "txnas Assets",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0"
      ]
    },
    "418": {
      "op": "txn Sender"
    },
    "420": {
      "op": "global CreatorAddress",
      "defined_out": [
        "asset#0",
        "tmp%0#4",
        "tmp%1#2"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "tmp%0#4",
        "tmp%1#2"
      ]
    },
    "422": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "tmp%2#1"
      ]
    },
    "423": {
      "error": "Only creator can opt in to ASA",
      "op": "assert // Only creator can opt in to ASA",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0"
      ]
    },
    "424": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "0"
      ]
    },
    "425": {
      "op": "bytec 4 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0",
        "asset#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "0",
        "\"asa\""
      ]
    },
    "427": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "428": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "maybe_value%0#0"
      ]
    },
    "429": {
      "op": "!",
      "defined_out": [
        "asset#0",
        "tmp%3#3"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "tmp%3#3"
      ]
    },
    "430": {
      "error": "ASA already opted in",
      "op": "assert // ASA already opted in",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0"
      ]
    },
    "431": {
      "op": "bytec 4 // \"asa\"",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "\"asa\""
      ]
    },
    "433": {
      "op": "dig 1",
      "defined_out": [
        "\"asa\"",
        "asset#0",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "\"asa\"",
        "asset#0 (copy)"
      ]
    },
    "435": {
      "op": "app_global_put",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0"
      ]
    },
    "436": {
      "op": "itxn_begin"
    },
    "437": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#1"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#1"
      ]
    },
    "439": {
      "op": "itxn_field AssetReceiver"
    },
    "441": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "443": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "axfer"
      ]
    },
    "444": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "446": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "0"
      ]
    },
    "447": {
      "op": "itxn_field Fee",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "449": {
      "op": "itxn_submit"
    },
    "450": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%0#0"
      ]
    },
    "451": {
      "op": "return"
    },
    "452": {
      "block": "main_bare_routing@13",
      "stack_in": [
        "amount#1",
        "original_amount#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "amount#1",
        "original_amount#0",
        "tmp%39#0"
      ]
    },
    "454": {
      "op": "bnz main_after_if_else@15",
      "stack_out": [
        "amount#1",
        "original_amount#0"
      ]
    },
    "457": {
      "op": "txn ApplicationID"
    },
    "459": {
      "op": "!"
    },
    "460": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "461": {
      "op": "intc_1 // 1"
    },
    "462": {
      "op": "return"
    }
  }
}