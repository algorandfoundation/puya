#pragma version 10
#pragma typetrack false

// examples.auction.contract.Auction.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 4
    bytecblock "auction_end" "previous_bid" "previous_bidder" "asa_amount" "asa" "claim"
    pushbytes ""
    dup
    txn ApplicationID
    bnz main_after_if_else@2
    bytec_0 // "auction_end"
    intc_0 // 0
    app_global_put
    bytec_1 // "previous_bid"
    intc_0 // 0
    app_global_put
    bytec_3 // "asa_amount"
    intc_0 // 0
    app_global_put
    bytec 4 // "asa"
    intc_0 // 0
    app_global_put
    bytec_2 // "previous_bidder"
    global ZeroAddress
    app_global_put

main_after_if_else@2:
    txn NumAppArgs
    bz main_bare_routing@13
    pushbytess 0x2826b202 0xf0aa7023 0x30c6d58a 0xdb7fe843 0xe654625b 0x1ec12bef // method "opt_into_asset(asset)void", method "start_auction(uint64,uint64,axfer)void", method "opt_in()void", method "bid(pay)void", method "claim_bids()void", method "claim_asset(asset)void"
    txna ApplicationArgs 0
    match main_opt_into_asset_route@5 main_start_auction_route@6 main_opt_in_route@7 main_bid_route@8 main_claim_bids_route@9 main_claim_asset_route@12

main_after_if_else@15:
    intc_0 // 0
    return

main_claim_asset_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Assets
    global LatestTimestamp
    intc_0 // 0
    bytec_0 // "auction_end"
    app_global_get_ex
    assert // check self.auction_end exists
    >
    assert // auction has not ended
    itxn_begin
    intc_0 // 0
    bytec_2 // "previous_bidder"
    app_global_get_ex
    assert // check self.previous_bidder exists
    intc_0 // 0
    bytec_3 // "asa_amount"
    app_global_get_ex
    assert // check self.asa_amount exists
    itxn_field AssetAmount
    dup
    itxn_field AssetReceiver
    itxn_field AssetCloseTo
    itxn_field XferAsset
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    intc_1 // 1
    return

main_claim_bids_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn Sender
    intc_0 // 0
    bytec 5 // "claim"
    app_local_get_ex
    swap
    dup
    cover 2
    bury 3
    assert // check self.claimable_amount exists for account
    txn Sender
    intc_0 // 0
    bytec_2 // "previous_bidder"
    app_global_get_ex
    assert // check self.previous_bidder exists
    ==
    swap
    bury 3
    bz main_after_if_else@11
    intc_0 // 0
    bytec_1 // "previous_bid"
    app_global_get_ex
    assert // check self.previous_bid exists
    dig 1
    swap
    -
    bury 2

main_after_if_else@11:
    itxn_begin
    txn Sender
    itxn_field Receiver
    dig 1
    dup
    itxn_field Amount
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    dig 1
    swap
    -
    txn Sender
    bytec 5 // "claim"
    uncover 2
    app_local_put
    intc_1 // 1
    return

main_bid_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    global LatestTimestamp
    intc_0 // 0
    bytec_0 // "auction_end"
    app_global_get_ex
    assert // check self.auction_end exists
    <
    assert // auction has ended
    dup
    gtxns Sender
    dup
    txn Sender
    ==
    assert // payment sender must match transaction sender
    swap
    gtxns Amount
    intc_0 // 0
    bytec_1 // "previous_bid"
    app_global_get_ex
    assert // check self.previous_bid exists
    dig 1
    <
    assert // Bid must be higher than previous bid
    bytec_1 // "previous_bid"
    dig 1
    app_global_put
    bytec_2 // "previous_bidder"
    uncover 2
    app_global_put
    txn Sender
    bytec 5 // "claim"
    uncover 2
    app_local_put
    intc_1 // 1
    return

main_opt_in_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_start_auction_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txn Sender
    global CreatorAddress
    ==
    assert // auction must be started by creator
    intc_0 // 0
    bytec_0 // "auction_end"
    app_global_get_ex
    assert // check self.auction_end exists
    !
    assert // auction already started
    dup
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // axfer must transfer to this app
    gtxns AssetAmount
    bytec_3 // "asa_amount"
    swap
    app_global_put
    global LatestTimestamp
    +
    bytec_0 // "auction_end"
    swap
    app_global_put
    bytec_1 // "previous_bid"
    swap
    app_global_put
    intc_1 // 1
    return

main_opt_into_asset_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    intc_0 // 0
    bytec 4 // "asa"
    app_global_get_ex
    assert // check self.asa exists
    !
    assert // ASA already opted in
    bytec 4 // "asa"
    dig 1
    app_global_put
    itxn_begin
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    itxn_field XferAsset
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    intc_1 // 1
    return

main_bare_routing@13:
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return
