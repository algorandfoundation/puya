{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;AAAA;;;;;;;;;AAAA;AAiFK;;;;;;AAfA;;;;;;AAhBA;;;;;;AAJA;;;;;;AAtBA;;;;;;AAfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAeA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AAsBA;;;AAAA;AAAA;;;;AAIA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAgBA;;;AAAA;AAAA;;;;AAeA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AA/EG;AAAmB;AAAnB;AACA;AAAoB;AAApB;AACA;AAAkB;AAAlB;AACA;;AAAW;AAAX;AACuB;;AAAvB;AAAA;;AAAA;;AAGH;;;;;;AAGU;;AAAc;;AAAd;AAAP;AAEO;AAAA;;AAAA;AAAA;AAAe;AAAf;AAAP;AAEA;;AAAA;;AAAA;AAGA;AACmB;;AACJ;;;;;;AAFf;;;AAAA;;;;;;AAAA;;AAKH;;;;;;AAOU;;AAAc;;AAAd;AAAP;AAGO;AAAA;AAAA;AAAA;AAAoB;AAApB;AAAP;AAII;;AAAA;;AAAwB;;AAAxB;AADJ;AAKkB;;AAAA;;AAAlB;AAAA;;AAAA;AACmB;;AAAA;;AAAA;AAAnB;AAAA;;AAAA;AACA;AAAA;;AAAA;;;;;;AAMH;;;;;;AAGU;;AAA0B;AAAA;AAAA;AAAA;AAA1B;AAAP;AAGO;;AAAA;;AAAc;;AAAd;AAAP;AACO;;AAAA;;AAAa;AAAA;AAAA;AAAA;AAAb;AAAP;AAGoB;;AAAA;;AAApB;AAAA;;AAAA;AACuB;;AAAA;;AAAvB;AAAA;;AAAA;AAGoC;;AAAA;;AAAd;;AAAtB;;AAAA;;AAAA;;AAEH;;;;;;AAEoD;;AAAtB;AAAA;;AAAA;AAAA;AAA3B;;AAGG;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAX;;;AAAA;;;AACsB;AAAA;AAAA;AAAA;AAAV;;AAAA;;AAAA;;;;;;AAEJ;AACW;;AACE;;;;;;AAFb;;;AAAA;;;;;;AAAA;AAKoC;;AAAA;;AAAA;AAAd;;AAAtB;;AAAA;;AAAA;;AAEH;;;;;;AAEU;;AAA0B;AAAA;AAAA;AAAA;AAA1B;AAAP;AAEA;AACe;;AACI;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACF;AAAA;AAAA;AAAA;;;;;;;;;AAJjB;;;AAAA;;;;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 4"
    },
    "7": {
      "op": "bytecblock \"auction_end\" \"previous_bid\" \"previous_bidder\" \"asa_amount\" \"asa\" \"claim\""
    },
    "71": {
      "op": "b main_block@0"
    },
    "74": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "76": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "79": {
      "op": "b main_call___init__@1"
    },
    "82": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "examples.auction.contract.Auction.__init__",
      "op": "callsub __init__"
    },
    "85": {
      "op": "b main_after_if_else@2"
    },
    "88": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "b main_block@3"
    },
    "91": {
      "block": "main_block@3",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "93": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "94": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "95": {
      "op": "bz main___algopy_default_create@15",
      "stack_out": []
    },
    "98": {
      "op": "b main_abi_routing@4"
    },
    "101": {
      "block": "main_abi_routing@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "103": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "104": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "105": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "106": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "108": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "109": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "110": {
      "op": "bz main_create_NoOp@13",
      "stack_out": []
    },
    "113": {
      "op": "b main_call_NoOp@5"
    },
    "116": {
      "block": "main_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "119": {
      "op": "pushbytes 0xd8f62d9a // method \"opt_into_asset(uint64)void\"",
      "defined_out": [
        "Method(opt_into_asset(uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(opt_into_asset(uint64)void)"
      ]
    },
    "125": {
      "op": "pushbytes 0xf0aa7023 // method \"start_auction(uint64,uint64,axfer)void\"",
      "defined_out": [
        "Method(opt_into_asset(uint64)void)",
        "Method(start_auction(uint64,uint64,axfer)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(opt_into_asset(uint64)void)",
        "Method(start_auction(uint64,uint64,axfer)void)"
      ]
    },
    "131": {
      "op": "pushbytes 0x30c6d58a // method \"opt_in()void\"",
      "defined_out": [
        "Method(opt_in()void)",
        "Method(opt_into_asset(uint64)void)",
        "Method(start_auction(uint64,uint64,axfer)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(opt_into_asset(uint64)void)",
        "Method(start_auction(uint64,uint64,axfer)void)",
        "Method(opt_in()void)"
      ]
    },
    "137": {
      "op": "pushbytes 0xdb7fe843 // method \"bid(pay)void\"",
      "defined_out": [
        "Method(bid(pay)void)",
        "Method(opt_in()void)",
        "Method(opt_into_asset(uint64)void)",
        "Method(start_auction(uint64,uint64,axfer)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(opt_into_asset(uint64)void)",
        "Method(start_auction(uint64,uint64,axfer)void)",
        "Method(opt_in()void)",
        "Method(bid(pay)void)"
      ]
    },
    "143": {
      "op": "pushbytes 0xe654625b // method \"claim_bids()void\"",
      "defined_out": [
        "Method(bid(pay)void)",
        "Method(claim_bids()void)",
        "Method(opt_in()void)",
        "Method(opt_into_asset(uint64)void)",
        "Method(start_auction(uint64,uint64,axfer)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(opt_into_asset(uint64)void)",
        "Method(start_auction(uint64,uint64,axfer)void)",
        "Method(opt_in()void)",
        "Method(bid(pay)void)",
        "Method(claim_bids()void)"
      ]
    },
    "149": {
      "op": "pushbytes 0x59b2ab26 // method \"claim_asset(uint64)void\"",
      "defined_out": [
        "Method(bid(pay)void)",
        "Method(claim_asset(uint64)void)",
        "Method(claim_bids()void)",
        "Method(opt_in()void)",
        "Method(opt_into_asset(uint64)void)",
        "Method(start_auction(uint64,uint64,axfer)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(opt_into_asset(uint64)void)",
        "Method(start_auction(uint64,uint64,axfer)void)",
        "Method(opt_in()void)",
        "Method(bid(pay)void)",
        "Method(claim_bids()void)",
        "Method(claim_asset(uint64)void)"
      ]
    },
    "155": {
      "op": "uncover 6",
      "stack_out": [
        "Method(opt_into_asset(uint64)void)",
        "Method(start_auction(uint64,uint64,axfer)void)",
        "Method(opt_in()void)",
        "Method(bid(pay)void)",
        "Method(claim_bids()void)",
        "Method(claim_asset(uint64)void)",
        "tmp%6#0"
      ]
    },
    "157": {
      "op": "match main_opt_into_asset_route@6 main_start_auction_route@7 main_opt_in_route@8 main_bid_route@9 main_claim_bids_route@10 main_claim_asset_route@11",
      "stack_out": []
    },
    "171": {
      "op": "b main_switch_case_next@12"
    },
    "174": {
      "block": "main_switch_case_next@12",
      "stack_in": [],
      "op": "b main_after_if_else@14"
    },
    "177": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "b main_after_if_else@16"
    },
    "180": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "181": {
      "block": "main_claim_asset_route@11",
      "stack_in": [],
      "callsub": "examples.auction.contract.Auction.claim_asset[routing]",
      "op": "callsub claim_asset"
    },
    "184": {
      "op": "b main_switch_case_next@12"
    },
    "187": {
      "block": "main_claim_bids_route@10",
      "stack_in": [],
      "callsub": "examples.auction.contract.Auction.claim_bids[routing]",
      "op": "callsub claim_bids"
    },
    "190": {
      "op": "b main_switch_case_next@12"
    },
    "193": {
      "block": "main_bid_route@9",
      "stack_in": [],
      "callsub": "examples.auction.contract.Auction.bid[routing]",
      "op": "callsub bid"
    },
    "196": {
      "op": "b main_switch_case_next@12"
    },
    "199": {
      "block": "main_opt_in_route@8",
      "stack_in": [],
      "callsub": "examples.auction.contract.Auction.opt_in[routing]",
      "op": "callsub opt_in"
    },
    "202": {
      "op": "b main_switch_case_next@12"
    },
    "205": {
      "block": "main_start_auction_route@7",
      "stack_in": [],
      "callsub": "examples.auction.contract.Auction.start_auction[routing]",
      "op": "callsub start_auction"
    },
    "208": {
      "op": "b main_switch_case_next@12"
    },
    "211": {
      "block": "main_opt_into_asset_route@6",
      "stack_in": [],
      "callsub": "examples.auction.contract.Auction.opt_into_asset[routing]",
      "op": "callsub opt_into_asset"
    },
    "214": {
      "op": "b main_switch_case_next@12"
    },
    "217": {
      "block": "main_create_NoOp@13",
      "stack_in": [],
      "op": "b main_after_if_else@14"
    },
    "220": {
      "block": "main___algopy_default_create@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "222": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "223": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "224": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "226": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "227": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "228": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "229": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "230": {
      "op": "b main_block@18"
    },
    "233": {
      "block": "main_block@18",
      "stack_in": [],
      "op": "b main_after_inlined_examples.auction.contract.Auction.__algopy_default_create@19"
    },
    "236": {
      "block": "main_after_inlined_examples.auction.contract.Auction.__algopy_default_create@19",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "237": {
      "op": "return",
      "stack_out": []
    },
    "238": {
      "subroutine": "examples.auction.contract.Auction.opt_into_asset[routing]",
      "params": {},
      "block": "opt_into_asset",
      "stack_in": [],
      "op": "b opt_into_asset_block@0"
    },
    "241": {
      "block": "opt_into_asset_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "244": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "245": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "246": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "247": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "248": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "249": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "250": {
      "callsub": "examples.auction.contract.Auction.opt_into_asset",
      "op": "callsub examples.auction.contract.Auction.opt_into_asset",
      "stack_out": []
    },
    "253": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "254": {
      "op": "return",
      "stack_out": []
    },
    "255": {
      "subroutine": "examples.auction.contract.Auction.start_auction[routing]",
      "params": {},
      "block": "start_auction",
      "stack_in": [],
      "op": "b start_auction_block@0"
    },
    "258": {
      "block": "start_auction_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "261": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "262": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "263": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "264": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "265": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "266": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "267": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "270": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "271": {
      "op": "len",
      "defined_out": [
        "len%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "272": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "273": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "274": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "275": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "276": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "278": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%4#0",
        "1"
      ]
    },
    "279": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "gtxn_idx%0#0"
      ]
    },
    "280": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "281": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "283": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "284": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "285": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "gtxn_idx%0#0"
      ]
    },
    "286": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "gtxn_idx%0#0",
        "tmp%1#0"
      ]
    },
    "288": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "290": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "gtxn_idx%0#0"
      ]
    },
    "292": {
      "callsub": "examples.auction.contract.Auction.start_auction",
      "op": "callsub examples.auction.contract.Auction.start_auction",
      "stack_out": []
    },
    "295": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "296": {
      "op": "return",
      "stack_out": []
    },
    "297": {
      "subroutine": "examples.auction.contract.Auction.opt_in[routing]",
      "params": {},
      "block": "opt_in",
      "stack_in": [],
      "op": "b opt_in_block@0"
    },
    "300": {
      "block": "opt_in_block@0",
      "stack_in": [],
      "callsub": "examples.auction.contract.Auction.opt_in",
      "op": "callsub examples.auction.contract.Auction.opt_in"
    },
    "303": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "304": {
      "op": "return",
      "stack_out": []
    },
    "305": {
      "subroutine": "examples.auction.contract.Auction.bid[routing]",
      "params": {},
      "block": "bid",
      "stack_in": [],
      "op": "b bid_block@0"
    },
    "308": {
      "block": "bid_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "310": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "311": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "312": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "313": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "315": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "316": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "317": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "318": {
      "callsub": "examples.auction.contract.Auction.bid",
      "op": "callsub examples.auction.contract.Auction.bid",
      "stack_out": []
    },
    "321": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "322": {
      "op": "return",
      "stack_out": []
    },
    "323": {
      "subroutine": "examples.auction.contract.Auction.claim_bids[routing]",
      "params": {},
      "block": "claim_bids",
      "stack_in": [],
      "op": "b claim_bids_block@0"
    },
    "326": {
      "block": "claim_bids_block@0",
      "stack_in": [],
      "callsub": "examples.auction.contract.Auction.claim_bids",
      "op": "callsub examples.auction.contract.Auction.claim_bids"
    },
    "329": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "330": {
      "op": "return",
      "stack_out": []
    },
    "331": {
      "subroutine": "examples.auction.contract.Auction.claim_asset[routing]",
      "params": {},
      "block": "claim_asset",
      "stack_in": [],
      "op": "b claim_asset_block@0"
    },
    "334": {
      "block": "claim_asset_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "337": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "338": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "339": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "340": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "341": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "342": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "343": {
      "callsub": "examples.auction.contract.Auction.claim_asset",
      "op": "callsub examples.auction.contract.Auction.claim_asset",
      "stack_out": []
    },
    "346": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "347": {
      "op": "return",
      "stack_out": []
    },
    "348": {
      "subroutine": "examples.auction.contract.Auction.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "351": {
      "block": "__init___block@0",
      "stack_in": [],
      "op": "bytec_0 // \"auction_end\"",
      "defined_out": [
        "\"auction_end\""
      ],
      "stack_out": [
        "\"auction_end\""
      ]
    },
    "352": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"auction_end\"",
        "0"
      ],
      "stack_out": [
        "\"auction_end\"",
        "0"
      ]
    },
    "353": {
      "op": "app_global_put",
      "stack_out": []
    },
    "354": {
      "op": "bytec_1 // \"previous_bid\"",
      "defined_out": [
        "\"previous_bid\""
      ],
      "stack_out": [
        "\"previous_bid\""
      ]
    },
    "355": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"previous_bid\"",
        "0"
      ]
    },
    "356": {
      "op": "app_global_put",
      "stack_out": []
    },
    "357": {
      "op": "bytec_3 // \"asa_amount\"",
      "defined_out": [
        "\"asa_amount\""
      ],
      "stack_out": [
        "\"asa_amount\""
      ]
    },
    "358": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"asa_amount\"",
        "0"
      ]
    },
    "359": {
      "op": "app_global_put",
      "stack_out": []
    },
    "360": {
      "op": "bytec 4 // \"asa\"",
      "defined_out": [
        "\"asa\""
      ],
      "stack_out": [
        "\"asa\""
      ]
    },
    "362": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"asa\"",
        "0"
      ]
    },
    "363": {
      "op": "app_global_put",
      "stack_out": []
    },
    "364": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "366": {
      "op": "bytec_2 // \"previous_bidder\"",
      "defined_out": [
        "\"previous_bidder\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"previous_bidder\""
      ]
    },
    "367": {
      "op": "uncover 1",
      "stack_out": [
        "\"previous_bidder\"",
        "tmp%0#0"
      ]
    },
    "369": {
      "op": "app_global_put",
      "stack_out": []
    },
    "370": {
      "retsub": true,
      "op": "retsub"
    },
    "371": {
      "subroutine": "examples.auction.contract.Auction.opt_into_asset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "examples.auction.contract.Auction.opt_into_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "374": {
      "op": "b examples.auction.contract.Auction.opt_into_asset_block@0"
    },
    "377": {
      "block": "examples.auction.contract.Auction.opt_into_asset_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "379": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "381": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "382": {
      "error": "Only creator can opt in to ASA",
      "op": "assert // Only creator can opt in to ASA",
      "stack_out": []
    },
    "383": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "384": {
      "op": "bytec 4 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa\""
      ]
    },
    "386": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "387": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "388": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "389": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "390": {
      "error": "ASA already opted in",
      "op": "assert // ASA already opted in",
      "stack_out": []
    },
    "391": {
      "op": "bytec 4 // \"asa\"",
      "stack_out": [
        "\"asa\""
      ]
    },
    "393": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ]
    },
    "395": {
      "op": "app_global_put",
      "stack_out": []
    },
    "396": {
      "op": "itxn_begin"
    },
    "397": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "399": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "401": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "403": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "405": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "406": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "408": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "409": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "411": {
      "op": "b examples.auction.contract.Auction.opt_into_asset_next_txn@1"
    },
    "414": {
      "block": "examples.auction.contract.Auction.opt_into_asset_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "415": {
      "retsub": true,
      "op": "retsub"
    },
    "416": {
      "subroutine": "examples.auction.contract.Auction.start_auction",
      "params": {
        "starting_price#0": "uint64",
        "length#0": "uint64",
        "axfer#0": "uint64"
      },
      "block": "examples.auction.contract.Auction.start_auction",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "419": {
      "op": "b examples.auction.contract.Auction.start_auction_block@0"
    },
    "422": {
      "block": "examples.auction.contract.Auction.start_auction_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "424": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "426": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "427": {
      "error": "auction must be started by creator",
      "op": "assert // auction must be started by creator",
      "stack_out": []
    },
    "428": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "429": {
      "op": "bytec_0 // \"auction_end\"",
      "defined_out": [
        "\"auction_end\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"auction_end\""
      ]
    },
    "430": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "431": {
      "error": "check self.auction_end exists",
      "op": "assert // check self.auction_end exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "432": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "433": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "434": {
      "error": "auction already started",
      "op": "assert // auction already started",
      "stack_out": []
    },
    "435": {
      "op": "frame_dig -1",
      "defined_out": [
        "axfer#0 (copy)"
      ],
      "stack_out": [
        "axfer#0 (copy)"
      ]
    },
    "437": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "439": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "441": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "442": {
      "error": "axfer must transfer to this app",
      "op": "assert // axfer must transfer to this app",
      "stack_out": []
    },
    "443": {
      "op": "frame_dig -1",
      "stack_out": [
        "axfer#0 (copy)"
      ]
    },
    "445": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "447": {
      "op": "bytec_3 // \"asa_amount\"",
      "defined_out": [
        "\"asa_amount\"",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "\"asa_amount\""
      ]
    },
    "448": {
      "op": "uncover 1",
      "stack_out": [
        "\"asa_amount\"",
        "tmp%7#0"
      ]
    },
    "450": {
      "op": "app_global_put",
      "stack_out": []
    },
    "451": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "453": {
      "op": "frame_dig -2",
      "defined_out": [
        "length#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "length#0 (copy)"
      ]
    },
    "455": {
      "op": "+",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "456": {
      "op": "bytec_0 // \"auction_end\"",
      "stack_out": [
        "tmp%9#0",
        "\"auction_end\""
      ]
    },
    "457": {
      "op": "uncover 1",
      "stack_out": [
        "\"auction_end\"",
        "tmp%9#0"
      ]
    },
    "459": {
      "op": "app_global_put",
      "stack_out": []
    },
    "460": {
      "op": "bytec_1 // \"previous_bid\"",
      "defined_out": [
        "\"previous_bid\""
      ],
      "stack_out": [
        "\"previous_bid\""
      ]
    },
    "461": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"previous_bid\"",
        "starting_price#0 (copy)"
      ],
      "stack_out": [
        "\"previous_bid\"",
        "starting_price#0 (copy)"
      ]
    },
    "463": {
      "op": "app_global_put",
      "stack_out": []
    },
    "464": {
      "retsub": true,
      "op": "retsub"
    },
    "465": {
      "subroutine": "examples.auction.contract.Auction.opt_in",
      "params": {},
      "block": "examples.auction.contract.Auction.opt_in",
      "stack_in": [],
      "op": "b examples.auction.contract.Auction.opt_in_block@0"
    },
    "468": {
      "block": "examples.auction.contract.Auction.opt_in_block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "469": {
      "subroutine": "examples.auction.contract.Auction.bid",
      "params": {
        "pay#0": "uint64"
      },
      "block": "examples.auction.contract.Auction.bid",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "472": {
      "op": "b examples.auction.contract.Auction.bid_block@0"
    },
    "475": {
      "block": "examples.auction.contract.Auction.bid_block@0",
      "stack_in": [],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "477": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "478": {
      "op": "bytec_0 // \"auction_end\"",
      "defined_out": [
        "\"auction_end\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"auction_end\""
      ]
    },
    "479": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "480": {
      "error": "check self.auction_end exists",
      "op": "assert // check self.auction_end exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "481": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "482": {
      "error": "auction has ended",
      "op": "assert // auction has ended",
      "stack_out": []
    },
    "483": {
      "op": "frame_dig -1",
      "defined_out": [
        "pay#0 (copy)"
      ],
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "485": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "487": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "489": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "490": {
      "error": "payment sender must match transaction sender",
      "op": "assert // payment sender must match transaction sender",
      "stack_out": []
    },
    "491": {
      "op": "frame_dig -1",
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "493": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "495": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "496": {
      "op": "bytec_1 // \"previous_bid\"",
      "defined_out": [
        "\"previous_bid\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"previous_bid\""
      ]
    },
    "497": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "498": {
      "error": "check self.previous_bid exists",
      "op": "assert // check self.previous_bid exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "499": {
      "op": ">",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "500": {
      "error": "Bid must be higher than previous bid",
      "op": "assert // Bid must be higher than previous bid",
      "stack_out": []
    },
    "501": {
      "op": "frame_dig -1",
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "503": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "505": {
      "op": "bytec_1 // \"previous_bid\"",
      "stack_out": [
        "tmp%7#0",
        "\"previous_bid\""
      ]
    },
    "506": {
      "op": "uncover 1",
      "stack_out": [
        "\"previous_bid\"",
        "tmp%7#0"
      ]
    },
    "508": {
      "op": "app_global_put",
      "stack_out": []
    },
    "509": {
      "op": "frame_dig -1",
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "511": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "513": {
      "op": "bytec_2 // \"previous_bidder\"",
      "defined_out": [
        "\"previous_bidder\"",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "\"previous_bidder\""
      ]
    },
    "514": {
      "op": "uncover 1",
      "stack_out": [
        "\"previous_bidder\"",
        "tmp%8#0"
      ]
    },
    "516": {
      "op": "app_global_put",
      "stack_out": []
    },
    "517": {
      "op": "frame_dig -1",
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "519": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "521": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "523": {
      "op": "bytec 5 // \"claim\"",
      "defined_out": [
        "\"claim\"",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "\"claim\""
      ]
    },
    "525": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%10#0",
        "\"claim\"",
        "tmp%9#0"
      ]
    },
    "527": {
      "op": "app_local_put",
      "stack_out": []
    },
    "528": {
      "retsub": true,
      "op": "retsub"
    },
    "529": {
      "subroutine": "examples.auction.contract.Auction.claim_bids",
      "params": {},
      "block": "examples.auction.contract.Auction.claim_bids",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "532": {
      "op": "b examples.auction.contract.Auction.claim_bids_block@0"
    },
    "535": {
      "block": "examples.auction.contract.Auction.claim_bids_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "537": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "538": {
      "op": "bytec 5 // \"claim\"",
      "defined_out": [
        "\"claim\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"claim\""
      ]
    },
    "540": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "541": {
      "error": "check self.claimable_amount exists for account",
      "op": "assert // check self.claimable_amount exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "542": {
      "op": "dupn 2",
      "defined_out": [
        "amount#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#0"
      ]
    },
    "544": {
      "op": "txn Sender",
      "defined_out": [
        "amount#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#0",
        "tmp%1#0"
      ]
    },
    "546": {
      "op": "intc_0 // 0",
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#0",
        "tmp%1#0",
        "0"
      ]
    },
    "547": {
      "op": "bytec_2 // \"previous_bidder\"",
      "defined_out": [
        "\"previous_bidder\"",
        "0",
        "amount#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#0",
        "tmp%1#0",
        "0",
        "\"previous_bidder\""
      ]
    },
    "548": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amount#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "549": {
      "error": "check self.previous_bidder exists",
      "op": "assert // check self.previous_bidder exists",
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "550": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "tmp%2#0"
      ]
    },
    "551": {
      "op": "bz examples.auction.contract.Auction.claim_bids_after_if_else@2",
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2"
      ]
    },
    "554": {
      "op": "b examples.auction.contract.Auction.claim_bids_if_body@1"
    },
    "557": {
      "block": "examples.auction.contract.Auction.claim_bids_if_body@1",
      "stack_in": [
        "original_amount#0",
        "amount#0",
        "amount#2"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "0"
      ]
    },
    "558": {
      "op": "bytec_1 // \"previous_bid\"",
      "defined_out": [
        "\"previous_bid\"",
        "0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "0",
        "\"previous_bid\""
      ]
    },
    "559": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "560": {
      "error": "check self.previous_bid exists",
      "op": "assert // check self.previous_bid exists",
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "maybe_value%2#0"
      ]
    },
    "561": {
      "op": "frame_dig 1",
      "defined_out": [
        "amount#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "maybe_value%2#0",
        "amount#0"
      ]
    },
    "563": {
      "op": "uncover 1",
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "amount#0",
        "maybe_value%2#0"
      ]
    },
    "565": {
      "op": "-",
      "defined_out": [
        "amount#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "amount#0"
      ]
    },
    "566": {
      "op": "frame_bury 2",
      "defined_out": [
        "amount#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2"
      ]
    },
    "568": {
      "op": "b examples.auction.contract.Auction.claim_bids_after_if_else@2"
    },
    "571": {
      "block": "examples.auction.contract.Auction.claim_bids_after_if_else@2",
      "stack_in": [
        "original_amount#0",
        "amount#0",
        "amount#2"
      ],
      "op": "itxn_begin"
    },
    "572": {
      "op": "frame_dig 2",
      "defined_out": [
        "amount#2",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "574": {
      "op": "txn Sender",
      "defined_out": [
        "amount#2",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "576": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "578": {
      "op": "itxn_field Amount",
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2"
      ]
    },
    "580": {
      "op": "intc_1 // pay",
      "defined_out": [
        "amount#2",
        "pay"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "pay"
      ]
    },
    "581": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2"
      ]
    },
    "583": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amount#2"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "0"
      ]
    },
    "584": {
      "op": "itxn_field Fee",
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2"
      ]
    },
    "586": {
      "op": "b examples.auction.contract.Auction.claim_bids_next_txn@3"
    },
    "589": {
      "block": "examples.auction.contract.Auction.claim_bids_next_txn@3",
      "stack_in": [
        "original_amount#0",
        "amount#0",
        "amount#2"
      ],
      "op": "itxn_submit"
    },
    "590": {
      "op": "frame_dig 0",
      "defined_out": [
        "original_amount#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "original_amount#0"
      ]
    },
    "592": {
      "op": "frame_dig 2",
      "defined_out": [
        "amount#2",
        "original_amount#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "original_amount#0",
        "amount#2"
      ]
    },
    "594": {
      "op": "-",
      "defined_out": [
        "amount#2",
        "original_amount#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "tmp%4#0"
      ]
    },
    "595": {
      "op": "txn Sender",
      "defined_out": [
        "amount#2",
        "original_amount#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "597": {
      "op": "bytec 5 // \"claim\"",
      "defined_out": [
        "\"claim\"",
        "amount#2",
        "original_amount#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "tmp%4#0",
        "tmp%5#0",
        "\"claim\""
      ]
    },
    "599": {
      "op": "uncover 2",
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2",
        "tmp%5#0",
        "\"claim\"",
        "tmp%4#0"
      ]
    },
    "601": {
      "op": "app_local_put",
      "stack_out": [
        "original_amount#0",
        "amount#0",
        "amount#2"
      ]
    },
    "602": {
      "retsub": true,
      "op": "retsub"
    },
    "603": {
      "subroutine": "examples.auction.contract.Auction.claim_asset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "examples.auction.contract.Auction.claim_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "606": {
      "op": "b examples.auction.contract.Auction.claim_asset_block@0"
    },
    "609": {
      "block": "examples.auction.contract.Auction.claim_asset_block@0",
      "stack_in": [],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "611": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "612": {
      "op": "bytec_0 // \"auction_end\"",
      "defined_out": [
        "\"auction_end\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"auction_end\""
      ]
    },
    "613": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "614": {
      "error": "check self.auction_end exists",
      "op": "assert // check self.auction_end exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "615": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "616": {
      "error": "auction has not ended",
      "op": "assert // auction has not ended",
      "stack_out": []
    },
    "617": {
      "op": "itxn_begin"
    },
    "618": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "620": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "621": {
      "op": "bytec_2 // \"previous_bidder\"",
      "defined_out": [
        "\"previous_bidder\"",
        "0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0",
        "\"previous_bidder\""
      ]
    },
    "622": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "623": {
      "error": "check self.previous_bidder exists",
      "op": "assert // check self.previous_bidder exists",
      "defined_out": [
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0"
      ]
    },
    "624": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "0"
      ]
    },
    "625": {
      "op": "bytec_2 // \"previous_bidder\"",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "0",
        "\"previous_bidder\""
      ]
    },
    "626": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "627": {
      "error": "check self.previous_bidder exists",
      "op": "assert // check self.previous_bidder exists",
      "defined_out": [
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "628": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "629": {
      "op": "bytec_3 // \"asa_amount\"",
      "defined_out": [
        "\"asa_amount\"",
        "0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"asa_amount\""
      ]
    },
    "630": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "631": {
      "error": "check self.asa_amount exists",
      "op": "assert // check self.asa_amount exists",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "632": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "634": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0"
      ]
    },
    "636": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "638": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "640": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "641": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "643": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "644": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "646": {
      "op": "b examples.auction.contract.Auction.claim_asset_next_txn@1"
    },
    "649": {
      "block": "examples.auction.contract.Auction.claim_asset_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "650": {
      "retsub": true,
      "op": "retsub"
    }
  }
}