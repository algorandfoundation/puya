#pragma version 10
#pragma typetrack false

// examples.auction.contract.Auction.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 4
    bytecblock "auction_end" "previous_bid" "previous_bidder" "asa_amount" "asa" "claim"
    txn ApplicationID
    bnz main_after_if_else@2

main_call___init__@1:
    callsub __init__

main_after_if_else@2:
    callsub approval_program
    return


// examples.auction.contract.Auction.__init__() -> void:
__init__:
    // auction/contract.py:17
    // def __init__(self) -> None:
    proto 0 0
    // auction/contract.py:18
    // self.auction_end = UInt64(0)
    bytec_0 // "auction_end"
    intc_0 // 0
    app_global_put
    // auction/contract.py:19
    // self.previous_bid = UInt64(0)
    bytec_1 // "previous_bid"
    intc_0 // 0
    app_global_put
    // auction/contract.py:20
    // self.asa_amount = UInt64(0)
    bytec_3 // "asa_amount"
    intc_0 // 0
    app_global_put
    // auction/contract.py:21
    // self.asa = Asset()
    bytec 4 // "asa"
    intc_0 // 0
    app_global_put
    // auction/contract.py:22
    // self.previous_bidder = Account()
    global ZeroAddress
    bytec_2 // "previous_bidder"
    swap
    app_global_put
    retsub


// examples.auction.contract.Auction.opt_into_asset(asset: uint64) -> void:
opt_into_asset:
    // auction/contract.py:25-26
    // @arc4.abimethod
    // def opt_into_asset(self, asset: Asset) -> None:
    proto 1 0
    // auction/contract.py:27-28
    // # Only allow app creator to opt the app account into a ASA
    // assert Txn.sender == Global.creator_address, "Only creator can opt in to ASA"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    // auction/contract.py:29-30
    // # Verify a ASA hasn't already been opted into
    // assert self.asa.id == 0, "ASA already opted in"
    intc_0 // 0
    bytec 4 // "asa"
    app_global_get_ex
    assert // check self.asa exists
    intc_0 // 0
    ==
    assert // ASA already opted in
    // auction/contract.py:31-32
    // # Save ASA ID in global state
    // self.asa = asset
    bytec 4 // "asa"
    frame_dig -1
    app_global_put
    // auction/contract.py:34-38
    // # Submit opt-in transaction: 0 asset transfer to self
    // itxn.AssetTransfer(
    //     asset_receiver=Global.current_application_address,
    //     xfer_asset=asset,
    // ).submit()
    itxn_begin
    // auction/contract.py:36
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // auction/contract.py:37
    // xfer_asset=asset,
    frame_dig -1
    itxn_field XferAsset
    itxn_field AssetReceiver
    // auction/contract.py:34-35
    // # Submit opt-in transaction: 0 asset transfer to self
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

opt_into_asset_next_txn@1:
    // auction/contract.py:34-38
    // # Submit opt-in transaction: 0 asset transfer to self
    // itxn.AssetTransfer(
    //     asset_receiver=Global.current_application_address,
    //     xfer_asset=asset,
    // ).submit()
    itxn_submit
    retsub


// examples.auction.contract.Auction.start_auction(starting_price: uint64, length: uint64, axfer: uint64) -> void:
start_auction:
    // auction/contract.py:40-46
    // @arc4.abimethod
    // def start_auction(
    //     self,
    //     starting_price: UInt64,
    //     length: UInt64,
    //     axfer: gtxn.AssetTransferTransaction,
    // ) -> None:
    proto 3 0
    // auction/contract.py:47
    // assert Txn.sender == Global.creator_address, "auction must be started by creator"
    txn Sender
    global CreatorAddress
    ==
    assert // auction must be started by creator
    // auction/contract.py:49-50
    // # Ensure the auction hasn't already been started
    // assert self.auction_end == 0, "auction already started"
    intc_0 // 0
    bytec_0 // "auction_end"
    app_global_get_ex
    assert // check self.auction_end exists
    intc_0 // 0
    ==
    assert // auction already started
    // auction/contract.py:54
    // axfer.asset_receiver == Global.current_application_address
    frame_dig -1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    // auction/contract.py:52-55
    // # Verify axfer
    // assert (
    //     axfer.asset_receiver == Global.current_application_address
    // ), "axfer must transfer to this app"
    assert // axfer must transfer to this app
    // auction/contract.py:57-58
    // # Set global state
    // self.asa_amount = axfer.asset_amount
    frame_dig -1
    gtxns AssetAmount
    bytec_3 // "asa_amount"
    swap
    app_global_put
    // auction/contract.py:59
    // self.auction_end = Global.latest_timestamp + length
    global LatestTimestamp
    frame_dig -2
    +
    bytec_0 // "auction_end"
    swap
    app_global_put
    // auction/contract.py:60
    // self.previous_bid = starting_price
    bytec_1 // "previous_bid"
    frame_dig -3
    app_global_put
    retsub


// examples.auction.contract.Auction.opt_in() -> void:
opt_in:
    // auction/contract.py:62-63
    // @arc4.abimethod
    // def opt_in(self) -> None:
    proto 0 0
    retsub


// examples.auction.contract.Auction.bid(pay: uint64) -> void:
bid:
    // auction/contract.py:66-67
    // @arc4.abimethod
    // def bid(self, pay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // auction/contract.py:68-69
    // # Ensure auction hasn't ended
    // assert Global.latest_timestamp < self.auction_end, "auction has ended"
    global LatestTimestamp
    intc_0 // 0
    bytec_0 // "auction_end"
    app_global_get_ex
    assert // check self.auction_end exists
    <
    assert // auction has ended
    // auction/contract.py:71-72
    // # Verify payment transaction
    // assert pay.sender == Txn.sender, "payment sender must match transaction sender"
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // payment sender must match transaction sender
    // auction/contract.py:73
    // assert pay.amount > self.previous_bid, "Bid must be higher than previous bid"
    frame_dig -1
    gtxns Amount
    intc_0 // 0
    bytec_1 // "previous_bid"
    app_global_get_ex
    assert // check self.previous_bid exists
    >
    assert // Bid must be higher than previous bid
    // auction/contract.py:75-76
    // # set global state
    // self.previous_bid = pay.amount
    frame_dig -1
    gtxns Amount
    bytec_1 // "previous_bid"
    swap
    app_global_put
    // auction/contract.py:77
    // self.previous_bidder = pay.sender
    frame_dig -1
    gtxns Sender
    bytec_2 // "previous_bidder"
    swap
    app_global_put
    // auction/contract.py:79-80
    // # Update claimable amount
    // self.claimable_amount[Txn.sender] = pay.amount
    txn Sender
    frame_dig -1
    gtxns Amount
    swap
    bytec 5 // "claim"
    uncover 2
    app_local_put
    retsub


// examples.auction.contract.Auction.claim_bids() -> void:
claim_bids:
    // auction/contract.py:82-83
    // @arc4.abimethod
    // def claim_bids(self) -> None:
    proto 0 0
    // auction/contract.py:84
    // amount = original_amount = self.claimable_amount[Txn.sender]
    txn Sender
    intc_0 // 0
    bytec 5 // "claim"
    app_local_get_ex
    assert // check self.claimable_amount exists for account
    dupn 2
    // auction/contract.py:86-87
    // # subtract previous bid if sender is previous bidder
    // if Txn.sender == self.previous_bidder:
    txn Sender
    intc_0 // 0
    bytec_2 // "previous_bidder"
    app_global_get_ex
    assert // check self.previous_bidder exists
    ==
    bz claim_bids_after_if_else@2

claim_bids_if_body@1:
    // auction/contract.py:88
    // amount -= self.previous_bid
    intc_0 // 0
    bytec_1 // "previous_bid"
    app_global_get_ex
    assert // check self.previous_bid exists
    frame_dig 1
    swap
    -
    frame_bury 2

claim_bids_after_if_else@2:
    frame_dig 2
    dup
    frame_bury 1
    // auction/contract.py:90-93
    // itxn.Payment(
    //     amount=amount,
    //     receiver=Txn.sender,
    // ).submit()
    itxn_begin
    // auction/contract.py:92
    // receiver=Txn.sender,
    txn Sender
    itxn_field Receiver
    itxn_field Amount
    // auction/contract.py:90
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

claim_bids_next_txn@3:
    // auction/contract.py:90-93
    // itxn.Payment(
    //     amount=amount,
    //     receiver=Txn.sender,
    // ).submit()
    itxn_submit
    // auction/contract.py:95
    // self.claimable_amount[Txn.sender] = original_amount - amount
    txn Sender
    frame_dig 0
    frame_dig 1
    -
    swap
    bytec 5 // "claim"
    uncover 2
    app_local_put
    retsub


// examples.auction.contract.Auction.claim_asset(asset: uint64) -> void:
claim_asset:
    // auction/contract.py:97-98
    // @arc4.abimethod
    // def claim_asset(self, asset: Asset) -> None:
    proto 1 0
    // auction/contract.py:99
    // assert Global.latest_timestamp > self.auction_end, "auction has not ended"
    global LatestTimestamp
    intc_0 // 0
    bytec_0 // "auction_end"
    app_global_get_ex
    assert // check self.auction_end exists
    >
    assert // auction has not ended
    // auction/contract.py:100-106
    // # Send ASA to previous bidder
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_close_to=self.previous_bidder,
    //     asset_receiver=self.previous_bidder,
    //     asset_amount=self.asa_amount,
    // ).submit()
    itxn_begin
    // auction/contract.py:102
    // xfer_asset=asset,
    frame_dig -1
    // auction/contract.py:103
    // asset_close_to=self.previous_bidder,
    intc_0 // 0
    bytec_2 // "previous_bidder"
    app_global_get_ex
    assert // check self.previous_bidder exists
    // auction/contract.py:104
    // asset_receiver=self.previous_bidder,
    intc_0 // 0
    bytec_2 // "previous_bidder"
    app_global_get_ex
    assert // check self.previous_bidder exists
    // auction/contract.py:105
    // asset_amount=self.asa_amount,
    intc_0 // 0
    bytec_3 // "asa_amount"
    app_global_get_ex
    assert // check self.asa_amount exists
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field AssetCloseTo
    itxn_field XferAsset
    // auction/contract.py:100-101
    // # Send ASA to previous bidder
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee

claim_asset_next_txn@1:
    // auction/contract.py:100-106
    // # Send ASA to previous bidder
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_close_to=self.previous_bidder,
    //     asset_receiver=self.previous_bidder,
    //     asset_amount=self.asa_amount,
    // ).submit()
    itxn_submit
    retsub


// algopy.arc4.ARC4Contract.approval_program() -> uint64:
approval_program:
    proto 0 1

approval_program_block@1:
    // auction/contract.py:16
    // class Auction(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz approval_program_bare_routing@11

approval_program_abi_routing@2:
    // auction/contract.py:16
    // class Auction(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x2826b202 // method "opt_into_asset(asset)void"
    pushbytes 0xf0aa7023 // method "start_auction(uint64,uint64,axfer)void"
    pushbytes 0x30c6d58a // method "opt_in()void"
    pushbytes 0xdb7fe843 // method "bid(pay)void"
    pushbytes 0xe654625b // method "claim_bids()void"
    pushbytes 0x1ec12bef // method "claim_asset(asset)void"
    uncover 6
    match approval_program_opt_into_asset_route@3 approval_program_start_auction_route@4 approval_program_opt_in_route@5 approval_program_bid_route@6 approval_program_claim_bids_route@7 approval_program_claim_asset_route@8

approval_program_switch_case_default@9:

approval_program_switch_case_next@10:

approval_program_after_if_else@17:
    // auction/contract.py:16
    // class Auction(ARC4Contract):
    intc_0 // 0

approval_program_after_inlined_examples.auction.contract.Auction.__puya_arc4_router__@18:
    retsub

approval_program_claim_asset_route@8:
    // auction/contract.py:97
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // auction/contract.py:16
    // class Auction(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // auction/contract.py:97
    // @arc4.abimethod
    callsub claim_asset
    intc_1 // 1
    b approval_program_after_inlined_examples.auction.contract.Auction.__puya_arc4_router__@18

approval_program_claim_bids_route@7:
    // auction/contract.py:82
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub claim_bids
    intc_1 // 1
    b approval_program_after_inlined_examples.auction.contract.Auction.__puya_arc4_router__@18

approval_program_bid_route@6:
    // auction/contract.py:66
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // auction/contract.py:16
    // class Auction(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // auction/contract.py:66
    // @arc4.abimethod
    callsub bid
    intc_1 // 1
    b approval_program_after_inlined_examples.auction.contract.Auction.__puya_arc4_router__@18

approval_program_opt_in_route@5:
    // auction/contract.py:62
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub opt_in
    intc_1 // 1
    b approval_program_after_inlined_examples.auction.contract.Auction.__puya_arc4_router__@18

approval_program_start_auction_route@4:
    // auction/contract.py:40
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // auction/contract.py:16
    // class Auction(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // auction/contract.py:40
    // @arc4.abimethod
    uncover 2
    uncover 2
    uncover 2
    callsub start_auction
    intc_1 // 1
    b approval_program_after_inlined_examples.auction.contract.Auction.__puya_arc4_router__@18

approval_program_opt_into_asset_route@3:
    // auction/contract.py:25
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // auction/contract.py:16
    // class Auction(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // auction/contract.py:25
    // @arc4.abimethod
    callsub opt_into_asset
    intc_1 // 1
    b approval_program_after_inlined_examples.auction.contract.Auction.__puya_arc4_router__@18

approval_program_bare_routing@11:
    // auction/contract.py:16
    // class Auction(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match approval_program___algopy_default_create@12

approval_program_switch_case_default@15:

approval_program_switch_case_next@16:
    b approval_program_after_if_else@17

approval_program___algopy_default_create@12:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

approval_program_block@13:

approval_program_after_inlined_examples.auction.contract.Auction.__algopy_default_create@14:
    intc_1 // 1
    b approval_program_after_inlined_examples.auction.contract.Auction.__puya_arc4_router__@18
