>> poetry run puyapy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 --log-level=debug augmented_assignment
debug: Building AWST for __init__.py
debug: Building AWST for augmented_assignment
debug: Building AWST for embedded puyapy lib at <puya>/puyapy_lib_bytes.py
debug: Building AWST for embedded puyapy lib at <puya>/puyapy.py
debug: Building AWST for augmented_assignment/contract.py
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Sealing block@None: // on_create_L5
debug: Terminated block@1: // on_create_L5
debug: Sealing block@2: // entrypoint_L5
debug: Terminated block@2: // entrypoint_L5
debug: Sealing block@None: // if_body_L14
debug: Sealing block@None: // else_body_L14
debug: Terminated block@3: // if_body_L14
debug: Sealing block@4: // after_if_else_L14
debug: Terminated block@4: // after_if_else_L14
debug: Sealing block@None: // if_body_L17
debug: Sealing block@None: // else_body_L17
debug: Created Phi assignment: let me#1: bytes = undefined while trying to resolve 'me' in block@4: // after_if_else_L14
debug: Added me#0 to Phi node: let me#1: bytes = φ(me#0 <- block@2) in block@2: // entrypoint_L5
debug: Added me#0 to Phi node: let me#1: bytes = φ(me#0 <- block@2, me#0 <- block@3) in block@3: // if_body_L14
debug: Replacing trivial Phi node: let me#1: bytes = φ(me#0 <- block@2, me#0 <- block@3) (me#1) with me#0
debug: Deleting Phi assignment: let me#1: bytes = φ(me#0 <- block@2, me#0 <- block@3)
debug: Replaced trivial Phi node: let me#1: bytes = φ(me#0 <- block@2, me#0 <- block@3) (me#1) with me#0 in current definition for 1 blocks
debug: Terminated block@5: // if_body_L17
debug: Sealing block@6: // after_if_else_L17
debug: Terminated block@6: // after_if_else_L17
debug: Sealing block@0: // L32
debug: Terminated block@0: // L32
debug: Output IR to <git root>/examples/augmented_assignment/out/contract_Augmented.ssa.ir
info: Optimizing examples.augmented_assignment.contract.Augmented at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.augmented_assignment.contract.Augmented.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.augmented_assignment.contract.Augmented.__init__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.augmented_assignment.contract.Augmented.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 1, ending loop
debug: Output IR to <git root>/examples/augmented_assignment/out/contract_Augmented.cssa.ir
debug: Removing Phis from examples.augmented_assignment.contract.Augmented.approval_program
debug: Removing Phis from examples.augmented_assignment.contract.Augmented.__init__
debug: Removing Phis from examples.augmented_assignment.contract.Augmented.clear_state_program
debug: Output IR to <git root>/examples/augmented_assignment/out/contract_Augmented.post_ssa.ir
debug: Sequentializing parallel copies in examples.augmented_assignment.contract.Augmented.approval_program
debug: Sequentializing parallel copies in examples.augmented_assignment.contract.Augmented.__init__
debug: Sequentializing parallel copies in examples.augmented_assignment.contract.Augmented.clear_state_program
debug: Output IR to <git root>/examples/augmented_assignment/out/contract_Augmented.parallel_copies.ir
debug: Coalescing local variables in examples.augmented_assignment.contract.Augmented.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.augmented_assignment.contract.Augmented.__init__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.augmented_assignment.contract.Augmented.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/augmented_assignment/out/contract_Augmented.final.ir
debug: Inserted main_block@0.ops[1]: 'store app_id%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load app_id%0#0' with 'load app_id%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[5]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[8]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[10]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[1]: 'store me#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[5]: 'load me#0' with 'load me#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[1]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[3]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[6]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[8]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[1]: 'store n#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[3]: 'load n#0' with 'load n#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[10]: 'store app_local_get_ex_did_exist%6#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[13]: 'load app_local_get_ex_did_exist%6#0' with 'load app_local_get_ex_did_exist%6#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[27]: 'store app_local_get_ex_did_exist%9#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[30]: 'load app_local_get_ex_did_exist%9#0' with 'load app_local_get_ex_did_exist%9#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[43]: 'store app_global_get_ex_did_exist%12#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[46]: 'load app_global_get_ex_did_exist%12#0' with 'load app_global_get_ex_did_exist%12#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[51]: 'store new_state_value%13#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[54]: 'load new_state_value%13#0' with 'load new_state_value%13#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[59]: 'store app_global_get_ex_did_exist%15#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[62]: 'load app_global_get_ex_did_exist%15#0' with 'load app_global_get_ex_did_exist%15#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[67]: 'store new_state_value%16#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[70]: 'load new_state_value%16#0' with 'load new_state_value%16#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[12]: 'store app_local_get_ex_value%5#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[16]: 'load app_local_get_ex_value%5#0' with 'load app_local_get_ex_value%5#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[19]: 'store new_state_value%7#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[23]: 'load new_state_value%7#0' with 'load new_state_value%7#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[31]: 'store app_local_get_ex_value%8#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[35]: 'load app_local_get_ex_value%8#0' with 'load app_local_get_ex_value%8#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[38]: 'store new_state_value%10#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[42]: 'load new_state_value%10#0' with 'load new_state_value%10#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[49]: 'store app_global_get_ex_value%11#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[53]: 'load app_global_get_ex_value%11#0' with 'load app_global_get_ex_value%11#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[66]: 'store app_global_get_ex_value%14#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[70]: 'load app_global_get_ex_value%14#0' with 'load app_global_get_ex_value%14#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[22]: 'store me#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[26]: 'load me#0' with 'load me#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[4]: 'store n#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[18]: 'load n#0' with 'load n#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[8]: 'store me#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[23]: 'load me#0' with 'load me#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[29]: 'store me#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[44]: 'load me#0' with 'load me#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[6]: 'store bytes_to_add#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[41]: 'load bytes_to_add#0' with 'load bytes_to_add#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[42]: 'store bytes_to_add#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[77]: 'load bytes_to_add#0' with 'load bytes_to_add#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[21]: 'store n#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[61]: 'load n#0' with 'load n#0 from l-stack (no copy)'
debug: Found 3 edge set/s for examples.augmented_assignment.contract.Augmented.approval_program
debug: examples.augmented_assignment.contract.Augmented.approval_program f-stack entry: ['me#0']
debug: examples.augmented_assignment.contract.Augmented.approval_program f-stack on first store: []
info: Writing augmented_assignment/out/contract.approval.teal
info: Writing augmented_assignment/out/contract.approval.debug.teal
info: Writing augmented_assignment/out/contract.clear.teal
info: Writing augmented_assignment/out/contract.clear.debug.teal
>> exit code = 0