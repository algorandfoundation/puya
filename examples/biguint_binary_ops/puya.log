>> poetry run puyapy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 --log-level=debug biguint_binary_ops
debug: Building AWST for __init__.py
debug: Building AWST for biguint_binary_ops
debug: Building AWST for embedded puyapy lib at <puya>/puyapy_lib_bytes.py
debug: Building AWST for embedded puyapy lib at <puya>/puyapy.py
debug: Building AWST for biguint_binary_ops/contract.py
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L39
debug: Terminated block@0: // L39
debug: Output IR to <git root>/examples/biguint_binary_ops/out/contract_BiguintBinaryOps.ssa.ir
info: Optimizing examples.biguint_binary_ops.contract.BiguintBinaryOps at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.biguint_binary_ops.contract.BiguintBinaryOps.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%0#0, add#0
debug: Replacing {tuple_assignment%0#0} with add#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%1#0, subtract#0
debug: Replacing {tuple_assignment%1#0} with subtract#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%2#0, multiply#0
debug: Replacing {tuple_assignment%2#0} with multiply#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%3#0, divide#0
debug: Replacing {tuple_assignment%3#0} with divide#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%4#0, mod#0
debug: Replacing {tuple_assignment%4#0} with mod#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%5#0, lt#0
debug: Replacing {tuple_assignment%5#0} with lt#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%6#0, lte#0
debug: Replacing {tuple_assignment%6#0} with lte#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%7#0, gt#0
debug: Replacing {tuple_assignment%7#0} with gt#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%8#0, gte#0
debug: Replacing {tuple_assignment%8#0} with gte#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%9#0, eq#0
debug: Replacing {tuple_assignment%9#0} with eq#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%10#0, neq#0
debug: Replacing {tuple_assignment%10#0} with neq#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%11#0, b_or#0
debug: Replacing {tuple_assignment%11#0} with b_or#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%12#0, b_and#0
debug: Replacing {tuple_assignment%12#0} with b_and#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%13#0, b_xor#0
debug: Replacing {tuple_assignment%13#0} with b_xor#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.biguint_binary_ops.contract.do_some_ops
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.biguint_binary_ops.contract.BiguintBinaryOps.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/biguint_binary_ops/out/contract_BiguintBinaryOps.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.biguint_binary_ops.contract.BiguintBinaryOps.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.biguint_binary_ops.contract.do_some_ops
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.biguint_binary_ops.contract.BiguintBinaryOps.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to <git root>/examples/biguint_binary_ops/out/contract_BiguintBinaryOps.cssa.ir
debug: Removing Phis from examples.biguint_binary_ops.contract.BiguintBinaryOps.approval_program
debug: Removing Phis from examples.biguint_binary_ops.contract.do_some_ops
debug: Removing Phis from examples.biguint_binary_ops.contract.BiguintBinaryOps.clear_state_program
debug: Output IR to <git root>/examples/biguint_binary_ops/out/contract_BiguintBinaryOps.post_ssa.ir
debug: Sequentializing parallel copies in examples.biguint_binary_ops.contract.BiguintBinaryOps.approval_program
debug: Sequentializing parallel copies in examples.biguint_binary_ops.contract.do_some_ops
debug: Sequentializing parallel copies in examples.biguint_binary_ops.contract.BiguintBinaryOps.clear_state_program
debug: Output IR to <git root>/examples/biguint_binary_ops/out/contract_BiguintBinaryOps.parallel_copies.ir
debug: Coalescing local variables in examples.biguint_binary_ops.contract.BiguintBinaryOps.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.biguint_binary_ops.contract.do_some_ops using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.biguint_binary_ops.contract.BiguintBinaryOps.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/biguint_binary_ops/out/contract_BiguintBinaryOps.final.ir
debug: Inserted main_block@0.ops[16]: 'store add#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[18]: 'load add#0' with 'load add#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[21]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[23]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[28]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[30]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[35]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[37]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[42]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[44]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[49]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[51]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[55]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[57]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[61]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[63]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[71]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[73]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[80]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[82]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[87]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[89]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[94]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[96]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[15]: 'store subtract#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[26]: 'load subtract#0' with 'load subtract#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[14]: 'store multiply#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[34]: 'load multiply#0' with 'load multiply#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[13]: 'store divide#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[42]: 'load divide#0' with 'load divide#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[12]: 'store mod#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[50]: 'load mod#0' with 'load mod#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[11]: 'store lt#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[58]: 'load lt#0' with 'load lt#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[10]: 'store lte#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[65]: 'load lte#0' with 'load lte#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[9]: 'store gt#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[72]: 'load gt#0' with 'load gt#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[8]: 'store gte#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[75]: 'load gte#0' with 'load gte#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[7]: 'store eq#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[78]: 'load eq#0' with 'load eq#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[6]: 'store neq#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[85]: 'load neq#0' with 'load neq#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[5]: 'store b_or#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[88]: 'load b_or#0' with 'load b_or#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[4]: 'store b_and#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[96]: 'load b_and#0' with 'load b_and#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[3]: 'store b_xor#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[104]: 'load b_xor#0' with 'load b_xor#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[55]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[51]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[47]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[43]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[39]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[35]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[31]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[27]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[23]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[19]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[15]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[11]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[7]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted do_some_ops_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced do_some_ops_block@0.ops[70]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Simplified uncover 13; uncover 13; uncover 13; uncover 13; uncover 13; uncover 13; uncover 13; uncover 13; uncover 13; uncover 13; uncover 13; uncover 13; uncover 13; uncover 13 to 
info: Writing biguint_binary_ops/out/contract.approval.teal
info: Writing biguint_binary_ops/out/contract.approval.debug.teal
info: Writing biguint_binary_ops/out/contract.clear.teal
info: Writing biguint_binary_ops/out/contract.clear.debug.teal
>> exit code = 0