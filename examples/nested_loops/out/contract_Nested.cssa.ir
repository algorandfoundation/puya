contract examples.nested_loops.contract.Nested:
    program approval:
        subroutine examples.nested_loops.contract.Nested.approval_program() -> uint64:
            block@0: // L7
                let x#0: uint64 = 0u
                let range_item%0#0: uint64 = 0u
                let (x#8: uint64, range_item%0#8: uint64) = (x#0, range_item%0#0)
                goto block@1
            block@1: // for_header_L11
                let a#7: uint64 = Phi(range_item%0#8 <- block@0, range_item%0#9 <- block@22)
                let x#10: uint64 = Phi(x#8 <- block@0, x#9 <- block@22)
                let (x#7: uint64, a#0: uint64) = (x#10, a#7)
                let continue_looping%1#0: uint64 = (< a#0 2u)
                goto continue_looping%1#0 ? block@2 : block@24
            block@2: // for_body_L11
                let range_item%2#0: uint64 = 0u
                let (x#11: uint64, range_item%2#7: uint64) = (x#7, range_item%2#0)
                goto block@3
            block@3: // for_header_L12
                let b#1: uint64 = Phi(range_item%2#7 <- block@2, range_item%2#8 <- block@20)
                let x#13: uint64 = Phi(x#11 <- block@2, x#12 <- block@20)
                let (x#6: uint64, b#0: uint64) = (x#13, b#1)
                let continue_looping%3#0: uint64 = (< b#0 2u)
                goto continue_looping%3#0 ? block@4 : block@22
            block@4: // for_body_L12
                let range_item%4#0: uint64 = 0u
                let (x#14: uint64, range_item%4#6: uint64) = (x#6, range_item%4#0)
                goto block@5
            block@5: // for_header_L13
                let c#1: uint64 = Phi(range_item%4#6 <- block@4, range_item%4#7 <- block@18)
                let x#16: uint64 = Phi(x#14 <- block@4, x#15 <- block@18)
                let (x#5: uint64, c#0: uint64) = (x#16, c#1)
                let continue_looping%5#0: uint64 = (< c#0 2u)
                goto continue_looping%5#0 ? block@6 : block@20
            block@6: // for_body_L13
                let range_item%6#0: uint64 = 0u
                let (x#17: uint64, range_item%6#5: uint64) = (x#5, range_item%6#0)
                goto block@7
            block@7: // for_header_L14
                let d#1: uint64 = Phi(range_item%6#5 <- block@6, range_item%6#6 <- block@16)
                let x#19: uint64 = Phi(x#17 <- block@6, x#18 <- block@16)
                let (x#4: uint64, d#0: uint64) = (x#19, d#1)
                let continue_looping%7#0: uint64 = (< d#0 2u)
                goto continue_looping%7#0 ? block@8 : block@18
            block@8: // for_body_L14
                let range_item%8#0: uint64 = 0u
                let (x#20: uint64, range_item%8#4: uint64) = (x#4, range_item%8#0)
                goto block@9
            block@9: // for_header_L15
                let e#1: uint64 = Phi(range_item%8#4 <- block@8, range_item%8#5 <- block@14)
                let x#22: uint64 = Phi(x#20 <- block@8, x#21 <- block@14)
                let (x#3: uint64, e#0: uint64) = (x#22, e#1)
                let continue_looping%9#0: uint64 = (< e#0 2u)
                goto continue_looping%9#0 ? block@10 : block@16
            block@10: // for_body_L15
                let range_item%10#0: uint64 = 0u
                let (x#23: uint64, range_item%10#3: uint64) = (x#3, range_item%10#0)
                goto block@11
            block@11: // for_header_L16
                let f#1: uint64 = Phi(range_item%10#3 <- block@10, range_item%10#4 <- block@12)
                let x#25: uint64 = Phi(x#23 <- block@10, x#24 <- block@12)
                let (x#1: uint64, f#0: uint64) = (x#25, f#1)
                let continue_looping%11#0: uint64 = (< f#0 2u)
                goto continue_looping%11#0 ? block@12 : block@14
            block@12: // for_body_L16
                let tmp%12#0: uint64 = (+ a#0 b#0)
                let tmp%13#0: uint64 = (+ tmp%12#0 c#0)
                let tmp%14#0: uint64 = (+ tmp%13#0 d#0)
                let tmp%15#0: uint64 = (+ tmp%14#0 e#0)
                let tmp%16#0: uint64 = (+ tmp%15#0 f#0)
                let x#2: uint64 = (+ x#1 tmp%16#0)
                let range_item%10#2: uint64 = (+ f#0 1u)
                let (x#24: uint64, range_item%10#4: uint64) = (x#2, range_item%10#2)
                goto block@11
            block@14: // after_for_L16
                let range_item%8#3: uint64 = (+ e#0 1u)
                let (x#21: uint64, range_item%8#5: uint64) = (x#1, range_item%8#3)
                goto block@9
            block@16: // after_for_L15
                let range_item%6#4: uint64 = (+ d#0 1u)
                let (x#18: uint64, range_item%6#6: uint64) = (x#3, range_item%6#4)
                goto block@7
            block@18: // after_for_L14
                let range_item%4#5: uint64 = (+ c#0 1u)
                let (x#15: uint64, range_item%4#7: uint64) = (x#4, range_item%4#5)
                goto block@5
            block@20: // after_for_L13
                let range_item%2#6: uint64 = (+ b#0 1u)
                let (x#12: uint64, range_item%2#8: uint64) = (x#5, range_item%2#6)
                goto block@3
            block@22: // after_for_L12
                let a#6: uint64 = (+ a#0 2u)
                let range_item%0#7: uint64 = (+ a#0 1u)
                let (x#9: uint64, range_item%0#9: uint64) = (x#6, range_item%0#7)
                goto block@1
            block@24: // after_for_L11
                let tmp%17#0: bytes = (itob x#7)
                (log tmp%17#0)
                let y#0: uint64 = 0u
                let range_item%18#0: uint64 = 0u
                let range_index%19#0: uint64 = 0u
                let (y#3: uint64, range_index%19#3: uint64, range_item%18#3: uint64) = (y#0, range_index%19#0, range_item%18#0)
                goto block@25
            block@25: // for_header_L25
                let item#1: uint64 = Phi(range_item%18#3 <- block@24, range_item%18#4 <- block@26)
                let index#1: uint64 = Phi(range_index%19#3 <- block@24, range_index%19#4 <- block@26)
                let y#5: uint64 = Phi(y#3 <- block@24, y#4 <- block@26)
                let (y#1: uint64, index#0: uint64, item#0: uint64) = (y#5, index#1, item#1)
                let continue_looping%20#0: uint64 = (< item#0 10u)
                goto continue_looping%20#0 ? block@26 : block@28
            block@26: // for_body_L25
                let tmp%21#0: uint64 = (* item#0 index#0)
                let y#2: uint64 = (+ y#1 tmp%21#0)
                let range_item%18#2: uint64 = (+ item#0 1u)
                let range_index%19#2: uint64 = (+ index#0 1u)
                let (y#4: uint64, range_index%19#4: uint64, range_item%18#4: uint64) = (y#2, range_index%19#2, range_item%18#2)
                goto block@25
            block@28: // after_for_L25
                let tmp%22#0: bytes = (itob y#1)
                (log tmp%22#0)
                return x#7
    
    program clear-state:
        subroutine examples.nested_loops.contract.Nested.clear_state_program() -> uint64:
            block@0: // L31
                return 1u