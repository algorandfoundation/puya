>> poetry run puyapy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 --log-level=debug match
debug: Building AWST for __init__.py
debug: Building AWST for match
debug: Building AWST for embedded puyapy lib at <puya>/puyapy_lib_bytes.py
debug: Building AWST for embedded puyapy lib at <puya>/puyapy_lib_arc4.py
debug: Building AWST for embedded puyapy lib at <puya>/puyapy.py
debug: Building AWST for match/contract.py
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L18
debug: Terminated block@0: // L18
debug: Sealing block@0: // L37
debug: Terminated block@0: // L37
debug: Sealing block@0: // L55
debug: Terminated block@0: // L55
debug: Sealing block@0: // L82
debug: Terminated block@0: // L82
debug: Sealing block@None: // if_body_L101
debug: Sealing block@None: // else_body_L101
debug: Terminated block@1: // if_body_L101
debug: Sealing block@2: // after_if_else_L101
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L101
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L82
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L101
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L82
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L101
debug: Sealing block@None: // ternary_true_L105
debug: Sealing block@None: // ternary_false_L105
debug: Terminated block@3: // ternary_true_L105
debug: Terminated block@4: // ternary_false_L105
debug: Sealing block@5: // ternary_merge_L105
debug: Created Phi assignment: let ternary_result%9#2: uint64 = undefined while trying to resolve 'ternary_result%9' in block@5: // ternary_merge_L105
debug: Added ternary_result%9#0 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3) in block@3: // ternary_true_L105
debug: Added ternary_result%9#1 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3, ternary_result%9#1 <- block@4) in block@4: // ternary_false_L105
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L101
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L82
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L105
debug: Looking for 'range_item%10' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let range_item%10#1: uint64 = undefined while trying to resolve 'range_item%10' in block@6: // for_header_L105
debug: Terminated block@6: // for_header_L105
debug: Sealing block@None: // for_body_L105
debug: Looking for 'source' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let source#3: bytes = undefined while trying to resolve 'source' in block@6: // for_header_L105
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L105
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@6: // for_header_L105
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L105
debug: Terminated block@7: // for_body_L105
debug: Sealing block@8: // for_footer_L105
debug: Sealing block@None: // after_for_L105
debug: Terminated block@8: // for_footer_L105
debug: Sealing block@6: // for_header_L105
debug: Added range_item%10#0 to Phi node: let range_item%10#1: uint64 = φ(range_item%10#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added range_item%10#2 to Phi node: let range_item%10#1: uint64 = φ(range_item%10#0 <- block@5, range_item%10#2 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let source#5: bytes = undefined while trying to resolve 'source' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let source#6: bytes = undefined while trying to resolve 'source' in block@2: // after_if_else_L101
debug: Added source#1 to Phi node: let source#6: bytes = φ(source#1 <- block@0) in block@0: // L82
debug: Added source#2 to Phi node: let source#6: bytes = φ(source#1 <- block@0, source#2 <- block@1) in block@1: // if_body_L101
debug: Added source#6 to Phi node: let source#5: bytes = φ(source#6 <- block@3) in block@3: // ternary_true_L105
debug: Added source#6 to Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) (source#5) with source#6
debug: Deleting Phi assignment: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4)
debug: Replaced trivial Phi node: let source#5: bytes = φ(source#6 <- block@3, source#6 <- block@4) (source#5) with source#6 in current definition for 1 blocks
debug: Added source#6 to Phi node: let source#3: bytes = φ(source#6 <- block@5) in block@5: // ternary_merge_L105
debug: Added source#4 to Phi node: let source#3: bytes = φ(source#6 <- block@5, source#4 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L105
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L105
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0
debug: Deleting Phi assignment: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#3) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@8) in block@8: // for_footer_L105
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L101
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L82
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L105
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) in block@8: // for_footer_L105
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@8) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Terminated block@9: // after_for_L105
debug: Sealing block@0: // L113
debug: Terminated block@0: // L113
debug: Sealing block@0: // L134
debug: Terminated block@0: // L134
debug: Sealing block@0: // L161
debug: Terminated block@0: // L161
debug: Sealing block@0: // L190
debug: Terminated block@0: // L190
debug: Sealing block@0: // L209
debug: Terminated block@0: // L209
debug: Sealing block@0: // L227
debug: Terminated block@0: // L227
debug: Sealing block@None: // if_body_L241
debug: Sealing block@None: // else_body_L241
debug: Terminated block@1: // if_body_L241
debug: Terminated block@2: // else_body_L241
debug: Sealing block@3: // after_if_else_L241
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L241
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@4: // for_header_L246
debug: Terminated block@4: // for_header_L246
debug: Sealing block@None: // for_body_L246
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L246
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L246
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@4: // for_header_L246
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L246
debug: Terminated block@5: // for_body_L246
debug: Sealing block@6: // for_footer_L246
debug: Sealing block@None: // after_for_L246
debug: Terminated block@6: // for_footer_L246
debug: Sealing block@4: // for_header_L246
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3) in block@3: // after_if_else_L241
debug: Added range_item%1#2 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3, range_item%1#2 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L241
debug: Added tail_cursor#0 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added tail_cursor#1 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L241
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@3) in block@3: // after_if_else_L241
debug: Added tail_cursor#3 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@3, tail_cursor#3 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L241
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L241
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#3) with array_data#0
debug: Deleting Phi assignment: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#3: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#3) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#1: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L241
debug: Added array_data#2 to Phi node: let array_data#1: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@6) in block@6: // for_footer_L246
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#3) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#3) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L241
debug: Added header_cursor#2 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@6) in block@6: // for_footer_L246
debug: Terminated block@7: // after_for_L246
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L17
debug: Terminated block@0: // L17
debug: Sealing block@None: // switch_case_default_L19
debug: Sealing block@None: // switch_case_0_L21
debug: Sealing block@None: // switch_case_1_L24
debug: Terminated block@1: // switch_case_0_L21
debug: Terminated block@2: // switch_case_1_L24
debug: Terminated block@3: // switch_case_default_L19
debug: Sealing block@4: // switch_case_next_L19
debug: Terminated block@4: // switch_case_next_L19
debug: Sealing block@0: // L39
debug: Terminated block@0: // L39
debug: Sealing block@None: // switch_case_default_L41
debug: Sealing block@None: // switch_case_0_L43
debug: Sealing block@None: // switch_case_1_L46
debug: Terminated block@1: // switch_case_0_L43
debug: Terminated block@2: // switch_case_1_L46
debug: Terminated block@3: // switch_case_default_L41
debug: Sealing block@4: // switch_case_next_L41
debug: Terminated block@4: // switch_case_next_L41
debug: Sealing block@0: // L28
debug: Terminated block@0: // L28
debug: Sealing block@None: // switch_case_default_L30
debug: Sealing block@None: // switch_case_0_L32
debug: Sealing block@None: // switch_case_1_L35
debug: Terminated block@1: // switch_case_0_L32
debug: Terminated block@2: // switch_case_1_L35
debug: Terminated block@3: // switch_case_default_L30
debug: Sealing block@4: // switch_case_next_L30
debug: Terminated block@4: // switch_case_next_L30
debug: Sealing block@0: // L50
debug: Terminated block@0: // L50
debug: Sealing block@None: // switch_case_default_L52
debug: Sealing block@None: // switch_case_0_L54
debug: Sealing block@None: // switch_case_1_L57
debug: Terminated block@1: // switch_case_0_L54
debug: Terminated block@2: // switch_case_1_L57
debug: Terminated block@3: // switch_case_default_L52
debug: Sealing block@4: // switch_case_next_L52
debug: Terminated block@4: // switch_case_next_L52
debug: Sealing block@0: // L61
debug: Terminated block@0: // L61
debug: Sealing block@None: // switch_case_default_L63
debug: Sealing block@None: // switch_case_0_L65
debug: Sealing block@None: // switch_case_1_L68
debug: Terminated block@1: // switch_case_0_L65
debug: Terminated block@2: // switch_case_1_L68
debug: Terminated block@3: // switch_case_default_L63
debug: Sealing block@4: // switch_case_next_L63
debug: Terminated block@4: // switch_case_next_L63
debug: Sealing block@0: // L75
debug: Terminated block@0: // L75
debug: Sealing block@None: // switch_case_default_L77
debug: Sealing block@None: // switch_case_0_L79
debug: Sealing block@None: // switch_case_1_L82
debug: Terminated block@1: // switch_case_0_L79
debug: Terminated block@2: // switch_case_1_L82
debug: Terminated block@3: // switch_case_default_L77
debug: Sealing block@4: // switch_case_next_L77
debug: Terminated block@4: // switch_case_next_L77
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L85
debug: Terminated block@0: // L85
debug: Output IR to <git root>/examples/match/out/contract_MyContract.ssa.ir
info: Optimizing examples.match.contract.MyContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.match.contract.MyContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.match_uint64
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable hello#0
debug: Removing unused variable hello#1
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@3: // switch_case_default_L19
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.match_biguint
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable hello#0
debug: Removing unused variable hello#1
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@3: // switch_case_default_L41
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.match_bytes
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable hello#0
debug: Removing unused variable hello#1
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@3: // switch_case_default_L30
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.match_address
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable hello#0
debug: Removing unused variable hello#1
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@3: // switch_case_default_L52
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.match_attributes
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable hello#0
debug: Removing unused variable hello#1
debug: Removing unused variable hello#2
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.match_bools
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable hello#0
debug: Removing unused variable hello#1
debug: Optimizer: Simplify Conditional Branches
debug: Switch switch n#0 {1u => block@1, 0u => block@2, * => block@3} simplified to goto [block@2, block@1, ...block@3][n#0]
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@3: // switch_case_default_L77
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/match/out/contract_MyContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.match.contract.MyContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.match_uint64
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.match_biguint
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.match_bytes
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.match_address
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.match_attributes
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.match_bools
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.match.contract.MyContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to <git root>/examples/match/out/contract_MyContract.cssa.ir
debug: Removing Phis from examples.match.contract.MyContract.approval_program
debug: Removing Phis from examples.match.contract.MyContract.match_uint64
debug: Removing Phis from examples.match.contract.MyContract.match_biguint
debug: Removing Phis from examples.match.contract.MyContract.match_bytes
debug: Removing Phis from examples.match.contract.MyContract.match_address
debug: Removing Phis from examples.match.contract.MyContract.match_attributes
debug: Removing Phis from examples.match.contract.MyContract.match_bools
debug: Removing Phis from examples.match.contract.MyContract.clear_state_program
debug: Output IR to <git root>/examples/match/out/contract_MyContract.post_ssa.ir
debug: Sequentializing parallel copies in examples.match.contract.MyContract.approval_program
debug: Sequentializing parallel copies in examples.match.contract.MyContract.match_uint64
debug: Sequentializing parallel copies in examples.match.contract.MyContract.match_biguint
debug: Sequentializing parallel copies in examples.match.contract.MyContract.match_bytes
debug: Sequentializing parallel copies in examples.match.contract.MyContract.match_address
debug: Sequentializing parallel copies in examples.match.contract.MyContract.match_attributes
debug: Sequentializing parallel copies in examples.match.contract.MyContract.match_bools
debug: Sequentializing parallel copies in examples.match.contract.MyContract.clear_state_program
debug: Output IR to <git root>/examples/match/out/contract_MyContract.parallel_copies.ir
debug: Coalescing local variables in examples.match.contract.MyContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.match.contract.MyContract.match_uint64 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.match.contract.MyContract.match_biguint using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.match.contract.MyContract.match_bytes using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.match.contract.MyContract.match_address using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.match.contract.MyContract.match_attributes using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.match.contract.MyContract.match_bools using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.match.contract.MyContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/match/out/contract_MyContract.final.ir
debug: Inserted match_uint64_block@0.ops[1]: 'store n#0 to l-stack (copy)'
debug: Replaced match_uint64_block@0.ops[5]: 'load n#0' with 'load n#0 from l-stack (no copy)'
debug: Found 1 edge set/s for examples.match.contract.MyContract.match_uint64
debug: Inserted match_biguint_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced match_biguint_block@0.ops[3]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted match_biguint_block@0.ops[5]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced match_biguint_block@0.ops[7]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted match_biguint_block@0.ops[10]: 'store n#0 to l-stack (copy)'
debug: Replaced match_biguint_block@0.ops[14]: 'load n#0' with 'load n#0 from l-stack (no copy)'
debug: Found 1 edge set/s for examples.match.contract.MyContract.match_biguint
debug: Inserted match_bytes_block@0.ops[1]: 'store n#0 to l-stack (copy)'
debug: Replaced match_bytes_block@0.ops[5]: 'load n#0' with 'load n#0 from l-stack (no copy)'
debug: Found 1 edge set/s for examples.match.contract.MyContract.match_bytes
debug: Inserted match_address_block@0.ops[1]: 'store n#0 to l-stack (copy)'
debug: Replaced match_address_block@0.ops[5]: 'load n#0' with 'load n#0 from l-stack (no copy)'
debug: Found 1 edge set/s for examples.match.contract.MyContract.match_address
debug: Inserted match_attributes_block@0.ops[5]: 'store app_global_get_ex_did_exist%1#0 to l-stack (copy)'
debug: Replaced match_attributes_block@0.ops[8]: 'load app_global_get_ex_did_exist%1#0' with 'load app_global_get_ex_did_exist%1#0 from l-stack (no copy)'
debug: Inserted match_attributes_block@0.ops[13]: 'store app_global_get_ex_did_exist%3#0 to l-stack (copy)'
debug: Replaced match_attributes_block@0.ops[16]: 'load app_global_get_ex_did_exist%3#0' with 'load app_global_get_ex_did_exist%3#0 from l-stack (no copy)'
debug: Inserted match_attributes_block@0.ops[15]: 'store app_global_get_ex_value%2#0 to l-stack (copy)'
debug: Replaced match_attributes_block@0.ops[20]: 'load app_global_get_ex_value%2#0' with 'load app_global_get_ex_value%2#0 from l-stack (no copy)'
debug: Inserted match_attributes_block@0.ops[7]: 'store app_global_get_ex_value%0#0 to l-stack (copy)'
debug: Replaced match_attributes_block@0.ops[20]: 'load app_global_get_ex_value%0#0' with 'load app_global_get_ex_value%0#0 from l-stack (no copy)'
debug: Inserted match_attributes_block@0.ops[1]: 'store n#0 to l-stack (copy)'
debug: Replaced match_attributes_block@0.ops[23]: 'load n#0' with 'load n#0 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.match.contract.MyContract.match_attributes
debug: Inserted match_bools_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced match_bools_block@0.ops[3]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted match_bools_block@0.ops[6]: 'store n#0 to l-stack (copy)'
debug: Replaced match_bools_block@0.ops[8]: 'load n#0' with 'load n#0 from l-stack (no copy)'
debug: Found 1 edge set/s for examples.match.contract.MyContract.match_bools
info: Writing match/out/contract.approval.teal
info: Writing match/out/contract.approval.debug.teal
info: Writing match/out/contract.clear.teal
info: Writing match/out/contract.clear.debug.teal
>> exit code = 0