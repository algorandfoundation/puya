>> poetry run puyapy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 --log-level=debug unary
debug: Building AWST for __init__.py
debug: Building AWST for unary
debug: Building AWST for embedded puyapy lib at <puya>/puyapy_lib_bytes.py
debug: Building AWST for embedded puyapy lib at <puya>/puyapy.py
debug: Building AWST for unary/contract.py
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L26
debug: Terminated block@0: // L26
debug: Sealing block@1: // for_header_0_L31
debug: Terminated block@1: // for_header_0_L31
debug: Terminated block@2: // for_header_1_L31
debug: Terminated block@3: // for_header_2_L31
debug: Terminated block@4: // for_header_3_L31
debug: Sealing block@None: // for_body_L31
debug: Created Phi assignment: let i#4: uint64 = undefined while trying to resolve 'i' in block@5: // for_body_L31
debug: Added i#0 to Phi node: let i#4: uint64 = φ(i#0 <- block@1) in block@1: // for_header_0_L31
debug: Added i#1 to Phi node: let i#4: uint64 = φ(i#0 <- block@1, i#1 <- block@2) in block@2: // for_header_1_L31
debug: Added i#2 to Phi node: let i#4: uint64 = φ(i#0 <- block@1, i#1 <- block@2, i#2 <- block@3) in block@3: // for_header_2_L31
debug: Added i#3 to Phi node: let i#4: uint64 = φ(i#0 <- block@1, i#1 <- block@2, i#2 <- block@3, i#3 <- block@4) in block@4: // for_header_3_L31
debug: Terminated block@5: // for_body_L31
debug: Sealing block@6: // for_footer_L31
debug: Created Phi assignment: let tuple_index%1#1: uint64 = undefined while trying to resolve 'tuple_index%1' in block@5: // for_body_L31
debug: Added tuple_index%1#0 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#0 <- block@1) in block@1: // for_header_0_L31
debug: Looking for 'tuple_index%1' in an unsealed block creating an incomplete Phi: block@2: // for_header_1_L31
debug: Created Phi assignment: let tuple_index%1#2: uint64 = undefined while trying to resolve 'tuple_index%1' in block@2: // for_header_1_L31
debug: Added tuple_index%1#2 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#0 <- block@1, tuple_index%1#2 <- block@2) in block@2: // for_header_1_L31
debug: Looking for 'tuple_index%1' in an unsealed block creating an incomplete Phi: block@3: // for_header_2_L31
debug: Created Phi assignment: let tuple_index%1#3: uint64 = undefined while trying to resolve 'tuple_index%1' in block@3: // for_header_2_L31
debug: Added tuple_index%1#3 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#0 <- block@1, tuple_index%1#2 <- block@2, tuple_index%1#3 <- block@3) in block@3: // for_header_2_L31
debug: Looking for 'tuple_index%1' in an unsealed block creating an incomplete Phi: block@4: // for_header_3_L31
debug: Created Phi assignment: let tuple_index%1#4: uint64 = undefined while trying to resolve 'tuple_index%1' in block@4: // for_header_3_L31
debug: Added tuple_index%1#4 to Phi node: let tuple_index%1#1: uint64 = φ(tuple_index%1#0 <- block@1, tuple_index%1#2 <- block@2, tuple_index%1#3 <- block@3, tuple_index%1#4 <- block@4) in block@4: // for_header_3_L31
debug: Terminated block@6: // for_footer_L31
debug: Sealing block@2: // for_header_1_L31
debug: Added tuple_index%1#5 to Phi node: let tuple_index%1#2: uint64 = φ(tuple_index%1#5 <- block@6) in block@6: // for_footer_L31
debug: Replacing trivial Phi node: let tuple_index%1#2: uint64 = φ(tuple_index%1#5 <- block@6) (tuple_index%1#2) with tuple_index%1#5
debug: Deleting Phi assignment: let tuple_index%1#2: uint64 = φ(tuple_index%1#5 <- block@6)
debug: Replaced trivial Phi node: let tuple_index%1#2: uint64 = φ(tuple_index%1#5 <- block@6) (tuple_index%1#2) with tuple_index%1#5 in current definition for 1 blocks
debug: Sealing block@3: // for_header_2_L31
debug: Added tuple_index%1#5 to Phi node: let tuple_index%1#3: uint64 = φ(tuple_index%1#5 <- block@6) in block@6: // for_footer_L31
debug: Replacing trivial Phi node: let tuple_index%1#3: uint64 = φ(tuple_index%1#5 <- block@6) (tuple_index%1#3) with tuple_index%1#5
debug: Deleting Phi assignment: let tuple_index%1#3: uint64 = φ(tuple_index%1#5 <- block@6)
debug: Replaced trivial Phi node: let tuple_index%1#3: uint64 = φ(tuple_index%1#5 <- block@6) (tuple_index%1#3) with tuple_index%1#5 in current definition for 1 blocks
debug: Sealing block@4: // for_header_3_L31
debug: Added tuple_index%1#5 to Phi node: let tuple_index%1#4: uint64 = φ(tuple_index%1#5 <- block@6) in block@6: // for_footer_L31
debug: Replacing trivial Phi node: let tuple_index%1#4: uint64 = φ(tuple_index%1#5 <- block@6) (tuple_index%1#4) with tuple_index%1#5
debug: Deleting Phi assignment: let tuple_index%1#4: uint64 = φ(tuple_index%1#5 <- block@6)
debug: Replaced trivial Phi node: let tuple_index%1#4: uint64 = φ(tuple_index%1#5 <- block@6) (tuple_index%1#4) with tuple_index%1#5 in current definition for 1 blocks
debug: Sealing block@None: // after_for_L31
debug: Terminated block@7: // after_for_L31
debug: Sealing block@0: // L36
debug: Terminated block@0: // L36
debug: Sealing block@0: // L42
debug: Terminated block@0: // L42
debug: Sealing block@0: // L14
debug: Terminated block@0: // L14
debug: Sealing block@0: // L21
debug: Terminated block@0: // L21
debug: Output IR to <git root>/examples/unary/out/contract_UnaryContract.ssa.ir
info: Optimizing examples.unary.contract.UnaryContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.unary.contract.UnaryContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.unary.contract.uint_unary
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Folded !0 to 1u
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1: // for_header_0_L31 with block@0: // L26 in block@5: // for_body_L31
debug: Merged linear block@1: // for_header_0_L31 into block@0: // L26
debug: Replaced predecessor block@6: // for_footer_L31 with block@5: // for_body_L31 in block@2: // for_header_1_L31
debug: Replaced predecessor block@6: // for_footer_L31 with block@5: // for_body_L31 in block@3: // for_header_2_L31
debug: Replaced predecessor block@6: // for_footer_L31 with block@5: // for_body_L31 in block@4: // for_header_3_L31
debug: Replaced predecessor block@6: // for_footer_L31 with block@5: // for_body_L31 in block@7: // after_for_L31
debug: Merged linear block@6: // for_footer_L31 into block@5: // for_body_L31
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.unary.contract.biguint_unary
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Folded 0 b== 0 to 1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.unary.contract.bytes_unary
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Folded len("") to 0
debug: Folded ~b'/xff' to b'/x00'
debug: Folded ~b'/x00/x00' to b'/xff/xff'
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%4#0
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.unary.contract.UnaryContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/unary/out/contract_UnaryContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.unary.contract.UnaryContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.unary.contract.uint_unary
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.unary.contract.biguint_unary
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.unary.contract.bytes_unary
debug: Optimizer: Arithmetic Simplification
debug: Folded !0 to 1u
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%5#0
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.unary.contract.UnaryContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/unary/out/contract_UnaryContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine examples.unary.contract.UnaryContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.unary.contract.uint_unary
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.unary.contract.biguint_unary
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.unary.contract.bytes_unary
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.unary.contract.UnaryContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 3, ending loop
debug: Output IR to <git root>/examples/unary/out/contract_UnaryContract.cssa.ir
debug: Removing Phis from examples.unary.contract.UnaryContract.approval_program
debug: Removing Phis from examples.unary.contract.uint_unary
debug: Removing Phis from examples.unary.contract.biguint_unary
debug: Removing Phis from examples.unary.contract.bytes_unary
debug: Removing Phis from examples.unary.contract.UnaryContract.clear_state_program
debug: Output IR to <git root>/examples/unary/out/contract_UnaryContract.post_ssa.ir
debug: Sequentializing parallel copies in examples.unary.contract.UnaryContract.approval_program
debug: Sequentializing parallel copies in examples.unary.contract.uint_unary
debug: loc: {tuple_index%1#10=None, i#9=None, tuple_index%1#0=tuple_index%1#0, i#0=i#0}
debug: pred: {tuple_index%1#10=tuple_index%1#0, i#9=i#0}
debug: ready: tuple_index%1#10, i#9
debug: to_do: tuple_index%1#10, i#9
debug: * avail i#9
debug: * avail i#0
debug: * avail tuple_index%1#10
debug: * avail tuple_index%1#0
debug: * to_do i#9
debug: * to_do tuple_index%1#10
debug: loc: {tuple_index%1#10=None, i#9=None, tuple_index%1#5=tuple_index%1#5, i#1=i#1}
debug: pred: {tuple_index%1#10=tuple_index%1#5, i#9=i#1}
debug: ready: tuple_index%1#10, i#9
debug: to_do: tuple_index%1#10, i#9
debug: * avail i#9
debug: * avail i#1
debug: * avail tuple_index%1#10
debug: * avail tuple_index%1#5
debug: * to_do i#9
debug: * to_do tuple_index%1#10
debug: loc: {tuple_index%1#10=None, i#9=None, tuple_index%1#5=tuple_index%1#5, i#2=i#2}
debug: pred: {tuple_index%1#10=tuple_index%1#5, i#9=i#2}
debug: ready: tuple_index%1#10, i#9
debug: to_do: tuple_index%1#10, i#9
debug: * avail i#9
debug: * avail i#2
debug: * avail tuple_index%1#10
debug: * avail tuple_index%1#5
debug: * to_do i#9
debug: * to_do tuple_index%1#10
debug: loc: {tuple_index%1#10=None, i#9=None, tuple_index%1#5=tuple_index%1#5, i#3=i#3}
debug: pred: {tuple_index%1#10=tuple_index%1#5, i#9=i#3}
debug: ready: tuple_index%1#10, i#9
debug: to_do: tuple_index%1#10, i#9
debug: * avail i#9
debug: * avail i#3
debug: * avail tuple_index%1#10
debug: * avail tuple_index%1#5
debug: * to_do i#9
debug: * to_do tuple_index%1#10
debug: loc: {tuple_index%1#1=None, i#4=None, tuple_index%1#10=tuple_index%1#10, i#9=i#9}
debug: pred: {tuple_index%1#1=tuple_index%1#10, i#4=i#9}
debug: ready: tuple_index%1#1, i#4
debug: to_do: tuple_index%1#1, i#4
debug: * avail i#4
debug: * avail i#9
debug: * avail tuple_index%1#1
debug: * avail tuple_index%1#10
debug: * to_do i#4
debug: * to_do tuple_index%1#1
debug: Sequentializing parallel copies in examples.unary.contract.biguint_unary
debug: Sequentializing parallel copies in examples.unary.contract.bytes_unary
debug: Sequentializing parallel copies in examples.unary.contract.UnaryContract.clear_state_program
debug: Output IR to <git root>/examples/unary/out/contract_UnaryContract.parallel_copies.ir
debug: Coalescing local variables in examples.unary.contract.UnaryContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.unary.contract.uint_unary using strategy RootOperandGrouping
debug: Coalescing tuple_index%1#0 with [tuple_index%1#10, tuple_index%1#1]
debug: Coalescing i#0 with [i#9, i#1, i#2, i#3, i#4]
debug: Coalescing resulted in 22 replacement/s
debug: Coalescing local variables in examples.unary.contract.biguint_unary using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.unary.contract.bytes_unary using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.unary.contract.UnaryContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/unary/out/contract_UnaryContract.final.ir
debug: Inserted uint_unary_for_body@5.ops[3]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced uint_unary_for_body@5.ops[5]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted uint_unary_for_body@5.ops[7]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced uint_unary_for_body@5.ops[9]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted uint_unary_for_body@5.ops[12]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced uint_unary_for_body@5.ops[14]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted uint_unary_for_body@5.ops[17]: 'store tuple_index%1#0 to l-stack (copy)'
debug: Replaced uint_unary_for_body@5.ops[21]: 'load tuple_index%1#0' with 'load tuple_index%1#0 from l-stack (no copy)'
debug: Inserted uint_unary_for_body@5.ops[2]: 'store i#0 to l-stack (copy)'
debug: Replaced uint_unary_for_body@5.ops[11]: 'load i#0' with 'load i#0 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.unary.contract.uint_unary
debug: Allocated 1 variable/s to x-stack: tuple_index%1#0
debug: shared x-stack for uint_unary_block@0 -> uint_unary_for_body@5: tuple_index%1#0
debug: shared x-stack for uint_unary_for_header_1@2 -> uint_unary_for_body@5: tuple_index%1#0
debug: shared x-stack for uint_unary_for_header_2@3 -> uint_unary_for_body@5: tuple_index%1#0
debug: shared x-stack for uint_unary_for_header_3@4 -> uint_unary_for_body@5: tuple_index%1#0
debug: examples.unary.contract.uint_unary f-stack entry: ['tuple_index%1#5']
debug: examples.unary.contract.uint_unary f-stack on first store: ['i#0']
debug: Simplified int 0; int 1; swap to int 1; int 0
info: Writing unary/out/contract.approval.teal
info: Writing unary/out/contract.approval.debug.teal
info: Writing unary/out/contract.clear.teal
info: Writing unary/out/contract.clear.debug.teal
>> exit code = 0