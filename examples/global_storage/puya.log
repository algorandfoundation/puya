>> poetry run puyapy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 --log-level=debug global_storage
debug: Building AWST for __init__.py
debug: Building AWST for global_storage
debug: Building AWST for embedded puyapy lib at <puya>/puyapy_lib_bytes.py
debug: Building AWST for embedded puyapy lib at <puya>/puyapy.py
debug: Building AWST for global_storage/contract.py
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L14
debug: Terminated block@0: // L14
debug: Sealing block@None: // on_create_L5
debug: Terminated block@1: // on_create_L5
debug: Sealing block@2: // entrypoint_L5
debug: Terminated block@2: // entrypoint_L5
debug: Sealing block@0: // L37
debug: Terminated block@0: // L37
debug: Output IR to <git root>/examples/global_storage/out/contract_GlobalStorageContract.ssa.ir
info: Optimizing examples.global_storage.contract.GlobalStorageContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.global_storage.contract.GlobalStorageContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%12#0, i_value#0
debug: Replacing {tuple_assignment%12#0} with i_value#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%13#0, i_exists#0
debug: Replacing {tuple_assignment%13#0} with i_exists#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%26#0, b_value#0
debug: Replacing {tuple_assignment%26#0} with b_value#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%27#0, b_exists#0
debug: Replacing {tuple_assignment%27#0} with b_exists#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%29#0, b_value#1
debug: Replacing {tuple_assignment%29#0} with b_value#1 made 1 modifications
debug: Found equivalence set: tuple_assignment%30#0, b_exists#1
debug: Replacing {tuple_assignment%30#0} with b_exists#1 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.global_storage.contract.GlobalStorageContract.__init__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.global_storage.contract.GlobalStorageContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/global_storage/out/contract_GlobalStorageContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.global_storage.contract.GlobalStorageContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.global_storage.contract.GlobalStorageContract.__init__
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.global_storage.contract.GlobalStorageContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to <git root>/examples/global_storage/out/contract_GlobalStorageContract.cssa.ir
debug: Removing Phis from examples.global_storage.contract.GlobalStorageContract.approval_program
debug: Removing Phis from examples.global_storage.contract.GlobalStorageContract.__init__
debug: Removing Phis from examples.global_storage.contract.GlobalStorageContract.clear_state_program
debug: Output IR to <git root>/examples/global_storage/out/contract_GlobalStorageContract.post_ssa.ir
debug: Sequentializing parallel copies in examples.global_storage.contract.GlobalStorageContract.approval_program
debug: Sequentializing parallel copies in examples.global_storage.contract.GlobalStorageContract.__init__
debug: Sequentializing parallel copies in examples.global_storage.contract.GlobalStorageContract.clear_state_program
debug: Output IR to <git root>/examples/global_storage/out/contract_GlobalStorageContract.parallel_copies.ir
debug: Coalescing local variables in examples.global_storage.contract.GlobalStorageContract.approval_program using strategy RootOperandGrouping
debug: Coalescing b_value#0 with [b_value#1]
debug: Coalescing b_exists#0 with [b_exists#1]
debug: Coalescing resulted in 3 replacement/s
debug: Coalescing local variables in examples.global_storage.contract.GlobalStorageContract.__init__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.global_storage.contract.GlobalStorageContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/global_storage/out/contract_GlobalStorageContract.final.ir
debug: Inserted main_block@0.ops[1]: 'store app_id%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load app_id%0#0' with 'load app_id%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[10]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[12]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[31]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[33]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[42]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[44]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[59]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[61]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[73]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[75]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[94]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[96]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[105]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[107]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[122]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[124]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[135]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[137]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[3]: 'store app_global_get_ex_did_exist%2#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[6]: 'load app_global_get_ex_did_exist%2#0' with 'load app_global_get_ex_did_exist%2#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[18]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[21]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[26]: 'store app_global_get_ex_did_exist%7#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[29]: 'load app_global_get_ex_did_exist%7#0' with 'load app_global_get_ex_did_exist%7#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[41]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[44]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[56]: 'store i_exists#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[59]: 'load i_exists#0' with 'load i_exists#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[71]: 'store app_global_get_ex_did_exist%16#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[74]: 'load app_global_get_ex_did_exist%16#0' with 'load app_global_get_ex_did_exist%16#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[86]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[89]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[94]: 'store app_global_get_ex_did_exist%21#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[97]: 'load app_global_get_ex_did_exist%21#0' with 'load app_global_get_ex_did_exist%21#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[109]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[112]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[124]: 'store b_exists#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[127]: 'load b_exists#0' with 'load b_exists#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[141]: 'store b_exists#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[144]: 'load b_exists#0' with 'load b_exists#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[5]: 'store app_global_get_ex_value%1#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[9]: 'load app_global_get_ex_value%1#0' with 'load app_global_get_ex_value%1#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[29]: 'store app_global_get_ex_value%6#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[33]: 'load app_global_get_ex_value%6#0' with 'load app_global_get_ex_value%6#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[60]: 'store i_value#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[64]: 'load i_value#0' with 'load i_value#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[76]: 'store app_global_get_ex_value%15#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[80]: 'load app_global_get_ex_value%15#0' with 'load app_global_get_ex_value%15#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[100]: 'store app_global_get_ex_value%20#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[104]: 'load app_global_get_ex_value%20#0' with 'load app_global_get_ex_value%20#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[131]: 'store b_value#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[135]: 'load b_value#0' with 'load b_value#0 from l-stack (no copy)'
debug: Found 1 edge set/s for examples.global_storage.contract.GlobalStorageContract.approval_program
info: Writing global_storage/out/contract.approval.teal
info: Writing global_storage/out/contract.approval.debug.teal
info: Writing global_storage/out/contract.clear.teal
info: Writing global_storage/out/contract.clear.debug.teal
>> exit code = 0