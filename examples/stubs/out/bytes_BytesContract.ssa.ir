contract examples.stubs.bytes.BytesContract:
    program approval:
        subroutine examples.stubs.bytes.BytesContract.approval_program() -> uint64:
            block@0: // L5
                let base_64#0: bytes = QmFzZSA2NCBlbmNvZGVk
                let tmp%0#0: uint64 = (== base_64#0 "Base 64 encoded")
                (assert tmp%0#0)
                let base_32#0: bytes = IJQXGZJAGMZCAZLOMNXWIZLE
                let tmp%1#0: uint64 = (== base_32#0 "Base 32 encoded")
                (assert tmp%1#0)
                let base_16#0: bytes = 0x4261736520313620656e636f646564
                let tmp%2#0: uint64 = (== base_16#0 "Base 16 encoded")
                (assert tmp%2#0)
                let empty#0: bytes = ""
                let tmp%3#0: uint64 = (len base_64#0)
                (assert tmp%3#0) // Non empty bytes should be Truthy
                let tmp%4#0: uint64 = (len empty#0)
                let tmp%5#0: uint64 = (! tmp%4#0)
                (assert tmp%5#0) // Empty bytes should be Falsy
                let tmp%6#0: bytes = (concat "a" "b")
                let tmp%7#0: uint64 = (== tmp%6#0 "ab")
                (assert tmp%7#0)
                let c#0: bytes = "c"
                let c#1: bytes = (concat c#0 "d")
                let tmp%8#0: uint64 = (== c#1 "cd")
                (assert tmp%8#0)
                let abc#0: bytes = "abc"
                let tmp%9#0: bytes = ((extract 0 1) abc#0)
                let tmp%10#0: uint64 = (== tmp%9#0 "a")
                (assert tmp%10#0)
                let awst_tmp%11#0: uint64 = (len abc#0)
                let tmp%12#0: uint64 = (< 1u awst_tmp%11#0)
                goto tmp%12#0 ? block@1 : block@2
            block@1: // ternary_true_L26
                let ternary_result%13#0: uint64 = 1u
                goto block@3
            block@2: // ternary_false_L26
                let ternary_result%13#1: uint64 = awst_tmp%11#0
                goto block@3
            block@3: // ternary_merge_L26
                let ternary_result%13#2: uint64 = Phi(ternary_result%13#0 <- block@1, ternary_result%13#1 <- block@2)
                let base_length%14#0: uint64 = (len abc#0)
                let tmp%15#0: bytes = (substring3 abc#0 ternary_result%13#2 base_length%14#0)
                let tmp%16#0: uint64 = (== tmp%15#0 "bc")
                (assert tmp%16#0)
                let awst_tmp%17#0: uint64 = (len abc#0)
                let tmp%18#0: uint64 = (< 1u awst_tmp%17#0)
                goto tmp%18#0 ? block@4 : block@5
            block@4: // ternary_true_L27
                let ternary_result%19#0: uint64 = 1u
                goto block@6
            block@5: // ternary_false_L27
                let ternary_result%19#1: uint64 = awst_tmp%17#0
                goto block@6
            block@6: // ternary_merge_L27
                let ternary_result%19#2: uint64 = Phi(ternary_result%19#0 <- block@4, ternary_result%19#1 <- block@5)
                let awst_tmp%17#1: uint64 = (len abc#0)
                let tmp%20#0: uint64 = (< 1u awst_tmp%17#1)
                goto tmp%20#0 ? block@7 : block@8
            block@7: // ternary_true_L27
                let ternary_result%21#0: uint64 = 1u
                goto block@9
            block@8: // ternary_false_L27
                let ternary_result%21#1: uint64 = awst_tmp%17#1
                goto block@9
            block@9: // ternary_merge_L27
                let ternary_result%21#2: uint64 = Phi(ternary_result%21#0 <- block@7, ternary_result%21#1 <- block@8)
                let tmp%22#0: bytes = (substring3 abc#0 ternary_result%19#2 ternary_result%21#2)
                let tmp%23#0: uint64 = (== tmp%22#0 "")
                (assert tmp%23#0)
                let awst_tmp%24#0: uint64 = (len abc#0)
                let tmp%25#0: uint64 = (< 1u awst_tmp%24#0)
                goto tmp%25#0 ? block@10 : block@11
            block@10: // ternary_true_L28
                let ternary_result%26#0: uint64 = 1u
                goto block@12
            block@11: // ternary_false_L28
                let ternary_result%26#1: uint64 = awst_tmp%24#0
                goto block@12
            block@12: // ternary_merge_L28
                let ternary_result%26#2: uint64 = Phi(ternary_result%26#0 <- block@10, ternary_result%26#1 <- block@11)
                let tmp%27#0: bytes = (substring3 abc#0 0u ternary_result%26#2)
                let tmp%28#0: uint64 = (== tmp%27#0 "a")
                (assert tmp%28#0)
                let awst_tmp%29#0: uint64 = (len abc#0)
                let tmp%30#0: uint64 = (< 1u awst_tmp%29#0)
                goto tmp%30#0 ? block@13 : block@14
            block@13: // ternary_true_L29
                let ternary_result%31#0: uint64 = (- awst_tmp%29#0 1u)
                goto block@15
            block@14: // ternary_false_L29
                let ternary_result%31#1: uint64 = 0u
                goto block@15
            block@15: // ternary_merge_L29
                let ternary_result%31#2: uint64 = Phi(ternary_result%31#0 <- block@13, ternary_result%31#1 <- block@14)
                let tmp%32#0: bytes = (substring3 abc#0 0u ternary_result%31#2)
                let tmp%33#0: uint64 = (== tmp%32#0 "ab")
                (assert tmp%33#0)
                let awst_tmp%34#0: uint64 = (len abc#0)
                let tmp%35#0: uint64 = (< 2u awst_tmp%34#0)
                goto tmp%35#0 ? block@16 : block@17
            block@16: // ternary_true_L30
                let ternary_result%36#0: uint64 = (- awst_tmp%34#0 2u)
                goto block@18
            block@17: // ternary_false_L30
                let ternary_result%36#1: uint64 = 0u
                goto block@18
            block@18: // ternary_merge_L30
                let ternary_result%36#2: uint64 = Phi(ternary_result%36#0 <- block@16, ternary_result%36#1 <- block@17)
                let base_length%37#0: uint64 = (len abc#0)
                let tmp%38#0: bytes = (substring3 abc#0 ternary_result%36#2 base_length%37#0)
                let tmp%39#0: uint64 = (== tmp%38#0 "bc")
                (assert tmp%39#0)
                let awst_tmp%40#0: uint64 = (len abc#0)
                let tmp%41#0: uint64 = (< 2u awst_tmp%40#0)
                goto tmp%41#0 ? block@19 : block@20
            block@19: // ternary_true_L31
                let ternary_result%42#0: uint64 = (- awst_tmp%40#0 2u)
                goto block@21
            block@20: // ternary_false_L31
                let ternary_result%42#1: uint64 = 0u
                goto block@21
            block@21: // ternary_merge_L31
                let ternary_result%42#2: uint64 = Phi(ternary_result%42#0 <- block@19, ternary_result%42#1 <- block@20)
                let awst_tmp%40#1: uint64 = (len abc#0)
                let tmp%43#0: uint64 = (< 1u awst_tmp%40#1)
                goto tmp%43#0 ? block@22 : block@23
            block@22: // ternary_true_L31
                let ternary_result%44#0: uint64 = (- awst_tmp%40#1 1u)
                goto block@24
            block@23: // ternary_false_L31
                let ternary_result%44#1: uint64 = 0u
                goto block@24
            block@24: // ternary_merge_L31
                let ternary_result%44#2: uint64 = Phi(ternary_result%44#0 <- block@22, ternary_result%44#1 <- block@23)
                let tmp%45#0: bytes = (substring3 abc#0 ternary_result%42#2 ternary_result%44#2)
                let tmp%46#0: uint64 = (== tmp%45#0 "b")
                (assert tmp%46#0)
                let tmp%47#0: bytes = (substring3 "1234567" 1u 6u)
                let tmp%48#0: uint64 = (== tmp%47#0 "23456")
                (assert tmp%48#0)
                let awst_tmp%49#0: uint64 = (len abc#0)
                let tmp%50#0: uint64 = (< 10u awst_tmp%49#0)
                goto tmp%50#0 ? block@25 : block@26
            block@25: // ternary_true_L33
                let ternary_result%51#0: uint64 = (- awst_tmp%49#0 10u)
                goto block@27
            block@26: // ternary_false_L33
                let ternary_result%51#1: uint64 = 0u
                goto block@27
            block@27: // ternary_merge_L33
                let ternary_result%51#2: uint64 = Phi(ternary_result%51#0 <- block@25, ternary_result%51#1 <- block@26)
                let awst_tmp%49#1: uint64 = (len abc#0)
                let tmp%52#0: uint64 = (< 10u awst_tmp%49#1)
                goto tmp%52#0 ? block@28 : block@29
            block@28: // ternary_true_L33
                let ternary_result%53#0: uint64 = 10u
                goto block@30
            block@29: // ternary_false_L33
                let ternary_result%53#1: uint64 = awst_tmp%49#1
                goto block@30
            block@30: // ternary_merge_L33
                let ternary_result%53#2: uint64 = Phi(ternary_result%53#0 <- block@28, ternary_result%53#1 <- block@29)
                let tmp%54#0: bytes = (substring3 abc#0 ternary_result%51#2 ternary_result%53#2)
                let tmp%55#0: uint64 = (== tmp%54#0 "abc")
                (assert tmp%55#0)
                let true#0: bytes = "1"
                let false#0: bytes = ""
                let tmp%56#0: uint64 = (len true#0)
                goto tmp%56#0 ? block@32 : block@31
            block@31: // ternary_true_L38
                let ternary_result%57#0: bytes = true#0
                goto block@33
            block@32: // ternary_false_L38
                let ternary_result%57#1: bytes = true#0
                goto block@33
            block@33: // ternary_merge_L38
                let ternary_result%57#2: bytes = Phi(ternary_result%57#0 <- block@31, ternary_result%57#1 <- block@32)
                let x#0: uint64 = (== ternary_result%57#2 true#0)
                (assert x#0)
                let tmp%58#0: uint64 = (len true#0)
                goto tmp%58#0 ? block@35 : block@34
            block@34: // ternary_true_L40
                let ternary_result%59#0: bytes = true#0
                goto block@36
            block@35: // ternary_false_L40
                let ternary_result%59#1: bytes = true#0
                goto block@36
            block@36: // ternary_merge_L40
                let ternary_result%59#2: bytes = Phi(ternary_result%59#0 <- block@34, ternary_result%59#1 <- block@35)
                let tmp%60#0: uint64 = (== ternary_result%59#2 true#0)
                (assert tmp%60#0)
                let tmp%61#0: uint64 = (len true#0)
                goto tmp%61#0 ? block@38 : block@37
            block@37: // ternary_true_L41
                let ternary_result%62#0: bytes = true#0
                goto block@39
            block@38: // ternary_false_L41
                let ternary_result%62#1: bytes = false#0
                goto block@39
            block@39: // ternary_merge_L41
                let ternary_result%62#2: bytes = Phi(ternary_result%62#0 <- block@37, ternary_result%62#1 <- block@38)
                let tmp%63#0: uint64 = (== ternary_result%62#2 false#0)
                (assert tmp%63#0)
                let tmp%64#0: uint64 = (len false#0)
                goto tmp%64#0 ? block@41 : block@40
            block@40: // ternary_true_L42
                let ternary_result%65#0: bytes = false#0
                goto block@42
            block@41: // ternary_false_L42
                let ternary_result%65#1: bytes = true#0
                goto block@42
            block@42: // ternary_merge_L42
                let ternary_result%65#2: bytes = Phi(ternary_result%65#0 <- block@40, ternary_result%65#1 <- block@41)
                let tmp%66#0: uint64 = (== ternary_result%65#2 false#0)
                (assert tmp%66#0)
                let tmp%67#0: uint64 = (len false#0)
                goto tmp%67#0 ? block@44 : block@43
            block@43: // ternary_true_L43
                let ternary_result%68#0: bytes = false#0
                goto block@45
            block@44: // ternary_false_L43
                let ternary_result%68#1: bytes = false#0
                goto block@45
            block@45: // ternary_merge_L43
                let ternary_result%68#2: bytes = Phi(ternary_result%68#0 <- block@43, ternary_result%68#1 <- block@44)
                let tmp%69#0: uint64 = (== ternary_result%68#2 false#0)
                (assert tmp%69#0)
                let tmp%70#0: uint64 = (len true#0)
                goto tmp%70#0 ? block@46 : block@47
            block@46: // ternary_true_L44
                let ternary_result%71#0: bytes = true#0
                goto block@48
            block@47: // ternary_false_L44
                let ternary_result%71#1: bytes = true#0
                goto block@48
            block@48: // ternary_merge_L44
                let ternary_result%71#2: bytes = Phi(ternary_result%71#0 <- block@46, ternary_result%71#1 <- block@47)
                let tmp%72#0: uint64 = (== ternary_result%71#2 true#0)
                (assert tmp%72#0)
                let tmp%73#0: uint64 = (len true#0)
                goto tmp%73#0 ? block@49 : block@50
            block@49: // ternary_true_L45
                let ternary_result%74#0: bytes = true#0
                goto block@51
            block@50: // ternary_false_L45
                let ternary_result%74#1: bytes = false#0
                goto block@51
            block@51: // ternary_merge_L45
                let ternary_result%74#2: bytes = Phi(ternary_result%74#0 <- block@49, ternary_result%74#1 <- block@50)
                let tmp%75#0: uint64 = (== ternary_result%74#2 true#0)
                (assert tmp%75#0)
                let tmp%76#0: uint64 = (len false#0)
                goto tmp%76#0 ? block@52 : block@53
            block@52: // ternary_true_L46
                let ternary_result%77#0: bytes = false#0
                goto block@54
            block@53: // ternary_false_L46
                let ternary_result%77#1: bytes = true#0
                goto block@54
            block@54: // ternary_merge_L46
                let ternary_result%77#2: bytes = Phi(ternary_result%77#0 <- block@52, ternary_result%77#1 <- block@53)
                let tmp%78#0: uint64 = (== ternary_result%77#2 true#0)
                (assert tmp%78#0)
                let tmp%79#0: uint64 = (len false#0)
                goto tmp%79#0 ? block@55 : block@56
            block@55: // ternary_true_L47
                let ternary_result%80#0: bytes = false#0
                goto block@57
            block@56: // ternary_false_L47
                let ternary_result%80#1: bytes = false#0
                goto block@57
            block@57: // ternary_merge_L47
                let ternary_result%80#2: bytes = Phi(ternary_result%80#0 <- block@55, ternary_result%80#1 <- block@56)
                let tmp%81#0: uint64 = (== ternary_result%80#2 false#0)
                (assert tmp%81#0)
                let a#0: bytes = 0x00
                let b#0: bytes = 0x0f
                let c#2: bytes = 0xf0
                let d#0: bytes = 0xff
                let tmp%82#0: bytes = (b& a#0 b#0)
                let tmp%83#0: uint64 = (== tmp%82#0 a#0)
                (assert tmp%83#0)
                let tmp%84#0: bytes = (b| b#0 c#2)
                let tmp%85#0: uint64 = (== tmp%84#0 d#0)
                (assert tmp%85#0)
                let tmp%86#0: bytes = (b^ b#0 d#0)
                let tmp%87#0: uint64 = (== tmp%86#0 c#2)
                (assert tmp%87#0)
                let y#0: bytes = a#0
                let y#1: bytes = (b& y#0 d#0)
                let tmp%88#0: uint64 = (== y#1 a#0)
                (assert tmp%88#0)
                let y#2: bytes = (b| y#1 d#0)
                let tmp%89#0: uint64 = (== y#2 d#0)
                (assert tmp%89#0)
                let y#3: bytes = (b^ y#2 c#2)
                let tmp%90#0: uint64 = (== y#3 b#0)
                (assert tmp%90#0)
                return 1u
    
    program clear-state:
        subroutine examples.stubs.bytes.BytesContract.clear_state_program() -> uint64:
            block@0: // L70
                return 1u