main examples.calculator.contract.MyContract.approval_program:
    block@0: // L19
        let num_args#0: uint64 = (txn NumAppArgs)
        goto num_args#0 ? block@2 : block@1
    block@1: // if_body_L22
        let a#0: uint64 = 0u
        let b#0: uint64 = 0u
        let action#0: uint64 = 0u
        let tmp%1#0: bytes = (itob 0u)
        (log tmp%1#0)
        (log tmp%1#0)
        goto block@3
    block@2: // else_body_L28
        let tmp%3#0: bool = (== num_args#0 3u)
        (assert tmp%3#0) // Expected 3 args
        let action_b#0: bytes = (txna ApplicationArgs 0)
        let action#1: uint64 = (btoi action_b#0)
        let a_bytes#0: bytes = (txna ApplicationArgs 1)
        let b_bytes#0: bytes = (txna ApplicationArgs 2)
        (log a_bytes#0)
        (log b_bytes#0)
        let a#1: uint64 = (btoi a_bytes#0)
        let b#1: uint64 = (btoi b_bytes#0)
        goto block@3
    block@3: // after_if_else_L21
        let action#2: uint64 = φ(action#0 <- block@1, action#1 <- block@2)
        let a#2: uint64 = φ(a#0 <- block@1, a#1 <- block@2)
        let b#2: uint64 = φ(b#0 <- block@1, b#1 <- block@2)
        let tmp%0#1: bool = (== action#2 1u)
        goto tmp%0#1 ? block@5 : block@6
    block@5: // if_body_L59
        let tmp%0#5: uint64 = (+ a#2 b#2)
        goto block@13
    block@6: // else_body_L60
        let tmp%2#1: bool = (== action#2 2u)
        goto tmp%2#1 ? block@7 : block@8
    block@7: // if_body_L61
        let tmp%0#4: uint64 = (- a#2 b#2)
        goto block@13
    block@8: // else_body_L62
        let tmp%4#1: bool = (== action#2 3u)
        goto tmp%4#1 ? block@9 : block@10
    block@9: // if_body_L63
        let tmp%0#3: uint64 = (* a#2 b#2)
        goto block@13
    block@10: // else_body_L64
        let tmp%6#1: bool = (== action#2 4u)
        (assert tmp%6#1) // unknown operation
        let tmp%0#2: uint64 = (/ a#2 b#2)
        goto block@13
    block@13: // after_inlined_examples.calculator.contract.MyContract.do_calc_L21
        let result#0: uint64 = φ(tmp%0#5 <- block@5, tmp%0#4 <- block@7, tmp%0#3 <- block@9, tmp%0#2 <- block@10)
        let tmp%4#0: bytes = examples.calculator.contract.itoa(a#2)
        goto tmp%0#1 ? block@15 : block@16
    block@15: // if_body_L46
        let examples.calculator.contract.MyContract.op%0#0: bytes[3] = 0x202b20
        goto block@23
    block@16: // else_body_L47
        let tmp%1#2: bool = (== action#2 2u)
        goto tmp%1#2 ? block@17 : block@18
    block@17: // if_body_L48
        let examples.calculator.contract.MyContract.op%0#1: bytes[3] = 0x202d20
        goto block@23
    block@18: // else_body_L49
        let tmp%2#2: bool = (== action#2 3u)
        goto tmp%2#2 ? block@19 : block@20
    block@19: // if_body_L50
        let examples.calculator.contract.MyContract.op%0#2: bytes[3] = 0x202a20
        goto block@23
    block@20: // else_body_L51
        let tmp%3#2: bool = (== action#2 4u)
        goto tmp%3#2 ? block@21 : block@22
    block@21: // if_body_L52
        let examples.calculator.contract.MyContract.op%0#3: bytes[4] = 0x202f2f20
        goto block@23
    block@22: // else_body_L54
        let examples.calculator.contract.MyContract.op%0#4: bytes[3] = 0x202d20
        goto block@23
    block@23: // after_inlined_examples.calculator.contract.MyContract.op_L21
        let tmp%5#0: bytes = φ(examples.calculator.contract.MyContract.op%0#0 <- block@15, examples.calculator.contract.MyContract.op%0#1 <- block@17, examples.calculator.contract.MyContract.op%0#2 <- block@19, examples.calculator.contract.MyContract.op%0#3 <- block@21, examples.calculator.contract.MyContract.op%0#4 <- block@22)
        let tmp%6#0: bytes = (concat tmp%4#0 tmp%5#0)
        let tmp%7#0: bytes = examples.calculator.contract.itoa(b#2)
        let tmp%8#0: bytes = (concat tmp%6#0 tmp%7#0)
        let tmp%9#0: bytes = (concat tmp%8#0 0x203d20)
        let tmp%10#0: bytes = examples.calculator.contract.itoa(result#0)
        let result_b#0: bytes = (concat tmp%9#0 tmp%10#0)
        (log result_b#0)
        return 1u

subroutine examples.calculator.contract.itoa(i: uint64) -> bytes:
    block@0: // L9
        let tmp%0#0: bool = (< i#0 10u)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L14
        let read_bytes%0#0: bytes = (extract3 0x30313233343536373839 i#0 1u) // on error: Index access is out of bounds
        return read_bytes%0#0
    block@2: // after_if_else_L13
        let tmp%1#0: uint64 = (/ i#0 10u)
        let tmp%2#0: bytes = examples.calculator.contract.itoa(tmp%1#0)
        let tmp%3#0: uint64 = (% i#0 10u)
        let read_bytes%1#0: bytes = (extract3 0x30313233343536373839 tmp%3#0 1u) // on error: Index access is out of bounds
        let tmp%4#0: bytes = (concat tmp%2#0 read_bytes%1#0)
        return tmp%4#0