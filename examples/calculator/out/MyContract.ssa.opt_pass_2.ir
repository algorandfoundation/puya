contract examples.calculator.contract.MyContract:
    program approval:
        subroutine examples.calculator.contract.MyContract.approval_program() -> uint64:
            block@0: // L19
                let num_args#0: uint64 = (txn NumAppArgs)
                goto num_args#0 ? block@2 : block@1
            block@1: // if_body_L21
                let a#0: uint64 = 0u
                let b#0: uint64 = 0u
                let action#0: uint64 = 0u
                let tmp%1#0: bytes = (itob 0u)
                (log tmp%1#0)
                (log tmp%1#0)
                goto block@3
            block@2: // else_body_L21
                let tmp%3#0: bool = (== num_args#0 3u)
                (assert tmp%3#0) // Expected 3 args
                let action_b#0: bytes = (txna ApplicationArgs 0)
                let action#1: uint64 = (btoi action_b#0)
                let a_bytes#0: bytes = (txna ApplicationArgs 1)
                let b_bytes#0: bytes = (txna ApplicationArgs 2)
                (log a_bytes#0)
                (log b_bytes#0)
                let a#1: uint64 = (btoi a_bytes#0)
                let b#1: uint64 = (btoi b_bytes#0)
                goto block@3
            block@3: // after_if_else_L21
                let action#2: uint64 = φ(action#0 <- block@1, action#1 <- block@2)
                let a#2: uint64 = φ(a#0 <- block@1, a#1 <- block@2)
                let b#2: uint64 = φ(b#0 <- block@1, b#1 <- block@2)
                let result#0: uint64 = examples.calculator.contract.MyContract.do_calc(action#2, a#2, b#2)
                let tmp%4#0: bytes = examples.calculator.contract.itoa(a#2)
                let tmp%5#0: bytes = examples.calculator.contract.MyContract.op(action#2)
                let tmp%6#0: bytes = (concat tmp%4#0 tmp%5#0)
                let tmp%7#0: bytes = examples.calculator.contract.itoa(b#2)
                let tmp%8#0: bytes = (concat tmp%6#0 tmp%7#0)
                let tmp%9#0: bytes = (concat tmp%8#0 " = ")
                let tmp%10#0: bytes = examples.calculator.contract.itoa(result#0)
                let result_b#0: bytes = (concat tmp%9#0 tmp%10#0)
                (log result_b#0)
                return 1u
        
        subroutine examples.calculator.contract.MyContract.do_calc(maybe_action: uint64, a: uint64, b: uint64) -> uint64:
            block@0: // L56
                let tmp%0#0: bool = (== maybe_action#0 1u)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // if_body_L58
                let tmp%1#0: uint64 = examples.calculator.contract.MyContract.add(a#0, b#0)
                return tmp%1#0
            block@2: // else_body_L58
                let tmp%2#0: bool = (== maybe_action#0 2u)
                goto tmp%2#0 ? block@3 : block@4
            block@3: // if_body_L60
                let tmp%3#0: uint64 = examples.calculator.contract.MyContract.sub(a#0, b#0)
                return tmp%3#0
            block@4: // else_body_L60
                let tmp%4#0: bool = (== maybe_action#0 3u)
                goto tmp%4#0 ? block@5 : block@6
            block@5: // if_body_L62
                let tmp%5#0: uint64 = examples.calculator.contract.MyContract.mul(a#0, b#0)
                return tmp%5#0
            block@6: // else_body_L62
                let tmp%6#0: bool = (== maybe_action#0 4u)
                (assert tmp%6#0) // unknown operation
                let tmp%7#0: uint64 = examples.calculator.contract.MyContract.div(a#0, b#0)
                return tmp%7#0
        
        subroutine examples.calculator.contract.MyContract.add(a: uint64, b: uint64) -> uint64:
            block@0: // L69
                let tmp%0#0: uint64 = (+ a#0 b#0)
                return tmp%0#0
        
        subroutine examples.calculator.contract.MyContract.sub(a: uint64, b: uint64) -> uint64:
            block@0: // L73
                let tmp%0#0: uint64 = (- a#0 b#0)
                return tmp%0#0
        
        subroutine examples.calculator.contract.MyContract.mul(a: uint64, b: uint64) -> uint64:
            block@0: // L77
                let tmp%0#0: uint64 = (* a#0 b#0)
                return tmp%0#0
        
        subroutine examples.calculator.contract.MyContract.div(a: uint64, b: uint64) -> uint64:
            block@0: // L81
                let tmp%0#0: uint64 = (/ a#0 b#0)
                return tmp%0#0
        
        subroutine examples.calculator.contract.itoa(i: uint64) -> bytes:
            block@0: // L9
                let tmp%0#0: bool = (< i#0 10u)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // if_body_L13
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%1#0: bytes = (substring3 0x30313233343536373839 i#0 index_plus_1%0#0)
                return tmp%1#0
            block@2: // after_if_else_L13
                let tmp%2#0: uint64 = (/ i#0 10u)
                let tmp%3#0: bytes = examples.calculator.contract.itoa(tmp%2#0)
                let tmp%4#0: uint64 = (% i#0 10u)
                let index_plus_1%1#0: uint64 = (+ tmp%4#0 1u)
                let tmp%5#0: bytes = (substring3 0x30313233343536373839 tmp%4#0 index_plus_1%1#0)
                let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
                return tmp%6#0
        
        subroutine examples.calculator.contract.MyContract.op(action: uint64) -> bytes:
            block@0: // L43
                let tmp%0#0: bool = (== action#0 1u)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // if_body_L45
                return 0x202b20
            block@2: // else_body_L45
                let tmp%1#0: bool = (== action#0 2u)
                goto tmp%1#0 ? block@3 : block@4
            block@3: // if_body_L47
                return 0x202d20
            block@4: // else_body_L47
                let tmp%2#0: bool = (== action#0 3u)
                goto tmp%2#0 ? block@5 : block@6
            block@5: // if_body_L49
                return 0x202a20
            block@6: // else_body_L49
                let tmp%3#0: bool = (== action#0 4u)
                goto tmp%3#0 ? block@7 : block@8
            block@7: // if_body_L51
                return 0x202f2f20
            block@8: // else_body_L51
                return 0x202d20
    
    program clear-state:
        subroutine examples.calculator.contract.MyContract.clear_state_program() -> bool:
            block@0: // L85
                return 1u