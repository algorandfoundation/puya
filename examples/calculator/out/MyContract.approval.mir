// Op                                                                           Stack (out)
// examples.calculator.contract.MyContract.approval_program() -> uint64:
main:
    allocate 2 to stack                                                         (𝕗) a#0,action#0 |

main_block@0:                                                                   (𝕗) a#0,action#0 |
    // calculator/contract.py:20
    // num_args = Txn.num_app_args
    txn NumAppArgs                                                              (𝕗) a#0,action#0 | num_args#0
    l-store-copy num_args#0 0                                                   (𝕗) a#0,action#0 | num_args#0,num_args#0
    f-store num_args#0                                                          (𝕗) a#0,action#0,num_args#0 | num_args#0
    // calculator/contract.py:21
    // if num_args == 0:
    l-load num_args#0 0                                                         (𝕗) a#0,action#0,num_args#0 | num_args#0
    bnz main_else_body@2                                                        (𝕗) a#0,action#0,num_args#0 |
    // Implicit fall through to main_if_body@1                                  (𝕗) a#0,action#0,num_args#0 |

main_if_body@1:                                                                 (𝕗) a#0,action#0,num_args#0 |
    // calculator/contract.py:22
    // a = UInt64(0)
    int 0                                                                       (𝕗) a#0,action#0,num_args#0 | a#0
    f-store a#0                                                                 (𝕗) a#0,action#0,num_args#0 |
    // calculator/contract.py:23
    // b = UInt64(0)
    int 0                                                                       (𝕗) a#0,action#0,num_args#0 | b#0
    x-store b#0                                                                 (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 |
    // calculator/contract.py:24
    // action = UInt64(0)
    int 0                                                                       (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 | action#0
    f-store action#0                                                            (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 |
    // calculator/contract.py:22
    // a = UInt64(0)
    int 0                                                                       (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 | 0
    // calculator/contract.py:25
    // log(a)
    itob                                                                        (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 | tmp%1#0
    l-load-copy tmp%1#0 0                                                       (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 | tmp%1#0,tmp%1#0 (copy)
    log                                                                         (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 | tmp%1#0
    // calculator/contract.py:26
    // log(b)
    l-load tmp%1#0 0                                                            (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 | tmp%1#0
    log                                                                         (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 |
    b main_after_if_else@3                                                      (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 |

main_else_body@2:                                                               (𝕗) a#0,action#0,num_args#0 |
    // calculator/contract.py:28
    // assert num_args == 3, "Expected 3 args"
    f-load num_args#0                                                           (𝕗) a#0,action#0,num_args#0 | num_args#0
    int 3                                                                       (𝕗) a#0,action#0,num_args#0 | num_args#0,3
    ==                                                                          (𝕗) a#0,action#0,num_args#0 | tmp%3#0
    assert // Expected 3 args                                                   (𝕗) a#0,action#0,num_args#0 |
    // calculator/contract.py:29
    // action_b = Txn.application_args(0)
    txna ApplicationArgs 0                                                      (𝕗) a#0,action#0,num_args#0 | action_b#0
    // calculator/contract.py:30
    // action = op.btoi(action_b)
    btoi                                                                        (𝕗) a#0,action#0,num_args#0 | action#0
    f-store action#0                                                            (𝕗) a#0,action#0,num_args#0 |
    // calculator/contract.py:31
    // a_bytes = Txn.application_args(1)
    txna ApplicationArgs 1                                                      (𝕗) a#0,action#0,num_args#0 | a_bytes#0
    // calculator/contract.py:32
    // b_bytes = Txn.application_args(2)
    txna ApplicationArgs 2                                                      (𝕗) a#0,action#0,num_args#0 | a_bytes#0,b_bytes#0
    // calculator/contract.py:33
    // log(a_bytes)
    l-load-copy a_bytes#0 1                                                     (𝕗) a#0,action#0,num_args#0 | a_bytes#0,b_bytes#0,a_bytes#0 (copy)
    log                                                                         (𝕗) a#0,action#0,num_args#0 | a_bytes#0,b_bytes#0
    // calculator/contract.py:34
    // log(b_bytes)
    l-load-copy b_bytes#0 0                                                     (𝕗) a#0,action#0,num_args#0 | a_bytes#0,b_bytes#0,b_bytes#0 (copy)
    log                                                                         (𝕗) a#0,action#0,num_args#0 | a_bytes#0,b_bytes#0
    // calculator/contract.py:35
    // a = op.btoi(a_bytes)
    l-load a_bytes#0 1                                                          (𝕗) a#0,action#0,num_args#0 | b_bytes#0,a_bytes#0
    btoi                                                                        (𝕗) a#0,action#0,num_args#0 | b_bytes#0,a#0
    f-store a#0                                                                 (𝕗) a#0,action#0,num_args#0 | b_bytes#0
    // calculator/contract.py:36
    // b = op.btoi(b_bytes)
    l-load b_bytes#0 0                                                          (𝕗) a#0,action#0,num_args#0 | b_bytes#0
    btoi                                                                        (𝕗) a#0,action#0,num_args#0 | b#0
    x-store b#0                                                                 (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 |
    // Implicit fall through to main_after_if_else@3                            (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 |

main_after_if_else@3:                                                           (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 |
    // calculator/contract.py:38
    // result = self.do_calc(action, a, b)
    f-load action#0                                                             (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 | action#0
    l-store-copy action#0 0                                                     (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 | action#0,action#0 (copy)
    f-load a#0                                                                  (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 | action#0,action#0 (copy),a#0
    l-store-copy a#0 1                                                          (𝕗) a#0,action#0,num_args#0 | (𝕏) b#0 | action#0,a#0,action#0 (copy),a#0 (copy)
    x-load b#0                                                                  (𝕗) a#0,action#0,num_args#0 | action#0,a#0,action#0 (copy),a#0 (copy),b#0
    l-store-copy b#0 4                                                          (𝕗) a#0,action#0,num_args#0 | b#0,action#0,a#0,action#0 (copy),a#0 (copy),b#0 (copy)
    callsub do_calc                                                             (𝕗) a#0,action#0,num_args#0 | b#0,action#0,a#0,result#0
    // calculator/contract.py:39
    // result_b = itoa(a) + self.op(action) + itoa(b) + b" = " + itoa(result)
    l-load a#0 1                                                                (𝕗) a#0,action#0,num_args#0 | b#0,action#0,result#0,a#0
    callsub itoa                                                                (𝕗) a#0,action#0,num_args#0 | b#0,action#0,result#0,tmp%4#0
    l-load action#0 2                                                           (𝕗) a#0,action#0,num_args#0 | b#0,result#0,tmp%4#0,action#0
    callsub op                                                                  (𝕗) a#0,action#0,num_args#0 | b#0,result#0,tmp%4#0,tmp%5#0
    l-load tmp%4#0 1                                                            (𝕗) a#0,action#0,num_args#0 | b#0,result#0,tmp%5#0,tmp%4#0
    l-load tmp%5#0 1                                                            (𝕗) a#0,action#0,num_args#0 | b#0,result#0,tmp%4#0,tmp%5#0
    concat                                                                      (𝕗) a#0,action#0,num_args#0 | b#0,result#0,tmp%6#0
    l-load b#0 2                                                                (𝕗) a#0,action#0,num_args#0 | result#0,tmp%6#0,b#0
    callsub itoa                                                                (𝕗) a#0,action#0,num_args#0 | result#0,tmp%6#0,tmp%7#0
    l-load tmp%6#0 1                                                            (𝕗) a#0,action#0,num_args#0 | result#0,tmp%7#0,tmp%6#0
    l-load tmp%7#0 1                                                            (𝕗) a#0,action#0,num_args#0 | result#0,tmp%6#0,tmp%7#0
    concat                                                                      (𝕗) a#0,action#0,num_args#0 | result#0,tmp%8#0
    byte 0x203d20                                                               (𝕗) a#0,action#0,num_args#0 | result#0,tmp%8#0,0x203d20
    concat                                                                      (𝕗) a#0,action#0,num_args#0 | result#0,tmp%9#0
    l-load result#0 1                                                           (𝕗) a#0,action#0,num_args#0 | tmp%9#0,result#0
    callsub itoa                                                                (𝕗) a#0,action#0,num_args#0 | tmp%9#0,tmp%10#0
    l-load tmp%9#0 1                                                            (𝕗) a#0,action#0,num_args#0 | tmp%10#0,tmp%9#0
    l-load tmp%10#0 1                                                           (𝕗) a#0,action#0,num_args#0 | tmp%9#0,tmp%10#0
    concat                                                                      (𝕗) a#0,action#0,num_args#0 | result_b#0
    // calculator/contract.py:40
    // log(result_b)
    log                                                                         (𝕗) a#0,action#0,num_args#0 |
    // calculator/contract.py:41
    // return UInt64(1)
    int 1                                                                       (𝕗) a#0,action#0,num_args#0 | 1
    return                                                                      (𝕗) a#0,action#0,num_args#0 |


// examples.calculator.contract.MyContract.do_calc(maybe_action: uint64, a: uint64, b: uint64) -> uint64:
do_calc:                                                                        (𝕡) maybe_action#0,a#0,b#0 |
    // calculator/contract.py:56-57
    // @subroutine
    // def do_calc(self, maybe_action: UInt64, a: UInt64, b: UInt64) -> UInt64:
    proto 3 1                                                                   (𝕡) maybe_action#0,a#0,b#0 |

do_calc_block@0:                                                                (𝕡) maybe_action#0,a#0,b#0 |
    // calculator/contract.py:58
    // if maybe_action == ADD:
    p-load maybe_action#0                                                       (𝕡) maybe_action#0,a#0,b#0 | maybe_action#0 (copy)
    int 1                                                                       (𝕡) maybe_action#0,a#0,b#0 | maybe_action#0 (copy),1
    ==                                                                          (𝕡) maybe_action#0,a#0,b#0 | tmp%0#0
    bz do_calc_else_body@2                                                      (𝕡) maybe_action#0,a#0,b#0 |
    // Implicit fall through to do_calc_if_body@1                               (𝕡) maybe_action#0,a#0,b#0 |

do_calc_if_body@1:                                                              (𝕡) maybe_action#0,a#0,b#0 |
    // calculator/contract.py:59
    // return self.add(a, b)
    p-load a#0                                                                  (𝕡) maybe_action#0,a#0,b#0 | a#0 (copy)
    p-load b#0                                                                  (𝕡) maybe_action#0,a#0,b#0 | a#0 (copy),b#0 (copy)
    callsub add                                                                 (𝕡) maybe_action#0,a#0,b#0 | tmp%1#0
    retsub                                                                      tmp%1#0

do_calc_else_body@2:                                                            (𝕡) maybe_action#0,a#0,b#0 |
    // calculator/contract.py:60
    // elif maybe_action == SUB:
    p-load maybe_action#0                                                       (𝕡) maybe_action#0,a#0,b#0 | maybe_action#0 (copy)
    int 2                                                                       (𝕡) maybe_action#0,a#0,b#0 | maybe_action#0 (copy),2
    ==                                                                          (𝕡) maybe_action#0,a#0,b#0 | tmp%2#0
    bz do_calc_else_body@4                                                      (𝕡) maybe_action#0,a#0,b#0 |
    // Implicit fall through to do_calc_if_body@3                               (𝕡) maybe_action#0,a#0,b#0 |

do_calc_if_body@3:                                                              (𝕡) maybe_action#0,a#0,b#0 |
    // calculator/contract.py:61
    // return self.sub(a, b)
    p-load a#0                                                                  (𝕡) maybe_action#0,a#0,b#0 | a#0 (copy)
    p-load b#0                                                                  (𝕡) maybe_action#0,a#0,b#0 | a#0 (copy),b#0 (copy)
    callsub sub                                                                 (𝕡) maybe_action#0,a#0,b#0 | tmp%3#0
    retsub                                                                      tmp%3#0

do_calc_else_body@4:                                                            (𝕡) maybe_action#0,a#0,b#0 |
    // calculator/contract.py:62
    // elif maybe_action == MUL:
    p-load maybe_action#0                                                       (𝕡) maybe_action#0,a#0,b#0 | maybe_action#0 (copy)
    int 3                                                                       (𝕡) maybe_action#0,a#0,b#0 | maybe_action#0 (copy),3
    ==                                                                          (𝕡) maybe_action#0,a#0,b#0 | tmp%4#0
    bz do_calc_else_body@6                                                      (𝕡) maybe_action#0,a#0,b#0 |
    // Implicit fall through to do_calc_if_body@5                               (𝕡) maybe_action#0,a#0,b#0 |

do_calc_if_body@5:                                                              (𝕡) maybe_action#0,a#0,b#0 |
    // calculator/contract.py:63
    // return self.mul(a, b)
    p-load a#0                                                                  (𝕡) maybe_action#0,a#0,b#0 | a#0 (copy)
    p-load b#0                                                                  (𝕡) maybe_action#0,a#0,b#0 | a#0 (copy),b#0 (copy)
    callsub mul                                                                 (𝕡) maybe_action#0,a#0,b#0 | tmp%5#0
    retsub                                                                      tmp%5#0

do_calc_else_body@6:                                                            (𝕡) maybe_action#0,a#0,b#0 |
    // calculator/contract.py:64
    // elif maybe_action == DIV:
    p-load maybe_action#0                                                       (𝕡) maybe_action#0,a#0,b#0 | maybe_action#0 (copy)
    int 4                                                                       (𝕡) maybe_action#0,a#0,b#0 | maybe_action#0 (copy),4
    ==                                                                          (𝕡) maybe_action#0,a#0,b#0 | tmp%6#0
    assert // unknown operation                                                 (𝕡) maybe_action#0,a#0,b#0 |
    // calculator/contract.py:65
    // return self.div(a, b)
    p-load a#0                                                                  (𝕡) maybe_action#0,a#0,b#0 | a#0 (copy)
    p-load b#0                                                                  (𝕡) maybe_action#0,a#0,b#0 | a#0 (copy),b#0 (copy)
    callsub div                                                                 (𝕡) maybe_action#0,a#0,b#0 | tmp%7#0
    retsub                                                                      tmp%7#0


// examples.calculator.contract.MyContract.add(a: uint64, b: uint64) -> uint64:
add:                                                                            (𝕡) a#0,b#0 |
    // calculator/contract.py:69-70
    // @subroutine
    // def add(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1                                                                   (𝕡) a#0,b#0 |

add_block@0:                                                                    (𝕡) a#0,b#0 |
    // calculator/contract.py:71
    // return a + b
    p-load a#0                                                                  (𝕡) a#0,b#0 | a#0 (copy)
    p-load b#0                                                                  (𝕡) a#0,b#0 | a#0 (copy),b#0 (copy)
    +                                                                           (𝕡) a#0,b#0 | tmp%0#0
    retsub                                                                      tmp%0#0


// examples.calculator.contract.MyContract.sub(a: uint64, b: uint64) -> uint64:
sub:                                                                            (𝕡) a#0,b#0 |
    // calculator/contract.py:73-74
    // @subroutine
    // def sub(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1                                                                   (𝕡) a#0,b#0 |

sub_block@0:                                                                    (𝕡) a#0,b#0 |
    // calculator/contract.py:75
    // return a - b
    p-load a#0                                                                  (𝕡) a#0,b#0 | a#0 (copy)
    p-load b#0                                                                  (𝕡) a#0,b#0 | a#0 (copy),b#0 (copy)
    -                                                                           (𝕡) a#0,b#0 | tmp%0#0
    retsub                                                                      tmp%0#0


// examples.calculator.contract.MyContract.mul(a: uint64, b: uint64) -> uint64:
mul:                                                                            (𝕡) a#0,b#0 |
    // calculator/contract.py:77-78
    // @subroutine
    // def mul(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1                                                                   (𝕡) a#0,b#0 |

mul_block@0:                                                                    (𝕡) a#0,b#0 |
    // calculator/contract.py:79
    // return a * b
    p-load a#0                                                                  (𝕡) a#0,b#0 | a#0 (copy)
    p-load b#0                                                                  (𝕡) a#0,b#0 | a#0 (copy),b#0 (copy)
    *                                                                           (𝕡) a#0,b#0 | tmp%0#0
    retsub                                                                      tmp%0#0


// examples.calculator.contract.MyContract.div(a: uint64, b: uint64) -> uint64:
div:                                                                            (𝕡) a#0,b#0 |
    // calculator/contract.py:81-82
    // @subroutine
    // def div(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1                                                                   (𝕡) a#0,b#0 |

div_block@0:                                                                    (𝕡) a#0,b#0 |
    // calculator/contract.py:83
    // return a // b
    p-load a#0                                                                  (𝕡) a#0,b#0 | a#0 (copy)
    p-load b#0                                                                  (𝕡) a#0,b#0 | a#0 (copy),b#0 (copy)
    /                                                                           (𝕡) a#0,b#0 | tmp%0#0
    retsub                                                                      tmp%0#0


// examples.calculator.contract.itoa(i: uint64) -> bytes:
itoa:                                                                           (𝕡) i#0 |
    // calculator/contract.py:9-10
    // @subroutine
    // def itoa(i: UInt64) -> Bytes:
    proto 1 1                                                                   (𝕡) i#0 |

itoa_block@0:                                                                   (𝕡) i#0 |
    // calculator/contract.py:13
    // if i < radix:
    p-load i#0                                                                  (𝕡) i#0 | i#0 (copy)
    // calculator/contract.py:12
    // radix = digits.length
    int 10                                                                      (𝕡) i#0 | i#0 (copy),10
    // calculator/contract.py:13
    // if i < radix:
    <                                                                           (𝕡) i#0 | tmp%0#0
    bz itoa_after_if_else@2                                                     (𝕡) i#0 |
    // Implicit fall through to itoa_if_body@1                                  (𝕡) i#0 |

itoa_if_body@1:                                                                 (𝕡) i#0 |
    // calculator/contract.py:14
    // return digits[i]
    p-load i#0                                                                  (𝕡) i#0 | i#0 (copy)
    int 1                                                                       (𝕡) i#0 | i#0 (copy),1
    +                                                                           (𝕡) i#0 | index_plus_1%0#0
    // calculator/contract.py:11
    // digits = Bytes(b"0123456789")
    byte 0x30313233343536373839                                                 (𝕡) i#0 | index_plus_1%0#0,0x30313233343536373839
    // calculator/contract.py:14
    // return digits[i]
    p-load i#0                                                                  (𝕡) i#0 | index_plus_1%0#0,0x30313233343536373839,i#0 (copy)
    l-load index_plus_1%0#0 2                                                   (𝕡) i#0 | 0x30313233343536373839,i#0 (copy),index_plus_1%0#0
    substring3                                                                  (𝕡) i#0 | tmp%1#0
    retsub                                                                      tmp%1#0

itoa_after_if_else@2:                                                           (𝕡) i#0 |
    // calculator/contract.py:15
    // return itoa(i // radix) + digits[i % radix]
    p-load i#0                                                                  (𝕡) i#0 | i#0 (copy)
    // calculator/contract.py:12
    // radix = digits.length
    int 10                                                                      (𝕡) i#0 | i#0 (copy),10
    // calculator/contract.py:15
    // return itoa(i // radix) + digits[i % radix]
    /                                                                           (𝕡) i#0 | tmp%2#0
    callsub itoa                                                                (𝕡) i#0 | tmp%3#0
    p-load i#0                                                                  (𝕡) i#0 | tmp%3#0,i#0 (copy)
    // calculator/contract.py:12
    // radix = digits.length
    int 10                                                                      (𝕡) i#0 | tmp%3#0,i#0 (copy),10
    // calculator/contract.py:15
    // return itoa(i // radix) + digits[i % radix]
    %                                                                           (𝕡) i#0 | tmp%3#0,tmp%4#0
    l-load-copy tmp%4#0 0                                                       (𝕡) i#0 | tmp%3#0,tmp%4#0,tmp%4#0 (copy)
    int 1                                                                       (𝕡) i#0 | tmp%3#0,tmp%4#0,tmp%4#0 (copy),1
    +                                                                           (𝕡) i#0 | tmp%3#0,tmp%4#0,index_plus_1%1#0
    // calculator/contract.py:11
    // digits = Bytes(b"0123456789")
    byte 0x30313233343536373839                                                 (𝕡) i#0 | tmp%3#0,tmp%4#0,index_plus_1%1#0,0x30313233343536373839
    // calculator/contract.py:15
    // return itoa(i // radix) + digits[i % radix]
    l-load tmp%4#0 2                                                            (𝕡) i#0 | tmp%3#0,index_plus_1%1#0,0x30313233343536373839,tmp%4#0
    l-load index_plus_1%1#0 2                                                   (𝕡) i#0 | tmp%3#0,0x30313233343536373839,tmp%4#0,index_plus_1%1#0
    substring3                                                                  (𝕡) i#0 | tmp%3#0,tmp%5#0
    l-load tmp%3#0 1                                                            (𝕡) i#0 | tmp%5#0,tmp%3#0
    l-load tmp%5#0 1                                                            (𝕡) i#0 | tmp%3#0,tmp%5#0
    concat                                                                      (𝕡) i#0 | tmp%6#0
    retsub                                                                      tmp%6#0


// examples.calculator.contract.MyContract.op(action: uint64) -> bytes:
op:                                                                             (𝕡) action#0 |
    // calculator/contract.py:43-44
    // @subroutine
    // def op(self, action: UInt64) -> Bytes:
    proto 1 1                                                                   (𝕡) action#0 |

op_block@0:                                                                     (𝕡) action#0 |
    // calculator/contract.py:45
    // if action == ADD:
    p-load action#0                                                             (𝕡) action#0 | action#0 (copy)
    int 1                                                                       (𝕡) action#0 | action#0 (copy),1
    ==                                                                          (𝕡) action#0 | tmp%0#0
    bz op_else_body@2                                                           (𝕡) action#0 |
    // Implicit fall through to op_if_body@1                                    (𝕡) action#0 |

op_if_body@1:                                                                   (𝕡) action#0 |
    // calculator/contract.py:46
    // return Bytes(b" + ")
    byte 0x202b20                                                               (𝕡) action#0 | 0x202b20
    retsub                                                                      0x202b20

op_else_body@2:                                                                 (𝕡) action#0 |
    // calculator/contract.py:47
    // elif action == SUB:
    p-load action#0                                                             (𝕡) action#0 | action#0 (copy)
    int 2                                                                       (𝕡) action#0 | action#0 (copy),2
    ==                                                                          (𝕡) action#0 | tmp%1#0
    bz op_else_body@4                                                           (𝕡) action#0 |
    // Implicit fall through to op_if_body@3                                    (𝕡) action#0 |

op_if_body@3:                                                                   (𝕡) action#0 |
    // calculator/contract.py:48
    // return Bytes(b" - ")
    byte 0x202d20                                                               (𝕡) action#0 | 0x202d20
    retsub                                                                      0x202d20

op_else_body@4:                                                                 (𝕡) action#0 |
    // calculator/contract.py:49
    // elif action == MUL:
    p-load action#0                                                             (𝕡) action#0 | action#0 (copy)
    int 3                                                                       (𝕡) action#0 | action#0 (copy),3
    ==                                                                          (𝕡) action#0 | tmp%2#0
    bz op_else_body@6                                                           (𝕡) action#0 |
    // Implicit fall through to op_if_body@5                                    (𝕡) action#0 |

op_if_body@5:                                                                   (𝕡) action#0 |
    // calculator/contract.py:50
    // return Bytes(b" * ")
    byte 0x202a20                                                               (𝕡) action#0 | 0x202a20
    retsub                                                                      0x202a20

op_else_body@6:                                                                 (𝕡) action#0 |
    // calculator/contract.py:51
    // elif action == DIV:
    p-load action#0                                                             (𝕡) action#0 | action#0 (copy)
    int 4                                                                       (𝕡) action#0 | action#0 (copy),4
    ==                                                                          (𝕡) action#0 | tmp%3#0
    bz op_else_body@8                                                           (𝕡) action#0 |
    // Implicit fall through to op_if_body@7                                    (𝕡) action#0 |

op_if_body@7:                                                                   (𝕡) action#0 |
    // calculator/contract.py:52
    // return Bytes(b" // ")
    byte 0x202f2f20                                                             (𝕡) action#0 | 0x202f2f20
    retsub                                                                      0x202f2f20

op_else_body@8:                                                                 (𝕡) action#0 |
    // calculator/contract.py:54
    // return Bytes(b" - ")
    byte 0x202d20                                                               (𝕡) action#0 | 0x202d20
    retsub                                                                      0x202d20


