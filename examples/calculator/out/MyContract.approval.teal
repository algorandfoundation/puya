#pragma version 11
#pragma typetrack false

// examples.calculator.contract.MyContract.approval_program() -> uint64:
main:
    intcblock 0 1 3 10
    bytecblock 0x202d20 0x30313233343536373839
    intc_0 // 0
    pushbytes ""
    dupn 4
    // calculator/contract.py:20
    // num_args = Txn.num_app_args
    txn NumAppArgs
    dup
    // calculator/contract.py:21
    // if num_args == 0:
    bnz main_else_body@2
    // calculator/contract.py:22
    // a = UInt64(0)
    intc_0 // 0
    bury 6
    // calculator/contract.py:23
    // b = UInt64(0)
    intc_0 // 0
    bury 4
    // calculator/contract.py:24
    // action = UInt64(0)
    intc_0 // 0
    bury 5
    // calculator/contract.py:22
    // a = UInt64(0)
    intc_0 // 0
    // calculator/contract.py:25
    // log(a)
    itob
    dup
    log
    // calculator/contract.py:26
    // log(b)
    log

main_after_if_else@3:
    // calculator/contract.py:58
    // if maybe_action == ADD:
    dig 4
    intc_1 // 1
    ==
    dup
    bury 3
    bz main_else_body@6
    // calculator/contract.py:71
    // return a + b
    dig 5
    dig 4
    +
    bury 3

main_after_inlined_examples.calculator.contract.MyContract.do_calc@13:
    // calculator/contract.py:39
    // result_b = itoa(a) + self.op(action) + itoa(b) + b" = " + itoa(result)
    dig 5
    callsub itoa
    bury 7
    // calculator/contract.py:45
    // if action == ADD:
    dig 1
    bz main_else_body@16
    // calculator/contract.py:46
    // return Bytes(b" + ")
    pushbytes 0x202b20

main_after_inlined_examples.calculator.contract.MyContract.op@23:
    // calculator/contract.py:39
    // result_b = itoa(a) + self.op(action) + itoa(b) + b" = " + itoa(result)
    dig 7
    swap
    concat
    dig 4
    callsub itoa
    concat
    pushbytes 0x203d20
    concat
    dig 3
    callsub itoa
    concat
    // calculator/contract.py:40
    // log(result_b)
    log
    // calculator/contract.py:41
    // return UInt64(1)
    intc_1 // 1
    return

main_else_body@16:
    // calculator/contract.py:47
    // elif action == SUB:
    dig 4
    pushint 2 // 2
    ==
    bz main_else_body@18
    // calculator/contract.py:48
    // return Bytes(b" - ")
    bytec_0 // 0x202d20
    // calculator/contract.py:39
    // result_b = itoa(a) + self.op(action) + itoa(b) + b" = " + itoa(result)
    b main_after_inlined_examples.calculator.contract.MyContract.op@23

main_else_body@18:
    // calculator/contract.py:49
    // elif action == MUL:
    dig 4
    intc_2 // 3
    ==
    bz main_else_body@20
    // calculator/contract.py:50
    // return Bytes(b" * ")
    pushbytes 0x202a20
    // calculator/contract.py:39
    // result_b = itoa(a) + self.op(action) + itoa(b) + b" = " + itoa(result)
    b main_after_inlined_examples.calculator.contract.MyContract.op@23

main_else_body@20:
    // calculator/contract.py:51
    // elif action == DIV:
    dig 4
    pushint 4 // 4
    ==
    bz main_else_body@22
    // calculator/contract.py:52
    // return Bytes(b" // ")
    pushbytes 0x202f2f20
    // calculator/contract.py:39
    // result_b = itoa(a) + self.op(action) + itoa(b) + b" = " + itoa(result)
    b main_after_inlined_examples.calculator.contract.MyContract.op@23

main_else_body@22:
    // calculator/contract.py:54
    // return Bytes(b" - ")
    bytec_0 // 0x202d20
    // calculator/contract.py:39
    // result_b = itoa(a) + self.op(action) + itoa(b) + b" = " + itoa(result)
    b main_after_inlined_examples.calculator.contract.MyContract.op@23

main_else_body@6:
    // calculator/contract.py:60
    // elif maybe_action == SUB:
    dig 4
    pushint 2 // 2
    ==
    bz main_else_body@8
    // calculator/contract.py:75
    // return a - b
    dig 5
    dig 4
    -
    bury 3
    // calculator/contract.py:38
    // result = self.do_calc(action, a, b)
    b main_after_inlined_examples.calculator.contract.MyContract.do_calc@13

main_else_body@8:
    // calculator/contract.py:62
    // elif maybe_action == MUL:
    dig 4
    intc_2 // 3
    ==
    bz main_else_body@10
    // calculator/contract.py:79
    // return a * b
    dig 5
    dig 4
    *
    bury 3
    // calculator/contract.py:38
    // result = self.do_calc(action, a, b)
    b main_after_inlined_examples.calculator.contract.MyContract.do_calc@13

main_else_body@10:
    // calculator/contract.py:64
    // elif maybe_action == DIV:
    dig 4
    pushint 4 // 4
    ==
    assert // unknown operation
    // calculator/contract.py:83
    // return a // b
    dig 5
    dig 4
    /
    bury 3
    // calculator/contract.py:38
    // result = self.do_calc(action, a, b)
    b main_after_inlined_examples.calculator.contract.MyContract.do_calc@13

main_else_body@2:
    // calculator/contract.py:28
    // assert num_args == 3, "Expected 3 args"
    dup
    intc_2 // 3
    ==
    assert // Expected 3 args
    // calculator/contract.py:29
    // action_b = Txn.application_args(0)
    txna ApplicationArgs 0
    // calculator/contract.py:30
    // action = op.btoi(action_b)
    btoi
    bury 5
    // calculator/contract.py:31
    // a_bytes = Txn.application_args(1)
    txna ApplicationArgs 1
    // calculator/contract.py:32
    // b_bytes = Txn.application_args(2)
    txna ApplicationArgs 2
    // calculator/contract.py:33
    // log(a_bytes)
    dig 1
    log
    // calculator/contract.py:34
    // log(b_bytes)
    dup
    log
    // calculator/contract.py:35
    // a = op.btoi(a_bytes)
    swap
    btoi
    bury 7
    // calculator/contract.py:36
    // b = op.btoi(b_bytes)
    btoi
    bury 4
    b main_after_if_else@3


// examples.calculator.contract.itoa(i: uint64) -> bytes:
itoa:
    // calculator/contract.py:9-10
    // @subroutine
    // def itoa(i: UInt64) -> Bytes:
    proto 1 1
    // calculator/contract.py:13
    // if i < radix:
    frame_dig -1
    // calculator/contract.py:12
    // radix = digits.length
    intc_3 // 10
    // calculator/contract.py:13
    // if i < radix:
    <
    bz itoa_after_if_else@2
    // calculator/contract.py:11
    // digits = Bytes(b"0123456789")
    bytec_1 // 0x30313233343536373839
    // calculator/contract.py:14
    // return digits[i]
    frame_dig -1
    intc_1 // 1
    extract3
    retsub

itoa_after_if_else@2:
    // calculator/contract.py:15
    // return itoa(i // radix) + digits[i % radix]
    frame_dig -1
    // calculator/contract.py:12
    // radix = digits.length
    intc_3 // 10
    // calculator/contract.py:15
    // return itoa(i // radix) + digits[i % radix]
    /
    callsub itoa
    frame_dig -1
    // calculator/contract.py:12
    // radix = digits.length
    intc_3 // 10
    // calculator/contract.py:15
    // return itoa(i // radix) + digits[i % radix]
    %
    // calculator/contract.py:11
    // digits = Bytes(b"0123456789")
    bytec_1 // 0x30313233343536373839
    // calculator/contract.py:15
    // return itoa(i // radix) + digits[i % radix]
    swap
    intc_1 // 1
    extract3
    concat
    retsub
