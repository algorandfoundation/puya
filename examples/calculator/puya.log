debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=True, output_arc56=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, debug_level=1, optimization_level=1, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, paths=['calculator'], output_awst=True, output_awst_json=False, output_client=True, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
info: writing calculator/out/module.awst
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function examples.calculator.contract.itoa
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Building IR for function examples.calculator.contract.MyContract.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function examples.calculator.contract.MyContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Created Phi assignment: let action#2: uint64 = undefined while trying to resolve 'action' in block@3
debug: Added action#0 to Phi node: let action#2: uint64 = φ(action#0 <- block@1) in block@1
debug: Added action#1 to Phi node: let action#2: uint64 = φ(action#0 <- block@1, action#1 <- block@2) in block@2
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@3
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#0 <- block@1) in block@1
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#0 <- block@1, a#1 <- block@2) in block@2
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@3
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@1) in block@1
debug: Added b#1 to Phi node: let b#2: uint64 = φ(b#0 <- block@1, b#1 <- block@2) in block@2
debug: Terminated block@3
debug: Building IR for function examples.calculator.contract.MyContract.op
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Building IR for function examples.calculator.contract.MyContract.do_calc
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Building IR for function examples.calculator.contract.MyContract.add
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.calculator.contract.MyContract.sub
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.calculator.contract.MyContract.mul
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.calculator.contract.MyContract.div
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.calculator.contract.MyContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.calculator.contract.MyContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Created Phi assignment: let action#2: uint64 = undefined while trying to resolve 'action' in block@3
debug: Added action#0 to Phi node: let action#2: uint64 = φ(action#0 <- block@1) in block@1
debug: Added action#1 to Phi node: let action#2: uint64 = φ(action#0 <- block@1, action#1 <- block@2) in block@2
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@3
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#0 <- block@1) in block@1
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#0 <- block@1, a#1 <- block@2) in block@2
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@3
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@1) in block@1
debug: Added b#1 to Phi node: let b#2: uint64 = φ(b#0 <- block@1, b#1 <- block@2) in block@2
debug: Terminated block@3
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine examples.calculator.contract.MyContract.__puya_arc4_router__
debug: removing unused subroutine examples.calculator.contract.MyContract.approval_program
debug: removing unused subroutine examples.calculator.contract.MyContract.clear_state_program
debug: Building IR for function examples.calculator.contract.MyContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine examples.calculator.contract.itoa
debug: removing unused subroutine examples.calculator.contract.MyContract.__puya_arc4_router__
debug: removing unused subroutine examples.calculator.contract.MyContract.approval_program
debug: removing unused subroutine examples.calculator.contract.MyContract.op
debug: removing unused subroutine examples.calculator.contract.MyContract.do_calc
debug: removing unused subroutine examples.calculator.contract.MyContract.add
debug: removing unused subroutine examples.calculator.contract.MyContract.sub
debug: removing unused subroutine examples.calculator.contract.MyContract.mul
debug: removing unused subroutine examples.calculator.contract.MyContract.div
debug: removing unused subroutine examples.calculator.contract.MyContract.clear_state_program
debug: Output IR to calculator/out/MyContract.ir/MyContract.approval.0.ssa.ir
info: optimizing approval program of examples.calculator.contract.MyContract at level 1
debug: Begin optimization pass 1/100
calculator/contract.py:9 debug: function is auto-recursive: examples.calculator.contract.itoa
debug: marking single-use function examples.calculator.contract.MyContract.op for inlining
debug: marking single-use function examples.calculator.contract.MyContract.do_calc for inlining
debug: marking single-use function examples.calculator.contract.MyContract.add for inlining
debug: marking single-use function examples.calculator.contract.MyContract.sub for inlining
debug: marking single-use function examples.calculator.contract.MyContract.mul for inlining
debug: marking single-use function examples.calculator.contract.MyContract.div for inlining
debug: Optimizing subroutine examples.calculator.contract.MyContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
calculator/contract.py:38:9 debug: inlining call to examples.calculator.contract.MyContract.do_calc in examples.calculator.contract.MyContract.approval_program
calculator/contract.py:39:30 debug: inlining call to examples.calculator.contract.MyContract.op in examples.calculator.contract.MyContract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: action#2, maybe_action#0, action#3
debug: Found equivalence set: a#2, a#3
debug: Found equivalence set: b#2, b#3
debug: Copy propagation made 16 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== num_args#0 0u) to (! num_args#0)
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplified branch on !tmp%0#0 by swapping zero and non-zero targets
debug: simplified terminator of block@0 from goto tmp%0#0 ? block@1 : block@2 to goto num_args#0 ? block@2 : block@1
debug: inlining condition branch to err block into an assert true
debug: simplified terminator of block@10 from goto tmp%6#1 ? block@11 : block@12 to goto block@11
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@4 with block@3 in block@6
debug: Replaced predecessor block@4 with block@3 in block@5
debug: Merged linear block@4 into block@3
debug: Replaced predecessor block@11 with block@10 in block@13
debug: Merged linear block@11 into block@10
debug: Replaced predecessor block@14 with block@13 in block@16
debug: Replaced predecessor block@14 with block@13 in block@15
debug: Merged linear block@14 into block@13
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@12
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%2#0: bytes = (itob 0u) with copy of existing registers (Register(source_location=calculator/contract.py:25:16-17, ir_type=bytes, name='tmp%1', version=0),)
debug: Replacing redundant declaration let tmp%0#2: bool = (== action#2 1u) with copy of existing registers (Register(source_location=calculator/contract.py:58:11-30, ir_type=bool, name='tmp%0', version=1),)
debug: Found equivalence set: tmp%1#0, tmp%2#0
debug: Found equivalence set: tmp%0#1, tmp%0#2
debug: Copy propagation made 2 modifications
debug: Optimizing subroutine examples.calculator.contract.itoa
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (len 0x30313233343536373839) to 10u
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable digits#0
debug: Removing unused variable radix#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.calculator.contract.MyContract.op
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.calculator.contract.MyContract.do_calc
debug: Optimizer: Perform Subroutine Inlining
calculator/contract.py:65:20 debug: inlining call to examples.calculator.contract.MyContract.div in examples.calculator.contract.MyContract.do_calc
calculator/contract.py:63:20 debug: inlining call to examples.calculator.contract.MyContract.mul in examples.calculator.contract.MyContract.do_calc
calculator/contract.py:61:20 debug: inlining call to examples.calculator.contract.MyContract.sub in examples.calculator.contract.MyContract.do_calc
calculator/contract.py:59:20 debug: inlining call to examples.calculator.contract.MyContract.add in examples.calculator.contract.MyContract.do_calc
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: a#0, a#4, a#3, a#2, a#1
debug: Found equivalence set: b#0, b#4, b#3, b#2, b#1
debug: Found equivalence set: tmp%0#4, tmp%1#0
debug: Found equivalence set: tmp%0#3, tmp%3#0
debug: Found equivalence set: tmp%0#2, tmp%5#0
debug: Found equivalence set: tmp%0#1, tmp%7#0
debug: Copy propagation made 12 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: inlining condition branch to err block into an assert true
debug: simplified terminator of block@6 from goto tmp%6#0 ? block@7 : block@8 to goto block@7
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@15 with block@1 in block@16
debug: Merged linear block@15 into block@1
debug: Merged linear block@16 into block@1
debug: Replaced predecessor block@13 with block@3 in block@14
debug: Merged linear block@13 into block@3
debug: Merged linear block@14 into block@3
debug: Replaced predecessor block@11 with block@5 in block@12
debug: Merged linear block@11 into block@5
debug: Merged linear block@12 into block@5
debug: Replaced predecessor block@7 with block@6 in block@9
debug: Merged linear block@7 into block@6
debug: Replaced predecessor block@9 with block@6 in block@10
debug: Merged linear block@9 into block@6
debug: Merged linear block@10 into block@6
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@8
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.calculator.contract.MyContract.add
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.calculator.contract.MyContract.sub
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.calculator.contract.MyContract.mul
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.calculator.contract.MyContract.div
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine examples.calculator.contract.MyContract.op
debug: removing unused subroutine examples.calculator.contract.MyContract.do_calc
debug: Output IR to calculator/out/MyContract.ir/MyContract.approval.1.ssa.opt.ir
debug: Begin optimization pass 2/100
debug: marking single-use function examples.calculator.contract.MyContract.add for inlining
debug: marking single-use function examples.calculator.contract.MyContract.sub for inlining
debug: marking single-use function examples.calculator.contract.MyContract.mul for inlining
debug: marking single-use function examples.calculator.contract.MyContract.div for inlining
debug: Optimizing subroutine examples.calculator.contract.MyContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
calculator/contract.py:65:20 debug: inlining call to examples.calculator.contract.MyContract.div in examples.calculator.contract.MyContract.approval_program
calculator/contract.py:63:20 debug: inlining call to examples.calculator.contract.MyContract.mul in examples.calculator.contract.MyContract.approval_program
calculator/contract.py:61:20 debug: inlining call to examples.calculator.contract.MyContract.sub in examples.calculator.contract.MyContract.approval_program
calculator/contract.py:59:20 debug: inlining call to examples.calculator.contract.MyContract.add in examples.calculator.contract.MyContract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: a#2, a#6, a#5, a#4, a#3
debug: Found equivalence set: b#2, b#6, b#5, b#4, b#3
debug: Found equivalence set: tmp%0#5, tmp%1#1
debug: Found equivalence set: tmp%0#4, tmp%3#1
debug: Found equivalence set: tmp%0#3, tmp%5#1
debug: Found equivalence set: tmp%0#2, tmp%7#1
debug: Copy propagation made 12 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@30 with block@5 in block@31
debug: Merged linear block@30 into block@5
debug: Replaced predecessor block@31 with block@5 in block@13
debug: Merged linear block@31 into block@5
debug: Replaced predecessor block@28 with block@7 in block@29
debug: Merged linear block@28 into block@7
debug: Replaced predecessor block@29 with block@7 in block@13
debug: Merged linear block@29 into block@7
debug: Replaced predecessor block@26 with block@9 in block@27
debug: Merged linear block@26 into block@9
debug: Replaced predecessor block@27 with block@9 in block@13
debug: Merged linear block@27 into block@9
debug: Replaced predecessor block@24 with block@10 in block@25
debug: Merged linear block@24 into block@10
debug: Replaced predecessor block@25 with block@10 in block@13
debug: Merged linear block@25 into block@10
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.calculator.contract.itoa
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.calculator.contract.MyContract.add
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.calculator.contract.MyContract.sub
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.calculator.contract.MyContract.mul
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.calculator.contract.MyContract.div
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: removing unused subroutine examples.calculator.contract.MyContract.add
debug: removing unused subroutine examples.calculator.contract.MyContract.sub
debug: removing unused subroutine examples.calculator.contract.MyContract.mul
debug: removing unused subroutine examples.calculator.contract.MyContract.div
debug: Output IR to calculator/out/MyContract.ir/MyContract.approval.2.ssa.opt.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine examples.calculator.contract.MyContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.calculator.contract.itoa
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 3, ending loop
debug: Performing SSA IR destructuring for examples.calculator.contract.MyContract.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in examples.calculator.contract.MyContract.approval_program using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#5, a#1, a#2]
debug: Coalescing b#0 with [b#5, b#1, b#2]
debug: Coalescing action#0 with [action#5, action#1, action#2]
debug: Coalescing tmp%3#0 with [tmp%3#2]
debug: Coalescing tmp%0#2 with [tmp%0#5, tmp%0#4, tmp%0#3]
debug: Coalescing result#0 with [result#1]
debug: Coalescing tmp%2#1 with [tmp%2#2]
debug: Coalescing examples.calculator.contract.MyContract.op%0#0 with [examples.calculator.contract.MyContract.op%0#1, examples.calculator.contract.MyContract.op%0#2, examples.calculator.contract.MyContract.op%0#3, examples.calculator.contract.MyContract.op%0#4]
debug: Coalescing tmp%5#0 with [tmp%5#1]
debug: Coalescing resulted in 64 replacement/s
debug: Sequentializing parallel copies in examples.calculator.contract.MyContract.approval_program
debug: loc: {action#0=action#0, a#0=a#0, b#0=b#0}
debug: pred: {action#0=action#0, a#0=a#0, b#0=b#0}
debug: ready: 
debug: to_do: action#0, a#0, b#0
debug: * to_do b#0
debug: * to_do a#0
debug: * to_do action#0
debug: loc: {action#0=action#0, a#0=a#0, b#0=b#0}
debug: pred: {action#0=action#0, a#0=a#0, b#0=b#0}
debug: ready: 
debug: to_do: action#0, a#0, b#0
debug: * to_do b#0
debug: * to_do a#0
debug: * to_do action#0
debug: loc: {action#0=action#0, a#0=a#0, b#0=b#0}
debug: pred: {action#0=action#0, a#0=a#0, b#0=b#0}
debug: ready: 
debug: to_do: action#0, a#0, b#0
debug: * to_do b#0
debug: * to_do a#0
debug: * to_do action#0
debug: Performing post-SSA optimizations at level 1
debug: Performing SSA IR destructuring for examples.calculator.contract.itoa
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in examples.calculator.contract.itoa using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in examples.calculator.contract.itoa
debug: Performing post-SSA optimizations at level 1
debug: Output IR to calculator/out/MyContract.ir/MyContract.approval.3.destructured.ir
debug: Output IR to calculator/out/MyContract.ir/MyContract.clear.0.ssa.ir
info: optimizing clear program of examples.calculator.contract.MyContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.calculator.contract.MyContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 1, ending loop
debug: Performing SSA IR destructuring for examples.calculator.contract.MyContract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in examples.calculator.contract.MyContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in examples.calculator.contract.MyContract.clear_state_program
debug: Performing post-SSA optimizations at level 1
debug: Output IR to calculator/out/MyContract.ir/MyContract.clear.1.destructured.ir
debug: Inserted main.ops[1]: 'l-store-copy num_args#0 0'
debug: Replaced main.ops[3]: 'v-load num_args#0' with 'l-load num_args#0'
debug: Inserted main_if_body@1.ops[8]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_if_body@1.ops[10]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_if_body@1.ops[11]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_if_body@1.ops[13]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_else_body@2.ops[3]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_else_body@2.ops[5]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_else_body@2.ops[8]: 'l-store-copy action_b#0 0'
debug: Replaced main_else_body@2.ops[10]: 'v-load action_b#0' with 'l-load action_b#0'
debug: Inserted main_else_body@2.ops[14]: 'l-store-copy a_bytes#0 0'
debug: Replaced main_else_body@2.ops[18]: 'v-load a_bytes#0' with 'l-load a_bytes#0'
debug: Inserted main_else_body@2.ops[17]: 'l-store-copy b_bytes#0 1'
debug: Replaced main_else_body@2.ops[21]: 'v-load b_bytes#0' with 'l-load b_bytes#0'
debug: Inserted main_else_body@2.ops[20]: 'l-store-copy a_bytes#0 1'
debug: Replaced main_else_body@2.ops[24]: 'v-load a_bytes#0' with 'l-load a_bytes#0'
debug: Inserted main_else_body@2.ops[23]: 'l-store-copy b_bytes#0 1'
debug: Replaced main_else_body@2.ops[28]: 'v-load b_bytes#0' with 'l-load b_bytes#0'
debug: Inserted main_after_if_else@3.ops[3]: 'l-store-copy tmp%0#1 0'
debug: Replaced main_after_if_else@3.ops[5]: 'v-load tmp%0#1' with 'l-load tmp%0#1'
debug: Inserted main_if_body@5.ops[3]: 'l-store-copy tmp%0#2 0'
debug: Replaced main_if_body@5.ops[5]: 'v-load tmp%0#2' with 'l-load tmp%0#2'
debug: Inserted main_else_body@6.ops[3]: 'l-store-copy tmp%2#1 0'
debug: Replaced main_else_body@6.ops[5]: 'v-load tmp%2#1' with 'l-load tmp%2#1'
debug: Inserted main_if_body@7.ops[3]: 'l-store-copy tmp%0#2 0'
debug: Replaced main_if_body@7.ops[5]: 'v-load tmp%0#2' with 'l-load tmp%0#2'
debug: Inserted main_else_body@8.ops[3]: 'l-store-copy tmp%4#1 0'
debug: Replaced main_else_body@8.ops[5]: 'v-load tmp%4#1' with 'l-load tmp%4#1'
debug: Inserted main_if_body@9.ops[3]: 'l-store-copy tmp%0#2 0'
debug: Replaced main_if_body@9.ops[5]: 'v-load tmp%0#2' with 'l-load tmp%0#2'
debug: Inserted main_else_body@10.ops[3]: 'l-store-copy tmp%6#1 0'
debug: Replaced main_else_body@10.ops[5]: 'v-load tmp%6#1' with 'l-load tmp%6#1'
debug: Inserted main_else_body@10.ops[10]: 'l-store-copy tmp%0#2 0'
debug: Replaced main_else_body@10.ops[12]: 'v-load tmp%0#2' with 'l-load tmp%0#2'
debug: Inserted main_if_body@15.ops[1]: 'l-store-copy examples.calculator.contract.MyContract.op%0#0 0'
debug: Replaced main_if_body@15.ops[3]: 'v-load examples.calculator.contract.MyContract.op%0#0' with 'l-load examples.calculator.contract.MyContract.op%0#0'
debug: Inserted main_else_body@16.ops[3]: 'l-store-copy tmp%1#2 0'
debug: Replaced main_else_body@16.ops[5]: 'v-load tmp%1#2' with 'l-load tmp%1#2'
debug: Inserted main_if_body@17.ops[1]: 'l-store-copy examples.calculator.contract.MyContract.op%0#0 0'
debug: Replaced main_if_body@17.ops[3]: 'v-load examples.calculator.contract.MyContract.op%0#0' with 'l-load examples.calculator.contract.MyContract.op%0#0'
debug: Inserted main_else_body@18.ops[3]: 'l-store-copy tmp%2#1 0'
debug: Replaced main_else_body@18.ops[5]: 'v-load tmp%2#1' with 'l-load tmp%2#1'
debug: Inserted main_if_body@19.ops[1]: 'l-store-copy examples.calculator.contract.MyContract.op%0#0 0'
debug: Replaced main_if_body@19.ops[3]: 'v-load examples.calculator.contract.MyContract.op%0#0' with 'l-load examples.calculator.contract.MyContract.op%0#0'
debug: Inserted main_else_body@20.ops[3]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_else_body@20.ops[5]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_if_body@21.ops[1]: 'l-store-copy examples.calculator.contract.MyContract.op%0#0 0'
debug: Replaced main_if_body@21.ops[3]: 'v-load examples.calculator.contract.MyContract.op%0#0' with 'l-load examples.calculator.contract.MyContract.op%0#0'
debug: Inserted main_else_body@22.ops[1]: 'l-store-copy examples.calculator.contract.MyContract.op%0#0 0'
debug: Replaced main_else_body@22.ops[3]: 'v-load examples.calculator.contract.MyContract.op%0#0' with 'l-load examples.calculator.contract.MyContract.op%0#0'
debug: Inserted main_after_inlined_examples.calculator.contract.MyContract.op@23.ops[10]: 'l-store-copy tmp%8#0 0'
debug: Replaced main_after_inlined_examples.calculator.contract.MyContract.op@23.ops[12]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted main_after_inlined_examples.calculator.contract.MyContract.op@23.ops[22]: 'l-store-copy result_b#0 0'
debug: Replaced main_after_inlined_examples.calculator.contract.MyContract.op@23.ops[24]: 'v-load result_b#0' with 'l-load result_b#0'
debug: Inserted main_after_inlined_examples.calculator.contract.MyContract.op@23.ops[6]: 'l-store-copy tmp%7#0 0'
debug: Replaced main_after_inlined_examples.calculator.contract.MyContract.op@23.ops[9]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main_after_inlined_examples.calculator.contract.MyContract.op@23.ops[19]: 'l-store-copy tmp%10#0 0'
debug: Replaced main_after_inlined_examples.calculator.contract.MyContract.op@23.ops[22]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main_after_inlined_examples.calculator.contract.MyContract.op@23.ops[3]: 'l-store-copy tmp%6#0 0'
debug: Replaced main_after_inlined_examples.calculator.contract.MyContract.op@23.ops[9]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main_after_inlined_examples.calculator.contract.MyContract.op@23.ops[17]: 'l-store-copy tmp%9#0 0'
debug: Replaced main_after_inlined_examples.calculator.contract.MyContract.op@23.ops[23]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted itoa.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced itoa.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted itoa_if_body@1.ops[4]: 'l-store-copy tmp%1#0 0'
debug: Replaced itoa_if_body@1.ops[6]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted itoa_after_if_else@2.ops[3]: 'l-store-copy tmp%2#0 0'
debug: Replaced itoa_after_if_else@2.ops[5]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted itoa_after_if_else@2.ops[20]: 'l-store-copy tmp%6#0 0'
debug: Replaced itoa_after_if_else@2.ops[22]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted itoa_after_if_else@2.ops[11]: 'l-store-copy tmp%4#0 0'
debug: Replaced itoa_after_if_else@2.ops[14]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted itoa_after_if_else@2.ops[17]: 'l-store-copy tmp%5#0 0'
debug: Replaced itoa_after_if_else@2.ops[20]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted itoa_after_if_else@2.ops[7]: 'l-store-copy tmp%3#0 0'
debug: Replaced itoa_after_if_else@2.ops[20]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Found 11 edge set/s for examples.calculator.contract.MyContract.approval_program
debug: Allocated 1 variable/s to x-stack: tmp%5#0
debug: shared x-stack for main_if_body@15 -> main_after_inlined_examples.calculator.contract.MyContract.op@23: tmp%5#0
debug: shared x-stack for main_if_body@17 -> main_after_inlined_examples.calculator.contract.MyContract.op@23: tmp%5#0
debug: shared x-stack for main_if_body@19 -> main_after_inlined_examples.calculator.contract.MyContract.op@23: tmp%5#0
debug: shared x-stack for main_if_body@21 -> main_after_inlined_examples.calculator.contract.MyContract.op@23: tmp%5#0
debug: shared x-stack for main_else_body@22 -> main_after_inlined_examples.calculator.contract.MyContract.op@23: tmp%5#0
debug: Found 1 edge set/s for examples.calculator.contract.itoa
debug: examples.calculator.contract.MyContract.approval_program f-stack entry: ['tmp%4#0', 'a#0', 'action#0', 'b#0', 'result#0', 'tmp%0#1']
debug: examples.calculator.contract.MyContract.approval_program f-stack on first store: ['num_args#0']
calculator/contract.py:19 debug: optimizing TEAL subroutine examples.calculator.contract.MyContract.approval_program() -> uint64:
debug: inlining single reference block main_if_body@1 into main
debug: inlining single reference block main_if_body@5 into main_after_if_else@3
debug: inlining single reference block main_if_body@15 into main_after_inlined_examples.calculator.contract.MyContract.do_calc@13
debug: inlining single reference block main_if_body@17 into main_else_body@16
debug: inlining single reference block main_if_body@19 into main_else_body@18
debug: inlining single reference block main_if_body@21 into main_else_body@20
debug: inlining single reference block main_if_body@7 into main_else_body@6
debug: inlining single reference block main_if_body@9 into main_else_body@8
debug: removing explicit jump to fall-through block main_after_if_else@3
debug: removing explicit jump to fall-through block main_after_inlined_examples.calculator.contract.MyContract.do_calc@13
debug: removing explicit jump to fall-through block main_after_inlined_examples.calculator.contract.MyContract.op@23
calculator/contract.py:9 debug: optimizing TEAL subroutine examples.calculator.contract.itoa(i: uint64) -> bytes:
debug: inlining single reference block itoa_if_body@1 into itoa
calculator/contract.py:85 debug: optimizing TEAL subroutine examples.calculator.contract.MyContract.clear_state_program() -> uint64:
info: Writing calculator/out/MyContract.approval.teal
info: Writing calculator/out/MyContract.clear.teal
info: Writing calculator/out/MyContract.approval.bin
info: Writing calculator/out/MyContract.clear.bin
info: Writing calculator/out/MyContract.approval.puya.map
info: Writing calculator/out/MyContract.clear.puya.map