main examples.calculator.contract.MyContract.approval_program:
    block@0: // L19
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let num_args#0: uint64 = tmp%0#0
        let tmp%1#0: bool = (== num_args#0 0u)
        goto tmp%1#0 ? block@1 : block@2
    block@1: // if_body_L22
        let a#0: uint64 = 0u
        let b#0: uint64 = 0u
        let action#0: uint64 = 0u
        let tmp%2#0: bytes = (itob 0u)
        (log tmp%2#0)
        let tmp%3#0: bytes = (itob 0u)
        (log tmp%3#0)
        goto block@3
    block@2: // else_body_L28
        let tmp%4#0: bool = (== num_args#0 3u)
        (assert tmp%4#0) // Expected 3 args
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        let action_b#0: bytes = tmp%5#0
        let tmp%6#0: uint64 = (btoi action_b#0)
        let action#0: uint64 = tmp%6#0
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let a_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (txna ApplicationArgs 2)
        let b_bytes#0: bytes = tmp%8#0
        (log a_bytes#0)
        (log b_bytes#0)
        let tmp%9#0: uint64 = (btoi a_bytes#0)
        let a#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (btoi b_bytes#0)
        let b#0: uint64 = tmp%10#0
        goto block@3
    block@3: // after_if_else_L21
        let tmp%11#0: uint64 = examples.calculator.contract.MyContract.do_calc(action#0, a#0, b#0)
        let result#0: uint64 = tmp%11#0
        let tmp%12#0: bytes = examples.calculator.contract.itoa(a#0)
        let tmp%13#0: bytes = examples.calculator.contract.MyContract.op(action#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: bytes = examples.calculator.contract.itoa(b#0)
        let tmp%16#0: bytes = (concat tmp%14#0 tmp%15#0)
        let tmp%17#0: bytes = (concat tmp%16#0 0x203d20)
        let tmp%18#0: bytes = examples.calculator.contract.itoa(result#0)
        let tmp%19#0: bytes = (concat tmp%17#0 tmp%18#0)
        let result_b#0: bytes = tmp%19#0
        (log result_b#0)
        return 1u

subroutine examples.calculator.contract.itoa(i: uint64) -> bytes:
    block@0: // L9
        let tmp%0#0: uint64 = (len 0x30313233343536373839)
        let radix#0: uint64 = tmp%0#0
        let tmp%1#0: bool = (< i#0 radix#0)
        goto tmp%1#0 ? block@1 : block@2
    block@1: // if_body_L14
        let extract%0#0: bytes = (extract3 0x30313233343536373839 i#0 1u)
        return extract%0#0
    block@2: // after_if_else_L13
        let tmp%2#0: uint64 = (/ i#0 radix#0)
        let tmp%3#0: bytes = examples.calculator.contract.itoa(tmp%2#0)
        let tmp%4#0: uint64 = (% i#0 radix#0)
        let extract%1#0: bytes = (extract3 0x30313233343536373839 tmp%4#0 1u)
        let tmp%5#0: bytes = (concat tmp%3#0 extract%1#0)
        return tmp%5#0

subroutine examples.calculator.contract.MyContract.op(action: uint64) -> bytes:
    block@0: // L43
        let tmp%0#0: bool = (== action#0 1u)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L46
        return 0x202b20
    block@2: // else_body_L47
        let tmp%1#0: bool = (== action#0 2u)
        goto tmp%1#0 ? block@3 : block@4
    block@3: // if_body_L48
        return 0x202d20
    block@4: // else_body_L49
        let tmp%2#0: bool = (== action#0 3u)
        goto tmp%2#0 ? block@5 : block@6
    block@5: // if_body_L50
        return 0x202a20
    block@6: // else_body_L51
        let tmp%3#0: bool = (== action#0 4u)
        goto tmp%3#0 ? block@7 : block@8
    block@7: // if_body_L52
        return 0x202f2f20
    block@8: // else_body_L54
        return 0x202d20

subroutine examples.calculator.contract.MyContract.do_calc(maybe_action: uint64, a: uint64, b: uint64) -> uint64:
    block@0: // L56
        let tmp%0#0: bool = (== maybe_action#0 1u)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L59
        let tmp%1#0: uint64 = examples.calculator.contract.MyContract.add(a#0, b#0)
        return tmp%1#0
    block@2: // else_body_L60
        let tmp%2#0: bool = (== maybe_action#0 2u)
        goto tmp%2#0 ? block@3 : block@4
    block@3: // if_body_L61
        let tmp%3#0: uint64 = examples.calculator.contract.MyContract.sub(a#0, b#0)
        return tmp%3#0
    block@4: // else_body_L62
        let tmp%4#0: bool = (== maybe_action#0 3u)
        goto tmp%4#0 ? block@5 : block@6
    block@5: // if_body_L63
        let tmp%5#0: uint64 = examples.calculator.contract.MyContract.mul(a#0, b#0)
        return tmp%5#0
    block@6: // else_body_L64
        let tmp%6#0: bool = (== maybe_action#0 4u)
        goto tmp%6#0 ? block@7 : block@8
    block@7: // if_body_L65
        let tmp%7#0: uint64 = examples.calculator.contract.MyContract.div(a#0, b#0)
        return tmp%7#0
    block@8: // else_body_L67
        fail // unknown operation

subroutine examples.calculator.contract.MyContract.add(a: uint64, b: uint64) -> uint64:
    block@0: // L69
        let tmp%0#0: uint64 = (+ a#0 b#0)
        return tmp%0#0

subroutine examples.calculator.contract.MyContract.sub(a: uint64, b: uint64) -> uint64:
    block@0: // L73
        let tmp%0#0: uint64 = (- a#0 b#0)
        return tmp%0#0

subroutine examples.calculator.contract.MyContract.mul(a: uint64, b: uint64) -> uint64:
    block@0: // L77
        let tmp%0#0: uint64 = (* a#0 b#0)
        return tmp%0#0

subroutine examples.calculator.contract.MyContract.div(a: uint64, b: uint64) -> uint64:
    block@0: // L81
        let tmp%0#0: uint64 = (/ a#0 b#0)
        return tmp%0#0