{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBmB;;AAAX;AACe;AAAZ;AAAX;;;AACgB;AAAJ;;AACI;AACK;AAAT;;AAFI;AAGA;AAAJ;AAFI;AAGA;AAAJ;AAYJ;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAS;;;AAAT;;AACW;;;AAAU;AAAA;;;AAAV;AAA4B;AAAA;;;AAA5B;AAAsC;;;;;AAAtC;AAA+C;AAAA;;;AAA/C;AACX;AACO;AAAP;AAbW;AAAY;AAAZ;AAAP;AACW;;;AACF;AAAT;;AACU;;;AACA;;;AAAV;AACA;AAAA;AACA;;AAAA;AACI;AAAJ;;AACI;;;;AAoBhB;;;AAEW;;AAAgB;AAAhB;AAAX;;;AACmB;;AAAA;;AAAA;;;AAAP;AACC;;AAAgB;AAAhB;AAAb;;;AACmB;;AAAA;;AAAA;;;AAAP;AACC;;AAAgB;AAAhB;AAAb;;;AACmB;;AAAA;;AAAA;;;AAAP;AACC;;AAAgB;;AAAhB;AAAb;;;AACmB;;AAAA;;AAAA;;;AAAP;AAEA;AAEZ;;;AAEe;;AAAA;;AAAA;AAAP;AAER;;;AAEe;;AAAA;;AAAA;AAAP;AAER;;;AAEe;;AAAA;;AAAA;AAAP;AAER;;;AAEe;;AAAA;;AAAA;AAAP;AA1ER;;;AAEa;AACD;AAAR;AACG;;AAAA;AAAP;;;AAFa;AAGE;;AAAA;AAAA;AAAP;AAAA;AACQ;;AAAA;;AAAA;AAAA;;AAAA;AAAL;;;AAAA;AAA0B;;AAAA;AAAA;AAJxB;AAIiB;AAAA;AAAA;AAAnB;AAAP;AAAA;AA4BJ;;;AAEW;;AAAU;AAAV;AAAX;;;AACmB;;;;;AAAP;AACC;;AAAU;AAAV;AAAb;;;AACmB;AAAP;AACC;;AAAU;AAAV;AAAb;;;AACmB;;;;;AAAP;AACC;;AAAU;;AAAV;AAAb;;;AACmB;;;;;;AAAP;AAEO;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.calculator.contract.MyContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 2"
    },
    "7": {
      "op": "bytecblock 0x30313233343536373839 0x202d20"
    },
    "24": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "a#0"
      ]
    },
    "26": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "action#0"
      ]
    },
    "27": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "num_args#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0"
      ]
    },
    "29": {
      "op": "dup",
      "defined_out": [
        "num_args#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "num_args#0"
      ]
    },
    "30": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "num_args#0",
        "0"
      ]
    },
    "31": {
      "op": "==",
      "defined_out": [
        "num_args#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "tmp%0#0"
      ]
    },
    "32": {
      "op": "bz main_else_body@2",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0"
      ]
    },
    "35": {
      "block": "main_if_body@1",
      "stack_in": [
        "a#0",
        "action#0",
        "num_args#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "a#0"
      ]
    },
    "36": {
      "op": "bury 3",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0"
      ]
    },
    "38": {
      "op": "intc_0 // 0",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0"
      ]
    },
    "39": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "action#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0",
        "action#0"
      ]
    },
    "40": {
      "op": "bury 3",
      "defined_out": [
        "a#0",
        "action#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0"
      ]
    },
    "42": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0",
        "0"
      ]
    },
    "43": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "action#0",
        "b#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0",
        "tmp%1#0"
      ]
    },
    "44": {
      "op": "log",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0"
      ]
    },
    "45": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0",
        "0"
      ]
    },
    "46": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "action#0",
        "b#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0",
        "tmp%2#0"
      ]
    },
    "47": {
      "op": "log",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0"
      ]
    },
    "48": {
      "block": "main_after_if_else@3",
      "stack_in": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "action#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0",
        "action#0"
      ]
    },
    "50": {
      "op": "dup",
      "defined_out": [
        "action#0",
        "action#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0",
        "action#0",
        "action#0 (copy)"
      ]
    },
    "51": {
      "op": "dig 5",
      "defined_out": [
        "a#0",
        "action#0",
        "action#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0",
        "action#0",
        "action#0 (copy)",
        "a#0"
      ]
    },
    "53": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "action#0",
        "action#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0",
        "action#0",
        "action#0 (copy)",
        "a#0 (copy)",
        "a#0 (copy)"
      ]
    },
    "54": {
      "op": "cover 2",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0",
        "action#0",
        "a#0",
        "action#0 (copy)",
        "a#0 (copy)"
      ]
    },
    "56": {
      "op": "uncover 4",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "action#0",
        "action#0 (copy)",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "action#0",
        "a#0",
        "action#0 (copy)",
        "a#0 (copy)",
        "b#0"
      ]
    },
    "58": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "action#0",
        "action#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "action#0",
        "a#0",
        "action#0 (copy)",
        "a#0 (copy)",
        "b#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "59": {
      "op": "cover 5",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0",
        "action#0",
        "a#0",
        "action#0 (copy)",
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "61": {
      "callsub": "examples.calculator.contract.MyContract.do_calc",
      "op": "callsub do_calc",
      "defined_out": [
        "a#0",
        "action#0",
        "b#0",
        "result#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0",
        "action#0",
        "a#0",
        "result#0"
      ]
    },
    "64": {
      "op": "cover 3",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "result#0",
        "b#0",
        "action#0",
        "a#0"
      ]
    },
    "66": {
      "callsub": "examples.calculator.contract.itoa",
      "op": "callsub itoa",
      "defined_out": [
        "a#0",
        "action#0",
        "b#0",
        "result#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "result#0",
        "b#0",
        "action#0",
        "tmp%4#0"
      ]
    },
    "69": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "result#0",
        "b#0",
        "tmp%4#0",
        "action#0"
      ]
    },
    "70": {
      "callsub": "examples.calculator.contract.MyContract.op",
      "op": "callsub op",
      "defined_out": [
        "a#0",
        "action#0",
        "b#0",
        "result#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "result#0",
        "b#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "73": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "action#0",
        "b#0",
        "result#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "result#0",
        "b#0",
        "tmp%6#0"
      ]
    },
    "74": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "result#0",
        "tmp%6#0",
        "b#0"
      ]
    },
    "75": {
      "callsub": "examples.calculator.contract.itoa",
      "op": "callsub itoa",
      "defined_out": [
        "a#0",
        "action#0",
        "result#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "result#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "78": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "action#0",
        "result#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "result#0",
        "tmp%8#0"
      ]
    },
    "79": {
      "op": "pushbytes 0x203d20",
      "defined_out": [
        "0x203d20",
        "a#0",
        "action#0",
        "result#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "result#0",
        "tmp%8#0",
        "0x203d20"
      ]
    },
    "84": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "action#0",
        "result#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "result#0",
        "tmp%9#0"
      ]
    },
    "85": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "tmp%9#0",
        "result#0"
      ]
    },
    "86": {
      "callsub": "examples.calculator.contract.itoa",
      "op": "callsub itoa",
      "defined_out": [
        "a#0",
        "action#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "89": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "action#0",
        "result_b#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "result_b#0"
      ]
    },
    "90": {
      "op": "log",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0"
      ]
    },
    "91": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "a#0",
        "action#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "1"
      ]
    },
    "92": {
      "op": "return",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0"
      ]
    },
    "93": {
      "block": "main_else_body@2",
      "stack_in": [
        "a#0",
        "action#0",
        "num_args#0"
      ],
      "op": "dup",
      "defined_out": [
        "num_args#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "num_args#0"
      ]
    },
    "94": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "num_args#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "num_args#0",
        "3"
      ]
    },
    "95": {
      "op": "==",
      "defined_out": [
        "num_args#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "tmp%3#0"
      ]
    },
    "96": {
      "error": "Expected 3 args",
      "op": "assert // Expected 3 args",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0"
      ]
    },
    "97": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "action_b#0",
        "num_args#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "action_b#0"
      ]
    },
    "100": {
      "op": "btoi",
      "defined_out": [
        "action#0",
        "num_args#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "action#0"
      ]
    },
    "101": {
      "op": "bury 2",
      "defined_out": [
        "action#0",
        "num_args#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0"
      ]
    },
    "103": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a_bytes#0",
        "action#0",
        "num_args#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "a_bytes#0"
      ]
    },
    "106": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a_bytes#0",
        "action#0",
        "b_bytes#0",
        "num_args#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "a_bytes#0",
        "b_bytes#0"
      ]
    },
    "109": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b_bytes#0",
        "a_bytes#0"
      ]
    },
    "110": {
      "op": "dup",
      "defined_out": [
        "a_bytes#0",
        "a_bytes#0 (copy)",
        "action#0",
        "b_bytes#0",
        "num_args#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b_bytes#0",
        "a_bytes#0",
        "a_bytes#0 (copy)"
      ]
    },
    "111": {
      "op": "log",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b_bytes#0",
        "a_bytes#0"
      ]
    },
    "112": {
      "op": "dig 1",
      "defined_out": [
        "a_bytes#0",
        "action#0",
        "b_bytes#0",
        "b_bytes#0 (copy)",
        "num_args#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b_bytes#0",
        "a_bytes#0",
        "b_bytes#0 (copy)"
      ]
    },
    "114": {
      "op": "log",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b_bytes#0",
        "a_bytes#0"
      ]
    },
    "115": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "action#0",
        "b_bytes#0",
        "num_args#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b_bytes#0",
        "a#0"
      ]
    },
    "116": {
      "op": "bury 4",
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b_bytes#0"
      ]
    },
    "118": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "action#0",
        "b#0",
        "num_args#0"
      ],
      "stack_out": [
        "a#0",
        "action#0",
        "num_args#0",
        "b#0"
      ]
    },
    "119": {
      "op": "b main_after_if_else@3"
    },
    "122": {
      "subroutine": "examples.calculator.contract.MyContract.do_calc",
      "params": {
        "maybe_action#0": "uint64",
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "do_calc",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "125": {
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_action#0 (copy)"
      ],
      "stack_out": [
        "maybe_action#0 (copy)"
      ]
    },
    "127": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_action#0 (copy)"
      ],
      "stack_out": [
        "maybe_action#0 (copy)",
        "1"
      ]
    },
    "128": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "129": {
      "op": "bz do_calc_else_body@2",
      "stack_out": []
    },
    "132": {
      "block": "do_calc_if_body@1",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "134": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "136": {
      "callsub": "examples.calculator.contract.MyContract.add",
      "op": "callsub add",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "139": {
      "retsub": true,
      "op": "retsub"
    },
    "140": {
      "block": "do_calc_else_body@2",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_action#0 (copy)"
      ],
      "stack_out": [
        "maybe_action#0 (copy)"
      ]
    },
    "142": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "maybe_action#0 (copy)"
      ],
      "stack_out": [
        "maybe_action#0 (copy)",
        "2"
      ]
    },
    "143": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "144": {
      "op": "bz do_calc_else_body@4",
      "stack_out": []
    },
    "147": {
      "block": "do_calc_if_body@3",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "149": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "151": {
      "callsub": "examples.calculator.contract.MyContract.sub",
      "op": "callsub sub",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "154": {
      "retsub": true,
      "op": "retsub"
    },
    "155": {
      "block": "do_calc_else_body@4",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_action#0 (copy)"
      ],
      "stack_out": [
        "maybe_action#0 (copy)"
      ]
    },
    "157": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "maybe_action#0 (copy)"
      ],
      "stack_out": [
        "maybe_action#0 (copy)",
        "3"
      ]
    },
    "158": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "159": {
      "op": "bz do_calc_else_body@6",
      "stack_out": []
    },
    "162": {
      "block": "do_calc_if_body@5",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "164": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "166": {
      "callsub": "examples.calculator.contract.MyContract.mul",
      "op": "callsub mul",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "169": {
      "retsub": true,
      "op": "retsub"
    },
    "170": {
      "block": "do_calc_else_body@6",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_action#0 (copy)"
      ],
      "stack_out": [
        "maybe_action#0 (copy)"
      ]
    },
    "172": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "maybe_action#0 (copy)"
      ],
      "stack_out": [
        "maybe_action#0 (copy)",
        "4"
      ]
    },
    "174": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "175": {
      "op": "bz do_calc_else_body@8",
      "stack_out": []
    },
    "178": {
      "block": "do_calc_if_body@7",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "180": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "182": {
      "callsub": "examples.calculator.contract.MyContract.div",
      "op": "callsub div",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "185": {
      "retsub": true,
      "op": "retsub"
    },
    "186": {
      "block": "do_calc_else_body@8",
      "stack_in": [],
      "error": "unknown operation",
      "op": "err // unknown operation"
    },
    "187": {
      "subroutine": "examples.calculator.contract.MyContract.add",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "add",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "190": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "192": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "194": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "195": {
      "retsub": true,
      "op": "retsub"
    },
    "196": {
      "subroutine": "examples.calculator.contract.MyContract.sub",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "sub",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "199": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "201": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "203": {
      "op": "-",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "204": {
      "retsub": true,
      "op": "retsub"
    },
    "205": {
      "subroutine": "examples.calculator.contract.MyContract.mul",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "mul",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "208": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "210": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "212": {
      "op": "*",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "213": {
      "retsub": true,
      "op": "retsub"
    },
    "214": {
      "subroutine": "examples.calculator.contract.MyContract.div",
      "params": {
        "a#0": "uint64",
        "b#0": "uint64"
      },
      "block": "div",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "217": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "219": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "221": {
      "op": "/",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "222": {
      "retsub": true,
      "op": "retsub"
    },
    "223": {
      "subroutine": "examples.calculator.contract.itoa",
      "params": {
        "i#0": "uint64"
      },
      "block": "itoa",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "226": {
      "op": "bytec_0 // 0x30313233343536373839",
      "defined_out": [
        "0x30313233343536373839"
      ],
      "stack_out": [
        "0x30313233343536373839"
      ]
    },
    "227": {
      "op": "len",
      "defined_out": [
        "radix#0"
      ],
      "stack_out": [
        "radix#0"
      ]
    },
    "228": {
      "op": "dup",
      "defined_out": [
        "radix#0"
      ],
      "stack_out": [
        "radix#0",
        "radix#0"
      ]
    },
    "229": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)",
        "radix#0"
      ],
      "stack_out": [
        "radix#0",
        "radix#0",
        "i#0 (copy)"
      ]
    },
    "231": {
      "op": ">",
      "defined_out": [
        "radix#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "radix#0",
        "tmp%0#0"
      ]
    },
    "232": {
      "op": "bz itoa_after_if_else@2",
      "stack_out": [
        "radix#0"
      ]
    },
    "235": {
      "block": "itoa_if_body@1",
      "stack_in": [
        "radix#0"
      ],
      "op": "bytec_0 // 0x30313233343536373839",
      "defined_out": [
        "0x30313233343536373839"
      ],
      "stack_out": [
        "radix#0",
        "0x30313233343536373839"
      ]
    },
    "236": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x30313233343536373839",
        "i#0 (copy)"
      ],
      "stack_out": [
        "radix#0",
        "0x30313233343536373839",
        "i#0 (copy)"
      ]
    },
    "238": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x30313233343536373839",
        "1",
        "i#0 (copy)"
      ],
      "stack_out": [
        "radix#0",
        "0x30313233343536373839",
        "i#0 (copy)",
        "1"
      ]
    },
    "239": {
      "op": "extract3",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "radix#0",
        "tmp%1#0"
      ]
    },
    "240": {
      "op": "swap"
    },
    "241": {
      "retsub": true,
      "op": "retsub"
    },
    "242": {
      "block": "itoa_after_if_else@2",
      "stack_in": [
        "radix#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "i#0 (copy)"
      ],
      "stack_out": [
        "radix#0",
        "i#0 (copy)"
      ]
    },
    "244": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0 (copy)",
        "radix#0"
      ],
      "stack_out": [
        "radix#0",
        "i#0 (copy)",
        "radix#0"
      ]
    },
    "246": {
      "op": "dup",
      "defined_out": [
        "i#0 (copy)",
        "radix#0",
        "radix#0 (copy)"
      ],
      "stack_out": [
        "radix#0",
        "i#0 (copy)",
        "radix#0 (copy)",
        "radix#0 (copy)"
      ]
    },
    "247": {
      "op": "cover 2",
      "stack_out": [
        "radix#0",
        "radix#0",
        "i#0 (copy)",
        "radix#0 (copy)"
      ]
    },
    "249": {
      "op": "/",
      "defined_out": [
        "radix#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "radix#0",
        "radix#0",
        "tmp%2#0"
      ]
    },
    "250": {
      "callsub": "examples.calculator.contract.itoa",
      "op": "callsub itoa",
      "defined_out": [
        "radix#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "radix#0",
        "radix#0",
        "tmp%3#0"
      ]
    },
    "253": {
      "op": "swap",
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "radix#0"
      ]
    },
    "254": {
      "op": "frame_dig -1",
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "radix#0",
        "i#0 (copy)"
      ]
    },
    "256": {
      "op": "swap",
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "i#0 (copy)",
        "radix#0"
      ]
    },
    "257": {
      "op": "%",
      "defined_out": [
        "radix#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "258": {
      "op": "bytec_0 // 0x30313233343536373839",
      "defined_out": [
        "0x30313233343536373839",
        "radix#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "tmp%4#0",
        "0x30313233343536373839"
      ]
    },
    "259": {
      "op": "swap",
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "0x30313233343536373839",
        "tmp%4#0"
      ]
    },
    "260": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x30313233343536373839",
        "1",
        "radix#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "0x30313233343536373839",
        "tmp%4#0",
        "1"
      ]
    },
    "261": {
      "op": "extract3",
      "defined_out": [
        "radix#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "radix#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "262": {
      "op": "concat",
      "defined_out": [
        "radix#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "radix#0",
        "tmp%6#0"
      ]
    },
    "263": {
      "op": "swap"
    },
    "264": {
      "retsub": true,
      "op": "retsub"
    },
    "265": {
      "subroutine": "examples.calculator.contract.MyContract.op",
      "params": {
        "action#0": "uint64"
      },
      "block": "op",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "268": {
      "op": "frame_dig -1",
      "defined_out": [
        "action#0 (copy)"
      ],
      "stack_out": [
        "action#0 (copy)"
      ]
    },
    "270": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "action#0 (copy)"
      ],
      "stack_out": [
        "action#0 (copy)",
        "1"
      ]
    },
    "271": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "272": {
      "op": "bz op_else_body@2",
      "stack_out": []
    },
    "275": {
      "block": "op_if_body@1",
      "stack_in": [],
      "op": "pushbytes 0x202b20",
      "defined_out": [
        "0x202b20"
      ],
      "stack_out": [
        "0x202b20"
      ]
    },
    "280": {
      "retsub": true,
      "op": "retsub"
    },
    "281": {
      "block": "op_else_body@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "action#0 (copy)"
      ],
      "stack_out": [
        "action#0 (copy)"
      ]
    },
    "283": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "action#0 (copy)"
      ],
      "stack_out": [
        "action#0 (copy)",
        "2"
      ]
    },
    "284": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "285": {
      "op": "bz op_else_body@4",
      "stack_out": []
    },
    "288": {
      "block": "op_if_body@3",
      "stack_in": [],
      "op": "bytec_1 // 0x202d20",
      "defined_out": [
        "0x202d20"
      ],
      "stack_out": [
        "0x202d20"
      ]
    },
    "289": {
      "retsub": true,
      "op": "retsub"
    },
    "290": {
      "block": "op_else_body@4",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "action#0 (copy)"
      ],
      "stack_out": [
        "action#0 (copy)"
      ]
    },
    "292": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "action#0 (copy)"
      ],
      "stack_out": [
        "action#0 (copy)",
        "3"
      ]
    },
    "293": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "294": {
      "op": "bz op_else_body@6",
      "stack_out": []
    },
    "297": {
      "block": "op_if_body@5",
      "stack_in": [],
      "op": "pushbytes 0x202a20",
      "defined_out": [
        "0x202a20"
      ],
      "stack_out": [
        "0x202a20"
      ]
    },
    "302": {
      "retsub": true,
      "op": "retsub"
    },
    "303": {
      "block": "op_else_body@6",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "action#0 (copy)"
      ],
      "stack_out": [
        "action#0 (copy)"
      ]
    },
    "305": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "action#0 (copy)"
      ],
      "stack_out": [
        "action#0 (copy)",
        "4"
      ]
    },
    "307": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "308": {
      "op": "bz op_else_body@8",
      "stack_out": []
    },
    "311": {
      "block": "op_if_body@7",
      "stack_in": [],
      "op": "pushbytes 0x202f2f20",
      "defined_out": [
        "0x202f2f20"
      ],
      "stack_out": [
        "0x202f2f20"
      ]
    },
    "317": {
      "retsub": true,
      "op": "retsub"
    },
    "318": {
      "block": "op_else_body@8",
      "stack_in": [],
      "op": "bytec_1 // 0x202d20",
      "defined_out": [
        "0x202d20"
      ],
      "stack_out": [
        "0x202d20"
      ]
    },
    "319": {
      "retsub": true,
      "op": "retsub"
    }
  }
}