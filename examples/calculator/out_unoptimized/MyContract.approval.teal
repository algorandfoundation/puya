#pragma version 10

examples.calculator.contract.MyContract.approval_program:
    byte ""
    dup
    // calculator/contract.py:20
    // num_args = Txn.num_app_args
    txn NumAppArgs
    dup
    cover 1
    // calculator/contract.py:21
    // if num_args == 0:
    int 0
    ==
    bz main_else_body@2
    // calculator/contract.py:22
    // a = UInt64(0)
    int 0
    bury 3
    // calculator/contract.py:23
    // b = UInt64(0)
    int 0
    // calculator/contract.py:24
    // action = UInt64(0)
    int 0
    bury 3
    // calculator/contract.py:22
    // a = UInt64(0)
    int 0
    // calculator/contract.py:25
    // log(a)
    itob
    log
    // calculator/contract.py:23
    // b = UInt64(0)
    int 0
    // calculator/contract.py:26
    // log(b)
    itob
    log
    b main_after_if_else@3

main_else_body@2:
    // calculator/contract.py:28
    // assert num_args == 3, "Expected 3 args"
    dup
    int 3
    ==
    assert // Expected 3 args
    // calculator/contract.py:29
    // action_b = Txn.application_args(0)
    txna ApplicationArgs 0
    // calculator/contract.py:30
    // action = op.btoi(action_b)
    btoi
    bury 2
    // calculator/contract.py:31
    // a_bytes = Txn.application_args(1)
    txna ApplicationArgs 1
    // calculator/contract.py:32
    // b_bytes = Txn.application_args(2)
    txna ApplicationArgs 2
    cover 1
    // calculator/contract.py:33
    // log(a_bytes)
    dup
    log
    // calculator/contract.py:34
    // log(b_bytes)
    dig 1
    log
    // calculator/contract.py:35
    // a = op.btoi(a_bytes)
    btoi
    bury 4
    // calculator/contract.py:36
    // b = op.btoi(b_bytes)
    btoi

main_after_if_else@3:
    // calculator/contract.py:38
    // result = self.do_calc(action, a, b)
    dig 2
    dup
    dig 5
    dup
    cover 2
    uncover 4
    dup
    cover 5
    callsub do_calc
    cover 3
    // calculator/contract.py:39
    // result_b = itoa(a) + self.op(action) + itoa(b) + b" = " + itoa(result)
    callsub itoa
    uncover 1
    callsub op
    concat
    uncover 1
    callsub itoa
    concat
    byte " = "
    concat
    uncover 1
    callsub itoa
    concat
    // calculator/contract.py:40
    // log(result_b)
    log
    // calculator/contract.py:41
    // return UInt64(1)
    int 1
    return


// examples.calculator.contract.MyContract.do_calc(maybe_action: uint64, a: uint64, b: uint64) -> uint64:
do_calc:
    // calculator/contract.py:56-57
    // @subroutine
    // def do_calc(self, maybe_action: UInt64, a: UInt64, b: UInt64) -> UInt64:
    proto 3 1
    // calculator/contract.py:58
    // if maybe_action == ADD:
    frame_dig -3
    int 1
    ==
    bz do_calc_else_body@2
    // calculator/contract.py:59
    // return self.add(a, b)
    frame_dig -2
    frame_dig -1
    callsub add
    retsub

do_calc_else_body@2:
    // calculator/contract.py:60
    // elif maybe_action == SUB:
    frame_dig -3
    int 2
    ==
    bz do_calc_else_body@4
    // calculator/contract.py:61
    // return self.sub(a, b)
    frame_dig -2
    frame_dig -1
    callsub sub
    retsub

do_calc_else_body@4:
    // calculator/contract.py:62
    // elif maybe_action == MUL:
    frame_dig -3
    int 3
    ==
    bz do_calc_else_body@6
    // calculator/contract.py:63
    // return self.mul(a, b)
    frame_dig -2
    frame_dig -1
    callsub mul
    retsub

do_calc_else_body@6:
    // calculator/contract.py:64
    // elif maybe_action == DIV:
    frame_dig -3
    int 4
    ==
    bz do_calc_else_body@8
    // calculator/contract.py:65
    // return self.div(a, b)
    frame_dig -2
    frame_dig -1
    callsub div
    retsub

do_calc_else_body@8:
    // calculator/contract.py:67
    // assert False, "unknown operation"
    err // unknown operation


// examples.calculator.contract.MyContract.add(a: uint64, b: uint64) -> uint64:
add:
    // calculator/contract.py:69-70
    // @subroutine
    // def add(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // calculator/contract.py:71
    // return a + b
    frame_dig -2
    frame_dig -1
    +
    retsub


// examples.calculator.contract.MyContract.sub(a: uint64, b: uint64) -> uint64:
sub:
    // calculator/contract.py:73-74
    // @subroutine
    // def sub(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // calculator/contract.py:75
    // return a - b
    frame_dig -2
    frame_dig -1
    -
    retsub


// examples.calculator.contract.MyContract.mul(a: uint64, b: uint64) -> uint64:
mul:
    // calculator/contract.py:77-78
    // @subroutine
    // def mul(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // calculator/contract.py:79
    // return a * b
    frame_dig -2
    frame_dig -1
    *
    retsub


// examples.calculator.contract.MyContract.div(a: uint64, b: uint64) -> uint64:
div:
    // calculator/contract.py:81-82
    // @subroutine
    // def div(self, a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // calculator/contract.py:83
    // return a // b
    frame_dig -2
    frame_dig -1
    /
    retsub


// examples.calculator.contract.itoa(i: uint64) -> bytes:
itoa:
    // calculator/contract.py:9-10
    // @subroutine
    // def itoa(i: UInt64) -> Bytes:
    proto 1 1
    // calculator/contract.py:11
    // digits = Bytes(b"0123456789")
    byte "0123456789"
    // calculator/contract.py:12
    // radix = digits.length
    len
    dup
    cover 1
    // calculator/contract.py:13
    // if i < radix:
    frame_dig -1
    uncover 1
    <
    bz itoa_after_if_else@2
    // calculator/contract.py:14
    // return digits[i]
    frame_dig -1
    int 1
    +
    // calculator/contract.py:11
    // digits = Bytes(b"0123456789")
    byte "0123456789"
    // calculator/contract.py:14
    // return digits[i]
    frame_dig -1
    uncover 2
    substring3
    uncover 1
    retsub

itoa_after_if_else@2:
    // calculator/contract.py:15
    // return itoa(i // radix) + digits[i % radix]
    frame_dig -1
    frame_dig 0
    dup
    cover 2
    /
    callsub itoa
    cover 1
    frame_dig -1
    uncover 1
    %
    dup
    int 1
    +
    // calculator/contract.py:11
    // digits = Bytes(b"0123456789")
    byte "0123456789"
    // calculator/contract.py:15
    // return itoa(i // radix) + digits[i % radix]
    uncover 2
    uncover 2
    substring3
    concat
    uncover 1
    retsub


// examples.calculator.contract.MyContract.op(action: uint64) -> bytes:
op:
    // calculator/contract.py:43-44
    // @subroutine
    // def op(self, action: UInt64) -> Bytes:
    proto 1 1
    // calculator/contract.py:45
    // if action == ADD:
    frame_dig -1
    int 1
    ==
    bz op_else_body@2
    // calculator/contract.py:46
    // return Bytes(b" + ")
    byte " + "
    retsub

op_else_body@2:
    // calculator/contract.py:47
    // elif action == SUB:
    frame_dig -1
    int 2
    ==
    bz op_else_body@4
    // calculator/contract.py:48
    // return Bytes(b" - ")
    byte " - "
    retsub

op_else_body@4:
    // calculator/contract.py:49
    // elif action == MUL:
    frame_dig -1
    int 3
    ==
    bz op_else_body@6
    // calculator/contract.py:50
    // return Bytes(b" * ")
    byte " * "
    retsub

op_else_body@6:
    // calculator/contract.py:51
    // elif action == DIV:
    frame_dig -1
    int 4
    ==
    bz op_else_body@8
    // calculator/contract.py:52
    // return Bytes(b" // ")
    byte " // "
    retsub

op_else_body@8:
    // calculator/contract.py:54
    // return Bytes(b" - ")
    byte " - "
    retsub
