>> poetry run puyapy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 --log-level=debug with_reentrancy
debug: Building AWST for __init__.py
debug: Building AWST for with_reentrancy
debug: Building AWST for embedded puyapy lib at <puya>/puyapy.py
debug: Building AWST for with_reentrancy/contract.py
with_reentrancy/contract.py:9 warning: expression result is ignored
debug: Sealing block@0: // L26
debug: Terminated block@0: // L26
debug: Sealing block@None: // if_body_L27
debug: Sealing block@None: // else_body_L27
debug: Terminated block@1: // if_body_L27
debug: Sealing block@2: // after_if_else_L27
debug: Terminated block@2: // after_if_else_L27
debug: Sealing block@0: // L33
debug: Terminated block@0: // L33
debug: Sealing block@0: // L41
debug: Terminated block@0: // L41
debug: Sealing block@0: // L49
debug: Terminated block@0: // L49
debug: Sealing block@None: // if_body_L52
debug: Sealing block@None: // else_body_L52
debug: Terminated block@1: // if_body_L52
debug: Terminated block@2: // else_body_L52
debug: Sealing block@3: // after_if_else_L52
debug: Created Phi assignment: let is_even#1: uint64 = undefined while trying to resolve 'is_even' in block@3: // after_if_else_L52
debug: Added is_even#0 to Phi node: let is_even#1: uint64 = φ(is_even#0 <- block@1) in block@1: // if_body_L52
debug: Added is_even#0 to Phi node: let is_even#1: uint64 = φ(is_even#0 <- block@1, is_even#0 <- block@2) in block@2: // else_body_L52
debug: Replacing trivial Phi node: let is_even#1: uint64 = φ(is_even#0 <- block@1, is_even#0 <- block@2) (is_even#1) with is_even#0
debug: Deleting Phi assignment: let is_even#1: uint64 = φ(is_even#0 <- block@1, is_even#0 <- block@2)
debug: Replaced trivial Phi node: let is_even#1: uint64 = φ(is_even#0 <- block@1, is_even#0 <- block@2) (is_even#1) with is_even#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L52
debug: Sealing block@None: // if_body_L58
debug: Sealing block@None: // else_body_L58
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@3: // after_if_else_L52
debug: Added a#1 to Phi node: let a#2: uint64 = φ(a#1 <- block@1) in block@1: // if_body_L52
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#1 <- block@1, a#0 <- block@2) in block@2: // else_body_L52
debug: Terminated block@4: // if_body_L58
debug: Sealing block@5: // after_if_else_L58
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@5: // after_if_else_L58
debug: Created Phi assignment: let x#2: uint64 = undefined while trying to resolve 'x' in block@3: // after_if_else_L52
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@1) in block@1: // if_body_L52
debug: Added x#0 to Phi node: let x#2: uint64 = φ(x#0 <- block@1, x#0 <- block@2) in block@2: // else_body_L52
debug: Replacing trivial Phi node: let x#2: uint64 = φ(x#0 <- block@1, x#0 <- block@2) (x#2) with x#0
debug: Deleting Phi assignment: let x#2: uint64 = φ(x#0 <- block@1, x#0 <- block@2)
debug: Replaced trivial Phi node: let x#2: uint64 = φ(x#0 <- block@1, x#0 <- block@2) (x#2) with x#0 in current definition for 1 blocks
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@3) in block@3: // after_if_else_L52
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@3, x#0 <- block@4) in block@4: // if_body_L58
debug: Replacing trivial Phi node: let x#1: uint64 = φ(x#0 <- block@3, x#0 <- block@4) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: uint64 = φ(x#0 <- block@3, x#0 <- block@4)
debug: Replaced trivial Phi node: let x#1: uint64 = φ(x#0 <- block@3, x#0 <- block@4) (x#1) with x#0 in current definition for 1 blocks
debug: Created Phi assignment: let result#3: uint64 = undefined while trying to resolve 'result' in block@5: // after_if_else_L58
debug: Created Phi assignment: let result#4: uint64 = undefined while trying to resolve 'result' in block@3: // after_if_else_L52
debug: Added result#0 to Phi node: let result#4: uint64 = φ(result#0 <- block@1) in block@1: // if_body_L52
debug: Added result#1 to Phi node: let result#4: uint64 = φ(result#0 <- block@1, result#1 <- block@2) in block@2: // else_body_L52
debug: Added result#4 to Phi node: let result#3: uint64 = φ(result#4 <- block@3) in block@3: // after_if_else_L52
debug: Added result#2 to Phi node: let result#3: uint64 = φ(result#4 <- block@3, result#2 <- block@4) in block@4: // if_body_L58
debug: Terminated block@5: // after_if_else_L58
debug: Sealing block@0: // L17
debug: Terminated block@0: // L17
debug: Sealing block@None: // if_body_L20
debug: Sealing block@None: // else_body_L20
debug: Terminated block@1: // if_body_L20
debug: Sealing block@2: // after_if_else_L20
debug: Terminated block@2: // after_if_else_L20
debug: Sealing block@0: // L7
debug: Terminated block@0: // L7
debug: Sealing block@0: // L12
debug: Terminated block@0: // L12
debug: Output IR to <git root>/examples/with_reentrancy/out/contract_WithReentrancy.ssa.ir
info: Optimizing examples.with_reentrancy.contract.WithReentrancy at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.with_reentrancy.contract.WithReentrancy.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.fibonacci
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.silly
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.silly2
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.silly3
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: a#2, result#2
debug: Replacing {result#2} with a#2 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@4: // if_body_L58 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.itoa
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable digits#0
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.WithReentrancy.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/with_reentrancy/out/contract_WithReentrancy.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.with_reentrancy.contract.WithReentrancy.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.fibonacci
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.silly
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.silly2
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.silly3
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@4: // if_body_L58 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.itoa
debug: Optimizer: Arithmetic Simplification
debug: Folded len("0123456789") to 10
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable radix#0
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.WithReentrancy.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/with_reentrancy/out/contract_WithReentrancy.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine examples.with_reentrancy.contract.WithReentrancy.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.fibonacci
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.silly
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.silly2
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.silly3
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@4: // if_body_L58 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.itoa
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.with_reentrancy.contract.WithReentrancy.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 3, ending loop
debug: Output IR to <git root>/examples/with_reentrancy/out/contract_WithReentrancy.cssa.ir
debug: Removing Phis from examples.with_reentrancy.contract.WithReentrancy.approval_program
debug: Removing Phis from examples.with_reentrancy.contract.fibonacci
debug: Removing Phis from examples.with_reentrancy.contract.silly
debug: Removing Phis from examples.with_reentrancy.contract.silly2
debug: Removing Phis from examples.with_reentrancy.contract.silly3
debug: Removing Phis from examples.with_reentrancy.contract.itoa
debug: Removing Phis from examples.with_reentrancy.contract.WithReentrancy.clear_state_program
debug: Output IR to <git root>/examples/with_reentrancy/out/contract_WithReentrancy.post_ssa.ir
debug: Sequentializing parallel copies in examples.with_reentrancy.contract.WithReentrancy.approval_program
debug: Sequentializing parallel copies in examples.with_reentrancy.contract.fibonacci
debug: Sequentializing parallel copies in examples.with_reentrancy.contract.silly
debug: Sequentializing parallel copies in examples.with_reentrancy.contract.silly2
debug: Sequentializing parallel copies in examples.with_reentrancy.contract.silly3
debug: loc: {result#7=None, a#5=None, result#0=result#0, a#1=a#1}
debug: pred: {result#7=result#0, a#5=a#1}
debug: ready: result#7, a#5
debug: to_do: result#7, a#5
debug: * avail a#5
debug: * avail a#1
debug: * avail result#7
debug: * avail result#0
debug: * to_do a#5
debug: * to_do result#7
debug: loc: {result#7=None, a#5=None, result#1=result#1, a#0=a#0}
debug: pred: {result#7=result#1, a#5=a#0}
debug: ready: result#7, a#5
debug: to_do: result#7, a#5
debug: * avail a#5
debug: * avail a#0
debug: * avail result#7
debug: * avail result#1
debug: * to_do a#5
debug: * to_do result#7
debug: loc: {result#4=None, a#2=None, result#7=result#7, a#5=a#5}
debug: pred: {result#4=result#7, a#2=a#5}
debug: ready: result#4, a#2
debug: to_do: result#4, a#2
debug: * avail a#2
debug: * avail a#5
debug: * avail result#4
debug: * avail result#7
debug: * to_do a#2
debug: * to_do result#4
debug: Sequentializing parallel copies in examples.with_reentrancy.contract.itoa
debug: Sequentializing parallel copies in examples.with_reentrancy.contract.WithReentrancy.clear_state_program
debug: Output IR to <git root>/examples/with_reentrancy/out/contract_WithReentrancy.parallel_copies.ir
debug: Coalescing local variables in examples.with_reentrancy.contract.WithReentrancy.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.with_reentrancy.contract.fibonacci using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.with_reentrancy.contract.silly using strategy RootOperandGrouping
debug: Coalescing x#0 with [x#1]
debug: Coalescing resulted in 3 replacement/s
debug: Coalescing local variables in examples.with_reentrancy.contract.silly2 using strategy RootOperandGrouping
debug: Coalescing x#0 with [x#1]
debug: Coalescing resulted in 3 replacement/s
debug: Coalescing local variables in examples.with_reentrancy.contract.silly3 using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#1, a#5, a#2]
debug: Coalescing result#0 with [result#7, result#1, result#4, result#9, result#3]
debug: Coalescing resulted in 19 replacement/s
debug: Coalescing local variables in examples.with_reentrancy.contract.itoa using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.with_reentrancy.contract.WithReentrancy.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/with_reentrancy/out/contract_WithReentrancy.final.ir
debug: Inserted main_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[8]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted fibonacci_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced fibonacci_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted fibonacci_after_if_else@2.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced fibonacci_after_if_else@2.ops[5]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted fibonacci_after_if_else@2.ops[11]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced fibonacci_after_if_else@2.ops[13]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted fibonacci_after_if_else@2.ops[19]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced fibonacci_after_if_else@2.ops[21]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted fibonacci_after_if_else@2.ops[15]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced fibonacci_after_if_else@2.ops[18]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted fibonacci_after_if_else@2.ops[7]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced fibonacci_after_if_else@2.ops[18]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Found 1 edge set/s for examples.with_reentrancy.contract.fibonacci
debug: Inserted silly_block@0.ops[12]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced silly_block@0.ops[14]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted silly_block@0.ops[8]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced silly_block@0.ops[11]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted silly_block@0.ops[5]: 'store result#0 to l-stack (copy)'
debug: Replaced silly_block@0.ops[18]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted silly2_block@0.ops[12]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced silly2_block@0.ops[14]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted silly2_block@0.ops[8]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced silly2_block@0.ops[11]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted silly2_block@0.ops[5]: 'store result#0 to l-stack (copy)'
debug: Replaced silly2_block@0.ops[18]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted silly3_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced silly3_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted silly3_block@0.ops[7]: 'store is_even#0 to l-stack (copy)'
debug: Replaced silly3_block@0.ops[13]: 'load is_even#0' with 'load is_even#0 from l-stack (no copy)'
debug: Inserted silly3_if_body@1.ops[3]: 'store result#0 to l-stack (copy)'
debug: Replaced silly3_if_body@1.ops[5]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted silly3_if_body@1.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced silly3_if_body@1.ops[10]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted silly3_after_if_else@5.ops[6]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced silly3_after_if_else@5.ops[8]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted silly3_after_if_else@5.ops[2]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced silly3_after_if_else@5.ops[5]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Found 3 edge set/s for examples.with_reentrancy.contract.silly3
debug: examples.with_reentrancy.contract.silly3 f-stack entry: ['result#0']
debug: examples.with_reentrancy.contract.silly3 f-stack on first store: ['is_even#0', 'a#0']
debug: Simplified frame_dig 0; frame_bury 0; retsub to retsub
debug: Inserted itoa_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced itoa_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted itoa_if_body@1.ops[8]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced itoa_if_body@1.ops[10]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted itoa_if_body@1.ops[3]: 'store index_plus_1%1#0 to l-stack (copy)'
debug: Replaced itoa_if_body@1.ops[7]: 'load index_plus_1%1#0' with 'load index_plus_1%1#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[3]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[5]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[11]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[13]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[25]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[27]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[21]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[24]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[16]: 'store index_plus_1%6#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[20]: 'load index_plus_1%6#0' with 'load index_plus_1%6#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[14]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[20]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted itoa_after_if_else@2.ops[7]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced itoa_after_if_else@2.ops[26]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Found 1 edge set/s for examples.with_reentrancy.contract.itoa
debug: Simplified uncover 2; uncover 2 to cover 2
info: Writing with_reentrancy/out/contract.approval.teal
info: Writing with_reentrancy/out/contract.approval.debug.teal
info: Writing with_reentrancy/out/contract.clear.teal
info: Writing with_reentrancy/out/contract.clear.debug.teal
>> exit code = 0