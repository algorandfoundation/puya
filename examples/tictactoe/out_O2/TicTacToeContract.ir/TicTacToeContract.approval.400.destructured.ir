main examples.tictactoe.tictactoe.TicTacToeContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#2)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@4, block@10, block@13, block@13, block@13, block@13, block@13, block@13, block@13, block@13, block@13, block@13][tmp%4#0] else goto block@13
    block@4: // switch_case_0_L15
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "new_game((uint64,uint64))void" => block@5, method "join_game((uint64,uint64))void" => block@6, method "whose_turn()uint8" => block@7, method "play((uint64,uint64))void" => block@8, * => block@9}
    block@5: // new_game_route_L20
        examples.tictactoe.tictactoe.TicTacToeContract.new_game[routing]()
        goto block@9
    block@6: // join_game_route_L37
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let move.0#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 0u)
        let move.1#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 8u)
        let (_%0#1: account, maybe_exists%0#0: bool) = (app_global_get_ex 0u "challenger")
        let tmp%0#2: bool = (! maybe_exists%0#0)
        (assert tmp%0#2) // Host already has a challenger
        let tmp%1#5: account = (txn Sender)
        (app_global_put "challenger" tmp%1#5)
        examples.tictactoe.tictactoe.TicTacToeContract.make_move(0x02, move.0#0, move.1#0)
        exit 1u
    block@7: // whose_turn_route_L43
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%0#0) // check self.turns exists
        let tmp%0#7: uint64 = (% maybe_value%0#0 2u)
        let select%0#0: Encoded(uint8) = (select 0x02 0x01 tmp%0#7)
        let tmp%1#2: bytes = (concat 0x151f7c75 select%0#0)
        (log tmp%1#2)
        exit 1u
    block@8: // play_route_L47
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let move.0#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 0u)
        let move.1#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 8u)
        let (_%0#0: Encoded(uint8), maybe_exists%0#0: bool) = (app_global_get_ex 0u "winner")
        let tmp%0#2: bool = (! maybe_exists%0#0)
        (assert tmp%0#2) // Game is already finished
        let (maybe_value%0#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%1#0) // check self.turns exists
        let tmp%1#4: uint64 = (% maybe_value%0#0 2u)
        goto tmp%1#4 ? block@15 : block@16
    block@15: // if_body_L51
        let tmp%3#1: account = (txn Sender)
        let (maybe_value%1#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "host")
        (assert maybe_exists%2#0) // check self.host exists
        let tmp%4#1: bool = (== tmp%3#1 maybe_value%1#0)
        (assert tmp%4#1) // It is the host's turn
        let player#0: Encoded(uint8) = 0x01
        goto block@17
    block@16: // else_body_L54
        let tmp%5#1: account = (txn Sender)
        let tmp%6#1: account = (global ZeroAddress)
        let (maybe_value%2#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "challenger")
        let state_get%0#0: bytes = (select tmp%6#1 maybe_value%2#0 maybe_exists%3#0)
        let tmp%7#0: bool = (== tmp%5#1 state_get%0#0)
        (assert tmp%7#0) // It is the challenger's turn
        let player#0: Encoded(uint8) = 0x02
        goto block@17
    block@17: // after_if_else_L50
        examples.tictactoe.tictactoe.TicTacToeContract.make_move(player#0, move.0#0, move.1#0)
        exit 1u
    block@9: // switch_case_next_L15
        fail // this contract does not implement the given ABI method for call NoOp
    block@10: // switch_case_1_L15
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "new_game((uint64,uint64))void" => block@11, * => block@12}
    block@11: // new_game_route_L20
        examples.tictactoe.tictactoe.TicTacToeContract.new_game[routing]()
        goto block@12
    block@12: // switch_case_next_L15
        fail // this contract does not implement the given ABI method for create NoOp
    block@13: // switch_case_default_L15
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine examples.tictactoe.tictactoe.TicTacToeContract.new_game[routing]() -> void:
    block@0: // L20
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let move.0#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 0u)
        let move.1#0: uint64 = (extract_uint64 reinterpret_Encoded(uint64,uint64)%0#0 8u)
        let tmp%0#1: uint64 = (txn ApplicationID)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // if_body_L25
        let (_%0#0: account, maybe_exists%0#0: bool) = (app_global_get_ex 0u "challenger")
        goto maybe_exists%0#0 ? block@3 : block@4
    block@3: // if_body_L26
        let (_%1#0: Encoded(uint8), maybe_exists%1#0: bool) = (app_global_get_ex 0u "winner")
        (assert maybe_exists%1#0) // Game isn't over
        goto block@4
    block@4: // after_if_else_L25
        (app_global_del "challenger")
        (app_global_del "winner")
        goto block@5
    block@5: // after_if_else_L22
        let tmp%2#0: account = (txn Sender)
        (app_global_put "host" tmp%2#0)
        let reinterpret_Encoded(uint8[3][3])%0#0: Encoded(uint8[3][3]) = (bzero 9u)
        (app_global_put "game" reinterpret_Encoded(uint8[3][3])%0#0)
        let tmp%3#0: bool = (< move.0#0 3u)
        goto tmp%3#0 ? block@6 : block@8
    block@6: // and_contd_L33
        let tmp%4#0: bool = (< move.1#0 3u)
        goto tmp%4#0 ? block@7 : block@8
    block@7: // bool_true_L33
        let and_result%0#0: bool = 1u
        goto block@9
    block@8: // bool_false_L33
        let and_result%0#0: bool = 0u
        goto block@9
    block@9: // bool_merge_L33
        (assert and_result%0#0) // Move must be in range
        let (maybe_value%0#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%2#0) // check self.game exists
        let aggregate%bytes_offset%0#0: uint64 = (* move.1#0 3u)
        let aggregate%encoded_element%0#0: bytes = (extract3 maybe_value%0#0 aggregate%bytes_offset%0#0 3u) // on error: index access is out of bounds
        let aggregate%updated_array%0#0: bytes = (replace3 aggregate%encoded_element%0#0 move.0#0 0x01) // on error: index access is out of bounds
        let aggregate%updated_array%1#0: bytes = (replace3 maybe_value%0#0 aggregate%bytes_offset%0#0 aggregate%updated_array%0#0) // on error: index access is out of bounds
        (app_global_put "game" aggregate%updated_array%1#0)
        (app_global_put "turns" 0u)
        exit 1u

subroutine examples.tictactoe.tictactoe.TicTacToeContract.make_move(player: Encoded(uint8), move.0: uint64, move.1: uint64) -> void:
    block@0: // L60
        let tmp%0#0: bool = (< move.0#0 3u)
        goto tmp%0#0 ? block@1 : block@3
    block@1: // and_contd_L63
        let tmp%1#0: bool = (< move.1#0 3u)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // bool_true_L63
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L63
        let and_result%0#0: bool = 0u
        goto block@4
    block@4: // bool_merge_L63
        (assert and_result%0#0) // Move must be in range
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%0#0) // check self.game exists
        let aggregate%bytes_offset%0#0: uint64 = (* move.1#0 3u)
        let aggregate%encoded_element%0#0: bytes = (extract3 maybe_value%0#0 aggregate%bytes_offset%0#0 3u) // on error: index access is out of bounds
        let aggregate%encoded_element%1#0: bytes = (extract3 aggregate%encoded_element%0#0 move.0#0 1u) // on error: index access is out of bounds
        let tmp%2#0: bool = (b== aggregate%encoded_element%1#0 0x00)
        (assert tmp%2#0) // Square is already taken
        let aggregate%updated_array%0#0: bytes = (replace3 aggregate%encoded_element%0#0 move.0#0 player#0) // on error: index access is out of bounds
        let aggregate%updated_array%1#0: bytes = (replace3 maybe_value%0#0 aggregate%bytes_offset%0#0 aggregate%updated_array%0#0) // on error: index access is out of bounds
        (app_global_put "game" aggregate%updated_array%1#0)
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%2#0) // check self.turns exists
        let tmp%3#0: uint64 = (+ maybe_value%2#0 1u)
        (app_global_put "turns" tmp%3#0)
        let (g#0: Encoded(uint8[3][3]), maybe_exists%0#0: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%0#0) // check self.game exists
        let aggregate%encoded_element%4#0: bytes = (extract3 g#0 aggregate%bytes_offset%0#0 3u) // on error: index access is out of bounds
        let aggregate%encoded_element%5#0: bytes = ((extract 0 1) aggregate%encoded_element%4#0) // on error: index access is out of bounds
        let aggregate%encoded_element%7#0: bytes = ((extract 1 1) aggregate%encoded_element%4#0) // on error: index access is out of bounds
        let tmp%0#0: bool = (b== aggregate%encoded_element%5#0 aggregate%encoded_element%7#0)
        goto tmp%0#0 ? block@11 : block@13
    block@11: // and_contd_L76
        let aggregate%encoded_element%9#0: bytes = ((extract 2 1) aggregate%encoded_element%4#0) // on error: index access is out of bounds
        let tmp%1#0: bool = (b== aggregate%encoded_element%7#0 aggregate%encoded_element%9#0)
        goto tmp%1#0 ? block@12 : block@13
    block@12: // if_body_L77
        let examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#0: bool = 1u
        let tmp%4#0: bool = examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#0
        goto block@25
    block@13: // after_if_else_L76
        let aggregate%encoded_element%10#0: bytes = ((extract 0 3) g#0) // on error: index access is out of bounds
        let aggregate%encoded_element%11#0: bytes = (extract3 aggregate%encoded_element%10#0 move.0#0 1u) // on error: index access is out of bounds
        let aggregate%encoded_element%12#0: bytes = ((extract 3 3) g#0) // on error: index access is out of bounds
        let aggregate%encoded_element%13#0: bytes = (extract3 aggregate%encoded_element%12#0 move.0#0 1u) // on error: index access is out of bounds
        let tmp%2#0: bool = (b== aggregate%encoded_element%11#0 aggregate%encoded_element%13#0)
        goto tmp%2#0 ? block@14 : block@16
    block@14: // and_contd_L79
        let aggregate%encoded_element%14#0: bytes = ((extract 6 3) g#0) // on error: index access is out of bounds
        let aggregate%encoded_element%15#0: bytes = (extract3 aggregate%encoded_element%14#0 move.0#0 1u) // on error: index access is out of bounds
        let tmp%3#1: bool = (b== aggregate%encoded_element%13#0 aggregate%encoded_element%15#0)
        goto tmp%3#1 ? block@12 : block@16
    block@16: // after_if_else_L79
        let aggregate%encoded_element%17#0: bytes = ((extract 1 1) aggregate%encoded_element%12#0) // on error: index access is out of bounds
        let tmp%4#0: bool = (b== player#0 aggregate%encoded_element%17#0)
        goto tmp%4#0 ? block@17 : block@24
    block@17: // if_body_L84
        let aggregate%encoded_element%19#0: bytes = ((extract 0 1) aggregate%encoded_element%10#0) // on error: index access is out of bounds
        let tmp%5#0: bool = (b== aggregate%encoded_element%19#0 player#0)
        goto tmp%5#0 ? block@18 : block@20
    block@18: // and_contd_L84
        let aggregate%encoded_element%20#0: bytes = ((extract 6 3) g#0) // on error: index access is out of bounds
        let aggregate%encoded_element%21#0: bytes = ((extract 2 1) aggregate%encoded_element%20#0) // on error: index access is out of bounds
        let tmp%6#0: bool = (b== player#0 aggregate%encoded_element%21#0)
        goto tmp%6#0 ? block@12 : block@20
    block@20: // after_if_else_L84
        let aggregate%encoded_element%23#0: bytes = ((extract 2 1) aggregate%encoded_element%10#0) // on error: index access is out of bounds
        let tmp%7#0: bool = (b== aggregate%encoded_element%23#0 player#0)
        goto tmp%7#0 ? block@21 : block@24
    block@21: // and_contd_L86
        let aggregate%encoded_element%24#0: bytes = ((extract 6 3) g#0) // on error: index access is out of bounds
        let aggregate%encoded_element%25#0: bytes = ((extract 0 1) aggregate%encoded_element%24#0) // on error: index access is out of bounds
        let tmp%8#0: bool = (b== player#0 aggregate%encoded_element%25#0)
        goto tmp%8#0 ? block@12 : block@24
    block@24: // after_if_else_L83
        let examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#0: bool = 0u
        let tmp%4#0: bool = examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#0
        goto block@25
    block@25: // after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.did_win_L63
        goto tmp%4#0 ? block@5 : block@6
    block@5: // if_body_L68
        (app_global_put "winner" player#0)
        goto block@9
    block@6: // else_body_L69
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%3#0) // check self.turns exists
        let tmp%5#0: bool = (== maybe_value%3#0 9u)
        goto tmp%5#0 ? block@7 : block@9
    block@7: // if_body_L70
        (app_global_put "winner" 0x03)
        goto block@9
    block@9: // after_if_else_L67
        return 