#pragma version 10

examples.tictactoe.tictactoe.TicTacToeContract.approval_program:
    method "new_game((uint64,uint64))void"
    method "join_game((uint64,uint64))void"
    method "whose_turn()uint8"
    method "play((uint64,uint64))void"
    txna ApplicationArgs 0
    match main_new_game_route@1 main_join_game_route@2 main_whose_turn_route@3 main_play_route@4
    err // reject transaction

main_new_game_route@1:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txna ApplicationArgs 1
    dup
    extract 0 8 // on error: Index access is out of bounds
    swap
    extract 8 8 // on error: Index access is out of bounds
    swap
    btoi
    swap
    btoi
    callsub new_game
    int 1
    return

main_join_game_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    dup
    extract 0 8 // on error: Index access is out of bounds
    swap
    extract 8 8 // on error: Index access is out of bounds
    swap
    btoi
    swap
    btoi
    callsub join_game
    int 1
    return

main_whose_turn_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub whose_turn
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_play_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    dup
    extract 0 8 // on error: Index access is out of bounds
    swap
    extract 8 8 // on error: Index access is out of bounds
    swap
    btoi
    swap
    btoi
    callsub play
    int 1
    return


// examples.tictactoe.tictactoe.TicTacToeContract.new_game(move.0: uint64, move.1: uint64) -> void:
new_game:
    proto 2 0
    byte ""
    txn ApplicationID
    bz new_game_after_if_else@4
    int 0
    byte "challenger"
    app_global_get_ex
    bury 1
    bz new_game_after_if_else@3
    int 0
    byte "winner"
    app_global_get_ex
    bury 1
    assert // Game isn't over

new_game_after_if_else@3:
    byte "challenger"
    app_global_del
    byte "winner"
    app_global_del

new_game_after_if_else@4:
    byte "host"
    txn Sender
    app_global_put
    int 9
    bzero
    byte "game"
    swap
    app_global_put
    frame_dig -2
    int 3
    <
    dup
    frame_bury 0
    bz new_game_bool_false@7
    frame_dig -1
    int 3
    <
    bz new_game_bool_false@7
    int 1
    b new_game_bool_merge@8

new_game_bool_false@7:
    int 0

new_game_bool_merge@8:
    assert // Move must be in range
    int 0
    byte "game"
    app_global_get_ex
    assert // check game exists
    frame_dig -1
    int 3
    *
    dup
    cover 2
    int 3
    extract3 // on error: Index access is out of bounds
    frame_dig 0
    assert // Index access is out of bounds
    frame_dig -2
    byte 0x01
    replace3
    int 0
    byte "game"
    app_global_get_ex
    assert // check game exists
    frame_dig -1
    int 3
    <
    assert // Index access is out of bounds
    cover 2
    replace3
    byte "game"
    swap
    app_global_put
    byte "turns"
    int 0
    app_global_put
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.join_game(move.0: uint64, move.1: uint64) -> void:
join_game:
    proto 2 0
    int 0
    byte "challenger"
    app_global_get_ex
    bury 1
    !
    assert // Host already has a challenger
    byte "challenger"
    txn Sender
    app_global_put
    byte 0x02
    frame_dig -2
    frame_dig -1
    callsub make_move
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.make_move(player: bytes, move.0: uint64, move.1: uint64) -> void:
make_move:
    proto 3 0
    frame_dig -2
    int 3
    <
    dup
    bz make_move_bool_false@3
    frame_dig -1
    int 3
    <
    bz make_move_bool_false@3
    int 1
    b make_move_bool_merge@4

make_move_bool_false@3:
    int 0

make_move_bool_merge@4:
    assert // Move must be in range
    int 0
    byte "game"
    app_global_get_ex
    assert // check game exists
    frame_dig -1
    int 3
    *
    dup
    cover 2
    int 3
    extract3 // on error: Index access is out of bounds
    frame_dig -2
    int 1
    extract3 // on error: Index access is out of bounds
    byte 0x00
    b==
    assert // Square is already taken
    int 0
    byte "game"
    app_global_get_ex
    assert // check game exists
    dig 1
    int 3
    extract3 // on error: Index access is out of bounds
    frame_dig 0
    assert // Index access is out of bounds
    frame_dig -2
    frame_dig -3
    replace3
    int 0
    byte "game"
    app_global_get_ex
    assert // check game exists
    frame_dig -1
    int 3
    <
    assert // Index access is out of bounds
    cover 2
    replace3
    byte "game"
    swap
    app_global_put
    int 0
    byte "turns"
    app_global_get_ex
    assert // check turns exists
    int 1
    +
    byte "turns"
    swap
    app_global_put
    frame_dig -3
    frame_dig -2
    frame_dig -1
    callsub did_win
    bz make_move_else_body@6
    byte "winner"
    frame_dig -3
    app_global_put
    b make_move_after_if_else@9

make_move_else_body@6:
    int 0
    byte "turns"
    app_global_get_ex
    assert // check turns exists
    int 9
    ==
    bz make_move_after_if_else@9
    byte "winner"
    byte 0x03
    app_global_put

make_move_after_if_else@9:
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.did_win(player: bytes, column: uint64, row: uint64) -> uint64:
did_win:
    proto 3 1
    int 0
    dupn 3
    byte "game"
    app_global_get_ex
    swap
    dup
    uncover 2
    assert // check game exists
    frame_dig -1
    int 3
    *
    int 3
    extract3 // on error: Index access is out of bounds
    dupn 2
    extract 0 1 // on error: Index access is out of bounds
    swap
    extract 1 1 // on error: Index access is out of bounds
    dup
    cover 2
    b==
    bz did_win_after_if_else@3
    frame_dig 4
    extract 2 1 // on error: Index access is out of bounds
    frame_dig 5
    b==
    bz did_win_after_if_else@3

did_win_if_body@2:
    int 1
    frame_bury 0
    retsub

did_win_after_if_else@3:
    frame_dig 3
    dup
    extract 0 3 // on error: Index access is out of bounds
    dup
    frame_bury 1
    frame_dig -2
    int 1
    extract3 // on error: Index access is out of bounds
    swap
    extract 3 3 // on error: Index access is out of bounds
    dup
    frame_bury 2
    frame_dig -2
    int 1
    extract3 // on error: Index access is out of bounds
    dup
    frame_bury 0
    b==
    bz did_win_after_if_else@6
    frame_dig 3
    extract 6 3 // on error: Index access is out of bounds
    frame_dig -2
    int 1
    extract3 // on error: Index access is out of bounds
    frame_dig 0
    b==
    bnz did_win_if_body@2

did_win_after_if_else@6:
    frame_dig 2
    extract 1 1 // on error: Index access is out of bounds
    frame_dig -3
    b==
    bz did_win_after_if_else@14
    frame_dig 1
    extract 0 1 // on error: Index access is out of bounds
    frame_dig -3
    b==
    bz did_win_after_if_else@10
    frame_dig 3
    extract 6 3 // on error: Index access is out of bounds
    extract 2 1 // on error: Index access is out of bounds
    frame_dig -3
    b==
    bnz did_win_if_body@2

did_win_after_if_else@10:
    frame_dig 1
    extract 2 1 // on error: Index access is out of bounds
    frame_dig -3
    b==
    bz did_win_after_if_else@14
    frame_dig 3
    extract 6 3 // on error: Index access is out of bounds
    extract 0 1 // on error: Index access is out of bounds
    frame_dig -3
    b==
    bnz did_win_if_body@2

did_win_after_if_else@14:
    int 0
    frame_bury 0
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.whose_turn() -> bytes:
whose_turn:
    proto 0 1
    int 0
    byte "turns"
    app_global_get_ex
    assert // check turns exists
    int 2
    %
    bz whose_turn_ternary_false@2
    byte 0x01
    b whose_turn_ternary_merge@3

whose_turn_ternary_false@2:
    byte 0x02

whose_turn_ternary_merge@3:
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.play(move.0: uint64, move.1: uint64) -> void:
play:
    proto 2 0
    int 0
    byte "winner"
    app_global_get_ex
    bury 1
    !
    assert // Game is already finished
    int 0
    byte "turns"
    app_global_get_ex
    assert // check turns exists
    int 2
    %
    bz play_else_body@2
    txn Sender
    int 0
    byte "host"
    app_global_get_ex
    assert // check host exists
    ==
    assert // It is the host's turn
    byte 0x01
    b play_after_if_else@3

play_else_body@2:
    txn Sender
    global ZeroAddress
    int 0
    byte "challenger"
    app_global_get_ex
    select
    ==
    assert // It is the challenger's turn
    byte 0x02

play_after_if_else@3:
    frame_dig -2
    frame_dig -1
    callsub make_move
    retsub
