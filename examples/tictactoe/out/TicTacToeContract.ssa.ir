contract examples.tictactoe.tictactoe.TicTacToeContract:
    program approval:
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.approval_program() -> uint64:
            block@0: // L15
                let tmp%0#0: bytes = (txna ApplicationArgs 0)
                switch tmp%0#0 {method "new_game((uint64,uint64))void" => block@1, method "join_game((uint64,uint64))void" => block@2, method "whose_turn()uint8" => block@3, method "play((uint64,uint64))void" => block@4, * => block@5}
            block@1: // new_game_route_L20
                let tmp%1#0: uint64 = (txn OnCompletion)
                let tmp%2#0: uint64 = (== tmp%1#0 NoOp)
                (assert tmp%2#0) // OnCompletion is NoOp
                let tmp%3#0: bytes = (txna ApplicationArgs 1)
                let item0%4#0: bytes = (extract3 tmp%3#0 0u 8u)
                let item1%5#0: bytes = (extract3 tmp%3#0 8u 8u)
                let (awst_tmp%6#0: bytes, awst_tmp%7#0: bytes) = (item0%4#0, item1%5#0)
                let tmp%8#0: uint64 = (btoi awst_tmp%6#0)
                let tmp%9#0: uint64 = (btoi awst_tmp%7#0)
                examples.tictactoe.tictactoe.TicTacToeContract.new_game(tmp%8#0, tmp%9#0)
                return 1u
            block@2: // join_game_route_L37
                let tmp%10#0: uint64 = (txn OnCompletion)
                let tmp%11#0: uint64 = (== tmp%10#0 NoOp)
                (assert tmp%11#0) // OnCompletion is NoOp
                let tmp%12#0: uint64 = (txn ApplicationID)
                (assert tmp%12#0) // is not creating
                let tmp%13#0: bytes = (txna ApplicationArgs 1)
                let item0%14#0: bytes = (extract3 tmp%13#0 0u 8u)
                let item1%15#0: bytes = (extract3 tmp%13#0 8u 8u)
                let (awst_tmp%16#0: bytes, awst_tmp%17#0: bytes) = (item0%14#0, item1%15#0)
                let tmp%18#0: uint64 = (btoi awst_tmp%16#0)
                let tmp%19#0: uint64 = (btoi awst_tmp%17#0)
                examples.tictactoe.tictactoe.TicTacToeContract.join_game(tmp%18#0, tmp%19#0)
                return 1u
            block@3: // whose_turn_route_L43
                let tmp%20#0: uint64 = (txn OnCompletion)
                let tmp%21#0: uint64 = (== tmp%20#0 NoOp)
                (assert tmp%21#0) // OnCompletion is NoOp
                let tmp%22#0: uint64 = (txn ApplicationID)
                (assert tmp%22#0) // is not creating
                let tmp%23#0: bytes = examples.tictactoe.tictactoe.TicTacToeContract.whose_turn()
                let tmp%24#0: bytes = (concat 0x151f7c75 tmp%23#0)
                (log tmp%24#0)
                return 1u
            block@4: // play_route_L47
                let tmp%25#0: uint64 = (txn OnCompletion)
                let tmp%26#0: uint64 = (== tmp%25#0 NoOp)
                (assert tmp%26#0) // OnCompletion is NoOp
                let tmp%27#0: uint64 = (txn ApplicationID)
                (assert tmp%27#0) // is not creating
                let tmp%28#0: bytes = (txna ApplicationArgs 1)
                let item0%29#0: bytes = (extract3 tmp%28#0 0u 8u)
                let item1%30#0: bytes = (extract3 tmp%28#0 8u 8u)
                let (awst_tmp%31#0: bytes, awst_tmp%32#0: bytes) = (item0%29#0, item1%30#0)
                let tmp%33#0: uint64 = (btoi awst_tmp%31#0)
                let tmp%34#0: uint64 = (btoi awst_tmp%32#0)
                examples.tictactoe.tictactoe.TicTacToeContract.play(tmp%33#0, tmp%34#0)
                return 1u
            block@5: // switch_case_default_L15
                goto block@6
            block@6: // switch_case_next_L15
                fail // reject transaction
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.new_game(move.0: uint64, move.1: uint64) -> void:
            block@0: // L20
                let tmp%0#0: uint64 = (txn ApplicationID)
                goto tmp%0#0 ? block@1 : block@4
            block@1: // if_body_L22
                let (challenger_exists%1#0: any, challenger_exists%2#0: uint64) = (app_global_get_ex 0u "challenger")
                goto challenger_exists%2#0 ? block@2 : block@3
            block@2: // if_body_L23
                let (winner_exists%3#0: any, winner_exists%4#0: uint64) = (app_global_get_ex 0u "winner")
                (assert winner_exists%4#0) // Game isn't over
                goto block@3
            block@3: // after_if_else_L23
                (app_global_del "challenger")
                (app_global_del "winner")
                goto block@4
            block@4: // after_if_else_L22
                let new_state_value%5#0: bytes = (txn Sender)
                (app_global_put "host" new_state_value%5#0)
                let new_state_value%6#0: bytes = (bzero 9u)
                (app_global_put "game" new_state_value%6#0)
                let column#0: uint64 = move.0#0
                let row#0: uint64 = move.1#0
                let tmp%7#0: uint64 = (< column#0 3u)
                goto tmp%7#0 ? block@5 : block@7
            block@5: // and_contd_L33
                let tmp%8#0: uint64 = (< row#0 3u)
                goto tmp%8#0 ? block@6 : block@7
            block@6: // bool_true_L33
                let and_result%9#0: uint64 = 1u
                goto block@8
            block@7: // bool_false_L33
                let and_result%9#1: uint64 = 0u
                goto block@8
            block@8: // bool_merge_L33
                let and_result%9#2: uint64 = φ(and_result%9#0 <- block@6, and_result%9#1 <- block@7)
                (assert and_result%9#2) // Move must be in range
                let (game_value%10#0: bytes, game_exists%11#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%11#0) // check game exists
                let array_length%12#0: uint64 = 3u
                let index_is_in_bounds%13#0: uint64 = (< row#0 array_length%12#0)
                (assert index_is_in_bounds%13#0) // Index access is out of bounds
                let item_index%14#0: uint64 = (* row#0 3u)
                let tmp%15#0: bytes = (extract3 game_value%10#0 item_index%14#0 3u)
                let assigned_value%16#0: bytes = 0x01
                let array_length%17#0: uint64 = 3u
                let index_is_in_bounds%18#0: uint64 = (< column#0 array_length%17#0)
                (assert index_is_in_bounds%18#0) // Index access is out of bounds
                let write_offset%19#0: uint64 = (* column#0 1u)
                let updated_target%20#0: bytes = (replace3 tmp%15#0 write_offset%19#0 assigned_value%16#0)
                let (game_value%21#0: bytes, game_exists%22#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%22#0) // check game exists
                let assigned_value%23#0: bytes = updated_target%20#0
                let array_length%24#0: uint64 = 3u
                let index_is_in_bounds%25#0: uint64 = (< row#0 array_length%24#0)
                (assert index_is_in_bounds%25#0) // Index access is out of bounds
                let write_offset%26#0: uint64 = (* row#0 3u)
                let updated_target%27#0: bytes = (replace3 game_value%21#0 write_offset%26#0 assigned_value%23#0)
                (app_global_put "game" updated_target%27#0)
                (app_global_put "turns" 0u)
                return 
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.join_game(move.0: uint64, move.1: uint64) -> void:
            block@0: // L37
                let (challenger_exists%0#0: any, challenger_exists%1#0: uint64) = (app_global_get_ex 0u "challenger")
                let tmp%2#0: uint64 = (! challenger_exists%1#0)
                (assert tmp%2#0) // Host already has a challenger
                let new_state_value%3#0: bytes = (txn Sender)
                (app_global_put "challenger" new_state_value%3#0)
                examples.tictactoe.tictactoe.TicTacToeContract.make_move(0x02, move.0#0, move.1#0)
                return 
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.make_move(player: bytes, move.0: uint64, move.1: uint64) -> void:
            block@0: // L60
                let column#0: uint64 = move.0#0
                let row#0: uint64 = move.1#0
                let tmp%0#0: uint64 = (< column#0 3u)
                goto tmp%0#0 ? block@1 : block@3
            block@1: // and_contd_L63
                let tmp%1#0: uint64 = (< row#0 3u)
                goto tmp%1#0 ? block@2 : block@3
            block@2: // bool_true_L63
                let and_result%2#0: uint64 = 1u
                goto block@4
            block@3: // bool_false_L63
                let and_result%2#1: uint64 = 0u
                goto block@4
            block@4: // bool_merge_L63
                let and_result%2#2: uint64 = φ(and_result%2#0 <- block@2, and_result%2#1 <- block@3)
                (assert and_result%2#2) // Move must be in range
                let (game_value%3#0: bytes, game_exists%4#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%4#0) // check game exists
                let array_length%5#0: uint64 = 3u
                let index_is_in_bounds%6#0: uint64 = (< row#0 array_length%5#0)
                (assert index_is_in_bounds%6#0) // Index access is out of bounds
                let item_index%7#0: uint64 = (* row#0 3u)
                let tmp%8#0: bytes = (extract3 game_value%3#0 item_index%7#0 3u)
                let array_length%9#0: uint64 = 3u
                let index_is_in_bounds%10#0: uint64 = (< column#0 array_length%9#0)
                (assert index_is_in_bounds%10#0) // Index access is out of bounds
                let item_index%11#0: uint64 = (* column#0 1u)
                let tmp%12#0: bytes = (extract3 tmp%8#0 item_index%11#0 1u)
                let tmp%13#0: uint64 = (b== tmp%12#0 0x00)
                (assert tmp%13#0) // Square is already taken
                let (game_value%14#0: bytes, game_exists%15#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%15#0) // check game exists
                let array_length%16#0: uint64 = 3u
                let index_is_in_bounds%17#0: uint64 = (< row#0 array_length%16#0)
                (assert index_is_in_bounds%17#0) // Index access is out of bounds
                let item_index%18#0: uint64 = (* row#0 3u)
                let tmp%19#0: bytes = (extract3 game_value%14#0 item_index%18#0 3u)
                let assigned_value%20#0: bytes = player#0
                let array_length%21#0: uint64 = 3u
                let index_is_in_bounds%22#0: uint64 = (< column#0 array_length%21#0)
                (assert index_is_in_bounds%22#0) // Index access is out of bounds
                let write_offset%23#0: uint64 = (* column#0 1u)
                let updated_target%24#0: bytes = (replace3 tmp%19#0 write_offset%23#0 assigned_value%20#0)
                let (game_value%25#0: bytes, game_exists%26#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%26#0) // check game exists
                let assigned_value%27#0: bytes = updated_target%24#0
                let array_length%28#0: uint64 = 3u
                let index_is_in_bounds%29#0: uint64 = (< row#0 array_length%28#0)
                (assert index_is_in_bounds%29#0) // Index access is out of bounds
                let write_offset%30#0: uint64 = (* row#0 3u)
                let updated_target%31#0: bytes = (replace3 game_value%25#0 write_offset%30#0 assigned_value%27#0)
                (app_global_put "game" updated_target%31#0)
                let (turns_value%32#0: uint64, turns_exists%33#0: uint64) = (app_global_get_ex 0u "turns")
                (assert turns_exists%33#0) // check turns exists
                let new_state_value%34#0: uint64 = (+ turns_value%32#0 1u)
                (app_global_put "turns" new_state_value%34#0)
                let tmp%35#0: uint64 = examples.tictactoe.tictactoe.TicTacToeContract.did_win(player#0, column#0, row#0)
                goto tmp%35#0 ? block@5 : block@6
            block@5: // if_body_L67
                (app_global_put "winner" player#0)
                goto block@9
            block@6: // else_body_L67
                let (turns_value%36#0: uint64, turns_exists%37#0: uint64) = (app_global_get_ex 0u "turns")
                (assert turns_exists%37#0) // check turns exists
                let tmp%38#0: uint64 = (== turns_value%36#0 9u)
                goto tmp%38#0 ? block@7 : block@8
            block@7: // if_body_L69
                (app_global_put "winner" 0x03)
                goto block@8
            block@8: // after_if_else_L69
                goto block@9
            block@9: // after_if_else_L67
                return 
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.did_win(player: bytes, column: uint64, row: uint64) -> uint64:
            block@0: // L72
                let (game_value%0#0: bytes, game_exists%1#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%1#0) // check game exists
                let copy%2#0: bytes = game_value%0#0
                let g#0: bytes = copy%2#0
                let array_length%3#0: uint64 = 3u
                let index_is_in_bounds%4#0: uint64 = (< row#0 array_length%3#0)
                (assert index_is_in_bounds%4#0) // Index access is out of bounds
                let item_index%5#0: uint64 = (* row#0 3u)
                let tmp%6#0: bytes = (extract3 g#0 item_index%5#0 3u)
                let item_index%7#0: uint64 = (* 0u 1u)
                let tmp%8#0: bytes = (extract3 tmp%6#0 item_index%7#0 1u)
                let array_length%9#0: uint64 = 3u
                let index_is_in_bounds%10#0: uint64 = (< row#0 array_length%9#0)
                (assert index_is_in_bounds%10#0) // Index access is out of bounds
                let item_index%11#0: uint64 = (* row#0 3u)
                let tmp%12#0: bytes = (extract3 g#0 item_index%11#0 3u)
                let item_index%13#0: uint64 = (* 1u 1u)
                let awst_tmp%14#0: bytes = (extract3 tmp%12#0 item_index%13#0 1u)
                let tmp%15#0: uint64 = (b== tmp%8#0 awst_tmp%14#0)
                goto tmp%15#0 ? block@1 : block@3
            block@1: // and_contd_L76
                let array_length%16#0: uint64 = 3u
                let index_is_in_bounds%17#0: uint64 = (< row#0 array_length%16#0)
                (assert index_is_in_bounds%17#0) // Index access is out of bounds
                let item_index%18#0: uint64 = (* row#0 3u)
                let tmp%19#0: bytes = (extract3 g#0 item_index%18#0 3u)
                let item_index%20#0: uint64 = (* 2u 1u)
                let tmp%21#0: bytes = (extract3 tmp%19#0 item_index%20#0 1u)
                let tmp%22#0: uint64 = (b== awst_tmp%14#0 tmp%21#0)
                goto tmp%22#0 ? block@2 : block@3
            block@2: // if_body_L76
                return 1u
            block@3: // after_if_else_L76
                let item_index%23#0: uint64 = (* 0u 3u)
                let tmp%24#0: bytes = (extract3 g#0 item_index%23#0 3u)
                let array_length%25#0: uint64 = 3u
                let index_is_in_bounds%26#0: uint64 = (< column#0 array_length%25#0)
                (assert index_is_in_bounds%26#0) // Index access is out of bounds
                let item_index%27#0: uint64 = (* column#0 1u)
                let tmp%28#0: bytes = (extract3 tmp%24#0 item_index%27#0 1u)
                let item_index%29#0: uint64 = (* 1u 3u)
                let tmp%30#0: bytes = (extract3 g#0 item_index%29#0 3u)
                let array_length%31#0: uint64 = 3u
                let index_is_in_bounds%32#0: uint64 = (< column#0 array_length%31#0)
                (assert index_is_in_bounds%32#0) // Index access is out of bounds
                let item_index%33#0: uint64 = (* column#0 1u)
                let awst_tmp%34#0: bytes = (extract3 tmp%30#0 item_index%33#0 1u)
                let tmp%35#0: uint64 = (b== tmp%28#0 awst_tmp%34#0)
                goto tmp%35#0 ? block@4 : block@6
            block@4: // and_contd_L79
                let item_index%36#0: uint64 = (* 2u 3u)
                let tmp%37#0: bytes = (extract3 g#0 item_index%36#0 3u)
                let array_length%38#0: uint64 = 3u
                let index_is_in_bounds%39#0: uint64 = (< column#0 array_length%38#0)
                (assert index_is_in_bounds%39#0) // Index access is out of bounds
                let item_index%40#0: uint64 = (* column#0 1u)
                let tmp%41#0: bytes = (extract3 tmp%37#0 item_index%40#0 1u)
                let tmp%42#0: uint64 = (b== awst_tmp%34#0 tmp%41#0)
                goto tmp%42#0 ? block@5 : block@6
            block@5: // if_body_L79
                return 1u
            block@6: // after_if_else_L79
                let item_index%43#0: uint64 = (* 1u 3u)
                let tmp%44#0: bytes = (extract3 g#0 item_index%43#0 3u)
                let item_index%45#0: uint64 = (* 1u 1u)
                let tmp%46#0: bytes = (extract3 tmp%44#0 item_index%45#0 1u)
                let tmp%47#0: uint64 = (b== player#0 tmp%46#0)
                goto tmp%47#0 ? block@7 : block@14
            block@7: // if_body_L82
                let item_index%48#0: uint64 = (* 0u 3u)
                let tmp%49#0: bytes = (extract3 g#0 item_index%48#0 3u)
                let item_index%50#0: uint64 = (* 0u 1u)
                let tmp%51#0: bytes = (extract3 tmp%49#0 item_index%50#0 1u)
                let tmp%52#0: uint64 = (b== tmp%51#0 player#0)
                goto tmp%52#0 ? block@8 : block@10
            block@8: // and_contd_L84
                let item_index%53#0: uint64 = (* 2u 3u)
                let tmp%54#0: bytes = (extract3 g#0 item_index%53#0 3u)
                let item_index%55#0: uint64 = (* 2u 1u)
                let tmp%56#0: bytes = (extract3 tmp%54#0 item_index%55#0 1u)
                let tmp%57#0: uint64 = (b== player#0 tmp%56#0)
                goto tmp%57#0 ? block@9 : block@10
            block@9: // if_body_L84
                return 1u
            block@10: // after_if_else_L84
                let item_index%58#0: uint64 = (* 0u 3u)
                let tmp%59#0: bytes = (extract3 g#0 item_index%58#0 3u)
                let item_index%60#0: uint64 = (* 2u 1u)
                let tmp%61#0: bytes = (extract3 tmp%59#0 item_index%60#0 1u)
                let tmp%62#0: uint64 = (b== tmp%61#0 player#0)
                goto tmp%62#0 ? block@11 : block@13
            block@11: // and_contd_L86
                let item_index%63#0: uint64 = (* 2u 3u)
                let tmp%64#0: bytes = (extract3 g#0 item_index%63#0 3u)
                let item_index%65#0: uint64 = (* 0u 1u)
                let tmp%66#0: bytes = (extract3 tmp%64#0 item_index%65#0 1u)
                let tmp%67#0: uint64 = (b== player#0 tmp%66#0)
                goto tmp%67#0 ? block@12 : block@13
            block@12: // if_body_L86
                return 1u
            block@13: // after_if_else_L86
                goto block@14
            block@14: // after_if_else_L82
                return 0u
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.whose_turn() -> bytes:
            block@0: // L43
                let (turns_value%0#0: uint64, turns_exists%1#0: uint64) = (app_global_get_ex 0u "turns")
                (assert turns_exists%1#0) // check turns exists
                let tmp%2#0: uint64 = (% turns_value%0#0 2u)
                goto tmp%2#0 ? block@1 : block@2
            block@1: // ternary_true_L45
                let ternary_result%3#0: bytes = 0x01
                goto block@3
            block@2: // ternary_false_L45
                let ternary_result%3#1: bytes = 0x02
                goto block@3
            block@3: // ternary_merge_L45
                let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@1, ternary_result%3#1 <- block@2)
                return ternary_result%3#2
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.play(move.0: uint64, move.1: uint64) -> void:
            block@0: // L47
                let (winner_exists%0#0: any, winner_exists%1#0: uint64) = (app_global_get_ex 0u "winner")
                let tmp%2#0: uint64 = (! winner_exists%1#0)
                (assert tmp%2#0) // Game is already finished
                let (turns_value%3#0: uint64, turns_exists%4#0: uint64) = (app_global_get_ex 0u "turns")
                (assert turns_exists%4#0) // check turns exists
                let tmp%5#0: uint64 = (% turns_value%3#0 2u)
                goto tmp%5#0 ? block@1 : block@2
            block@1: // if_body_L50
                let tmp%6#0: bytes = (txn Sender)
                let (host_value%7#0: bytes, host_exists%8#0: uint64) = (app_global_get_ex 0u "host")
                (assert host_exists%8#0) // check host exists
                let tmp%9#0: uint64 = (== tmp%6#0 host_value%7#0)
                (assert tmp%9#0) // It is the host's turn
                let player#0: bytes = 0x01
                goto block@3
            block@2: // else_body_L50
                let tmp%10#0: bytes = (txn Sender)
                let tmp%11#0: bytes = (global ZeroAddress)
                let (challenger_get_ex%12#0: any, challenger_get_ex%13#0: uint64) = (app_global_get_ex 0u "challenger")
                let tmp%14#0: any = (select tmp%11#0 challenger_get_ex%12#0 challenger_get_ex%13#0)
                let tmp%15#0: uint64 = (== tmp%10#0 tmp%14#0)
                (assert tmp%15#0) // It is the challenger's turn
                let player#1: bytes = 0x02
                goto block@3
            block@3: // after_if_else_L50
                let player#2: bytes = φ(player#0 <- block@1, player#1 <- block@2)
                examples.tictactoe.tictactoe.TicTacToeContract.make_move(player#2, move.0#0, move.1#0)
                return 
    
    program clear-state:
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program() -> uint64:
            block@0: // L15
                return 1u