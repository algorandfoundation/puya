contract examples.tictactoe.tictactoe.TicTacToeContract:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L-1
                let tmp%0#0: bool = examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__() -> bool:
            block@0: // L15
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@9
            block@1: // abi_routing_L15
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "new_game((uint64,uint64))void" => block@2, method "join_game((uint64,uint64))void" => block@3, method "whose_turn()uint8" => block@4, method "play((uint64,uint64))void" => block@5, * => return 0u}
            block@2: // new_game_route_L20
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                let item0%0#0: bytes = ((extract 0 8) tmp%5#0) // on error: Index access is out of bounds
                let item1%0#0: bytes = ((extract 8 8) tmp%5#0) // on error: Index access is out of bounds
                let tmp%6#0: uint64 = (btoi item0%0#0)
                let tmp%7#0: uint64 = (btoi item1%0#0)
                examples.tictactoe.tictactoe.TicTacToeContract.new_game(tmp%6#0, tmp%7#0)
                return 1u
            block@3: // join_game_route_L37
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: bool = (! tmp%8#0)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: uint64 = (txn ApplicationID)
                (assert tmp%10#0) // is not creating
                let tmp%12#0: bytes = (txna ApplicationArgs 1)
                let item0%1#0: bytes = ((extract 0 8) tmp%12#0) // on error: Index access is out of bounds
                let item1%1#0: bytes = ((extract 8 8) tmp%12#0) // on error: Index access is out of bounds
                let tmp%13#0: uint64 = (btoi item0%1#0)
                let tmp%14#0: uint64 = (btoi item1%1#0)
                examples.tictactoe.tictactoe.TicTacToeContract.join_game(tmp%13#0, tmp%14#0)
                return 1u
            block@4: // whose_turn_route_L43
                let tmp%15#0: uint64 = (txn OnCompletion)
                let tmp%16#0: bool = (! tmp%15#0)
                (assert tmp%16#0) // OnCompletion is NoOp
                let tmp%17#0: uint64 = (txn ApplicationID)
                (assert tmp%17#0) // is not creating
                let tmp%19#0: bytes = examples.tictactoe.tictactoe.TicTacToeContract.whose_turn()
                let tmp%20#0: bytes = (concat 0x151f7c75 tmp%19#0)
                (log tmp%20#0)
                return 1u
            block@5: // play_route_L47
                let tmp%21#0: uint64 = (txn OnCompletion)
                let tmp%22#0: bool = (! tmp%21#0)
                (assert tmp%22#0) // OnCompletion is NoOp
                let tmp%23#0: uint64 = (txn ApplicationID)
                (assert tmp%23#0) // is not creating
                let tmp%25#0: bytes = (txna ApplicationArgs 1)
                let item0%2#0: bytes = ((extract 0 8) tmp%25#0) // on error: Index access is out of bounds
                let item1%2#0: bytes = ((extract 8 8) tmp%25#0) // on error: Index access is out of bounds
                let tmp%26#0: uint64 = (btoi item0%2#0)
                let tmp%27#0: uint64 = (btoi item1%2#0)
                examples.tictactoe.tictactoe.TicTacToeContract.play(tmp%26#0, tmp%27#0)
                return 1u
            block@9: // after_if_else_L15
                return 0u
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.new_game(move.0: uint64, move.1: uint64) -> void:
            block@0: // L20
                let reinterpret_bool%0#0: bool = (txn ApplicationID)
                goto reinterpret_bool%0#0 ? block@1 : block@4
            block@1: // if_body_L23
                let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "challenger")
                goto maybe_exists%0#0 ? block@2 : block@3
            block@2: // if_body_L26
                let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "winner")
                (assert maybe_exists%1#0) // Game isn't over
                goto block@3
            block@3: // after_if_else_L23
                (app_global_del "challenger")
                (app_global_del "winner")
                goto block@4
            block@4: // after_if_else_L22
                let new_state_value%0#0: bytes = (txn Sender)
                (app_global_put "host" new_state_value%0#0)
                let new_state_value%1#0: bytes = (bzero 9u)
                (app_global_put "game" new_state_value%1#0)
                let tmp%0#0: bool = (< move.0#0 3u)
                goto tmp%0#0 ? block@5 : block@7
            block@5: // and_contd_L33
                let tmp%1#0: bool = (< move.1#0 3u)
                goto tmp%1#0 ? block@6 : block@7
            block@6: // bool_true_L33
                let and_result%0#0: bool = 1u
                goto block@8
            block@7: // bool_false_L33
                let and_result%0#1: bool = 0u
                goto block@8
            block@8: // bool_merge_L33
                let and_result%0#2: bool = φ(and_result%0#0 <- block@6, and_result%0#1 <- block@7)
                (assert and_result%0#2) // Move must be in range
                let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "game")
                (assert maybe_exists%2#0) // check self.game exists
                let item_offset%0#0: uint64 = (* move.1#0 3u)
                let tmp%2#0: bytes = (extract3 maybe_value%2#0 item_offset%0#0 3u) // on error: Index access is out of bounds
                (assert tmp%0#0) // Index access is out of bounds
                let updated_target%0#0: bytes = (replace3 tmp%2#0 move.0#0 0x01)
                let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "game")
                (assert maybe_exists%3#0) // check self.game exists
                let index_is_in_bounds%1#0: bool = (< move.1#0 3u)
                (assert index_is_in_bounds%1#0) // Index access is out of bounds
                let updated_target%1#0: bytes = (replace3 maybe_value%3#0 item_offset%0#0 updated_target%0#0)
                (app_global_put "game" updated_target%1#0)
                (app_global_put "turns" 0u)
                return 
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.join_game(move.0: uint64, move.1: uint64) -> void:
            block@0: // L37
                let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "challenger")
                let tmp%0#0: bool = (! maybe_exists%0#0)
                (assert tmp%0#0) // Host already has a challenger
                let new_state_value%0#0: bytes = (txn Sender)
                (app_global_put "challenger" new_state_value%0#0)
                examples.tictactoe.tictactoe.TicTacToeContract.make_move(0x02, move.0#0, move.1#0)
                return 
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.make_move(player: bytes, move.0: uint64, move.1: uint64) -> void:
            block@0: // L60
                let tmp%0#0: bool = (< move.0#0 3u)
                goto tmp%0#0 ? block@1 : block@3
            block@1: // and_contd_L63
                let tmp%1#0: bool = (< move.1#0 3u)
                goto tmp%1#0 ? block@2 : block@3
            block@2: // bool_true_L63
                let and_result%0#0: bool = 1u
                goto block@4
            block@3: // bool_false_L63
                let and_result%0#1: bool = 0u
                goto block@4
            block@4: // bool_merge_L63
                let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
                (assert and_result%0#2) // Move must be in range
                let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "game")
                (assert maybe_exists%0#0) // check self.game exists
                let item_offset%0#0: uint64 = (* move.1#0 3u)
                let tmp%2#0: bytes = (extract3 maybe_value%0#0 item_offset%0#0 3u) // on error: Index access is out of bounds
                let reinterpret_biguint%0#0: biguint = (extract3 tmp%2#0 move.0#0 1u) // on error: Index access is out of bounds
                let tmp%3#0: bool = (b== reinterpret_biguint%0#0 0x00)
                (assert tmp%3#0) // Square is already taken
                let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "game")
                (assert maybe_exists%1#0) // check self.game exists
                let tmp%4#0: bytes = (extract3 maybe_value%1#0 item_offset%0#0 3u) // on error: Index access is out of bounds
                (assert tmp%0#0) // Index access is out of bounds
                let updated_target%0#0: bytes = (replace3 tmp%4#0 move.0#0 player#0)
                let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "game")
                (assert maybe_exists%2#0) // check self.game exists
                let index_is_in_bounds%1#0: bool = (< move.1#0 3u)
                (assert index_is_in_bounds%1#0) // Index access is out of bounds
                let updated_target%1#0: bytes = (replace3 maybe_value%2#0 item_offset%0#0 updated_target%0#0)
                (app_global_put "game" updated_target%1#0)
                let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "turns")
                (assert maybe_exists%3#0) // check self.turns exists
                let new_state_value%0#0: uint64 = (+ maybe_value%3#0 1u)
                (app_global_put "turns" new_state_value%0#0)
                let tmp%5#0: bool = examples.tictactoe.tictactoe.TicTacToeContract.did_win(player#0, move.0#0, move.1#0)
                goto tmp%5#0 ? block@5 : block@6
            block@5: // if_body_L68
                (app_global_put "winner" player#0)
                goto block@9
            block@6: // else_body_L69
                let (maybe_value%4#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "turns")
                (assert maybe_exists%4#0) // check self.turns exists
                let tmp%6#0: bool = (== maybe_value%4#0 9u)
                goto tmp%6#0 ? block@7 : block@9
            block@7: // if_body_L70
                (app_global_put "winner" 0x03)
                goto block@9
            block@9: // after_if_else_L67
                return 
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.did_win(player: bytes, column: uint64, row: uint64) -> bool:
            block@0: // L72
                let (g#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "game")
                (assert maybe_exists%0#0) // check self.game exists
                let item_offset%0#0: uint64 = (* row#0 3u)
                let tmp%0#0: bytes = (extract3 g#0 item_offset%0#0 3u) // on error: Index access is out of bounds
                let reinterpret_biguint%0#0: biguint = ((extract 0 1) tmp%0#0) // on error: Index access is out of bounds
                let awst_tmp%0#0: bytes = ((extract 1 1) tmp%0#0) // on error: Index access is out of bounds
                let tmp%2#0: bool = (b== reinterpret_biguint%0#0 awst_tmp%0#0)
                goto tmp%2#0 ? block@1 : block@3
            block@1: // and_contd_L76
                let reinterpret_biguint%3#0: biguint = ((extract 2 1) tmp%0#0) // on error: Index access is out of bounds
                let tmp%4#0: bool = (b== awst_tmp%0#0 reinterpret_biguint%3#0)
                goto tmp%4#0 ? block@2 : block@3
            block@2: // if_body_L77
                return 1u
            block@3: // after_if_else_L76
                let tmp%5#0: bytes = ((extract 0 3) g#0) // on error: Index access is out of bounds
                let reinterpret_biguint%4#0: biguint = (extract3 tmp%5#0 column#0 1u) // on error: Index access is out of bounds
                let tmp%6#0: bytes = ((extract 3 3) g#0) // on error: Index access is out of bounds
                let awst_tmp%1#0: bytes = (extract3 tmp%6#0 column#0 1u) // on error: Index access is out of bounds
                let tmp%7#0: bool = (b== reinterpret_biguint%4#0 awst_tmp%1#0)
                goto tmp%7#0 ? block@4 : block@6
            block@4: // and_contd_L79
                let tmp%8#0: bytes = ((extract 6 3) g#0) // on error: Index access is out of bounds
                let reinterpret_biguint%7#0: biguint = (extract3 tmp%8#0 column#0 1u) // on error: Index access is out of bounds
                let tmp%9#0: bool = (b== awst_tmp%1#0 reinterpret_biguint%7#0)
                goto tmp%9#0 ? block@5 : block@6
            block@5: // if_body_L80
                return 1u
            block@6: // after_if_else_L79
                let reinterpret_biguint%9#0: biguint = ((extract 1 1) tmp%6#0) // on error: Index access is out of bounds
                let tmp%11#0: bool = (b== player#0 reinterpret_biguint%9#0)
                goto tmp%11#0 ? block@7 : block@14
            block@7: // if_body_L84
                let reinterpret_biguint%10#0: biguint = ((extract 0 1) tmp%5#0) // on error: Index access is out of bounds
                let tmp%13#0: bool = (b== reinterpret_biguint%10#0 player#0)
                goto tmp%13#0 ? block@8 : block@10
            block@8: // and_contd_L84
                let tmp%14#0: bytes = ((extract 6 3) g#0) // on error: Index access is out of bounds
                let reinterpret_biguint%13#0: biguint = ((extract 2 1) tmp%14#0) // on error: Index access is out of bounds
                let tmp%15#0: bool = (b== player#0 reinterpret_biguint%13#0)
                goto tmp%15#0 ? block@9 : block@10
            block@9: // if_body_L85
                return 1u
            block@10: // after_if_else_L84
                let reinterpret_biguint%14#0: biguint = ((extract 2 1) tmp%5#0) // on error: Index access is out of bounds
                let tmp%17#0: bool = (b== reinterpret_biguint%14#0 player#0)
                goto tmp%17#0 ? block@11 : block@14
            block@11: // and_contd_L86
                let tmp%18#0: bytes = ((extract 6 3) g#0) // on error: Index access is out of bounds
                let reinterpret_biguint%17#0: biguint = ((extract 0 1) tmp%18#0) // on error: Index access is out of bounds
                let tmp%19#0: bool = (b== player#0 reinterpret_biguint%17#0)
                goto tmp%19#0 ? block@12 : block@14
            block@12: // if_body_L87
                return 1u
            block@14: // after_if_else_L82
                return 0u
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.whose_turn() -> bytes:
            block@0: // L43
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "turns")
                (assert maybe_exists%0#0) // check self.turns exists
                let tmp%0#0: uint64 = (% maybe_value%0#0 2u)
                let tmp%2#0: bytes = (select 0x02 0x01 tmp%0#0)
                return tmp%2#0
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.play(move.0: uint64, move.1: uint64) -> void:
            block@0: // L47
                let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "winner")
                let tmp%0#0: bool = (! maybe_exists%0#0)
                (assert tmp%0#0) // Game is already finished
                let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "turns")
                (assert maybe_exists%1#0) // check self.turns exists
                let tmp%1#0: uint64 = (% maybe_value%1#0 2u)
                goto tmp%1#0 ? block@1 : block@2
            block@1: // if_body_L51
                let tmp%3#0: bytes = (txn Sender)
                let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "host")
                (assert maybe_exists%2#0) // check self.host exists
                let tmp%4#0: bool = (== tmp%3#0 maybe_value%2#0)
                (assert tmp%4#0) // It is the host's turn
                let player#0: bytes = 0x01
                goto block@3
            block@2: // else_body_L54
                let tmp%5#0: bytes = (txn Sender)
                let tmp%6#0: bytes = (global ZeroAddress)
                let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "challenger")
                let tmp%7#0: bytes = (select tmp%6#0 maybe_value%3#0 maybe_exists%3#0)
                let tmp%8#0: bool = (== tmp%5#0 tmp%7#0)
                (assert tmp%8#0) // It is the challenger's turn
                let player#1: bytes = 0x02
                goto block@3
            block@3: // after_if_else_L50
                let player#2: bytes = φ(player#0 <- block@1, player#1 <- block@2)
                examples.tictactoe.tictactoe.TicTacToeContract.make_move(player#2, move.0#0, move.1#0)
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L-1
                return 1u