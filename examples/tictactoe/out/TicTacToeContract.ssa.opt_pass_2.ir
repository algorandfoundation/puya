contract examples.tictactoe.tictactoe.TicTacToeContract:
    program approval:
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.approval_program() -> uint64:
            block@0: // L13
                let tmp%0#0: bytes = (txna ApplicationArgs 0)
                switch tmp%0#0 {method "new_game((uint64,uint64))(uint8[3][3],uint8)" => block@1, method "join_game((uint64,uint64))(uint8[3][3],uint8)" => block@2, method "whose_turn()uint8" => block@3, method "play((uint64,uint64))(uint8[3][3],uint8)" => block@4, * => fail // reject transaction}
            block@1: // new_game_route_L14
                let tmp%1#0: uint64 = (txn OnCompletion)
                let tmp%2#0: uint64 = (! tmp%1#0)
                (assert tmp%2#0) // OnCompletion is NoOp
                let tmp%3#0: bytes = (txna ApplicationArgs 1)
                let item0%4#0: bytes = ((extract 0 8) tmp%3#0)
                let item1%5#0: bytes = ((extract 8 8) tmp%3#0)
                let tmp%8#0: uint64 = (btoi item0%4#0)
                let tmp%9#0: uint64 = (btoi item1%5#0)
                let (awst_tmp%10#0: bytes, awst_tmp%11#0: bytes) = examples.tictactoe.tictactoe.TicTacToeContract.new_game(tmp%8#0, tmp%9#0)
                let encoded_tuple_buffer%13#2: bytes = (concat awst_tmp%10#0 awst_tmp%11#0)
                let tmp%14#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%13#2)
                (log tmp%14#0)
                return 1u
            block@2: // join_game_route_L25
                let tmp%15#0: uint64 = (txn OnCompletion)
                let tmp%16#0: uint64 = (! tmp%15#0)
                (assert tmp%16#0) // OnCompletion is NoOp
                let tmp%17#0: uint64 = (txn ApplicationID)
                (assert tmp%17#0) // is not creating
                let tmp%18#0: bytes = (txna ApplicationArgs 1)
                let item0%19#0: bytes = ((extract 0 8) tmp%18#0)
                let item1%20#0: bytes = ((extract 8 8) tmp%18#0)
                let tmp%23#0: uint64 = (btoi item0%19#0)
                let tmp%24#0: uint64 = (btoi item1%20#0)
                let (awst_tmp%25#0: bytes, awst_tmp%26#0: bytes) = examples.tictactoe.tictactoe.TicTacToeContract.join_game(tmp%23#0, tmp%24#0)
                let encoded_tuple_buffer%28#2: bytes = (concat awst_tmp%25#0 awst_tmp%26#0)
                let tmp%29#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%28#2)
                (log tmp%29#0)
                return 1u
            block@3: // whose_turn_route_L32
                let tmp%30#0: uint64 = (txn OnCompletion)
                let tmp%31#0: uint64 = (! tmp%30#0)
                (assert tmp%31#0) // OnCompletion is NoOp
                let tmp%32#0: uint64 = (txn ApplicationID)
                (assert tmp%32#0) // is not creating
                let tmp%33#0: bytes = examples.tictactoe.tictactoe.TicTacToeContract.whose_turn()
                let tmp%34#0: bytes = (concat 0x151f7c75 tmp%33#0)
                (log tmp%34#0)
                return 1u
            block@4: // play_route_L36
                let tmp%35#0: uint64 = (txn OnCompletion)
                let tmp%36#0: uint64 = (! tmp%35#0)
                (assert tmp%36#0) // OnCompletion is NoOp
                let tmp%37#0: uint64 = (txn ApplicationID)
                (assert tmp%37#0) // is not creating
                let tmp%38#0: bytes = (txna ApplicationArgs 1)
                let item0%39#0: bytes = ((extract 0 8) tmp%38#0)
                let item1%40#0: bytes = ((extract 8 8) tmp%38#0)
                let tmp%43#0: uint64 = (btoi item0%39#0)
                let tmp%44#0: uint64 = (btoi item1%40#0)
                let (awst_tmp%45#0: bytes, awst_tmp%46#0: bytes) = examples.tictactoe.tictactoe.TicTacToeContract.play(tmp%43#0, tmp%44#0)
                let encoded_tuple_buffer%48#2: bytes = (concat awst_tmp%45#0 awst_tmp%46#0)
                let tmp%49#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%48#2)
                (log tmp%49#0)
                return 1u
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.new_game(move.0: uint64, move.1: uint64) -> <bytes, bytes>:
            block@0: // L14
                let new_state_value%0#0: bytes = (bzero 9u)
                (app_global_put "game" new_state_value%0#0)
                let new_state_value%1#0: bytes = (txn Sender)
                (app_global_put "host" new_state_value%1#0)
                let new_state_value%2#0: bytes = (global ZeroAddress)
                (app_global_put "challenger" new_state_value%2#0)
                (app_global_put "winner" 0x00)
                let tmp%3#0: uint64 = (< move.0#0 3u)
                goto tmp%3#0 ? block@1 : block@3
            block@1: // and_contd_L20
                let tmp%4#0: uint64 = (< move.1#0 3u)
                goto tmp%4#0 ? block@2 : block@3
            block@2: // bool_true_L20
                let and_result%5#0: uint64 = 1u
                goto block@4
            block@3: // bool_false_L20
                let and_result%5#1: uint64 = 0u
                goto block@4
            block@4: // bool_merge_L20
                let and_result%5#2: uint64 = φ(and_result%5#0 <- block@2, and_result%5#1 <- block@3)
                (assert and_result%5#2) // Move must be in range
                let (game_value%6#0: bytes, game_exists%7#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%7#0) // check game exists
                let index_is_in_bounds%9#0: uint64 = (< move.1#0 3u)
                (assert index_is_in_bounds%9#0) // Index access is out of bounds
                let item_index%10#0: uint64 = (* move.1#0 3u)
                let tmp%11#0: bytes = (extract3 game_value%6#0 item_index%10#0 3u)
                (assert tmp%3#0) // Index access is out of bounds
                let updated_target%16#0: bytes = (replace3 tmp%11#0 move.0#0 0x01)
                let (game_value%17#0: bytes, game_exists%18#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%18#0) // check game exists
                let updated_target%23#0: bytes = (replace3 game_value%17#0 item_index%10#0 updated_target%16#0)
                (app_global_put "game" updated_target%23#0)
                (app_global_put "turns" 0u)
                let (game_value%24#0: bytes, game_exists%25#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%25#0) // check game exists
                let (winner_value%26#0: bytes, winner_exists%27#0: uint64) = (app_global_get_ex 0u "winner")
                (assert winner_exists%27#0) // check winner exists
                return game_value%24#0 winner_value%26#0
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.join_game(move.0: uint64, move.1: uint64) -> <bytes, bytes>:
            block@0: // L25
                let (challenger_value%0#0: bytes, challenger_exists%1#0: uint64) = (app_global_get_ex 0u "challenger")
                (assert challenger_exists%1#0) // check challenger exists
                let tmp%2#0: bytes = (global ZeroAddress)
                let tmp%3#0: uint64 = (== challenger_value%0#0 tmp%2#0)
                (assert tmp%3#0) // Host already has a challenger
                let new_state_value%4#0: bytes = (txn Sender)
                (app_global_put "challenger" new_state_value%4#0)
                examples.tictactoe.tictactoe.TicTacToeContract.make_move(0x02, move.0#0, move.1#0)
                let (game_value%5#0: bytes, game_exists%6#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%6#0) // check game exists
                let (winner_value%7#0: bytes, winner_exists%8#0: uint64) = (app_global_get_ex 0u "winner")
                (assert winner_exists%8#0) // check winner exists
                return game_value%5#0 winner_value%7#0
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.make_move(piece: bytes, move.0: uint64, move.1: uint64) -> void:
            block@0: // L47
                let tmp%0#0: uint64 = (< move.0#0 3u)
                goto tmp%0#0 ? block@1 : block@3
            block@1: // and_contd_L49
                let tmp%1#0: uint64 = (< move.1#0 3u)
                goto tmp%1#0 ? block@2 : block@3
            block@2: // bool_true_L49
                let and_result%2#0: uint64 = 1u
                goto block@4
            block@3: // bool_false_L49
                let and_result%2#1: uint64 = 0u
                goto block@4
            block@4: // bool_merge_L49
                let and_result%2#2: uint64 = φ(and_result%2#0 <- block@2, and_result%2#1 <- block@3)
                (assert and_result%2#2) // Move must be in range
                let (game_value%3#0: bytes, game_exists%4#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%4#0) // check game exists
                let index_is_in_bounds%6#0: uint64 = (< move.1#0 3u)
                (assert index_is_in_bounds%6#0) // Index access is out of bounds
                let item_index%7#0: uint64 = (* move.1#0 3u)
                let tmp%8#0: bytes = (extract3 game_value%3#0 item_index%7#0 3u)
                (assert tmp%0#0) // Index access is out of bounds
                let tmp%12#0: bytes = (extract3 tmp%8#0 move.0#0 1u)
                let tmp%13#0: uint64 = (b== tmp%12#0 0x00)
                (assert tmp%13#0) // Square is already taken
                let (game_value%14#0: bytes, game_exists%15#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%15#0) // check game exists
                let tmp%19#0: bytes = (extract3 game_value%14#0 item_index%7#0 3u)
                let updated_target%24#0: bytes = (replace3 tmp%19#0 move.0#0 piece#0)
                let (game_value%25#0: bytes, game_exists%26#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%26#0) // check game exists
                let updated_target%31#0: bytes = (replace3 game_value%25#0 item_index%7#0 updated_target%24#0)
                (app_global_put "game" updated_target%31#0)
                let (turns_value%32#0: uint64, turns_exists%33#0: uint64) = (app_global_get_ex 0u "turns")
                (assert turns_exists%33#0) // check turns exists
                let new_state_value%34#0: uint64 = (+ turns_value%32#0 1u)
                (app_global_put "turns" new_state_value%34#0)
                examples.tictactoe.tictactoe.TicTacToeContract.check_winner()
                let (turns_value%35#0: uint64, turns_exists%36#0: uint64) = (app_global_get_ex 0u "turns")
                (assert turns_exists%36#0) // check turns exists
                let tmp%37#0: uint64 = (== turns_value%35#0 9u)
                goto tmp%37#0 ? block@5 : block@7
            block@5: // and_contd_L54
                let (winner_value%38#0: bytes, winner_exists%39#0: uint64) = (app_global_get_ex 0u "winner")
                (assert winner_exists%39#0) // check winner exists
                let tmp%40#0: uint64 = (== winner_value%38#0 0x00)
                goto tmp%40#0 ? block@6 : block@7
            block@6: // if_body_L54
                (app_global_put "winner" 0x03)
                goto block@7
            block@7: // after_if_else_L54
                return 
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.check_winner() -> void:
            block@0: // L57
                let (g#0: bytes, game_exists%1#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%1#0) // check game exists
                let item_index_internal%3#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L60
                let item_index_internal%3#1: uint64 = φ(item_index_internal%3#0 <- block@0, item_index_internal%3#3 <- block@6)
                let continue_looping%5#0: uint64 = (< item_index_internal%3#1 3u)
                goto continue_looping%5#0 ? block@2 : block@8
            block@2: // for_body_L60
                let item_index%6#0: uint64 = (* item_index_internal%3#1 3u)
                let row#0: bytes = (extract3 g#0 item_index%6#0 3u)
                let tmp%8#0: bytes = ((extract 0 1) row#0)
                let tmp%9#0: uint64 = (!= tmp%8#0 0x00)
                goto tmp%9#0 ? block@3 : block@6
            block@3: // and_contd_L61
                let awst_tmp%13#0: bytes = ((extract 1 1) row#0)
                let tmp%14#0: uint64 = (b== tmp%8#0 awst_tmp%13#0)
                goto tmp%14#0 ? block@4 : block@6
            block@4: // and_contd_L61
                let tmp%16#0: bytes = ((extract 2 1) row#0)
                let tmp%17#0: uint64 = (b== awst_tmp%13#0 tmp%16#0)
                goto tmp%17#0 ? block@5 : block@6
            block@5: // if_body_L61
                (app_global_put "winner" tmp%8#0)
                return 
            block@6: // after_if_else_L61
                let item_index_internal%3#3: uint64 = (+ item_index_internal%3#1 1u)
                goto block@1
            block@8: // after_for_L60
                let range_item%20#0: uint64 = 0u
                goto block@9
            block@9: // for_header_L64
                let col#0: uint64 = φ(range_item%20#0 <- block@8, range_item%20#4 <- block@14)
                let continue_looping%21#0: uint64 = (< col#0 3u)
                goto continue_looping%21#0 ? block@10 : block@17
            block@10: // for_body_L64
                let tmp%23#0: bytes = ((extract 0 3) g#0)
                (assert continue_looping%21#0) // Index access is out of bounds
                let tmp%27#0: bytes = (extract3 tmp%23#0 col#0 1u)
                let tmp%28#0: uint64 = (!= tmp%27#0 0x00)
                goto tmp%28#0 ? block@11 : block@14
            block@11: // and_contd_L65
                let tmp%36#0: bytes = ((extract 3 3) g#0)
                let awst_tmp%40#0: bytes = (extract3 tmp%36#0 col#0 1u)
                let tmp%41#0: uint64 = (b== tmp%27#0 awst_tmp%40#0)
                goto tmp%41#0 ? block@12 : block@14
            block@12: // and_contd_L65
                let tmp%43#0: bytes = ((extract 6 3) g#0)
                let tmp%47#0: bytes = (extract3 tmp%43#0 col#0 1u)
                let tmp%48#0: uint64 = (b== awst_tmp%40#0 tmp%47#0)
                goto tmp%48#0 ? block@13 : block@14
            block@13: // if_body_L65
                (app_global_put "winner" tmp%27#0)
                return 
            block@14: // after_if_else_L65
                let range_item%20#4: uint64 = (+ col#0 1u)
                goto block@9
            block@17: // after_for_L64
                let tmp%56#0: bytes = ((extract 3 3) g#0)
                let tmp%58#0: bytes = ((extract 1 1) tmp%56#0)
                let tmp%59#0: uint64 = (!= tmp%58#0 0x00)
                goto tmp%59#0 ? block@18 : block@26
            block@18: // if_body_L68
                let tmp%61#0: bytes = ((extract 0 3) g#0)
                let tmp%63#0: bytes = ((extract 0 1) tmp%61#0)
                let tmp%68#0: uint64 = (b== tmp%63#0 tmp%58#0)
                goto tmp%68#0 ? block@19 : block@21
            block@19: // and_contd_L70
                let tmp%70#0: bytes = ((extract 6 3) g#0)
                let tmp%72#0: bytes = ((extract 2 1) tmp%70#0)
                let tmp%73#0: uint64 = (b== tmp%58#0 tmp%72#0)
                goto tmp%73#0 ? block@20 : block@21
            block@20: // if_body_L70
                (app_global_put "winner" tmp%63#0)
                goto block@26
            block@21: // else_body_L70
                let tmp%81#0: bytes = ((extract 2 1) tmp%61#0)
                let tmp%86#0: uint64 = (b== tmp%81#0 tmp%58#0)
                goto tmp%86#0 ? block@22 : block@26
            block@22: // and_contd_L72
                let tmp%88#0: bytes = ((extract 6 3) g#0)
                let tmp%90#0: bytes = ((extract 0 1) tmp%88#0)
                let tmp%91#0: uint64 = (b== tmp%58#0 tmp%90#0)
                goto tmp%91#0 ? block@23 : block@26
            block@23: // if_body_L72
                (app_global_put "winner" tmp%81#0)
                goto block@26
            block@26: // after_if_else_L68
                return 
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.whose_turn() -> bytes:
            block@0: // L32
                let (turns_value%0#0: uint64, turns_exists%1#0: uint64) = (app_global_get_ex 0u "turns")
                (assert turns_exists%1#0) // check turns exists
                let tmp%2#0: uint64 = (% turns_value%0#0 2u)
                goto tmp%2#0 ? block@1 : block@2
            block@1: // ternary_true_L34
                let ternary_result%3#0: bytes = 0x01
                goto block@3
            block@2: // ternary_false_L34
                let ternary_result%3#1: bytes = 0x02
                goto block@3
            block@3: // ternary_merge_L34
                let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@1, ternary_result%3#1 <- block@2)
                return ternary_result%3#2
        
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.play(move.0: uint64, move.1: uint64) -> <bytes, bytes>:
            block@0: // L36
                let (winner_value%0#0: bytes, winner_exists%1#0: uint64) = (app_global_get_ex 0u "winner")
                (assert winner_exists%1#0) // check winner exists
                let tmp%2#0: uint64 = (== winner_value%0#0 0x00)
                (assert tmp%2#0) // Game is already finished
                let (turns_value%3#0: uint64, turns_exists%4#0: uint64) = (app_global_get_ex 0u "turns")
                (assert turns_exists%4#0) // check turns exists
                let tmp%5#0: uint64 = (% turns_value%3#0 2u)
                let tmp%6#0: uint64 = (== tmp%5#0 1u)
                goto tmp%6#0 ? block@1 : block@2
            block@1: // if_body_L39
                let (host_value%7#0: bytes, host_exists%8#0: uint64) = (app_global_get_ex 0u "host")
                (assert host_exists%8#0) // check host exists
                let tmp%9#0: bytes = (txn Sender)
                let tmp%10#0: uint64 = (== host_value%7#0 tmp%9#0)
                (assert tmp%10#0) // It is the host's turn
                examples.tictactoe.tictactoe.TicTacToeContract.make_move(0x01, move.0#0, move.1#0)
                goto block@3
            block@2: // else_body_L39
                let (challenger_value%11#0: bytes, challenger_exists%12#0: uint64) = (app_global_get_ex 0u "challenger")
                (assert challenger_exists%12#0) // check challenger exists
                let tmp%13#0: bytes = (txn Sender)
                let tmp%14#0: uint64 = (== challenger_value%11#0 tmp%13#0)
                (assert tmp%14#0) // It is the challenger's turn
                examples.tictactoe.tictactoe.TicTacToeContract.make_move(0x02, move.0#0, move.1#0)
                goto block@3
            block@3: // after_if_else_L39
                let (game_value%15#0: bytes, game_exists%16#0: uint64) = (app_global_get_ex 0u "game")
                (assert game_exists%16#0) // check game exists
                let (winner_value%17#0: bytes, winner_exists%18#0: uint64) = (app_global_get_ex 0u "winner")
                (assert winner_exists%18#0) // check winner exists
                return game_value%15#0 winner_value%17#0
    
    program clear-state:
        subroutine examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program() -> uint64:
            block@0: // L13
                return 1u