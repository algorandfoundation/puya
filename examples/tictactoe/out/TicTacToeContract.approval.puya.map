{
  "version": 3,
  "sources": [
    "../tictactoe.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAgCK;;AAAA;AAAA;AAAA;;AAAA;AAhCL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAtBL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBK;;;AAAA;;AAjBA;;AAAA;AAAA;AALL;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKK;;;AAAA;;AAAL;;;;;AAEW;;AAAX;;;AAGe;AAAA;AAAA;AAAA;;AAAf;;;AACuB;AAAA;AAAA;AAAA;;AAAP;AAEA;AAAJ;AACI;AAAJ;AACJ;;AAAY;;AAAZ;AACqC;;AAAT;AAA5B;AAAA;AAAA;AAEO;;AAAS;AAAT;AAAA;AAAA;;AAAA;;;AAAe;;AAAM;AAAN;AAAf;;;;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAyB;;AAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAa;AAAb;;;;;;AAER;;;AAEe;AAAI;AAAJ;AAAA;;AAAA;AAAP;AACA;AAAwB;;AAAxB;AACe;;AAAf;;AAAA;;AAAA;;;;AAI2B;AAAA;AAAA;AAAA;AAAa;;AAAb;AAAoB;;AAAxC;;AAAA;;AAAA;AAAP;AAER;;;AAEe;AAAI;AAAJ;AAAA;;AAAA;AAAP;AACG;AAAA;AAAA;AAAA;AAAa;;AAAb;AAAX;;;AACmB;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACS;;AAMb;;AAAA;;AAAA;;;;AAJW;;AACK;;AADS;AAAA;AAAA;AAAA;AAAd;AAAP;AAGS;;;;;AAGrB;;;;;;AAGe;;AAAS;AAAT;AAAA;AAAA;;;AAAe;;AAAM;AAAN;AAAf;;;;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAA0B;;;AAA1B;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAc;AAAd;AAAA;AAAA;AAAA;AAQI;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAED;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAa;AAAA;;;AAAA;AAAA;;AAAb;AAAA;;;AAA0B;;AAAA;;;AAAb;;AAAA;AAAb;;;AACQ;AAVnB;;;AACY;AAAA;;AAAA;;AACC;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAb;;;AACY;AAAoB;;;AAApB;;AASD;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAgB;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAhB;AAAA;;;AAAgC;;AAAA;;;AAAA;;AAAA;AAAA;AAAhB;;AAAA;AAAhB;;;AACQ;AAbR;;;AAgBU;;AAAA;;;AAAV;;AAAA;AAAX;;;AACe;;AAAA;;;AAAA;;AAAA;AAAA;;;AAAqB;;AAAA;;;AAAA;;;AAAV;;AAAA;AAAX;;;AACQ;AAlBZ;;;AAmBI;;AAAA;;;AAAA;;AAAA;AAAA;;;AAAqB;;AAAA;;;AAAA;;;AAAV;;AAAA;AAAX;;;AACQ;AApBZ;;;AAqBI;AArBJ;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 8"
    },
    "7": {
      "op": "bytecblock \"game\" \"turns\" \"challenger\" \"winner\" 0x01 0x02 \"host\""
    },
    "47": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "49": {
      "op": "bz main_after_if_else@9",
      "stack_out": []
    },
    "52": {
      "op": "pushbytess 0x96a97181 0x17a079b3 0xbb9f1147 0x9eebf58e // method \"new_game((uint64,uint64))void\", method \"join_game((uint64,uint64))void\", method \"whose_turn()uint8\", method \"play((uint64,uint64))void\""
    },
    "74": {
      "op": "txna ApplicationArgs 0"
    },
    "77": {
      "op": "match main_new_game_route@5 main_join_game_route@6 main_whose_turn_route@7 main_play_route@8"
    },
    "87": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "88": {
      "op": "return"
    },
    "89": {
      "block": "main_play_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "91": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "92": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "93": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "95": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "96": {
      "op": "txna ApplicationArgs 1"
    },
    "99": {
      "op": "dup"
    },
    "100": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[16]%2#0",
        "reinterpret_bytes[16]%2#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%2#0",
        "reinterpret_bytes[16]%2#0 (copy)",
        "0"
      ]
    },
    "101": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%2%0#0",
        "reinterpret_bytes[16]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%2#0",
        "item0%2%0#0"
      ]
    },
    "102": {
      "op": "swap",
      "stack_out": [
        "item0%2%0#0",
        "reinterpret_bytes[16]%2#0"
      ]
    },
    "103": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "item0%2%0#0",
        "reinterpret_bytes[16]%2#0"
      ],
      "stack_out": [
        "item0%2%0#0",
        "reinterpret_bytes[16]%2#0",
        "8"
      ]
    },
    "104": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%2%0#0",
        "item1%2%0#0"
      ],
      "stack_out": [
        "item0%2%0#0",
        "item1%2%0#0"
      ]
    },
    "105": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.play",
      "op": "callsub play",
      "stack_out": []
    },
    "108": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "109": {
      "op": "return"
    },
    "110": {
      "block": "main_whose_turn_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "112": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "113": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "114": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "116": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "117": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.whose_turn",
      "op": "callsub whose_turn",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "120": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0x151f7c75"
      ]
    },
    "126": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%13#0"
      ]
    },
    "127": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "128": {
      "op": "log",
      "stack_out": []
    },
    "129": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "130": {
      "op": "return"
    },
    "131": {
      "block": "main_join_game_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "133": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "134": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "135": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "137": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "138": {
      "op": "txna ApplicationArgs 1"
    },
    "141": {
      "op": "dup"
    },
    "142": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%1#0",
        "reinterpret_bytes[16]%1#0 (copy)",
        "0"
      ]
    },
    "143": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%1%0#0",
        "reinterpret_bytes[16]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%1#0",
        "item0%1%0#0"
      ]
    },
    "144": {
      "op": "swap",
      "stack_out": [
        "item0%1%0#0",
        "reinterpret_bytes[16]%1#0"
      ]
    },
    "145": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "item0%1%0#0",
        "reinterpret_bytes[16]%1#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "reinterpret_bytes[16]%1#0",
        "8"
      ]
    },
    "146": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%1%0#0",
        "item1%1%0#0"
      ],
      "stack_out": [
        "item0%1%0#0",
        "item1%1%0#0"
      ]
    },
    "147": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.join_game",
      "op": "callsub join_game",
      "stack_out": []
    },
    "150": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "151": {
      "op": "return"
    },
    "152": {
      "block": "main_new_game_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "154": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "155": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "156": {
      "op": "txna ApplicationArgs 1"
    },
    "159": {
      "op": "dup"
    },
    "160": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "reinterpret_bytes[16]%0#0 (copy)",
        "0"
      ]
    },
    "161": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[16]%0#0",
        "item0%0%0#0"
      ]
    },
    "162": {
      "op": "swap",
      "stack_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0"
      ]
    },
    "163": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "reinterpret_bytes[16]%0#0",
        "8"
      ]
    },
    "164": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0%0#0",
        "item1%0%0#0"
      ],
      "stack_out": [
        "item0%0%0#0",
        "item1%0%0#0"
      ]
    },
    "165": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.new_game",
      "op": "callsub new_game",
      "stack_out": []
    },
    "168": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "169": {
      "op": "return"
    },
    "170": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.new_game",
      "params": {
        "move.0#0": "uint64",
        "move.1#0": "uint64"
      },
      "block": "new_game",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "173": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "175": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_bool%0#0"
      ]
    },
    "177": {
      "op": "bz new_game_after_if_else@4",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "180": {
      "op": "intc_0 // 0"
    },
    "181": {
      "op": "bytec_2 // \"challenger\""
    },
    "182": {
      "op": "app_global_get_ex"
    },
    "183": {
      "op": "bury 1"
    },
    "185": {
      "op": "bz new_game_after_if_else@3"
    },
    "188": {
      "op": "intc_0 // 0"
    },
    "189": {
      "op": "bytec_3 // \"winner\""
    },
    "190": {
      "op": "app_global_get_ex"
    },
    "191": {
      "op": "bury 1"
    },
    "193": {
      "error": "Game isn't over",
      "op": "assert // Game isn't over"
    },
    "194": {
      "block": "new_game_after_if_else@3",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "bytec_2 // \"challenger\"",
      "defined_out": [
        "\"challenger\""
      ],
      "stack_out": [
        "tmp%0#0",
        "\"challenger\""
      ]
    },
    "195": {
      "op": "app_global_del",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "196": {
      "op": "bytec_3 // \"winner\"",
      "defined_out": [
        "\"winner\""
      ],
      "stack_out": [
        "tmp%0#0",
        "\"winner\""
      ]
    },
    "197": {
      "op": "app_global_del",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "block": "new_game_after_if_else@4",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "bytec 6 // \"host\""
    },
    "200": {
      "op": "txn Sender",
      "defined_out": [
        "\"host\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"host\"",
        "new_state_value%0#0"
      ]
    },
    "202": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "203": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9"
      ],
      "stack_out": [
        "tmp%0#0",
        "9"
      ]
    },
    "205": {
      "op": "bzero",
      "defined_out": [
        "reinterpret_bytes[9]%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_bytes[9]%0#0"
      ]
    },
    "206": {
      "op": "bytec_0 // \"game\"",
      "defined_out": [
        "\"game\"",
        "reinterpret_bytes[9]%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_bytes[9]%0#0",
        "\"game\""
      ]
    },
    "207": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"game\"",
        "reinterpret_bytes[9]%0#0"
      ]
    },
    "208": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "209": {
      "op": "frame_dig -2",
      "defined_out": [
        "move.0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "move.0#0 (copy)"
      ]
    },
    "211": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "move.0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "move.0#0 (copy)",
        "3"
      ]
    },
    "212": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "213": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "214": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "216": {
      "op": "bz new_game_bool_false@7",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "219": {
      "op": "frame_dig -1"
    },
    "221": {
      "op": "intc_2 // 3"
    },
    "222": {
      "op": "<"
    },
    "223": {
      "op": "bz new_game_bool_false@7"
    },
    "226": {
      "op": "intc_1 // 1"
    },
    "227": {
      "block": "new_game_bool_merge@8",
      "stack_in": [
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Move must be in range",
      "op": "assert // Move must be in range",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "228": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "229": {
      "op": "bytec_0 // \"game\"",
      "defined_out": [
        "\"game\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"game\""
      ]
    },
    "230": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "231": {
      "error": "check self.game exists",
      "op": "assert // check self.game exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "232": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%2#0",
        "move.1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "move.1#0 (copy)"
      ]
    },
    "234": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "maybe_value%2#0",
        "move.1#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "move.1#0 (copy)",
        "3"
      ]
    },
    "235": {
      "op": "*",
      "defined_out": [
        "item_offset%0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "item_offset%0#0"
      ]
    },
    "236": {
      "op": "dup2",
      "defined_out": [
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "item_offset%0#0",
        "maybe_value%2#0 (copy)",
        "item_offset%0#0 (copy)"
      ]
    },
    "237": {
      "op": "intc_2 // 3",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "item_offset%0#0",
        "maybe_value%2#0 (copy)",
        "item_offset%0#0 (copy)",
        "3"
      ]
    },
    "238": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item_offset%0#0",
        "maybe_value%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "item_offset%0#0",
        "tmp%2#0"
      ]
    },
    "239": {
      "op": "frame_dig 0",
      "defined_out": [
        "item_offset%0#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "item_offset%0#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "241": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "item_offset%0#0",
        "tmp%2#0"
      ]
    },
    "242": {
      "op": "frame_dig -2",
      "defined_out": [
        "item_offset%0#0",
        "maybe_value%2#0",
        "move.0#0 (copy)",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "item_offset%0#0",
        "tmp%2#0",
        "move.0#0 (copy)"
      ]
    },
    "244": {
      "op": "bytec 4 // 0x01",
      "defined_out": [
        "0x01",
        "item_offset%0#0",
        "maybe_value%2#0",
        "move.0#0 (copy)",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "item_offset%0#0",
        "tmp%2#0",
        "move.0#0 (copy)",
        "0x01"
      ]
    },
    "246": {
      "op": "replace3",
      "defined_out": [
        "item_offset%0#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "updated_target%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "item_offset%0#0",
        "updated_target%0#0"
      ]
    },
    "247": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "item_offset%0#0",
        "updated_target%0#0",
        "move.1#0 (copy)"
      ]
    },
    "249": {
      "op": "intc_2 // 3",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "item_offset%0#0",
        "updated_target%0#0",
        "move.1#0 (copy)",
        "3"
      ]
    },
    "250": {
      "op": "<",
      "defined_out": [
        "index_is_in_bounds%1#0",
        "item_offset%0#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "updated_target%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "item_offset%0#0",
        "updated_target%0#0",
        "index_is_in_bounds%1#0"
      ]
    },
    "251": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "item_offset%0#0",
        "updated_target%0#0"
      ]
    },
    "252": {
      "op": "replace3",
      "defined_out": [
        "tmp%0#0",
        "updated_target%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_target%1#0"
      ]
    },
    "253": {
      "op": "bytec_0 // \"game\"",
      "stack_out": [
        "tmp%0#0",
        "updated_target%1#0",
        "\"game\""
      ]
    },
    "254": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"game\"",
        "updated_target%1#0"
      ]
    },
    "255": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "256": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"turns\""
      ]
    },
    "257": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "\"turns\"",
        "0"
      ]
    },
    "258": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "259": {
      "retsub": true,
      "op": "retsub"
    },
    "260": {
      "block": "new_game_bool_false@7",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "261": {
      "op": "b new_game_bool_merge@8"
    },
    "264": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.join_game",
      "params": {
        "move.0#0": "uint64",
        "move.1#0": "uint64"
      },
      "block": "join_game",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "267": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "268": {
      "op": "bytec_2 // \"challenger\"",
      "defined_out": [
        "\"challenger\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"challenger\""
      ]
    },
    "269": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "270": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "272": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "273": {
      "error": "Host already has a challenger",
      "op": "assert // Host already has a challenger",
      "stack_out": []
    },
    "274": {
      "op": "bytec_2 // \"challenger\""
    },
    "275": {
      "op": "txn Sender",
      "defined_out": [
        "\"challenger\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"challenger\"",
        "new_state_value%0#0"
      ]
    },
    "277": {
      "op": "app_global_put",
      "stack_out": []
    },
    "278": {
      "op": "bytec 5 // 0x02",
      "defined_out": [
        "0x02"
      ],
      "stack_out": [
        "0x02"
      ]
    },
    "280": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x02",
        "move.0#0 (copy)"
      ],
      "stack_out": [
        "0x02",
        "move.0#0 (copy)"
      ]
    },
    "282": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x02",
        "move.0#0 (copy)",
        "move.1#0 (copy)"
      ],
      "stack_out": [
        "0x02",
        "move.0#0 (copy)",
        "move.1#0 (copy)"
      ]
    },
    "284": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.make_move",
      "op": "callsub make_move",
      "stack_out": []
    },
    "287": {
      "retsub": true,
      "op": "retsub"
    },
    "288": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.whose_turn",
      "params": {},
      "block": "whose_turn",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "289": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"turns\""
      ]
    },
    "290": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "291": {
      "error": "check self.turns exists",
      "op": "assert // check self.turns exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "292": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "2"
      ]
    },
    "294": {
      "op": "%",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "295": {
      "op": "bytec 5 // 0x02",
      "defined_out": [
        "0x02",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x02"
      ]
    },
    "297": {
      "op": "bytec 4 // 0x01",
      "defined_out": [
        "0x01",
        "0x02",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x02",
        "0x01"
      ]
    },
    "299": {
      "op": "uncover 2",
      "stack_out": [
        "0x02",
        "0x01",
        "tmp%0#0"
      ]
    },
    "301": {
      "op": "select",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "select%0#0"
      ]
    },
    "302": {
      "retsub": true,
      "op": "retsub"
    },
    "303": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.play",
      "params": {
        "move.0#0": "uint64",
        "move.1#0": "uint64"
      },
      "block": "play",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "306": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "307": {
      "op": "bytec_3 // \"winner\"",
      "defined_out": [
        "\"winner\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"winner\""
      ]
    },
    "308": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "309": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "311": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "312": {
      "error": "Game is already finished",
      "op": "assert // Game is already finished",
      "stack_out": []
    },
    "313": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "314": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"turns\""
      ]
    },
    "315": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "316": {
      "error": "check self.turns exists",
      "op": "assert // check self.turns exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "317": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "2"
      ]
    },
    "319": {
      "op": "%",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "320": {
      "op": "bz play_else_body@2",
      "stack_out": []
    },
    "323": {
      "op": "txn Sender"
    },
    "325": {
      "op": "intc_0 // 0"
    },
    "326": {
      "op": "bytec 6 // \"host\""
    },
    "328": {
      "op": "app_global_get_ex"
    },
    "329": {
      "error": "check self.host exists",
      "op": "assert // check self.host exists"
    },
    "330": {
      "op": "=="
    },
    "331": {
      "error": "It is the host's turn",
      "op": "assert // It is the host's turn"
    },
    "332": {
      "op": "bytec 4 // 0x01"
    },
    "334": {
      "block": "play_after_if_else@3",
      "stack_in": [
        "player#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "move.0#0 (copy)",
        "player#0"
      ],
      "stack_out": [
        "player#0",
        "move.0#0 (copy)"
      ]
    },
    "336": {
      "op": "frame_dig -1",
      "defined_out": [
        "move.0#0 (copy)",
        "move.1#0 (copy)",
        "player#0"
      ],
      "stack_out": [
        "player#0",
        "move.0#0 (copy)",
        "move.1#0 (copy)"
      ]
    },
    "338": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.make_move",
      "op": "callsub make_move",
      "stack_out": []
    },
    "341": {
      "retsub": true,
      "op": "retsub"
    },
    "342": {
      "block": "play_else_body@2",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "344": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "346": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "0"
      ]
    },
    "347": {
      "op": "bytec_2 // \"challenger\"",
      "defined_out": [
        "\"challenger\"",
        "0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "0",
        "\"challenger\""
      ]
    },
    "348": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "349": {
      "op": "select",
      "defined_out": [
        "state_get%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "state_get%0#0"
      ]
    },
    "350": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "351": {
      "error": "It is the challenger's turn",
      "op": "assert // It is the challenger's turn",
      "stack_out": []
    },
    "352": {
      "op": "bytec 5 // 0x02",
      "defined_out": [
        "player#0"
      ],
      "stack_out": [
        "player#0"
      ]
    },
    "354": {
      "op": "b play_after_if_else@3"
    },
    "357": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.make_move",
      "params": {
        "player#0": "bytes",
        "move.0#0": "uint64",
        "move.1#0": "uint64"
      },
      "block": "make_move",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "360": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "361": {
      "op": "dupn 5",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1"
      ]
    },
    "363": {
      "op": "frame_dig -2",
      "defined_out": [
        "move.0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "move.0#0 (copy)"
      ]
    },
    "365": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "move.0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "move.0#0 (copy)",
        "3"
      ]
    },
    "366": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ]
    },
    "367": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "368": {
      "op": "bz make_move_bool_false@3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ]
    },
    "371": {
      "op": "frame_dig -1"
    },
    "373": {
      "op": "intc_2 // 3"
    },
    "374": {
      "op": "<"
    },
    "375": {
      "op": "bz make_move_bool_false@3"
    },
    "378": {
      "op": "intc_1 // 1"
    },
    "379": {
      "block": "make_move_bool_merge@4",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "Move must be in range",
      "op": "assert // Move must be in range",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ]
    },
    "380": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "0"
      ]
    },
    "381": {
      "op": "bytec_0 // \"game\"",
      "defined_out": [
        "\"game\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "0",
        "\"game\""
      ]
    },
    "382": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "383": {
      "error": "check self.game exists",
      "op": "assert // check self.game exists",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "384": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "move.1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "maybe_value%0#0",
        "move.1#0 (copy)"
      ]
    },
    "386": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "maybe_value%0#0",
        "move.1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "maybe_value%0#0",
        "move.1#0 (copy)",
        "3"
      ]
    },
    "387": {
      "op": "*",
      "defined_out": [
        "item_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "maybe_value%0#0",
        "item_offset%0#0"
      ]
    },
    "388": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%0#0"
      ]
    },
    "389": {
      "op": "dig 1",
      "defined_out": [
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%0#0",
        "item_offset%0#0 (copy)"
      ]
    },
    "391": {
      "op": "intc_2 // 3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%0#0",
        "item_offset%0#0 (copy)",
        "3"
      ]
    },
    "392": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item_offset%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "tmp%2#0"
      ]
    },
    "393": {
      "op": "frame_dig -2",
      "defined_out": [
        "item_offset%0#0",
        "move.0#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "tmp%2#0",
        "move.0#0 (copy)"
      ]
    },
    "395": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_offset%0#0",
        "move.0#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "tmp%2#0",
        "move.0#0 (copy)",
        "1"
      ]
    },
    "396": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item_offset%0#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "397": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "item_offset%0#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "reinterpret_biguint%0#0",
        "0x00"
      ]
    },
    "400": {
      "op": "b==",
      "defined_out": [
        "item_offset%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "tmp%3#0"
      ]
    },
    "401": {
      "error": "Square is already taken",
      "op": "assert // Square is already taken",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0"
      ]
    },
    "402": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "0"
      ]
    },
    "403": {
      "op": "bytec_0 // \"game\"",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "0",
        "\"game\""
      ]
    },
    "404": {
      "op": "app_global_get_ex",
      "defined_out": [
        "item_offset%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "405": {
      "error": "check self.game exists",
      "op": "assert // check self.game exists",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0"
      ]
    },
    "406": {
      "op": "dup",
      "defined_out": [
        "item_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "407": {
      "op": "dig 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "item_offset%0#0 (copy)"
      ]
    },
    "409": {
      "op": "intc_2 // 3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "item_offset%0#0 (copy)",
        "3"
      ]
    },
    "410": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "item_offset%0#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ]
    },
    "411": {
      "op": "frame_dig 6",
      "defined_out": [
        "item_offset%0#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "413": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ]
    },
    "414": {
      "op": "frame_dig -2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "tmp%4#0",
        "move.0#0 (copy)"
      ]
    },
    "416": {
      "op": "frame_dig -3",
      "defined_out": [
        "item_offset%0#0",
        "maybe_value%1#0",
        "move.0#0 (copy)",
        "player#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "tmp%4#0",
        "move.0#0 (copy)",
        "player#0 (copy)"
      ]
    },
    "418": {
      "op": "replace3",
      "defined_out": [
        "item_offset%0#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "updated_target%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "updated_target%0#0"
      ]
    },
    "419": {
      "op": "frame_dig -1",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "updated_target%0#0",
        "move.1#0 (copy)"
      ]
    },
    "421": {
      "op": "intc_2 // 3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "updated_target%0#0",
        "move.1#0 (copy)",
        "3"
      ]
    },
    "422": {
      "op": "<",
      "defined_out": [
        "index_is_in_bounds%1#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "updated_target%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "updated_target%0#0",
        "index_is_in_bounds%1#0"
      ]
    },
    "423": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "updated_target%0#0"
      ]
    },
    "424": {
      "op": "dig 2"
    },
    "426": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%1#0",
        "item_offset%0#0 (copy)",
        "updated_target%0#0"
      ]
    },
    "427": {
      "op": "replace3",
      "defined_out": [
        "item_offset%0#0",
        "tmp%0#0",
        "updated_target%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "updated_target%1#0"
      ]
    },
    "428": {
      "op": "bytec_0 // \"game\"",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "updated_target%1#0",
        "\"game\""
      ]
    },
    "429": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "\"game\"",
        "updated_target%1#0"
      ]
    },
    "430": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0"
      ]
    },
    "431": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "0"
      ]
    },
    "432": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "0",
        "item_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "0",
        "\"turns\""
      ]
    },
    "433": {
      "op": "app_global_get_ex",
      "defined_out": [
        "item_offset%0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "434": {
      "error": "check self.turns exists",
      "op": "assert // check self.turns exists",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%2#0"
      ]
    },
    "435": {
      "op": "intc_1 // 1",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "436": {
      "op": "+",
      "defined_out": [
        "item_offset%0#0",
        "new_state_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "new_state_value%0#0"
      ]
    },
    "437": {
      "op": "bytec_1 // \"turns\"",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "new_state_value%0#0",
        "\"turns\""
      ]
    },
    "438": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "\"turns\"",
        "new_state_value%0#0"
      ]
    },
    "439": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0"
      ]
    },
    "440": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "0"
      ]
    },
    "441": {
      "op": "bytec_0 // \"game\"",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "0",
        "\"game\""
      ]
    },
    "442": {
      "op": "app_global_get_ex",
      "defined_out": [
        "g#0",
        "item_offset%0#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "g#0",
        "maybe_exists%0#0"
      ]
    },
    "443": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_exists%0#0",
        "g#0"
      ]
    },
    "444": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "maybe_exists%0#0",
        "g#0",
        "g#0 (copy)"
      ]
    },
    "445": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "g#0",
        "maybe_exists%0#0",
        "g#0"
      ]
    },
    "447": {
      "op": "frame_bury 2",
      "defined_out": [
        "g#0",
        "item_offset%0#0",
        "maybe_exists%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "g#0",
        "maybe_exists%0#0"
      ]
    },
    "449": {
      "error": "check self.game exists",
      "op": "assert // check self.game exists",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "item_offset%0#0",
        "g#0"
      ]
    },
    "450": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "g#0",
        "item_offset%0#0"
      ]
    },
    "451": {
      "op": "intc_2 // 3",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "g#0",
        "item_offset%0#0",
        "3"
      ]
    },
    "452": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "g#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%0#1"
      ]
    },
    "453": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%0#1"
      ]
    },
    "454": {
      "op": "frame_bury 3",
      "defined_out": [
        "g#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%0#1"
      ]
    },
    "456": {
      "op": "dup",
      "defined_out": [
        "g#0",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "457": {
      "error": "Index access is out of bounds",
      "op": "extract 0 1 // on error: Index access is out of bounds",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%0#1",
        "reinterpret_biguint%0#0"
      ]
    },
    "460": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "tmp%0#1"
      ]
    },
    "461": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "awst_tmp%0#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "464": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "465": {
      "op": "frame_bury 0",
      "defined_out": [
        "awst_tmp%0#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%0#0",
        "awst_tmp%0#0"
      ]
    },
    "467": {
      "op": "b==",
      "defined_out": [
        "awst_tmp%0#0",
        "g#0",
        "tmp%0#0",
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%2#1"
      ]
    },
    "468": {
      "op": "bz make_move_after_if_else@13",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ]
    },
    "471": {
      "op": "frame_dig 3"
    },
    "473": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds"
    },
    "476": {
      "op": "frame_dig 0"
    },
    "478": {
      "op": "b=="
    },
    "479": {
      "op": "bz make_move_after_if_else@13"
    },
    "482": {
      "op": "intc_1 // 1"
    },
    "483": {
      "block": "make_move_after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.did_win@25",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "op": "bz make_move_else_body@6",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ]
    },
    "486": {
      "op": "bytec_3 // \"winner\""
    },
    "487": {
      "op": "frame_dig -3"
    },
    "489": {
      "op": "app_global_put"
    },
    "490": {
      "block": "make_move_after_if_else@9",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "491": {
      "block": "make_move_else_body@6",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "0"
      ]
    },
    "492": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "0",
        "\"turns\""
      ]
    },
    "493": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "494": {
      "error": "check self.turns exists",
      "op": "assert // check self.turns exists",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "maybe_value%3#0"
      ]
    },
    "495": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "maybe_value%3#0",
        "9"
      ]
    },
    "497": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "498": {
      "op": "bz make_move_after_if_else@9",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ]
    },
    "501": {
      "op": "bytec_3 // \"winner\""
    },
    "502": {
      "op": "pushbytes 0x03"
    },
    "505": {
      "op": "app_global_put"
    },
    "506": {
      "retsub": true,
      "op": "retsub"
    },
    "507": {
      "block": "make_move_after_if_else@13",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "g#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "g#0"
      ]
    },
    "509": {
      "op": "dup",
      "defined_out": [
        "g#0",
        "g#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "g#0",
        "g#0 (copy)"
      ]
    },
    "510": {
      "error": "Index access is out of bounds",
      "op": "extract 0 3 // on error: Index access is out of bounds",
      "defined_out": [
        "g#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "g#0",
        "tmp%5#1"
      ]
    },
    "513": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "g#0",
        "tmp%5#1",
        "tmp%5#1"
      ]
    },
    "514": {
      "op": "frame_bury 4",
      "defined_out": [
        "g#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "g#0",
        "tmp%5#1"
      ]
    },
    "516": {
      "op": "frame_dig -2",
      "defined_out": [
        "g#0",
        "move.0#0 (copy)",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "g#0",
        "tmp%5#1",
        "move.0#0 (copy)"
      ]
    },
    "518": {
      "op": "intc_1 // 1",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "g#0",
        "tmp%5#1",
        "move.0#0 (copy)",
        "1"
      ]
    },
    "519": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "g#0",
        "reinterpret_biguint%4#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "g#0",
        "reinterpret_biguint%4#0"
      ]
    },
    "520": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%4#0",
        "g#0"
      ]
    },
    "521": {
      "error": "Index access is out of bounds",
      "op": "extract 3 3 // on error: Index access is out of bounds",
      "defined_out": [
        "g#0",
        "reinterpret_biguint%4#0",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%4#0",
        "tmp%6#1"
      ]
    },
    "524": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%4#0",
        "tmp%6#1",
        "tmp%6#1"
      ]
    },
    "525": {
      "op": "frame_bury 5",
      "defined_out": [
        "g#0",
        "reinterpret_biguint%4#0",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%4#0",
        "tmp%6#1"
      ]
    },
    "527": {
      "op": "frame_dig -2",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%4#0",
        "tmp%6#1",
        "move.0#0 (copy)"
      ]
    },
    "529": {
      "op": "intc_1 // 1",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%4#0",
        "tmp%6#1",
        "move.0#0 (copy)",
        "1"
      ]
    },
    "530": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "awst_tmp%1#0",
        "g#0",
        "reinterpret_biguint%4#0",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%4#0",
        "awst_tmp%1#0"
      ]
    },
    "531": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%4#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0"
      ]
    },
    "532": {
      "op": "frame_bury 1",
      "defined_out": [
        "awst_tmp%1#0",
        "g#0",
        "reinterpret_biguint%4#0",
        "tmp%5#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%4#0",
        "awst_tmp%1#0"
      ]
    },
    "534": {
      "op": "b==",
      "defined_out": [
        "awst_tmp%1#0",
        "g#0",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "535": {
      "op": "bz make_move_after_if_else@16",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ]
    },
    "538": {
      "op": "frame_dig 2"
    },
    "540": {
      "error": "Index access is out of bounds",
      "op": "extract 6 3 // on error: Index access is out of bounds"
    },
    "543": {
      "op": "frame_dig -2"
    },
    "545": {
      "op": "intc_1 // 1"
    },
    "546": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "547": {
      "op": "frame_dig 1"
    },
    "549": {
      "op": "b=="
    },
    "550": {
      "op": "bz make_move_after_if_else@16"
    },
    "553": {
      "op": "intc_1 // 1"
    },
    "554": {
      "op": "b make_move_after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.did_win@25"
    },
    "557": {
      "block": "make_move_after_if_else@16",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "tmp%6#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%6#1"
      ]
    },
    "559": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%9#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%9#0"
      ]
    },
    "562": {
      "op": "frame_dig -3",
      "defined_out": [
        "player#0 (copy)",
        "reinterpret_biguint%9#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%9#0",
        "player#0 (copy)"
      ]
    },
    "564": {
      "op": "b==",
      "defined_out": [
        "tmp%11#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "565": {
      "op": "bz make_move_after_if_else@24",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ]
    },
    "568": {
      "op": "frame_dig 4"
    },
    "570": {
      "error": "Index access is out of bounds",
      "op": "extract 0 1 // on error: Index access is out of bounds"
    },
    "573": {
      "op": "frame_dig -3"
    },
    "575": {
      "op": "b=="
    },
    "576": {
      "op": "bz make_move_after_if_else@20"
    },
    "579": {
      "op": "frame_dig 2"
    },
    "581": {
      "error": "Index access is out of bounds",
      "op": "extract 6 3 // on error: Index access is out of bounds"
    },
    "584": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds"
    },
    "587": {
      "op": "frame_dig -3"
    },
    "589": {
      "op": "b=="
    },
    "590": {
      "op": "bz make_move_after_if_else@20"
    },
    "593": {
      "op": "intc_1 // 1"
    },
    "594": {
      "op": "b make_move_after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.did_win@25"
    },
    "597": {
      "block": "make_move_after_if_else@20",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%5#1"
      ]
    },
    "599": {
      "error": "Index access is out of bounds",
      "op": "extract 2 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%14#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%14#0"
      ]
    },
    "602": {
      "op": "frame_dig -3",
      "defined_out": [
        "player#0 (copy)",
        "reinterpret_biguint%14#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "reinterpret_biguint%14#0",
        "player#0 (copy)"
      ]
    },
    "604": {
      "op": "b==",
      "defined_out": [
        "tmp%17#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%17#0"
      ]
    },
    "605": {
      "op": "bz make_move_after_if_else@24",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ]
    },
    "608": {
      "op": "frame_dig 2"
    },
    "610": {
      "error": "Index access is out of bounds",
      "op": "extract 6 3 // on error: Index access is out of bounds"
    },
    "613": {
      "error": "Index access is out of bounds",
      "op": "extract 0 1 // on error: Index access is out of bounds"
    },
    "616": {
      "op": "frame_dig -3"
    },
    "618": {
      "op": "b=="
    },
    "619": {
      "op": "bz make_move_after_if_else@24"
    },
    "622": {
      "op": "intc_1 // 1"
    },
    "623": {
      "op": "b make_move_after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.did_win@25"
    },
    "626": {
      "block": "make_move_after_if_else@24",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "627": {
      "op": "b make_move_after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.did_win@25"
    },
    "630": {
      "block": "make_move_bool_false@3",
      "stack_in": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%1#0",
        "g#0",
        "tmp%0#1",
        "tmp%5#1",
        "tmp%6#1",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "631": {
      "op": "b make_move_bool_merge@4"
    }
  }
}