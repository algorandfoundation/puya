{
  "version": 3,
  "sources": [
    "../tictactoe.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;;;AAAA;;;;AAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;AAKK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEM;;AAAX;;;AAGe;AAAA;AAAA;AAAA;;AAAf;;;AACuB;AAAA;AAAA;AAAA;;AAAP;AAEA;AAAJ;AACI;AAAJ;AACJ;;AAAY;;AAAZ;AACqC;;AAAT;AAA5B;AAAA;AAAA;AAEO;;AAAS;AAAT;AAAA;;;AAAe;AAAM;AAAN;AAAf;;;;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAyB;;AAAzB;AAAA;AAAA;AAAA;AAAA;AACA;AAAa;AAAb;AAfH;AAAA;;;;;AAiBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEU;AAAI;AAAJ;AAAA;;AAAA;AAAP;AACA;AAAwB;;AAAxB;AACe;;AAAf;;AAAA;;;AAJH;AAAA;AAQ8B;AAAA;AAAA;AAAA;AAAa;;AAAb;AAAoB;;AAAxC;;AAAA;;AAAA;AAFV;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEU;AAAI;AAAJ;AAAA;;AAAA;AAAP;AACG;AAAA;AAAA;AAAA;AAAa;;AAAb;AAAX;;;AACmB;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACS;;AAMb;;AAAA;;AAAA;;;AAXH;AAAA;AAOc;;AACK;;AADS;AAAA;AAAA;AAAA;AAAd;AAAP;AAGS;;;;;AAGrB;;;;;;AAGe;;AAAS;AAAT;AAAA;;;AAAe;;AAAM;AAAN;AAAf;;;;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAA0B;;;AAA1B;AAAP;AACA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAc;AAAd;AAAA;AAAA;AAAA;AAQI;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAED;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAa;;AAAA;AAAb;;;AACQ;AAVnB;;;AACY;AAAA;;AAAA;;AACC;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAb;;;AACY;AAAoB;;;AAApB;;AASD;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAgB;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAhB;AAAA;;;AAAgC;;AAAA;;;AAAA;;AAAA;AAAA;AAAhB;;AAAA;AAAhB;;;AACQ;AAbR;;;AAgBU;;AAAA;;;AAAV;;AAAA;AAAX;;;AACe;;AAAA;;;AAAA;;AAAA;AAAA;;;AAAqB;;AAAA;;;AAAA;;;AAAV;;AAAA;AAAX;;;AACQ;AAlBZ;;;AAmBI;;AAAA;;;AAAA;;AAAA;AAAA;;;AAAqB;;AAAA;;;AAAA;;;AAAV;;AAAA;AAAX;;;AACQ;AApBZ;;;AAqBI;AArBJ;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 8"
    },
    "7": {
      "op": "bytecblock \"game\" \"turns\" \"challenger\" \"winner\" 0x01 0x02 0x96a97181 \"host\""
    },
    "52": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "54": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "55": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "57": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "58": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "59": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "60": {
      "op": "switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED",
      "stack_out": []
    },
    "86": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "87": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "bytec 6 // method \"new_game((uint64,uint64))void\"",
      "defined_out": [
        "Method(new_game((uint64,uint64))void)"
      ],
      "stack_out": [
        "Method(new_game((uint64,uint64))void)"
      ]
    },
    "89": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(new_game((uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(new_game((uint64,uint64))void)",
        "tmp%6#0"
      ]
    },
    "92": {
      "op": "match new_game",
      "stack_out": []
    },
    "96": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "97": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "bytec 6 // method \"new_game((uint64,uint64))void\"",
      "defined_out": [
        "Method(new_game((uint64,uint64))void)"
      ],
      "stack_out": [
        "Method(new_game((uint64,uint64))void)"
      ]
    },
    "99": {
      "op": "pushbytess 0x17a079b3 0xbb9f1147 0x9eebf58e // method \"join_game((uint64,uint64))void\", method \"whose_turn()uint8\", method \"play((uint64,uint64))void\"",
      "defined_out": [
        "Method(join_game((uint64,uint64))void)",
        "Method(new_game((uint64,uint64))void)",
        "Method(play((uint64,uint64))void)",
        "Method(whose_turn()uint8)"
      ],
      "stack_out": [
        "Method(new_game((uint64,uint64))void)",
        "Method(join_game((uint64,uint64))void)",
        "Method(whose_turn()uint8)",
        "Method(play((uint64,uint64))void)"
      ]
    },
    "116": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(join_game((uint64,uint64))void)",
        "Method(new_game((uint64,uint64))void)",
        "Method(play((uint64,uint64))void)",
        "Method(whose_turn()uint8)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(new_game((uint64,uint64))void)",
        "Method(join_game((uint64,uint64))void)",
        "Method(whose_turn()uint8)",
        "Method(play((uint64,uint64))void)",
        "tmp%5#0"
      ]
    },
    "119": {
      "op": "match new_game join_game whose_turn play",
      "stack_out": []
    },
    "129": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "130": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.new_game[routing]",
      "params": {},
      "block": "new_game",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "133": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "134": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)",
        "0"
      ]
    },
    "135": {
      "op": "extract_uint64",
      "defined_out": [
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "move.0#0"
      ]
    },
    "136": {
      "op": "swap",
      "defined_out": [
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "137": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "8"
      ]
    },
    "138": {
      "op": "extract_uint64",
      "defined_out": [
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "139": {
      "op": "txn ApplicationID",
      "defined_out": [
        "move.0#0",
        "move.1#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%0#1"
      ]
    },
    "141": {
      "op": "bz new_game_after_if_else@5",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "144": {
      "op": "intc_0 // 0",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "0"
      ]
    },
    "145": {
      "op": "bytec_2 // \"challenger\"",
      "defined_out": [
        "\"challenger\"",
        "0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "0",
        "\"challenger\""
      ]
    },
    "146": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "147": {
      "op": "bury 1",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_exists%0#0"
      ]
    },
    "149": {
      "op": "bz new_game_after_if_else@4",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "152": {
      "op": "intc_0 // 0",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "0"
      ]
    },
    "153": {
      "op": "bytec_3 // \"winner\"",
      "defined_out": [
        "\"winner\"",
        "0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "0",
        "\"winner\""
      ]
    },
    "154": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_%1#0",
        "maybe_exists%1#0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "155": {
      "op": "bury 1",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_exists%1#0"
      ]
    },
    "157": {
      "error": "Game isn't over",
      "op": "assert // Game isn't over",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "158": {
      "block": "new_game_after_if_else@4",
      "stack_in": [
        "move.0#0",
        "move.1#0"
      ],
      "op": "bytec_2 // \"challenger\"",
      "defined_out": [
        "\"challenger\""
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "\"challenger\""
      ]
    },
    "159": {
      "op": "app_global_del",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "160": {
      "op": "bytec_3 // \"winner\"",
      "defined_out": [
        "\"winner\""
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "\"winner\""
      ]
    },
    "161": {
      "op": "app_global_del",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "162": {
      "block": "new_game_after_if_else@5",
      "stack_in": [
        "move.0#0",
        "move.1#0"
      ],
      "op": "bytec 7 // \"host\"",
      "defined_out": [
        "\"host\""
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "\"host\""
      ]
    },
    "164": {
      "op": "txn Sender",
      "defined_out": [
        "\"host\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "\"host\"",
        "tmp%2#0"
      ]
    },
    "166": {
      "op": "app_global_put",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "167": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "9"
      ]
    },
    "169": {
      "op": "bzero",
      "defined_out": [
        "reinterpret_Encoded(uint8[3][3])%0#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "reinterpret_Encoded(uint8[3][3])%0#0"
      ]
    },
    "170": {
      "op": "bytec_0 // \"game\"",
      "defined_out": [
        "\"game\"",
        "reinterpret_Encoded(uint8[3][3])%0#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "reinterpret_Encoded(uint8[3][3])%0#0",
        "\"game\""
      ]
    },
    "171": {
      "op": "swap",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "\"game\"",
        "reinterpret_Encoded(uint8[3][3])%0#0"
      ]
    },
    "172": {
      "op": "app_global_put",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "173": {
      "op": "dig 1",
      "defined_out": [
        "move.0#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "move.0#0"
      ]
    },
    "175": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "move.0#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "move.0#0",
        "3"
      ]
    },
    "176": {
      "op": "<",
      "defined_out": [
        "move.0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%3#0"
      ]
    },
    "177": {
      "op": "bz new_game_bool_false@8",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "180": {
      "op": "dup",
      "defined_out": [
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "move.1#0"
      ]
    },
    "181": {
      "op": "intc_2 // 3",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "move.1#0",
        "3"
      ]
    },
    "182": {
      "op": "<",
      "defined_out": [
        "move.0#0",
        "move.1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%4#0"
      ]
    },
    "183": {
      "op": "bz new_game_bool_false@8",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "186": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "and_result%0#0"
      ]
    },
    "187": {
      "error": "Move must be in range",
      "block": "new_game_bool_merge@9",
      "stack_in": [
        "move.0#0",
        "move.1#0",
        "and_result%0#0"
      ],
      "op": "assert // Move must be in range",
      "defined_out": [],
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "188": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "0"
      ]
    },
    "189": {
      "op": "bytec_0 // \"game\"",
      "defined_out": [
        "\"game\"",
        "0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "0",
        "\"game\""
      ]
    },
    "190": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0",
        "maybe_exists%2#0"
      ]
    },
    "191": {
      "error": "check self.game exists",
      "op": "assert // check self.game exists",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0"
      ]
    },
    "192": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0",
        "move.1#0"
      ]
    },
    "194": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "maybe_value%0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0",
        "move.1#0",
        "3"
      ]
    },
    "195": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "maybe_value%0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "196": {
      "op": "dup2",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%bytes_offset%0#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%bytes_offset%0#0 (copy)"
      ]
    },
    "197": {
      "op": "intc_2 // 3",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%bytes_offset%0#0 (copy)",
        "3"
      ]
    },
    "198": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "maybe_value%0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "199": {
      "op": "dig 4",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "maybe_value%0#0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "move.0#0"
      ]
    },
    "201": {
      "op": "bytec 4 // 0x01",
      "defined_out": [
        "0x01",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "maybe_value%0#0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "move.0#0",
        "0x01"
      ]
    },
    "203": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%updated_array%0#0",
        "maybe_value%0#0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%updated_array%0#0"
      ]
    },
    "204": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%updated_array%1#0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "aggregate%updated_array%1#0"
      ]
    },
    "205": {
      "op": "bytec_0 // \"game\"",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "aggregate%updated_array%1#0",
        "\"game\""
      ]
    },
    "206": {
      "op": "swap",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "\"game\"",
        "aggregate%updated_array%1#0"
      ]
    },
    "207": {
      "op": "app_global_put",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "208": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "\"turns\""
      ]
    },
    "209": {
      "op": "intc_0 // 0",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "\"turns\"",
        "0"
      ]
    },
    "210": {
      "op": "app_global_put",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "211": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "1"
      ]
    },
    "212": {
      "op": "return",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "213": {
      "block": "new_game_bool_false@8",
      "stack_in": [
        "move.0#0",
        "move.1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "and_result%0#0"
      ]
    },
    "214": {
      "op": "b new_game_bool_merge@9"
    },
    "217": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.join_game[routing]",
      "params": {},
      "block": "join_game",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "220": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "221": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)",
        "0"
      ]
    },
    "222": {
      "op": "extract_uint64",
      "defined_out": [
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "move.0#0"
      ]
    },
    "223": {
      "op": "swap",
      "stack_out": [
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "224": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "8"
      ]
    },
    "225": {
      "op": "extract_uint64",
      "defined_out": [
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "226": {
      "op": "intc_0 // 0",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "0"
      ]
    },
    "227": {
      "op": "bytec_2 // \"challenger\"",
      "defined_out": [
        "\"challenger\"",
        "0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "0",
        "\"challenger\""
      ]
    },
    "228": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "229": {
      "op": "bury 1",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_exists%0#0"
      ]
    },
    "231": {
      "op": "!",
      "defined_out": [
        "move.0#0",
        "move.1#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%0#1"
      ]
    },
    "232": {
      "error": "Host already has a challenger",
      "op": "assert // Host already has a challenger",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "233": {
      "op": "bytec_2 // \"challenger\"",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "\"challenger\""
      ]
    },
    "234": {
      "op": "txn Sender",
      "defined_out": [
        "\"challenger\"",
        "move.0#0",
        "move.1#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "\"challenger\"",
        "tmp%1#1"
      ]
    },
    "236": {
      "op": "app_global_put",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "237": {
      "op": "bytec 5 // 0x02",
      "defined_out": [
        "0x02",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "0x02"
      ]
    },
    "239": {
      "op": "cover 2",
      "stack_out": [
        "0x02",
        "move.0#0",
        "move.1#0"
      ]
    },
    "241": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.make_move",
      "op": "callsub make_move",
      "stack_out": []
    },
    "244": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "245": {
      "op": "return",
      "stack_out": []
    },
    "246": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.whose_turn[routing]",
      "params": {},
      "block": "whose_turn",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "247": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"turns\""
      ]
    },
    "248": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "249": {
      "error": "check self.turns exists",
      "op": "assert // check self.turns exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "250": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "2"
      ]
    },
    "252": {
      "op": "%",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "253": {
      "op": "bytec 5 // 0x02",
      "defined_out": [
        "0x02",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0x02"
      ]
    },
    "255": {
      "op": "bytec 4 // 0x01",
      "defined_out": [
        "0x01",
        "0x02",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0x02",
        "0x01"
      ]
    },
    "257": {
      "op": "uncover 2",
      "stack_out": [
        "0x02",
        "0x01",
        "tmp%0#1"
      ]
    },
    "259": {
      "op": "select",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "select%0#0"
      ]
    },
    "260": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "select%0#0"
      ],
      "stack_out": [
        "select%0#0",
        "0x151f7c75"
      ]
    },
    "266": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "select%0#0"
      ]
    },
    "267": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "268": {
      "op": "log",
      "stack_out": []
    },
    "269": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "270": {
      "op": "return",
      "stack_out": []
    },
    "271": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.play[routing]",
      "params": {},
      "block": "play",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "274": {
      "op": "dup",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "275": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0 (copy)",
        "0"
      ]
    },
    "276": {
      "op": "extract_uint64",
      "defined_out": [
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "move.0#0"
      ]
    },
    "277": {
      "op": "swap",
      "defined_out": [
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ]
    },
    "278": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "move.0#0",
        "reinterpret_Encoded(uint64,uint64)%0#0",
        "8"
      ]
    },
    "279": {
      "op": "extract_uint64",
      "defined_out": [
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "280": {
      "op": "intc_0 // 0",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "0"
      ]
    },
    "281": {
      "op": "bytec_3 // \"winner\"",
      "defined_out": [
        "\"winner\"",
        "0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "0",
        "\"winner\""
      ]
    },
    "282": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "283": {
      "op": "bury 1",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_exists%0#0"
      ]
    },
    "285": {
      "op": "!",
      "defined_out": [
        "move.0#0",
        "move.1#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%0#1"
      ]
    },
    "286": {
      "error": "Game is already finished",
      "op": "assert // Game is already finished",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "287": {
      "op": "intc_0 // 0",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "0"
      ]
    },
    "288": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "0",
        "\"turns\""
      ]
    },
    "289": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "290": {
      "error": "check self.turns exists",
      "op": "assert // check self.turns exists",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0"
      ]
    },
    "291": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "293": {
      "op": "%",
      "defined_out": [
        "move.0#0",
        "move.1#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%1#1"
      ]
    },
    "294": {
      "op": "bz play_else_body@3",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "297": {
      "op": "txn Sender",
      "defined_out": [
        "move.0#0",
        "move.1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%3#0"
      ]
    },
    "299": {
      "op": "intc_0 // 0",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%3#0",
        "0"
      ]
    },
    "300": {
      "op": "bytec 7 // \"host\"",
      "defined_out": [
        "\"host\"",
        "0",
        "move.0#0",
        "move.1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%3#0",
        "0",
        "\"host\""
      ]
    },
    "302": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "move.0#0",
        "move.1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%2#0"
      ]
    },
    "303": {
      "error": "check self.host exists",
      "op": "assert // check self.host exists",
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "304": {
      "op": "==",
      "defined_out": [
        "move.0#0",
        "move.1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%4#0"
      ]
    },
    "305": {
      "error": "It is the host's turn",
      "op": "assert // It is the host's turn",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "306": {
      "op": "bytec 4 // 0x01",
      "defined_out": [
        "move.0#0",
        "move.1#0",
        "player#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "player#0"
      ]
    },
    "308": {
      "block": "play_after_if_else@4",
      "stack_in": [
        "move.0#0",
        "move.1#0",
        "player#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "move.0#0",
        "player#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "player#0",
        "move.0#0"
      ]
    },
    "310": {
      "op": "dig 2",
      "defined_out": [
        "move.0#0",
        "move.1#0",
        "player#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "player#0",
        "move.0#0",
        "move.1#0"
      ]
    },
    "312": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.make_move",
      "op": "callsub make_move",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "315": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "move.0#0",
        "move.1#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "1"
      ]
    },
    "316": {
      "op": "return",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "317": {
      "block": "play_else_body@3",
      "stack_in": [
        "move.0#0",
        "move.1#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%5#0"
      ]
    },
    "319": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "321": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%5#0",
        "tmp%6#0",
        "0"
      ]
    },
    "322": {
      "op": "bytec_2 // \"challenger\"",
      "defined_out": [
        "\"challenger\"",
        "0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%5#0",
        "tmp%6#0",
        "0",
        "\"challenger\""
      ]
    },
    "323": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%5#0",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%3#0"
      ]
    },
    "324": {
      "op": "select",
      "defined_out": [
        "state_get%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%5#0",
        "state_get%0#0"
      ]
    },
    "325": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "tmp%7#0"
      ]
    },
    "326": {
      "error": "It is the challenger's turn",
      "op": "assert // It is the challenger's turn",
      "stack_out": [
        "move.0#0",
        "move.1#0"
      ]
    },
    "327": {
      "op": "bytec 5 // 0x02",
      "defined_out": [
        "player#0"
      ],
      "stack_out": [
        "move.0#0",
        "move.1#0",
        "player#0"
      ]
    },
    "329": {
      "op": "b play_after_if_else@4"
    },
    "332": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.make_move",
      "params": {
        "player#0": "bytes",
        "move.0#0": "uint64",
        "move.1#0": "uint64"
      },
      "block": "make_move",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "335": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%encoded_element%10#0"
      ]
    },
    "336": {
      "op": "dupn 5",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "338": {
      "op": "frame_dig -2",
      "defined_out": [
        "move.0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "move.0#0 (copy)"
      ]
    },
    "340": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "move.0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "move.0#0 (copy)",
        "3"
      ]
    },
    "341": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%0#0"
      ]
    },
    "342": {
      "op": "bz make_move_bool_false@3",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "345": {
      "op": "frame_dig -1",
      "defined_out": [
        "move.1#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "move.1#0 (copy)"
      ]
    },
    "347": {
      "op": "intc_2 // 3",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "move.1#0 (copy)",
        "3"
      ]
    },
    "348": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%1#0"
      ]
    },
    "349": {
      "op": "bz make_move_bool_false@3",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "352": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "and_result%0#0"
      ]
    },
    "353": {
      "error": "Move must be in range",
      "block": "make_move_bool_merge@4",
      "stack_in": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "and_result%0#0"
      ],
      "op": "assert // Move must be in range",
      "defined_out": [],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "354": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "0"
      ]
    },
    "355": {
      "op": "bytec_0 // \"game\"",
      "defined_out": [
        "\"game\"",
        "0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "0",
        "\"game\""
      ]
    },
    "356": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "357": {
      "error": "check self.game exists",
      "op": "assert // check self.game exists",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0"
      ]
    },
    "358": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "move.1#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "move.1#0 (copy)"
      ]
    },
    "360": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "maybe_value%0#0",
        "move.1#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "move.1#0 (copy)",
        "3"
      ]
    },
    "361": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "362": {
      "op": "dup2",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%bytes_offset%0#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%bytes_offset%0#0 (copy)"
      ]
    },
    "363": {
      "op": "intc_2 // 3",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%bytes_offset%0#0 (copy)",
        "3"
      ]
    },
    "364": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "365": {
      "op": "dup",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)"
      ]
    },
    "366": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "maybe_value%0#0",
        "move.0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "move.0#0 (copy)"
      ]
    },
    "368": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "maybe_value%0#0",
        "move.0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0 (copy)",
        "move.0#0 (copy)",
        "1"
      ]
    },
    "369": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0"
      ]
    },
    "370": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%1#0",
        "0x00"
      ]
    },
    "373": {
      "op": "b==",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "tmp%2#0"
      ]
    },
    "374": {
      "error": "Square is already taken",
      "op": "assert // Square is already taken",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "375": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "move.0#0 (copy)"
      ]
    },
    "377": {
      "op": "frame_dig -3",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "maybe_value%0#0",
        "move.0#0 (copy)",
        "player#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%encoded_element%0#0",
        "move.0#0 (copy)",
        "player#0 (copy)"
      ]
    },
    "379": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%updated_array%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%updated_array%0#0"
      ]
    },
    "380": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%updated_array%0#0",
        "maybe_value%0#0"
      ]
    },
    "382": {
      "op": "dig 2",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%updated_array%0#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0 (copy)"
      ]
    },
    "384": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0 (copy)",
        "aggregate%updated_array%0#0"
      ]
    },
    "386": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%updated_array%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%updated_array%1#0"
      ]
    },
    "387": {
      "op": "bytec_0 // \"game\"",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "aggregate%updated_array%1#0",
        "\"game\""
      ]
    },
    "388": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "\"game\"",
        "aggregate%updated_array%1#0"
      ]
    },
    "389": {
      "op": "app_global_put",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "390": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "0"
      ]
    },
    "391": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "0",
        "aggregate%bytes_offset%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "0",
        "\"turns\""
      ]
    },
    "392": {
      "op": "app_global_get_ex",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "393": {
      "error": "check self.turns exists",
      "op": "assert // check self.turns exists",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%2#0"
      ]
    },
    "394": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "395": {
      "op": "+",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "tmp%3#0"
      ]
    },
    "396": {
      "op": "bytec_1 // \"turns\"",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "tmp%3#0",
        "\"turns\""
      ]
    },
    "397": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "\"turns\"",
        "tmp%3#0"
      ]
    },
    "398": {
      "op": "app_global_put",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "399": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "0"
      ]
    },
    "400": {
      "op": "bytec_0 // \"game\"",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "0",
        "\"game\""
      ]
    },
    "401": {
      "op": "app_global_get_ex",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "g#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "g#0",
        "maybe_exists%0#0"
      ]
    },
    "402": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "maybe_exists%0#0",
        "g#0"
      ]
    },
    "403": {
      "op": "dup",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "maybe_exists%0#0",
        "g#0",
        "g#0 (copy)"
      ]
    },
    "404": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "g#0",
        "maybe_exists%0#0",
        "g#0"
      ]
    },
    "406": {
      "op": "frame_bury 5",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "g#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "g#0",
        "maybe_exists%0#0"
      ]
    },
    "408": {
      "error": "check self.game exists",
      "op": "assert // check self.game exists",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "g#0"
      ]
    },
    "409": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "g#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "410": {
      "op": "intc_2 // 3",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "3"
      ]
    },
    "411": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%4#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%4#0"
      ]
    },
    "412": {
      "op": "dup",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%4#0"
      ]
    },
    "413": {
      "op": "frame_bury 3",
      "defined_out": [
        "aggregate%encoded_element%4#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%4#0"
      ]
    },
    "415": {
      "op": "dup",
      "defined_out": [
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%4#0 (copy)",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%4#0 (copy)"
      ]
    },
    "416": {
      "error": "index access is out of bounds",
      "op": "extract 0 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%5#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%5#0"
      ]
    },
    "419": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%5#0",
        "aggregate%encoded_element%4#0"
      ]
    },
    "420": {
      "error": "index access is out of bounds",
      "op": "extract 1 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%5#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%5#0",
        "aggregate%encoded_element%7#0"
      ]
    },
    "423": {
      "op": "dup",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%5#0",
        "aggregate%encoded_element%7#0",
        "aggregate%encoded_element%7#0"
      ]
    },
    "424": {
      "op": "frame_bury 4",
      "defined_out": [
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%5#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%5#0",
        "aggregate%encoded_element%7#0"
      ]
    },
    "426": {
      "op": "b==",
      "defined_out": [
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%0#0"
      ]
    },
    "427": {
      "op": "bz make_move_after_if_else@13",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "430": {
      "op": "frame_dig 3",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%4#0"
      ]
    },
    "432": {
      "error": "index access is out of bounds",
      "op": "extract 2 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "aggregate%encoded_element%9#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%9#0"
      ]
    },
    "435": {
      "op": "frame_dig 4",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%9#0",
        "aggregate%encoded_element%7#0"
      ]
    },
    "437": {
      "op": "b==",
      "defined_out": [
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%1#0"
      ]
    },
    "438": {
      "op": "bz make_move_after_if_else@13",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "441": {
      "op": "intc_1 // 1",
      "defined_out": [
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%4#0"
      ]
    },
    "442": {
      "block": "make_move_after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.did_win@25",
      "stack_in": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%4#0"
      ],
      "op": "bz make_move_else_body@6",
      "defined_out": [],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "445": {
      "op": "bytec_3 // \"winner\"",
      "defined_out": [
        "\"winner\""
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "\"winner\""
      ]
    },
    "446": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"winner\"",
        "player#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "\"winner\"",
        "player#0 (copy)"
      ]
    },
    "448": {
      "op": "app_global_put",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "449": {
      "block": "make_move_after_if_else@9",
      "stack_in": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "450": {
      "block": "make_move_else_body@6",
      "stack_in": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "0"
      ]
    },
    "451": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "0",
        "\"turns\""
      ]
    },
    "452": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "453": {
      "error": "check self.turns exists",
      "op": "assert // check self.turns exists",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%3#0"
      ]
    },
    "454": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "maybe_value%3#0",
        "9"
      ]
    },
    "456": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%5#0"
      ]
    },
    "457": {
      "op": "bz make_move_after_if_else@9",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "460": {
      "op": "bytec_3 // \"winner\"",
      "defined_out": [
        "\"winner\""
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "\"winner\""
      ]
    },
    "461": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "\"winner\"",
        "0x03"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "\"winner\"",
        "0x03"
      ]
    },
    "464": {
      "op": "app_global_put",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "465": {
      "retsub": true,
      "op": "retsub"
    },
    "466": {
      "block": "make_move_after_if_else@13",
      "stack_in": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "g#0"
      ]
    },
    "468": {
      "op": "dup",
      "defined_out": [
        "g#0",
        "g#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "g#0",
        "g#0 (copy)"
      ]
    },
    "469": {
      "error": "index access is out of bounds",
      "op": "extract 0 3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "g#0",
        "aggregate%encoded_element%10#0"
      ]
    },
    "472": {
      "op": "dup",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "g#0",
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%10#0"
      ]
    },
    "473": {
      "op": "frame_bury 0",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "g#0",
        "aggregate%encoded_element%10#0"
      ]
    },
    "475": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "g#0",
        "move.0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "g#0",
        "aggregate%encoded_element%10#0",
        "move.0#0 (copy)"
      ]
    },
    "477": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "g#0",
        "aggregate%encoded_element%10#0",
        "move.0#0 (copy)",
        "1"
      ]
    },
    "478": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%11#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "g#0",
        "aggregate%encoded_element%11#0"
      ]
    },
    "479": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%11#0",
        "g#0"
      ]
    },
    "480": {
      "error": "index access is out of bounds",
      "op": "extract 3 3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%11#0",
        "aggregate%encoded_element%12#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%11#0",
        "aggregate%encoded_element%12#0"
      ]
    },
    "483": {
      "op": "dup",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%11#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%12#0"
      ]
    },
    "484": {
      "op": "frame_bury 1",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%11#0",
        "aggregate%encoded_element%12#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%11#0",
        "aggregate%encoded_element%12#0"
      ]
    },
    "486": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%11#0",
        "aggregate%encoded_element%12#0",
        "move.0#0 (copy)"
      ]
    },
    "488": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%11#0",
        "aggregate%encoded_element%12#0",
        "move.0#0 (copy)",
        "1"
      ]
    },
    "489": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%11#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%11#0",
        "aggregate%encoded_element%13#0"
      ]
    },
    "490": {
      "op": "dup",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%11#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%13#0"
      ]
    },
    "491": {
      "op": "frame_bury 2",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%11#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%11#0",
        "aggregate%encoded_element%13#0"
      ]
    },
    "493": {
      "op": "b==",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "g#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%2#0"
      ]
    },
    "494": {
      "op": "bz make_move_after_if_else@16",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "497": {
      "op": "frame_dig 5",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "g#0"
      ]
    },
    "499": {
      "error": "index access is out of bounds",
      "op": "extract 6 3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%14#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%14#0"
      ]
    },
    "502": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%14#0",
        "move.0#0 (copy)"
      ]
    },
    "504": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%14#0",
        "move.0#0 (copy)",
        "1"
      ]
    },
    "505": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%15#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%15#0"
      ]
    },
    "506": {
      "op": "frame_dig 2",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%15#0",
        "aggregate%encoded_element%13#0"
      ]
    },
    "508": {
      "op": "b==",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "g#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%3#1"
      ]
    },
    "509": {
      "op": "bz make_move_after_if_else@16",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "512": {
      "op": "intc_1 // 1",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "g#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%4#0"
      ]
    },
    "513": {
      "op": "b make_move_after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.did_win@25"
    },
    "516": {
      "block": "make_move_after_if_else@16",
      "stack_in": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%encoded_element%12#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%12#0"
      ]
    },
    "518": {
      "error": "index access is out of bounds",
      "op": "extract 1 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%17#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%17#0"
      ]
    },
    "521": {
      "op": "frame_dig -3",
      "defined_out": [
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%17#0",
        "player#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%17#0",
        "player#0 (copy)"
      ]
    },
    "523": {
      "op": "b==",
      "defined_out": [
        "aggregate%encoded_element%12#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%4#0"
      ]
    },
    "524": {
      "op": "bz make_move_after_if_else@24",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "527": {
      "op": "frame_dig 0",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%10#0"
      ]
    },
    "529": {
      "error": "index access is out of bounds",
      "op": "extract 0 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%19#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%19#0"
      ]
    },
    "532": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%19#0",
        "player#0 (copy)"
      ]
    },
    "534": {
      "op": "b==",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%5#0"
      ]
    },
    "535": {
      "op": "bz make_move_after_if_else@20",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "538": {
      "op": "frame_dig 5",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "g#0"
      ]
    },
    "540": {
      "error": "index access is out of bounds",
      "op": "extract 6 3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%20#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%20#0"
      ]
    },
    "543": {
      "error": "index access is out of bounds",
      "op": "extract 2 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%21#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%21#0"
      ]
    },
    "546": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%21#0",
        "player#0 (copy)"
      ]
    },
    "548": {
      "op": "b==",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "g#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%6#0"
      ]
    },
    "549": {
      "op": "bz make_move_after_if_else@20",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "552": {
      "op": "intc_1 // 1",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "g#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%4#0"
      ]
    },
    "553": {
      "op": "b make_move_after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.did_win@25"
    },
    "556": {
      "block": "make_move_after_if_else@20",
      "stack_in": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "aggregate%encoded_element%10#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%10#0"
      ]
    },
    "558": {
      "error": "index access is out of bounds",
      "op": "extract 2 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%23#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%23#0"
      ]
    },
    "561": {
      "op": "frame_dig -3",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%23#0",
        "player#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%23#0",
        "player#0 (copy)"
      ]
    },
    "563": {
      "op": "b==",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%7#0"
      ]
    },
    "564": {
      "op": "bz make_move_after_if_else@24",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "567": {
      "op": "frame_dig 5",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "g#0"
      ]
    },
    "569": {
      "error": "index access is out of bounds",
      "op": "extract 6 3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%24#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%24#0"
      ]
    },
    "572": {
      "error": "index access is out of bounds",
      "op": "extract 0 1 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%25#0",
        "g#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%25#0"
      ]
    },
    "575": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "aggregate%encoded_element%25#0",
        "player#0 (copy)"
      ]
    },
    "577": {
      "op": "b==",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "g#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%8#0"
      ]
    },
    "578": {
      "op": "bz make_move_after_if_else@24",
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ]
    },
    "581": {
      "op": "intc_1 // 1",
      "defined_out": [
        "aggregate%encoded_element%10#0",
        "g#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%4#0"
      ]
    },
    "582": {
      "op": "b make_move_after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.did_win@25"
    },
    "585": {
      "block": "make_move_after_if_else@24",
      "stack_in": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "tmp%4#0"
      ]
    },
    "586": {
      "op": "b make_move_after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.did_win@25"
    },
    "589": {
      "block": "make_move_bool_false@3",
      "stack_in": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%10#0",
        "aggregate%encoded_element%12#0",
        "aggregate%encoded_element%13#0",
        "aggregate%encoded_element%4#0",
        "aggregate%encoded_element%7#0",
        "g#0",
        "and_result%0#0"
      ]
    },
    "590": {
      "op": "b make_move_bool_merge@4"
    }
  }
}