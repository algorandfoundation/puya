main examples.tictactoe.tictactoe.TicTacToeContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bool = examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__()
        return tmp%0#1

subroutine examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__() -> bool:
    block@0: // L15
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%0#0 ? block@1 : block@9
    block@1: // abi_routing_L15
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "new_game((uint64,uint64))void" => block@2, method "join_game((uint64,uint64))void" => block@3, method "whose_turn()uint8" => block@4, method "play((uint64,uint64))void" => block@5, * => block@9}
    block@2: // new_game_route_L20
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let reinterpret_bytes[16]%0#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%0#0: bytes = ((extract 0 8) reinterpret_bytes[16]%0#0) // on error: Index access is out of bounds
        let item0%1#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 0u)
        let item1%0#0: bytes = ((extract 8 8) reinterpret_bytes[16]%0#0) // on error: Index access is out of bounds
        let item1%1#0: uint64 = (extract_uint64 reinterpret_bytes[16]%0#0 8u)
        examples.tictactoe.tictactoe.TicTacToeContract.new_game(item0%1#0, item1%1#0)
        return 1u
    block@3: // join_game_route_L37
        let tmp%5#0: uint64 = (txn OnCompletion)
        let tmp%6#0: bool = (! tmp%5#0)
        (assert tmp%6#0) // OnCompletion is not NoOp
        let tmp%7#0: uint64 = (txn ApplicationID)
        let tmp%8#0: bool = (!= tmp%7#0 0u)
        (assert tmp%7#0) // can only call when not creating
        let reinterpret_bytes[16]%1#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%2#0: bytes = ((extract 0 8) reinterpret_bytes[16]%1#0) // on error: Index access is out of bounds
        let item0%3#0: uint64 = (extract_uint64 reinterpret_bytes[16]%1#0 0u)
        let item1%2#0: bytes = ((extract 8 8) reinterpret_bytes[16]%1#0) // on error: Index access is out of bounds
        let item1%3#0: uint64 = (extract_uint64 reinterpret_bytes[16]%1#0 8u)
        examples.tictactoe.tictactoe.TicTacToeContract.join_game(item0%3#0, item1%3#0)
        return 1u
    block@4: // whose_turn_route_L43
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        let tmp%12#0: bool = (!= tmp%11#0 0u)
        (assert tmp%11#0) // can only call when not creating
        let tmp%13#0: bytes[1] = examples.tictactoe.tictactoe.TicTacToeContract.whose_turn()
        let tmp%14#0: bytes = (concat 0x151f7c75 tmp%13#0)
        (log tmp%14#0)
        return 1u
    block@5: // play_route_L47
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        let tmp%18#0: bool = (!= tmp%17#0 0u)
        (assert tmp%17#0) // can only call when not creating
        let reinterpret_bytes[16]%2#0: bytes[16] = (txna ApplicationArgs 1)
        let item0%4#0: bytes = ((extract 0 8) reinterpret_bytes[16]%2#0) // on error: Index access is out of bounds
        let item0%5#0: uint64 = (extract_uint64 reinterpret_bytes[16]%2#0 0u)
        let item1%4#0: bytes = ((extract 8 8) reinterpret_bytes[16]%2#0) // on error: Index access is out of bounds
        let item1%5#0: uint64 = (extract_uint64 reinterpret_bytes[16]%2#0 8u)
        examples.tictactoe.tictactoe.TicTacToeContract.play(item0%5#0, item1%5#0)
        return 1u
    block@9: // after_if_else_L15
        return 0u

subroutine examples.tictactoe.tictactoe.TicTacToeContract.new_game(move.0: uint64, move.1: uint64) -> void:
    block@0: // L20
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@1 : block@4
    block@1: // if_body_L25
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "challenger")
        goto maybe_exists%0#0 ? block@2 : block@3
    block@2: // if_body_L26
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "winner")
        (assert maybe_exists%1#0) // Game isn't over
        goto block@3
    block@3: // after_if_else_L25
        (app_global_del "challenger")
        (app_global_del "winner")
        goto block@4
    block@4: // after_if_else_L22
        let materialized_values%0#0: bytes[32] = (txn Sender)
        (app_global_put "host" materialized_values%0#0)
        let reinterpret_bytes[9]%0#0: bytes[9] = (bzero 9u)
        (app_global_put "game" reinterpret_bytes[9]%0#0)
        let tmp%0#0: bool = (< move.0#0 3u)
        goto tmp%0#0 ? block@5 : block@7
    block@5: // and_contd_L33
        let tmp%1#0: bool = (< move.1#0 3u)
        goto tmp%1#0 ? block@6 : block@7
    block@6: // bool_true_L33
        let and_result%0#0: bool = 1u
        goto block@8
    block@7: // bool_false_L33
        let and_result%0#1: bool = 0u
        goto block@8
    block@8: // bool_merge_L33
        let and_result%0#2: bool = φ(and_result%0#0 <- block@6, and_result%0#1 <- block@7)
        (assert and_result%0#2) // Move must be in range
        let (maybe_value%0#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%2#0) // check self.game exists
        let item_offset%0#0: uint64 = (* move.1#0 3u)
        let tmp%2#0: bytes = (extract3 maybe_value%0#0 item_offset%0#0 3u) // on error: Index access is out of bounds
        (assert tmp%0#0) // Index access is out of bounds
        let updated_target%0#0: bytes = (replace3 tmp%2#0 move.0#0 0x01)
        let index_is_in_bounds%1#0: bool = (< move.1#0 3u)
        (assert index_is_in_bounds%1#0) // Index access is out of bounds
        let updated_target%1#0: bytes = (replace3 maybe_value%0#0 item_offset%0#0 updated_target%0#0)
        (app_global_put "game" updated_target%1#0)
        (app_global_put "turns" 0u)
        return 

subroutine examples.tictactoe.tictactoe.TicTacToeContract.join_game(move.0: uint64, move.1: uint64) -> void:
    block@0: // L37
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "challenger")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0) // Host already has a challenger
        let materialized_values%0#0: bytes[32] = (txn Sender)
        (app_global_put "challenger" materialized_values%0#0)
        examples.tictactoe.tictactoe.TicTacToeContract.make_move(0x02, move.0#0, move.1#0)
        return 

subroutine examples.tictactoe.tictactoe.TicTacToeContract.whose_turn() -> bytes[1]:
    block@0: // L43
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%0#0) // check self.turns exists
        let tmp%0#0: uint64 = (% maybe_value%0#0 2u)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        let select%0#0: bytes[1] = (select 0x02 0x01 tmp%0#0)
        return select%0#0

subroutine examples.tictactoe.tictactoe.TicTacToeContract.play(move.0: uint64, move.1: uint64) -> void:
    block@0: // L47
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "winner")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0) // Game is already finished
        let (maybe_value%0#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%1#0) // check self.turns exists
        let tmp%1#0: uint64 = (% maybe_value%0#0 2u)
        let tmp%2#0: bool = (!= tmp%1#0 0u)
        goto tmp%1#0 ? block@1 : block@2
    block@1: // if_body_L51
        let tmp%3#0: bytes[32] = (txn Sender)
        let (maybe_value%1#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "host")
        (assert maybe_exists%2#0) // check self.host exists
        let tmp%4#0: bool = (== tmp%3#0 maybe_value%1#0)
        (assert tmp%4#0) // It is the host's turn
        let player#0: bytes[1] = 0x01
        goto block@3
    block@2: // else_body_L54
        let tmp%5#0: bytes[32] = (txn Sender)
        let tmp%6#0: bytes[32] = (global ZeroAddress)
        let (maybe_value%2#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "challenger")
        let state_get%0#0: bytes = (select tmp%6#0 maybe_value%2#0 maybe_exists%3#0)
        let tmp%7#0: bool = (== tmp%5#0 state_get%0#0)
        (assert tmp%7#0) // It is the challenger's turn
        let player#1: bytes[1] = 0x02
        goto block@3
    block@3: // after_if_else_L50
        let player#2: bytes[1] = φ(player#0 <- block@1, player#1 <- block@2)
        examples.tictactoe.tictactoe.TicTacToeContract.make_move(player#2, move.0#0, move.1#0)
        return 

subroutine examples.tictactoe.tictactoe.TicTacToeContract.make_move(player: bytes[1], move.0: uint64, move.1: uint64) -> void:
    block@0: // L60
        let tmp%0#0: bool = (< move.0#0 3u)
        goto tmp%0#0 ? block@1 : block@3
    block@1: // and_contd_L63
        let tmp%1#0: bool = (< move.1#0 3u)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // bool_true_L63
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L63
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L63
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // Move must be in range
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%0#0) // check self.game exists
        let item_offset%0#0: uint64 = (* move.1#0 3u)
        let tmp%2#0: bytes = (extract3 maybe_value%0#0 item_offset%0#0 3u) // on error: Index access is out of bounds
        let reinterpret_biguint%0#0: biguint = (extract3 tmp%2#0 move.0#0 1u) // on error: Index access is out of bounds
        let tmp%3#0: bool = (b== reinterpret_biguint%0#0 0x00)
        (assert tmp%3#0) // Square is already taken
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%1#0) // check self.game exists
        let tmp%4#0: bytes = (extract3 maybe_value%1#0 item_offset%0#0 3u) // on error: Index access is out of bounds
        (assert tmp%0#0) // Index access is out of bounds
        let updated_target%0#0: bytes = (replace3 tmp%4#0 move.0#0 player#0)
        let index_is_in_bounds%1#0: bool = (< move.1#0 3u)
        (assert index_is_in_bounds%1#0) // Index access is out of bounds
        let updated_target%1#0: bytes = (replace3 maybe_value%1#0 item_offset%0#0 updated_target%0#0)
        (app_global_put "game" updated_target%1#0)
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%2#0) // check self.turns exists
        let materialized_values%0#0: uint64 = (+ maybe_value%2#0 1u)
        (app_global_put "turns" materialized_values%0#0)
        let (g#0: bytes[9], maybe_exists%0#1: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%0#1) // check self.game exists
        let tmp%0#1: bytes = (extract3 g#0 item_offset%0#0 3u) // on error: Index access is out of bounds
        let item_offset%1#1: uint64 = 0u
        let reinterpret_biguint%0#1: biguint = ((extract 0 1) tmp%0#1) // on error: Index access is out of bounds
        let item_offset%3#0: uint64 = 1u
        let awst_tmp%0#0: bytes = ((extract 1 1) tmp%0#1) // on error: Index access is out of bounds
        let tmp%2#1: bool = (b== reinterpret_biguint%0#1 awst_tmp%0#0)
        goto tmp%2#1 ? block@11 : block@13
    block@11: // and_contd_L76
        let item_offset%5#0: uint64 = 2u
        let reinterpret_biguint%3#0: biguint = ((extract 2 1) tmp%0#1) // on error: Index access is out of bounds
        let tmp%4#1: bool = (b== awst_tmp%0#0 reinterpret_biguint%3#0)
        goto tmp%4#1 ? block@12 : block@13
    block@12: // if_body_L77
        let examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#0: bool = 1u
        goto block@25
    block@13: // after_if_else_L76
        let item_offset%6#0: uint64 = 0u
        let tmp%5#1: bytes = ((extract 0 3) g#0) // on error: Index access is out of bounds
        let reinterpret_biguint%4#0: biguint = (extract3 tmp%5#1 move.0#0 1u) // on error: Index access is out of bounds
        let item_offset%8#0: uint64 = 3u
        let tmp%6#1: bytes = ((extract 3 3) g#0) // on error: Index access is out of bounds
        let awst_tmp%1#0: bytes = (extract3 tmp%6#1 move.0#0 1u) // on error: Index access is out of bounds
        let tmp%7#0: bool = (b== reinterpret_biguint%4#0 awst_tmp%1#0)
        goto tmp%7#0 ? block@14 : block@16
    block@14: // and_contd_L79
        let item_offset%10#0: uint64 = 6u
        let tmp%8#0: bytes = ((extract 6 3) g#0) // on error: Index access is out of bounds
        let reinterpret_biguint%7#0: biguint = (extract3 tmp%8#0 move.0#0 1u) // on error: Index access is out of bounds
        let tmp%9#0: bool = (b== awst_tmp%1#0 reinterpret_biguint%7#0)
        goto tmp%9#0 ? block@15 : block@16
    block@15: // if_body_L80
        let examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#1: bool = 1u
        goto block@25
    block@16: // after_if_else_L79
        let item_offset%12#0: uint64 = 3u
        let item_offset%13#0: uint64 = 1u
        let reinterpret_biguint%9#0: biguint = ((extract 1 1) tmp%6#1) // on error: Index access is out of bounds
        let tmp%11#0: bool = (b== player#0 reinterpret_biguint%9#0)
        goto tmp%11#0 ? block@17 : block@24
    block@17: // if_body_L84
        let item_offset%14#0: uint64 = 0u
        let item_offset%15#0: uint64 = 0u
        let reinterpret_biguint%10#0: biguint = ((extract 0 1) tmp%5#1) // on error: Index access is out of bounds
        let tmp%13#0: bool = (b== reinterpret_biguint%10#0 player#0)
        goto tmp%13#0 ? block@18 : block@20
    block@18: // and_contd_L84
        let item_offset%16#0: uint64 = 6u
        let tmp%14#0: bytes = ((extract 6 3) g#0) // on error: Index access is out of bounds
        let item_offset%17#0: uint64 = 2u
        let reinterpret_biguint%13#0: biguint = ((extract 2 1) tmp%14#0) // on error: Index access is out of bounds
        let tmp%15#0: bool = (b== player#0 reinterpret_biguint%13#0)
        goto tmp%15#0 ? block@19 : block@20
    block@19: // if_body_L85
        let examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#2: bool = 1u
        goto block@25
    block@20: // after_if_else_L84
        let item_offset%18#0: uint64 = 0u
        let item_offset%19#0: uint64 = 2u
        let reinterpret_biguint%14#0: biguint = ((extract 2 1) tmp%5#1) // on error: Index access is out of bounds
        let tmp%17#0: bool = (b== reinterpret_biguint%14#0 player#0)
        goto tmp%17#0 ? block@21 : block@24
    block@21: // and_contd_L86
        let item_offset%20#0: uint64 = 6u
        let tmp%18#0: bytes = ((extract 6 3) g#0) // on error: Index access is out of bounds
        let item_offset%21#0: uint64 = 0u
        let reinterpret_biguint%17#0: biguint = ((extract 0 1) tmp%18#0) // on error: Index access is out of bounds
        let tmp%19#0: bool = (b== player#0 reinterpret_biguint%17#0)
        goto tmp%19#0 ? block@22 : block@24
    block@22: // if_body_L87
        let examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#3: bool = 1u
        goto block@25
    block@24: // after_if_else_L83
        let examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#4: bool = 0u
        goto block@25
    block@25: // after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.did_win_L63
        let tmp%5#0: bool = φ(examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#0 <- block@12, examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#1 <- block@15, examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#2 <- block@19, examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#3 <- block@22, examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#4 <- block@24)
        goto tmp%5#0 ? block@5 : block@6
    block@5: // if_body_L68
        (app_global_put "winner" player#0)
        goto block@9
    block@6: // else_body_L69
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%3#0) // check self.turns exists
        let tmp%6#0: bool = (== maybe_value%3#0 9u)
        goto tmp%6#0 ? block@7 : block@9
    block@7: // if_body_L70
        (app_global_put "winner" 0x03)
        goto block@9
    block@9: // after_if_else_L67
        return 