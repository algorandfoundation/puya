main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn OnCompletion)
        let tmp%1#1: bool = (! tmp%0#1)
        (assert tmp%1#1) // OnCompletion must be NoOp
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "new_game((uint64,uint64))void" => block@4, * => block@5}
    block@4: // new_game_route_L20
        examples.tictactoe.tictactoe.TicTacToeContract.new_game[routing]()
        goto block@5
    block@5: // switch_case_next_L15
        let tmp%3#0: uint64 = (txn ApplicationID)
        (assert tmp%3#0)
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "join_game((uint64,uint64))void" => block@7, method "whose_turn()uint8" => block@8, method "play((uint64,uint64))void" => block@9, * => block@12}
    block@7: // join_game_route_L37
        examples.tictactoe.tictactoe.TicTacToeContract.join_game[routing]()
        goto block@12
    block@8: // whose_turn_route_L43
        examples.tictactoe.tictactoe.TicTacToeContract.whose_turn[routing]()
        goto block@12
    block@9: // play_route_L47
        examples.tictactoe.tictactoe.TicTacToeContract.play[routing]()
        goto block@12
    block@12: // after_if_else_L15
        fail

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L227
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#2: uint64 = (* array_length#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#1 tmp%1#1)
        let tail_offset#0: uint64 = (select tmp%0#2 tmp%2#0 index#0)
        goto block@2
    block@2: // for_header_L342
        let head_offset#0: uint64 = φ(tmp%1#1 <- block@0, value_internal%0#2 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#2)
        goto continue_looping%0#0 ? block@3 : block@4
    block@3: // for_body_L343
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#0 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@2
    block@4: // after_for_L342
        let tmp%4#0: bytes = (concat size_b#0 array_head_and_tail#2)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L251
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let tmp%3#1: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#1)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L282
        let head_offset#0: uint64 = φ(tmp%3#1 <- block@0, value_internal%0#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L283
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#0)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@2
    block@5: // after_for_L282
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L264
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L282
        let head_offset#0: uint64 = φ(tmp%3#0 <- block@0, value_internal%0#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L283
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#0)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L282
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L291
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 tmp%1#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L342
        let head_offset#0: uint64 = φ(tmp%1#0 <- block@0, value_internal%0#2 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L343
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#0 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@2
    block@5: // after_for_L342
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L320
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L342
        let head_offset#0: uint64 = φ(tmp%1#0 <- block@0, value_internal%0#2 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L343
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L342
        return array_head_and_tail#1

subroutine examples.tictactoe.tictactoe.TicTacToeContract.new_game[routing]() -> void:
    block@0: // L20
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 16u)
        (assert eq%0#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64>
        let (move.0#0: uint64, move.1#0: uint64) = decode_bytes<(uint64,uint64,)>(tmp%0#0)
        let tmp%0#1: uint64 = (txn ApplicationID)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // if_body_L25
        let (_%0#0: account, maybe_exists%0#0: bool) = (app_global_get_ex 0u "challenger")
        goto maybe_exists%0#0 ? block@3 : block@4
    block@3: // if_body_L26
        let (_%1#0: Encoded(uint8), maybe_exists%1#0: bool) = (app_global_get_ex 0u "winner")
        (assert maybe_exists%1#0) // Game isn't over
        goto block@4
    block@4: // after_if_else_L25
        (app_global_del "challenger")
        (app_global_del "winner")
        goto block@5
    block@5: // after_if_else_L22
        let tmp%2#1: account = (txn Sender)
        (app_global_put "host" tmp%2#1)
        let reinterpret_Encoded(uint8[3][3])%0#0: Encoded(uint8[3][3]) = (bzero 9u)
        (app_global_put "game" reinterpret_Encoded(uint8[3][3])%0#0)
        let tmp%3#0: bool = (< move.0#0 3u)
        goto tmp%3#0 ? block@6 : block@8
    block@6: // and_contd_L33
        let tmp%4#0: bool = (< move.1#0 3u)
        goto tmp%4#0 ? block@7 : block@8
    block@7: // bool_true_L33
        let and_result%0#0: bool = 1u
        goto block@9
    block@8: // bool_false_L33
        let and_result%0#1: bool = 0u
        goto block@9
    block@9: // bool_merge_L33
        let and_result%0#2: bool = φ(and_result%0#0 <- block@7, and_result%0#1 <- block@8)
        (assert and_result%0#2) // Move must be in range
        let (maybe_value%0#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%2#0) // check self.game exists
        let updated_array%0#0: Encoded(uint8[3][3]) = replace_value(maybe_value%0#0, move.1#0, move.0#0, 0x01)
        (app_global_put "game" updated_array%0#0)
        (app_global_put "turns" 0u)
        exit 1u

subroutine examples.tictactoe.tictactoe.TicTacToeContract.join_game[routing]() -> void:
    block@0: // L37
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 16u)
        (assert eq%0#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64>
        let (move.0#0: uint64, move.1#0: uint64) = decode_bytes<(uint64,uint64,)>(tmp%0#0)
        let (_%0#0: account, maybe_exists%0#0: bool) = (app_global_get_ex 0u "challenger")
        let tmp%0#1: bool = (! maybe_exists%0#0)
        (assert tmp%0#1) // Host already has a challenger
        let tmp%1#1: account = (txn Sender)
        (app_global_put "challenger" tmp%1#1)
        examples.tictactoe.tictactoe.TicTacToeContract.make_move(0x02, move.0#0, move.1#0)
        exit 1u

subroutine examples.tictactoe.tictactoe.TicTacToeContract.whose_turn[routing]() -> void:
    block@0: // L43
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%0#0) // check self.turns exists
        let tmp%0#1: uint64 = (% maybe_value%0#0 2u)
        let select%0#0: Encoded(uint8) = (select 0x02 0x01 tmp%0#1)
        let tmp%1#0: bytes = (concat 0x151f7c75 select%0#0)
        (log tmp%1#0)
        exit 1u

subroutine examples.tictactoe.tictactoe.TicTacToeContract.play[routing]() -> void:
    block@0: // L47
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 16u)
        (assert eq%0#0) // invalid number of bytes for arc4.tuple<arc4.uint64,arc4.uint64>
        let (move.0#0: uint64, move.1#0: uint64) = decode_bytes<(uint64,uint64,)>(tmp%0#0)
        let (_%0#0: Encoded(uint8), maybe_exists%0#0: bool) = (app_global_get_ex 0u "winner")
        let tmp%0#1: bool = (! maybe_exists%0#0)
        (assert tmp%0#1) // Game is already finished
        let (maybe_value%0#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%1#0) // check self.turns exists
        let tmp%1#1: uint64 = (% maybe_value%0#0 2u)
        goto tmp%1#1 ? block@2 : block@3
    block@2: // if_body_L51
        let tmp%3#0: account = (txn Sender)
        let (maybe_value%1#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "host")
        (assert maybe_exists%2#0) // check self.host exists
        let tmp%4#0: bool = (== tmp%3#0 maybe_value%1#0)
        (assert tmp%4#0) // It is the host's turn
        let player#0: Encoded(uint8) = 0x01
        goto block@4
    block@3: // else_body_L54
        let tmp%5#0: account = (txn Sender)
        let tmp%6#0: account = (global ZeroAddress)
        let (maybe_value%2#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "challenger")
        let state_get%0#0: bytes = (select tmp%6#0 maybe_value%2#0 maybe_exists%3#0)
        let tmp%7#0: bool = (== tmp%5#0 state_get%0#0)
        (assert tmp%7#0) // It is the challenger's turn
        let player#1: Encoded(uint8) = 0x02
        goto block@4
    block@4: // after_if_else_L50
        let player#2: Encoded(uint8) = φ(player#0 <- block@2, player#1 <- block@3)
        examples.tictactoe.tictactoe.TicTacToeContract.make_move(player#2, move.0#0, move.1#0)
        exit 1u

subroutine examples.tictactoe.tictactoe.TicTacToeContract.make_move(player: Encoded(uint8), move.0: uint64, move.1: uint64) -> void:
    block@0: // L60
        let tmp%0#0: bool = (< move.0#0 3u)
        goto tmp%0#0 ? block@1 : block@3
    block@1: // and_contd_L63
        let tmp%1#0: bool = (< move.1#0 3u)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // bool_true_L63
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L63
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L63
        let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        (assert and_result%0#2) // Move must be in range
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%0#0) // check self.game exists
        let array_item%1#0: Encoded(uint8) = extract_value(maybe_value%0#0, move.1#0, move.0#0)
        let tmp%2#0: bool = (b== array_item%1#0 0x00)
        (assert tmp%2#0) // Square is already taken
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%1#0) // check self.game exists
        let updated_array%0#0: Encoded(uint8[3][3]) = replace_value(maybe_value%1#0, move.1#0, move.0#0, player#0)
        (app_global_put "game" updated_array%0#0)
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%2#0) // check self.turns exists
        let tmp%3#0: uint64 = (+ maybe_value%2#0 1u)
        (app_global_put "turns" tmp%3#0)
        let (g#0: Encoded(uint8[3][3]), maybe_exists%0#1: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%0#1) // check self.game exists
        let array_item%1#1: Encoded(uint8) = extract_value(g#0, move.1#0, 0u)
        let array_item%3#0: Encoded(uint8) = extract_value(g#0, move.1#0, 1u)
        let tmp%0#1: bool = (b== array_item%1#1 array_item%3#0)
        goto tmp%0#1 ? block@11 : block@13
    block@11: // and_contd_L76
        let array_item%5#0: Encoded(uint8) = extract_value(g#0, move.1#0, 2u)
        let tmp%1#1: bool = (b== array_item%3#0 array_item%5#0)
        goto tmp%1#1 ? block@12 : block@13
    block@12: // if_body_L77
        let examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#0: bool = 1u
        goto block@25
    block@13: // after_if_else_L76
        let array_item%7#0: Encoded(uint8) = extract_value(g#0, 0u, move.0#0)
        let array_item%9#0: Encoded(uint8) = extract_value(g#0, 1u, move.0#0)
        let tmp%2#1: bool = (b== array_item%7#0 array_item%9#0)
        goto tmp%2#1 ? block@14 : block@16
    block@14: // and_contd_L79
        let array_item%11#0: Encoded(uint8) = extract_value(g#0, 2u, move.0#0)
        let tmp%3#1: bool = (b== array_item%9#0 array_item%11#0)
        goto tmp%3#1 ? block@15 : block@16
    block@15: // if_body_L80
        let examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#1: bool = 1u
        goto block@25
    block@16: // after_if_else_L79
        let array_item%13#0: Encoded(uint8) = extract_value(g#0, 1u, 1u)
        let tmp%4#1: bool = (b== player#0 array_item%13#0)
        goto tmp%4#1 ? block@17 : block@24
    block@17: // if_body_L84
        let array_item%15#0: Encoded(uint8) = extract_value(g#0, 0u, 0u)
        let tmp%5#1: bool = (b== array_item%15#0 player#0)
        goto tmp%5#1 ? block@18 : block@20
    block@18: // and_contd_L84
        let array_item%17#0: Encoded(uint8) = extract_value(g#0, 2u, 2u)
        let tmp%6#0: bool = (b== player#0 array_item%17#0)
        goto tmp%6#0 ? block@19 : block@20
    block@19: // if_body_L85
        let examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#2: bool = 1u
        goto block@25
    block@20: // after_if_else_L84
        let array_item%19#0: Encoded(uint8) = extract_value(g#0, 0u, 2u)
        let tmp%7#0: bool = (b== array_item%19#0 player#0)
        goto tmp%7#0 ? block@21 : block@24
    block@21: // and_contd_L86
        let array_item%21#0: Encoded(uint8) = extract_value(g#0, 2u, 0u)
        let tmp%8#0: bool = (b== player#0 array_item%21#0)
        goto tmp%8#0 ? block@22 : block@24
    block@22: // if_body_L87
        let examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#3: bool = 1u
        goto block@25
    block@24: // after_if_else_L83
        let examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#4: bool = 0u
        goto block@25
    block@25: // after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.did_win_L63
        let tmp%4#0: bool = φ(examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#0 <- block@12, examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#1 <- block@15, examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#2 <- block@19, examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#3 <- block@22, examples.tictactoe.tictactoe.TicTacToeContract.did_win%0#4 <- block@24)
        goto tmp%4#0 ? block@5 : block@6
    block@5: // if_body_L68
        (app_global_put "winner" player#0)
        goto block@9
    block@6: // else_body_L69
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%3#0) // check self.turns exists
        let tmp%5#0: bool = (== maybe_value%3#0 9u)
        goto tmp%5#0 ? block@7 : block@9
    block@7: // if_body_L70
        (app_global_put "winner" 0x03)
        goto block@9
    block@9: // after_if_else_L67
        return 