// Op                                                                              Stack (out)
// examples.tictactoe.tictactoe.TicTacToeContract.approval_program() -> uint64:
main_block@0:
    callsub __puya_arc4_router__                                                   tmp%1#0
    return


// examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // tictactoe/tictactoe.py:15
    // class TicTacToeContract(arc4.ARC4Contract):
    proto 0 1

__puya_arc4_router___block@0:
    // tictactoe/tictactoe.py:15
    // class TicTacToeContract(arc4.ARC4Contract):
    txn NumAppArgs                                                                 tmp%0#0
    bz __puya_arc4_router___after_if_else@9
    // Implicit fall through to __puya_arc4_router___abi_routing@1

__puya_arc4_router___abi_routing@1:
    // tictactoe/tictactoe.py:15
    // class TicTacToeContract(arc4.ARC4Contract):
    txna ApplicationArgs 0                                                         tmp%2#0
    method new_game((uint64,uint64))void                                           tmp%2#0,Method(new_game((uint64,uint64))void)
    method join_game((uint64,uint64))void                                          tmp%2#0,Method(new_game((uint64,uint64))void),Method(join_game((uint64,uint64))void)
    method whose_turn()uint8                                                       tmp%2#0,Method(new_game((uint64,uint64))void),Method(join_game((uint64,uint64))void),Method(whose_turn()uint8)
    method play((uint64,uint64))void                                               tmp%2#0,Method(new_game((uint64,uint64))void),Method(join_game((uint64,uint64))void),Method(whose_turn()uint8),Method(play((uint64,uint64))void)
    l-load tmp%2#0 4                                                               Method(new_game((uint64,uint64))void),Method(join_game((uint64,uint64))void),Method(whose_turn()uint8),Method(play((uint64,uint64))void),tmp%2#0
    match __puya_arc4_router___new_game_route@2 __puya_arc4_router___join_game_route@3 __puya_arc4_router___whose_turn_route@4 __puya_arc4_router___play_route@5 
    int 0                                                                          0
    retsub                                                                         0

__puya_arc4_router___new_game_route@2:
    // tictactoe/tictactoe.py:20
    // @arc4.abimethod(create="allow")
    txn OnCompletion                                                               tmp%3#0
    !                                                                              tmp%4#0
    assert // OnCompletion is not NoOp
    // tictactoe/tictactoe.py:15
    // class TicTacToeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1                                                         tmp%5#0
    l-load-copy tmp%5#0 0                                                          tmp%5#0,tmp%5#0 (copy)
    extract 0 8 // on error: Index access is out of bounds                         tmp%5#0,item0%0#0
    btoi                                                                           tmp%5#0,item0%0%0#0
    l-load tmp%5#0 1                                                               item0%0%0#0,tmp%5#0
    extract 8 8 // on error: Index access is out of bounds                         item0%0%0#0,item1%0#0
    btoi                                                                           item0%0%0#0,item1%0%0#0
    // tictactoe/tictactoe.py:20
    // @arc4.abimethod(create="allow")
    l-load item0%0%0#0 1                                                           item1%0%0#0,item0%0%0#0
    l-load item1%0%0#0 1                                                           item0%0%0#0,item1%0%0#0
    callsub new_game
    int 1                                                                          1
    retsub                                                                         1

__puya_arc4_router___join_game_route@3:
    // tictactoe/tictactoe.py:37
    // @arc4.abimethod
    txn OnCompletion                                                               tmp%6#0
    !                                                                              tmp%7#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                              tmp%8#0
    assert // can only call when not creating
    // tictactoe/tictactoe.py:15
    // class TicTacToeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1                                                         tmp%10#0
    l-load-copy tmp%10#0 0                                                         tmp%10#0,tmp%10#0 (copy)
    extract 0 8 // on error: Index access is out of bounds                         tmp%10#0,item0%1#0
    btoi                                                                           tmp%10#0,item0%1%0#0
    l-load tmp%10#0 1                                                              item0%1%0#0,tmp%10#0
    extract 8 8 // on error: Index access is out of bounds                         item0%1%0#0,item1%1#0
    btoi                                                                           item0%1%0#0,item1%1%0#0
    // tictactoe/tictactoe.py:37
    // @arc4.abimethod
    l-load item0%1%0#0 1                                                           item1%1%0#0,item0%1%0#0
    l-load item1%1%0#0 1                                                           item0%1%0#0,item1%1%0#0
    callsub join_game
    int 1                                                                          1
    retsub                                                                         1

__puya_arc4_router___whose_turn_route@4:
    // tictactoe/tictactoe.py:43
    // @arc4.abimethod
    txn OnCompletion                                                               tmp%11#0
    !                                                                              tmp%12#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                              tmp%13#0
    assert // can only call when not creating
    callsub whose_turn                                                             tmp%15#0
    byte 0x151f7c75                                                                tmp%15#0,0x151f7c75
    l-load tmp%15#0 1                                                              0x151f7c75,tmp%15#0
    concat                                                                         tmp%16#0
    log
    int 1                                                                          1
    retsub                                                                         1

__puya_arc4_router___play_route@5:
    // tictactoe/tictactoe.py:47
    // @arc4.abimethod
    txn OnCompletion                                                               tmp%17#0
    !                                                                              tmp%18#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                              tmp%19#0
    assert // can only call when not creating
    // tictactoe/tictactoe.py:15
    // class TicTacToeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1                                                         tmp%21#0
    l-load-copy tmp%21#0 0                                                         tmp%21#0,tmp%21#0 (copy)
    extract 0 8 // on error: Index access is out of bounds                         tmp%21#0,item0%2#0
    btoi                                                                           tmp%21#0,item0%2%0#0
    l-load tmp%21#0 1                                                              item0%2%0#0,tmp%21#0
    extract 8 8 // on error: Index access is out of bounds                         item0%2%0#0,item1%2#0
    btoi                                                                           item0%2%0#0,item1%2%0#0
    // tictactoe/tictactoe.py:47
    // @arc4.abimethod
    l-load item0%2%0#0 1                                                           item1%2%0#0,item0%2%0#0
    l-load item1%2%0#0 1                                                           item0%2%0#0,item1%2%0#0
    callsub play
    int 1                                                                          1
    retsub                                                                         1

__puya_arc4_router___after_if_else@9:
    // tictactoe/tictactoe.py:15
    // class TicTacToeContract(arc4.ARC4Contract):
    int 0                                                                          0
    retsub                                                                         0


// examples.tictactoe.tictactoe.TicTacToeContract.new_game(move.0: uint64, move.1: uint64) -> void:
new_game:                                                                          (洧도) move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:20-21
    // @arc4.abimethod(create="allow")
    // def new_game(self, move: Move) -> None:
    proto 2 0                                                                      (洧도) move.0#0,move.1#0 |
    allocate 1 to stack                                                            (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |

new_game_block@0:                                                                  (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:22
    // if Txn.application_id:
    txn ApplicationID                                                              (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | reinterpret_bool%0#0
    bz new_game_after_if_else@4                                                    (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to new_game_if_body@1                                 (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |

new_game_if_body@1:                                                                (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:25
    // if self.challenger:
    int 0                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | 0
    byte "challenger"                                                              (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | 0,"challenger"
    app_global_get_ex                                                              (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%0#0,maybe_exists%0#0
    l-store maybe_exists%0#0 1                                                     (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_exists%0#0,maybe_value%0#0
    pop 1                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_exists%0#0
    l-load maybe_exists%0#0 0                                                      (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_exists%0#0
    bz new_game_after_if_else@3                                                    (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to new_game_if_body@2                                 (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |

new_game_if_body@2:                                                                (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:26
    // assert self.winner, "Game isn't over"
    int 0                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | 0
    byte "winner"                                                                  (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | 0,"winner"
    app_global_get_ex                                                              (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%1#0,maybe_exists%1#0
    l-store maybe_exists%1#0 1                                                     (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_exists%1#0,maybe_value%1#0
    pop 1                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_exists%1#0
    l-load maybe_exists%1#0 0                                                      (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_exists%1#0
    assert // Game isn't over                                                      (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to new_game_after_if_else@3                           (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |

new_game_after_if_else@3:                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:28
    // del self.challenger.value
    byte "challenger"                                                              (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | "challenger"
    app_global_del                                                                 (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:29
    // del self.winner.value
    byte "winner"                                                                  (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | "winner"
    app_global_del                                                                 (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to new_game_after_if_else@4                           (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |

new_game_after_if_else@4:                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:30
    // self.host = Txn.sender
    txn Sender                                                                     (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | new_state_value%0#0
    byte "host"                                                                    (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | new_state_value%0#0,"host"
    l-load new_state_value%0#0 1                                                   (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | "host",new_state_value%0#0
    app_global_put                                                                 (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:31
    // self.game = Game.from_bytes(op.bzero(9))
    int 9                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | 9
    bzero                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | new_state_value%1#0
    byte "game"                                                                    (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | new_state_value%1#0,"game"
    l-load new_state_value%1#0 1                                                   (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | "game",new_state_value%1#0
    app_global_put                                                                 (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:33
    // assert column < 3 and row < 3, "Move must be in range"
    p-load move.0#0                                                                (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | move.0#0 (copy)
    int 3                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | move.0#0 (copy),3
    <                                                                              (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | tmp%0#0
    l-store-copy tmp%0#0 0                                                         (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | tmp%0#0,tmp%0#0
    f-store tmp%0#0                                                                (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | tmp%0#0
    l-load tmp%0#0 0                                                               (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | tmp%0#0
    bz new_game_bool_false@7                                                       (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to new_game_and_contd@5                               (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |

new_game_and_contd@5:                                                              (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:33
    // assert column < 3 and row < 3, "Move must be in range"
    p-load move.1#0                                                                (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | move.1#0 (copy)
    int 3                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | move.1#0 (copy),3
    <                                                                              (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | tmp%1#0
    bz new_game_bool_false@7                                                       (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to new_game_bool_true@6                               (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |

new_game_bool_true@6:                                                              (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    int 1                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | and_result%0#0
    x-store and_result%0#0                                                         (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | (洧뎶) and_result%0#0 |
    b new_game_bool_merge@8                                                        (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | (洧뎶) and_result%0#0 |

new_game_bool_false@7:                                                             (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    int 0                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | and_result%0#0
    x-store and_result%0#0                                                         (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | (洧뎶) and_result%0#0 |
    // Implicit fall through to new_game_bool_merge@8                              (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | (洧뎶) and_result%0#0 |

new_game_bool_merge@8:                                                             (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | (洧뎶) and_result%0#0 |
    // tictactoe/tictactoe.py:33
    // assert column < 3 and row < 3, "Move must be in range"
    x-load and_result%0#0                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | and_result%0#0
    assert // Move must be in range                                                (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:34
    // self.game[row][column] = arc4.UInt8(HOST)
    int 0                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | 0
    byte "game"                                                                    (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | 0,"game"
    app_global_get_ex                                                              (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,maybe_exists%2#0
    assert // check self.game exists                                               (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0
    p-load move.1#0                                                                (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,move.1#0 (copy)
    int 3                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,move.1#0 (copy),3
    *                                                                              (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0
    l-load-copy maybe_value%2#0 1                                                  (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,maybe_value%2#0 (copy)
    l-load-copy item_offset%0#0 1                                                  (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,maybe_value%2#0 (copy),item_offset%0#0 (copy)
    int 3                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,maybe_value%2#0 (copy),item_offset%0#0 (copy),3
    extract3 // on error: Index access is out of bounds                            (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,tmp%2#0
    f-load tmp%0#0                                                                 (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,tmp%2#0,tmp%0#0
    assert // Index access is out of bounds                                        (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,tmp%2#0
    l-load tmp%2#0 0                                                               (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,tmp%2#0
    p-load move.0#0                                                                (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,tmp%2#0,move.0#0 (copy)
    byte 0x01                                                                      (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,tmp%2#0,move.0#0 (copy),0x01
    replace3                                                                       (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,updated_target%0#0
    p-load move.1#0                                                                (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,updated_target%0#0,move.1#0 (copy)
    int 3                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,updated_target%0#0,move.1#0 (copy),3
    <                                                                              (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,updated_target%0#0,index_is_in_bounds%1#0
    assert // Index access is out of bounds                                        (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,updated_target%0#0
    l-load maybe_value%2#0 2                                                       (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,updated_target%0#0,maybe_value%2#0
    l-load item_offset%0#0 2                                                       (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | updated_target%0#0,maybe_value%2#0,item_offset%0#0
    l-load updated_target%0#0 2                                                    (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,item_offset%0#0,updated_target%0#0
    replace3                                                                       (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | updated_target%1#0
    byte "game"                                                                    (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | updated_target%1#0,"game"
    l-load updated_target%1#0 1                                                    (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | "game",updated_target%1#0
    app_global_put                                                                 (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:35
    // self.turns = UInt64(0)
    byte "turns"                                                                   (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | "turns"
    int 0                                                                          (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 | "turns",0
    app_global_put                                                                 (洧도) move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.join_game(move.0: uint64, move.1: uint64) -> void:
join_game:                                                                         (洧도) move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:37-38
    // @arc4.abimethod
    // def join_game(self, move: Move) -> None:
    proto 2 0                                                                      (洧도) move.0#0,move.1#0 |

join_game_block@0:                                                                 (洧도) move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:39
    // assert not self.challenger, "Host already has a challenger"
    int 0                                                                          (洧도) move.0#0,move.1#0 | 0
    byte "challenger"                                                              (洧도) move.0#0,move.1#0 | 0,"challenger"
    app_global_get_ex                                                              (洧도) move.0#0,move.1#0 | maybe_value%0#0,maybe_exists%0#0
    l-store maybe_exists%0#0 1                                                     (洧도) move.0#0,move.1#0 | maybe_exists%0#0,maybe_value%0#0
    pop 1                                                                          (洧도) move.0#0,move.1#0 | maybe_exists%0#0
    l-load maybe_exists%0#0 0                                                      (洧도) move.0#0,move.1#0 | maybe_exists%0#0
    !                                                                              (洧도) move.0#0,move.1#0 | tmp%0#0
    assert // Host already has a challenger                                        (洧도) move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:40
    // self.challenger.value = Txn.sender
    txn Sender                                                                     (洧도) move.0#0,move.1#0 | new_state_value%0#0
    byte "challenger"                                                              (洧도) move.0#0,move.1#0 | new_state_value%0#0,"challenger"
    l-load new_state_value%0#0 1                                                   (洧도) move.0#0,move.1#0 | "challenger",new_state_value%0#0
    app_global_put                                                                 (洧도) move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:41
    // self.make_move(arc4.UInt8(CHALLENGER), move)
    byte 0x02                                                                      (洧도) move.0#0,move.1#0 | 0x02
    p-load move.0#0                                                                (洧도) move.0#0,move.1#0 | 0x02,move.0#0 (copy)
    p-load move.1#0                                                                (洧도) move.0#0,move.1#0 | 0x02,move.0#0 (copy),move.1#0 (copy)
    callsub make_move                                                              (洧도) move.0#0,move.1#0 |
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.make_move(player: bytes, move.0: uint64, move.1: uint64) -> void:
make_move:                                                                         (洧도) player#0,move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:60-61
    // @subroutine
    // def make_move(self, player: arc4.UInt8, move: Move) -> None:
    proto 3 0                                                                      (洧도) player#0,move.0#0,move.1#0 |

make_move_block@0:                                                                 (洧도) player#0,move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:63
    // assert column < 3 and row < 3, "Move must be in range"
    p-load move.0#0                                                                (洧도) player#0,move.0#0,move.1#0 | move.0#0 (copy)
    int 3                                                                          (洧도) player#0,move.0#0,move.1#0 | move.0#0 (copy),3
    <                                                                              (洧도) player#0,move.0#0,move.1#0 | tmp%0#0
    l-store-copy tmp%0#0 0                                                         (洧도) player#0,move.0#0,move.1#0 | tmp%0#0,tmp%0#0
    f-store tmp%0#0                                                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | tmp%0#0
    l-load tmp%0#0 0                                                               (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | tmp%0#0
    bz make_move_bool_false@3                                                      (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to make_move_and_contd@1                              (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |

make_move_and_contd@1:                                                             (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:63
    // assert column < 3 and row < 3, "Move must be in range"
    p-load move.1#0                                                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | move.1#0 (copy)
    int 3                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | move.1#0 (copy),3
    <                                                                              (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | tmp%1#0
    bz make_move_bool_false@3                                                      (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to make_move_bool_true@2                              (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |

make_move_bool_true@2:                                                             (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    int 1                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | and_result%0#0
    x-store and_result%0#0                                                         (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | (洧뎶) and_result%0#0 |
    b make_move_bool_merge@4                                                       (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | (洧뎶) and_result%0#0 |

make_move_bool_false@3:                                                            (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    int 0                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | and_result%0#0
    x-store and_result%0#0                                                         (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | (洧뎶) and_result%0#0 |
    // Implicit fall through to make_move_bool_merge@4                             (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | (洧뎶) and_result%0#0 |

make_move_bool_merge@4:                                                            (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | (洧뎶) and_result%0#0 |
    // tictactoe/tictactoe.py:63
    // assert column < 3 and row < 3, "Move must be in range"
    x-load and_result%0#0                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | and_result%0#0
    assert // Move must be in range                                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:64
    // assert self.game[row][column] == EMPTY, "Square is already taken"
    int 0                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | 0
    byte "game"                                                                    (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | 0,"game"
    app_global_get_ex                                                              (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%0#0,maybe_exists%0#0
    assert // check self.game exists                                               (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%0#0
    p-load move.1#0                                                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%0#0,move.1#0 (copy)
    int 3                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%0#0,move.1#0 (copy),3
    *                                                                              (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%0#0,item_offset%0#0
    l-load maybe_value%0#0 1                                                       (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%0#0
    l-load-copy item_offset%0#0 1                                                  (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%0#0,item_offset%0#0 (copy)
    int 3                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%0#0,item_offset%0#0 (copy),3
    extract3 // on error: Index access is out of bounds                            (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,tmp%2#0
    p-load move.0#0                                                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,tmp%2#0,move.0#0 (copy)
    int 1                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,tmp%2#0,move.0#0 (copy),1
    extract3 // on error: Index access is out of bounds                            (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,reinterpret_biguint%0#0
    byte 0x00                                                                      (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,reinterpret_biguint%0#0,0x00
    b==                                                                            (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,tmp%3#0
    assert // Square is already taken                                              (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0
    // tictactoe/tictactoe.py:65
    // self.game[row][column] = player
    int 0                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,0
    byte "game"                                                                    (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,0,"game"
    app_global_get_ex                                                              (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,maybe_exists%1#0
    assert // check self.game exists                                               (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0
    l-load-copy maybe_value%1#0 0                                                  (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,maybe_value%1#0 (copy)
    l-load-copy item_offset%0#0 2                                                  (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,maybe_value%1#0 (copy),item_offset%0#0 (copy)
    int 3                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,maybe_value%1#0 (copy),item_offset%0#0 (copy),3
    extract3 // on error: Index access is out of bounds                            (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,tmp%4#0
    f-load tmp%0#0                                                                 (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,tmp%4#0,tmp%0#0
    assert // Index access is out of bounds                                        (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,tmp%4#0
    l-load tmp%4#0 0                                                               (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,tmp%4#0
    p-load move.0#0                                                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,tmp%4#0,move.0#0 (copy)
    p-load player#0                                                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,tmp%4#0,move.0#0 (copy),player#0 (copy)
    replace3                                                                       (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,updated_target%0#0
    p-load move.1#0                                                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,updated_target%0#0,move.1#0 (copy)
    int 3                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,updated_target%0#0,move.1#0 (copy),3
    <                                                                              (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,updated_target%0#0,index_is_in_bounds%1#0
    assert // Index access is out of bounds                                        (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,maybe_value%1#0,updated_target%0#0
    l-load maybe_value%1#0 1                                                       (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | item_offset%0#0,updated_target%0#0,maybe_value%1#0
    l-load item_offset%0#0 2                                                       (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | updated_target%0#0,maybe_value%1#0,item_offset%0#0
    l-load updated_target%0#0 2                                                    (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%1#0,item_offset%0#0,updated_target%0#0
    replace3                                                                       (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | updated_target%1#0
    byte "game"                                                                    (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | updated_target%1#0,"game"
    l-load updated_target%1#0 1                                                    (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | "game",updated_target%1#0
    app_global_put                                                                 (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:66
    // self.turns += 1
    int 0                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | 0
    byte "turns"                                                                   (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | 0,"turns"
    app_global_get_ex                                                              (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,maybe_exists%2#0
    assert // check self.turns exists                                              (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0
    l-load maybe_value%2#0 0                                                       (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0
    int 1                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%2#0,1
    +                                                                              (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | new_state_value%0#0
    byte "turns"                                                                   (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | new_state_value%0#0,"turns"
    l-load new_state_value%0#0 1                                                   (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | "turns",new_state_value%0#0
    app_global_put                                                                 (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:67
    // if self.did_win(player, column=column, row=row):
    p-load player#0                                                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | player#0 (copy)
    p-load move.0#0                                                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | player#0 (copy),move.0#0 (copy)
    p-load move.1#0                                                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | player#0 (copy),move.0#0 (copy),move.1#0 (copy)
    callsub did_win                                                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | tmp%5#0
    bz make_move_else_body@6                                                       (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to make_move_if_body@5                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |

make_move_if_body@5:                                                               (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:68
    // self.winner.value = player
    byte "winner"                                                                  (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | "winner"
    p-load player#0                                                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | "winner",player#0 (copy)
    app_global_put                                                                 (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    b make_move_after_if_else@9                                                    (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |

make_move_else_body@6:                                                             (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:69
    // elif self.turns == 9:
    int 0                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | 0
    byte "turns"                                                                   (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | 0,"turns"
    app_global_get_ex                                                              (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%3#0,maybe_exists%3#0
    assert // check self.turns exists                                              (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%3#0
    l-load maybe_value%3#0 0                                                       (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%3#0
    int 9                                                                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | maybe_value%3#0,9
    ==                                                                             (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | tmp%6#0
    bz make_move_after_if_else@9                                                   (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to make_move_if_body@7                                (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |

make_move_if_body@7:                                                               (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // tictactoe/tictactoe.py:70
    // self.winner.value = arc4.UInt8(DRAW)
    byte "winner"                                                                  (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | "winner"
    byte 0x03                                                                      (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 | "winner",0x03
    app_global_put                                                                 (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    // Implicit fall through to make_move_after_if_else@9                          (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |

make_move_after_if_else@9:                                                         (洧도) player#0,move.0#0,move.1#0 | (洧뎽) tmp%0#0 |
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.did_win(player: bytes, column: uint64, row: uint64) -> uint64:
did_win:                                                                           (洧도) player#0,column#0,row#0 |
    // tictactoe/tictactoe.py:72-73
    // @subroutine
    // def did_win(self, player: arc4.UInt8, column: UInt64, row: UInt64) -> bool:
    proto 3 1                                                                      (洧도) player#0,column#0,row#0 |
    allocate 3 to stack                                                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0 |

did_win_block@0:                                                                   (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0 |
    // tictactoe/tictactoe.py:74
    // g = self.game.copy()
    int 0                                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0 | 0
    byte "game"                                                                    (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0 | 0,"game"
    app_global_get_ex                                                              (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0 | g#0,maybe_exists%0#0
    l-store maybe_exists%0#0 1                                                     (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0 | maybe_exists%0#0,g#0
    l-store-copy g#0 1                                                             (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0 | g#0,maybe_exists%0#0,g#0
    f-store g#0                                                                    (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0 | g#0,maybe_exists%0#0
    l-load maybe_exists%0#0 0                                                      (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0 | g#0,maybe_exists%0#0
    assert // check self.game exists                                               (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0 | g#0
    // tictactoe/tictactoe.py:76
    // if g[row][0] == g[row][1] == g[row][2]:
    p-load row#0                                                                   (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0 | g#0,row#0 (copy)
    int 3                                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0 | g#0,row#0 (copy),3
    *                                                                              (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0 | g#0,item_offset%0#0
    l-load g#0 1                                                                   (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0 | item_offset%0#0,g#0
    l-load item_offset%0#0 1                                                       (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0 | g#0,item_offset%0#0
    int 3                                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0 | g#0,item_offset%0#0,3
    extract3 // on error: Index access is out of bounds                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0 | tmp%0#0
    l-store-copy tmp%0#0 0                                                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0 | tmp%0#0,tmp%0#0
    f-store tmp%0#0                                                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0 | tmp%0#0
    l-load-copy tmp%0#0 0                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0 | tmp%0#0,tmp%0#0 (copy)
    extract 0 1 // on error: Index access is out of bounds                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0 | tmp%0#0,reinterpret_biguint%0#0
    l-load tmp%0#0 1                                                               (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0 | reinterpret_biguint%0#0,tmp%0#0
    extract 1 1 // on error: Index access is out of bounds                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0 | reinterpret_biguint%0#0,awst_tmp%0#0
    l-store-copy awst_tmp%0#0 0                                                    (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0 | reinterpret_biguint%0#0,awst_tmp%0#0,awst_tmp%0#0
    f-store awst_tmp%0#0                                                           (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%0#0,awst_tmp%0#0
    l-load reinterpret_biguint%0#0 1                                               (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | awst_tmp%0#0,reinterpret_biguint%0#0
    l-load awst_tmp%0#0 1                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%0#0,awst_tmp%0#0
    b==                                                                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%2#0
    bz did_win_after_if_else@3                                                     (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // Implicit fall through to did_win_and_contd@1                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |

did_win_and_contd@1:                                                               (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // tictactoe/tictactoe.py:76
    // if g[row][0] == g[row][1] == g[row][2]:
    f-load tmp%0#0                                                                 (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%0#0
    extract 2 1 // on error: Index access is out of bounds                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%3#0
    f-load awst_tmp%0#0                                                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%3#0,awst_tmp%0#0
    l-load reinterpret_biguint%3#0 1                                               (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | awst_tmp%0#0,reinterpret_biguint%3#0
    b==                                                                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%4#0
    bz did_win_after_if_else@3                                                     (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // Implicit fall through to did_win_if_body@2                                  (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |

did_win_if_body@2:                                                                 (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // tictactoe/tictactoe.py:77
    // return True
    int 1                                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | 1
    retsub                                                                         1

did_win_after_if_else@3:                                                           (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // tictactoe/tictactoe.py:79
    // if g[0][column] == g[1][column] == g[2][column]:
    f-load g#0                                                                     (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | g#0
    l-store-copy g#0 0                                                             (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | g#0,g#0 (copy)
    extract 0 3 // on error: Index access is out of bounds                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | g#0,tmp%5#0
    l-store-copy tmp%5#0 0                                                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | g#0,tmp%5#0,tmp%5#0
    f-store tmp%5#0                                                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | g#0,tmp%5#0
    l-load tmp%5#0 0                                                               (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | g#0,tmp%5#0
    p-load column#0                                                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | g#0,tmp%5#0,column#0 (copy)
    int 1                                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | g#0,tmp%5#0,column#0 (copy),1
    extract3 // on error: Index access is out of bounds                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | g#0,reinterpret_biguint%4#0
    l-load g#0 1                                                                   (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%4#0,g#0
    extract 3 3 // on error: Index access is out of bounds                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%4#0,tmp%6#0
    l-store-copy tmp%6#0 0                                                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%4#0,tmp%6#0,tmp%6#0
    f-store tmp%6#0                                                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%4#0,tmp%6#0
    l-load tmp%6#0 0                                                               (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%4#0,tmp%6#0
    p-load column#0                                                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%4#0,tmp%6#0,column#0 (copy)
    int 1                                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%4#0,tmp%6#0,column#0 (copy),1
    extract3 // on error: Index access is out of bounds                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%4#0,awst_tmp%1#0
    l-store-copy awst_tmp%1#0 0                                                    (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%4#0,awst_tmp%1#0,awst_tmp%1#0
    f-store awst_tmp%1#0                                                           (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%4#0,awst_tmp%1#0
    l-load reinterpret_biguint%4#0 1                                               (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | awst_tmp%1#0,reinterpret_biguint%4#0
    l-load awst_tmp%1#0 1                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%4#0,awst_tmp%1#0
    b==                                                                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%7#0
    bz did_win_after_if_else@6                                                     (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // Implicit fall through to did_win_and_contd@4                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |

did_win_and_contd@4:                                                               (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // tictactoe/tictactoe.py:79
    // if g[0][column] == g[1][column] == g[2][column]:
    f-load g#0                                                                     (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | g#0
    extract 6 3 // on error: Index access is out of bounds                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%8#0
    p-load column#0                                                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%8#0,column#0 (copy)
    int 1                                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%8#0,column#0 (copy),1
    extract3 // on error: Index access is out of bounds                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%7#0
    f-load awst_tmp%1#0                                                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%7#0,awst_tmp%1#0
    l-load reinterpret_biguint%7#0 1                                               (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | awst_tmp%1#0,reinterpret_biguint%7#0
    b==                                                                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%9#0
    bz did_win_after_if_else@6                                                     (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // Implicit fall through to did_win_if_body@5                                  (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |

did_win_if_body@5:                                                                 (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // tictactoe/tictactoe.py:80
    // return True
    int 1                                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | 1
    retsub                                                                         1

did_win_after_if_else@6:                                                           (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // tictactoe/tictactoe.py:83
    // if player == g[1][1]:
    f-load tmp%6#0                                                                 (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%6#0
    extract 1 1 // on error: Index access is out of bounds                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%9#0
    p-load player#0                                                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%9#0,player#0 (copy)
    l-load reinterpret_biguint%9#0 1                                               (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | player#0 (copy),reinterpret_biguint%9#0
    b==                                                                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%11#0
    bz did_win_after_if_else@14                                                    (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // Implicit fall through to did_win_if_body@7                                  (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |

did_win_if_body@7:                                                                 (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // tictactoe/tictactoe.py:84
    // if g[0][0] == player == g[2][2]:
    f-load tmp%5#0                                                                 (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%5#0
    extract 0 1 // on error: Index access is out of bounds                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%10#0
    p-load player#0                                                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%10#0,player#0 (copy)
    b==                                                                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%13#0
    bz did_win_after_if_else@10                                                    (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // Implicit fall through to did_win_and_contd@8                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |

did_win_and_contd@8:                                                               (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // tictactoe/tictactoe.py:84
    // if g[0][0] == player == g[2][2]:
    f-load g#0                                                                     (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | g#0
    extract 6 3 // on error: Index access is out of bounds                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%14#0
    extract 2 1 // on error: Index access is out of bounds                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%13#0
    p-load player#0                                                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%13#0,player#0 (copy)
    l-load reinterpret_biguint%13#0 1                                              (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | player#0 (copy),reinterpret_biguint%13#0
    b==                                                                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%15#0
    bz did_win_after_if_else@10                                                    (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // Implicit fall through to did_win_if_body@9                                  (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |

did_win_if_body@9:                                                                 (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // tictactoe/tictactoe.py:85
    // return True
    int 1                                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | 1
    retsub                                                                         1

did_win_after_if_else@10:                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // tictactoe/tictactoe.py:86
    // if g[0][2] == player == g[2][0]:
    f-load tmp%5#0                                                                 (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%5#0
    extract 2 1 // on error: Index access is out of bounds                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%14#0
    p-load player#0                                                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%14#0,player#0 (copy)
    b==                                                                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%17#0
    bz did_win_after_if_else@14                                                    (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // Implicit fall through to did_win_and_contd@11                               (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |

did_win_and_contd@11:                                                              (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // tictactoe/tictactoe.py:86
    // if g[0][2] == player == g[2][0]:
    f-load g#0                                                                     (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | g#0
    extract 6 3 // on error: Index access is out of bounds                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%18#0
    extract 0 1 // on error: Index access is out of bounds                         (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%17#0
    p-load player#0                                                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | reinterpret_biguint%17#0,player#0 (copy)
    l-load reinterpret_biguint%17#0 1                                              (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | player#0 (copy),reinterpret_biguint%17#0
    b==                                                                            (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | tmp%19#0
    bz did_win_after_if_else@14                                                    (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // Implicit fall through to did_win_if_body@12                                 (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |

did_win_if_body@12:                                                                (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // tictactoe/tictactoe.py:87
    // return True
    int 1                                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | 1
    retsub                                                                         1

did_win_after_if_else@14:                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 |
    // tictactoe/tictactoe.py:88
    // return False
    int 0                                                                          (洧도) player#0,column#0,row#0 | (洧뎽) awst_tmp%1#0,tmp%5#0,tmp%6#0,g#0,tmp%0#0,awst_tmp%0#0 | 0
    retsub                                                                         0


// examples.tictactoe.tictactoe.TicTacToeContract.whose_turn() -> bytes:
whose_turn:
    // tictactoe/tictactoe.py:43-44
    // @arc4.abimethod
    // def whose_turn(self) -> arc4.UInt8:
    proto 0 1

whose_turn_block@0:
    // tictactoe/tictactoe.py:45
    // return arc4.UInt8(HOST) if self.turns % 2 else arc4.UInt8(CHALLENGER)
    int 0                                                                          0
    byte "turns"                                                                   0,"turns"
    app_global_get_ex                                                              maybe_value%0#0,maybe_exists%0#0
    assert // check self.turns exists                                              maybe_value%0#0
    l-load maybe_value%0#0 0                                                       maybe_value%0#0
    int 2                                                                          maybe_value%0#0,2
    %                                                                              tmp%0#0
    byte 0x02                                                                      tmp%0#0,0x02
    byte 0x01                                                                      tmp%0#0,0x02,0x01
    l-load tmp%0#0 2                                                               0x02,0x01,tmp%0#0
    select                                                                         tmp%2#0
    retsub                                                                         tmp%2#0


// examples.tictactoe.tictactoe.TicTacToeContract.play(move.0: uint64, move.1: uint64) -> void:
play:                                                                              (洧도) move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:47-48
    // @arc4.abimethod
    // def play(self, move: Move) -> None:
    proto 2 0                                                                      (洧도) move.0#0,move.1#0 |

play_block@0:                                                                      (洧도) move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:49
    // assert not self.winner, "Game is already finished"
    int 0                                                                          (洧도) move.0#0,move.1#0 | 0
    byte "winner"                                                                  (洧도) move.0#0,move.1#0 | 0,"winner"
    app_global_get_ex                                                              (洧도) move.0#0,move.1#0 | maybe_value%0#0,maybe_exists%0#0
    l-store maybe_exists%0#0 1                                                     (洧도) move.0#0,move.1#0 | maybe_exists%0#0,maybe_value%0#0
    pop 1                                                                          (洧도) move.0#0,move.1#0 | maybe_exists%0#0
    l-load maybe_exists%0#0 0                                                      (洧도) move.0#0,move.1#0 | maybe_exists%0#0
    !                                                                              (洧도) move.0#0,move.1#0 | tmp%0#0
    assert // Game is already finished                                             (洧도) move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:50
    // if self.turns % 2:
    int 0                                                                          (洧도) move.0#0,move.1#0 | 0
    byte "turns"                                                                   (洧도) move.0#0,move.1#0 | 0,"turns"
    app_global_get_ex                                                              (洧도) move.0#0,move.1#0 | maybe_value%1#0,maybe_exists%1#0
    assert // check self.turns exists                                              (洧도) move.0#0,move.1#0 | maybe_value%1#0
    l-load maybe_value%1#0 0                                                       (洧도) move.0#0,move.1#0 | maybe_value%1#0
    int 2                                                                          (洧도) move.0#0,move.1#0 | maybe_value%1#0,2
    %                                                                              (洧도) move.0#0,move.1#0 | tmp%1#0
    bz play_else_body@2                                                            (洧도) move.0#0,move.1#0 |
    // Implicit fall through to play_if_body@1                                     (洧도) move.0#0,move.1#0 |

play_if_body@1:                                                                    (洧도) move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:51
    // assert Txn.sender == self.host, "It is the host's turn"
    txn Sender                                                                     (洧도) move.0#0,move.1#0 | tmp%3#0
    int 0                                                                          (洧도) move.0#0,move.1#0 | tmp%3#0,0
    byte "host"                                                                    (洧도) move.0#0,move.1#0 | tmp%3#0,0,"host"
    app_global_get_ex                                                              (洧도) move.0#0,move.1#0 | tmp%3#0,maybe_value%2#0,maybe_exists%2#0
    assert // check self.host exists                                               (洧도) move.0#0,move.1#0 | tmp%3#0,maybe_value%2#0
    l-load tmp%3#0 1                                                               (洧도) move.0#0,move.1#0 | maybe_value%2#0,tmp%3#0
    l-load maybe_value%2#0 1                                                       (洧도) move.0#0,move.1#0 | tmp%3#0,maybe_value%2#0
    ==                                                                             (洧도) move.0#0,move.1#0 | tmp%4#0
    assert // It is the host's turn                                                (洧도) move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:52
    // player = arc4.UInt8(HOST)
    byte 0x01                                                                      (洧도) move.0#0,move.1#0 | player#0
    x-store player#0                                                               (洧도) move.0#0,move.1#0 | (洧뎶) player#0 |
    b play_after_if_else@3                                                         (洧도) move.0#0,move.1#0 | (洧뎶) player#0 |

play_else_body@2:                                                                  (洧도) move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:54
    // assert Txn.sender == self.challenger.get(
    txn Sender                                                                     (洧도) move.0#0,move.1#0 | tmp%5#0
    // tictactoe/tictactoe.py:55
    // default=Account()
    global ZeroAddress                                                             (洧도) move.0#0,move.1#0 | tmp%5#0,tmp%6#0
    // tictactoe/tictactoe.py:54
    // assert Txn.sender == self.challenger.get(
    int 0                                                                          (洧도) move.0#0,move.1#0 | tmp%5#0,tmp%6#0,0
    byte "challenger"                                                              (洧도) move.0#0,move.1#0 | tmp%5#0,tmp%6#0,0,"challenger"
    // tictactoe/tictactoe.py:54-56
    // assert Txn.sender == self.challenger.get(
    //     default=Account()
    // ), "It is the challenger's turn"
    app_global_get_ex                                                              (洧도) move.0#0,move.1#0 | tmp%5#0,tmp%6#0,maybe_value%3#0,maybe_exists%3#0
    l-load tmp%6#0 2                                                               (洧도) move.0#0,move.1#0 | tmp%5#0,maybe_value%3#0,maybe_exists%3#0,tmp%6#0
    l-load maybe_value%3#0 2                                                       (洧도) move.0#0,move.1#0 | tmp%5#0,maybe_exists%3#0,tmp%6#0,maybe_value%3#0
    l-load maybe_exists%3#0 2                                                      (洧도) move.0#0,move.1#0 | tmp%5#0,tmp%6#0,maybe_value%3#0,maybe_exists%3#0
    select                                                                         (洧도) move.0#0,move.1#0 | tmp%5#0,tmp%7#0
    l-load tmp%5#0 1                                                               (洧도) move.0#0,move.1#0 | tmp%7#0,tmp%5#0
    l-load tmp%7#0 1                                                               (洧도) move.0#0,move.1#0 | tmp%5#0,tmp%7#0
    ==                                                                             (洧도) move.0#0,move.1#0 | tmp%8#0
    assert // It is the challenger's turn                                          (洧도) move.0#0,move.1#0 |
    // tictactoe/tictactoe.py:57
    // player = arc4.UInt8(CHALLENGER)
    byte 0x02                                                                      (洧도) move.0#0,move.1#0 | player#0
    x-store player#0                                                               (洧도) move.0#0,move.1#0 | (洧뎶) player#0 |
    // Implicit fall through to play_after_if_else@3                               (洧도) move.0#0,move.1#0 | (洧뎶) player#0 |

play_after_if_else@3:                                                              (洧도) move.0#0,move.1#0 | (洧뎶) player#0 |
    // tictactoe/tictactoe.py:58
    // self.make_move(player, move)
    x-load player#0                                                                (洧도) move.0#0,move.1#0 | player#0
    p-load move.0#0                                                                (洧도) move.0#0,move.1#0 | player#0,move.0#0 (copy)
    p-load move.1#0                                                                (洧도) move.0#0,move.1#0 | player#0,move.0#0 (copy),move.1#0 (copy)
    callsub make_move                                                              (洧도) move.0#0,move.1#0 |
    retsub


