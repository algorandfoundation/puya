{
    "name": "TicTacToeContract",
    "structs": {},
    "methods": [
        {
            "name": "new_game",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "move"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "join_game",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "move"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "whose_turn",
            "args": [],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "play",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "move"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 4
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "challenger": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Y2hhbGxlbmdlcg=="
                },
                "winner": {
                    "keyType": "AVMString",
                    "valueType": "uint8",
                    "key": "d2lubmVy"
                },
                "host": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "aG9zdA=="
                },
                "game": {
                    "keyType": "AVMString",
                    "valueType": "uint8[3][3]",
                    "key": "Z2FtZQ=="
                },
                "turns": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dHVybnM="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        626
                    ],
                    "errorMessage": "Game is already finished"
                },
                {
                    "pc": [
                        214
                    ],
                    "errorMessage": "Game isn't over"
                },
                {
                    "pc": [
                        293
                    ],
                    "errorMessage": "Host already has a challenger"
                },
                {
                    "pc": [
                        265,
                        275,
                        365,
                        375
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        660
                    ],
                    "errorMessage": "It is the challenger's turn"
                },
                {
                    "pc": [
                        645
                    ],
                    "errorMessage": "It is the host's turn"
                },
                {
                    "pc": [
                        251,
                        331
                    ],
                    "errorMessage": "Move must be in range"
                },
                {
                    "pc": [
                        99,
                        121,
                        146,
                        167
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        353
                    ],
                    "errorMessage": "Square is already taken"
                },
                {
                    "pc": [
                        124,
                        149,
                        170
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        255,
                        335,
                        357,
                        438
                    ],
                    "errorMessage": "check self.game exists"
                },
                {
                    "pc": [
                        643
                    ],
                    "errorMessage": "check self.host exists"
                },
                {
                    "pc": [
                        386,
                        414,
                        605,
                        630
                    ],
                    "errorMessage": "check self.turns exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpleGFtcGxlcy50aWN0YWN0b2UudGljdGFjdG9lLlRpY1RhY1RvZUNvbnRyYWN0LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEDCSYHBGdhbWUFdHVybnMKY2hhbGxlbmdlcgZ3aW5uZXIBAQECBGhvc3SIAAFDigABMRtBAIKCBASWqXGBBBegebMEu58RRwSe6/WONhoAjgQAAgAYADEARiKJMRkURDYaAUlXAAgXTFcICBeIAEsjiTEZFEQxGEQ2GgFJVwAIF0xXCAgXiACPI4kxGRREMRhEiAG+gAQVH3x1TFCwI4kxGRREMRhENhoBSVcACBdMVwgIF4gBriOJIomKAgCAADEYQQASIiplRQFBAAYiK2VFAUQqaStpJwYxAGclryhMZ4v+JAxJjABBAAuL/yQMQQAEI0IAASJEIihlRIv/JAtKJFiLAESL/icEXYv/JAxEXShMZykiZ4mKAgAiKmVFARREKjEAZycFi/6L/4gAAYmKAwCL/iQMSUEAC4v/JAxBAAQjQgABIkQiKGVEi/8kC0xLASRYi/4jWIABAKhEIihlRElLAiRYiwBEi/6L/V2L/yQMRExOAl0oTGciKWVEIwgpTGeL/Yv+i/+IABlBAAcri/1nQgAOIillRCUSQQAFK4ABA2eJigMBIkcDKGVMSU8CRIv/JAskWEcCVwABTFcBAUlOAqhBAA+LBFcCAYsFqEEABCOMAImLA0lXAANJjAGL/iNYTFcDA0mMAov+I1hJjACoQQATiwNXBgOL/iNYiwCoQQAEI4wAiYsCVwEBi/2oQQA6iwFXAAGL/ahBABKLA1cGA1cCAYv9qEEABCOMAImLAVcCAYv9qEEAEosDVwYDVwABi/2oQQAEI4wAiSKMAImKAAEiKWVEgQIYJwUnBE8CTYmKAgAiK2VFARREIillRIECGEEADjEAIicGZUQSRCcEQgAMMQAyAyIqZU0SRCcFi/6L/4j+lok=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}