{
    "name": "TicTacToeContract",
    "structs": {},
    "methods": [
        {
            "name": "new_game",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "move"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "join_game",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "move"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "whose_turn",
            "args": [],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "play",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "move"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 4
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "challenger": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Y2hhbGxlbmdlcg=="
                },
                "winner": {
                    "keyType": "AVMString",
                    "valueType": "uint8",
                    "key": "d2lubmVy"
                },
                "host": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "aG9zdA=="
                },
                "game": {
                    "keyType": "AVMString",
                    "valueType": "uint8[3][3]",
                    "key": "Z2FtZQ=="
                },
                "turns": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dHVybnM="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        299
                    ],
                    "errorMessage": "Game is already finished"
                },
                {
                    "pc": [
                        191
                    ],
                    "errorMessage": "Game isn't over"
                },
                {
                    "pc": [
                        260
                    ],
                    "errorMessage": "Host already has a challenger"
                },
                {
                    "pc": [
                        338
                    ],
                    "errorMessage": "It is the challenger's turn"
                },
                {
                    "pc": [
                        318
                    ],
                    "errorMessage": "It is the host's turn"
                },
                {
                    "pc": [
                        222,
                        365
                    ],
                    "errorMessage": "Move must be in range"
                },
                {
                    "pc": [
                        92,
                        113,
                        134,
                        155
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        386
                    ],
                    "errorMessage": "Square is already taken"
                },
                {
                    "pc": [
                        95,
                        116,
                        137
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        226,
                        369,
                        420
                    ],
                    "errorMessage": "check self.game exists"
                },
                {
                    "pc": [
                        316
                    ],
                    "errorMessage": "check self.host exists"
                },
                {
                    "pc": [
                        278,
                        303,
                        405,
                        465
                    ],
                    "errorMessage": "check self.turns exists"
                },
                {
                    "pc": [
                        233,
                        238,
                        239,
                        376,
                        381,
                        391,
                        398,
                        423,
                        428,
                        432,
                        444,
                        481,
                        490,
                        492,
                        501,
                        511,
                        517,
                        530,
                        541,
                        552,
                        555,
                        570,
                        581,
                        584
                    ],
                    "errorMessage": "index access is out of bounds"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBleGFtcGxlcy50aWN0YWN0b2UudGljdGFjdG9lLlRpY1RhY1RvZUNvbnRyYWN0Ll9fYWxnb3B5X2VudHJ5cG9pbnRfd2l0aF9pbml0KCkgLT4gdWludDY0OgptYWluOgogICAgaW50Y2Jsb2NrIDAgMSAzIDgKICAgIGJ5dGVjYmxvY2sgImdhbWUiICJ0dXJucyIgImNoYWxsZW5nZXIiICJ3aW5uZXIiIDB4MDEgMHgwMiAiaG9zdCIKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6MTUKICAgIC8vIGNsYXNzIFRpY1RhY1RvZUNvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2FmdGVyX2lmX2Vsc2VAOQogICAgcHVzaGJ5dGVzcyAweDk2YTk3MTgxIDB4MTdhMDc5YjMgMHhiYjlmMTE0NyAweDllZWJmNThlIC8vIG1ldGhvZCAibmV3X2dhbWUoKHVpbnQ2NCx1aW50NjQpKXZvaWQiLCBtZXRob2QgImpvaW5fZ2FtZSgodWludDY0LHVpbnQ2NCkpdm9pZCIsIG1ldGhvZCAid2hvc2VfdHVybigpdWludDgiLCBtZXRob2QgInBsYXkoKHVpbnQ2NCx1aW50NjQpKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX25ld19nYW1lX3JvdXRlQDUgbWFpbl9qb2luX2dhbWVfcm91dGVANiBtYWluX3dob3NlX3R1cm5fcm91dGVANyBtYWluX3BsYXlfcm91dGVAOAoKbWFpbl9hZnRlcl9pZl9lbHNlQDk6CiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjE1CiAgICAvLyBjbGFzcyBUaWNUYWNUb2VDb250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX3BsYXlfcm91dGVAODoKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6NDcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjE1CiAgICAvLyBjbGFzcyBUaWNUYWNUb2VDb250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXAKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgc3dhcAogICAgaW50Y18zIC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjQ3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgcGxheQogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl93aG9zZV90dXJuX3JvdXRlQDc6CiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjQzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiB3aG9zZV90dXJuCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fam9pbl9nYW1lX3JvdXRlQDY6CiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjM3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weToxNQogICAgLy8gY2xhc3MgVGljVGFjVG9lQ29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIHN3YXAKICAgIGludGNfMyAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTozNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGpvaW5fZ2FtZQogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9uZXdfZ2FtZV9yb3V0ZUA1OgogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weToyMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0iYWxsb3ciKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weToxNQogICAgLy8gY2xhc3MgVGljVGFjVG9lQ29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIHN3YXAKICAgIGludGNfMyAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weToyMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0iYWxsb3ciKQogICAgY2FsbHN1YiBuZXdfZ2FtZQogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLnRpY3RhY3RvZS50aWN0YWN0b2UuVGljVGFjVG9lQ29udHJhY3QubmV3X2dhbWUobW92ZS4wOiB1aW50NjQsIG1vdmUuMTogdWludDY0KSAtPiB2b2lkOgpuZXdfZ2FtZToKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6MjAtMjEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChjcmVhdGU9ImFsbG93IikKICAgIC8vIGRlZiBuZXdfZ2FtZShzZWxmLCBtb3ZlOiBNb3ZlKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjIyCiAgICAvLyBpZiBUeG4uYXBwbGljYXRpb25faWQ6CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYnogbmV3X2dhbWVfYWZ0ZXJfaWZfZWxzZUA0CiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjIzLTI1CiAgICAvLyAjIGlmIGEgY2hhbGxlbmdlciBoYXMgam9pbmVkLCBkb24ndCBhbGxvdyBzdGFydGluZyBhIG5ldyBnYW1lCiAgICAvLyAjIHVudGlsIHRoaXMgb25lIGlzIGNvbXBsZXRlCiAgICAvLyBpZiBzZWxmLmNoYWxsZW5nZXI6CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiY2hhbGxlbmdlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBidXJ5IDEKICAgIGJ6IG5ld19nYW1lX2FmdGVyX2lmX2Vsc2VAMwogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weToyNgogICAgLy8gYXNzZXJ0IHNlbGYud2lubmVyLCAiR2FtZSBpc24ndCBvdmVyIgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gIndpbm5lciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBHYW1lIGlzbid0IG92ZXIKCm5ld19nYW1lX2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6MjctMjgKICAgIC8vICMgcmVzZXQgY2hhbGxlbmdlciBhbmQgd2lubmVyCiAgICAvLyBkZWwgc2VsZi5jaGFsbGVuZ2VyLnZhbHVlCiAgICBieXRlY18yIC8vICJjaGFsbGVuZ2VyIgogICAgYXBwX2dsb2JhbF9kZWwKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6MjkKICAgIC8vIGRlbCBzZWxmLndpbm5lci52YWx1ZQogICAgYnl0ZWNfMyAvLyAid2lubmVyIgogICAgYXBwX2dsb2JhbF9kZWwKCm5ld19nYW1lX2FmdGVyX2lmX2Vsc2VANDoKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6MzAKICAgIC8vIHNlbGYuaG9zdCA9IFR4bi5zZW5kZXIKICAgIGJ5dGVjIDYgLy8gImhvc3QiCiAgICB0eG4gU2VuZGVyCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTozMQogICAgLy8gc2VsZi5nYW1lID0gR2FtZS5mcm9tX2J5dGVzKG9wLmJ6ZXJvKDkpKQogICAgcHVzaGludCA5IC8vIDkKICAgIGJ6ZXJvCiAgICBieXRlY18wIC8vICJnYW1lIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6MzMKICAgIC8vIGFzc2VydCBjb2x1bW4gPCAzIGFuZCByb3cgPCAzLCAiTW92ZSBtdXN0IGJlIGluIHJhbmdlIgogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzIgLy8gMwogICAgPAogICAgYnogbmV3X2dhbWVfYm9vbF9mYWxzZUA3CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMiAvLyAzCiAgICA8CiAgICBieiBuZXdfZ2FtZV9ib29sX2ZhbHNlQDcKICAgIGludGNfMSAvLyAxCgpuZXdfZ2FtZV9ib29sX21lcmdlQDg6CiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjMzCiAgICAvLyBhc3NlcnQgY29sdW1uIDwgMyBhbmQgcm93IDwgMywgIk1vdmUgbXVzdCBiZSBpbiByYW5nZSIKICAgIGFzc2VydCAvLyBNb3ZlIG11c3QgYmUgaW4gcmFuZ2UKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6MzQKICAgIC8vIHNlbGYuZ2FtZVtyb3ddW2NvbHVtbl0gPSBhcmM0LlVJbnQ4KEhPU1QpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiZ2FtZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5nYW1lIGV4aXN0cwogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzIgLy8gMwogICAgKgogICAgZHVwMgogICAgaW50Y18yIC8vIDMKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlYyA0IC8vIDB4MDEKICAgIHJlcGxhY2UzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgcmVwbGFjZTMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBieXRlY18wIC8vICJnYW1lIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6MzUKICAgIC8vIHNlbGYudHVybnMgPSBVSW50NjQoMCkKICAgIGJ5dGVjXzEgLy8gInR1cm5zIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCm5ld19nYW1lX2Jvb2xfZmFsc2VANzoKICAgIGludGNfMCAvLyAwCiAgICBiIG5ld19nYW1lX2Jvb2xfbWVyZ2VAOAoKCi8vIGV4YW1wbGVzLnRpY3RhY3RvZS50aWN0YWN0b2UuVGljVGFjVG9lQ29udHJhY3Quam9pbl9nYW1lKG1vdmUuMDogdWludDY0LCBtb3ZlLjE6IHVpbnQ2NCkgLT4gdm9pZDoKam9pbl9nYW1lOgogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTozNy0zOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgam9pbl9nYW1lKHNlbGYsIG1vdmU6IE1vdmUpIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6MzkKICAgIC8vIGFzc2VydCBub3Qgc2VsZi5jaGFsbGVuZ2VyLCAiSG9zdCBhbHJlYWR5IGhhcyBhIGNoYWxsZW5nZXIiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiY2hhbGxlbmdlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydCAvLyBIb3N0IGFscmVhZHkgaGFzIGEgY2hhbGxlbmdlcgogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo0MAogICAgLy8gc2VsZi5jaGFsbGVuZ2VyLnZhbHVlID0gVHhuLnNlbmRlcgogICAgYnl0ZWNfMiAvLyAiY2hhbGxlbmdlciIKICAgIHR4biBTZW5kZXIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjQxCiAgICAvLyBzZWxmLm1ha2VfbW92ZShhcmM0LlVJbnQ4KENIQUxMRU5HRVIpLCBtb3ZlKQogICAgYnl0ZWMgNSAvLyAweDAyCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBtYWtlX21vdmUKICAgIHJldHN1YgoKCi8vIGV4YW1wbGVzLnRpY3RhY3RvZS50aWN0YWN0b2UuVGljVGFjVG9lQ29udHJhY3Qud2hvc2VfdHVybigpIC0+IGJ5dGVzOgp3aG9zZV90dXJuOgogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo0NQogICAgLy8gcmV0dXJuIGFyYzQuVUludDgoSE9TVCkgaWYgc2VsZi50dXJucyAlIDIgZWxzZSBhcmM0LlVJbnQ4KENIQUxMRU5HRVIpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAidHVybnMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudHVybnMgZXhpc3RzCiAgICBwdXNoaW50IDIgLy8gMgogICAgJQogICAgYnl0ZWMgNSAvLyAweDAyCiAgICBieXRlYyA0IC8vIDB4MDEKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICByZXRzdWIKCgovLyBleGFtcGxlcy50aWN0YWN0b2UudGljdGFjdG9lLlRpY1RhY1RvZUNvbnRyYWN0LnBsYXkobW92ZS4wOiB1aW50NjQsIG1vdmUuMTogdWludDY0KSAtPiB2b2lkOgpwbGF5OgogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo0Ny00OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgcGxheShzZWxmLCBtb3ZlOiBNb3ZlKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjQ5CiAgICAvLyBhc3NlcnQgbm90IHNlbGYud2lubmVyLCAiR2FtZSBpcyBhbHJlYWR5IGZpbmlzaGVkIgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gIndpbm5lciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydCAvLyBHYW1lIGlzIGFscmVhZHkgZmluaXNoZWQKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6NTAKICAgIC8vIGlmIHNlbGYudHVybnMgJSAyOgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gInR1cm5zIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnR1cm5zIGV4aXN0cwogICAgcHVzaGludCAyIC8vIDIKICAgICUKICAgIGJ6IHBsYXlfZWxzZV9ib2R5QDIKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6NTEKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuaG9zdCwgIkl0IGlzIHRoZSBob3N0J3MgdHVybiIKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA2IC8vICJob3N0IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmhvc3QgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIEl0IGlzIHRoZSBob3N0J3MgdHVybgogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo1MgogICAgLy8gcGxheWVyID0gYXJjNC5VSW50OChIT1NUKQogICAgYnl0ZWMgNCAvLyAweDAxCgpwbGF5X2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6NTgKICAgIC8vIHNlbGYubWFrZV9tb3ZlKHBsYXllciwgbW92ZSkKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIG1ha2VfbW92ZQogICAgcmV0c3ViCgpwbGF5X2Vsc2VfYm9keUAyOgogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo1NAogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5jaGFsbGVuZ2VyLmdldCgKICAgIHR4biBTZW5kZXIKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6NTUKICAgIC8vIGRlZmF1bHQ9QWNjb3VudCgpCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6NTQKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuY2hhbGxlbmdlci5nZXQoCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAiY2hhbGxlbmdlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjU0LTU2CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmNoYWxsZW5nZXIuZ2V0KAogICAgLy8gICAgIGRlZmF1bHQ9QWNjb3VudCgpCiAgICAvLyApLCAiSXQgaXMgdGhlIGNoYWxsZW5nZXIncyB0dXJuIgogICAgc2VsZWN0CiAgICA9PQogICAgYXNzZXJ0IC8vIEl0IGlzIHRoZSBjaGFsbGVuZ2VyJ3MgdHVybgogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo1NwogICAgLy8gcGxheWVyID0gYXJjNC5VSW50OChDSEFMTEVOR0VSKQogICAgYnl0ZWMgNSAvLyAweDAyCiAgICBiIHBsYXlfYWZ0ZXJfaWZfZWxzZUAzCgoKLy8gZXhhbXBsZXMudGljdGFjdG9lLnRpY3RhY3RvZS5UaWNUYWNUb2VDb250cmFjdC5tYWtlX21vdmUocGxheWVyOiBieXRlcywgbW92ZS4wOiB1aW50NjQsIG1vdmUuMTogdWludDY0KSAtPiB2b2lkOgptYWtlX21vdmU6CiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjYwLTYxCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIG1ha2VfbW92ZShzZWxmLCBwbGF5ZXI6IGFyYzQuVUludDgsIG1vdmU6IE1vdmUpIC0+IE5vbmU6CiAgICBwcm90byAzIDAKICAgIGludGNfMCAvLyAwCiAgICBkdXBuIDUKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6NjMKICAgIC8vIGFzc2VydCBjb2x1bW4gPCAzIGFuZCByb3cgPCAzLCAiTW92ZSBtdXN0IGJlIGluIHJhbmdlIgogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzIgLy8gMwogICAgPAogICAgYnogbWFrZV9tb3ZlX2Jvb2xfZmFsc2VAMwogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzIgLy8gMwogICAgPAogICAgYnogbWFrZV9tb3ZlX2Jvb2xfZmFsc2VAMwogICAgaW50Y18xIC8vIDEKCm1ha2VfbW92ZV9ib29sX21lcmdlQDQ6CiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjYzCiAgICAvLyBhc3NlcnQgY29sdW1uIDwgMyBhbmQgcm93IDwgMywgIk1vdmUgbXVzdCBiZSBpbiByYW5nZSIKICAgIGFzc2VydCAvLyBNb3ZlIG11c3QgYmUgaW4gcmFuZ2UKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6NjQKICAgIC8vIGFzc2VydCBzZWxmLmdhbWVbcm93XVtjb2x1bW5dID09IEVNUFRZLCAiU3F1YXJlIGlzIGFscmVhZHkgdGFrZW4iCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiZ2FtZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5nYW1lIGV4aXN0cwogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzIgLy8gMwogICAgKgogICAgZHVwMgogICAgaW50Y18yIC8vIDMKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMSAvLyAxCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHB1c2hieXRlcyAweDAwCiAgICBiPT0KICAgIGFzc2VydCAvLyBTcXVhcmUgaXMgYWxyZWFkeSB0YWtlbgogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo2NQogICAgLy8gc2VsZi5nYW1lW3Jvd11bY29sdW1uXSA9IHBsYXllcgogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTMKICAgIHJlcGxhY2UzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgdW5jb3ZlciAyCiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ5dGVjXzAgLy8gImdhbWUiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo2NgogICAgLy8gc2VsZi50dXJucyArPSAxCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAidHVybnMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudHVybnMgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgYnl0ZWNfMSAvLyAidHVybnMiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo3NAogICAgLy8gZyA9IHNlbGYuZ2FtZS5jb3B5KCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJnYW1lIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIHN3YXAKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfYnVyeSA1CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5nYW1lIGV4aXN0cwogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo3NgogICAgLy8gaWYgZ1tyb3ddWzBdID09IGdbcm93XVsxXSA9PSBnW3Jvd11bMl06CiAgICBzd2FwCiAgICBpbnRjXzIgLy8gMwogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMwogICAgZHVwCiAgICBleHRyYWN0IDAgMSAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHN3YXAKICAgIGV4dHJhY3QgMSAxIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDQKICAgIGI9PQogICAgYnogbWFrZV9tb3ZlX2FmdGVyX2lmX2Vsc2VAMTMKICAgIGZyYW1lX2RpZyAzCiAgICBleHRyYWN0IDIgMSAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyA0CiAgICBiPT0KICAgIGJ6IG1ha2VfbW92ZV9hZnRlcl9pZl9lbHNlQDEzCiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5Ojc3CiAgICAvLyByZXR1cm4gVHJ1ZQogICAgaW50Y18xIC8vIDEKCm1ha2VfbW92ZV9hZnRlcl9pbmxpbmVkX2V4YW1wbGVzLnRpY3RhY3RvZS50aWN0YWN0b2UuVGljVGFjVG9lQ29udHJhY3QuZGlkX3dpbkAyNToKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6NjcKICAgIC8vIGlmIHNlbGYuZGlkX3dpbihwbGF5ZXIsIGNvbHVtbj1jb2x1bW4sIHJvdz1yb3cpOgogICAgYnogbWFrZV9tb3ZlX2Vsc2VfYm9keUA2CiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjY4CiAgICAvLyBzZWxmLndpbm5lci52YWx1ZSA9IHBsYXllcgogICAgYnl0ZWNfMyAvLyAid2lubmVyIgogICAgZnJhbWVfZGlnIC0zCiAgICBhcHBfZ2xvYmFsX3B1dAoKbWFrZV9tb3ZlX2FmdGVyX2lmX2Vsc2VAOToKICAgIHJldHN1YgoKbWFrZV9tb3ZlX2Vsc2VfYm9keUA2OgogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo2OQogICAgLy8gZWxpZiBzZWxmLnR1cm5zID09IDk6CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAidHVybnMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudHVybnMgZXhpc3RzCiAgICBwdXNoaW50IDkgLy8gOQogICAgPT0KICAgIGJ6IG1ha2VfbW92ZV9hZnRlcl9pZl9lbHNlQDkKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6NzAKICAgIC8vIHNlbGYud2lubmVyLnZhbHVlID0gYXJjNC5VSW50OChEUkFXKQogICAgYnl0ZWNfMyAvLyAid2lubmVyIgogICAgcHVzaGJ5dGVzIDB4MDMKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCm1ha2VfbW92ZV9hZnRlcl9pZl9lbHNlQDEzOgogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo3OQogICAgLy8gaWYgZ1swXVtjb2x1bW5dID09IGdbMV1bY29sdW1uXSA9PSBnWzJdW2NvbHVtbl06CiAgICBmcmFtZV9kaWcgNQogICAgZHVwCiAgICBleHRyYWN0IDAgMyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICBmcmFtZV9kaWcgLTIKICAgIGludGNfMSAvLyAxCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHN3YXAKICAgIGV4dHJhY3QgMyAzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIGZyYW1lX2RpZyAtMgogICAgaW50Y18xIC8vIDEKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDIKICAgIGI9PQogICAgYnogbWFrZV9tb3ZlX2FmdGVyX2lmX2Vsc2VAMTYKICAgIGZyYW1lX2RpZyA1CiAgICBleHRyYWN0IDYgMyAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtMgogICAgaW50Y18xIC8vIDEKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIDIKICAgIGI9PQogICAgYnogbWFrZV9tb3ZlX2FmdGVyX2lmX2Vsc2VAMTYKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6ODAKICAgIC8vIHJldHVybiBUcnVlCiAgICBpbnRjXzEgLy8gMQogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo2NwogICAgLy8gaWYgc2VsZi5kaWRfd2luKHBsYXllciwgY29sdW1uPWNvbHVtbiwgcm93PXJvdyk6CiAgICBiIG1ha2VfbW92ZV9hZnRlcl9pbmxpbmVkX2V4YW1wbGVzLnRpY3RhY3RvZS50aWN0YWN0b2UuVGljVGFjVG9lQ29udHJhY3QuZGlkX3dpbkAyNQoKbWFrZV9tb3ZlX2FmdGVyX2lmX2Vsc2VAMTY6CiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjgyLTgzCiAgICAvLyAjIGlmIHBsYXllciBvd25zIGNlbnRlciwgY2hlY2sgZGlhZ29uYWxzCiAgICAvLyBpZiBwbGF5ZXIgPT0gZ1sxXVsxXToKICAgIGZyYW1lX2RpZyAxCiAgICBleHRyYWN0IDEgMSAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtMwogICAgYj09CiAgICBieiBtYWtlX21vdmVfYWZ0ZXJfaWZfZWxzZUAyNAogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo4NAogICAgLy8gaWYgZ1swXVswXSA9PSBwbGF5ZXIgPT0gZ1syXVsyXToKICAgIGZyYW1lX2RpZyAwCiAgICBleHRyYWN0IDAgMSAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtMwogICAgYj09CiAgICBieiBtYWtlX21vdmVfYWZ0ZXJfaWZfZWxzZUAyMAogICAgZnJhbWVfZGlnIDUKICAgIGV4dHJhY3QgNiAzIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZXh0cmFjdCAyIDEgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9kaWcgLTMKICAgIGI9PQogICAgYnogbWFrZV9tb3ZlX2FmdGVyX2lmX2Vsc2VAMjAKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6ODUKICAgIC8vIHJldHVybiBUcnVlCiAgICBpbnRjXzEgLy8gMQogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo2NwogICAgLy8gaWYgc2VsZi5kaWRfd2luKHBsYXllciwgY29sdW1uPWNvbHVtbiwgcm93PXJvdyk6CiAgICBiIG1ha2VfbW92ZV9hZnRlcl9pbmxpbmVkX2V4YW1wbGVzLnRpY3RhY3RvZS50aWN0YWN0b2UuVGljVGFjVG9lQ29udHJhY3QuZGlkX3dpbkAyNQoKbWFrZV9tb3ZlX2FmdGVyX2lmX2Vsc2VAMjA6CiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5Ojg2CiAgICAvLyBpZiBnWzBdWzJdID09IHBsYXllciA9PSBnWzJdWzBdOgogICAgZnJhbWVfZGlnIDAKICAgIGV4dHJhY3QgMiAxIC8vIG9uIGVycm9yOiBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIC0zCiAgICBiPT0KICAgIGJ6IG1ha2VfbW92ZV9hZnRlcl9pZl9lbHNlQDI0CiAgICBmcmFtZV9kaWcgNQogICAgZXh0cmFjdCA2IDMgLy8gb24gZXJyb3I6IGluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBleHRyYWN0IDAgMSAvLyBvbiBlcnJvcjogaW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtMwogICAgYj09CiAgICBieiBtYWtlX21vdmVfYWZ0ZXJfaWZfZWxzZUAyNAogICAgLy8gdGljdGFjdG9lL3RpY3RhY3RvZS5weTo4NwogICAgLy8gcmV0dXJuIFRydWUKICAgIGludGNfMSAvLyAxCiAgICAvLyB0aWN0YWN0b2UvdGljdGFjdG9lLnB5OjY3CiAgICAvLyBpZiBzZWxmLmRpZF93aW4ocGxheWVyLCBjb2x1bW49Y29sdW1uLCByb3c9cm93KToKICAgIGIgbWFrZV9tb3ZlX2FmdGVyX2lubGluZWRfZXhhbXBsZXMudGljdGFjdG9lLnRpY3RhY3RvZS5UaWNUYWNUb2VDb250cmFjdC5kaWRfd2luQDI1CgptYWtlX21vdmVfYWZ0ZXJfaWZfZWxzZUAyNDoKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6ODgKICAgIC8vIHJldHVybiBGYWxzZQogICAgaW50Y18wIC8vIDAKICAgIC8vIHRpY3RhY3RvZS90aWN0YWN0b2UucHk6NjcKICAgIC8vIGlmIHNlbGYuZGlkX3dpbihwbGF5ZXIsIGNvbHVtbj1jb2x1bW4sIHJvdz1yb3cpOgogICAgYiBtYWtlX21vdmVfYWZ0ZXJfaW5saW5lZF9leGFtcGxlcy50aWN0YWN0b2UudGljdGFjdG9lLlRpY1RhY1RvZUNvbnRyYWN0LmRpZF93aW5AMjUKCm1ha2VfbW92ZV9ib29sX2ZhbHNlQDM6CiAgICBpbnRjXzAgLy8gMAogICAgYiBtYWtlX21vdmVfYm9vbF9tZXJnZUA0Cg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEDCCYHBGdhbWUFdHVybnMKY2hhbGxlbmdlcgZ3aW5uZXIBAQECBGhvc3QxG0EAI4IEBJapcYEEF6B5swS7nxFHBJ7r9Y42GgCOBABBACwAFwACIkMxGRREMRhENhoBSSJbTCVbiAC2I0MxGRREMRhEiACbgAQVH3x1TFCwI0MxGRREMRhENhoBSSJbTCVbiABlI0MxGRRENhoBSSJbTCVbiAACI0OKAgAxGEEAEiIqZUUBQQAGIitlRQFEKmkraScGMQBngQmvKExni/4kDEEAIYv/JAxBABojRCIoZUSL/yQLSiRYi/4nBF1dKExnKSJniSJC/+OKAgAiKmVFARREKjEAZycFi/6L/4gARokiKWVEgQIYJwUnBE8CTYmKAgAiK2VFARREIillRIECGEEAEzEAIicGZUQSRCcEi/6L/4gAEIkxADIDIiplTRJEJwVC/+mKAwAiRwWL/iQMQQD0i/8kDEEA7SNEIihlRIv/JAtKJFhJi/4jWIABAKhEi/6L/V1PAksCTwJdKExnIillRCMIKUxnIihlTElOAowFREwkWEmMA0lXAAFMVwEBSYwEqEEAJIsDVwIBiwSoQQAZI0EABSuL/WeJIillRIEJEkH/9SuAAQNniYsFSVcAA0mMAIv+I1hMVwMDSYwBi/4jWEmMAqhBABOLBVcGA4v+I1iLAqhBAAQjQv+2iwFXAQGL/ahBADqLAFcAAYv9qEEAEosFVwYDVwIBi/2oQQAEI0L/josAVwIBi/2oQQASiwVXBgNXAAGL/ahBAAQjQv9xIkL/bSJC/xA=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}