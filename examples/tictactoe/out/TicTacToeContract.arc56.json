{
    "name": "TicTacToeContract",
    "structs": {},
    "methods": [
        {
            "name": "new_game",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "move"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "join_game",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "move"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "whose_turn",
            "args": [],
            "returns": {
                "type": "uint8"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "play",
            "args": [
                {
                    "type": "(uint64,uint64)",
                    "name": "move"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 4
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "challenger": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Y2hhbGxlbmdlcg=="
                },
                "winner": {
                    "keyType": "AVMString",
                    "valueType": "uint8",
                    "key": "d2lubmVy"
                },
                "host": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "aG9zdA=="
                },
                "game": {
                    "keyType": "AVMString",
                    "valueType": "uint8[3][3]",
                    "key": "Z2FtZQ=="
                },
                "turns": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dHVybnM="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        326
                    ],
                    "errorMessage": "Game is already finished"
                },
                {
                    "pc": [
                        205
                    ],
                    "errorMessage": "Game isn't over"
                },
                {
                    "pc": [
                        284
                    ],
                    "errorMessage": "Host already has a challenger"
                },
                {
                    "pc": [
                        100,
                        105,
                        146,
                        151,
                        168,
                        173,
                        249,
                        252,
                        262,
                        406,
                        410,
                        424,
                        427,
                        437,
                        466,
                        471,
                        475,
                        487,
                        523,
                        532,
                        534,
                        543,
                        553,
                        559,
                        572,
                        583,
                        594,
                        597,
                        612,
                        623,
                        626
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        365
                    ],
                    "errorMessage": "It is the challenger's turn"
                },
                {
                    "pc": [
                        345
                    ],
                    "errorMessage": "It is the host's turn"
                },
                {
                    "pc": [
                        238,
                        393
                    ],
                    "errorMessage": "Move must be in range"
                },
                {
                    "pc": [
                        92,
                        117,
                        138,
                        163
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        415
                    ],
                    "errorMessage": "Square is already taken"
                },
                {
                    "pc": [
                        95,
                        120,
                        141
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        242,
                        397,
                        419,
                        463
                    ],
                    "errorMessage": "check self.game exists"
                },
                {
                    "pc": [
                        343
                    ],
                    "errorMessage": "check self.host exists"
                },
                {
                    "pc": [
                        305,
                        330,
                        448,
                        508
                    ],
                    "errorMessage": "check self.turns exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEDCSYHBGdhbWUFdHVybnMKY2hhbGxlbmdlcgZ3aW5uZXIBAQECBGhvc3QxG0EAI4IEBJapcYEEF6B5swS7nxFHBJ7r9Y42GgCOBABJADAAGwACIkMxGRREMRhENhoBSVcACBdMVwgIF4gAzSNDMRkURDEYRIgAr4AEFR98dUxQsCNDMRkURDEYRDYaAUlXAAgXTFcICBeIAHUjQzEZFEQ2GgFJVwAIF0xXCAgXiAACI0OKAgCAADEYQQASIiplRQFBAAYiK2VFAUQqaStpJwYxAGclryhMZ4v+JAxJjABBACmL/yQMQQAiI0QiKGVEi/8kC0okWIsARIv+JwRdi/8kDERdKExnKSJniSJC/9uKAgAiKmVFARREKjEAZycFi/6L/4gASYmKAAEiKWVEgQIYJwUnBE8CTYmKAgAiK2VFARREIillRIECGEEAEzEAIicGZUQSRCcEi/6L/4gAEIkxADIDIiplTRJEJwVC/+mKAwAiRwWL/iQMSUEBAov/JAxBAPsjRCIoZUSL/yQLTEsBJFiL/iNYgAEAqEQiKGVESUsCJFiLBkSL/ov9XYv/JAxESwJMXShMZyIpZUQjCClMZyIoZUxJTgKMAkRMJFhJjANJVwABTFcBAUmMAKhBACOLA1cCAYsAqEEAGCNBAAUri/1niSIpZUQlEkH/9iuAAQNniYsCSVcAA0mMBIv+I1hMVwMDSYwFi/4jWEmMAahBABOLAlcGA4v+I1iLAahBAAQjQv+3iwVXAQGL/ahBADqLBFcAAYv9qEEAEosCVwYDVwIBi/2oQQAEI0L/j4sEVwIBi/2oQQASiwJXBgNXAAGL/ahBAAQjQv9yIkL/biJC/wI=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}