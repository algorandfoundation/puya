EMPTY = 0
HOST = 1
CHALLENGER = 2
DRAW = 3

contract TicTacToeContract
{
  globals {
    ['challenger']: puyapy.Account
    ['winner']: puyapy.arc4.UInt8
    ['host']: puyapy.Account
    ['game']: puyapy.arc4.StaticArray[puyapy.arc4.StaticArray[puyapy.arc4.UInt8, typing.Literal[3]], typing.Literal[3]]
    ['turns']: puyapy.UInt64
  }
  
  constructor()
  {
  }
  
  abimethod new_game(move: tuple[puyapy.UInt64, puyapy.UInt64]): None
  {
    if (reinterpret_cast<bool>(txn<ApplicationID>())) {
      if (STATE_EXISTS(this.challenger)) {
        assert(STATE_EXISTS(this.winner), comment="Game isn't over")
      }
      STATE_DELETE(this.challenger)
      STATE_DELETE(this.winner)
    }
    this.host: puyapy.Account = txn<Sender>()
    this.game: puyapy.arc4.StaticArray[puyapy.arc4.StaticArray[puyapy.arc4.UInt8, typing.Literal[3]], typing.Literal[3]] = reinterpret_cast<puyapy.arc4.StaticArray[puyapy.arc4.StaticArray[puyapy.arc4.UInt8, typing.Literal[3]], typing.Literal[3]]>(bzero(9u))
    (column, row): tuple[puyapy.UInt64, puyapy.UInt64] = move
    assert(column < 3u and row < 3u, comment="Move must be in range")
    this.game[row][column]: puyapy.arc4.UInt8 = 1arc4u8
    this.turns: puyapy.UInt64 = 0u
  }
  
  abimethod join_game(move: tuple[puyapy.UInt64, puyapy.UInt64]): None
  {
    assert(!(STATE_EXISTS(this.challenger)), comment="Host already has a challenger")
    this.challenger: puyapy.Account = txn<Sender>()
    this::make_move(2arc4u8, move)
  }
  
  abimethod whose_turn(): puyapy.arc4.UInt8
  {
    return (reinterpret_cast<bool>(this.turns % 2u)) ? (1arc4u8) : (2arc4u8)
  }
  
  abimethod play(move: tuple[puyapy.UInt64, puyapy.UInt64]): None
  {
    assert(!(STATE_EXISTS(this.winner)), comment="Game is already finished")
    if (reinterpret_cast<bool>(this.turns % 2u)) {
      assert(txn<Sender>() == this.host, comment="It is the host's turn")
      player: puyapy.arc4.UInt8 = 1arc4u8
    } else {
      assert(txn<Sender>() == STATE_GET(this.challenger, default=global<ZeroAddress>()), comment="It is the challenger's turn")
      player: puyapy.arc4.UInt8 = 2arc4u8
    }
    this::make_move(player, move)
  }
  
  subroutine make_move(player: puyapy.arc4.UInt8, move: tuple[puyapy.UInt64, puyapy.UInt64]): None
  {
    (column, row): tuple[puyapy.UInt64, puyapy.UInt64] = move
    assert(column < 3u and row < 3u, comment="Move must be in range")
    assert(reinterpret_cast<puyapy.BigUInt>(this.game[row][column]) == reinterpret_cast<puyapy.BigUInt>(0arc4u8), comment="Square is already taken")
    this.game[row][column]: puyapy.arc4.UInt8 = player
    this.turns += 1u
    if (this::did_win(player, column=column, row=row)) {
      this.winner: puyapy.arc4.UInt8 = player
    } else {
      if (this.turns == 9u) {
        this.winner: puyapy.arc4.UInt8 = 3arc4u8
      }
    }
  }
  
  subroutine did_win(player: puyapy.arc4.UInt8, column: puyapy.UInt64, row: puyapy.UInt64): bool
  {
    g: puyapy.arc4.StaticArray[puyapy.arc4.StaticArray[puyapy.arc4.UInt8, typing.Literal[3]], typing.Literal[3]] = this.game.copy()
    if (reinterpret_cast<puyapy.BigUInt>(g[row][0u]) == reinterpret_cast<puyapy.BigUInt>(SINGLE_EVAL(id=0, source=g[row][1u])) and reinterpret_cast<puyapy.BigUInt>(SINGLE_EVAL(id=0, source=g[row][1u])) == reinterpret_cast<puyapy.BigUInt>(g[row][2u])) {
      return true
    }
    if (reinterpret_cast<puyapy.BigUInt>(g[0u][column]) == reinterpret_cast<puyapy.BigUInt>(SINGLE_EVAL(id=1, source=g[1u][column])) and reinterpret_cast<puyapy.BigUInt>(SINGLE_EVAL(id=1, source=g[1u][column])) == reinterpret_cast<puyapy.BigUInt>(g[2u][column])) {
      return true
    }
    if (reinterpret_cast<puyapy.BigUInt>(player) == reinterpret_cast<puyapy.BigUInt>(g[1u][1u])) {
      if (reinterpret_cast<puyapy.BigUInt>(g[0u][0u]) == reinterpret_cast<puyapy.BigUInt>(player) and reinterpret_cast<puyapy.BigUInt>(player) == reinterpret_cast<puyapy.BigUInt>(g[2u][2u])) {
        return true
      }
      if (reinterpret_cast<puyapy.BigUInt>(g[0u][2u]) == reinterpret_cast<puyapy.BigUInt>(player) and reinterpret_cast<puyapy.BigUInt>(player) == reinterpret_cast<puyapy.BigUInt>(g[2u][0u])) {
        return true
      }
    }
    return false
  }
}