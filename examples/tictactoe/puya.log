debug: PuyaOptions(paths=['tictactoe'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@0: // L39
debug: Terminated block@0: // L39
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Sealing block@0: // L84
debug: Terminated block@0: // L84
debug: Sealing block@None: // if_body_L106
debug: Sealing block@None: // else_body_L106
debug: Terminated block@1: // if_body_L106
debug: Sealing block@2: // after_if_else_L106
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L106
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L84
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L106
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L84
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L106
debug: Sealing block@None: // ternary_true_L110
debug: Sealing block@None: // ternary_false_L110
debug: Terminated block@3: // ternary_true_L110
debug: Terminated block@4: // ternary_false_L110
debug: Sealing block@5: // ternary_merge_L110
debug: Created Phi assignment: let ternary_result%6#2: uint64 = undefined while trying to resolve 'ternary_result%6' in block@5: // ternary_merge_L110
debug: Added ternary_result%6#0 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@3) in block@3: // ternary_true_L110
debug: Added ternary_result%6#1 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@3, ternary_result%6#1 <- block@4) in block@4: // ternary_false_L110
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L106
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L84
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L110
debug: Looking for 'range_item%7' in an unsealed block creating an incomplete Phi: block@6: // for_header_L110
debug: Created Phi assignment: let range_item%7#1: uint64 = undefined while trying to resolve 'range_item%7' in block@6: // for_header_L110
debug: Terminated block@6: // for_header_L110
debug: Looking for 'range_item%7' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let range_item%7#2: uint64 = undefined while trying to resolve 'range_item%7' in block@7: // for_body_L110
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L110
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L110
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L110
debug: Terminated block@7: // for_body_L110
debug: Sealing block@8: // for_footer_L110
debug: Terminated block@8: // for_footer_L110
debug: Sealing block@9: // for_increment_L110
debug: Terminated block@9: // for_increment_L110
debug: Sealing block@6: // for_header_L110
debug: Added range_item%7#0 to Phi node: let range_item%7#1: uint64 = φ(range_item%7#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added range_item%7#3 to Phi node: let range_item%7#1: uint64 = φ(range_item%7#0 <- block@5, range_item%7#3 <- block@9) in block@9: // for_increment_L110
debug: Sealing block@7: // for_body_L110
debug: Added range_item%7#1 to Phi node: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6) (range_item%7#2) with range_item%7#1
debug: Deleting Phi assignment: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%7#2: uint64 = φ(range_item%7#1 <- block@6) (range_item%7#2) with range_item%7#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L110
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L106
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L84
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L106
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L110
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L110
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L110
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L110
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L110
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L110
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L106
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L84
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L110
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L110
debug: Terminated block@10: // after_for_L110
debug: Sealing block@0: // L117
debug: Terminated block@0: // L117
debug: Sealing block@0: // L139
debug: Terminated block@0: // L139
debug: Sealing block@0: // L166
debug: Terminated block@0: // L166
debug: Sealing block@0: // L195
debug: Terminated block@0: // L195
debug: Sealing block@None: // if_body_L210
debug: Sealing block@None: // else_body_L210
debug: Terminated block@1: // if_body_L210
debug: Terminated block@2: // else_body_L210
debug: Sealing block@3: // after_if_else_L210
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L210
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@4: // for_header_L215
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@4: // for_header_L215
debug: Terminated block@4: // for_header_L215
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let range_item%1#2: uint64 = undefined while trying to resolve 'range_item%1' in block@5: // for_body_L215
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_body_L215
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@5: // for_body_L215
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_body_L215
debug: Terminated block@5: // for_body_L215
debug: Sealing block@6: // for_footer_L215
debug: Terminated block@6: // for_footer_L215
debug: Sealing block@7: // for_increment_L215
debug: Terminated block@7: // for_increment_L215
debug: Sealing block@4: // for_header_L215
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3) in block@3: // after_if_else_L210
debug: Added range_item%1#3 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@3, range_item%1#3 <- block@7) in block@7: // for_increment_L215
debug: Sealing block@5: // for_body_L215
debug: Added range_item%1#1 to Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4) (range_item%1#2) with range_item%1#1
debug: Deleting Phi assignment: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4)
debug: Replaced trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@4) (range_item%1#2) with range_item%1#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L210
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L210
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3) in block@3: // after_if_else_L210
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3, tail_cursor#3 <- block@7) in block@7: // for_increment_L215
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L215
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L210
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@7) in block@7: // for_increment_L215
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@4)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L210
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@7) in block@7: // for_increment_L215
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L215
debug: Terminated block@8: // after_for_L215
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L14
debug: Terminated block@0: // L14
debug: Sealing block@None: // and_contd_L20
debug: Terminated block@1: // and_contd_L20
debug: Sealing block@None: // bool_true_L20
debug: Sealing block@None: // bool_false_L20
debug: Terminated block@2: // bool_true_L20
debug: Terminated block@3: // bool_false_L20
debug: Sealing block@4: // bool_merge_L20
debug: Created Phi assignment: let and_result%5#2: uint64 = undefined while trying to resolve 'and_result%5' in block@4: // bool_merge_L20
debug: Added and_result%5#0 to Phi node: let and_result%5#2: uint64 = φ(and_result%5#0 <- block@2) in block@2: // bool_true_L20
debug: Added and_result%5#1 to Phi node: let and_result%5#2: uint64 = φ(and_result%5#0 <- block@2, and_result%5#1 <- block@3) in block@3: // bool_false_L20
debug: Created Phi assignment: let move.0#1: uint64 = undefined while trying to resolve 'move.0' in block@4: // bool_merge_L20
debug: Added move.0#0 to Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@2) in block@2: // bool_true_L20
debug: Created Phi assignment: let move.0#2: uint64 = undefined while trying to resolve 'move.0' in block@3: // bool_false_L20
debug: Added move.0#0 to Phi node: let move.0#2: uint64 = φ(move.0#0 <- block@0) in block@0: // L14
debug: Added move.0#0 to Phi node: let move.0#2: uint64 = φ(move.0#0 <- block@0, move.0#0 <- block@1) in block@1: // and_contd_L20
debug: Replacing trivial Phi node: let move.0#2: uint64 = φ(move.0#0 <- block@0, move.0#0 <- block@1) (move.0#2) with move.0#0
debug: Deleting Phi assignment: let move.0#2: uint64 = φ(move.0#0 <- block@0, move.0#0 <- block@1)
debug: Replaced trivial Phi node: let move.0#2: uint64 = φ(move.0#0 <- block@0, move.0#0 <- block@1) (move.0#2) with move.0#0 in current definition for 1 blocks
debug: Added move.0#0 to Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@2, move.0#0 <- block@3) in block@3: // bool_false_L20
debug: Replacing trivial Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@2, move.0#0 <- block@3) (move.0#1) with move.0#0
debug: Deleting Phi assignment: let move.0#1: uint64 = φ(move.0#0 <- block@2, move.0#0 <- block@3)
debug: Replaced trivial Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@2, move.0#0 <- block@3) (move.0#1) with move.0#0 in current definition for 1 blocks
debug: Created Phi assignment: let move.1#1: uint64 = undefined while trying to resolve 'move.1' in block@4: // bool_merge_L20
debug: Added move.1#0 to Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@2) in block@2: // bool_true_L20
debug: Created Phi assignment: let move.1#2: uint64 = undefined while trying to resolve 'move.1' in block@3: // bool_false_L20
debug: Added move.1#0 to Phi node: let move.1#2: uint64 = φ(move.1#0 <- block@0) in block@0: // L14
debug: Added move.1#0 to Phi node: let move.1#2: uint64 = φ(move.1#0 <- block@0, move.1#0 <- block@1) in block@1: // and_contd_L20
debug: Replacing trivial Phi node: let move.1#2: uint64 = φ(move.1#0 <- block@0, move.1#0 <- block@1) (move.1#2) with move.1#0
debug: Deleting Phi assignment: let move.1#2: uint64 = φ(move.1#0 <- block@0, move.1#0 <- block@1)
debug: Replaced trivial Phi node: let move.1#2: uint64 = φ(move.1#0 <- block@0, move.1#0 <- block@1) (move.1#2) with move.1#0 in current definition for 1 blocks
debug: Added move.1#0 to Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@2, move.1#0 <- block@3) in block@3: // bool_false_L20
debug: Replacing trivial Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@2, move.1#0 <- block@3) (move.1#1) with move.1#0
debug: Deleting Phi assignment: let move.1#1: uint64 = φ(move.1#0 <- block@2, move.1#0 <- block@3)
debug: Replaced trivial Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@2, move.1#0 <- block@3) (move.1#1) with move.1#0 in current definition for 1 blocks
debug: Terminated block@4: // bool_merge_L20
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L47
debug: Terminated block@0: // L47
debug: Sealing block@None: // and_contd_L49
debug: Terminated block@1: // and_contd_L49
debug: Sealing block@None: // bool_true_L49
debug: Sealing block@None: // bool_false_L49
debug: Terminated block@2: // bool_true_L49
debug: Terminated block@3: // bool_false_L49
debug: Sealing block@4: // bool_merge_L49
debug: Created Phi assignment: let and_result%2#2: uint64 = undefined while trying to resolve 'and_result%2' in block@4: // bool_merge_L49
debug: Added and_result%2#0 to Phi node: let and_result%2#2: uint64 = φ(and_result%2#0 <- block@2) in block@2: // bool_true_L49
debug: Added and_result%2#1 to Phi node: let and_result%2#2: uint64 = φ(and_result%2#0 <- block@2, and_result%2#1 <- block@3) in block@3: // bool_false_L49
debug: Created Phi assignment: let move.0#1: uint64 = undefined while trying to resolve 'move.0' in block@4: // bool_merge_L49
debug: Added move.0#0 to Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@2) in block@2: // bool_true_L49
debug: Created Phi assignment: let move.0#2: uint64 = undefined while trying to resolve 'move.0' in block@3: // bool_false_L49
debug: Added move.0#0 to Phi node: let move.0#2: uint64 = φ(move.0#0 <- block@0) in block@0: // L47
debug: Added move.0#0 to Phi node: let move.0#2: uint64 = φ(move.0#0 <- block@0, move.0#0 <- block@1) in block@1: // and_contd_L49
debug: Replacing trivial Phi node: let move.0#2: uint64 = φ(move.0#0 <- block@0, move.0#0 <- block@1) (move.0#2) with move.0#0
debug: Deleting Phi assignment: let move.0#2: uint64 = φ(move.0#0 <- block@0, move.0#0 <- block@1)
debug: Replaced trivial Phi node: let move.0#2: uint64 = φ(move.0#0 <- block@0, move.0#0 <- block@1) (move.0#2) with move.0#0 in current definition for 1 blocks
debug: Added move.0#0 to Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@2, move.0#0 <- block@3) in block@3: // bool_false_L49
debug: Replacing trivial Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@2, move.0#0 <- block@3) (move.0#1) with move.0#0
debug: Deleting Phi assignment: let move.0#1: uint64 = φ(move.0#0 <- block@2, move.0#0 <- block@3)
debug: Replaced trivial Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@2, move.0#0 <- block@3) (move.0#1) with move.0#0 in current definition for 1 blocks
debug: Created Phi assignment: let move.1#1: uint64 = undefined while trying to resolve 'move.1' in block@4: // bool_merge_L49
debug: Added move.1#0 to Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@2) in block@2: // bool_true_L49
debug: Created Phi assignment: let move.1#2: uint64 = undefined while trying to resolve 'move.1' in block@3: // bool_false_L49
debug: Added move.1#0 to Phi node: let move.1#2: uint64 = φ(move.1#0 <- block@0) in block@0: // L47
debug: Added move.1#0 to Phi node: let move.1#2: uint64 = φ(move.1#0 <- block@0, move.1#0 <- block@1) in block@1: // and_contd_L49
debug: Replacing trivial Phi node: let move.1#2: uint64 = φ(move.1#0 <- block@0, move.1#0 <- block@1) (move.1#2) with move.1#0
debug: Deleting Phi assignment: let move.1#2: uint64 = φ(move.1#0 <- block@0, move.1#0 <- block@1)
debug: Replaced trivial Phi node: let move.1#2: uint64 = φ(move.1#0 <- block@0, move.1#0 <- block@1) (move.1#2) with move.1#0 in current definition for 1 blocks
debug: Added move.1#0 to Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@2, move.1#0 <- block@3) in block@3: // bool_false_L49
debug: Replacing trivial Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@2, move.1#0 <- block@3) (move.1#1) with move.1#0
debug: Deleting Phi assignment: let move.1#1: uint64 = φ(move.1#0 <- block@2, move.1#0 <- block@3)
debug: Replaced trivial Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@2, move.1#0 <- block@3) (move.1#1) with move.1#0 in current definition for 1 blocks
debug: Created Phi assignment: let piece#1: bytes = undefined while trying to resolve 'piece' in block@4: // bool_merge_L49
debug: Added piece#0 to Phi node: let piece#1: bytes = φ(piece#0 <- block@2) in block@2: // bool_true_L49
debug: Created Phi assignment: let piece#2: bytes = undefined while trying to resolve 'piece' in block@3: // bool_false_L49
debug: Added piece#0 to Phi node: let piece#2: bytes = φ(piece#0 <- block@0) in block@0: // L47
debug: Added piece#0 to Phi node: let piece#2: bytes = φ(piece#0 <- block@0, piece#0 <- block@1) in block@1: // and_contd_L49
debug: Replacing trivial Phi node: let piece#2: bytes = φ(piece#0 <- block@0, piece#0 <- block@1) (piece#2) with piece#0
debug: Deleting Phi assignment: let piece#2: bytes = φ(piece#0 <- block@0, piece#0 <- block@1)
debug: Replaced trivial Phi node: let piece#2: bytes = φ(piece#0 <- block@0, piece#0 <- block@1) (piece#2) with piece#0 in current definition for 1 blocks
debug: Added piece#0 to Phi node: let piece#1: bytes = φ(piece#0 <- block@2, piece#0 <- block@3) in block@3: // bool_false_L49
debug: Replacing trivial Phi node: let piece#1: bytes = φ(piece#0 <- block@2, piece#0 <- block@3) (piece#1) with piece#0
debug: Deleting Phi assignment: let piece#1: bytes = φ(piece#0 <- block@2, piece#0 <- block@3)
debug: Replaced trivial Phi node: let piece#1: bytes = φ(piece#0 <- block@2, piece#0 <- block@3) (piece#1) with piece#0 in current definition for 1 blocks
debug: Terminated block@4: // bool_merge_L49
debug: Sealing block@None: // and_contd_L54
debug: Terminated block@5: // and_contd_L54
debug: Sealing block@None: // if_body_L54
debug: Sealing block@None: // else_body_L54
debug: Terminated block@6: // if_body_L54
debug: Sealing block@7: // after_if_else_L54
debug: Terminated block@7: // after_if_else_L54
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Looking for 'item_index_internal%3' in an unsealed block creating an incomplete Phi: block@1: // for_header_L60
debug: Created Phi assignment: let item_index_internal%3#1: uint64 = undefined while trying to resolve 'item_index_internal%3' in block@1: // for_header_L60
debug: Terminated block@1: // for_header_L60
debug: Sealing block@None: // for_body_L60
debug: Terminated block@2: // for_body_L60
debug: Sealing block@None: // and_contd_L61
debug: Terminated block@3: // and_contd_L61
debug: Sealing block@None: // and_contd_L61
debug: Terminated block@4: // and_contd_L61
debug: Sealing block@None: // if_body_L61
debug: Sealing block@None: // else_body_L61
debug: Terminated block@5: // if_body_L61
debug: Sealing block@6: // after_if_else_L61
debug: Terminated block@6: // after_if_else_L61
debug: Sealing block@7: // for_footer_L60
debug: Sealing block@None: // after_for_L60
debug: Created Phi assignment: let item_index_internal%3#2: uint64 = undefined while trying to resolve 'item_index_internal%3' in block@6: // after_if_else_L61
debug: Added item_index_internal%3#1 to Phi node: let item_index_internal%3#2: uint64 = φ(item_index_internal%3#1 <- block@2) in block@2: // for_body_L60
debug: Added item_index_internal%3#1 to Phi node: let item_index_internal%3#2: uint64 = φ(item_index_internal%3#1 <- block@2, item_index_internal%3#1 <- block@3) in block@3: // and_contd_L61
debug: Added item_index_internal%3#1 to Phi node: let item_index_internal%3#2: uint64 = φ(item_index_internal%3#1 <- block@2, item_index_internal%3#1 <- block@3, item_index_internal%3#1 <- block@4) in block@4: // and_contd_L61
debug: Replacing trivial Phi node: let item_index_internal%3#2: uint64 = φ(item_index_internal%3#1 <- block@2, item_index_internal%3#1 <- block@3, item_index_internal%3#1 <- block@4) (item_index_internal%3#2) with item_index_internal%3#1
debug: Deleting Phi assignment: let item_index_internal%3#2: uint64 = φ(item_index_internal%3#1 <- block@2, item_index_internal%3#1 <- block@3, item_index_internal%3#1 <- block@4)
debug: Replaced trivial Phi node: let item_index_internal%3#2: uint64 = φ(item_index_internal%3#1 <- block@2, item_index_internal%3#1 <- block@3, item_index_internal%3#1 <- block@4) (item_index_internal%3#2) with item_index_internal%3#1 in current definition for 1 blocks
debug: Terminated block@7: // for_footer_L60
debug: Sealing block@1: // for_header_L60
debug: Added item_index_internal%3#0 to Phi node: let item_index_internal%3#1: uint64 = φ(item_index_internal%3#0 <- block@0) in block@0: // L57
debug: Added item_index_internal%3#3 to Phi node: let item_index_internal%3#1: uint64 = φ(item_index_internal%3#0 <- block@0, item_index_internal%3#3 <- block@7) in block@7: // for_footer_L60
debug: Terminated block@8: // after_for_L60
debug: Looking for 'range_item%20' in an unsealed block creating an incomplete Phi: block@9: // for_header_L64
debug: Created Phi assignment: let range_item%20#1: uint64 = undefined while trying to resolve 'range_item%20' in block@9: // for_header_L64
debug: Terminated block@9: // for_header_L64
debug: Looking for 'range_item%20' in an unsealed block creating an incomplete Phi: block@10: // for_body_L64
debug: Created Phi assignment: let range_item%20#2: uint64 = undefined while trying to resolve 'range_item%20' in block@10: // for_body_L64
debug: Looking for 'g' in an unsealed block creating an incomplete Phi: block@10: // for_body_L64
debug: Created Phi assignment: let g#1: bytes = undefined while trying to resolve 'g' in block@10: // for_body_L64
debug: Terminated block@10: // for_body_L64
debug: Sealing block@None: // and_contd_L65
debug: Terminated block@11: // and_contd_L65
debug: Sealing block@None: // and_contd_L65
debug: Terminated block@12: // and_contd_L65
debug: Sealing block@None: // if_body_L65
debug: Sealing block@None: // else_body_L65
debug: Terminated block@13: // if_body_L65
debug: Sealing block@14: // after_if_else_L65
debug: Terminated block@14: // after_if_else_L65
debug: Sealing block@15: // for_footer_L64
debug: Terminated block@15: // for_footer_L64
debug: Sealing block@16: // for_increment_L64
debug: Created Phi assignment: let range_item%20#3: uint64 = undefined while trying to resolve 'range_item%20' in block@14: // after_if_else_L65
debug: Added range_item%20#2 to Phi node: let range_item%20#3: uint64 = φ(range_item%20#2 <- block@10) in block@10: // for_body_L64
debug: Added range_item%20#2 to Phi node: let range_item%20#3: uint64 = φ(range_item%20#2 <- block@10, range_item%20#2 <- block@11) in block@11: // and_contd_L65
debug: Added range_item%20#2 to Phi node: let range_item%20#3: uint64 = φ(range_item%20#2 <- block@10, range_item%20#2 <- block@11, range_item%20#2 <- block@12) in block@12: // and_contd_L65
debug: Replacing trivial Phi node: let range_item%20#3: uint64 = φ(range_item%20#2 <- block@10, range_item%20#2 <- block@11, range_item%20#2 <- block@12) (range_item%20#3) with range_item%20#2
debug: Deleting Phi assignment: let range_item%20#3: uint64 = φ(range_item%20#2 <- block@10, range_item%20#2 <- block@11, range_item%20#2 <- block@12)
debug: Replaced trivial Phi node: let range_item%20#3: uint64 = φ(range_item%20#2 <- block@10, range_item%20#2 <- block@11, range_item%20#2 <- block@12) (range_item%20#3) with range_item%20#2 in current definition for 1 blocks
debug: Terminated block@16: // for_increment_L64
debug: Sealing block@9: // for_header_L64
debug: Added range_item%20#0 to Phi node: let range_item%20#1: uint64 = φ(range_item%20#0 <- block@8) in block@8: // after_for_L60
debug: Added range_item%20#4 to Phi node: let range_item%20#1: uint64 = φ(range_item%20#0 <- block@8, range_item%20#4 <- block@16) in block@16: // for_increment_L64
debug: Sealing block@10: // for_body_L64
debug: Added range_item%20#1 to Phi node: let range_item%20#2: uint64 = φ(range_item%20#1 <- block@9) in block@9: // for_header_L64
debug: Replacing trivial Phi node: let range_item%20#2: uint64 = φ(range_item%20#1 <- block@9) (range_item%20#2) with range_item%20#1
debug: Deleting Phi assignment: let range_item%20#2: uint64 = φ(range_item%20#1 <- block@9)
debug: Replaced trivial Phi node: let range_item%20#2: uint64 = φ(range_item%20#1 <- block@9) (range_item%20#2) with range_item%20#1 in current definition for 5 blocks
debug: Created Phi assignment: let g#2: bytes = undefined while trying to resolve 'g' in block@9: // for_header_L64
debug: Created Phi assignment: let g#3: bytes = undefined while trying to resolve 'g' in block@1: // for_header_L60
debug: Added g#0 to Phi node: let g#3: bytes = φ(g#0 <- block@0) in block@0: // L57
debug: Created Phi assignment: let g#4: bytes = undefined while trying to resolve 'g' in block@6: // after_if_else_L61
debug: Added g#3 to Phi node: let g#4: bytes = φ(g#3 <- block@2) in block@2: // for_body_L60
debug: Added g#3 to Phi node: let g#4: bytes = φ(g#3 <- block@2, g#3 <- block@3) in block@3: // and_contd_L61
debug: Added g#3 to Phi node: let g#4: bytes = φ(g#3 <- block@2, g#3 <- block@3, g#3 <- block@4) in block@4: // and_contd_L61
debug: Replacing trivial Phi node: let g#4: bytes = φ(g#3 <- block@2, g#3 <- block@3, g#3 <- block@4) (g#4) with g#3
debug: Deleting Phi assignment: let g#4: bytes = φ(g#3 <- block@2, g#3 <- block@3, g#3 <- block@4)
debug: Replaced trivial Phi node: let g#4: bytes = φ(g#3 <- block@2, g#3 <- block@3, g#3 <- block@4) (g#4) with g#3 in current definition for 1 blocks
debug: Added g#3 to Phi node: let g#3: bytes = φ(g#0 <- block@0, g#3 <- block@7) in block@7: // for_footer_L60
debug: Replacing trivial Phi node: let g#3: bytes = φ(g#0 <- block@0, g#3 <- block@7) (g#3) with g#0
debug: Deleting Phi assignment: let g#3: bytes = φ(g#0 <- block@0, g#3 <- block@7)
debug: Replaced trivial Phi node: let g#3: bytes = φ(g#0 <- block@0, g#3 <- block@7) (g#3) with g#0 in current definition for 6 blocks
debug: Added g#0 to Phi node: let g#2: bytes = φ(g#0 <- block@8) in block@8: // after_for_L60
debug: Created Phi assignment: let g#5: bytes = undefined while trying to resolve 'g' in block@14: // after_if_else_L65
debug: Added g#1 to Phi node: let g#5: bytes = φ(g#1 <- block@10) in block@10: // for_body_L64
debug: Added g#1 to Phi node: let g#5: bytes = φ(g#1 <- block@10, g#1 <- block@11) in block@11: // and_contd_L65
debug: Added g#1 to Phi node: let g#5: bytes = φ(g#1 <- block@10, g#1 <- block@11, g#1 <- block@12) in block@12: // and_contd_L65
debug: Replacing trivial Phi node: let g#5: bytes = φ(g#1 <- block@10, g#1 <- block@11, g#1 <- block@12) (g#5) with g#1
debug: Deleting Phi assignment: let g#5: bytes = φ(g#1 <- block@10, g#1 <- block@11, g#1 <- block@12)
debug: Replaced trivial Phi node: let g#5: bytes = φ(g#1 <- block@10, g#1 <- block@11, g#1 <- block@12) (g#5) with g#1 in current definition for 1 blocks
debug: Added g#1 to Phi node: let g#2: bytes = φ(g#0 <- block@8, g#1 <- block@16) in block@16: // for_increment_L64
debug: Added g#2 to Phi node: let g#1: bytes = φ(g#2 <- block@9) in block@9: // for_header_L64
debug: Replacing trivial Phi node: let g#1: bytes = φ(g#2 <- block@9) (g#1) with g#2
debug: Deleting Phi assignment: let g#1: bytes = φ(g#2 <- block@9)
debug: Replacing trivial Phi node: let g#2: bytes = φ(g#0 <- block@8, g#2 <- block@16) (g#2) with g#0
debug: Deleting Phi assignment: let g#2: bytes = φ(g#0 <- block@8, g#2 <- block@16)
debug: Replaced trivial Phi node: let g#1: bytes = φ(g#2 <- block@9) (g#1) with g#2 in current definition for 7 blocks
debug: Replaced trivial Phi node: let g#2: bytes = φ(g#0 <- block@8, g#2 <- block@16) (g#2) with g#0 in current definition for 8 blocks
debug: Sealing block@None: // after_for_L64
debug: Terminated block@17: // after_for_L64
debug: Sealing block@None: // if_body_L68
debug: Sealing block@None: // else_body_L68
debug: Terminated block@18: // if_body_L68
debug: Sealing block@None: // and_contd_L70
debug: Terminated block@19: // and_contd_L70
debug: Sealing block@None: // if_body_L70
debug: Sealing block@None: // else_body_L70
debug: Terminated block@20: // if_body_L70
debug: Created Phi assignment: let g#6: bytes = undefined while trying to resolve 'g' in block@21: // else_body_L70
debug: Added g#0 to Phi node: let g#6: bytes = φ(g#0 <- block@18) in block@18: // if_body_L68
debug: Added g#0 to Phi node: let g#6: bytes = φ(g#0 <- block@18, g#0 <- block@19) in block@19: // and_contd_L70
debug: Replacing trivial Phi node: let g#6: bytes = φ(g#0 <- block@18, g#0 <- block@19) (g#6) with g#0
debug: Deleting Phi assignment: let g#6: bytes = φ(g#0 <- block@18, g#0 <- block@19)
debug: Replaced trivial Phi node: let g#6: bytes = φ(g#0 <- block@18, g#0 <- block@19) (g#6) with g#0 in current definition for 1 blocks
debug: Terminated block@21: // else_body_L70
debug: Sealing block@None: // and_contd_L72
debug: Terminated block@22: // and_contd_L72
debug: Sealing block@None: // if_body_L72
debug: Sealing block@None: // else_body_L72
debug: Terminated block@23: // if_body_L72
debug: Sealing block@24: // after_if_else_L72
debug: Terminated block@24: // after_if_else_L72
debug: Sealing block@25: // after_if_else_L70
debug: Terminated block@25: // after_if_else_L70
debug: Sealing block@26: // after_if_else_L68
debug: Terminated block@26: // after_if_else_L68
debug: Sealing block@0: // L32
debug: Terminated block@0: // L32
debug: Sealing block@None: // ternary_true_L34
debug: Sealing block@None: // ternary_false_L34
debug: Terminated block@1: // ternary_true_L34
debug: Terminated block@2: // ternary_false_L34
debug: Sealing block@3: // ternary_merge_L34
debug: Created Phi assignment: let ternary_result%3#2: bytes = undefined while trying to resolve 'ternary_result%3' in block@3: // ternary_merge_L34
debug: Added ternary_result%3#0 to Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@1) in block@1: // ternary_true_L34
debug: Added ternary_result%3#1 to Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@1, ternary_result%3#1 <- block@2) in block@2: // ternary_false_L34
debug: Terminated block@3: // ternary_merge_L34
debug: Sealing block@0: // L36
debug: Terminated block@0: // L36
debug: Sealing block@None: // if_body_L39
debug: Sealing block@None: // else_body_L39
debug: Terminated block@1: // if_body_L39
debug: Terminated block@2: // else_body_L39
debug: Sealing block@3: // after_if_else_L39
debug: Terminated block@3: // after_if_else_L39
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Sealing block@None: // switch_case_default_L13
debug: Sealing block@None: // new_game_route_L14
debug: Sealing block@None: // join_game_route_L25
debug: Sealing block@None: // whose_turn_route_L32
debug: Sealing block@None: // play_route_L36
debug: Terminated block@1: // new_game_route_L14
debug: Terminated block@2: // join_game_route_L25
debug: Terminated block@3: // whose_turn_route_L32
debug: Terminated block@4: // play_route_L36
debug: Terminated block@5: // switch_case_default_L13
debug: Sealing block@6: // switch_case_next_L13
debug: Terminated block@6: // switch_case_next_L13
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Output IR to tictactoe/out/TicTacToeContract.ssa.ir
info: Optimizing examples.tictactoe.tictactoe.TicTacToeContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: item0%4#0, awst_tmp%6#0
debug: Replacing {awst_tmp%6#0} with item0%4#0 made 1 modifications
debug: Found equivalence set: item1%5#0, awst_tmp%7#0
debug: Replacing {awst_tmp%7#0} with item1%5#0 made 1 modifications
debug: Found equivalence set: item0%19#0, awst_tmp%21#0
debug: Replacing {awst_tmp%21#0} with item0%19#0 made 1 modifications
debug: Found equivalence set: item1%20#0, awst_tmp%22#0
debug: Replacing {awst_tmp%22#0} with item1%20#0 made 1 modifications
debug: Found equivalence set: item0%39#0, awst_tmp%41#0
debug: Replacing {awst_tmp%41#0} with item0%39#0 made 1 modifications
debug: Found equivalence set: item1%40#0, awst_tmp%42#0
debug: Replacing {awst_tmp%42#0} with item1%40#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%1#0 NoOp) to (! tmp%1#0)
debug: Simplified (extract3 tmp%3#0 0u 8u) to ((extract 0 8) tmp%3#0)
debug: Simplified (extract3 tmp%3#0 8u 8u) to ((extract 8 8) tmp%3#0)
debug: Simplified (concat 0x awst_tmp%10#0) to awst_tmp%10#0
debug: Simplified (== tmp%15#0 NoOp) to (! tmp%15#0)
debug: Simplified (extract3 tmp%18#0 0u 8u) to ((extract 0 8) tmp%18#0)
debug: Simplified (extract3 tmp%18#0 8u 8u) to ((extract 8 8) tmp%18#0)
debug: Simplified (concat 0x awst_tmp%25#0) to awst_tmp%25#0
debug: Simplified (== tmp%30#0 NoOp) to (! tmp%30#0)
debug: Simplified (== tmp%35#0 NoOp) to (! tmp%35#0)
debug: Simplified (extract3 tmp%38#0 0u 8u) to ((extract 0 8) tmp%38#0)
debug: Simplified (extract3 tmp%38#0 8u 8u) to ((extract 8 8) tmp%38#0)
debug: Simplified (concat 0x awst_tmp%45#0) to awst_tmp%45#0
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable current_tail_offset%12#0
debug: Removing unused variable encoded_tuple_buffer%13#0
debug: Removing unused variable current_tail_offset%27#0
debug: Removing unused variable encoded_tuple_buffer%28#0
debug: Removing unused variable current_tail_offset%47#0
debug: Removing unused variable encoded_tuple_buffer%48#0
debug: Optimizer: Simplify Control Ops
debug: inlining the default target of a switch/goto nth
debug: adding block@0: // L13 as a predecessor of block@6: // switch_case_next_L13 due to inlining of block@5: // switch_case_default_L13
debug: simplified terminator of block@0: // L13 from switch tmp%0#0 {method "new_game((uint64,uint64))(uint8[3][3],uint8)" => block@1, method "join_game((uint64,uint64))(uint8[3][3],uint8)" => block@2, method "whose_turn()uint8" => block@3, method "play((uint64,uint64))(uint8[3][3],uint8)" => block@4, * => block@5} to switch tmp%0#0 {method "new_game((uint64,uint64))(uint8[3][3],uint8)" => block@1, method "join_game((uint64,uint64))(uint8[3][3],uint8)" => block@2, method "whose_turn()uint8" => block@3, method "play((uint64,uint64))(uint8[3][3],uint8)" => block@4, * => block@6}
debug: inlining the default target of a switch/goto nth
debug: simplified terminator of block@0: // L13 from switch tmp%0#0 {method "new_game((uint64,uint64))(uint8[3][3],uint8)" => block@1, method "join_game((uint64,uint64))(uint8[3][3],uint8)" => block@2, method "whose_turn()uint8" => block@3, method "play((uint64,uint64))(uint8[3][3],uint8)" => block@4, * => block@6} to switch tmp%0#0 {method "new_game((uint64,uint64))(uint8[3][3],uint8)" => block@1, method "join_game((uint64,uint64))(uint8[3][3],uint8)" => block@2, method "whose_turn()uint8" => block@3, method "play((uint64,uint64))(uint8[3][3],uint8)" => block@4, * => fail // reject transaction}
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@6: // switch_case_next_L13 into block@5: // switch_case_default_L13
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@5: // switch_case_default_L13
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.new_game
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: updated_target%16#0, assigned_value%19#0
debug: Replacing {assigned_value%19#0} with updated_target%16#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (* move.0#0 1u) to move.0#0
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable array_length%8#0
debug: Removing unused variable assigned_value%12#0
debug: Removing unused variable array_length%13#0
debug: Removing unused variable array_length%20#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let index_is_in_bounds%21#0: uint64 = (< move.1#0 3u) with copy of existing registers [Register(atype=uint64, name='index_is_in_bounds%9', version=0, source_location=tictactoe/tictactoe.py:21:8-26)]
debug: Replacing redundant declaration let write_offset%22#0: uint64 = (* move.1#0 3u) with copy of existing registers [Register(atype=uint64, name='item_index%10', version=0, source_location=tictactoe/tictactoe.py:21:8-26)]
debug: Replacing redundant declaration let index_is_in_bounds%14#0: uint64 = (< move.0#0 3u) with copy of existing registers [Register(atype=uint64, name='tmp%3', version=0, source_location=tictactoe/tictactoe.py:20:15)]
debug: Found equivalence set: tmp%3#0, index_is_in_bounds%14#0
debug: Replacing {index_is_in_bounds%14#0} with tmp%3#0 made 1 modifications
debug: Found equivalence set: move.0#0, write_offset%15#0
debug: Replacing {write_offset%15#0} with move.0#0 made 1 modifications
debug: Found equivalence set: index_is_in_bounds%9#0, index_is_in_bounds%21#0
debug: Replacing {index_is_in_bounds%21#0} with index_is_in_bounds%9#0 made 1 modifications
debug: Found equivalence set: item_index%10#0, write_offset%22#0
debug: Replacing {write_offset%22#0} with item_index%10#0 made 1 modifications
debug: Removing redundant assert of index_is_in_bounds%9#0
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.join_game
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.make_move
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: piece#0, assigned_value%20#0
debug: Replacing {assigned_value%20#0} with piece#0 made 1 modifications
debug: Found equivalence set: updated_target%24#0, assigned_value%27#0
debug: Replacing {assigned_value%27#0} with updated_target%24#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (* move.0#0 1u) to move.0#0
debug: Simplified (* move.0#0 1u) to move.0#0
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable array_length%5#0
debug: Removing unused variable array_length%9#0
debug: Removing unused variable array_length%16#0
debug: Removing unused variable array_length%21#0
debug: Removing unused variable array_length%28#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let index_is_in_bounds%17#0: uint64 = (< move.1#0 3u) with copy of existing registers [Register(atype=uint64, name='index_is_in_bounds%6', version=0, source_location=tictactoe/tictactoe.py:50:15-33)]
debug: Replacing redundant declaration let item_index%18#0: uint64 = (* move.1#0 3u) with copy of existing registers [Register(atype=uint64, name='item_index%7', version=0, source_location=tictactoe/tictactoe.py:50:15-33)]
debug: Replacing redundant declaration let index_is_in_bounds%22#0: uint64 = (< move.0#0 3u) with copy of existing registers [Register(atype=uint64, name='index_is_in_bounds%10', version=0, source_location=tictactoe/tictactoe.py:50:15-42)]
debug: Replacing redundant declaration let index_is_in_bounds%29#0: uint64 = (< move.1#0 3u) with copy of existing registers [Register(atype=uint64, name='index_is_in_bounds%6', version=0, source_location=tictactoe/tictactoe.py:50:15-33)]
debug: Replacing redundant declaration let write_offset%30#0: uint64 = (* move.1#0 3u) with copy of existing registers [Register(atype=uint64, name='item_index%7', version=0, source_location=tictactoe/tictactoe.py:50:15-33)]
debug: Replacing redundant declaration let index_is_in_bounds%10#0: uint64 = (< move.0#0 3u) with copy of existing registers [Register(atype=uint64, name='tmp%0', version=0, source_location=tictactoe/tictactoe.py:49:15)]
debug: Found equivalence set: tmp%0#0, index_is_in_bounds%10#0, index_is_in_bounds%22#0
debug: Replacing {index_is_in_bounds%10#0, index_is_in_bounds%22#0} with tmp%0#0 made 2 modifications
debug: Found equivalence set: move.0#0, item_index%11#0, write_offset%23#0
debug: Replacing {item_index%11#0, write_offset%23#0} with move.0#0 made 2 modifications
debug: Found equivalence set: index_is_in_bounds%6#0, index_is_in_bounds%17#0, index_is_in_bounds%29#0
debug: Replacing {index_is_in_bounds%17#0, index_is_in_bounds%29#0} with index_is_in_bounds%6#0 made 2 modifications
debug: Found equivalence set: item_index%7#0, item_index%18#0, write_offset%30#0
debug: Replacing {item_index%18#0, write_offset%30#0} with item_index%7#0 made 2 modifications
debug: Removing redundant assert of index_is_in_bounds%6#0
debug: Removing redundant assert of tmp%0#0
debug: Removing redundant assert of index_is_in_bounds%6#0
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.check_winner
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: game_value%0#0, copy%2#0, g#0
debug: Replacing {game_value%0#0, copy%2#0} with g#0 made 1 modifications
debug: Found equivalence set: range_item%20#1, col#0
debug: Replacing {range_item%20#1} with col#0 made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (* 0u 1u) to 0u
debug: Simplified (* 0u 1u) to 0u
debug: Simplified (* 1u 1u) to 1u
debug: Simplified (* 2u 1u) to 2u
debug: Simplified (* 0u 1u) to 0u
debug: Simplified (* 0u 3u) to 0u
debug: Simplified (* col#0 1u) to col#0
debug: Simplified (* 0u 3u) to 0u
debug: Simplified (* col#0 1u) to col#0
debug: Simplified (* 1u 3u) to 3u
debug: Simplified (* col#0 1u) to col#0
debug: Simplified (* 2u 3u) to 6u
debug: Simplified (* col#0 1u) to col#0
debug: Simplified (* 0u 3u) to 0u
debug: Simplified (* col#0 1u) to col#0
debug: Simplified (* 1u 3u) to 3u
debug: Simplified (* 1u 1u) to 1u
debug: Simplified (* 0u 3u) to 0u
debug: Simplified (* 0u 1u) to 0u
debug: Simplified (* 1u 3u) to 3u
debug: Simplified (* 1u 1u) to 1u
debug: Simplified (* 2u 3u) to 6u
debug: Simplified (* 2u 1u) to 2u
debug: Simplified (* 0u 3u) to 0u
debug: Simplified (* 0u 1u) to 0u
debug: Simplified (* 0u 3u) to 0u
debug: Simplified (* 2u 1u) to 2u
debug: Simplified (* 1u 3u) to 3u
debug: Simplified (* 1u 1u) to 1u
debug: Simplified (* 2u 3u) to 6u
debug: Simplified (* 0u 1u) to 0u
debug: Simplified (* 0u 3u) to 0u
debug: Simplified (* 2u 1u) to 2u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable reverse_index_internal%4#0
debug: Removing unused variable array_length%24#0
debug: Removing unused variable array_length%31#0
debug: Removing unused variable array_length%37#0
debug: Removing unused variable array_length%44#0
debug: Removing unused variable array_length%51#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@7: // for_footer_L60 with block@6: // after_if_else_L61 in block@1: // for_header_L60
debug: Merged linear block@7: // for_footer_L60 into block@6: // after_if_else_L61
debug: Replaced predecessor block@15: // for_footer_L64 with block@14: // after_if_else_L65 in block@16: // for_increment_L64
debug: Merged linear block@15: // for_footer_L64 into block@14: // after_if_else_L65
debug: Replaced predecessor block@16: // for_increment_L64 with block@14: // after_if_else_L65 in block@9: // for_header_L64
debug: Merged linear block@16: // for_increment_L64 into block@14: // after_if_else_L65
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@24: // after_if_else_L72
debug: Removed empty block: block@25: // after_if_else_L70
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let index_is_in_bounds%38#0: uint64 = (< col#0 3u) with copy of existing registers [Register(atype=uint64, name='index_is_in_bounds%32', version=0, source_location=tictactoe/tictactoe.py:65:29-38)]
debug: Replacing redundant declaration let index_is_in_bounds%25#0: uint64 = (< col#0 3u) with copy of existing registers [Register(atype=uint64, name='continue_looping%21', version=0, source_location=tictactoe/tictactoe.py:64:19-28)]
debug: Replacing redundant declaration let index_is_in_bounds%32#0: uint64 = (< col#0 3u) with copy of existing registers [Register(atype=uint64, name='index_is_in_bounds%25', version=0, source_location=tictactoe/tictactoe.py:65:15-24)]
debug: Replacing redundant declaration let index_is_in_bounds%45#0: uint64 = (< col#0 3u) with copy of existing registers [Register(atype=uint64, name='index_is_in_bounds%32', version=0, source_location=tictactoe/tictactoe.py:65:29-38)]
debug: Replacing redundant declaration let index_is_in_bounds%52#0: uint64 = (< col#0 3u) with copy of existing registers [Register(atype=uint64, name='index_is_in_bounds%45', version=0, source_location=tictactoe/tictactoe.py:65:55-64)]
debug: Found equivalence set: continue_looping%21#0, index_is_in_bounds%25#0, index_is_in_bounds%32#0, index_is_in_bounds%38#0, index_is_in_bounds%45#0, index_is_in_bounds%52#0
debug: Replacing {index_is_in_bounds%25#0, index_is_in_bounds%32#0, index_is_in_bounds%38#0, index_is_in_bounds%45#0, index_is_in_bounds%52#0} with continue_looping%21#0 made 5 modifications
debug: Found equivalence set: col#0, item_index%26#0, item_index%33#0, item_index%39#0, item_index%46#0, item_index%53#0
debug: Replacing {item_index%26#0, item_index%33#0, item_index%39#0, item_index%46#0, item_index%53#0} with col#0 made 5 modifications
debug: Removing redundant assert of continue_looping%21#0
debug: Removing redundant assert of continue_looping%21#0
debug: Removing redundant assert of continue_looping%21#0
debug: Removing redundant assert of continue_looping%21#0
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.whose_turn
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.play
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to tictactoe/out/TicTacToeContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: awst_tmp%10#0, encoded_tuple_buffer%13#1
debug: Replacing {encoded_tuple_buffer%13#1} with awst_tmp%10#0 made 1 modifications
debug: Found equivalence set: awst_tmp%25#0, encoded_tuple_buffer%28#1
debug: Replacing {encoded_tuple_buffer%28#1} with awst_tmp%25#0 made 1 modifications
debug: Found equivalence set: awst_tmp%45#0, encoded_tuple_buffer%48#1
debug: Replacing {encoded_tuple_buffer%48#1} with awst_tmp%45#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.new_game
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.join_game
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.make_move
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.check_winner
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (extract3 row#0 0u 1u) to ((extract 0 1) row#0)
debug: Simplified (extract3 row#0 0u 1u) to ((extract 0 1) row#0)
debug: Simplified (extract3 row#0 1u 1u) to ((extract 1 1) row#0)
debug: Simplified (extract3 row#0 2u 1u) to ((extract 2 1) row#0)
debug: Simplified (extract3 row#0 0u 1u) to ((extract 0 1) row#0)
debug: Simplified (extract3 g#0 0u 3u) to ((extract 0 3) g#0)
debug: Simplified (extract3 g#0 0u 3u) to ((extract 0 3) g#0)
debug: Simplified (extract3 g#0 3u 3u) to ((extract 3 3) g#0)
debug: Simplified (extract3 g#0 6u 3u) to ((extract 6 3) g#0)
debug: Simplified (extract3 g#0 0u 3u) to ((extract 0 3) g#0)
debug: Simplified (extract3 g#0 3u 3u) to ((extract 3 3) g#0)
debug: Simplified (extract3 tmp%56#0 1u 1u) to ((extract 1 1) tmp%56#0)
debug: Simplified (extract3 g#0 0u 3u) to ((extract 0 3) g#0)
debug: Simplified (extract3 tmp%61#0 0u 1u) to ((extract 0 1) tmp%61#0)
debug: Simplified (extract3 g#0 3u 3u) to ((extract 3 3) g#0)
debug: Simplified (extract3 tmp%65#0 1u 1u) to ((extract 1 1) tmp%65#0)
debug: Simplified (extract3 g#0 6u 3u) to ((extract 6 3) g#0)
debug: Simplified (extract3 tmp%70#0 2u 1u) to ((extract 2 1) tmp%70#0)
debug: Simplified (extract3 g#0 0u 3u) to ((extract 0 3) g#0)
debug: Simplified (extract3 tmp%75#0 0u 1u) to ((extract 0 1) tmp%75#0)
debug: Simplified (extract3 g#0 0u 3u) to ((extract 0 3) g#0)
debug: Simplified (extract3 tmp%79#0 2u 1u) to ((extract 2 1) tmp%79#0)
debug: Simplified (extract3 g#0 3u 3u) to ((extract 3 3) g#0)
debug: Simplified (extract3 tmp%83#0 1u 1u) to ((extract 1 1) tmp%83#0)
debug: Simplified (extract3 g#0 6u 3u) to ((extract 6 3) g#0)
debug: Simplified (extract3 tmp%88#0 0u 1u) to ((extract 0 1) tmp%88#0)
debug: Simplified (extract3 g#0 0u 3u) to ((extract 0 3) g#0)
debug: Simplified (extract3 tmp%93#0 2u 1u) to ((extract 2 1) tmp%93#0)
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable item_index%7#0
debug: Removing unused variable item_index%10#0
debug: Removing unused variable item_index%12#0
debug: Removing unused variable item_index%15#0
debug: Removing unused variable item_index%18#0
debug: Removing unused variable item_index%22#0
debug: Removing unused variable item_index%29#0
debug: Removing unused variable item_index%35#0
debug: Removing unused variable item_index%42#0
debug: Removing unused variable item_index%49#0
debug: Removing unused variable item_index%55#0
debug: Removing unused variable item_index%57#0
debug: Removing unused variable item_index%60#0
debug: Removing unused variable item_index%62#0
debug: Removing unused variable item_index%64#0
debug: Removing unused variable item_index%66#0
debug: Removing unused variable item_index%69#0
debug: Removing unused variable item_index%71#0
debug: Removing unused variable item_index%74#0
debug: Removing unused variable item_index%76#0
debug: Removing unused variable item_index%78#0
debug: Removing unused variable item_index%80#0
debug: Removing unused variable item_index%82#0
debug: Removing unused variable item_index%84#0
debug: Removing unused variable item_index%87#0
debug: Removing unused variable item_index%89#0
debug: Removing unused variable item_index%92#0
debug: Removing unused variable item_index%94#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%11#0: bytes = ((extract 0 1) row#0) with copy of existing registers [Register(atype=bytes, name='tmp%8', version=0, source_location=tictactoe/tictactoe.py:61:15-21)]
debug: Replacing redundant declaration let new_state_value%19#0: bytes = ((extract 0 1) row#0) with copy of existing registers [Register(atype=bytes, name='tmp%11', version=0, source_location=tictactoe/tictactoe.py:61:26-32)]
debug: Replacing redundant declaration let tmp%30#0: bytes = ((extract 0 3) g#0) with copy of existing registers [Register(atype=bytes, name='tmp%23', version=0, source_location=tictactoe/tictactoe.py:65:15-19)]
debug: Replacing redundant declaration let tmp%50#0: bytes = ((extract 0 3) g#0) with copy of existing registers [Register(atype=bytes, name='tmp%30', version=0, source_location=tictactoe/tictactoe.py:65:29-33)]
debug: Replacing redundant declaration let tmp%65#0: bytes = ((extract 3 3) g#0) with copy of existing registers [Register(atype=bytes, name='tmp%56', version=0, source_location=tictactoe/tictactoe.py:68-69:11-15)]
debug: Replacing redundant declaration let tmp%75#0: bytes = ((extract 0 3) g#0) with copy of existing registers [Register(atype=bytes, name='tmp%61', version=0, source_location=tictactoe/tictactoe.py:70:15-19)]
debug: Replacing redundant declaration let tmp%79#0: bytes = ((extract 0 3) g#0) with copy of existing registers [Register(atype=bytes, name='tmp%61', version=0, source_location=tictactoe/tictactoe.py:70:15-19)]
debug: Replacing redundant declaration let tmp%83#0: bytes = ((extract 3 3) g#0) with copy of existing registers [Register(atype=bytes, name='tmp%65', version=0, source_location=tictactoe/tictactoe.py:70:26-30)]
debug: Replacing redundant declaration let tmp%93#0: bytes = ((extract 0 3) g#0) with copy of existing registers [Register(atype=bytes, name='tmp%79', version=0, source_location=tictactoe/tictactoe.py:72:17-21)]
debug: Found equivalence set: tmp%8#0, tmp%11#0, new_state_value%19#0
debug: Replacing {tmp%11#0, new_state_value%19#0} with tmp%8#0 made 2 modifications
debug: Found equivalence set: tmp%56#0, tmp%65#0, tmp%83#0
debug: Replacing {tmp%65#0, tmp%83#0} with tmp%56#0 made 2 modifications
debug: Found equivalence set: tmp%23#0, tmp%30#0, tmp%50#0
debug: Replacing {tmp%30#0, tmp%50#0} with tmp%23#0 made 2 modifications
debug: Found equivalence set: tmp%61#0, tmp%79#0, tmp%75#0, tmp%93#0
debug: Replacing {tmp%79#0, tmp%75#0, tmp%93#0} with tmp%61#0 made 3 modifications
debug: Replacing redundant declaration let tmp%34#0: bytes = (extract3 tmp%23#0 col#0 1u) with copy of existing registers [Register(atype=bytes, name='tmp%27', version=0, source_location=tictactoe/tictactoe.py:65:15-24)]
debug: Replacing redundant declaration let new_state_value%54#0: bytes = (extract3 tmp%23#0 col#0 1u) with copy of existing registers [Register(atype=bytes, name='tmp%34', version=0, source_location=tictactoe/tictactoe.py:65:29-38)]
debug: Replacing redundant declaration let awst_tmp%67#0: bytes = ((extract 1 1) tmp%56#0) with copy of existing registers [Register(atype=bytes, name='tmp%58', version=0, source_location=tictactoe/tictactoe.py:68-69:11-18)]
debug: Replacing redundant declaration let new_state_value%77#0: bytes = ((extract 0 1) tmp%61#0) with copy of existing registers [Register(atype=bytes, name='tmp%63', version=0, source_location=tictactoe/tictactoe.py:70:15-22)]
debug: Replacing redundant declaration let awst_tmp%85#0: bytes = ((extract 1 1) tmp%56#0) with copy of existing registers [Register(atype=bytes, name='awst_tmp%67', version=0, source_location=tictactoe/tictactoe.py:70:26-33)]
debug: Replacing redundant declaration let new_state_value%95#0: bytes = ((extract 2 1) tmp%61#0) with copy of existing registers [Register(atype=bytes, name='tmp%81', version=0, source_location=tictactoe/tictactoe.py:72:17-24)]
debug: Found equivalence set: tmp%58#0, awst_tmp%67#0, awst_tmp%85#0
debug: Replacing {awst_tmp%67#0, awst_tmp%85#0} with tmp%58#0 made 4 modifications
debug: Found equivalence set: tmp%27#0, tmp%34#0, new_state_value%54#0
debug: Replacing {tmp%34#0, new_state_value%54#0} with tmp%27#0 made 2 modifications
debug: Found equivalence set: tmp%63#0, new_state_value%77#0
debug: Replacing {new_state_value%77#0} with tmp%63#0 made 1 modifications
debug: Found equivalence set: tmp%81#0, new_state_value%95#0
debug: Replacing {new_state_value%95#0} with tmp%81#0 made 1 modifications
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.whose_turn
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.play
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to tictactoe/out/TicTacToeContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.new_game
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.join_game
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.make_move
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.check_winner
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.whose_turn
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.play
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 3, ending loop
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.approval_program
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.new_game
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.join_game
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.make_move
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.check_winner
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.whose_turn
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.play
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.new_game using strategy RootOperandGrouping
debug: Coalescing and_result%5#0 with [and_result%5#5, and_result%5#1, and_result%5#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.join_game using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.make_move using strategy RootOperandGrouping
debug: Coalescing and_result%2#0 with [and_result%2#5, and_result%2#1, and_result%2#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.check_winner using strategy RootOperandGrouping
debug: Coalescing item_index_internal%3#0 with [item_index_internal%3#6, item_index_internal%3#1, item_index_internal%3#3]
debug: Coalescing range_item%20#0 with [range_item%20#4]
debug: Coalescing col#0 with [col#1]
debug: Coalescing resulted in 14 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.whose_turn using strategy RootOperandGrouping
debug: Coalescing ternary_result%3#0 with [ternary_result%3#5, ternary_result%3#1, ternary_result%3#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.play using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.approval_program
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.new_game
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.join_game
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.make_move
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.check_winner
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.whose_turn
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.play
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to tictactoe/out/TicTacToeContract.destructured.ir
debug: Inserted main_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[7]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[3]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[5]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[7]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[10]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[12]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[28]: 'store awst_tmp%10#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[30]: 'load awst_tmp%10#0' with 'load awst_tmp%10#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[37]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[39]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[23]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[26]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[34]: 'store encoded_tuple_buffer%13#2 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[37]: 'load encoded_tuple_buffer%13#2' with 'load encoded_tuple_buffer%13#2 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[13]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[16]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[29]: 'store awst_tmp%11#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[34]: 'load awst_tmp%11#0' with 'load awst_tmp%11#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[15]: 'store item0%4#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[20]: 'load item0%4#0' with 'load item0%4#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[19]: 'store item1%5#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[24]: 'load item1%5#0' with 'load item1%5#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[23]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[29]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[1]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[3]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[5]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[7]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[10]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[12]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[15]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[17]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[33]: 'store awst_tmp%25#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[35]: 'load awst_tmp%25#0' with 'load awst_tmp%25#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[42]: 'store tmp%29#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[44]: 'load tmp%29#0' with 'load tmp%29#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[28]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[31]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[39]: 'store encoded_tuple_buffer%28#2 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[42]: 'load encoded_tuple_buffer%28#2' with 'load encoded_tuple_buffer%28#2 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[18]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[21]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[34]: 'store awst_tmp%26#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[39]: 'load awst_tmp%26#0' with 'load awst_tmp%26#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[20]: 'store item0%19#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[25]: 'load item0%19#0' with 'load item0%19#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[24]: 'store item1%20#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[29]: 'load item1%20#0' with 'load item1%20#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[28]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[34]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_whose_turn_route@3.ops[1]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced main_whose_turn_route@3.ops[3]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted main_whose_turn_route@3.ops[5]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced main_whose_turn_route@3.ops[7]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted main_whose_turn_route@3.ops[10]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced main_whose_turn_route@3.ops[12]: 'load tmp%32#0' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted main_whose_turn_route@3.ops[19]: 'store tmp%34#0 to l-stack (copy)'
debug: Replaced main_whose_turn_route@3.ops[21]: 'load tmp%34#0' with 'load tmp%34#0 from l-stack (no copy)'
debug: Inserted main_whose_turn_route@3.ops[15]: 'store tmp%33#0 to l-stack (copy)'
debug: Replaced main_whose_turn_route@3.ops[18]: 'load tmp%33#0' with 'load tmp%33#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[1]: 'store tmp%35#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[3]: 'load tmp%35#0' with 'load tmp%35#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[5]: 'store tmp%36#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[7]: 'load tmp%36#0' with 'load tmp%36#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[10]: 'store tmp%37#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[12]: 'load tmp%37#0' with 'load tmp%37#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[15]: 'store tmp%38#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[17]: 'load tmp%38#0' with 'load tmp%38#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[33]: 'store awst_tmp%45#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[35]: 'load awst_tmp%45#0' with 'load awst_tmp%45#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[42]: 'store tmp%49#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[44]: 'load tmp%49#0' with 'load tmp%49#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[28]: 'store tmp%44#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[31]: 'load tmp%44#0' with 'load tmp%44#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[39]: 'store encoded_tuple_buffer%48#2 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[42]: 'load encoded_tuple_buffer%48#2' with 'load encoded_tuple_buffer%48#2 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[18]: 'store tmp%38#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[21]: 'load tmp%38#0' with 'load tmp%38#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[34]: 'store awst_tmp%46#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[39]: 'load awst_tmp%46#0' with 'load awst_tmp%46#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[20]: 'store item0%39#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[25]: 'load item0%39#0' with 'load item0%39#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[24]: 'store item1%40#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[29]: 'load item1%40#0' with 'load item1%40#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[28]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[34]: 'load tmp%43#0' with 'load tmp%43#0 from l-stack (no copy)'
debug: Found 1 edge set/s for examples.tictactoe.tictactoe.TicTacToeContract.approval_program
debug: Inserted new_game_block@0.ops[22]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced new_game_block@0.ops[24]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted new_game_block@0.ops[2]: 'store new_state_value%0#0 to l-stack (copy)'
debug: Replaced new_game_block@0.ops[5]: 'load new_state_value%0#0' with 'load new_state_value%0#0 from l-stack (no copy)'
debug: Inserted new_game_block@0.ops[8]: 'store new_state_value%1#0 to l-stack (copy)'
debug: Replaced new_game_block@0.ops[11]: 'load new_state_value%1#0' with 'load new_state_value%1#0 from l-stack (no copy)'
debug: Inserted new_game_block@0.ops[14]: 'store new_state_value%2#0 to l-stack (copy)'
debug: Replaced new_game_block@0.ops[17]: 'load new_state_value%2#0' with 'load new_state_value%2#0 from l-stack (no copy)'
debug: Inserted new_game_and_contd@1.ops[3]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced new_game_and_contd@1.ops[5]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[12]: 'store index_is_in_bounds%9#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[14]: 'load index_is_in_bounds%9#0' with 'load index_is_in_bounds%9#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[5]: 'store game_exists%7#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[8]: 'load game_exists%7#0' with 'load game_exists%7#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[20]: 'store item_index%10#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[23]: 'load item_index%10#0' with 'load item_index%10#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[37]: 'store game_exists%18#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[40]: 'load game_exists%18#0' with 'load game_exists%18#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[46]: 'store updated_target%23#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[49]: 'load updated_target%23#0' with 'load updated_target%23#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[57]: 'store game_exists%25#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[60]: 'load game_exists%25#0' with 'load game_exists%25#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[65]: 'store winner_exists%27#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[68]: 'load winner_exists%27#0' with 'load winner_exists%27#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[26]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[30]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[40]: 'store game_value%17#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[44]: 'load game_value%17#0' with 'load game_value%17#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[69]: 'store winner_value%26#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[74]: 'load winner_value%26#0' with 'load winner_value%26#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[34]: 'store updated_target%16#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[47]: 'load updated_target%16#0' with 'load updated_target%16#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[62]: 'store game_value%24#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[75]: 'load game_value%24#0' with 'load game_value%24#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[7]: 'store game_value%6#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[23]: 'load game_value%6#0' with 'load game_value%6#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@4.ops[25]: 'store item_index%10#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@4.ops[48]: 'load item_index%10#0' with 'load item_index%10#0 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.tictactoe.tictactoe.TicTacToeContract.new_game
debug: Allocated 1 variable/s to x-stack: and_result%5#0
debug: shared x-stack for new_game_bool_true@2 -> new_game_bool_merge@4: and_result%5#0
debug: shared x-stack for new_game_bool_false@3 -> new_game_bool_merge@4: and_result%5#0
debug: examples.tictactoe.tictactoe.TicTacToeContract.new_game f-stack entry: []
debug: examples.tictactoe.tictactoe.TicTacToeContract.new_game f-stack on first store: ['tmp%3#0']
debug: Inserted join_game_block@0.ops[12]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced join_game_block@0.ops[14]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted join_game_block@0.ops[3]: 'store challenger_exists%1#0 to l-stack (copy)'
debug: Replaced join_game_block@0.ops[6]: 'load challenger_exists%1#0' with 'load challenger_exists%1#0 from l-stack (no copy)'
debug: Inserted join_game_block@0.ops[9]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced join_game_block@0.ops[12]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted join_game_block@0.ops[19]: 'store new_state_value%4#0 to l-stack (copy)'
debug: Replaced join_game_block@0.ops[22]: 'load new_state_value%4#0' with 'load new_state_value%4#0 from l-stack (no copy)'
debug: Inserted join_game_block@0.ops[31]: 'store game_exists%6#0 to l-stack (copy)'
debug: Replaced join_game_block@0.ops[34]: 'load game_exists%6#0' with 'load game_exists%6#0 from l-stack (no copy)'
debug: Inserted join_game_block@0.ops[39]: 'store winner_exists%8#0 to l-stack (copy)'
debug: Replaced join_game_block@0.ops[42]: 'load winner_exists%8#0' with 'load winner_exists%8#0 from l-stack (no copy)'
debug: Inserted join_game_block@0.ops[41]: 'store winner_value%7#0 to l-stack (copy)'
debug: Replaced join_game_block@0.ops[46]: 'load winner_value%7#0' with 'load winner_value%7#0 from l-stack (no copy)'
debug: Inserted join_game_block@0.ops[5]: 'store challenger_value%0#0 to l-stack (copy)'
debug: Replaced join_game_block@0.ops[12]: 'load challenger_value%0#0' with 'load challenger_value%0#0 from l-stack (no copy)'
debug: Inserted join_game_block@0.ops[34]: 'store game_value%5#0 to l-stack (copy)'
debug: Replaced join_game_block@0.ops[47]: 'load game_value%5#0' with 'load game_value%5#0 from l-stack (no copy)'
debug: Inserted make_move_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced make_move_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted make_move_and_contd@1.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced make_move_and_contd@1.ops[5]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[12]: 'store index_is_in_bounds%6#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[14]: 'load index_is_in_bounds%6#0' with 'load index_is_in_bounds%6#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[31]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[33]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[36]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[38]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[51]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[53]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[98]: 'store tmp%37#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[100]: 'load tmp%37#0' with 'load tmp%37#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[5]: 'store game_exists%4#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[8]: 'load game_exists%4#0' with 'load game_exists%4#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[20]: 'store item_index%7#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[23]: 'load item_index%7#0' with 'load item_index%7#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[45]: 'store game_exists%15#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[48]: 'load game_exists%15#0' with 'load game_exists%15#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[64]: 'store game_exists%26#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[67]: 'load game_exists%26#0' with 'load game_exists%26#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[73]: 'store updated_target%31#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[76]: 'load updated_target%31#0' with 'load updated_target%31#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[81]: 'store turns_exists%33#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[84]: 'load turns_exists%33#0' with 'load turns_exists%33#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[89]: 'store new_state_value%34#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[92]: 'load new_state_value%34#0' with 'load new_state_value%34#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[98]: 'store turns_exists%36#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[101]: 'load turns_exists%36#0' with 'load turns_exists%36#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[26]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[30]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[48]: 'store game_value%14#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[52]: 'load game_value%14#0' with 'load game_value%14#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[68]: 'store game_value%25#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[72]: 'load game_value%25#0' with 'load game_value%25#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[86]: 'store turns_value%32#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[90]: 'load turns_value%32#0' with 'load turns_value%32#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[104]: 'store turns_value%35#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[108]: 'load turns_value%35#0' with 'load turns_value%35#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[62]: 'store updated_target%24#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[75]: 'load updated_target%24#0' with 'load updated_target%24#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[7]: 'store game_value%3#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[23]: 'load game_value%3#0' with 'load game_value%3#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[55]: 'store item_index%7#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[76]: 'load item_index%7#0' with 'load item_index%7#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[25]: 'store item_index%7#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[55]: 'load item_index%7#0' with 'load item_index%7#0 from l-stack (no copy)'
debug: Inserted make_move_and_contd@5.ops[10]: 'store tmp%40#0 to l-stack (copy)'
debug: Replaced make_move_and_contd@5.ops[12]: 'load tmp%40#0' with 'load tmp%40#0 from l-stack (no copy)'
debug: Inserted make_move_and_contd@5.ops[3]: 'store winner_exists%39#0 to l-stack (copy)'
debug: Replaced make_move_and_contd@5.ops[6]: 'load winner_exists%39#0' with 'load winner_exists%39#0 from l-stack (no copy)'
debug: Inserted make_move_and_contd@5.ops[5]: 'store winner_value%38#0 to l-stack (copy)'
debug: Replaced make_move_and_contd@5.ops[9]: 'load winner_value%38#0' with 'load winner_value%38#0 from l-stack (no copy)'
debug: Found 3 edge set/s for examples.tictactoe.tictactoe.TicTacToeContract.make_move
debug: Allocated 1 variable/s to x-stack: and_result%2#0
debug: shared x-stack for make_move_bool_true@2 -> make_move_bool_merge@4: and_result%2#0
debug: shared x-stack for make_move_bool_false@3 -> make_move_bool_merge@4: and_result%2#0
debug: examples.tictactoe.tictactoe.TicTacToeContract.make_move f-stack entry: []
debug: examples.tictactoe.tictactoe.TicTacToeContract.make_move f-stack on first store: ['tmp%0#0']
debug: Inserted check_winner_block@0.ops[3]: 'store game_exists%1#0 to l-stack (copy)'
debug: Replaced check_winner_block@0.ops[6]: 'load game_exists%1#0' with 'load game_exists%1#0 from l-stack (no copy)'
debug: Inserted check_winner_for_header@1.ops[3]: 'store continue_looping%5#0 to l-stack (copy)'
debug: Replaced check_winner_for_header@1.ops[5]: 'load continue_looping%5#0' with 'load continue_looping%5#0 from l-stack (no copy)'
debug: Inserted check_winner_for_body@2.ops[8]: 'store row#0 to l-stack (copy)'
debug: Replaced check_winner_for_body@2.ops[10]: 'load row#0' with 'load row#0 from l-stack (no copy)'
debug: Inserted check_winner_for_body@2.ops[12]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced check_winner_for_body@2.ops[14]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted check_winner_for_body@2.ops[17]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced check_winner_for_body@2.ops[19]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted check_winner_for_body@2.ops[3]: 'store item_index%6#0 to l-stack (copy)'
debug: Replaced check_winner_for_body@2.ops[6]: 'load item_index%6#0' with 'load item_index%6#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@3.ops[6]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@3.ops[8]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@3.ops[2]: 'store awst_tmp%13#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@3.ops[5]: 'load awst_tmp%13#0' with 'load awst_tmp%13#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@4.ops[6]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@4.ops[8]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@4.ops[2]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@4.ops[5]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted check_winner_after_for@8.ops[1]: 'store range_item%20#0 to l-stack (copy)'
debug: Replaced check_winner_after_for@8.ops[3]: 'load range_item%20#0' with 'load range_item%20#0 from l-stack (no copy)'
debug: Inserted check_winner_for_header@9.ops[3]: 'store continue_looping%21#0 to l-stack (copy)'
debug: Replaced check_winner_for_header@9.ops[5]: 'load continue_looping%21#0' with 'load continue_looping%21#0 from l-stack (no copy)'
debug: Inserted check_winner_for_body@10.ops[9]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced check_winner_for_body@10.ops[11]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted check_winner_for_body@10.ops[14]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced check_winner_for_body@10.ops[16]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted check_winner_for_body@10.ops[2]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced check_winner_for_body@10.ops[6]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@11.ops[2]: 'store tmp%36#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@11.ops[4]: 'load tmp%36#0' with 'load tmp%36#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@11.ops[12]: 'store tmp%41#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@11.ops[14]: 'load tmp%41#0' with 'load tmp%41#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@11.ops[8]: 'store awst_tmp%40#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@11.ops[11]: 'load awst_tmp%40#0' with 'load awst_tmp%40#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@12.ops[2]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@12.ops[4]: 'load tmp%43#0' with 'load tmp%43#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@12.ops[12]: 'store tmp%48#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@12.ops[14]: 'load tmp%48#0' with 'load tmp%48#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@12.ops[8]: 'store tmp%47#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@12.ops[11]: 'load tmp%47#0' with 'load tmp%47#0 from l-stack (no copy)'
debug: Inserted check_winner_after_if_else@14.ops[3]: 'store range_item%20#0 to l-stack (copy)'
debug: Replaced check_winner_after_if_else@14.ops[5]: 'load range_item%20#0' with 'load range_item%20#0 from l-stack (no copy)'
debug: Inserted check_winner_after_for@17.ops[2]: 'store tmp%56#0 to l-stack (copy)'
debug: Replaced check_winner_after_for@17.ops[4]: 'load tmp%56#0' with 'load tmp%56#0 from l-stack (no copy)'
debug: Inserted check_winner_after_for@17.ops[6]: 'store tmp%58#0 to l-stack (copy)'
debug: Replaced check_winner_after_for@17.ops[8]: 'load tmp%58#0' with 'load tmp%58#0 from l-stack (no copy)'
debug: Inserted check_winner_after_for@17.ops[11]: 'store tmp%59#0 to l-stack (copy)'
debug: Replaced check_winner_after_for@17.ops[13]: 'load tmp%59#0' with 'load tmp%59#0 from l-stack (no copy)'
debug: Inserted check_winner_if_body@18.ops[2]: 'store tmp%61#0 to l-stack (copy)'
debug: Replaced check_winner_if_body@18.ops[4]: 'load tmp%61#0' with 'load tmp%61#0 from l-stack (no copy)'
debug: Inserted check_winner_if_body@18.ops[6]: 'store tmp%63#0 to l-stack (copy)'
debug: Replaced check_winner_if_body@18.ops[8]: 'load tmp%63#0' with 'load tmp%63#0 from l-stack (no copy)'
debug: Inserted check_winner_if_body@18.ops[11]: 'store tmp%68#0 to l-stack (copy)'
debug: Replaced check_winner_if_body@18.ops[13]: 'load tmp%68#0' with 'load tmp%68#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@19.ops[2]: 'store tmp%70#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@19.ops[4]: 'load tmp%70#0' with 'load tmp%70#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@19.ops[10]: 'store tmp%73#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@19.ops[12]: 'load tmp%73#0' with 'load tmp%73#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@19.ops[6]: 'store tmp%72#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@19.ops[9]: 'load tmp%72#0' with 'load tmp%72#0 from l-stack (no copy)'
debug: Inserted check_winner_else_body@21.ops[2]: 'store tmp%81#0 to l-stack (copy)'
debug: Replaced check_winner_else_body@21.ops[4]: 'load tmp%81#0' with 'load tmp%81#0 from l-stack (no copy)'
debug: Inserted check_winner_else_body@21.ops[7]: 'store tmp%86#0 to l-stack (copy)'
debug: Replaced check_winner_else_body@21.ops[9]: 'load tmp%86#0' with 'load tmp%86#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@22.ops[2]: 'store tmp%88#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@22.ops[4]: 'load tmp%88#0' with 'load tmp%88#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@22.ops[10]: 'store tmp%91#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@22.ops[12]: 'load tmp%91#0' with 'load tmp%91#0 from l-stack (no copy)'
debug: Inserted check_winner_and_contd@22.ops[6]: 'store tmp%90#0 to l-stack (copy)'
debug: Replaced check_winner_and_contd@22.ops[9]: 'load tmp%90#0' with 'load tmp%90#0 from l-stack (no copy)'
debug: Found 8 edge set/s for examples.tictactoe.tictactoe.TicTacToeContract.check_winner
debug: examples.tictactoe.tictactoe.TicTacToeContract.check_winner f-stack entry: ['awst_tmp%13#0', 'awst_tmp%40#0', 'row#0', 'tmp%27#0', 'tmp%58#0', 'tmp%61#0', 'tmp%63#0', 'tmp%8#0', 'tmp%81#0', 'col#0', 'continue_looping%21#0']
debug: examples.tictactoe.tictactoe.TicTacToeContract.check_winner f-stack on first store: ['g#0', 'item_index_internal%3#0']
debug: Inserted whose_turn_block@0.ops[10]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced whose_turn_block@0.ops[12]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted whose_turn_block@0.ops[3]: 'store turns_exists%1#0 to l-stack (copy)'
debug: Replaced whose_turn_block@0.ops[6]: 'load turns_exists%1#0' with 'load turns_exists%1#0 from l-stack (no copy)'
debug: Inserted whose_turn_block@0.ops[5]: 'store turns_value%0#0 to l-stack (copy)'
debug: Replaced whose_turn_block@0.ops[9]: 'load turns_value%0#0' with 'load turns_value%0#0 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.tictactoe.tictactoe.TicTacToeContract.whose_turn
debug: Allocated 1 variable/s to x-stack: ternary_result%3#0
debug: shared x-stack for whose_turn_ternary_true@1 -> whose_turn_ternary_merge@3: ternary_result%3#0
debug: shared x-stack for whose_turn_ternary_false@2 -> whose_turn_ternary_merge@3: ternary_result%3#0
debug: Inserted play_block@0.ops[10]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced play_block@0.ops[12]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted play_block@0.ops[24]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced play_block@0.ops[26]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted play_block@0.ops[29]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced play_block@0.ops[31]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted play_block@0.ops[3]: 'store winner_exists%1#0 to l-stack (copy)'
debug: Replaced play_block@0.ops[6]: 'load winner_exists%1#0' with 'load winner_exists%1#0 from l-stack (no copy)'
debug: Inserted play_block@0.ops[18]: 'store turns_exists%4#0 to l-stack (copy)'
debug: Replaced play_block@0.ops[21]: 'load turns_exists%4#0' with 'load turns_exists%4#0 from l-stack (no copy)'
debug: Inserted play_block@0.ops[5]: 'store winner_value%0#0 to l-stack (copy)'
debug: Replaced play_block@0.ops[9]: 'load winner_value%0#0' with 'load winner_value%0#0 from l-stack (no copy)'
debug: Inserted play_block@0.ops[21]: 'store turns_value%3#0 to l-stack (copy)'
debug: Replaced play_block@0.ops[25]: 'load turns_value%3#0' with 'load turns_value%3#0 from l-stack (no copy)'
debug: Inserted play_if_body@1.ops[12]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced play_if_body@1.ops[14]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted play_if_body@1.ops[3]: 'store host_exists%8#0 to l-stack (copy)'
debug: Replaced play_if_body@1.ops[6]: 'load host_exists%8#0' with 'load host_exists%8#0 from l-stack (no copy)'
debug: Inserted play_if_body@1.ops[9]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced play_if_body@1.ops[12]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted play_if_body@1.ops[5]: 'store host_value%7#0 to l-stack (copy)'
debug: Replaced play_if_body@1.ops[12]: 'load host_value%7#0' with 'load host_value%7#0 from l-stack (no copy)'
debug: Inserted play_else_body@2.ops[12]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced play_else_body@2.ops[14]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted play_else_body@2.ops[3]: 'store challenger_exists%12#0 to l-stack (copy)'
debug: Replaced play_else_body@2.ops[6]: 'load challenger_exists%12#0' with 'load challenger_exists%12#0 from l-stack (no copy)'
debug: Inserted play_else_body@2.ops[9]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced play_else_body@2.ops[12]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted play_else_body@2.ops[5]: 'store challenger_value%11#0 to l-stack (copy)'
debug: Replaced play_else_body@2.ops[12]: 'load challenger_value%11#0' with 'load challenger_value%11#0 from l-stack (no copy)'
debug: Inserted play_after_if_else@3.ops[3]: 'store game_exists%16#0 to l-stack (copy)'
debug: Replaced play_after_if_else@3.ops[6]: 'load game_exists%16#0' with 'load game_exists%16#0 from l-stack (no copy)'
debug: Inserted play_after_if_else@3.ops[11]: 'store winner_exists%18#0 to l-stack (copy)'
debug: Replaced play_after_if_else@3.ops[14]: 'load winner_exists%18#0' with 'load winner_exists%18#0 from l-stack (no copy)'
debug: Inserted play_after_if_else@3.ops[13]: 'store winner_value%17#0 to l-stack (copy)'
debug: Replaced play_after_if_else@3.ops[18]: 'load winner_value%17#0' with 'load winner_value%17#0 from l-stack (no copy)'
debug: Inserted play_after_if_else@3.ops[5]: 'store game_value%15#0 to l-stack (copy)'
debug: Replaced play_after_if_else@3.ops[18]: 'load game_value%15#0' with 'load game_value%15#0 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.tictactoe.tictactoe.TicTacToeContract.play
info: Writing tictactoe/out/TicTacToeContract.approval.teal
info: Writing tictactoe/out/TicTacToeContract.clear.teal
info: Writing tictactoe/out/TicTacToeContract.arc32.json
info: Writing tictactoe/out/client_TicTacToeContract.py