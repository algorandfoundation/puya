debug: PuyaOptions(paths=['tictactoe'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@0: // L39
debug: Terminated block@0: // L39
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Sealing block@0: // L84
debug: Terminated block@0: // L84
debug: Sealing block@None: // if_body_L106
debug: Sealing block@None: // else_body_L106
debug: Terminated block@1: // if_body_L106
debug: Sealing block@2: // after_if_else_L106
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L106
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L84
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L106
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L84
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L106
debug: Sealing block@None: // ternary_true_L110
debug: Sealing block@None: // ternary_false_L110
debug: Terminated block@3: // ternary_true_L110
debug: Terminated block@4: // ternary_false_L110
debug: Sealing block@5: // ternary_merge_L110
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L110
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L110
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L110
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L106
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L84
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@6: // for_header_L110
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@6: // for_header_L110
debug: Terminated block@6: // for_header_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@7: // for_body_L110
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L110
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L110
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L110
debug: Terminated block@7: // for_body_L110
debug: Sealing block@8: // for_footer_L110
debug: Terminated block@8: // for_footer_L110
debug: Sealing block@9: // for_increment_L110
debug: Terminated block@9: // for_increment_L110
debug: Sealing block@6: // for_header_L110
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5, range_item%0#3 <- block@9) in block@9: // for_increment_L110
debug: Sealing block@7: // for_body_L110
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L110
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L106
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L84
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L106
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L110
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L110
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L110
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L110
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L110
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L110
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L106
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L84
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L110
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L110
debug: Terminated block@10: // after_for_L110
debug: Sealing block@0: // L117
debug: Terminated block@0: // L117
debug: Sealing block@0: // L139
debug: Terminated block@0: // L139
debug: Sealing block@0: // L166
debug: Terminated block@0: // L166
debug: Sealing block@0: // L195
debug: Terminated block@0: // L195
debug: Sealing block@None: // if_body_L210
debug: Sealing block@None: // else_body_L210
debug: Terminated block@1: // if_body_L210
debug: Terminated block@2: // else_body_L210
debug: Sealing block@3: // after_if_else_L210
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L210
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@4: // for_header_L215
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@4: // for_header_L215
debug: Terminated block@4: // for_header_L215
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@5: // for_body_L215
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_body_L215
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@5: // for_body_L215
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_body_L215
debug: Terminated block@5: // for_body_L215
debug: Sealing block@6: // for_footer_L215
debug: Terminated block@6: // for_footer_L215
debug: Sealing block@7: // for_increment_L215
debug: Terminated block@7: // for_increment_L215
debug: Sealing block@4: // for_header_L215
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3) in block@3: // after_if_else_L210
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3, range_item%0#3 <- block@7) in block@7: // for_increment_L215
debug: Sealing block@5: // for_body_L215
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L210
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L210
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3) in block@3: // after_if_else_L210
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3, tail_cursor#3 <- block@7) in block@7: // for_increment_L215
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L215
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L210
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@7) in block@7: // for_increment_L215
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@4)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L210
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@7) in block@7: // for_increment_L215
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L215
debug: Terminated block@8: // after_for_L215
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@None: // if_body_L22
debug: Sealing block@None: // else_body_L22
debug: Terminated block@1: // if_body_L22
debug: Sealing block@None: // if_body_L23
debug: Sealing block@None: // else_body_L23
debug: Terminated block@2: // if_body_L23
debug: Sealing block@3: // after_if_else_L23
debug: Terminated block@3: // after_if_else_L23
debug: Sealing block@4: // after_if_else_L22
debug: Created Phi assignment: let move.0#1: uint64 = undefined while trying to resolve 'move.0' in block@4: // after_if_else_L22
debug: Added move.0#0 to Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@0) in block@0: // L20
debug: Created Phi assignment: let move.0#2: uint64 = undefined while trying to resolve 'move.0' in block@3: // after_if_else_L23
debug: Added move.0#0 to Phi node: let move.0#2: uint64 = φ(move.0#0 <- block@1) in block@1: // if_body_L22
debug: Added move.0#0 to Phi node: let move.0#2: uint64 = φ(move.0#0 <- block@1, move.0#0 <- block@2) in block@2: // if_body_L23
debug: Replacing trivial Phi node: let move.0#2: uint64 = φ(move.0#0 <- block@1, move.0#0 <- block@2) (move.0#2) with move.0#0
debug: Deleting Phi assignment: let move.0#2: uint64 = φ(move.0#0 <- block@1, move.0#0 <- block@2)
debug: Replaced trivial Phi node: let move.0#2: uint64 = φ(move.0#0 <- block@1, move.0#0 <- block@2) (move.0#2) with move.0#0 in current definition for 1 blocks
debug: Added move.0#0 to Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@0, move.0#0 <- block@3) in block@3: // after_if_else_L23
debug: Replacing trivial Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@0, move.0#0 <- block@3) (move.0#1) with move.0#0
debug: Deleting Phi assignment: let move.0#1: uint64 = φ(move.0#0 <- block@0, move.0#0 <- block@3)
debug: Replaced trivial Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@0, move.0#0 <- block@3) (move.0#1) with move.0#0 in current definition for 1 blocks
debug: Created Phi assignment: let move.1#1: uint64 = undefined while trying to resolve 'move.1' in block@4: // after_if_else_L22
debug: Added move.1#0 to Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@0) in block@0: // L20
debug: Created Phi assignment: let move.1#2: uint64 = undefined while trying to resolve 'move.1' in block@3: // after_if_else_L23
debug: Added move.1#0 to Phi node: let move.1#2: uint64 = φ(move.1#0 <- block@1) in block@1: // if_body_L22
debug: Added move.1#0 to Phi node: let move.1#2: uint64 = φ(move.1#0 <- block@1, move.1#0 <- block@2) in block@2: // if_body_L23
debug: Replacing trivial Phi node: let move.1#2: uint64 = φ(move.1#0 <- block@1, move.1#0 <- block@2) (move.1#2) with move.1#0
debug: Deleting Phi assignment: let move.1#2: uint64 = φ(move.1#0 <- block@1, move.1#0 <- block@2)
debug: Replaced trivial Phi node: let move.1#2: uint64 = φ(move.1#0 <- block@1, move.1#0 <- block@2) (move.1#2) with move.1#0 in current definition for 1 blocks
debug: Added move.1#0 to Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@0, move.1#0 <- block@3) in block@3: // after_if_else_L23
debug: Replacing trivial Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@0, move.1#0 <- block@3) (move.1#1) with move.1#0
debug: Deleting Phi assignment: let move.1#1: uint64 = φ(move.1#0 <- block@0, move.1#0 <- block@3)
debug: Replaced trivial Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@0, move.1#0 <- block@3) (move.1#1) with move.1#0 in current definition for 1 blocks
debug: Terminated block@4: // after_if_else_L22
debug: Sealing block@None: // and_contd_L33
debug: Terminated block@5: // and_contd_L33
debug: Sealing block@None: // bool_true_L33
debug: Sealing block@None: // bool_false_L33
debug: Terminated block@6: // bool_true_L33
debug: Terminated block@7: // bool_false_L33
debug: Sealing block@8: // bool_merge_L33
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@8: // bool_merge_L33
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@6) in block@6: // bool_true_L33
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@6, and_result%0#1 <- block@7) in block@7: // bool_false_L33
debug: Created Phi assignment: let row#1: uint64 = undefined while trying to resolve 'row' in block@8: // bool_merge_L33
debug: Added row#0 to Phi node: let row#1: uint64 = φ(row#0 <- block@6) in block@6: // bool_true_L33
debug: Created Phi assignment: let row#2: uint64 = undefined while trying to resolve 'row' in block@7: // bool_false_L33
debug: Added row#0 to Phi node: let row#2: uint64 = φ(row#0 <- block@4) in block@4: // after_if_else_L22
debug: Added row#0 to Phi node: let row#2: uint64 = φ(row#0 <- block@4, row#0 <- block@5) in block@5: // and_contd_L33
debug: Replacing trivial Phi node: let row#2: uint64 = φ(row#0 <- block@4, row#0 <- block@5) (row#2) with row#0
debug: Deleting Phi assignment: let row#2: uint64 = φ(row#0 <- block@4, row#0 <- block@5)
debug: Replaced trivial Phi node: let row#2: uint64 = φ(row#0 <- block@4, row#0 <- block@5) (row#2) with row#0 in current definition for 1 blocks
debug: Added row#0 to Phi node: let row#1: uint64 = φ(row#0 <- block@6, row#0 <- block@7) in block@7: // bool_false_L33
debug: Replacing trivial Phi node: let row#1: uint64 = φ(row#0 <- block@6, row#0 <- block@7) (row#1) with row#0
debug: Deleting Phi assignment: let row#1: uint64 = φ(row#0 <- block@6, row#0 <- block@7)
debug: Replaced trivial Phi node: let row#1: uint64 = φ(row#0 <- block@6, row#0 <- block@7) (row#1) with row#0 in current definition for 1 blocks
debug: Created Phi assignment: let column#1: uint64 = undefined while trying to resolve 'column' in block@8: // bool_merge_L33
debug: Added column#0 to Phi node: let column#1: uint64 = φ(column#0 <- block@6) in block@6: // bool_true_L33
debug: Created Phi assignment: let column#2: uint64 = undefined while trying to resolve 'column' in block@7: // bool_false_L33
debug: Added column#0 to Phi node: let column#2: uint64 = φ(column#0 <- block@4) in block@4: // after_if_else_L22
debug: Added column#0 to Phi node: let column#2: uint64 = φ(column#0 <- block@4, column#0 <- block@5) in block@5: // and_contd_L33
debug: Replacing trivial Phi node: let column#2: uint64 = φ(column#0 <- block@4, column#0 <- block@5) (column#2) with column#0
debug: Deleting Phi assignment: let column#2: uint64 = φ(column#0 <- block@4, column#0 <- block@5)
debug: Replaced trivial Phi node: let column#2: uint64 = φ(column#0 <- block@4, column#0 <- block@5) (column#2) with column#0 in current definition for 1 blocks
debug: Added column#0 to Phi node: let column#1: uint64 = φ(column#0 <- block@6, column#0 <- block@7) in block@7: // bool_false_L33
debug: Replacing trivial Phi node: let column#1: uint64 = φ(column#0 <- block@6, column#0 <- block@7) (column#1) with column#0
debug: Deleting Phi assignment: let column#1: uint64 = φ(column#0 <- block@6, column#0 <- block@7)
debug: Replaced trivial Phi node: let column#1: uint64 = φ(column#0 <- block@6, column#0 <- block@7) (column#1) with column#0 in current definition for 1 blocks
debug: Terminated block@8: // bool_merge_L33
debug: Sealing block@0: // L37
debug: Terminated block@0: // L37
debug: Sealing block@0: // L60
debug: Terminated block@0: // L60
debug: Sealing block@None: // and_contd_L63
debug: Terminated block@1: // and_contd_L63
debug: Sealing block@None: // bool_true_L63
debug: Sealing block@None: // bool_false_L63
debug: Terminated block@2: // bool_true_L63
debug: Terminated block@3: // bool_false_L63
debug: Sealing block@4: // bool_merge_L63
debug: Created Phi assignment: let and_result%0#2: bool = undefined while trying to resolve 'and_result%0' in block@4: // bool_merge_L63
debug: Added and_result%0#0 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@2) in block@2: // bool_true_L63
debug: Added and_result%0#1 to Phi node: let and_result%0#2: bool = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3) in block@3: // bool_false_L63
debug: Created Phi assignment: let column#1: uint64 = undefined while trying to resolve 'column' in block@4: // bool_merge_L63
debug: Added column#0 to Phi node: let column#1: uint64 = φ(column#0 <- block@2) in block@2: // bool_true_L63
debug: Created Phi assignment: let column#2: uint64 = undefined while trying to resolve 'column' in block@3: // bool_false_L63
debug: Added column#0 to Phi node: let column#2: uint64 = φ(column#0 <- block@0) in block@0: // L60
debug: Added column#0 to Phi node: let column#2: uint64 = φ(column#0 <- block@0, column#0 <- block@1) in block@1: // and_contd_L63
debug: Replacing trivial Phi node: let column#2: uint64 = φ(column#0 <- block@0, column#0 <- block@1) (column#2) with column#0
debug: Deleting Phi assignment: let column#2: uint64 = φ(column#0 <- block@0, column#0 <- block@1)
debug: Replaced trivial Phi node: let column#2: uint64 = φ(column#0 <- block@0, column#0 <- block@1) (column#2) with column#0 in current definition for 1 blocks
debug: Added column#0 to Phi node: let column#1: uint64 = φ(column#0 <- block@2, column#0 <- block@3) in block@3: // bool_false_L63
debug: Replacing trivial Phi node: let column#1: uint64 = φ(column#0 <- block@2, column#0 <- block@3) (column#1) with column#0
debug: Deleting Phi assignment: let column#1: uint64 = φ(column#0 <- block@2, column#0 <- block@3)
debug: Replaced trivial Phi node: let column#1: uint64 = φ(column#0 <- block@2, column#0 <- block@3) (column#1) with column#0 in current definition for 1 blocks
debug: Created Phi assignment: let row#1: uint64 = undefined while trying to resolve 'row' in block@4: // bool_merge_L63
debug: Added row#0 to Phi node: let row#1: uint64 = φ(row#0 <- block@2) in block@2: // bool_true_L63
debug: Created Phi assignment: let row#2: uint64 = undefined while trying to resolve 'row' in block@3: // bool_false_L63
debug: Added row#0 to Phi node: let row#2: uint64 = φ(row#0 <- block@0) in block@0: // L60
debug: Added row#0 to Phi node: let row#2: uint64 = φ(row#0 <- block@0, row#0 <- block@1) in block@1: // and_contd_L63
debug: Replacing trivial Phi node: let row#2: uint64 = φ(row#0 <- block@0, row#0 <- block@1) (row#2) with row#0
debug: Deleting Phi assignment: let row#2: uint64 = φ(row#0 <- block@0, row#0 <- block@1)
debug: Replaced trivial Phi node: let row#2: uint64 = φ(row#0 <- block@0, row#0 <- block@1) (row#2) with row#0 in current definition for 1 blocks
debug: Added row#0 to Phi node: let row#1: uint64 = φ(row#0 <- block@2, row#0 <- block@3) in block@3: // bool_false_L63
debug: Replacing trivial Phi node: let row#1: uint64 = φ(row#0 <- block@2, row#0 <- block@3) (row#1) with row#0
debug: Deleting Phi assignment: let row#1: uint64 = φ(row#0 <- block@2, row#0 <- block@3)
debug: Replaced trivial Phi node: let row#1: uint64 = φ(row#0 <- block@2, row#0 <- block@3) (row#1) with row#0 in current definition for 1 blocks
debug: Created Phi assignment: let player#1: bytes = undefined while trying to resolve 'player' in block@4: // bool_merge_L63
debug: Added player#0 to Phi node: let player#1: bytes = φ(player#0 <- block@2) in block@2: // bool_true_L63
debug: Created Phi assignment: let player#2: bytes = undefined while trying to resolve 'player' in block@3: // bool_false_L63
debug: Added player#0 to Phi node: let player#2: bytes = φ(player#0 <- block@0) in block@0: // L60
debug: Added player#0 to Phi node: let player#2: bytes = φ(player#0 <- block@0, player#0 <- block@1) in block@1: // and_contd_L63
debug: Replacing trivial Phi node: let player#2: bytes = φ(player#0 <- block@0, player#0 <- block@1) (player#2) with player#0
debug: Deleting Phi assignment: let player#2: bytes = φ(player#0 <- block@0, player#0 <- block@1)
debug: Replaced trivial Phi node: let player#2: bytes = φ(player#0 <- block@0, player#0 <- block@1) (player#2) with player#0 in current definition for 1 blocks
debug: Added player#0 to Phi node: let player#1: bytes = φ(player#0 <- block@2, player#0 <- block@3) in block@3: // bool_false_L63
debug: Replacing trivial Phi node: let player#1: bytes = φ(player#0 <- block@2, player#0 <- block@3) (player#1) with player#0
debug: Deleting Phi assignment: let player#1: bytes = φ(player#0 <- block@2, player#0 <- block@3)
debug: Replaced trivial Phi node: let player#1: bytes = φ(player#0 <- block@2, player#0 <- block@3) (player#1) with player#0 in current definition for 1 blocks
debug: Terminated block@4: // bool_merge_L63
debug: Sealing block@None: // if_body_L67
debug: Sealing block@None: // else_body_L67
debug: Terminated block@5: // if_body_L67
debug: Terminated block@6: // else_body_L67
debug: Sealing block@None: // if_body_L69
debug: Sealing block@None: // else_body_L69
debug: Terminated block@7: // if_body_L69
debug: Sealing block@8: // after_if_else_L69
debug: Terminated block@8: // after_if_else_L69
debug: Sealing block@9: // after_if_else_L67
debug: Terminated block@9: // after_if_else_L67
debug: Sealing block@0: // L72
debug: Terminated block@0: // L72
debug: Sealing block@None: // and_contd_L76
debug: Terminated block@1: // and_contd_L76
debug: Sealing block@None: // if_body_L76
debug: Sealing block@None: // else_body_L76
debug: Terminated block@2: // if_body_L76
debug: Sealing block@3: // after_if_else_L76
debug: Created Phi assignment: let column#1: uint64 = undefined while trying to resolve 'column' in block@3: // after_if_else_L76
debug: Added column#0 to Phi node: let column#1: uint64 = φ(column#0 <- block@0) in block@0: // L72
debug: Added column#0 to Phi node: let column#1: uint64 = φ(column#0 <- block@0, column#0 <- block@1) in block@1: // and_contd_L76
debug: Replacing trivial Phi node: let column#1: uint64 = φ(column#0 <- block@0, column#0 <- block@1) (column#1) with column#0
debug: Deleting Phi assignment: let column#1: uint64 = φ(column#0 <- block@0, column#0 <- block@1)
debug: Replaced trivial Phi node: let column#1: uint64 = φ(column#0 <- block@0, column#0 <- block@1) (column#1) with column#0 in current definition for 1 blocks
debug: Created Phi assignment: let g#1: bytes = undefined while trying to resolve 'g' in block@3: // after_if_else_L76
debug: Added g#0 to Phi node: let g#1: bytes = φ(g#0 <- block@0) in block@0: // L72
debug: Added g#0 to Phi node: let g#1: bytes = φ(g#0 <- block@0, g#0 <- block@1) in block@1: // and_contd_L76
debug: Replacing trivial Phi node: let g#1: bytes = φ(g#0 <- block@0, g#0 <- block@1) (g#1) with g#0
debug: Deleting Phi assignment: let g#1: bytes = φ(g#0 <- block@0, g#0 <- block@1)
debug: Replaced trivial Phi node: let g#1: bytes = φ(g#0 <- block@0, g#0 <- block@1) (g#1) with g#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L76
debug: Sealing block@None: // and_contd_L79
debug: Terminated block@4: // and_contd_L79
debug: Sealing block@None: // if_body_L79
debug: Sealing block@None: // else_body_L79
debug: Terminated block@5: // if_body_L79
debug: Sealing block@6: // after_if_else_L79
debug: Created Phi assignment: let player#1: bytes = undefined while trying to resolve 'player' in block@6: // after_if_else_L79
debug: Created Phi assignment: let player#2: bytes = undefined while trying to resolve 'player' in block@3: // after_if_else_L76
debug: Added player#0 to Phi node: let player#2: bytes = φ(player#0 <- block@0) in block@0: // L72
debug: Added player#0 to Phi node: let player#2: bytes = φ(player#0 <- block@0, player#0 <- block@1) in block@1: // and_contd_L76
debug: Replacing trivial Phi node: let player#2: bytes = φ(player#0 <- block@0, player#0 <- block@1) (player#2) with player#0
debug: Deleting Phi assignment: let player#2: bytes = φ(player#0 <- block@0, player#0 <- block@1)
debug: Replaced trivial Phi node: let player#2: bytes = φ(player#0 <- block@0, player#0 <- block@1) (player#2) with player#0 in current definition for 1 blocks
debug: Added player#0 to Phi node: let player#1: bytes = φ(player#0 <- block@3) in block@3: // after_if_else_L76
debug: Added player#0 to Phi node: let player#1: bytes = φ(player#0 <- block@3, player#0 <- block@4) in block@4: // and_contd_L79
debug: Replacing trivial Phi node: let player#1: bytes = φ(player#0 <- block@3, player#0 <- block@4) (player#1) with player#0
debug: Deleting Phi assignment: let player#1: bytes = φ(player#0 <- block@3, player#0 <- block@4)
debug: Replaced trivial Phi node: let player#1: bytes = φ(player#0 <- block@3, player#0 <- block@4) (player#1) with player#0 in current definition for 1 blocks
debug: Created Phi assignment: let g#2: bytes = undefined while trying to resolve 'g' in block@6: // after_if_else_L79
debug: Added g#0 to Phi node: let g#2: bytes = φ(g#0 <- block@3) in block@3: // after_if_else_L76
debug: Added g#0 to Phi node: let g#2: bytes = φ(g#0 <- block@3, g#0 <- block@4) in block@4: // and_contd_L79
debug: Replacing trivial Phi node: let g#2: bytes = φ(g#0 <- block@3, g#0 <- block@4) (g#2) with g#0
debug: Deleting Phi assignment: let g#2: bytes = φ(g#0 <- block@3, g#0 <- block@4)
debug: Replaced trivial Phi node: let g#2: bytes = φ(g#0 <- block@3, g#0 <- block@4) (g#2) with g#0 in current definition for 1 blocks
debug: Terminated block@6: // after_if_else_L79
debug: Sealing block@None: // if_body_L82
debug: Sealing block@None: // else_body_L82
debug: Terminated block@7: // if_body_L82
debug: Sealing block@None: // and_contd_L84
debug: Terminated block@8: // and_contd_L84
debug: Sealing block@None: // if_body_L84
debug: Sealing block@None: // else_body_L84
debug: Terminated block@9: // if_body_L84
debug: Sealing block@10: // after_if_else_L84
debug: Created Phi assignment: let g#3: bytes = undefined while trying to resolve 'g' in block@10: // after_if_else_L84
debug: Added g#0 to Phi node: let g#3: bytes = φ(g#0 <- block@7) in block@7: // if_body_L82
debug: Added g#0 to Phi node: let g#3: bytes = φ(g#0 <- block@7, g#0 <- block@8) in block@8: // and_contd_L84
debug: Replacing trivial Phi node: let g#3: bytes = φ(g#0 <- block@7, g#0 <- block@8) (g#3) with g#0
debug: Deleting Phi assignment: let g#3: bytes = φ(g#0 <- block@7, g#0 <- block@8)
debug: Replaced trivial Phi node: let g#3: bytes = φ(g#0 <- block@7, g#0 <- block@8) (g#3) with g#0 in current definition for 1 blocks
debug: Created Phi assignment: let player#3: bytes = undefined while trying to resolve 'player' in block@10: // after_if_else_L84
debug: Added player#0 to Phi node: let player#3: bytes = φ(player#0 <- block@7) in block@7: // if_body_L82
debug: Added player#0 to Phi node: let player#3: bytes = φ(player#0 <- block@7, player#0 <- block@8) in block@8: // and_contd_L84
debug: Replacing trivial Phi node: let player#3: bytes = φ(player#0 <- block@7, player#0 <- block@8) (player#3) with player#0
debug: Deleting Phi assignment: let player#3: bytes = φ(player#0 <- block@7, player#0 <- block@8)
debug: Replaced trivial Phi node: let player#3: bytes = φ(player#0 <- block@7, player#0 <- block@8) (player#3) with player#0 in current definition for 1 blocks
debug: Terminated block@10: // after_if_else_L84
debug: Sealing block@None: // and_contd_L86
debug: Terminated block@11: // and_contd_L86
debug: Sealing block@None: // if_body_L86
debug: Sealing block@None: // else_body_L86
debug: Terminated block@12: // if_body_L86
debug: Sealing block@13: // after_if_else_L86
debug: Terminated block@13: // after_if_else_L86
debug: Sealing block@14: // after_if_else_L82
debug: Terminated block@14: // after_if_else_L82
debug: Sealing block@0: // L43
debug: Terminated block@0: // L43
debug: Sealing block@None: // ternary_true_L45
debug: Sealing block@None: // ternary_false_L45
debug: Terminated block@1: // ternary_true_L45
debug: Terminated block@2: // ternary_false_L45
debug: Sealing block@3: // ternary_merge_L45
debug: Created Phi assignment: let ternary_result%0#2: bytes = undefined while trying to resolve 'ternary_result%0' in block@3: // ternary_merge_L45
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@1) in block@1: // ternary_true_L45
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2: // ternary_false_L45
debug: Terminated block@3: // ternary_merge_L45
debug: Sealing block@0: // L47
debug: Terminated block@0: // L47
debug: Sealing block@None: // if_body_L50
debug: Sealing block@None: // else_body_L50
debug: Terminated block@1: // if_body_L50
debug: Terminated block@2: // else_body_L50
debug: Sealing block@3: // after_if_else_L50
debug: Created Phi assignment: let player#2: bytes = undefined while trying to resolve 'player' in block@3: // after_if_else_L50
debug: Added player#0 to Phi node: let player#2: bytes = φ(player#0 <- block@1) in block@1: // if_body_L50
debug: Added player#1 to Phi node: let player#2: bytes = φ(player#0 <- block@1, player#1 <- block@2) in block@2: // else_body_L50
debug: Created Phi assignment: let move.0#1: uint64 = undefined while trying to resolve 'move.0' in block@3: // after_if_else_L50
debug: Added move.0#0 to Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@1) in block@1: // if_body_L50
debug: Added move.0#0 to Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@1, move.0#0 <- block@2) in block@2: // else_body_L50
debug: Replacing trivial Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@1, move.0#0 <- block@2) (move.0#1) with move.0#0
debug: Deleting Phi assignment: let move.0#1: uint64 = φ(move.0#0 <- block@1, move.0#0 <- block@2)
debug: Replaced trivial Phi node: let move.0#1: uint64 = φ(move.0#0 <- block@1, move.0#0 <- block@2) (move.0#1) with move.0#0 in current definition for 1 blocks
debug: Created Phi assignment: let move.1#1: uint64 = undefined while trying to resolve 'move.1' in block@3: // after_if_else_L50
debug: Added move.1#0 to Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@1) in block@1: // if_body_L50
debug: Added move.1#0 to Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@1, move.1#0 <- block@2) in block@2: // else_body_L50
debug: Replacing trivial Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@1, move.1#0 <- block@2) (move.1#1) with move.1#0
debug: Deleting Phi assignment: let move.1#1: uint64 = φ(move.1#0 <- block@1, move.1#0 <- block@2)
debug: Replaced trivial Phi node: let move.1#1: uint64 = φ(move.1#0 <- block@1, move.1#0 <- block@2) (move.1#1) with move.1#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L50
debug: Sealing block@0: // L15
debug: Terminated block@0: // L15
debug: Sealing block@None: // switch_case_default_L15
debug: Sealing block@None: // new_game_route_L20
debug: Sealing block@None: // join_game_route_L37
debug: Sealing block@None: // whose_turn_route_L43
debug: Sealing block@None: // play_route_L47
debug: Terminated block@1: // new_game_route_L20
debug: Terminated block@2: // join_game_route_L37
debug: Terminated block@3: // whose_turn_route_L43
debug: Terminated block@4: // play_route_L47
debug: Terminated block@5: // switch_case_default_L15
debug: Sealing block@6: // switch_case_next_L15
debug: Terminated block@6: // switch_case_next_L15
debug: Sealing block@0: // L15
debug: Terminated block@0: // L15
debug: Output IR to tictactoe/out/TicTacToeContract.ssa.ir
info: Optimizing examples.tictactoe.tictactoe.TicTacToeContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: item0%0#0, awst_tmp%0#0
debug: Replacing {awst_tmp%0#0} with item0%0#0 made 1 modifications
debug: Found equivalence set: item1%0#0, awst_tmp%1#0
debug: Replacing {awst_tmp%1#0} with item1%0#0 made 1 modifications
debug: Found equivalence set: item0%1#0, awst_tmp%2#0
debug: Replacing {awst_tmp%2#0} with item0%1#0 made 1 modifications
debug: Found equivalence set: item1%1#0, awst_tmp%3#0
debug: Replacing {awst_tmp%3#0} with item1%1#0 made 1 modifications
debug: Found equivalence set: item0%2#0, awst_tmp%4#0
debug: Replacing {awst_tmp%4#0} with item0%2#0 made 1 modifications
debug: Found equivalence set: item1%2#0, awst_tmp%5#0
debug: Replacing {awst_tmp%5#0} with item1%2#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%1#0 NoOp) to (! tmp%1#0)
debug: Simplified (extract3 tmp%3#0 0u 8u) // on error: Index access is out of bounds to ((extract 0 8) tmp%3#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%3#0 8u 8u) // on error: Index access is out of bounds to ((extract 8 8) tmp%3#0) // on error: Index access is out of bounds
debug: Simplified (== tmp%6#0 NoOp) to (! tmp%6#0)
debug: Simplified (extract3 tmp%9#0 0u 8u) // on error: Index access is out of bounds to ((extract 0 8) tmp%9#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%9#0 8u 8u) // on error: Index access is out of bounds to ((extract 8 8) tmp%9#0) // on error: Index access is out of bounds
debug: Simplified (== tmp%12#0 NoOp) to (! tmp%12#0)
debug: Simplified (== tmp%17#0 NoOp) to (! tmp%17#0)
debug: Simplified (extract3 tmp%20#0 0u 8u) // on error: Index access is out of bounds to ((extract 0 8) tmp%20#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%20#0 8u 8u) // on error: Index access is out of bounds to ((extract 8 8) tmp%20#0) // on error: Index access is out of bounds
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: inlining the default target of a switch/goto nth
debug: adding block@0: // L15 as a predecessor of block@6: // switch_case_next_L15 due to inlining of block@5: // switch_case_default_L15
debug: simplified terminator of block@0: // L15 from switch tmp%0#0 {method "new_game((uint64,uint64))void" => block@1, method "join_game((uint64,uint64))void" => block@2, method "whose_turn()uint8" => block@3, method "play((uint64,uint64))void" => block@4, * => block@5} to switch tmp%0#0 {method "new_game((uint64,uint64))void" => block@1, method "join_game((uint64,uint64))void" => block@2, method "whose_turn()uint8" => block@3, method "play((uint64,uint64))void" => block@4, * => block@6}
debug: inlining the default target of a switch/goto nth
debug: simplified terminator of block@0: // L15 from switch tmp%0#0 {method "new_game((uint64,uint64))void" => block@1, method "join_game((uint64,uint64))void" => block@2, method "whose_turn()uint8" => block@3, method "play((uint64,uint64))void" => block@4, * => block@6} to switch tmp%0#0 {method "new_game((uint64,uint64))void" => block@1, method "join_game((uint64,uint64))void" => block@2, method "whose_turn()uint8" => block@3, method "play((uint64,uint64))void" => block@4, * => fail // reject transaction}
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@6: // switch_case_next_L15 into block@5: // switch_case_default_L15
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@5: // switch_case_default_L15
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.new_game
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: move.0#0, column#0
debug: Replacing {column#0} with move.0#0 made 3 modifications
debug: Found equivalence set: move.1#0, row#0
debug: Replacing {row#0} with move.1#0 made 4 modifications
debug: Found equivalence set: game_value%0#0, array_head_and_tail%0#0
debug: Replacing {array_head_and_tail%0#0} with game_value%0#0 made 1 modifications
debug: Found equivalence set: updated_target%0#0, assigned_value%1#0
debug: Replacing {assigned_value%1#0} with updated_target%0#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (* move.0#0 1u) to move.0#0
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable assigned_value%0#0
debug: Removing unused variable array_length%0#0
debug: Removing unused variable array_length%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let write_offset%1#0: uint64 = (* move.1#0 3u) with copy of existing registers [Register(ir_type=uint64, name='item_offset%0', version=0, source_location=tictactoe/tictactoe.py:34:8-22)]
debug: Replacing redundant declaration let index_is_in_bounds%0#0: bool = (< move.0#0 3u) with copy of existing registers [Register(ir_type=bool, name='tmp%0', version=0, source_location=tictactoe/tictactoe.py:33:15)]
debug: Found equivalence set: tmp%0#0, index_is_in_bounds%0#0
debug: Replacing {index_is_in_bounds%0#0} with tmp%0#0 made 1 modifications
debug: Found equivalence set: move.0#0, write_offset%0#0
debug: Replacing {write_offset%0#0} with move.0#0 made 1 modifications
debug: Found equivalence set: item_offset%0#0, write_offset%1#0
debug: Replacing {write_offset%1#0} with item_offset%0#0 made 1 modifications
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.join_game
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.make_move
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: move.0#0, column#0
debug: Replacing {column#0} with move.0#0 made 5 modifications
debug: Found equivalence set: move.1#0, row#0
debug: Replacing {row#0} with move.1#0 made 6 modifications
debug: Found equivalence set: game_value%0#0, array_head_and_tail%0#0
debug: Replacing {array_head_and_tail%0#0} with game_value%0#0 made 1 modifications
debug: Found equivalence set: tmp%2#0, array_head_and_tail%1#0
debug: Replacing {array_head_and_tail%1#0} with tmp%2#0 made 1 modifications
debug: Found equivalence set: game_value%1#0, array_head_and_tail%2#0
debug: Replacing {array_head_and_tail%2#0} with game_value%1#0 made 1 modifications
debug: Found equivalence set: player#0, assigned_value%0#0
debug: Replacing {assigned_value%0#0} with player#0 made 1 modifications
debug: Found equivalence set: updated_target%0#0, assigned_value%1#0
debug: Replacing {assigned_value%1#0} with updated_target%0#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (* move.0#0 1u) to move.0#0
debug: Simplified (* move.0#0 1u) to move.0#0
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable reinterpret_biguint%1#0
debug: Removing unused variable array_length%0#0
debug: Removing unused variable array_length%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@8: // after_if_else_L69
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let item_offset%2#0: uint64 = (* move.1#0 3u) with copy of existing registers [Register(ir_type=uint64, name='item_offset%0', version=0, source_location=tictactoe/tictactoe.py:64:15-29)]
debug: Replacing redundant declaration let write_offset%1#0: uint64 = (* move.1#0 3u) with copy of existing registers [Register(ir_type=uint64, name='item_offset%0', version=0, source_location=tictactoe/tictactoe.py:64:15-29)]
debug: Replacing redundant declaration let index_is_in_bounds%0#0: bool = (< move.0#0 3u) with copy of existing registers [Register(ir_type=bool, name='tmp%0', version=0, source_location=tictactoe/tictactoe.py:63:15)]
debug: Found equivalence set: move.0#0, item_offset%1#0, write_offset%0#0
debug: Replacing {item_offset%1#0, write_offset%0#0} with move.0#0 made 2 modifications
debug: Found equivalence set: item_offset%0#0, item_offset%2#0, write_offset%1#0
debug: Replacing {item_offset%2#0, write_offset%1#0} with item_offset%0#0 made 2 modifications
debug: Found equivalence set: tmp%0#0, index_is_in_bounds%0#0
debug: Replacing {index_is_in_bounds%0#0} with tmp%0#0 made 1 modifications
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.did_win
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: game_value%0#0, copy%0#0, g#0, array_head_and_tail%0#0, array_head_and_tail%2#0, array_head_and_tail%6#0, array_head_and_tail%8#0, array_head_and_tail%4#0, array_head_and_tail%12#0, array_head_and_tail%10#0, array_head_and_tail%14#0, array_head_and_tail%18#0, array_head_and_tail%16#0, array_head_and_tail%20#0
debug: Replacing {game_value%0#0, copy%0#0, array_head_and_tail%0#0, array_head_and_tail%2#0, array_head_and_tail%6#0, array_head_and_tail%8#0, array_head_and_tail%4#0, array_head_and_tail%12#0, array_head_and_tail%10#0, array_head_and_tail%14#0, array_head_and_tail%18#0, array_head_and_tail%16#0, array_head_and_tail%20#0} with g#0 made 12 modifications
debug: Found equivalence set: tmp%0#0, array_head_and_tail%1#0
debug: Replacing {array_head_and_tail%1#0} with tmp%0#0 made 1 modifications
debug: Found equivalence set: tmp%1#0, array_head_and_tail%3#0
debug: Replacing {array_head_and_tail%3#0} with tmp%1#0 made 1 modifications
debug: Found equivalence set: awst_tmp%0#0, reinterpret_biguint%1#0, reinterpret_biguint%2#0
debug: Replacing {reinterpret_biguint%1#0, reinterpret_biguint%2#0} with awst_tmp%0#0 made 2 modifications
debug: Found equivalence set: tmp%5#0, array_head_and_tail%7#0
debug: Replacing {array_head_and_tail%7#0} with tmp%5#0 made 1 modifications
debug: Found equivalence set: tmp%6#0, array_head_and_tail%9#0
debug: Replacing {array_head_and_tail%9#0} with tmp%6#0 made 1 modifications
debug: Found equivalence set: awst_tmp%1#0, reinterpret_biguint%5#0, reinterpret_biguint%6#0
debug: Replacing {reinterpret_biguint%5#0, reinterpret_biguint%6#0} with awst_tmp%1#0 made 2 modifications
debug: Found equivalence set: tmp%3#0, array_head_and_tail%5#0
debug: Replacing {array_head_and_tail%5#0} with tmp%3#0 made 1 modifications
debug: Found equivalence set: player#0, reinterpret_biguint%8#0, reinterpret_biguint%11#0, reinterpret_biguint%15#0, reinterpret_biguint%12#0, reinterpret_biguint%16#0
debug: Replacing {reinterpret_biguint%8#0, reinterpret_biguint%11#0, reinterpret_biguint%15#0, reinterpret_biguint%12#0, reinterpret_biguint%16#0} with player#0 made 5 modifications
debug: Found equivalence set: tmp%10#0, array_head_and_tail%13#0
debug: Replacing {array_head_and_tail%13#0} with tmp%10#0 made 1 modifications
debug: Found equivalence set: tmp%8#0, array_head_and_tail%11#0
debug: Replacing {array_head_and_tail%11#0} with tmp%8#0 made 1 modifications
debug: Found equivalence set: tmp%12#0, array_head_and_tail%15#0
debug: Replacing {array_head_and_tail%15#0} with tmp%12#0 made 1 modifications
debug: Found equivalence set: tmp%16#0, array_head_and_tail%19#0
debug: Replacing {array_head_and_tail%19#0} with tmp%16#0 made 1 modifications
debug: Found equivalence set: tmp%14#0, array_head_and_tail%17#0
debug: Replacing {array_head_and_tail%17#0} with tmp%14#0 made 1 modifications
debug: Found equivalence set: tmp%18#0, array_head_and_tail%21#0
debug: Replacing {array_head_and_tail%21#0} with tmp%18#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (* 0u 1u) to 0u
debug: Simplified (* 1u 1u) to 1u
debug: Simplified (* 2u 1u) to 2u
debug: Simplified (* 0u 3u) to 0u
debug: Simplified (* column#0 1u) to column#0
debug: Simplified (* 1u 3u) to 3u
debug: Simplified (* column#0 1u) to column#0
debug: Simplified (* 2u 3u) to 6u
debug: Simplified (* column#0 1u) to column#0
debug: Simplified (* 1u 3u) to 3u
debug: Simplified (* 1u 1u) to 1u
debug: Simplified (* 0u 3u) to 0u
debug: Simplified (* 0u 1u) to 0u
debug: Simplified (* 2u 3u) to 6u
debug: Simplified (* 2u 1u) to 2u
debug: Simplified (* 0u 3u) to 0u
debug: Simplified (* 2u 1u) to 2u
debug: Simplified (* 2u 3u) to 6u
debug: Simplified (* 0u 1u) to 0u
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@13: // after_if_else_L86
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let item_offset%2#0: uint64 = (* row#0 3u) with copy of existing registers [Register(ir_type=uint64, name='item_offset%0', version=0, source_location=tictactoe/tictactoe.py:76:11-17)]
debug: Replacing redundant declaration let item_offset%4#0: uint64 = (* row#0 3u) with copy of existing registers [Register(ir_type=uint64, name='item_offset%0', version=0, source_location=tictactoe/tictactoe.py:76:11-17)]
debug: Found equivalence set: item_offset%0#0, item_offset%2#0, item_offset%4#0
debug: Replacing {item_offset%2#0, item_offset%4#0} with item_offset%0#0 made 2 modifications
debug: Found equivalence set: column#0, item_offset%7#0, item_offset%9#0, item_offset%11#0
debug: Replacing {item_offset%7#0, item_offset%9#0, item_offset%11#0} with column#0 made 3 modifications
debug: Replacing redundant declaration let tmp%1#0: bytes = (extract3 g#0 item_offset%0#0 3u) // on error: Index access is out of bounds with copy of existing registers [Register(ir_type=bytes, name='tmp%0', version=0, source_location=tictactoe/tictactoe.py:76:11-17)]
debug: Replacing redundant declaration let tmp%3#0: bytes = (extract3 g#0 item_offset%0#0 3u) // on error: Index access is out of bounds with copy of existing registers [Register(ir_type=bytes, name='tmp%0', version=0, source_location=tictactoe/tictactoe.py:76:11-17)]
debug: Found equivalence set: tmp%0#0, tmp%1#0, tmp%3#0
debug: Replacing {tmp%1#0, tmp%3#0} with tmp%0#0 made 2 modifications
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.whose_turn
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.play
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to tictactoe/out/TicTacToeContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.new_game
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.join_game
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.make_move
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.did_win
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (extract3 tmp%0#0 0u 1u) // on error: Index access is out of bounds to ((extract 0 1) tmp%0#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%0#0 1u 1u) // on error: Index access is out of bounds to ((extract 1 1) tmp%0#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%0#0 2u 1u) // on error: Index access is out of bounds to ((extract 2 1) tmp%0#0) // on error: Index access is out of bounds
debug: Simplified (extract3 g#0 0u 3u) // on error: Index access is out of bounds to ((extract 0 3) g#0) // on error: Index access is out of bounds
debug: Simplified (extract3 g#0 3u 3u) // on error: Index access is out of bounds to ((extract 3 3) g#0) // on error: Index access is out of bounds
debug: Simplified (extract3 g#0 6u 3u) // on error: Index access is out of bounds to ((extract 6 3) g#0) // on error: Index access is out of bounds
debug: Simplified (extract3 g#0 3u 3u) // on error: Index access is out of bounds to ((extract 3 3) g#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%10#0 1u 1u) // on error: Index access is out of bounds to ((extract 1 1) tmp%10#0) // on error: Index access is out of bounds
debug: Simplified (extract3 g#0 0u 3u) // on error: Index access is out of bounds to ((extract 0 3) g#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%12#0 0u 1u) // on error: Index access is out of bounds to ((extract 0 1) tmp%12#0) // on error: Index access is out of bounds
debug: Simplified (extract3 g#0 6u 3u) // on error: Index access is out of bounds to ((extract 6 3) g#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%14#0 2u 1u) // on error: Index access is out of bounds to ((extract 2 1) tmp%14#0) // on error: Index access is out of bounds
debug: Simplified (extract3 g#0 0u 3u) // on error: Index access is out of bounds to ((extract 0 3) g#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%16#0 2u 1u) // on error: Index access is out of bounds to ((extract 2 1) tmp%16#0) // on error: Index access is out of bounds
debug: Simplified (extract3 g#0 6u 3u) // on error: Index access is out of bounds to ((extract 6 3) g#0) // on error: Index access is out of bounds
debug: Simplified (extract3 tmp%18#0 0u 1u) // on error: Index access is out of bounds to ((extract 0 1) tmp%18#0) // on error: Index access is out of bounds
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable item_offset%1#0
debug: Removing unused variable item_offset%3#0
debug: Removing unused variable item_offset%5#0
debug: Removing unused variable item_offset%6#0
debug: Removing unused variable item_offset%8#0
debug: Removing unused variable item_offset%10#0
debug: Removing unused variable item_offset%12#0
debug: Removing unused variable item_offset%13#0
debug: Removing unused variable item_offset%14#0
debug: Removing unused variable item_offset%15#0
debug: Removing unused variable item_offset%16#0
debug: Removing unused variable item_offset%17#0
debug: Removing unused variable item_offset%18#0
debug: Removing unused variable item_offset%19#0
debug: Removing unused variable item_offset%20#0
debug: Removing unused variable item_offset%21#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%10#0: bytes = ((extract 3 3) g#0) // on error: Index access is out of bounds with copy of existing registers [Register(ir_type=bytes, name='tmp%6', version=0, source_location=tictactoe/tictactoe.py:79:27-31)]
debug: Replacing redundant declaration let tmp%12#0: bytes = ((extract 0 3) g#0) // on error: Index access is out of bounds with copy of existing registers [Register(ir_type=bytes, name='tmp%5', version=0, source_location=tictactoe/tictactoe.py:79:11-15)]
debug: Replacing redundant declaration let tmp%16#0: bytes = ((extract 0 3) g#0) // on error: Index access is out of bounds with copy of existing registers [Register(ir_type=bytes, name='tmp%12', version=0, source_location=tictactoe/tictactoe.py:84:15-19)]
debug: Found equivalence set: tmp%6#0, tmp%10#0
debug: Replacing {tmp%10#0} with tmp%6#0 made 1 modifications
debug: Found equivalence set: tmp%5#0, tmp%12#0, tmp%16#0
debug: Replacing {tmp%12#0, tmp%16#0} with tmp%5#0 made 2 modifications
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.whose_turn
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.play
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to tictactoe/out/TicTacToeContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.new_game
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.join_game
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.make_move
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.did_win
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.whose_turn
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.play
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 3, ending loop
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.approval_program
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.new_game
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.join_game
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.make_move
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.did_win
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.whose_turn
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.play
debug: Removing Phis from examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.new_game using strategy RootOperandGrouping
debug: Coalescing and_result%0#0 with [and_result%0#5, and_result%0#1, and_result%0#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.join_game using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.make_move using strategy RootOperandGrouping
debug: Coalescing and_result%0#0 with [and_result%0#5, and_result%0#1, and_result%0#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.did_win using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.whose_turn using strategy RootOperandGrouping
debug: Coalescing ternary_result%0#0 with [ternary_result%0#5, ternary_result%0#1, ternary_result%0#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.play using strategy RootOperandGrouping
debug: Coalescing player#0 with [player#5, player#1, player#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.approval_program
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.new_game
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.join_game
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.make_move
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.did_win
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.whose_turn
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.play
debug: Sequentializing parallel copies in examples.tictactoe.tictactoe.TicTacToeContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to tictactoe/out/TicTacToeContract.destructured.ir
debug: Inserted main_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[7]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[3]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[5]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[7]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[10]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[12]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[23]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[26]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[13]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[16]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[15]: 'store item0%0#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[20]: 'load item0%0#0' with 'load item0%0#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[19]: 'store item1%0#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[24]: 'load item1%0#0' with 'load item1%0#0 from l-stack (no copy)'
debug: Inserted main_new_game_route@1.ops[23]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_new_game_route@1.ops[29]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[1]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[3]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[5]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[7]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[10]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[12]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[15]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[17]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[28]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[31]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[18]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[21]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[20]: 'store item0%1#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[25]: 'load item0%1#0' with 'load item0%1#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[24]: 'store item1%1#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[29]: 'load item1%1#0' with 'load item1%1#0 from l-stack (no copy)'
debug: Inserted main_join_game_route@2.ops[28]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_join_game_route@2.ops[34]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_whose_turn_route@3.ops[1]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_whose_turn_route@3.ops[3]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_whose_turn_route@3.ops[5]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_whose_turn_route@3.ops[7]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_whose_turn_route@3.ops[10]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_whose_turn_route@3.ops[12]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_whose_turn_route@3.ops[19]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_whose_turn_route@3.ops[21]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_whose_turn_route@3.ops[15]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_whose_turn_route@3.ops[18]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[1]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[3]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[5]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[7]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[10]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[12]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[15]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[17]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[28]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[31]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[18]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[21]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[20]: 'store item0%2#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[25]: 'load item0%2#0' with 'load item0%2#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[24]: 'store item1%2#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[29]: 'load item1%2#0' with 'load item1%2#0 from l-stack (no copy)'
debug: Inserted main_play_route@4.ops[28]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_play_route@4.ops[34]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Found 1 edge set/s for examples.tictactoe.tictactoe.TicTacToeContract.approval_program
debug: Inserted new_game_block@0.ops[1]: 'store reinterpret_bool%0#0 to l-stack (copy)'
debug: Replaced new_game_block@0.ops[3]: 'load reinterpret_bool%0#0' with 'load reinterpret_bool%0#0 from l-stack (no copy)'
debug: Inserted new_game_if_body@1.ops[3]: 'store challenger_exists%1#0 to l-stack (copy)'
debug: Replaced new_game_if_body@1.ops[6]: 'load challenger_exists%1#0' with 'load challenger_exists%1#0 from l-stack (no copy)'
debug: Inserted new_game_if_body@2.ops[3]: 'store winner_exists%1#0 to l-stack (copy)'
debug: Replaced new_game_if_body@2.ops[6]: 'load winner_exists%1#0' with 'load winner_exists%1#0 from l-stack (no copy)'
debug: Inserted new_game_after_if_else@4.ops[14]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced new_game_after_if_else@4.ops[16]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted new_game_after_if_else@4.ops[1]: 'store new_state_value%0#0 to l-stack (copy)'
debug: Replaced new_game_after_if_else@4.ops[4]: 'load new_state_value%0#0' with 'load new_state_value%0#0 from l-stack (no copy)'
debug: Inserted new_game_after_if_else@4.ops[8]: 'store new_state_value%1#0 to l-stack (copy)'
debug: Replaced new_game_after_if_else@4.ops[11]: 'load new_state_value%1#0' with 'load new_state_value%1#0 from l-stack (no copy)'
debug: Inserted new_game_and_contd@5.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced new_game_and_contd@5.ops[5]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@8.ops[35]: 'store index_is_in_bounds%1#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@8.ops[37]: 'load index_is_in_bounds%1#0' with 'load index_is_in_bounds%1#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@8.ops[5]: 'store game_exists%0#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@8.ops[8]: 'load game_exists%0#0' with 'load game_exists%0#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@8.ops[13]: 'store item_offset%0#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@8.ops[16]: 'load item_offset%0#0' with 'load item_offset%0#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@8.ops[30]: 'store game_exists%1#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@8.ops[33]: 'load game_exists%1#0' with 'load game_exists%1#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@8.ops[46]: 'store updated_target%1#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@8.ops[49]: 'load updated_target%1#0' with 'load updated_target%1#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@8.ops[19]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@8.ops[23]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@8.ops[7]: 'store game_value%0#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@8.ops[16]: 'load game_value%0#0' with 'load game_value%0#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@8.ops[34]: 'store game_value%1#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@8.ops[45]: 'load game_value%1#0' with 'load game_value%1#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@8.ops[28]: 'store updated_target%0#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@8.ops[48]: 'load updated_target%0#0' with 'load updated_target%0#0 from l-stack (no copy)'
debug: Inserted new_game_bool_merge@8.ops[18]: 'store item_offset%0#0 to l-stack (copy)'
debug: Replaced new_game_bool_merge@8.ops[48]: 'load item_offset%0#0' with 'load item_offset%0#0 from l-stack (no copy)'
debug: Found 4 edge set/s for examples.tictactoe.tictactoe.TicTacToeContract.new_game
debug: Allocated 1 variable/s to x-stack: and_result%0#0
debug: shared x-stack for new_game_bool_true@6 -> new_game_bool_merge@8: and_result%0#0
debug: shared x-stack for new_game_bool_false@7 -> new_game_bool_merge@8: and_result%0#0
debug: examples.tictactoe.tictactoe.TicTacToeContract.new_game f-stack entry: ['tmp%0#0']
debug: examples.tictactoe.tictactoe.TicTacToeContract.new_game f-stack on first store: []
debug: Inserted join_game_block@0.ops[7]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced join_game_block@0.ops[9]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted join_game_block@0.ops[3]: 'store challenger_exists%1#0 to l-stack (copy)'
debug: Replaced join_game_block@0.ops[6]: 'load challenger_exists%1#0' with 'load challenger_exists%1#0 from l-stack (no copy)'
debug: Inserted join_game_block@0.ops[13]: 'store new_state_value%0#0 to l-stack (copy)'
debug: Replaced join_game_block@0.ops[16]: 'load new_state_value%0#0' with 'load new_state_value%0#0 from l-stack (no copy)'
debug: Inserted make_move_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced make_move_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted make_move_and_contd@1.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced make_move_and_contd@1.ops[5]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[17]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[19]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[23]: 'store reinterpret_biguint%0#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[25]: 'load reinterpret_biguint%0#0' with 'load reinterpret_biguint%0#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[28]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[30]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[61]: 'store index_is_in_bounds%1#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[63]: 'load index_is_in_bounds%1#0' with 'load index_is_in_bounds%1#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[91]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[93]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[5]: 'store game_exists%0#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[8]: 'load game_exists%0#0' with 'load game_exists%0#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[13]: 'store item_offset%0#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[16]: 'load item_offset%0#0' with 'load item_offset%0#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[37]: 'store game_exists%1#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[40]: 'load game_exists%1#0' with 'load game_exists%1#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[57]: 'store game_exists%2#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[60]: 'load game_exists%2#0' with 'load game_exists%2#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[73]: 'store updated_target%1#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[76]: 'load updated_target%1#0' with 'load updated_target%1#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[81]: 'store turns_exists%0#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[84]: 'load turns_exists%0#0' with 'load turns_exists%0#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[89]: 'store new_state_value%0#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[92]: 'load new_state_value%0#0' with 'load new_state_value%0#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[39]: 'store game_value%1#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[43]: 'load game_value%1#0' with 'load game_value%1#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[47]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[51]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[85]: 'store turns_value%0#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[89]: 'load turns_value%0#0' with 'load turns_value%0#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[7]: 'store game_value%0#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[16]: 'load game_value%0#0' with 'load game_value%0#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[62]: 'store game_value%2#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[73]: 'load game_value%2#0' with 'load game_value%2#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[56]: 'store updated_target%0#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[76]: 'load updated_target%0#0' with 'load updated_target%0#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[18]: 'store item_offset%0#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[46]: 'load item_offset%0#0' with 'load item_offset%0#0 from l-stack (no copy)'
debug: Inserted make_move_bool_merge@4.ops[47]: 'store item_offset%0#0 to l-stack (copy)'
debug: Replaced make_move_bool_merge@4.ops[77]: 'load item_offset%0#0' with 'load item_offset%0#0 from l-stack (no copy)'
debug: Inserted make_move_else_body@6.ops[10]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced make_move_else_body@6.ops[12]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted make_move_else_body@6.ops[3]: 'store turns_exists%1#0 to l-stack (copy)'
debug: Replaced make_move_else_body@6.ops[6]: 'load turns_exists%1#0' with 'load turns_exists%1#0 from l-stack (no copy)'
debug: Inserted make_move_else_body@6.ops[5]: 'store turns_value%1#0 to l-stack (copy)'
debug: Replaced make_move_else_body@6.ops[9]: 'load turns_value%1#0' with 'load turns_value%1#0 from l-stack (no copy)'
debug: Found 4 edge set/s for examples.tictactoe.tictactoe.TicTacToeContract.make_move
debug: Allocated 1 variable/s to x-stack: and_result%0#0
debug: shared x-stack for make_move_bool_true@2 -> make_move_bool_merge@4: and_result%0#0
debug: shared x-stack for make_move_bool_false@3 -> make_move_bool_merge@4: and_result%0#0
debug: examples.tictactoe.tictactoe.TicTacToeContract.make_move f-stack entry: []
debug: examples.tictactoe.tictactoe.TicTacToeContract.make_move f-stack on first store: ['tmp%0#0']
debug: Inserted did_win_block@0.ops[15]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced did_win_block@0.ops[17]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted did_win_block@0.ops[26]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced did_win_block@0.ops[28]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted did_win_block@0.ops[3]: 'store game_exists%0#0 to l-stack (copy)'
debug: Replaced did_win_block@0.ops[6]: 'load game_exists%0#0' with 'load game_exists%0#0 from l-stack (no copy)'
debug: Inserted did_win_block@0.ops[11]: 'store item_offset%0#0 to l-stack (copy)'
debug: Replaced did_win_block@0.ops[14]: 'load item_offset%0#0' with 'load item_offset%0#0 from l-stack (no copy)'
debug: Inserted did_win_block@0.ops[24]: 'store awst_tmp%0#0 to l-stack (copy)'
debug: Replaced did_win_block@0.ops[27]: 'load awst_tmp%0#0' with 'load awst_tmp%0#0 from l-stack (no copy)'
debug: Inserted did_win_block@0.ops[20]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced did_win_block@0.ops[23]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted did_win_block@0.ops[22]: 'store reinterpret_biguint%0#0 to l-stack (copy)'
debug: Replaced did_win_block@0.ops[28]: 'load reinterpret_biguint%0#0' with 'load reinterpret_biguint%0#0 from l-stack (no copy)'
debug: Inserted did_win_block@0.ops[5]: 'store g#0 to l-stack (copy)'
debug: Replaced did_win_block@0.ops[14]: 'load g#0' with 'load g#0 from l-stack (no copy)'
debug: Inserted did_win_and_contd@1.ops[6]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced did_win_and_contd@1.ops[8]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted did_win_and_contd@1.ops[2]: 'store reinterpret_biguint%3#0 to l-stack (copy)'
debug: Replaced did_win_and_contd@1.ops[5]: 'load reinterpret_biguint%3#0' with 'load reinterpret_biguint%3#0 from l-stack (no copy)'
debug: Inserted did_win_after_if_else@3.ops[2]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced did_win_after_if_else@3.ops[4]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted did_win_after_if_else@3.ops[11]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced did_win_after_if_else@3.ops[13]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted did_win_after_if_else@3.ops[21]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced did_win_after_if_else@3.ops[23]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted did_win_after_if_else@3.ops[17]: 'store awst_tmp%1#0 to l-stack (copy)'
debug: Replaced did_win_after_if_else@3.ops[20]: 'load awst_tmp%1#0' with 'load awst_tmp%1#0 from l-stack (no copy)'
debug: Inserted did_win_after_if_else@3.ops[1]: 'store g#0 to l-stack (copy)'
debug: Replaced did_win_after_if_else@3.ops[10]: 'load g#0' with 'load g#0 from l-stack (no copy)'
debug: Inserted did_win_after_if_else@3.ops[9]: 'store reinterpret_biguint%4#0 to l-stack (copy)'
debug: Replaced did_win_after_if_else@3.ops[21]: 'load reinterpret_biguint%4#0' with 'load reinterpret_biguint%4#0 from l-stack (no copy)'
debug: Inserted did_win_and_contd@4.ops[2]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced did_win_and_contd@4.ops[4]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted did_win_and_contd@4.ops[12]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced did_win_and_contd@4.ops[14]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted did_win_and_contd@4.ops[8]: 'store reinterpret_biguint%7#0 to l-stack (copy)'
debug: Replaced did_win_and_contd@4.ops[11]: 'load reinterpret_biguint%7#0' with 'load reinterpret_biguint%7#0 from l-stack (no copy)'
debug: Inserted did_win_after_if_else@6.ops[6]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced did_win_after_if_else@6.ops[8]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted did_win_after_if_else@6.ops[2]: 'store reinterpret_biguint%9#0 to l-stack (copy)'
debug: Replaced did_win_after_if_else@6.ops[5]: 'load reinterpret_biguint%9#0' with 'load reinterpret_biguint%9#0 from l-stack (no copy)'
debug: Inserted did_win_if_body@7.ops[2]: 'store reinterpret_biguint%10#0 to l-stack (copy)'
debug: Replaced did_win_if_body@7.ops[4]: 'load reinterpret_biguint%10#0' with 'load reinterpret_biguint%10#0 from l-stack (no copy)'
debug: Inserted did_win_if_body@7.ops[7]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced did_win_if_body@7.ops[9]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted did_win_and_contd@8.ops[2]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced did_win_and_contd@8.ops[4]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted did_win_and_contd@8.ops[10]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced did_win_and_contd@8.ops[12]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted did_win_and_contd@8.ops[6]: 'store reinterpret_biguint%13#0 to l-stack (copy)'
debug: Replaced did_win_and_contd@8.ops[9]: 'load reinterpret_biguint%13#0' with 'load reinterpret_biguint%13#0 from l-stack (no copy)'
debug: Inserted did_win_after_if_else@10.ops[2]: 'store reinterpret_biguint%14#0 to l-stack (copy)'
debug: Replaced did_win_after_if_else@10.ops[4]: 'load reinterpret_biguint%14#0' with 'load reinterpret_biguint%14#0 from l-stack (no copy)'
debug: Inserted did_win_after_if_else@10.ops[7]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced did_win_after_if_else@10.ops[9]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted did_win_and_contd@11.ops[2]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced did_win_and_contd@11.ops[4]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted did_win_and_contd@11.ops[10]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced did_win_and_contd@11.ops[12]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted did_win_and_contd@11.ops[6]: 'store reinterpret_biguint%17#0 to l-stack (copy)'
debug: Replaced did_win_and_contd@11.ops[9]: 'load reinterpret_biguint%17#0' with 'load reinterpret_biguint%17#0 from l-stack (no copy)'
debug: Found 4 edge set/s for examples.tictactoe.tictactoe.TicTacToeContract.did_win
debug: examples.tictactoe.tictactoe.TicTacToeContract.did_win f-stack entry: ['awst_tmp%1#0', 'tmp%5#0', 'tmp%6#0']
debug: examples.tictactoe.tictactoe.TicTacToeContract.did_win f-stack on first store: ['g#0', 'tmp%0#0', 'awst_tmp%0#0']
debug: Inserted whose_turn_block@0.ops[10]: 'store reinterpret_bool%0#0 to l-stack (copy)'
debug: Replaced whose_turn_block@0.ops[12]: 'load reinterpret_bool%0#0' with 'load reinterpret_bool%0#0 from l-stack (no copy)'
debug: Inserted whose_turn_block@0.ops[3]: 'store turns_exists%0#0 to l-stack (copy)'
debug: Replaced whose_turn_block@0.ops[6]: 'load turns_exists%0#0' with 'load turns_exists%0#0 from l-stack (no copy)'
debug: Inserted whose_turn_block@0.ops[5]: 'store turns_value%0#0 to l-stack (copy)'
debug: Replaced whose_turn_block@0.ops[9]: 'load turns_value%0#0' with 'load turns_value%0#0 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.tictactoe.tictactoe.TicTacToeContract.whose_turn
debug: Allocated 1 variable/s to x-stack: ternary_result%0#0
debug: shared x-stack for whose_turn_ternary_true@1 -> whose_turn_ternary_merge@3: ternary_result%0#0
debug: shared x-stack for whose_turn_ternary_false@2 -> whose_turn_ternary_merge@3: ternary_result%0#0
debug: Inserted play_block@0.ops[7]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced play_block@0.ops[9]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted play_block@0.ops[21]: 'store reinterpret_bool%0#0 to l-stack (copy)'
debug: Replaced play_block@0.ops[23]: 'load reinterpret_bool%0#0' with 'load reinterpret_bool%0#0 from l-stack (no copy)'
debug: Inserted play_block@0.ops[3]: 'store winner_exists%1#0 to l-stack (copy)'
debug: Replaced play_block@0.ops[6]: 'load winner_exists%1#0' with 'load winner_exists%1#0 from l-stack (no copy)'
debug: Inserted play_block@0.ops[15]: 'store turns_exists%0#0 to l-stack (copy)'
debug: Replaced play_block@0.ops[18]: 'load turns_exists%0#0' with 'load turns_exists%0#0 from l-stack (no copy)'
debug: Inserted play_block@0.ops[17]: 'store turns_value%0#0 to l-stack (copy)'
debug: Replaced play_block@0.ops[21]: 'load turns_value%0#0' with 'load turns_value%0#0 from l-stack (no copy)'
debug: Inserted play_if_body@1.ops[12]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced play_if_body@1.ops[14]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted play_if_body@1.ops[5]: 'store host_exists%0#0 to l-stack (copy)'
debug: Replaced play_if_body@1.ops[8]: 'load host_exists%0#0' with 'load host_exists%0#0 from l-stack (no copy)'
debug: Inserted play_if_body@1.ops[7]: 'store host_value%0#0 to l-stack (copy)'
debug: Replaced play_if_body@1.ops[12]: 'load host_value%0#0' with 'load host_value%0#0 from l-stack (no copy)'
debug: Inserted play_if_body@1.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced play_if_body@1.ops[12]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted play_else_body@2.ops[17]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced play_else_body@2.ops[19]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted play_else_body@2.ops[8]: 'store challenger_get_ex%0#0 to l-stack (copy)'
debug: Replaced play_else_body@2.ops[11]: 'load challenger_get_ex%0#0' with 'load challenger_get_ex%0#0 from l-stack (no copy)'
debug: Inserted play_else_body@2.ops[14]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced play_else_body@2.ops[17]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted play_else_body@2.ops[7]: 'store challenger_get_ex%1#0 to l-stack (copy)'
debug: Replaced play_else_body@2.ops[13]: 'load challenger_get_ex%1#0' with 'load challenger_get_ex%1#0 from l-stack (no copy)'
debug: Inserted play_else_body@2.ops[3]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced play_else_body@2.ops[12]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted play_else_body@2.ops[1]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced play_else_body@2.ops[19]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.tictactoe.tictactoe.TicTacToeContract.play
debug: Allocated 1 variable/s to x-stack: player#0
debug: shared x-stack for play_if_body@1 -> play_after_if_else@3: player#0
debug: shared x-stack for play_else_body@2 -> play_after_if_else@3: player#0
info: Writing tictactoe/out/TicTacToeContract.approval.teal
info: Writing tictactoe/out/TicTacToeContract.clear.teal
info: Writing tictactoe/out/TicTacToeContract.arc32.json
info: Writing tictactoe/out/client_TicTacToeContract.py