{
  "version": 3,
  "sources": [
    "../tictactoe.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;;;;;AAAA;AAgCK;;;;;;AAJA;;;;;;AANA;;;;;;;;;AAjBA;;;;;;;;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAiBA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAIA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;;;AA3BA;;;;;;;;;;;;;;AAEM;;AAAA;AAAA;AAAX;;;AAAA;;;AAGe;AAAA;AAAA;AAAA;;AAAA;;AAAf;;;AAAA;;;AACuB;AAAA;AAAA;AAAA;;AAAA;;AAAP;;;;AAEA;AAAJ;AACI;AAAJ;;;;AACQ;;AAAZ;;AAAA;;AAAA;AACqC;;AAAT;AAA5B;AAAA;;AAAA;AACA;;AAAA;AAAA;;AAAA;;AAAA;;AACgB;AAAT;AAAA;;;AAAA;;;AAAe;;AAAM;AAAN;AAAf;;;AAAA;;;;;;;;;AAAP;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAyB;;AAAzB;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACA;AAAa;AAAb;;;;;;;;AAEH;;;;;;AAEU;AAAI;AAAJ;AAAA;AAAP;AACwB;;AAAxB;AAAA;;AAAA;AACe;;AAAf;;AAAA;;AAAA;;;;;;;AAI2B;AAAA;AAAA;AAAA;AAAa;;AAAb;AAAA;AAAA;AAAoB;;AAAxC;;AAAA;;AAAA;AAAP;AAEH;;;;;;;AAEU;AAAI;AAAJ;AAAA;AAAP;AACG;AAAA;AAAA;AAAA;AAAa;;AAAb;AAAA;AAAA;AAAX;;;AAAA;;;AACmB;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACS;;AAAT;;;;;AAMJ;;AAAA;;AAAA;;AAAA;;;;AAJW;;AACK;;AADS;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAd;AAAP;AAGS;;AAAT;;;;;AAGP;;;;;;;;AAEG;;AAAA;AAAA;;AAAA;;AACgB;AAAT;AAAA;;;AAAA;;;AAAe;;AAAM;AAAN;AAAf;;;AAAA;;;;;;;;;AAAP;;AAAA;AACO;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA0B;;;AAA1B;AAAP;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAc;AAAd;AAAA;AAAA;;AAAA;AACG;;AAAA;;AAAA;;AAAA;;;AAAX;;;AAAA;;;AACY;AAAA;;AAAA;;;;;AACC;AAAA;AAAA;AAAA;AAAc;;AAAd;AAAb;;;AAAA;;;AACY;AAAoB;;;AAApB;;;;;;;;;;;;;AAEP;;;;;;;AAEO;AAAA;AAAA;AAAA;AAAJ;AAEG;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAO;AAAP;AAAA;AAAA;AAAA;AAAA;;AAAa;;AAAA;AAAA;AAAA;AAAA;AAAO;AAAP;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAb;AAAA;;;AAAA;;;AAAa;;AAAa;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAO;;AAAP;AAAA;AAAA;AAAA;AAAb;AAAb;;;AAAA;;;AACQ;AAAP;;AAAA;AAEC;AAAF;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAkB;AAAF;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAhB;AAAA;;;AAAA;;;AAAgB;;AAAkB;;AAAF;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAhB;AAAhB;;;AAAA;;;AACQ;AAAP;;AAAA;AAGD;;AAAY;AAAF;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAK;AAAL;AAAA;AAAA;AAAA;AAAV;AAAX;;;AAAA;;;AACiB;AAAF;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAK;AAAL;AAAA;AAAA;AAAA;AAAW;;AAAX;AAAA;;;AAAA;;;AAAW;;AAAY;;AAAF;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAK;;AAAL;AAAA;AAAA;AAAA;AAAV;AAAX;;;AAAA;;;AACQ;AAAP;;AAAA;AACC;AAAF;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAK;;AAAL;AAAA;AAAA;AAAA;AAAW;;AAAX;AAAA;;;AAAA;;;AAAW;;AAAY;;AAAF;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAK;AAAL;AAAA;AAAA;AAAA;AAAV;AAAX;;;AAAA;;;AACQ;AAAP;;AAAA;;;;AACD;AAAP;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 3 8"
    },
    "7": {
      "op": "bytecblock \"game\" \"turns\" \"challenger\" \"winner\" 0x01 0x02 \"host\""
    },
    "47": {
      "op": "b main_block@0"
    },
    "50": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "52": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "55": {
      "op": "b main_call___init__@1"
    },
    "58": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.__init__",
      "op": "callsub __init__"
    },
    "61": {
      "op": "b main_after_if_else@2"
    },
    "64": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "b main_block@3"
    },
    "67": {
      "block": "main_block@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "69": {
      "op": "intc_1 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "NoOp"
      ]
    },
    "70": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "71": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "72": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "75": {
      "op": "pushbytes 0x96a97181 // method \"new_game((uint64,uint64))void\"",
      "defined_out": [
        "Method(new_game((uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(new_game((uint64,uint64))void)"
      ]
    },
    "81": {
      "op": "uncover 1",
      "stack_out": [
        "Method(new_game((uint64,uint64))void)",
        "tmp%2#0"
      ]
    },
    "83": {
      "op": "match main_new_game_route@4",
      "stack_out": []
    },
    "87": {
      "op": "b main_switch_case_next@5"
    },
    "90": {
      "block": "main_switch_case_next@5",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "92": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "93": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "94": {
      "op": "bz main_create_NoOp@11",
      "stack_out": []
    },
    "97": {
      "op": "b main_call_NoOp@6"
    },
    "100": {
      "block": "main_call_NoOp@6",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "103": {
      "op": "pushbytes 0x17a079b3 // method \"join_game((uint64,uint64))void\"",
      "defined_out": [
        "Method(join_game((uint64,uint64))void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(join_game((uint64,uint64))void)"
      ]
    },
    "109": {
      "op": "pushbytes 0xbb9f1147 // method \"whose_turn()uint8\"",
      "defined_out": [
        "Method(join_game((uint64,uint64))void)",
        "Method(whose_turn()uint8)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(join_game((uint64,uint64))void)",
        "Method(whose_turn()uint8)"
      ]
    },
    "115": {
      "op": "pushbytes 0x9eebf58e // method \"play((uint64,uint64))void\"",
      "defined_out": [
        "Method(join_game((uint64,uint64))void)",
        "Method(play((uint64,uint64))void)",
        "Method(whose_turn()uint8)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(join_game((uint64,uint64))void)",
        "Method(whose_turn()uint8)",
        "Method(play((uint64,uint64))void)"
      ]
    },
    "121": {
      "op": "uncover 3",
      "stack_out": [
        "Method(join_game((uint64,uint64))void)",
        "Method(whose_turn()uint8)",
        "Method(play((uint64,uint64))void)",
        "tmp%5#0"
      ]
    },
    "123": {
      "op": "match main_join_game_route@7 main_whose_turn_route@8 main_play_route@9",
      "stack_out": []
    },
    "131": {
      "op": "b main_switch_case_next@10"
    },
    "134": {
      "block": "main_switch_case_next@10",
      "stack_in": [],
      "op": "b main_after_if_else@12"
    },
    "137": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "138": {
      "block": "main_play_route@9",
      "stack_in": [],
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.play[routing]",
      "op": "callsub play"
    },
    "141": {
      "op": "b main_switch_case_next@10"
    },
    "144": {
      "block": "main_whose_turn_route@8",
      "stack_in": [],
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.whose_turn[routing]",
      "op": "callsub whose_turn"
    },
    "147": {
      "op": "b main_switch_case_next@10"
    },
    "150": {
      "block": "main_join_game_route@7",
      "stack_in": [],
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.join_game[routing]",
      "op": "callsub join_game"
    },
    "153": {
      "op": "b main_switch_case_next@10"
    },
    "156": {
      "block": "main_create_NoOp@11",
      "stack_in": [],
      "op": "b main_after_if_else@12"
    },
    "159": {
      "block": "main_new_game_route@4",
      "stack_in": [],
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.new_game[routing]",
      "op": "callsub new_game"
    },
    "162": {
      "op": "b main_switch_case_next@5"
    },
    "165": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.new_game[routing]",
      "params": {},
      "block": "new_game",
      "stack_in": [],
      "op": "b new_game_block@0"
    },
    "168": {
      "block": "new_game_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "171": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "172": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "173": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "16"
      ]
    },
    "175": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "176": {
      "error": "invalid number of bytes for (uint64,uint64)",
      "op": "assert // invalid number of bytes for (uint64,uint64)",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "177": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "178": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0"
      ]
    },
    "179": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "180": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "181": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "182": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "184": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8"
      ]
    },
    "185": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8",
        "8"
      ]
    },
    "186": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "187": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "188": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.new_game",
      "op": "callsub examples.tictactoe.tictactoe.TicTacToeContract.new_game",
      "stack_out": []
    },
    "191": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "192": {
      "op": "return",
      "stack_out": []
    },
    "193": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.join_game[routing]",
      "params": {},
      "block": "join_game",
      "stack_in": [],
      "op": "b join_game_block@0"
    },
    "196": {
      "block": "join_game_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "199": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "200": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "201": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "16"
      ]
    },
    "203": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "204": {
      "error": "invalid number of bytes for (uint64,uint64)",
      "op": "assert // invalid number of bytes for (uint64,uint64)",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "205": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "206": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0"
      ]
    },
    "207": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "208": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "209": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "210": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "212": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8"
      ]
    },
    "213": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8",
        "8"
      ]
    },
    "214": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "215": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "216": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.join_game",
      "op": "callsub examples.tictactoe.tictactoe.TicTacToeContract.join_game",
      "stack_out": []
    },
    "219": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "220": {
      "op": "return",
      "stack_out": []
    },
    "221": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.whose_turn[routing]",
      "params": {},
      "block": "whose_turn",
      "stack_in": [],
      "op": "b whose_turn_block@0"
    },
    "224": {
      "block": "whose_turn_block@0",
      "stack_in": [],
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.whose_turn",
      "op": "callsub examples.tictactoe.tictactoe.TicTacToeContract.whose_turn",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "227": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "233": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "235": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "236": {
      "op": "log",
      "stack_out": []
    },
    "237": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "238": {
      "op": "return",
      "stack_out": []
    },
    "239": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.play[routing]",
      "params": {},
      "block": "play",
      "stack_in": [],
      "op": "b play_block@0"
    },
    "242": {
      "block": "play_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "245": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "246": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "247": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "16"
      ]
    },
    "249": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "250": {
      "error": "invalid number of bytes for (uint64,uint64)",
      "op": "assert // invalid number of bytes for (uint64,uint64)",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "251": {
      "op": "dup",
      "defined_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ]
    },
    "252": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0"
      ]
    },
    "253": {
      "op": "intc_3 // 8",
      "defined_out": [
        "0",
        "8",
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "as_Encoded(uint64,uint64)%0#0 (copy)",
        "0",
        "8"
      ]
    },
    "254": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "255": {
      "op": "btoi",
      "defined_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64,uint64)%0#0",
        "aggregate%item0%0#0"
      ]
    },
    "256": {
      "op": "cover 1",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0"
      ]
    },
    "258": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8"
      ]
    },
    "259": {
      "op": "intc_3 // 8",
      "stack_out": [
        "aggregate%item0%0#0",
        "as_Encoded(uint64,uint64)%0#0",
        "8",
        "8"
      ]
    },
    "260": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%item0%0#0"
      ],
      "stack_out": [
        "aggregate%item0%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "261": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "262": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.play",
      "op": "callsub examples.tictactoe.tictactoe.TicTacToeContract.play",
      "stack_out": []
    },
    "265": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "266": {
      "op": "return",
      "stack_out": []
    },
    "267": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "270": {
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "271": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.new_game",
      "params": {
        "move.0#0": "uint64",
        "move.1#0": "uint64"
      },
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.new_game",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "274": {
      "op": "intc_1 // 0",
      "stack_out": [
        "_%0#0"
      ]
    },
    "275": {
      "op": "intc_1 // 0",
      "stack_out": [
        "_%0#0",
        "_%1#0"
      ]
    },
    "276": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0"
      ]
    },
    "278": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0"
      ]
    },
    "280": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "282": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.new_game_block@0"
    },
    "285": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.new_game_block@0",
      "stack_in": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%0#0"
      ]
    },
    "287": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%0#0",
        "0"
      ]
    },
    "288": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%1#0"
      ]
    },
    "289": {
      "op": "bz examples.tictactoe.tictactoe.TicTacToeContract.new_game_after_if_else@4",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "292": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.new_game_if_body@1"
    },
    "295": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.new_game_if_body@1",
      "stack_in": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "0"
      ]
    },
    "296": {
      "op": "bytec_2 // \"challenger\"",
      "defined_out": [
        "\"challenger\"",
        "0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "0",
        "\"challenger\""
      ]
    },
    "297": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "298": {
      "op": "cover 1",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_exists%0#0",
        "_%0#0"
      ]
    },
    "300": {
      "op": "frame_bury 0",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_exists%0#0"
      ]
    },
    "302": {
      "op": "bz examples.tictactoe.tictactoe.TicTacToeContract.new_game_after_if_else@3",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "305": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.new_game_if_body@2"
    },
    "308": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.new_game_if_body@2",
      "stack_in": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "0"
      ]
    },
    "309": {
      "op": "bytec_3 // \"winner\"",
      "defined_out": [
        "\"winner\"",
        "0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "0",
        "\"winner\""
      ]
    },
    "310": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_%1#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "311": {
      "op": "cover 1",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_exists%1#0",
        "_%1#0"
      ]
    },
    "313": {
      "op": "frame_bury 1",
      "defined_out": [
        "_%1#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_exists%1#0"
      ]
    },
    "315": {
      "error": "Game isn't over",
      "op": "assert // Game isn't over",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "316": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.new_game_after_if_else@3"
    },
    "319": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.new_game_after_if_else@3",
      "stack_in": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "bytec_2 // \"challenger\"",
      "defined_out": [
        "\"challenger\""
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "\"challenger\""
      ]
    },
    "320": {
      "op": "app_global_del",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "321": {
      "op": "bytec_3 // \"winner\"",
      "defined_out": [
        "\"winner\""
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "\"winner\""
      ]
    },
    "322": {
      "op": "app_global_del",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "323": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.new_game_after_if_else@4"
    },
    "326": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.new_game_after_if_else@4",
      "stack_in": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%2#0"
      ]
    },
    "328": {
      "op": "bytec 6 // \"host\"",
      "defined_out": [
        "\"host\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%2#0",
        "\"host\""
      ]
    },
    "330": {
      "op": "uncover 1",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "\"host\"",
        "tmp%2#0"
      ]
    },
    "332": {
      "op": "app_global_put",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "333": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "9"
      ]
    },
    "335": {
      "op": "bzero",
      "defined_out": [
        "reinterpret_Encoded(uint8[3][3])%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "reinterpret_Encoded(uint8[3][3])%0#0"
      ]
    },
    "336": {
      "op": "bytec_0 // \"game\"",
      "defined_out": [
        "\"game\"",
        "reinterpret_Encoded(uint8[3][3])%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "reinterpret_Encoded(uint8[3][3])%0#0",
        "\"game\""
      ]
    },
    "337": {
      "op": "uncover 1",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "\"game\"",
        "reinterpret_Encoded(uint8[3][3])%0#0"
      ]
    },
    "339": {
      "op": "app_global_put",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "340": {
      "op": "frame_dig -2",
      "defined_out": [
        "move.0#0 (copy)"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "move.0#0 (copy)"
      ]
    },
    "342": {
      "op": "dup",
      "defined_out": [
        "column#0",
        "column#0 (copy)"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "column#0",
        "column#0 (copy)"
      ]
    },
    "343": {
      "op": "frame_bury 3",
      "defined_out": [
        "column#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "column#0"
      ]
    },
    "345": {
      "op": "frame_dig -1",
      "defined_out": [
        "column#0",
        "move.1#0 (copy)"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "column#0",
        "move.1#0 (copy)"
      ]
    },
    "347": {
      "op": "frame_bury 4",
      "defined_out": [
        "column#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "column#0"
      ]
    },
    "349": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "column#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "column#0",
        "3"
      ]
    },
    "350": {
      "op": "<",
      "defined_out": [
        "column#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%3#0"
      ]
    },
    "351": {
      "op": "bz examples.tictactoe.tictactoe.TicTacToeContract.new_game_bool_false@7",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "354": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.new_game_and_contd@5"
    },
    "357": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.new_game_and_contd@5",
      "stack_in": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "row#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0"
      ]
    },
    "359": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "row#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "3"
      ]
    },
    "360": {
      "op": "<",
      "defined_out": [
        "row#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%4#0"
      ]
    },
    "361": {
      "op": "bz examples.tictactoe.tictactoe.TicTacToeContract.new_game_bool_false@7",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "364": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.new_game_bool_true@6"
    },
    "367": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.new_game_bool_true@6",
      "stack_in": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "1"
      ]
    },
    "368": {
      "op": "frame_bury 2",
      "defined_out": [],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "370": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.new_game_bool_merge@8"
    },
    "373": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.new_game_bool_merge@8",
      "stack_in": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "and_result%0#0"
      ]
    },
    "375": {
      "error": "Move must be in range",
      "op": "assert // Move must be in range",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "376": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "and_result%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "0"
      ]
    },
    "377": {
      "op": "bytec_0 // \"game\"",
      "defined_out": [
        "\"game\"",
        "0",
        "and_result%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "0",
        "\"game\""
      ]
    },
    "378": {
      "op": "app_global_get_ex",
      "defined_out": [
        "and_result%0#0",
        "maybe_exists%2#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%0#0",
        "maybe_exists%2#0"
      ]
    },
    "379": {
      "error": "check self.game exists",
      "op": "assert // check self.game exists",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%0#0"
      ]
    },
    "380": {
      "op": "frame_dig 4",
      "defined_out": [
        "and_result%0#0",
        "maybe_value%0#0",
        "row#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%0#0",
        "row#0"
      ]
    },
    "382": {
      "op": "dup",
      "defined_out": [
        "and_result%0#0",
        "maybe_value%0#0",
        "row#0",
        "row#0 (copy)"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%0#0",
        "row#0 (copy)",
        "row#0 (copy)"
      ]
    },
    "383": {
      "op": "cover 2",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "row#0 (copy)"
      ]
    },
    "385": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "and_result%0#0",
        "maybe_value%0#0",
        "row#0",
        "row#0 (copy)"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "row#0 (copy)",
        "3"
      ]
    },
    "386": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "and_result%0#0",
        "maybe_value%0#0",
        "row#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "387": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "and_result%0#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "row#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "389": {
      "op": "uncover 1",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "391": {
      "op": "intc_2 // 3",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "aggregate%bytes_offset%0#0",
        "3"
      ]
    },
    "392": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "and_result%0#0",
        "maybe_value%0#0",
        "row#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "393": {
      "op": "frame_dig 3",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "and_result%0#0",
        "column#0",
        "maybe_value%0#0",
        "row#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%encoded_element%0#0",
        "column#0"
      ]
    },
    "395": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%encoded_element%0#0",
        "and_result%0#0",
        "column#0",
        "maybe_value%0#0",
        "row#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%encoded_element%0#0",
        "column#0",
        "1"
      ]
    },
    "396": {
      "op": "*",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "aggregate%write_offset%0#0",
        "and_result%0#0",
        "column#0",
        "maybe_value%0#0",
        "row#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "397": {
      "op": "bytec 4 // 0x01",
      "defined_out": [
        "0x01",
        "aggregate%encoded_element%0#0",
        "aggregate%write_offset%0#0",
        "and_result%0#0",
        "column#0",
        "maybe_value%0#0",
        "row#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%write_offset%0#0",
        "0x01"
      ]
    },
    "399": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%updated_array%0#0",
        "and_result%0#0",
        "column#0",
        "maybe_value%0#0",
        "row#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%updated_array%0#0"
      ]
    },
    "400": {
      "op": "uncover 2",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%updated_array%0#0",
        "row#0"
      ]
    },
    "402": {
      "op": "intc_2 // 3",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%updated_array%0#0",
        "row#0",
        "3"
      ]
    },
    "403": {
      "op": "*",
      "defined_out": [
        "aggregate%updated_array%0#0",
        "aggregate%write_offset%1#0",
        "and_result%0#0",
        "column#0",
        "maybe_value%0#0",
        "row#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%updated_array%0#0",
        "aggregate%write_offset%1#0"
      ]
    },
    "404": {
      "op": "uncover 2",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "aggregate%updated_array%0#0",
        "aggregate%write_offset%1#0",
        "maybe_value%0#0"
      ]
    },
    "406": {
      "op": "uncover 1",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "aggregate%updated_array%0#0",
        "maybe_value%0#0",
        "aggregate%write_offset%1#0"
      ]
    },
    "408": {
      "op": "uncover 2",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%write_offset%1#0",
        "aggregate%updated_array%0#0"
      ]
    },
    "410": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "defined_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "updated_array%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "updated_array%0#0"
      ]
    },
    "411": {
      "op": "bytec_0 // \"game\"",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "updated_array%0#0",
        "\"game\""
      ]
    },
    "412": {
      "op": "uncover 1",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "\"game\"",
        "updated_array%0#0"
      ]
    },
    "414": {
      "op": "app_global_put",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "415": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "\"turns\""
      ]
    },
    "416": {
      "op": "intc_1 // 0",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "\"turns\"",
        "0"
      ]
    },
    "417": {
      "op": "app_global_put",
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "418": {
      "retsub": true,
      "op": "retsub"
    },
    "419": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.new_game_bool_false@7",
      "stack_in": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0",
        "0"
      ]
    },
    "420": {
      "op": "frame_bury 2",
      "defined_out": [],
      "stack_out": [
        "_%0#0",
        "_%1#0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "422": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.new_game_bool_merge@8"
    },
    "425": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.join_game",
      "params": {
        "move.0#0": "uint64",
        "move.1#0": "uint64"
      },
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.join_game",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "428": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.join_game_block@0"
    },
    "431": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.join_game_block@0",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "432": {
      "op": "bytec_2 // \"challenger\"",
      "defined_out": [
        "\"challenger\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"challenger\""
      ]
    },
    "433": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "434": {
      "op": "!",
      "defined_out": [
        "_%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "tmp%0#0"
      ]
    },
    "435": {
      "error": "Host already has a challenger",
      "op": "assert // Host already has a challenger",
      "stack_out": [
        "_%0#0"
      ]
    },
    "436": {
      "op": "txn Sender",
      "defined_out": [
        "_%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "_%0#0",
        "tmp%1#0"
      ]
    },
    "438": {
      "op": "bytec_2 // \"challenger\"",
      "stack_out": [
        "_%0#0",
        "tmp%1#0",
        "\"challenger\""
      ]
    },
    "439": {
      "op": "uncover 1",
      "stack_out": [
        "_%0#0",
        "\"challenger\"",
        "tmp%1#0"
      ]
    },
    "441": {
      "op": "app_global_put",
      "stack_out": [
        "_%0#0"
      ]
    },
    "442": {
      "op": "bytec 5 // 0x02",
      "defined_out": [
        "0x02",
        "_%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "0x02"
      ]
    },
    "444": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x02",
        "_%0#0",
        "move.0#0 (copy)"
      ],
      "stack_out": [
        "_%0#0",
        "0x02",
        "move.0#0 (copy)"
      ]
    },
    "446": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x02",
        "_%0#0",
        "move.0#0 (copy)",
        "move.1#0 (copy)"
      ],
      "stack_out": [
        "_%0#0",
        "0x02",
        "move.0#0 (copy)",
        "move.1#0 (copy)"
      ]
    },
    "448": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.make_move",
      "op": "callsub make_move",
      "stack_out": [
        "_%0#0"
      ]
    },
    "451": {
      "retsub": true,
      "op": "retsub"
    },
    "452": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.whose_turn",
      "params": {},
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.whose_turn",
      "stack_in": [],
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.whose_turn_block@0"
    },
    "455": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.whose_turn_block@0",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "456": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"turns\""
      ]
    },
    "457": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "458": {
      "error": "check self.turns exists",
      "op": "assert // check self.turns exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "459": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "2"
      ]
    },
    "461": {
      "op": "%",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "462": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "463": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "464": {
      "op": "bytec 5 // 0x02",
      "defined_out": [
        "0x02",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x02"
      ]
    },
    "466": {
      "op": "bytec 4 // 0x01",
      "defined_out": [
        "0x01",
        "0x02",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x02",
        "0x01"
      ]
    },
    "468": {
      "op": "uncover 2",
      "stack_out": [
        "0x02",
        "0x01",
        "tmp%1#0"
      ]
    },
    "470": {
      "op": "select",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "select%0#0"
      ]
    },
    "471": {
      "retsub": true,
      "op": "retsub"
    },
    "472": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.play",
      "params": {
        "move.0#0": "uint64",
        "move.1#0": "uint64"
      },
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.play",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "475": {
      "op": "intc_1 // 0",
      "stack_out": [
        "player#0"
      ]
    },
    "476": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.play_block@0"
    },
    "479": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.play_block@0",
      "stack_in": [
        "player#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "player#0",
        "0"
      ]
    },
    "480": {
      "op": "bytec_3 // \"winner\"",
      "defined_out": [
        "\"winner\"",
        "0"
      ],
      "stack_out": [
        "player#0",
        "0",
        "\"winner\""
      ]
    },
    "481": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "482": {
      "op": "!",
      "defined_out": [
        "_%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%0#0"
      ]
    },
    "483": {
      "error": "Game is already finished",
      "op": "assert // Game is already finished",
      "stack_out": [
        "player#0",
        "_%0#0"
      ]
    },
    "484": {
      "op": "intc_1 // 0",
      "stack_out": [
        "player#0",
        "_%0#0",
        "0"
      ]
    },
    "485": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "0",
        "_%0#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "0",
        "\"turns\""
      ]
    },
    "486": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "487": {
      "error": "check self.turns exists",
      "op": "assert // check self.turns exists",
      "stack_out": [
        "player#0",
        "_%0#0",
        "maybe_value%0#0"
      ]
    },
    "488": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "_%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "maybe_value%0#0",
        "2"
      ]
    },
    "490": {
      "op": "%",
      "defined_out": [
        "_%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%1#0"
      ]
    },
    "491": {
      "op": "intc_1 // 0",
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%1#0",
        "0"
      ]
    },
    "492": {
      "op": "!=",
      "defined_out": [
        "_%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%2#0"
      ]
    },
    "493": {
      "op": "bz examples.tictactoe.tictactoe.TicTacToeContract.play_else_body@2",
      "stack_out": [
        "player#0",
        "_%0#0"
      ]
    },
    "496": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.play_if_body@1"
    },
    "499": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.play_if_body@1",
      "stack_in": [
        "player#0",
        "_%0#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%3#0"
      ]
    },
    "501": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%3#0",
        "0"
      ]
    },
    "502": {
      "op": "bytec 6 // \"host\"",
      "defined_out": [
        "\"host\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%3#0",
        "0",
        "\"host\""
      ]
    },
    "504": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%2#0"
      ]
    },
    "505": {
      "error": "check self.host exists",
      "op": "assert // check self.host exists",
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "506": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%4#0"
      ]
    },
    "507": {
      "error": "It is the host's turn",
      "op": "assert // It is the host's turn",
      "stack_out": [
        "player#0",
        "_%0#0"
      ]
    },
    "508": {
      "op": "bytec 4 // 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "0x01"
      ]
    },
    "510": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "player#0",
        "_%0#0"
      ]
    },
    "512": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.play_after_if_else@3"
    },
    "515": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.play_after_if_else@3",
      "stack_in": [
        "player#0",
        "_%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "player#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "player#0"
      ]
    },
    "517": {
      "op": "frame_dig -2",
      "defined_out": [
        "move.0#0 (copy)",
        "player#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "player#0",
        "move.0#0 (copy)"
      ]
    },
    "519": {
      "op": "frame_dig -1",
      "defined_out": [
        "move.0#0 (copy)",
        "move.1#0 (copy)",
        "player#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "player#0",
        "move.0#0 (copy)",
        "move.1#0 (copy)"
      ]
    },
    "521": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.make_move",
      "op": "callsub make_move",
      "stack_out": [
        "player#0",
        "_%0#0"
      ]
    },
    "524": {
      "retsub": true,
      "op": "retsub"
    },
    "525": {
      "block": "examples.tictactoe.tictactoe.TicTacToeContract.play_else_body@2",
      "stack_in": [
        "player#0",
        "_%0#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%5#0"
      ]
    },
    "527": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "529": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "0"
      ]
    },
    "530": {
      "op": "bytec_2 // \"challenger\"",
      "defined_out": [
        "\"challenger\"",
        "0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "0",
        "\"challenger\""
      ]
    },
    "531": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%3#0"
      ]
    },
    "532": {
      "op": "cover 1",
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "maybe_exists%3#0",
        "maybe_value%2#0"
      ]
    },
    "534": {
      "op": "uncover 2",
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%5#0",
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ]
    },
    "536": {
      "op": "uncover 1",
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%5#0",
        "maybe_exists%3#0",
        "tmp%6#0",
        "maybe_value%2#0"
      ]
    },
    "538": {
      "op": "uncover 2",
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%5#0",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%3#0"
      ]
    },
    "540": {
      "op": "select",
      "defined_out": [
        "state_get%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%5#0",
        "state_get%0#0"
      ]
    },
    "541": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "tmp%7#0"
      ]
    },
    "542": {
      "error": "It is the challenger's turn",
      "op": "assert // It is the challenger's turn",
      "stack_out": [
        "player#0",
        "_%0#0"
      ]
    },
    "543": {
      "op": "bytec 5 // 0x02",
      "defined_out": [
        "0x02"
      ],
      "stack_out": [
        "player#0",
        "_%0#0",
        "0x02"
      ]
    },
    "545": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "player#0",
        "_%0#0"
      ]
    },
    "547": {
      "op": "b examples.tictactoe.tictactoe.TicTacToeContract.play_after_if_else@3"
    },
    "550": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.make_move",
      "params": {
        "player#0": "bytes",
        "move.0#0": "uint64",
        "move.1#0": "uint64"
      },
      "block": "make_move",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "553": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "555": {
      "op": "b make_move_block@0"
    },
    "558": {
      "block": "make_move_block@0",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "move.0#0 (copy)"
      ],
      "stack_out": [
        "and_result%0#0",
        "move.0#0 (copy)"
      ]
    },
    "560": {
      "op": "dup",
      "defined_out": [
        "column#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "column#0"
      ]
    },
    "561": {
      "op": "frame_dig -1",
      "defined_out": [
        "column#0",
        "move.1#0 (copy)"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "column#0",
        "move.1#0 (copy)"
      ]
    },
    "563": {
      "op": "cover 1",
      "defined_out": [
        "column#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "column#0"
      ]
    },
    "565": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "column#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "column#0",
        "3"
      ]
    },
    "566": {
      "op": "<",
      "defined_out": [
        "column#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%0#0"
      ]
    },
    "567": {
      "op": "bz make_move_bool_false@3",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "570": {
      "op": "b make_move_and_contd@1"
    },
    "573": {
      "block": "make_move_and_contd@1",
      "stack_in": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0"
      ]
    },
    "575": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "3"
      ]
    },
    "576": {
      "op": "<",
      "defined_out": [
        "row#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%1#0"
      ]
    },
    "577": {
      "op": "bz make_move_bool_false@3",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "580": {
      "op": "b make_move_bool_true@2"
    },
    "583": {
      "block": "make_move_bool_true@2",
      "stack_in": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "1"
      ]
    },
    "584": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "586": {
      "op": "b make_move_bool_merge@4"
    },
    "589": {
      "block": "make_move_bool_merge@4",
      "stack_in": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "and_result%0#0"
      ]
    },
    "591": {
      "error": "Move must be in range",
      "op": "assert // Move must be in range",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "592": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "0"
      ]
    },
    "593": {
      "op": "bytec_0 // \"game\"",
      "defined_out": [
        "\"game\"",
        "0",
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "0",
        "\"game\""
      ]
    },
    "594": {
      "op": "app_global_get_ex",
      "defined_out": [
        "and_result%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "595": {
      "error": "check self.game exists",
      "op": "assert // check self.game exists",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%0#0"
      ]
    },
    "596": {
      "op": "frame_dig 2",
      "defined_out": [
        "and_result%0#0",
        "maybe_value%0#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%0#0",
        "row#0"
      ]
    },
    "598": {
      "op": "dup",
      "defined_out": [
        "and_result%0#0",
        "maybe_value%0#0",
        "row#0",
        "row#0 (copy)"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%0#0",
        "row#0 (copy)",
        "row#0 (copy)"
      ]
    },
    "599": {
      "op": "cover 2",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "row#0 (copy)"
      ]
    },
    "601": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "and_result%0#0",
        "maybe_value%0#0",
        "row#0",
        "row#0 (copy)"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "row#0 (copy)",
        "3"
      ]
    },
    "602": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "and_result%0#0",
        "maybe_value%0#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "603": {
      "op": "intc_2 // 3",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "maybe_value%0#0",
        "aggregate%bytes_offset%0#0",
        "3"
      ]
    },
    "604": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "and_result%0#0",
        "array_item%0#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "array_item%0#0"
      ]
    },
    "605": {
      "op": "frame_dig 1",
      "defined_out": [
        "and_result%0#0",
        "array_item%0#0",
        "column#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "array_item%0#0",
        "column#0"
      ]
    },
    "607": {
      "op": "dup",
      "defined_out": [
        "and_result%0#0",
        "array_item%0#0",
        "column#0",
        "column#0 (copy)",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "array_item%0#0",
        "column#0 (copy)",
        "column#0 (copy)"
      ]
    },
    "608": {
      "op": "cover 2",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "array_item%0#0",
        "column#0 (copy)"
      ]
    },
    "610": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "and_result%0#0",
        "array_item%0#0",
        "column#0",
        "column#0 (copy)",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "array_item%0#0",
        "column#0 (copy)",
        "1"
      ]
    },
    "611": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%1#0",
        "and_result%0#0",
        "array_item%0#0",
        "column#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "array_item%0#0",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "612": {
      "op": "intc_0 // 1",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "array_item%0#0",
        "aggregate%bytes_offset%1#0",
        "1"
      ]
    },
    "613": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "and_result%0#0",
        "column#0",
        "reinterpret_biguint%0#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "614": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "and_result%0#0",
        "column#0",
        "reinterpret_biguint%0#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "reinterpret_biguint%0#0",
        "0x00"
      ]
    },
    "617": {
      "op": "b==",
      "defined_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "tmp%2#0"
      ]
    },
    "618": {
      "error": "Square is already taken",
      "op": "assert // Square is already taken",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0"
      ]
    },
    "619": {
      "op": "intc_1 // 0",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "0"
      ]
    },
    "620": {
      "op": "bytec_0 // \"game\"",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "0",
        "\"game\""
      ]
    },
    "621": {
      "op": "app_global_get_ex",
      "defined_out": [
        "and_result%0#0",
        "column#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "622": {
      "error": "check self.game exists",
      "op": "assert // check self.game exists",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0"
      ]
    },
    "623": {
      "op": "dig 2",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "row#0 (copy)"
      ]
    },
    "625": {
      "op": "intc_2 // 3",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "row#0 (copy)",
        "3"
      ]
    },
    "626": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%2#0",
        "and_result%0#0",
        "column#0",
        "maybe_value%1#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "aggregate%bytes_offset%2#0"
      ]
    },
    "627": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%bytes_offset%2#0",
        "and_result%0#0",
        "column#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "aggregate%bytes_offset%2#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "629": {
      "op": "uncover 1",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%2#0"
      ]
    },
    "631": {
      "op": "intc_2 // 3",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)",
        "aggregate%bytes_offset%2#0",
        "3"
      ]
    },
    "632": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%2#0",
        "and_result%0#0",
        "column#0",
        "maybe_value%1#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "aggregate%encoded_element%2#0"
      ]
    },
    "633": {
      "op": "dig 2",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "aggregate%encoded_element%2#0",
        "column#0 (copy)"
      ]
    },
    "635": {
      "op": "intc_0 // 1",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "aggregate%encoded_element%2#0",
        "column#0 (copy)",
        "1"
      ]
    },
    "636": {
      "op": "*",
      "defined_out": [
        "aggregate%encoded_element%2#0",
        "aggregate%write_offset%0#0",
        "and_result%0#0",
        "column#0",
        "maybe_value%1#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "aggregate%encoded_element%2#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "637": {
      "op": "frame_dig -3",
      "defined_out": [
        "aggregate%encoded_element%2#0",
        "aggregate%write_offset%0#0",
        "and_result%0#0",
        "column#0",
        "maybe_value%1#0",
        "player#0 (copy)",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "aggregate%encoded_element%2#0",
        "aggregate%write_offset%0#0",
        "player#0 (copy)"
      ]
    },
    "639": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%updated_array%0#0",
        "and_result%0#0",
        "column#0",
        "maybe_value%1#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "aggregate%updated_array%0#0"
      ]
    },
    "640": {
      "op": "dig 3",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "aggregate%updated_array%0#0",
        "row#0 (copy)"
      ]
    },
    "642": {
      "op": "intc_2 // 3",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "aggregate%updated_array%0#0",
        "row#0 (copy)",
        "3"
      ]
    },
    "643": {
      "op": "*",
      "defined_out": [
        "aggregate%updated_array%0#0",
        "aggregate%write_offset%1#0",
        "and_result%0#0",
        "column#0",
        "maybe_value%1#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "aggregate%updated_array%0#0",
        "aggregate%write_offset%1#0"
      ]
    },
    "644": {
      "op": "uncover 2",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "aggregate%updated_array%0#0",
        "aggregate%write_offset%1#0",
        "maybe_value%1#0"
      ]
    },
    "646": {
      "op": "uncover 1",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "aggregate%updated_array%0#0",
        "maybe_value%1#0",
        "aggregate%write_offset%1#0"
      ]
    },
    "648": {
      "op": "uncover 2",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%1#0",
        "aggregate%write_offset%1#0",
        "aggregate%updated_array%0#0"
      ]
    },
    "650": {
      "error": "index access is out of bounds",
      "op": "replace3 // on error: index access is out of bounds",
      "defined_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "updated_array%0#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "updated_array%0#0"
      ]
    },
    "651": {
      "op": "bytec_0 // \"game\"",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "updated_array%0#0",
        "\"game\""
      ]
    },
    "652": {
      "op": "uncover 1",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "\"game\"",
        "updated_array%0#0"
      ]
    },
    "654": {
      "op": "app_global_put",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0"
      ]
    },
    "655": {
      "op": "intc_1 // 0",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "0"
      ]
    },
    "656": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "0",
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "0",
        "\"turns\""
      ]
    },
    "657": {
      "op": "app_global_get_ex",
      "defined_out": [
        "and_result%0#0",
        "column#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "row#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "658": {
      "error": "check self.turns exists",
      "op": "assert // check self.turns exists",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%2#0"
      ]
    },
    "659": {
      "op": "intc_0 // 1",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "660": {
      "op": "+",
      "defined_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "tmp%3#0"
      ]
    },
    "661": {
      "op": "bytec_1 // \"turns\"",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "tmp%3#0",
        "\"turns\""
      ]
    },
    "662": {
      "op": "uncover 1",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "\"turns\"",
        "tmp%3#0"
      ]
    },
    "664": {
      "op": "app_global_put",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0"
      ]
    },
    "665": {
      "op": "frame_dig -3",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "column#0",
        "player#0 (copy)"
      ]
    },
    "667": {
      "op": "uncover 1",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "row#0",
        "player#0 (copy)",
        "column#0"
      ]
    },
    "669": {
      "op": "uncover 2",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "player#0 (copy)",
        "column#0",
        "row#0"
      ]
    },
    "671": {
      "callsub": "examples.tictactoe.tictactoe.TicTacToeContract.did_win",
      "op": "callsub did_win",
      "defined_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%4#0"
      ]
    },
    "674": {
      "op": "bz make_move_else_body@6",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "677": {
      "op": "b make_move_if_body@5"
    },
    "680": {
      "block": "make_move_if_body@5",
      "stack_in": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "bytec_3 // \"winner\"",
      "defined_out": [
        "\"winner\""
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "\"winner\""
      ]
    },
    "681": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"winner\"",
        "player#0 (copy)"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "\"winner\"",
        "player#0 (copy)"
      ]
    },
    "683": {
      "op": "app_global_put",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "684": {
      "op": "b make_move_after_if_else@9"
    },
    "687": {
      "block": "make_move_after_if_else@9",
      "stack_in": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "688": {
      "block": "make_move_else_body@6",
      "stack_in": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "0"
      ]
    },
    "689": {
      "op": "bytec_1 // \"turns\"",
      "defined_out": [
        "\"turns\"",
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "0",
        "\"turns\""
      ]
    },
    "690": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "691": {
      "error": "check self.turns exists",
      "op": "assert // check self.turns exists",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%3#0"
      ]
    },
    "692": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "maybe_value%3#0",
        "9"
      ]
    },
    "694": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "tmp%5#0"
      ]
    },
    "695": {
      "op": "bz make_move_after_if_else@8",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "698": {
      "op": "b make_move_if_body@7"
    },
    "701": {
      "block": "make_move_if_body@7",
      "stack_in": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "bytec_3 // \"winner\"",
      "defined_out": [
        "\"winner\""
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "\"winner\""
      ]
    },
    "702": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "\"winner\"",
        "0x03"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "\"winner\"",
        "0x03"
      ]
    },
    "705": {
      "op": "app_global_put",
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "706": {
      "op": "b make_move_after_if_else@8"
    },
    "709": {
      "block": "make_move_after_if_else@8",
      "stack_in": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "b make_move_after_if_else@9"
    },
    "712": {
      "block": "make_move_bool_false@3",
      "stack_in": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0",
        "0"
      ]
    },
    "713": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "and_result%0#0",
        "column#0",
        "row#0"
      ]
    },
    "715": {
      "op": "b make_move_bool_merge@4"
    },
    "718": {
      "subroutine": "examples.tictactoe.tictactoe.TicTacToeContract.did_win",
      "params": {
        "player#0": "bytes",
        "column#0": "uint64",
        "row#0": "uint64"
      },
      "block": "did_win",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "721": {
      "op": "intc_1 // 0",
      "stack_out": [
        "array_item%9#0"
      ]
    },
    "722": {
      "op": "b did_win_block@0"
    },
    "725": {
      "block": "did_win_block@0",
      "stack_in": [
        "array_item%9#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_item%9#0",
        "0"
      ]
    },
    "726": {
      "op": "bytec_0 // \"game\"",
      "defined_out": [
        "\"game\"",
        "0"
      ],
      "stack_out": [
        "array_item%9#0",
        "0",
        "\"game\""
      ]
    },
    "727": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "728": {
      "error": "check self.game exists",
      "op": "assert // check self.game exists",
      "stack_out": [
        "array_item%9#0",
        "maybe_value%0#0"
      ]
    },
    "729": {
      "op": "dup",
      "defined_out": [
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "g#0"
      ]
    },
    "730": {
      "op": "frame_dig -1",
      "defined_out": [
        "g#0",
        "row#0 (copy)"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "g#0",
        "row#0 (copy)"
      ]
    },
    "732": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "g#0",
        "row#0 (copy)"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "g#0",
        "row#0 (copy)",
        "3"
      ]
    },
    "733": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "g#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "734": {
      "op": "dig 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "g#0",
        "aggregate%bytes_offset%0#0",
        "g#0 (copy)"
      ]
    },
    "736": {
      "op": "uncover 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "g#0",
        "g#0 (copy)",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "738": {
      "op": "intc_2 // 3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "g#0",
        "g#0 (copy)",
        "aggregate%bytes_offset%0#0",
        "3"
      ]
    },
    "739": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%0#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "g#0",
        "array_item%0#0"
      ]
    },
    "740": {
      "op": "intc_1 // 0",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "g#0",
        "array_item%0#0",
        "0"
      ]
    },
    "741": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0",
        "1",
        "array_item%0#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "g#0",
        "array_item%0#0",
        "0",
        "1"
      ]
    },
    "742": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%1#0",
        "array_item%0#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "g#0",
        "array_item%0#0",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "743": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "g#0",
        "array_item%0#0",
        "aggregate%bytes_offset%1#0",
        "1"
      ]
    },
    "744": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%1#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "g#0",
        "array_item%1#0"
      ]
    },
    "745": {
      "op": "cover 1",
      "defined_out": [
        "g#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "g#0"
      ]
    },
    "747": {
      "op": "frame_dig -1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "g#0",
        "row#0 (copy)"
      ]
    },
    "749": {
      "op": "intc_2 // 3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "g#0",
        "row#0 (copy)",
        "3"
      ]
    },
    "750": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%2#0",
        "g#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "g#0",
        "aggregate%bytes_offset%2#0"
      ]
    },
    "751": {
      "op": "intc_2 // 3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "g#0",
        "aggregate%bytes_offset%2#0",
        "3"
      ]
    },
    "752": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%2#0",
        "g#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "array_item%2#0"
      ]
    },
    "753": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "array_item%2#0",
        "1"
      ]
    },
    "754": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "array_item%2#0",
        "1",
        "1"
      ]
    },
    "755": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%3#0",
        "array_item%2#0",
        "g#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "array_item%2#0",
        "aggregate%bytes_offset%3#0"
      ]
    },
    "756": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "array_item%2#0",
        "aggregate%bytes_offset%3#0",
        "1"
      ]
    },
    "757": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%3#0",
        "g#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "aggregate%encoded_element%3#0"
      ]
    },
    "758": {
      "op": "dup",
      "defined_out": [
        "array_item%3#0",
        "array_item%3#0 (copy)",
        "g#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "array_item%3#0",
        "array_item%3#0 (copy)"
      ]
    },
    "759": {
      "op": "cover 2",
      "defined_out": [
        "array_item%3#0",
        "g#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "761": {
      "op": "b==",
      "defined_out": [
        "array_item%3#0",
        "g#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "tmp%0#0"
      ]
    },
    "762": {
      "op": "bz did_win_after_if_else@3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ]
    },
    "765": {
      "op": "b did_win_and_contd@1"
    },
    "768": {
      "block": "did_win_and_contd@1",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "array_item%3#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "770": {
      "op": "frame_dig -1",
      "defined_out": [
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "row#0 (copy)"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "row#0 (copy)"
      ]
    },
    "772": {
      "op": "intc_2 // 3",
      "defined_out": [
        "3",
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "row#0 (copy)"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "row#0 (copy)",
        "3"
      ]
    },
    "773": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%4#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "aggregate%bytes_offset%4#0"
      ]
    },
    "774": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%bytes_offset%4#0",
        "array_item%3#0",
        "g#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "aggregate%bytes_offset%4#0",
        "g#0"
      ]
    },
    "776": {
      "op": "uncover 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "g#0",
        "aggregate%bytes_offset%4#0"
      ]
    },
    "778": {
      "op": "intc_2 // 3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "g#0",
        "aggregate%bytes_offset%4#0",
        "3"
      ]
    },
    "779": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%3#0",
        "array_item%4#0",
        "g#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "array_item%4#0"
      ]
    },
    "780": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array_item%3#0",
        "array_item%4#0",
        "g#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "array_item%4#0",
        "2"
      ]
    },
    "782": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "2",
        "array_item%3#0",
        "array_item%4#0",
        "g#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "array_item%4#0",
        "2",
        "1"
      ]
    },
    "783": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%5#0",
        "array_item%3#0",
        "array_item%4#0",
        "g#0",
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "array_item%4#0",
        "aggregate%bytes_offset%5#0"
      ]
    },
    "784": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "array_item%4#0",
        "aggregate%bytes_offset%5#0",
        "1"
      ]
    },
    "785": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%3#0",
        "g#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%2#0",
        "reinterpret_biguint%3#0"
      ]
    },
    "786": {
      "op": "b==",
      "defined_out": [
        "array_item%3#0",
        "g#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "tmp%1#0"
      ]
    },
    "787": {
      "op": "bz did_win_after_if_else@3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ]
    },
    "790": {
      "op": "b did_win_if_body@2"
    },
    "793": {
      "block": "did_win_if_body@2",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "1"
      ]
    },
    "794": {
      "op": "frame_bury 0"
    },
    "796": {
      "retsub": true,
      "op": "retsub"
    },
    "797": {
      "block": "did_win_after_if_else@3",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "0"
      ]
    },
    "798": {
      "op": "intc_2 // 3",
      "defined_out": [
        "0",
        "3"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "0",
        "3"
      ]
    },
    "799": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%6#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "aggregate%bytes_offset%6#0"
      ]
    },
    "800": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%bytes_offset%6#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "aggregate%bytes_offset%6#0",
        "g#0"
      ]
    },
    "802": {
      "op": "dup",
      "defined_out": [
        "aggregate%bytes_offset%6#0",
        "g#0",
        "g#0 (copy)"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "aggregate%bytes_offset%6#0",
        "g#0 (copy)",
        "g#0 (copy)"
      ]
    },
    "803": {
      "op": "cover 2",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "g#0",
        "aggregate%bytes_offset%6#0",
        "g#0 (copy)"
      ]
    },
    "805": {
      "op": "uncover 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "g#0",
        "g#0 (copy)",
        "aggregate%bytes_offset%6#0"
      ]
    },
    "807": {
      "op": "intc_2 // 3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "g#0",
        "g#0 (copy)",
        "aggregate%bytes_offset%6#0",
        "3"
      ]
    },
    "808": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%6#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "g#0",
        "array_item%6#0"
      ]
    },
    "809": {
      "op": "frame_dig -2",
      "defined_out": [
        "array_item%6#0",
        "column#0 (copy)",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "g#0",
        "array_item%6#0",
        "column#0 (copy)"
      ]
    },
    "811": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "array_item%6#0",
        "column#0 (copy)",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "g#0",
        "array_item%6#0",
        "column#0 (copy)",
        "1"
      ]
    },
    "812": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%7#0",
        "array_item%6#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "g#0",
        "array_item%6#0",
        "aggregate%bytes_offset%7#0"
      ]
    },
    "813": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "g#0",
        "array_item%6#0",
        "aggregate%bytes_offset%7#0",
        "1"
      ]
    },
    "814": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%7#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "g#0",
        "array_item%7#0"
      ]
    },
    "815": {
      "op": "cover 1",
      "defined_out": [
        "g#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%4#0",
        "g#0"
      ]
    },
    "817": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%4#0",
        "g#0",
        "1"
      ]
    },
    "818": {
      "op": "intc_2 // 3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%4#0",
        "g#0",
        "1",
        "3"
      ]
    },
    "819": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%8#0",
        "g#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%4#0",
        "g#0",
        "aggregate%bytes_offset%8#0"
      ]
    },
    "820": {
      "op": "intc_2 // 3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%4#0",
        "g#0",
        "aggregate%bytes_offset%8#0",
        "3"
      ]
    },
    "821": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%8#0",
        "g#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%4#0",
        "array_item%8#0"
      ]
    },
    "822": {
      "op": "frame_dig -2",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%4#0",
        "array_item%8#0",
        "column#0 (copy)"
      ]
    },
    "824": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%4#0",
        "array_item%8#0",
        "column#0 (copy)",
        "1"
      ]
    },
    "825": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%9#0",
        "array_item%8#0",
        "g#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%4#0",
        "array_item%8#0",
        "aggregate%bytes_offset%9#0"
      ]
    },
    "826": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%4#0",
        "array_item%8#0",
        "aggregate%bytes_offset%9#0",
        "1"
      ]
    },
    "827": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%9#0",
        "g#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%4#0",
        "aggregate%encoded_element%9#0"
      ]
    },
    "828": {
      "op": "dup",
      "defined_out": [
        "array_item%9#0",
        "array_item%9#0 (copy)",
        "g#0",
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%4#0",
        "array_item%9#0",
        "array_item%9#0 (copy)"
      ]
    },
    "829": {
      "op": "frame_bury 0",
      "defined_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%4#0",
        "reinterpret_biguint%5#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%4#0",
        "reinterpret_biguint%5#0"
      ]
    },
    "831": {
      "op": "b==",
      "defined_out": [
        "array_item%9#0",
        "g#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "tmp%2#0"
      ]
    },
    "832": {
      "op": "bz did_win_after_if_else@6",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ]
    },
    "835": {
      "op": "b did_win_and_contd@4"
    },
    "838": {
      "block": "did_win_and_contd@4",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "array_item%9#0",
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%6#0"
      ]
    },
    "840": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array_item%9#0",
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%6#0",
        "2"
      ]
    },
    "842": {
      "op": "intc_2 // 3",
      "defined_out": [
        "2",
        "3",
        "array_item%9#0",
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%6#0",
        "2",
        "3"
      ]
    },
    "843": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%10#0",
        "array_item%9#0",
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%6#0",
        "aggregate%bytes_offset%10#0"
      ]
    },
    "844": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%bytes_offset%10#0",
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%6#0",
        "aggregate%bytes_offset%10#0",
        "g#0"
      ]
    },
    "846": {
      "op": "uncover 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%6#0",
        "g#0",
        "aggregate%bytes_offset%10#0"
      ]
    },
    "848": {
      "op": "intc_2 // 3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%6#0",
        "g#0",
        "aggregate%bytes_offset%10#0",
        "3"
      ]
    },
    "849": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%10#0",
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%6#0",
        "array_item%10#0"
      ]
    },
    "850": {
      "op": "frame_dig -2",
      "defined_out": [
        "array_item%10#0",
        "array_item%9#0",
        "column#0 (copy)",
        "g#0",
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%6#0",
        "array_item%10#0",
        "column#0 (copy)"
      ]
    },
    "852": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "array_item%10#0",
        "array_item%9#0",
        "column#0 (copy)",
        "g#0",
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%6#0",
        "array_item%10#0",
        "column#0 (copy)",
        "1"
      ]
    },
    "853": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%11#0",
        "array_item%10#0",
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%6#0",
        "array_item%10#0",
        "aggregate%bytes_offset%11#0"
      ]
    },
    "854": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%6#0",
        "array_item%10#0",
        "aggregate%bytes_offset%11#0",
        "1"
      ]
    },
    "855": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%9#0",
        "g#0",
        "reinterpret_biguint%6#0",
        "reinterpret_biguint%7#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%6#0",
        "reinterpret_biguint%7#0"
      ]
    },
    "856": {
      "op": "b==",
      "defined_out": [
        "array_item%9#0",
        "g#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "tmp%3#0"
      ]
    },
    "857": {
      "op": "bz did_win_after_if_else@6",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ]
    },
    "860": {
      "op": "b did_win_if_body@5"
    },
    "863": {
      "block": "did_win_if_body@5",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "1"
      ]
    },
    "864": {
      "op": "frame_bury 0"
    },
    "866": {
      "retsub": true,
      "op": "retsub"
    },
    "867": {
      "block": "did_win_after_if_else@6",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "reinterpret_biguint%8#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%8#0"
      ]
    },
    "869": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "reinterpret_biguint%8#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%8#0",
        "1"
      ]
    },
    "870": {
      "op": "intc_2 // 3",
      "defined_out": [
        "1",
        "3",
        "reinterpret_biguint%8#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%8#0",
        "1",
        "3"
      ]
    },
    "871": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%12#0",
        "reinterpret_biguint%8#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%8#0",
        "aggregate%bytes_offset%12#0"
      ]
    },
    "872": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%bytes_offset%12#0",
        "g#0",
        "reinterpret_biguint%8#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%8#0",
        "aggregate%bytes_offset%12#0",
        "g#0"
      ]
    },
    "874": {
      "op": "uncover 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%8#0",
        "g#0",
        "aggregate%bytes_offset%12#0"
      ]
    },
    "876": {
      "op": "intc_2 // 3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%8#0",
        "g#0",
        "aggregate%bytes_offset%12#0",
        "3"
      ]
    },
    "877": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%12#0",
        "g#0",
        "reinterpret_biguint%8#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%8#0",
        "array_item%12#0"
      ]
    },
    "878": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%8#0",
        "array_item%12#0",
        "1"
      ]
    },
    "879": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%8#0",
        "array_item%12#0",
        "1",
        "1"
      ]
    },
    "880": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%13#0",
        "array_item%12#0",
        "g#0",
        "reinterpret_biguint%8#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%8#0",
        "array_item%12#0",
        "aggregate%bytes_offset%13#0"
      ]
    },
    "881": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%8#0",
        "array_item%12#0",
        "aggregate%bytes_offset%13#0",
        "1"
      ]
    },
    "882": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "g#0",
        "reinterpret_biguint%8#0",
        "reinterpret_biguint%9#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%8#0",
        "reinterpret_biguint%9#0"
      ]
    },
    "883": {
      "op": "b==",
      "defined_out": [
        "g#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "tmp%4#0"
      ]
    },
    "884": {
      "op": "bz did_win_after_if_else@14",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ]
    },
    "887": {
      "op": "b did_win_if_body@7"
    },
    "890": {
      "block": "did_win_if_body@7",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "0"
      ]
    },
    "891": {
      "op": "intc_2 // 3",
      "defined_out": [
        "0",
        "3"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "0",
        "3"
      ]
    },
    "892": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%14#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "aggregate%bytes_offset%14#0"
      ]
    },
    "893": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%bytes_offset%14#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "aggregate%bytes_offset%14#0",
        "g#0"
      ]
    },
    "895": {
      "op": "uncover 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "g#0",
        "aggregate%bytes_offset%14#0"
      ]
    },
    "897": {
      "op": "intc_2 // 3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "g#0",
        "aggregate%bytes_offset%14#0",
        "3"
      ]
    },
    "898": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%14#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "array_item%14#0"
      ]
    },
    "899": {
      "op": "intc_1 // 0",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "array_item%14#0",
        "0"
      ]
    },
    "900": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0",
        "1",
        "array_item%14#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "array_item%14#0",
        "0",
        "1"
      ]
    },
    "901": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%15#0",
        "array_item%14#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "array_item%14#0",
        "aggregate%bytes_offset%15#0"
      ]
    },
    "902": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "array_item%14#0",
        "aggregate%bytes_offset%15#0",
        "1"
      ]
    },
    "903": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "g#0",
        "reinterpret_biguint%10#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%10#0"
      ]
    },
    "904": {
      "op": "frame_dig -3",
      "defined_out": [
        "g#0",
        "reinterpret_biguint%10#0",
        "reinterpret_biguint%11#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%10#0",
        "reinterpret_biguint%11#0"
      ]
    },
    "906": {
      "op": "b==",
      "defined_out": [
        "g#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "tmp%5#0"
      ]
    },
    "907": {
      "op": "bz did_win_after_if_else@10",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ]
    },
    "910": {
      "op": "b did_win_and_contd@8"
    },
    "913": {
      "block": "did_win_and_contd@8",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "reinterpret_biguint%12#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%12#0"
      ]
    },
    "915": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "reinterpret_biguint%12#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%12#0",
        "2"
      ]
    },
    "917": {
      "op": "intc_2 // 3",
      "defined_out": [
        "2",
        "3",
        "reinterpret_biguint%12#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%12#0",
        "2",
        "3"
      ]
    },
    "918": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%16#0",
        "reinterpret_biguint%12#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%12#0",
        "aggregate%bytes_offset%16#0"
      ]
    },
    "919": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%bytes_offset%16#0",
        "g#0",
        "reinterpret_biguint%12#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%12#0",
        "aggregate%bytes_offset%16#0",
        "g#0"
      ]
    },
    "921": {
      "op": "uncover 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%12#0",
        "g#0",
        "aggregate%bytes_offset%16#0"
      ]
    },
    "923": {
      "op": "intc_2 // 3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%12#0",
        "g#0",
        "aggregate%bytes_offset%16#0",
        "3"
      ]
    },
    "924": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%16#0",
        "g#0",
        "reinterpret_biguint%12#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%12#0",
        "array_item%16#0"
      ]
    },
    "925": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%12#0",
        "array_item%16#0",
        "2"
      ]
    },
    "927": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "2",
        "array_item%16#0",
        "g#0",
        "reinterpret_biguint%12#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%12#0",
        "array_item%16#0",
        "2",
        "1"
      ]
    },
    "928": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%17#0",
        "array_item%16#0",
        "g#0",
        "reinterpret_biguint%12#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%12#0",
        "array_item%16#0",
        "aggregate%bytes_offset%17#0"
      ]
    },
    "929": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%12#0",
        "array_item%16#0",
        "aggregate%bytes_offset%17#0",
        "1"
      ]
    },
    "930": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "g#0",
        "reinterpret_biguint%12#0",
        "reinterpret_biguint%13#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%12#0",
        "reinterpret_biguint%13#0"
      ]
    },
    "931": {
      "op": "b==",
      "defined_out": [
        "g#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "tmp%6#0"
      ]
    },
    "932": {
      "op": "bz did_win_after_if_else@10",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ]
    },
    "935": {
      "op": "b did_win_if_body@9"
    },
    "938": {
      "block": "did_win_if_body@9",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "1"
      ]
    },
    "939": {
      "op": "frame_bury 0"
    },
    "941": {
      "retsub": true,
      "op": "retsub"
    },
    "942": {
      "block": "did_win_after_if_else@10",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "0"
      ]
    },
    "943": {
      "op": "intc_2 // 3",
      "defined_out": [
        "0",
        "3"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "0",
        "3"
      ]
    },
    "944": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%18#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "aggregate%bytes_offset%18#0"
      ]
    },
    "945": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%bytes_offset%18#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "aggregate%bytes_offset%18#0",
        "g#0"
      ]
    },
    "947": {
      "op": "uncover 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "g#0",
        "aggregate%bytes_offset%18#0"
      ]
    },
    "949": {
      "op": "intc_2 // 3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "g#0",
        "aggregate%bytes_offset%18#0",
        "3"
      ]
    },
    "950": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%18#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "array_item%18#0"
      ]
    },
    "951": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "array_item%18#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "array_item%18#0",
        "2"
      ]
    },
    "953": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "2",
        "array_item%18#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "array_item%18#0",
        "2",
        "1"
      ]
    },
    "954": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%19#0",
        "array_item%18#0",
        "g#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "array_item%18#0",
        "aggregate%bytes_offset%19#0"
      ]
    },
    "955": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "array_item%18#0",
        "aggregate%bytes_offset%19#0",
        "1"
      ]
    },
    "956": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "g#0",
        "reinterpret_biguint%14#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%14#0"
      ]
    },
    "957": {
      "op": "frame_dig -3",
      "defined_out": [
        "g#0",
        "reinterpret_biguint%14#0",
        "reinterpret_biguint%15#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%14#0",
        "reinterpret_biguint%15#0"
      ]
    },
    "959": {
      "op": "b==",
      "defined_out": [
        "g#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "tmp%7#0"
      ]
    },
    "960": {
      "op": "bz did_win_after_if_else@13",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ]
    },
    "963": {
      "op": "b did_win_and_contd@11"
    },
    "966": {
      "block": "did_win_and_contd@11",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "reinterpret_biguint%16#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%16#0"
      ]
    },
    "968": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "reinterpret_biguint%16#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%16#0",
        "2"
      ]
    },
    "970": {
      "op": "intc_2 // 3",
      "defined_out": [
        "2",
        "3",
        "reinterpret_biguint%16#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%16#0",
        "2",
        "3"
      ]
    },
    "971": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%20#0",
        "reinterpret_biguint%16#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%16#0",
        "aggregate%bytes_offset%20#0"
      ]
    },
    "972": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%bytes_offset%20#0",
        "g#0",
        "reinterpret_biguint%16#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%16#0",
        "aggregate%bytes_offset%20#0",
        "g#0"
      ]
    },
    "974": {
      "op": "uncover 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%16#0",
        "g#0",
        "aggregate%bytes_offset%20#0"
      ]
    },
    "976": {
      "op": "intc_2 // 3",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%16#0",
        "g#0",
        "aggregate%bytes_offset%20#0",
        "3"
      ]
    },
    "977": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%20#0",
        "g#0",
        "reinterpret_biguint%16#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%16#0",
        "array_item%20#0"
      ]
    },
    "978": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "array_item%20#0",
        "g#0",
        "reinterpret_biguint%16#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%16#0",
        "array_item%20#0",
        "0"
      ]
    },
    "979": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0",
        "1",
        "array_item%20#0",
        "g#0",
        "reinterpret_biguint%16#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%16#0",
        "array_item%20#0",
        "0",
        "1"
      ]
    },
    "980": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%21#0",
        "array_item%20#0",
        "g#0",
        "reinterpret_biguint%16#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%16#0",
        "array_item%20#0",
        "aggregate%bytes_offset%21#0"
      ]
    },
    "981": {
      "op": "intc_0 // 1",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%16#0",
        "array_item%20#0",
        "aggregate%bytes_offset%21#0",
        "1"
      ]
    },
    "982": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "g#0",
        "reinterpret_biguint%16#0",
        "reinterpret_biguint%17#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "reinterpret_biguint%16#0",
        "reinterpret_biguint%17#0"
      ]
    },
    "983": {
      "op": "b==",
      "defined_out": [
        "g#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "tmp%8#0"
      ]
    },
    "984": {
      "op": "bz did_win_after_if_else@13",
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ]
    },
    "987": {
      "op": "b did_win_if_body@12"
    },
    "990": {
      "block": "did_win_if_body@12",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "1"
      ]
    },
    "991": {
      "op": "frame_bury 0"
    },
    "993": {
      "retsub": true,
      "op": "retsub"
    },
    "994": {
      "block": "did_win_after_if_else@13",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "b did_win_after_if_else@14"
    },
    "997": {
      "block": "did_win_after_if_else@14",
      "stack_in": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "array_item%9#0",
        "g#0",
        "array_item%3#0",
        "0"
      ]
    },
    "998": {
      "op": "frame_bury 0"
    },
    "1000": {
      "retsub": true,
      "op": "retsub"
    }
  }
}