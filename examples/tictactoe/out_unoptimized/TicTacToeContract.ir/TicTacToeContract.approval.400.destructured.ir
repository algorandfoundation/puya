main examples.tictactoe.tictactoe.TicTacToeContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        examples.tictactoe.tictactoe.TicTacToeContract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine examples.tictactoe.tictactoe.TicTacToeContract.__init__() -> void:
    block@0: // L16
        return 

subroutine examples.tictactoe.tictactoe.TicTacToeContract.new_game(move.0: uint64, move.1: uint64) -> void:
    block@0: // L20
        let reinterpret_bool%0#0: bool = (txn ApplicationID)
        goto reinterpret_bool%0#0 ? block@1 : block@4
    block@1: // if_body_L25
        let (_%0#0: account, maybe_exists%0#0: bool) = (app_global_get_ex 0u "challenger")
        goto maybe_exists%0#0 ? block@2 : block@3
    block@2: // if_body_L26
        let (_%1#0: Encoded(uint8), maybe_exists%1#0: bool) = (app_global_get_ex 0u "winner")
        (assert maybe_exists%1#0) // Game isn't over
        goto block@3
    block@3: // after_if_else_L25
        (app_global_del "challenger")
        (app_global_del "winner")
        goto block@4
    block@4: // after_if_else_L22
        let tmp%0#0: account = (txn Sender)
        (app_global_put "host" tmp%0#0)
        let reinterpret_Encoded(uint8[3][3])%0#0: Encoded(uint8[3][3]) = (bzero 9u)
        (app_global_put "game" reinterpret_Encoded(uint8[3][3])%0#0)
        let column#0: uint64 = move.0#0
        let row#0: uint64 = move.1#0
        let tmp%1#0: bool = (< column#0 3u)
        goto tmp%1#0 ? block@5 : block@7
    block@5: // and_contd_L33
        let tmp%2#0: bool = (< row#0 3u)
        goto tmp%2#0 ? block@6 : block@7
    block@6: // bool_true_L33
        let and_result%0#0: bool = 1u
        goto block@8
    block@7: // bool_false_L33
        let and_result%0#0: bool = 0u
        goto block@8
    block@8: // bool_merge_L33
        (assert and_result%0#0) // Move must be in range
        let (maybe_value%0#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%2#0) // check self.game exists
        let aggregate%bytes_offset%0#0: uint64 = (* row#0 3u)
        let aggregate%encoded_element%0#0: bytes = (extract3 maybe_value%0#0 aggregate%bytes_offset%0#0 3u) // on error: index access is out of bounds
        let aggregate%write_offset%0#0: uint64 = (* column#0 1u)
        let aggregate%updated_array%0#0: bytes = (replace3 aggregate%encoded_element%0#0 aggregate%write_offset%0#0 0x01)
        let aggregate%write_offset%1#0: uint64 = (* row#0 3u)
        let aggregate%updated_array%1#0: bytes = (replace3 maybe_value%0#0 aggregate%write_offset%1#0 aggregate%updated_array%0#0)
        let updated_array%0#0: Encoded(uint8[3][3]) = aggregate%updated_array%1#0
        (app_global_put "game" updated_array%0#0)
        (app_global_put "turns" 0u)
        return 

subroutine examples.tictactoe.tictactoe.TicTacToeContract.join_game(move.0: uint64, move.1: uint64) -> void:
    block@0: // L37
        let (_%0#0: account, maybe_exists%0#0: bool) = (app_global_get_ex 0u "challenger")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0) // Host already has a challenger
        let tmp%1#0: account = (txn Sender)
        (app_global_put "challenger" tmp%1#0)
        examples.tictactoe.tictactoe.TicTacToeContract.make_move(0x02, move.0#0, move.1#0)
        return 

subroutine examples.tictactoe.tictactoe.TicTacToeContract.whose_turn() -> Encoded(uint8):
    block@0: // L43
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%0#0) // check self.turns exists
        let tmp%0#0: uint64 = (% maybe_value%0#0 2u)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        let select%0#0: Encoded(uint8) = (select 0x02 0x01 tmp%1#0)
        return select%0#0

subroutine examples.tictactoe.tictactoe.TicTacToeContract.play(move.0: uint64, move.1: uint64) -> void:
    block@0: // L47
        let (_%0#0: Encoded(uint8), maybe_exists%0#0: bool) = (app_global_get_ex 0u "winner")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0) // Game is already finished
        let (maybe_value%0#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%1#0) // check self.turns exists
        let tmp%1#0: uint64 = (% maybe_value%0#0 2u)
        let tmp%2#0: bool = (!= tmp%1#0 0u)
        goto tmp%2#0 ? block@1 : block@2
    block@1: // if_body_L51
        let tmp%3#0: account = (txn Sender)
        let (maybe_value%1#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "host")
        (assert maybe_exists%2#0) // check self.host exists
        let tmp%4#0: bool = (== tmp%3#0 maybe_value%1#0)
        (assert tmp%4#0) // It is the host's turn
        let player#0: Encoded(uint8) = 0x01
        goto block@3
    block@2: // else_body_L54
        let tmp%5#0: account = (txn Sender)
        let tmp%6#0: account = (global ZeroAddress)
        let (maybe_value%2#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "challenger")
        let state_get%0#0: bytes = (select tmp%6#0 maybe_value%2#0 maybe_exists%3#0)
        let tmp%7#0: bool = (== tmp%5#0 state_get%0#0)
        (assert tmp%7#0) // It is the challenger's turn
        let player#0: Encoded(uint8) = 0x02
        goto block@3
    block@3: // after_if_else_L50
        examples.tictactoe.tictactoe.TicTacToeContract.make_move(player#0, move.0#0, move.1#0)
        return 

subroutine examples.tictactoe.tictactoe.TicTacToeContract.make_move(player: Encoded(uint8), move.0: uint64, move.1: uint64) -> void:
    block@0: // L60
        let column#0: uint64 = move.0#0
        let row#0: uint64 = move.1#0
        let tmp%0#0: bool = (< column#0 3u)
        goto tmp%0#0 ? block@1 : block@3
    block@1: // and_contd_L63
        let tmp%1#0: bool = (< row#0 3u)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // bool_true_L63
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L63
        let and_result%0#0: bool = 0u
        goto block@4
    block@4: // bool_merge_L63
        (assert and_result%0#0) // Move must be in range
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%0#0) // check self.game exists
        let aggregate%bytes_offset%0#0: uint64 = (* row#0 3u)
        let aggregate%encoded_element%0#0: bytes = (extract3 maybe_value%0#0 aggregate%bytes_offset%0#0 3u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8[3]) = aggregate%encoded_element%0#0
        let values%0#0: Encoded(uint8[3]) = array_item%0#0
        let aggregate%bytes_offset%1#0: uint64 = (* column#0 1u)
        let aggregate%encoded_element%1#0: bytes = (extract3 values%0#0 aggregate%bytes_offset%1#0 1u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint8) = aggregate%encoded_element%1#0
        let values%1#0: Encoded(uint8) = array_item%1#0
        let reinterpret_biguint%0#0: biguint = values%1#0
        let tmp%2#0: bool = (b== reinterpret_biguint%0#0 0x00)
        (assert tmp%2#0) // Square is already taken
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%1#0) // check self.game exists
        let encoded_value%0#0: Encoded(uint8) = player#0
        let aggregate%bytes_offset%2#0: uint64 = (* row#0 3u)
        let aggregate%encoded_element%2#0: bytes = (extract3 maybe_value%1#0 aggregate%bytes_offset%2#0 3u) // on error: index access is out of bounds
        let aggregate%write_offset%0#0: uint64 = (* column#0 1u)
        let aggregate%updated_array%0#0: bytes = (replace3 aggregate%encoded_element%2#0 aggregate%write_offset%0#0 encoded_value%0#0)
        let aggregate%write_offset%1#0: uint64 = (* row#0 3u)
        let aggregate%updated_array%1#0: bytes = (replace3 maybe_value%1#0 aggregate%write_offset%1#0 aggregate%updated_array%0#0)
        let updated_array%0#0: Encoded(uint8[3][3]) = aggregate%updated_array%1#0
        (app_global_put "game" updated_array%0#0)
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%2#0) // check self.turns exists
        let tmp%3#0: uint64 = (+ maybe_value%2#0 1u)
        (app_global_put "turns" tmp%3#0)
        let tmp%4#0: bool = examples.tictactoe.tictactoe.TicTacToeContract.did_win(player#0, column#0, row#0)
        goto tmp%4#0 ? block@5 : block@6
    block@5: // if_body_L68
        (app_global_put "winner" player#0)
        goto block@9
    block@6: // else_body_L69
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "turns")
        (assert maybe_exists%3#0) // check self.turns exists
        let tmp%5#0: bool = (== maybe_value%3#0 9u)
        goto tmp%5#0 ? block@7 : block@8
    block@7: // if_body_L70
        (app_global_put "winner" 0x03)
        goto block@8
    block@8: // after_if_else_L69
        goto block@9
    block@9: // after_if_else_L67
        return 

subroutine examples.tictactoe.tictactoe.TicTacToeContract.did_win(player: Encoded(uint8), column: uint64, row: uint64) -> bool:
    block@0: // L72
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "game")
        (assert maybe_exists%0#0) // check self.game exists
        let g#0: Encoded(uint8[3][3]) = maybe_value%0#0
        let aggregate%bytes_offset%0#0: uint64 = (* row#0 3u)
        let aggregate%encoded_element%0#0: bytes = (extract3 g#0 aggregate%bytes_offset%0#0 3u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8[3]) = aggregate%encoded_element%0#0
        let values%0#0: Encoded(uint8[3]) = array_item%0#0
        let aggregate%bytes_offset%1#0: uint64 = (* 0u 1u)
        let aggregate%encoded_element%1#0: bytes = (extract3 values%0#0 aggregate%bytes_offset%1#0 1u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint8) = aggregate%encoded_element%1#0
        let values%1#0: Encoded(uint8) = array_item%1#0
        let reinterpret_biguint%0#0: biguint = values%1#0
        let aggregate%bytes_offset%2#0: uint64 = (* row#0 3u)
        let aggregate%encoded_element%2#0: bytes = (extract3 g#0 aggregate%bytes_offset%2#0 3u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint8[3]) = aggregate%encoded_element%2#0
        let values%2#0: Encoded(uint8[3]) = array_item%2#0
        let aggregate%bytes_offset%3#0: uint64 = (* 1u 1u)
        let aggregate%encoded_element%3#0: bytes = (extract3 values%2#0 aggregate%bytes_offset%3#0 1u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint8) = aggregate%encoded_element%3#0
        let values%3#0: Encoded(uint8) = array_item%3#0
        let reinterpret_biguint%1#0: biguint = values%3#0
        let tmp%0#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        goto tmp%0#0 ? block@1 : block@3
    block@1: // and_contd_L76
        let reinterpret_biguint%2#0: biguint = values%3#0
        let aggregate%bytes_offset%4#0: uint64 = (* row#0 3u)
        let aggregate%encoded_element%4#0: bytes = (extract3 g#0 aggregate%bytes_offset%4#0 3u) // on error: index access is out of bounds
        let array_item%4#0: Encoded(uint8[3]) = aggregate%encoded_element%4#0
        let values%4#0: Encoded(uint8[3]) = array_item%4#0
        let aggregate%bytes_offset%5#0: uint64 = (* 2u 1u)
        let aggregate%encoded_element%5#0: bytes = (extract3 values%4#0 aggregate%bytes_offset%5#0 1u) // on error: index access is out of bounds
        let array_item%5#0: Encoded(uint8) = aggregate%encoded_element%5#0
        let values%5#0: Encoded(uint8) = array_item%5#0
        let reinterpret_biguint%3#0: biguint = values%5#0
        let tmp%1#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // if_body_L77
        return 1u
    block@3: // after_if_else_L76
        let aggregate%bytes_offset%6#0: uint64 = (* 0u 3u)
        let aggregate%encoded_element%6#0: bytes = (extract3 g#0 aggregate%bytes_offset%6#0 3u) // on error: index access is out of bounds
        let array_item%6#0: Encoded(uint8[3]) = aggregate%encoded_element%6#0
        let values%6#0: Encoded(uint8[3]) = array_item%6#0
        let aggregate%bytes_offset%7#0: uint64 = (* column#0 1u)
        let aggregate%encoded_element%7#0: bytes = (extract3 values%6#0 aggregate%bytes_offset%7#0 1u) // on error: index access is out of bounds
        let array_item%7#0: Encoded(uint8) = aggregate%encoded_element%7#0
        let values%7#0: Encoded(uint8) = array_item%7#0
        let reinterpret_biguint%4#0: biguint = values%7#0
        let aggregate%bytes_offset%8#0: uint64 = (* 1u 3u)
        let aggregate%encoded_element%8#0: bytes = (extract3 g#0 aggregate%bytes_offset%8#0 3u) // on error: index access is out of bounds
        let array_item%8#0: Encoded(uint8[3]) = aggregate%encoded_element%8#0
        let values%8#0: Encoded(uint8[3]) = array_item%8#0
        let aggregate%bytes_offset%9#0: uint64 = (* column#0 1u)
        let aggregate%encoded_element%9#0: bytes = (extract3 values%8#0 aggregate%bytes_offset%9#0 1u) // on error: index access is out of bounds
        let array_item%9#0: Encoded(uint8) = aggregate%encoded_element%9#0
        let values%9#0: Encoded(uint8) = array_item%9#0
        let reinterpret_biguint%5#0: biguint = values%9#0
        let tmp%2#0: bool = (b== reinterpret_biguint%4#0 reinterpret_biguint%5#0)
        goto tmp%2#0 ? block@4 : block@6
    block@4: // and_contd_L79
        let reinterpret_biguint%6#0: biguint = values%9#0
        let aggregate%bytes_offset%10#0: uint64 = (* 2u 3u)
        let aggregate%encoded_element%10#0: bytes = (extract3 g#0 aggregate%bytes_offset%10#0 3u) // on error: index access is out of bounds
        let array_item%10#0: Encoded(uint8[3]) = aggregate%encoded_element%10#0
        let values%10#0: Encoded(uint8[3]) = array_item%10#0
        let aggregate%bytes_offset%11#0: uint64 = (* column#0 1u)
        let aggregate%encoded_element%11#0: bytes = (extract3 values%10#0 aggregate%bytes_offset%11#0 1u) // on error: index access is out of bounds
        let array_item%11#0: Encoded(uint8) = aggregate%encoded_element%11#0
        let values%11#0: Encoded(uint8) = array_item%11#0
        let reinterpret_biguint%7#0: biguint = values%11#0
        let tmp%3#0: bool = (b== reinterpret_biguint%6#0 reinterpret_biguint%7#0)
        goto tmp%3#0 ? block@5 : block@6
    block@5: // if_body_L80
        return 1u
    block@6: // after_if_else_L79
        let reinterpret_biguint%8#0: biguint = player#0
        let aggregate%bytes_offset%12#0: uint64 = (* 1u 3u)
        let aggregate%encoded_element%12#0: bytes = (extract3 g#0 aggregate%bytes_offset%12#0 3u) // on error: index access is out of bounds
        let array_item%12#0: Encoded(uint8[3]) = aggregate%encoded_element%12#0
        let values%12#0: Encoded(uint8[3]) = array_item%12#0
        let aggregate%bytes_offset%13#0: uint64 = (* 1u 1u)
        let aggregate%encoded_element%13#0: bytes = (extract3 values%12#0 aggregate%bytes_offset%13#0 1u) // on error: index access is out of bounds
        let array_item%13#0: Encoded(uint8) = aggregate%encoded_element%13#0
        let values%13#0: Encoded(uint8) = array_item%13#0
        let reinterpret_biguint%9#0: biguint = values%13#0
        let tmp%4#0: bool = (b== reinterpret_biguint%8#0 reinterpret_biguint%9#0)
        goto tmp%4#0 ? block@7 : block@14
    block@7: // if_body_L84
        let aggregate%bytes_offset%14#0: uint64 = (* 0u 3u)
        let aggregate%encoded_element%14#0: bytes = (extract3 g#0 aggregate%bytes_offset%14#0 3u) // on error: index access is out of bounds
        let array_item%14#0: Encoded(uint8[3]) = aggregate%encoded_element%14#0
        let values%14#0: Encoded(uint8[3]) = array_item%14#0
        let aggregate%bytes_offset%15#0: uint64 = (* 0u 1u)
        let aggregate%encoded_element%15#0: bytes = (extract3 values%14#0 aggregate%bytes_offset%15#0 1u) // on error: index access is out of bounds
        let array_item%15#0: Encoded(uint8) = aggregate%encoded_element%15#0
        let values%15#0: Encoded(uint8) = array_item%15#0
        let reinterpret_biguint%10#0: biguint = values%15#0
        let reinterpret_biguint%11#0: biguint = player#0
        let tmp%5#0: bool = (b== reinterpret_biguint%10#0 reinterpret_biguint%11#0)
        goto tmp%5#0 ? block@8 : block@10
    block@8: // and_contd_L84
        let reinterpret_biguint%12#0: biguint = player#0
        let aggregate%bytes_offset%16#0: uint64 = (* 2u 3u)
        let aggregate%encoded_element%16#0: bytes = (extract3 g#0 aggregate%bytes_offset%16#0 3u) // on error: index access is out of bounds
        let array_item%16#0: Encoded(uint8[3]) = aggregate%encoded_element%16#0
        let values%16#0: Encoded(uint8[3]) = array_item%16#0
        let aggregate%bytes_offset%17#0: uint64 = (* 2u 1u)
        let aggregate%encoded_element%17#0: bytes = (extract3 values%16#0 aggregate%bytes_offset%17#0 1u) // on error: index access is out of bounds
        let array_item%17#0: Encoded(uint8) = aggregate%encoded_element%17#0
        let values%17#0: Encoded(uint8) = array_item%17#0
        let reinterpret_biguint%13#0: biguint = values%17#0
        let tmp%6#0: bool = (b== reinterpret_biguint%12#0 reinterpret_biguint%13#0)
        goto tmp%6#0 ? block@9 : block@10
    block@9: // if_body_L85
        return 1u
    block@10: // after_if_else_L84
        let aggregate%bytes_offset%18#0: uint64 = (* 0u 3u)
        let aggregate%encoded_element%18#0: bytes = (extract3 g#0 aggregate%bytes_offset%18#0 3u) // on error: index access is out of bounds
        let array_item%18#0: Encoded(uint8[3]) = aggregate%encoded_element%18#0
        let values%18#0: Encoded(uint8[3]) = array_item%18#0
        let aggregate%bytes_offset%19#0: uint64 = (* 2u 1u)
        let aggregate%encoded_element%19#0: bytes = (extract3 values%18#0 aggregate%bytes_offset%19#0 1u) // on error: index access is out of bounds
        let array_item%19#0: Encoded(uint8) = aggregate%encoded_element%19#0
        let values%19#0: Encoded(uint8) = array_item%19#0
        let reinterpret_biguint%14#0: biguint = values%19#0
        let reinterpret_biguint%15#0: biguint = player#0
        let tmp%7#0: bool = (b== reinterpret_biguint%14#0 reinterpret_biguint%15#0)
        goto tmp%7#0 ? block@11 : block@13
    block@11: // and_contd_L86
        let reinterpret_biguint%16#0: biguint = player#0
        let aggregate%bytes_offset%20#0: uint64 = (* 2u 3u)
        let aggregate%encoded_element%20#0: bytes = (extract3 g#0 aggregate%bytes_offset%20#0 3u) // on error: index access is out of bounds
        let array_item%20#0: Encoded(uint8[3]) = aggregate%encoded_element%20#0
        let values%20#0: Encoded(uint8[3]) = array_item%20#0
        let aggregate%bytes_offset%21#0: uint64 = (* 0u 1u)
        let aggregate%encoded_element%21#0: bytes = (extract3 values%20#0 aggregate%bytes_offset%21#0 1u) // on error: index access is out of bounds
        let array_item%21#0: Encoded(uint8) = aggregate%encoded_element%21#0
        let values%21#0: Encoded(uint8) = array_item%21#0
        let reinterpret_biguint%17#0: biguint = values%21#0
        let tmp%8#0: bool = (b== reinterpret_biguint%16#0 reinterpret_biguint%17#0)
        goto tmp%8#0 ? block@12 : block@13
    block@12: // if_body_L87
        return 1u
    block@13: // after_if_else_L86
        goto block@14
    block@14: // after_if_else_L83
        return 0u

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L15
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@9
    block@2: // abi_routing_L15
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "new_game((uint64,uint64))void" => block@3, method "join_game((uint64,uint64))void" => block@4, method "whose_turn()uint8" => block@5, method "play((uint64,uint64))void" => block@6, * => block@7}
    block@3: // new_game_route_L20
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let reinterpret_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%0#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%0#0 0u 8u)
        let aggregate%item0%0#0: uint64 = (btoi aggregate%extract%0#0)
        let aggregate%extract%1#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%0#0 8u 8u)
        let aggregate%item1%0#0: uint64 = (btoi aggregate%extract%1#0)
        let tmp%5#0: uint64 = aggregate%item0%0#0
        let tmp%6#0: uint64 = aggregate%item1%0#0
        examples.tictactoe.tictactoe.TicTacToeContract.new_game(tmp%5#0, tmp%6#0)
        let examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__%0#0
        goto block@11
    block@4: // join_game_route_L37
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%2#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%1#0 0u 8u)
        let aggregate%item0%1#0: uint64 = (btoi aggregate%extract%2#0)
        let aggregate%extract%3#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%1#0 8u 8u)
        let aggregate%item1%1#0: uint64 = (btoi aggregate%extract%3#0)
        let tmp%11#0: uint64 = aggregate%item0%1#0
        let tmp%12#0: uint64 = aggregate%item1%1#0
        examples.tictactoe.tictactoe.TicTacToeContract.join_game(tmp%11#0, tmp%12#0)
        let examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__%0#0
        goto block@11
    block@5: // whose_turn_route_L43
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let tmp%17#0: Encoded(uint8) = examples.tictactoe.tictactoe.TicTacToeContract.whose_turn()
        let tmp%18#0: bytes = (concat 0x151f7c75 tmp%17#0)
        (log tmp%18#0)
        let examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__%0#0
        goto block@11
    block@6: // play_route_L47
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        let reinterpret_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = (txna ApplicationArgs 1)
        let aggregate%extract%4#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%2#0 0u 8u)
        let aggregate%item0%2#0: uint64 = (btoi aggregate%extract%4#0)
        let aggregate%extract%5#0: bytes = (extract3 reinterpret_Encoded(uint64,uint64)%2#0 8u 8u)
        let aggregate%item1%2#0: uint64 = (btoi aggregate%extract%5#0)
        let tmp%23#0: uint64 = aggregate%item0%2#0
        let tmp%24#0: uint64 = aggregate%item1%2#0
        examples.tictactoe.tictactoe.TicTacToeContract.play(tmp%23#0, tmp%24#0)
        let examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__%0#0
        goto block@11
    block@7: // switch_case_default_L15
        goto block@8
    block@8: // switch_case_next_L15
        goto block@10
    block@9: // bare_routing_L15
        goto block@10
    block@10: // after_if_else_L15
        let examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__%0#0
        goto block@11
    block@11: // after_inlined_examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router___L1
        return tmp%0#0