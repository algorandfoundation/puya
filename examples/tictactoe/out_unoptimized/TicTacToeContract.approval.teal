#pragma version 10

examples.tictactoe.tictactoe.TicTacToeContract.approval_program:
    intcblock 1 0 3 2
    bytecblock "game" "turns" "challenger" "winner" 0x01 0x02 "host"
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// examples.tictactoe.tictactoe.TicTacToeContract.__init__() -> void:
__init__:
    // tictactoe/tictactoe.py:16
    // def __init__(self) -> None:
    proto 0 0
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // tictactoe/tictactoe.py:15
    // class TicTacToeContract(arc4.ARC4Contract):
    proto 0 1
    txn NumAppArgs
    intc_1 // 0
    !=
    bz __puya_arc4_router___bare_routing@8
    txna ApplicationArgs 0
    pushbytes 0x96a97181 // method "new_game((uint64,uint64))void"
    pushbytes 0x17a079b3 // method "join_game((uint64,uint64))void"
    pushbytes 0xbb9f1147 // method "whose_turn()uint8"
    pushbytes 0x9eebf58e // method "play((uint64,uint64))void"
    uncover 4
    match __puya_arc4_router___new_game_route@2 __puya_arc4_router___join_game_route@3 __puya_arc4_router___whose_turn_route@4 __puya_arc4_router___play_route@5
    b __puya_arc4_router___switch_case_default@6

__puya_arc4_router___new_game_route@2:
    // tictactoe/tictactoe.py:20
    // @arc4.abimethod(create="allow")
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    // tictactoe/tictactoe.py:15
    // class TicTacToeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 8 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    // tictactoe/tictactoe.py:20
    // @arc4.abimethod(create="allow")
    callsub new_game
    intc_0 // 1
    retsub

__puya_arc4_router___join_game_route@3:
    // tictactoe/tictactoe.py:37
    // @arc4.abimethod
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    // tictactoe/tictactoe.py:15
    // class TicTacToeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 8 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    // tictactoe/tictactoe.py:37
    // @arc4.abimethod
    callsub join_game
    intc_0 // 1
    retsub

__puya_arc4_router___whose_turn_route@4:
    // tictactoe/tictactoe.py:43
    // @arc4.abimethod
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    callsub whose_turn
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___play_route@5:
    // tictactoe/tictactoe.py:47
    // @arc4.abimethod
    txn OnCompletion
    intc_1 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_1 // 0
    !=
    assert // can only call when not creating
    // tictactoe/tictactoe.py:15
    // class TicTacToeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    dup
    intc_1 // 0
    pushint 8 // 8
    extract3 // on error: Index access is out of bounds
    btoi
    swap
    pushint 8 // 8
    dup
    extract3 // on error: Index access is out of bounds
    btoi
    // tictactoe/tictactoe.py:47
    // @arc4.abimethod
    callsub play
    intc_0 // 1
    retsub

__puya_arc4_router___switch_case_default@6:
    b __puya_arc4_router___after_if_else@9

__puya_arc4_router___bare_routing@8:

__puya_arc4_router___after_if_else@9:
    // tictactoe/tictactoe.py:15
    // class TicTacToeContract(arc4.ARC4Contract):
    intc_1 // 0
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.new_game(move.0: uint64, move.1: uint64) -> void:
new_game:
    // tictactoe/tictactoe.py:20-21
    // @arc4.abimethod(create="allow")
    // def new_game(self, move: Move) -> None:
    proto 2 0
    pushbytes ""
    dup
    // tictactoe/tictactoe.py:22
    // if Txn.application_id:
    txn ApplicationID
    bz new_game_after_if_else@4
    // tictactoe/tictactoe.py:23-25
    // # if a challenger has joined, don't allow starting a new game
    // # until this one is complete
    // if self.challenger:
    intc_1 // 0
    bytec_2 // "challenger"
    app_global_get_ex
    bury 1
    bz new_game_after_if_else@3
    // tictactoe/tictactoe.py:26
    // assert self.winner, "Game isn't over"
    intc_1 // 0
    bytec_3 // "winner"
    app_global_get_ex
    bury 1
    assert // Game isn't over

new_game_after_if_else@3:
    // tictactoe/tictactoe.py:27-28
    // # reset challenger and winner
    // del self.challenger.value
    bytec_2 // "challenger"
    app_global_del
    // tictactoe/tictactoe.py:29
    // del self.winner.value
    bytec_3 // "winner"
    app_global_del

new_game_after_if_else@4:
    // tictactoe/tictactoe.py:30
    // self.host = Txn.sender
    txn Sender
    bytec 6 // "host"
    swap
    app_global_put
    // tictactoe/tictactoe.py:31
    // self.game = Game.from_bytes(op.bzero(9))
    pushint 9 // 9
    bzero
    bytec_0 // "game"
    swap
    app_global_put
    // tictactoe/tictactoe.py:32
    // column, row = move
    frame_dig -2
    dup
    frame_bury 0
    frame_dig -1
    frame_bury 1
    // tictactoe/tictactoe.py:33
    // assert column < 3 and row < 3, "Move must be in range"
    intc_2 // 3
    <
    bz new_game_bool_false@7
    frame_dig 1
    intc_2 // 3
    <
    bz new_game_bool_false@7
    intc_0 // 1
    b new_game_bool_merge@8

new_game_bool_false@7:
    intc_1 // 0

new_game_bool_merge@8:
    // tictactoe/tictactoe.py:33
    // assert column < 3 and row < 3, "Move must be in range"
    assert // Move must be in range
    // tictactoe/tictactoe.py:34
    // self.game[row][column] = arc4.UInt8(HOST)
    intc_1 // 0
    bytec_0 // "game"
    app_global_get_ex
    assert // check self.game exists
    dup
    frame_dig 1
    dup
    cover 2
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    frame_dig 0
    dup
    intc_2 // 3
    <
    assert // Index access is out of bounds
    intc_0 // 1
    *
    bytec 4 // 0x01
    replace3
    dig 1
    intc_2 // 3
    <
    assert // Index access is out of bounds
    swap
    intc_2 // 3
    *
    uncover 2
    swap
    uncover 2
    replace3
    bytec_0 // "game"
    swap
    app_global_put
    // tictactoe/tictactoe.py:35
    // self.turns = UInt64(0)
    bytec_1 // "turns"
    intc_1 // 0
    app_global_put
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.join_game(move.0: uint64, move.1: uint64) -> void:
join_game:
    // tictactoe/tictactoe.py:37-38
    // @arc4.abimethod
    // def join_game(self, move: Move) -> None:
    proto 2 0
    // tictactoe/tictactoe.py:39
    // assert not self.challenger, "Host already has a challenger"
    intc_1 // 0
    bytec_2 // "challenger"
    app_global_get_ex
    bury 1
    !
    assert // Host already has a challenger
    // tictactoe/tictactoe.py:40
    // self.challenger.value = Txn.sender
    txn Sender
    bytec_2 // "challenger"
    swap
    app_global_put
    // tictactoe/tictactoe.py:41
    // self.make_move(arc4.UInt8(CHALLENGER), move)
    bytec 5 // 0x02
    frame_dig -2
    frame_dig -1
    callsub make_move
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.make_move(player: bytes, move.0: uint64, move.1: uint64) -> void:
make_move:
    // tictactoe/tictactoe.py:60-61
    // @subroutine
    // def make_move(self, player: arc4.UInt8, move: Move) -> None:
    proto 3 0
    // tictactoe/tictactoe.py:62
    // column, row = move
    frame_dig -2
    dup
    frame_dig -1
    swap
    // tictactoe/tictactoe.py:63
    // assert column < 3 and row < 3, "Move must be in range"
    intc_2 // 3
    <
    bz make_move_bool_false@3
    frame_dig 1
    intc_2 // 3
    <
    bz make_move_bool_false@3
    intc_0 // 1
    b make_move_bool_merge@4

make_move_bool_false@3:
    intc_1 // 0

make_move_bool_merge@4:
    // tictactoe/tictactoe.py:63
    // assert column < 3 and row < 3, "Move must be in range"
    assert // Move must be in range
    // tictactoe/tictactoe.py:64
    // assert self.game[row][column] == EMPTY, "Square is already taken"
    intc_1 // 0
    bytec_0 // "game"
    app_global_get_ex
    assert // check self.game exists
    frame_dig 1
    dup
    cover 2
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    frame_dig 0
    dup
    cover 3
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    pushbytes 0x00
    b==
    assert // Square is already taken
    // tictactoe/tictactoe.py:65
    // self.game[row][column] = player
    intc_1 // 0
    bytec_0 // "game"
    app_global_get_ex
    assert // check self.game exists
    dup
    dig 2
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    frame_dig -3
    swap
    dig 4
    intc_2 // 3
    <
    assert // Index access is out of bounds
    dig 4
    intc_0 // 1
    *
    uncover 2
    replace3
    dig 2
    intc_2 // 3
    <
    assert // Index access is out of bounds
    dig 2
    intc_2 // 3
    *
    uncover 2
    swap
    uncover 2
    replace3
    bytec_0 // "game"
    swap
    app_global_put
    // tictactoe/tictactoe.py:66
    // self.turns += 1
    intc_1 // 0
    bytec_1 // "turns"
    app_global_get_ex
    assert // check self.turns exists
    intc_0 // 1
    +
    bytec_1 // "turns"
    swap
    app_global_put
    // tictactoe/tictactoe.py:67
    // if self.did_win(player, column=column, row=row):
    frame_dig -3
    uncover 2
    uncover 2
    callsub did_win
    bz make_move_else_body@6
    // tictactoe/tictactoe.py:68
    // self.winner.value = player
    bytec_3 // "winner"
    frame_dig -3
    app_global_put
    b make_move_after_if_else@9

make_move_else_body@6:
    // tictactoe/tictactoe.py:69
    // elif self.turns == 9:
    intc_1 // 0
    bytec_1 // "turns"
    app_global_get_ex
    assert // check self.turns exists
    pushint 9 // 9
    ==
    bz make_move_after_if_else@8
    // tictactoe/tictactoe.py:70
    // self.winner.value = arc4.UInt8(DRAW)
    bytec_3 // "winner"
    pushbytes 0x03
    app_global_put

make_move_after_if_else@8:

make_move_after_if_else@9:
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.did_win(player: bytes, column: uint64, row: uint64) -> uint64:
did_win:
    // tictactoe/tictactoe.py:72-73
    // @subroutine
    // def did_win(self, player: arc4.UInt8, column: UInt64, row: UInt64) -> bool:
    proto 3 1
    intc_1 // 0
    // tictactoe/tictactoe.py:74
    // g = self.game.copy()
    dup
    bytec_0 // "game"
    app_global_get_ex
    assert // check self.game exists
    dupn 2
    // tictactoe/tictactoe.py:76
    // if g[row][0] == g[row][1] == g[row][2]:
    frame_dig -1
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    swap
    frame_dig -1
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    intc_0 // 1
    dup
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    dup
    cover 2
    b==
    bz did_win_after_if_else@3
    frame_dig 2
    frame_dig 1
    frame_dig -1
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    intc_3 // 2
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    b==
    bz did_win_after_if_else@3
    // tictactoe/tictactoe.py:77
    // return True
    intc_0 // 1
    frame_bury 0
    retsub

did_win_after_if_else@3:
    // tictactoe/tictactoe.py:79
    // if g[0][column] == g[1][column] == g[2][column]:
    frame_dig 1
    dup
    intc_1 // 0
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    frame_dig -2
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    swap
    intc_0 // 1
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    frame_dig -2
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    dup
    frame_bury 0
    b==
    bz did_win_after_if_else@6
    frame_dig 0
    frame_dig 1
    intc_3 // 2
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    frame_dig -2
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    b==
    bz did_win_after_if_else@6
    // tictactoe/tictactoe.py:80
    // return True
    intc_0 // 1
    frame_bury 0
    retsub

did_win_after_if_else@6:
    // tictactoe/tictactoe.py:82-83
    // # if player owns center, check diagonals
    // if player == g[1][1]:
    frame_dig -3
    frame_dig 1
    intc_0 // 1
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    intc_0 // 1
    dup
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    b==
    bz did_win_after_if_else@14
    // tictactoe/tictactoe.py:84
    // if g[0][0] == player == g[2][2]:
    frame_dig 1
    intc_1 // 0
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    frame_dig -3
    b==
    bz did_win_after_if_else@10
    frame_dig -3
    frame_dig 1
    intc_3 // 2
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    intc_3 // 2
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    b==
    bz did_win_after_if_else@10
    // tictactoe/tictactoe.py:85
    // return True
    intc_0 // 1
    frame_bury 0
    retsub

did_win_after_if_else@10:
    // tictactoe/tictactoe.py:86
    // if g[0][2] == player == g[2][0]:
    frame_dig 1
    intc_1 // 0
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    intc_3 // 2
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    frame_dig -3
    b==
    bz did_win_after_if_else@13
    frame_dig -3
    frame_dig 1
    intc_3 // 2
    intc_2 // 3
    *
    intc_2 // 3
    extract3 // on error: Index access is out of bounds
    intc_1 // 0
    intc_0 // 1
    *
    intc_0 // 1
    extract3 // on error: Index access is out of bounds
    b==
    bz did_win_after_if_else@13
    // tictactoe/tictactoe.py:87
    // return True
    intc_0 // 1
    frame_bury 0
    retsub

did_win_after_if_else@13:

did_win_after_if_else@14:
    // tictactoe/tictactoe.py:88
    // return False
    intc_1 // 0
    frame_bury 0
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.whose_turn() -> bytes:
whose_turn:
    // tictactoe/tictactoe.py:43-44
    // @arc4.abimethod
    // def whose_turn(self) -> arc4.UInt8:
    proto 0 1
    // tictactoe/tictactoe.py:45
    // return arc4.UInt8(HOST) if self.turns % 2 else arc4.UInt8(CHALLENGER)
    intc_1 // 0
    bytec_1 // "turns"
    app_global_get_ex
    assert // check self.turns exists
    intc_3 // 2
    %
    intc_1 // 0
    !=
    bytec 5 // 0x02
    bytec 4 // 0x01
    uncover 2
    select
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.play(move.0: uint64, move.1: uint64) -> void:
play:
    // tictactoe/tictactoe.py:47-48
    // @arc4.abimethod
    // def play(self, move: Move) -> None:
    proto 2 0
    // tictactoe/tictactoe.py:49
    // assert not self.winner, "Game is already finished"
    intc_1 // 0
    bytec_3 // "winner"
    app_global_get_ex
    bury 1
    !
    assert // Game is already finished
    // tictactoe/tictactoe.py:50
    // if self.turns % 2:
    intc_1 // 0
    bytec_1 // "turns"
    app_global_get_ex
    assert // check self.turns exists
    intc_3 // 2
    %
    intc_1 // 0
    !=
    bz play_else_body@2
    // tictactoe/tictactoe.py:51
    // assert Txn.sender == self.host, "It is the host's turn"
    txn Sender
    intc_1 // 0
    bytec 6 // "host"
    app_global_get_ex
    assert // check self.host exists
    ==
    assert // It is the host's turn
    // tictactoe/tictactoe.py:52
    // player = arc4.UInt8(HOST)
    bytec 4 // 0x01
    b play_after_if_else@3

play_else_body@2:
    // tictactoe/tictactoe.py:54
    // assert Txn.sender == self.challenger.get(
    txn Sender
    // tictactoe/tictactoe.py:55
    // default=Account()
    global ZeroAddress
    // tictactoe/tictactoe.py:54
    // assert Txn.sender == self.challenger.get(
    intc_1 // 0
    bytec_2 // "challenger"
    // tictactoe/tictactoe.py:54-56
    // assert Txn.sender == self.challenger.get(
    //     default=Account()
    // ), "It is the challenger's turn"
    app_global_get_ex
    swap
    uncover 2
    swap
    uncover 2
    select
    ==
    assert // It is the challenger's turn
    // tictactoe/tictactoe.py:57
    // player = arc4.UInt8(CHALLENGER)
    bytec 5 // 0x02

play_after_if_else@3:
    // tictactoe/tictactoe.py:58
    // self.make_move(player, move)
    frame_dig -2
    frame_dig -1
    callsub make_move
    retsub
