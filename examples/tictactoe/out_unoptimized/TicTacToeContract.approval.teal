#pragma version 10

examples.tictactoe.tictactoe.TicTacToeContract.approval_program:
    // tictactoe/tictactoe.py:13
    // class TicTacToeContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    method "new_game((uint64,uint64))(uint8[3][3],uint8)"
    method "join_game((uint64,uint64))(uint8[3][3],uint8)"
    method "whose_turn()uint8"
    method "play((uint64,uint64))(uint8[3][3],uint8)"
    uncover 4
    match main_new_game_route@1 main_join_game_route@2 main_whose_turn_route@3 main_play_route@4
    b main_switch_case_default@5

main_new_game_route@1:
    // tictactoe/tictactoe.py:14
    // @arc4.abimethod(create="allow")
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    // tictactoe/tictactoe.py:13
    // class TicTacToeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    dup
    int 0
    int 8
    extract3
    swap
    int 8
    int 8
    extract3
    swap
    btoi
    swap
    btoi
    // tictactoe/tictactoe.py:14
    // @arc4.abimethod(create="allow")
    callsub new_game
    swap
    byte 0x
    swap
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_join_game_route@2:
    // tictactoe/tictactoe.py:25
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tictactoe/tictactoe.py:13
    // class TicTacToeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    dup
    int 0
    int 8
    extract3
    swap
    int 8
    int 8
    extract3
    swap
    btoi
    swap
    btoi
    // tictactoe/tictactoe.py:25
    // @arc4.abimethod
    callsub join_game
    swap
    byte 0x
    swap
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_whose_turn_route@3:
    // tictactoe/tictactoe.py:32
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub whose_turn
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_play_route@4:
    // tictactoe/tictactoe.py:36
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tictactoe/tictactoe.py:13
    // class TicTacToeContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    dup
    int 0
    int 8
    extract3
    swap
    int 8
    int 8
    extract3
    swap
    btoi
    swap
    btoi
    // tictactoe/tictactoe.py:36
    // @arc4.abimethod
    callsub play
    swap
    byte 0x
    swap
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_switch_case_default@5:
    // tictactoe/tictactoe.py:13
    // class TicTacToeContract(arc4.ARC4Contract):
    err // reject transaction


// examples.tictactoe.tictactoe.TicTacToeContract.new_game(move.0: uint64, move.1: uint64) -> bytes, bytes:
new_game:
    // tictactoe/tictactoe.py:14-15
    // @arc4.abimethod(create="allow")
    // def new_game(self, move: Move) -> tuple[Game, arc4.UInt8]:
    proto 2 2
    // tictactoe/tictactoe.py:16
    // self.game = Game.from_bytes(op.bzero(9))
    int 9
    bzero
    byte "game"
    swap
    app_global_put
    // tictactoe/tictactoe.py:17
    // self.host = Txn.sender
    txn Sender
    byte "host"
    swap
    app_global_put
    // tictactoe/tictactoe.py:18
    // self.challenger = Global.zero_address
    global ZeroAddress
    byte "challenger"
    swap
    app_global_put
    // tictactoe/tictactoe.py:19
    // self.winner = arc4.UInt8(0)
    byte "winner"
    byte 0x00
    app_global_put
    // tictactoe/tictactoe.py:20
    // assert move[0] < 3 and move[1] < 3, "Move must be in range"
    frame_dig -2
    int 3
    <
    bz new_game_bool_false@3
    frame_dig -1
    int 3
    <
    bz new_game_bool_false@3
    int 1
    b new_game_bool_merge@4

new_game_bool_false@3:
    int 0

new_game_bool_merge@4:
    // tictactoe/tictactoe.py:20
    // assert move[0] < 3 and move[1] < 3, "Move must be in range"
    assert // Move must be in range
    // tictactoe/tictactoe.py:21
    // self.game[move[1]][move[0]] = arc4.UInt8(HOST)
    int 0
    byte "game"
    app_global_get_ex
    assert // check game exists
    int 3
    frame_dig -1
    swap
    <
    assert // Index access is out of bounds
    frame_dig -1
    int 3
    *
    int 3
    extract3
    byte 0x01
    swap
    int 3
    frame_dig -2
    swap
    <
    assert // Index access is out of bounds
    frame_dig -2
    int 1
    *
    uncover 2
    replace3
    int 0
    byte "game"
    app_global_get_ex
    swap
    cover 2
    assert // check game exists
    int 3
    frame_dig -1
    swap
    <
    assert // Index access is out of bounds
    frame_dig -1
    int 3
    *
    uncover 2
    swap
    uncover 2
    replace3
    byte "game"
    swap
    app_global_put
    // tictactoe/tictactoe.py:22
    // self.turns = UInt64(0)
    byte "turns"
    int 0
    app_global_put
    // tictactoe/tictactoe.py:23
    // return self.game, self.winner
    int 0
    byte "game"
    app_global_get_ex
    assert // check game exists
    int 0
    byte "winner"
    app_global_get_ex
    assert // check winner exists
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.join_game(move.0: uint64, move.1: uint64) -> bytes, bytes:
join_game:
    // tictactoe/tictactoe.py:25-26
    // @arc4.abimethod
    // def join_game(self, move: Move) -> tuple[Game, arc4.UInt8]:
    proto 2 2
    // tictactoe/tictactoe.py:27
    // assert self.challenger == Global.zero_address, "Host already has a challenger"
    int 0
    byte "challenger"
    app_global_get_ex
    assert // check challenger exists
    global ZeroAddress
    ==
    assert // Host already has a challenger
    // tictactoe/tictactoe.py:28
    // self.challenger = Txn.sender
    txn Sender
    byte "challenger"
    swap
    app_global_put
    // tictactoe/tictactoe.py:29
    // self.make_move(arc4.UInt8(CHALLENGER), move)
    byte 0x02
    frame_dig -2
    frame_dig -1
    callsub make_move
    // tictactoe/tictactoe.py:30
    // return self.game, self.winner
    int 0
    byte "game"
    app_global_get_ex
    assert // check game exists
    int 0
    byte "winner"
    app_global_get_ex
    assert // check winner exists
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.make_move(piece: bytes, move.0: uint64, move.1: uint64) -> void:
make_move:
    // tictactoe/tictactoe.py:47-48
    // @subroutine
    // def make_move(self, piece: arc4.UInt8, move: Move) -> None:
    proto 3 0
    // tictactoe/tictactoe.py:49
    // assert move[0] < 3 and move[1] < 3, "Move must be in range"
    frame_dig -2
    int 3
    <
    bz make_move_bool_false@3
    frame_dig -1
    int 3
    <
    bz make_move_bool_false@3
    int 1
    b make_move_bool_merge@4

make_move_bool_false@3:
    int 0

make_move_bool_merge@4:
    // tictactoe/tictactoe.py:49
    // assert move[0] < 3 and move[1] < 3, "Move must be in range"
    assert // Move must be in range
    // tictactoe/tictactoe.py:50
    // assert self.game[move[1]][move[0]] == arc4.UInt8(0), "Square is already taken"
    int 0
    byte "game"
    app_global_get_ex
    assert // check game exists
    int 3
    frame_dig -1
    swap
    <
    assert // Index access is out of bounds
    frame_dig -1
    int 3
    *
    int 3
    extract3
    int 3
    frame_dig -2
    swap
    <
    assert // Index access is out of bounds
    frame_dig -2
    int 1
    *
    int 1
    extract3
    byte 0x00
    b==
    assert // Square is already taken
    // tictactoe/tictactoe.py:51
    // self.game[move[1]][move[0]] = piece
    int 0
    byte "game"
    app_global_get_ex
    assert // check game exists
    int 3
    frame_dig -1
    swap
    <
    assert // Index access is out of bounds
    frame_dig -1
    int 3
    *
    int 3
    extract3
    frame_dig -3
    swap
    int 3
    frame_dig -2
    swap
    <
    assert // Index access is out of bounds
    frame_dig -2
    int 1
    *
    uncover 2
    replace3
    int 0
    byte "game"
    app_global_get_ex
    swap
    cover 2
    assert // check game exists
    int 3
    frame_dig -1
    swap
    <
    assert // Index access is out of bounds
    frame_dig -1
    int 3
    *
    uncover 2
    swap
    uncover 2
    replace3
    byte "game"
    swap
    app_global_put
    // tictactoe/tictactoe.py:52
    // self.turns += 1
    int 0
    byte "turns"
    app_global_get_ex
    assert // check turns exists
    int 1
    +
    byte "turns"
    swap
    app_global_put
    // tictactoe/tictactoe.py:53
    // self.check_winner()
    callsub check_winner
    // tictactoe/tictactoe.py:54
    // if self.turns == 9 and not self.winner:
    int 0
    byte "turns"
    app_global_get_ex
    assert // check turns exists
    int 9
    ==
    bz make_move_after_if_else@7
    int 0
    byte "winner"
    app_global_get_ex
    assert // check winner exists
    byte 0x00
    ==
    bz make_move_after_if_else@7
    // tictactoe/tictactoe.py:55
    // self.winner = arc4.UInt8(DRAW)
    byte "winner"
    byte 0x03
    app_global_put

make_move_after_if_else@7:
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.check_winner() -> void:
check_winner:
    // tictactoe/tictactoe.py:57-58
    // @subroutine
    // def check_winner(self) -> None:
    proto 0 0
    int 0
    dupn 4
    byte ""
    dup
    // tictactoe/tictactoe.py:59
    // g = self.game.copy()
    int 0
    byte "game"
    app_global_get_ex
    assert // check game exists
    int 0

check_winner_for_header@1:
    // tictactoe/tictactoe.py:60
    // for row in g:
    frame_dig 8
    int 3
    <
    bz check_winner_after_for@8
    frame_dig 8
    int 3
    *
    frame_dig 7
    swap
    int 3
    extract3
    dup
    frame_bury 4
    // tictactoe/tictactoe.py:61
    // if row[0] and row[0] == row[1] == row[2]:
    int 0
    int 1
    *
    int 1
    extract3
    byte 0x00
    !=
    bz check_winner_after_if_else@6
    int 0
    int 1
    *
    frame_dig 4
    dup
    cover 2
    swap
    int 1
    extract3
    swap
    int 1
    int 1
    *
    int 1
    extract3
    dup
    frame_bury 0
    b==
    bz check_winner_after_if_else@6
    int 2
    int 1
    *
    frame_dig 4
    swap
    int 1
    extract3
    frame_dig 0
    swap
    b==
    bz check_winner_after_if_else@6
    // tictactoe/tictactoe.py:62
    // self.winner = row[0]
    int 0
    int 1
    *
    frame_dig 4
    swap
    int 1
    extract3
    byte "winner"
    swap
    app_global_put
    // tictactoe/tictactoe.py:63
    // return
    retsub

check_winner_after_if_else@6:
    frame_dig 8
    int 1
    +
    frame_bury 8
    b check_winner_for_header@1

check_winner_after_for@8:
    // tictactoe/tictactoe.py:64
    // for col in urange(3):
    int 1
    assert // Step cannot be zero
    int 0
    frame_bury 6

check_winner_for_header@9:
    // tictactoe/tictactoe.py:64
    // for col in urange(3):
    frame_dig 6
    int 3
    <
    bz check_winner_after_for@17
    frame_dig 6
    dup
    frame_bury 5
    // tictactoe/tictactoe.py:65
    // if g[0][col] and g[0][col] == g[1][col] == g[2][col]:
    int 0
    int 3
    *
    frame_dig 7
    swap
    int 3
    extract3
    swap
    int 3
    dig 1
    swap
    <
    assert // Index access is out of bounds
    int 1
    *
    int 1
    extract3
    byte 0x00
    !=
    bz check_winner_after_if_else@14
    int 0
    int 3
    *
    frame_dig 7
    dup
    cover 2
    swap
    int 3
    extract3
    int 3
    frame_dig 5
    dup
    cover 2
    swap
    <
    assert // Index access is out of bounds
    dup
    int 1
    *
    uncover 2
    swap
    int 1
    extract3
    cover 2
    int 1
    int 3
    *
    uncover 2
    swap
    int 3
    extract3
    int 3
    dig 2
    swap
    <
    assert // Index access is out of bounds
    swap
    int 1
    *
    int 1
    extract3
    dup
    frame_bury 1
    b==
    bz check_winner_after_if_else@14
    int 2
    int 3
    *
    frame_dig 7
    swap
    int 3
    extract3
    int 3
    frame_dig 5
    dup
    cover 2
    swap
    <
    assert // Index access is out of bounds
    int 1
    *
    int 1
    extract3
    frame_dig 1
    swap
    b==
    bz check_winner_after_if_else@14
    // tictactoe/tictactoe.py:66
    // self.winner = g[0][col]
    int 0
    int 3
    *
    frame_dig 7
    swap
    int 3
    extract3
    int 3
    frame_dig 5
    dup
    cover 2
    swap
    <
    assert // Index access is out of bounds
    int 1
    *
    int 1
    extract3
    byte "winner"
    swap
    app_global_put
    // tictactoe/tictactoe.py:67
    // return
    retsub

check_winner_after_if_else@14:
    // tictactoe/tictactoe.py:64
    // for col in urange(3):
    frame_dig 6
    int 1
    +
    frame_bury 6
    b check_winner_for_header@9

check_winner_after_for@17:
    // tictactoe/tictactoe.py:68-69
    // # if center has been played
    // if g[1][1]:
    int 1
    int 3
    *
    frame_dig 7
    swap
    int 3
    extract3
    int 1
    int 1
    *
    int 1
    extract3
    byte 0x00
    !=
    bz check_winner_after_if_else@26
    // tictactoe/tictactoe.py:70
    // if g[0][0] == g[1][1] == g[2][2]:
    int 0
    int 3
    *
    frame_dig 7
    dup
    cover 2
    swap
    int 3
    extract3
    int 0
    int 1
    *
    int 1
    extract3
    swap
    int 1
    int 3
    *
    int 3
    extract3
    int 1
    int 1
    *
    int 1
    extract3
    dup
    frame_bury 2
    b==
    bz check_winner_else_body@21
    int 2
    int 3
    *
    frame_dig 7
    swap
    int 3
    extract3
    int 2
    int 1
    *
    int 1
    extract3
    frame_dig 2
    swap
    b==
    bz check_winner_else_body@21
    // tictactoe/tictactoe.py:71
    // self.winner = g[0][0]
    int 0
    int 3
    *
    frame_dig 7
    swap
    int 3
    extract3
    int 0
    int 1
    *
    int 1
    extract3
    byte "winner"
    swap
    app_global_put
    b check_winner_after_if_else@25

check_winner_else_body@21:
    // tictactoe/tictactoe.py:72
    // elif g[0][2] == g[1][1] == g[2][0]:
    int 0
    int 3
    *
    frame_dig 7
    dup
    cover 2
    swap
    int 3
    extract3
    int 2
    int 1
    *
    int 1
    extract3
    swap
    int 1
    int 3
    *
    int 3
    extract3
    int 1
    int 1
    *
    int 1
    extract3
    dup
    frame_bury 3
    b==
    bz check_winner_after_if_else@24
    int 2
    int 3
    *
    frame_dig 7
    swap
    int 3
    extract3
    int 0
    int 1
    *
    int 1
    extract3
    frame_dig 3
    swap
    b==
    bz check_winner_after_if_else@24
    // tictactoe/tictactoe.py:73
    // self.winner = g[0][2]
    int 0
    int 3
    *
    frame_dig 7
    swap
    int 3
    extract3
    int 2
    int 1
    *
    int 1
    extract3
    byte "winner"
    swap
    app_global_put

check_winner_after_if_else@24:

check_winner_after_if_else@25:

check_winner_after_if_else@26:
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.whose_turn() -> bytes:
whose_turn:
    // tictactoe/tictactoe.py:32-33
    // @arc4.abimethod
    // def whose_turn(self) -> arc4.UInt8:
    proto 0 1
    // tictactoe/tictactoe.py:34
    // return arc4.UInt8(HOST) if self.turns % 2 else arc4.UInt8(CHALLENGER)
    int 0
    byte "turns"
    app_global_get_ex
    assert // check turns exists
    int 2
    %
    bz whose_turn_ternary_false@2
    byte 0x01
    b whose_turn_ternary_merge@3

whose_turn_ternary_false@2:
    // tictactoe/tictactoe.py:34
    // return arc4.UInt8(HOST) if self.turns % 2 else arc4.UInt8(CHALLENGER)
    byte 0x02

whose_turn_ternary_merge@3:
    // tictactoe/tictactoe.py:34
    // return arc4.UInt8(HOST) if self.turns % 2 else arc4.UInt8(CHALLENGER)
    retsub


// examples.tictactoe.tictactoe.TicTacToeContract.play(move.0: uint64, move.1: uint64) -> bytes, bytes:
play:
    // tictactoe/tictactoe.py:36-37
    // @arc4.abimethod
    // def play(self, move: Move) -> tuple[Game, arc4.UInt8]:
    proto 2 2
    // tictactoe/tictactoe.py:38
    // assert not self.winner, "Game is already finished"
    int 0
    byte "winner"
    app_global_get_ex
    assert // check winner exists
    byte 0x00
    ==
    assert // Game is already finished
    // tictactoe/tictactoe.py:39
    // if self.turns % 2 == 1:
    int 0
    byte "turns"
    app_global_get_ex
    assert // check turns exists
    int 2
    %
    int 1
    ==
    bz play_else_body@2
    // tictactoe/tictactoe.py:40
    // assert self.host == Txn.sender, "It is the host's turn"
    int 0
    byte "host"
    app_global_get_ex
    assert // check host exists
    txn Sender
    ==
    assert // It is the host's turn
    // tictactoe/tictactoe.py:41
    // self.make_move(arc4.UInt8(HOST), move)
    byte 0x01
    frame_dig -2
    frame_dig -1
    callsub make_move
    b play_after_if_else@3

play_else_body@2:
    // tictactoe/tictactoe.py:43
    // assert self.challenger == Txn.sender, "It is the challenger's turn"
    int 0
    byte "challenger"
    app_global_get_ex
    assert // check challenger exists
    txn Sender
    ==
    assert // It is the challenger's turn
    // tictactoe/tictactoe.py:44
    // self.make_move(arc4.UInt8(CHALLENGER), move)
    byte 0x02
    frame_dig -2
    frame_dig -1
    callsub make_move

play_after_if_else@3:
    // tictactoe/tictactoe.py:45
    // return self.game, self.winner
    int 0
    byte "game"
    app_global_get_ex
    assert // check game exists
    int 0
    byte "winner"
    app_global_get_ex
    assert // check winner exists
    retsub
