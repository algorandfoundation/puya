debug: PuyaOptions(paths=(PosixPath('local_storage'),), output_teal=True, output_arc32=True, output_awst=False, output_ssa_ir=True, output_optimization_ir=True, output_cssa_ir=True, output_post_ssa_ir=True, output_parallel_copies_ir=True, output_final_ir=True, out_dir=None, debug_level=0, optimization_level=1, log_level=<LogLevel.info: 20>)
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L47
debug: Terminated block@0: // L47
debug: Sealing block@0: // L55
debug: Terminated block@0: // L55
debug: Sealing block@0: // L65
debug: Terminated block@0: // L65
debug: Sealing block@0: // L61
debug: Terminated block@0: // L61
debug: Sealing block@0: // L51
debug: Terminated block@0: // L51
debug: Sealing block@None: // ternary_true_L52
debug: Sealing block@None: // ternary_false_L52
debug: Terminated block@1: // ternary_true_L52
debug: Terminated block@2: // ternary_false_L52
debug: Sealing block@3: // ternary_merge_L52
debug: Created Phi assignment: let ternary_result%1#2: bytes = undefined while trying to resolve 'ternary_result%1' in block@3: // ternary_merge_L52
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@1) in block@1: // ternary_true_L52
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@1, ternary_result%1#1 <- block@2) in block@2: // ternary_false_L52
debug: Terminated block@3: // ternary_merge_L52
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L8
debug: Terminated block@0: // L8
debug: Sealing block@None: // on_create_L5
debug: Terminated block@1: // on_create_L5
debug: Sealing block@2: // entrypoint_L5
debug: Terminated block@2: // entrypoint_L5
debug: Sealing block@None: // if_body_L9
debug: Sealing block@None: // else_body_L9
debug: Terminated block@3: // if_body_L9
debug: Sealing block@4: // after_if_else_L9
debug: Terminated block@4: // after_if_else_L9
debug: Sealing block@None: // if_body_L11
debug: Sealing block@None: // else_body_L11
debug: Terminated block@5: // if_body_L11
debug: Sealing block@6: // after_if_else_L11
debug: Terminated block@6: // after_if_else_L11
debug: Sealing block@None: // if_body_L13
debug: Sealing block@None: // else_body_L13
debug: Terminated block@7: // if_body_L13
debug: Sealing block@8: // after_if_else_L13
debug: Terminated block@8: // after_if_else_L13
debug: Sealing block@None: // if_body_L17
debug: Sealing block@None: // else_body_L17
debug: Terminated block@9: // if_body_L17
debug: Sealing block@None: // if_body_L18
debug: Sealing block@None: // else_body_L18
debug: Terminated block@10: // if_body_L18
debug: Terminated block@11: // else_body_L18
debug: Sealing block@None: // if_body_L20
debug: Sealing block@None: // else_body_L20
debug: Terminated block@12: // if_body_L20
debug: Terminated block@13: // else_body_L20
debug: Sealing block@None: // if_body_L22
debug: Sealing block@None: // else_body_L22
debug: Terminated block@14: // if_body_L22
debug: Terminated block@15: // else_body_L22
debug: Sealing block@16: // after_if_else_L22
debug: Terminated block@16: // after_if_else_L22
debug: Sealing block@17: // after_if_else_L20
debug: Terminated block@17: // after_if_else_L20
debug: Sealing block@18: // after_if_else_L18
debug: Terminated block@18: // after_if_else_L18
debug: Terminated block@19: // else_body_L17
debug: Sealing block@None: // if_body_L28
debug: Sealing block@None: // else_body_L28
debug: Terminated block@20: // if_body_L28
debug: Sealing block@None: // if_body_L29
debug: Sealing block@None: // else_body_L29
debug: Terminated block@21: // if_body_L29
debug: Terminated block@22: // else_body_L29
debug: Sealing block@None: // if_body_L31
debug: Sealing block@None: // else_body_L31
debug: Terminated block@23: // if_body_L31
debug: Terminated block@24: // else_body_L31
debug: Sealing block@25: // after_if_else_L31
debug: Terminated block@25: // after_if_else_L31
debug: Sealing block@26: // after_if_else_L29
debug: Terminated block@26: // after_if_else_L29
debug: Terminated block@27: // else_body_L28
debug: Sealing block@None: // after_if_else_L28
debug: Sealing block@None: // after_if_else_L17
debug: Sealing block@0: // L43
debug: Terminated block@0: // L43
debug: Sealing block@0: // L54
debug: Terminated block@0: // L54
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L72
debug: Terminated block@0: // L72
debug: Sealing block@0: // L68
debug: Terminated block@0: // L68
debug: Sealing block@0: // L58
debug: Terminated block@0: // L58
debug: Sealing block@None: // ternary_true_L59
debug: Sealing block@None: // ternary_false_L59
debug: Terminated block@1: // ternary_true_L59
debug: Terminated block@2: // ternary_false_L59
debug: Sealing block@3: // ternary_merge_L59
debug: Created Phi assignment: let ternary_result%1#2: bytes = undefined while trying to resolve 'ternary_result%1' in block@3: // ternary_merge_L59
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@1) in block@1: // ternary_true_L59
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@1, ternary_result%1#1 <- block@2) in block@2: // ternary_false_L59
debug: Terminated block@3: // ternary_merge_L59
debug: Sealing block@0: // L15
debug: Terminated block@0: // L15
debug: Sealing block@0: // L18
debug: Terminated block@0: // L18
debug: Sealing block@None: // on_create_L15
debug: Terminated block@1: // on_create_L15
debug: Sealing block@2: // entrypoint_L15
debug: Terminated block@2: // entrypoint_L15
debug: Sealing block@None: // if_body_L19
debug: Sealing block@None: // else_body_L19
debug: Terminated block@3: // if_body_L19
debug: Sealing block@4: // after_if_else_L19
debug: Terminated block@4: // after_if_else_L19
debug: Sealing block@None: // if_body_L21
debug: Sealing block@None: // else_body_L21
debug: Terminated block@5: // if_body_L21
debug: Sealing block@6: // after_if_else_L21
debug: Terminated block@6: // after_if_else_L21
debug: Sealing block@None: // if_body_L23
debug: Sealing block@None: // else_body_L23
debug: Terminated block@7: // if_body_L23
debug: Sealing block@8: // after_if_else_L23
debug: Terminated block@8: // after_if_else_L23
debug: Sealing block@None: // if_body_L28
debug: Sealing block@None: // else_body_L28
debug: Terminated block@9: // if_body_L28
debug: Sealing block@None: // if_body_L29
debug: Sealing block@None: // else_body_L29
debug: Terminated block@10: // if_body_L29
debug: Terminated block@11: // else_body_L29
debug: Sealing block@None: // if_body_L31
debug: Sealing block@None: // else_body_L31
debug: Terminated block@12: // if_body_L31
debug: Terminated block@13: // else_body_L31
debug: Sealing block@None: // if_body_L33
debug: Sealing block@None: // else_body_L33
debug: Terminated block@14: // if_body_L33
debug: Terminated block@15: // else_body_L33
debug: Sealing block@16: // after_if_else_L33
debug: Terminated block@16: // after_if_else_L33
debug: Sealing block@17: // after_if_else_L31
debug: Terminated block@17: // after_if_else_L31
debug: Sealing block@18: // after_if_else_L29
debug: Terminated block@18: // after_if_else_L29
debug: Terminated block@19: // else_body_L28
debug: Sealing block@None: // if_body_L39
debug: Sealing block@None: // else_body_L39
debug: Terminated block@20: // if_body_L39
debug: Sealing block@None: // if_body_L40
debug: Sealing block@None: // else_body_L40
debug: Terminated block@21: // if_body_L40
debug: Terminated block@22: // else_body_L40
debug: Sealing block@None: // if_body_L42
debug: Sealing block@None: // else_body_L42
debug: Terminated block@23: // if_body_L42
debug: Terminated block@24: // else_body_L42
debug: Sealing block@25: // after_if_else_L42
debug: Terminated block@25: // after_if_else_L42
debug: Sealing block@26: // after_if_else_L40
debug: Terminated block@26: // after_if_else_L40
debug: Terminated block@27: // else_body_L39
debug: Sealing block@None: // after_if_else_L39
debug: Sealing block@None: // after_if_else_L28
debug: Sealing block@0: // L50
debug: Terminated block@0: // L50
debug: Output IR to local_storage/out/local_storage_contract_LocalStorageContract.ssa.ir
info: Optimizing examples.local_storage.local_storage_contract.LocalStorageContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@16: // after_if_else_L22 with block@14: // if_body_L22 in block@17: // after_if_else_L20
debug: Merged linear block@16: // after_if_else_L22 into block@14: // if_body_L22
debug: Replaced predecessor block@25: // after_if_else_L31 with block@23: // if_body_L31 in block@26: // after_if_else_L29
debug: Merged linear block@25: // after_if_else_L31 into block@23: // if_body_L31
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@17: // after_if_else_L20
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.get_guaranteed_data
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.get_data_or_assert
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%0#0, result#0
debug: Replacing {tuple_assignment%0#0} with result#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%1#0, exists#0
debug: Replacing {tuple_assignment%1#0} with exists#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.delete_data
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.set_data
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.get_data_with_default
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: default#0, ternary_result%1#1
debug: Replacing {ternary_result%1#1} with default#0 made 1 modifications
debug: Found equivalence set: awst_tmp%0.0#0, ternary_result%1#0
debug: Replacing {ternary_result%1#0} with awst_tmp%0.0#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@1: // ternary_true_L52 because it's used by phi nodes
debug: Not removing empty block block@2: // ternary_false_L52 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.__init__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to local_storage/out/local_storage_contract_LocalStorageContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.get_guaranteed_data
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.get_data_or_assert
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.delete_data
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.set_data
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.get_data_with_default
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@1: // ternary_true_L52 because it's used by phi nodes
debug: Not removing empty block block@2: // ternary_false_L52 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.__init__
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_contract.LocalStorageContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to local_storage/out/local_storage_contract_LocalStorageContract.cssa.ir
debug: Removing Phis from examples.local_storage.local_storage_contract.LocalStorageContract.approval_program
debug: Removing Phis from examples.local_storage.local_storage_contract.LocalStorageContract.get_guaranteed_data
debug: Removing Phis from examples.local_storage.local_storage_contract.LocalStorageContract.get_data_or_assert
debug: Removing Phis from examples.local_storage.local_storage_contract.LocalStorageContract.delete_data
debug: Removing Phis from examples.local_storage.local_storage_contract.LocalStorageContract.set_data
debug: Removing Phis from examples.local_storage.local_storage_contract.LocalStorageContract.get_data_with_default
debug: Removing Phis from examples.local_storage.local_storage_contract.LocalStorageContract.__init__
debug: Removing Phis from examples.local_storage.local_storage_contract.LocalStorageContract.clear_state_program
debug: Output IR to local_storage/out/local_storage_contract_LocalStorageContract.post_ssa.ir
debug: Sequentializing parallel copies in examples.local_storage.local_storage_contract.LocalStorageContract.approval_program
debug: Sequentializing parallel copies in examples.local_storage.local_storage_contract.LocalStorageContract.get_guaranteed_data
debug: Sequentializing parallel copies in examples.local_storage.local_storage_contract.LocalStorageContract.get_data_or_assert
debug: Sequentializing parallel copies in examples.local_storage.local_storage_contract.LocalStorageContract.delete_data
debug: Sequentializing parallel copies in examples.local_storage.local_storage_contract.LocalStorageContract.set_data
debug: Sequentializing parallel copies in examples.local_storage.local_storage_contract.LocalStorageContract.get_data_with_default
debug: Sequentializing parallel copies in examples.local_storage.local_storage_contract.LocalStorageContract.__init__
debug: Sequentializing parallel copies in examples.local_storage.local_storage_contract.LocalStorageContract.clear_state_program
debug: Output IR to local_storage/out/local_storage_contract_LocalStorageContract.parallel_copies.ir
debug: Coalescing local variables in examples.local_storage.local_storage_contract.LocalStorageContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_contract.LocalStorageContract.get_guaranteed_data using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_contract.LocalStorageContract.get_data_or_assert using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_contract.LocalStorageContract.delete_data using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_contract.LocalStorageContract.set_data using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_contract.LocalStorageContract.get_data_with_default using strategy RootOperandGrouping
debug: Coalescing ternary_result%1#2 with [ternary_result%1#3]
debug: Coalescing resulted in 3 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_contract.LocalStorageContract.__init__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_contract.LocalStorageContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to local_storage/out/local_storage_contract_LocalStorageContract.final.ir
debug: Inserted main_block@0.ops[1]: 'store app_id%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load app_id%0#0' with 'load app_id%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[3]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[5]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[7]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[1]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[3]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[13]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[15]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[9]: 'store is_equal%5#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[12]: 'load is_equal%5#0' with 'load is_equal%5#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[4]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[7]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[6]: 'store contains%4#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[13]: 'load contains%4#0' with 'load contains%4#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@6.ops[1]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_after_if_else@6.ops[3]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@6.ops[5]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_after_if_else@6.ops[7]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@8.ops[3]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_after_if_else@8.ops[5]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@8.ops[8]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_after_if_else@8.ops[10]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_if_body@9.ops[3]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_if_body@9.ops[5]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_if_body@10.ops[1]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_if_body@10.ops[3]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_if_body@10.ops[5]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_if_body@10.ops[7]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_else_body@11.ops[3]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_else_body@11.ops[5]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_if_body@12.ops[1]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_if_body@12.ops[3]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_if_body@12.ops[5]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_if_body@12.ops[7]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_else_body@13.ops[3]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_else_body@13.ops[5]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_if_body@14.ops[1]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_if_body@14.ops[3]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_else_body@19.ops[1]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_else_body@19.ops[3]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_else_body@19.ops[6]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_else_body@19.ops[8]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_if_body@20.ops[3]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_if_body@20.ops[5]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_if_body@21.ops[3]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_if_body@21.ops[6]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_if_body@21.ops[1]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_if_body@21.ops[6]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_else_body@22.ops[3]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced main_else_body@22.ops[5]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted main_if_body@23.ops[7]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced main_if_body@23.ops[9]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted main_if_body@23.ops[3]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced main_if_body@23.ops[6]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted main_if_body@23.ops[1]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced main_if_body@23.ops[6]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Found 13 edge set/s for examples.local_storage.local_storage_contract.LocalStorageContract.approval_program
debug: examples.local_storage.local_storage_contract.LocalStorageContract.approval_program f-stack entry: ['method#0']
debug: examples.local_storage.local_storage_contract.LocalStorageContract.approval_program f-stack on first store: []
debug: Inserted get_guaranteed_data_block@0.ops[4]: 'store app_local_get_ex_did_exist%1#0 to l-stack (copy)'
debug: Replaced get_guaranteed_data_block@0.ops[7]: 'load app_local_get_ex_did_exist%1#0' with 'load app_local_get_ex_did_exist%1#0 from l-stack (no copy)'
debug: Inserted get_guaranteed_data_block@0.ops[6]: 'store app_local_get_ex_value%0#0 to l-stack (copy)'
debug: Replaced get_guaranteed_data_block@0.ops[10]: 'load app_local_get_ex_value%0#0' with 'load app_local_get_ex_value%0#0 from l-stack (no copy)'
debug: Inserted get_data_or_assert_block@0.ops[4]: 'store exists#0 to l-stack (copy)'
debug: Replaced get_data_or_assert_block@0.ops[7]: 'load exists#0' with 'load exists#0 from l-stack (no copy)'
debug: Inserted get_data_or_assert_block@0.ops[6]: 'store result#0 to l-stack (copy)'
debug: Replaced get_data_or_assert_block@0.ops[10]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted get_data_with_default_block@0.ops[4]: 'store awst_tmp%0.1#0 to l-stack (copy)'
debug: Replaced get_data_with_default_block@0.ops[7]: 'load awst_tmp%0.1#0' with 'load awst_tmp%0.1#0 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.local_storage.local_storage_contract.LocalStorageContract.get_data_with_default
debug: Allocated 1 variable/s to x-stack: ternary_result%1#2
debug: shared x-stack for get_data_with_default_ternary_true@1 -> get_data_with_default_ternary_merge@3: ternary_result%1#2
debug: shared x-stack for get_data_with_default_ternary_false@2 -> get_data_with_default_ternary_merge@3: ternary_result%1#2
debug: examples.local_storage.local_storage_contract.LocalStorageContract.get_data_with_default f-stack entry: []
debug: examples.local_storage.local_storage_contract.LocalStorageContract.get_data_with_default f-stack on first store: ['awst_tmp%0.0#0']
debug: Output IR to local_storage/out/local_storage_with_offsets_LocalStorageContract.ssa.ir
info: Optimizing examples.local_storage.local_storage_with_offsets.LocalStorageContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@16: // after_if_else_L33 with block@14: // if_body_L33 in block@17: // after_if_else_L31
debug: Merged linear block@16: // after_if_else_L33 into block@14: // if_body_L33
debug: Replaced predecessor block@25: // after_if_else_L42 with block@23: // if_body_L42 in block@26: // after_if_else_L40
debug: Merged linear block@25: // after_if_else_L42 into block@23: // if_body_L42
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@17: // after_if_else_L31
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_guaranteed_data
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_data_or_assert
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%0#0, result#0
debug: Replacing {tuple_assignment%0#0} with result#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%1#0, exists#0
debug: Replacing {tuple_assignment%1#0} with exists#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.delete_data
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.set_data
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_data_with_default
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: default#0, ternary_result%1#1
debug: Replacing {ternary_result%1#1} with default#0 made 1 modifications
debug: Found equivalence set: awst_tmp%0.0#0, ternary_result%1#0
debug: Replacing {ternary_result%1#0} with awst_tmp%0.0#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@1: // ternary_true_L59 because it's used by phi nodes
debug: Not removing empty block block@2: // ternary_false_L59 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.__init__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to local_storage/out/local_storage_with_offsets_LocalStorageContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_guaranteed_data
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_data_or_assert
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.delete_data
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.set_data
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_data_with_default
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@1: // ternary_true_L59 because it's used by phi nodes
debug: Not removing empty block block@2: // ternary_false_L59 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.__init__
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.local_storage.local_storage_with_offsets.LocalStorageContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to local_storage/out/local_storage_with_offsets_LocalStorageContract.cssa.ir
debug: Removing Phis from examples.local_storage.local_storage_with_offsets.LocalStorageContract.approval_program
debug: Removing Phis from examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_guaranteed_data
debug: Removing Phis from examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_data_or_assert
debug: Removing Phis from examples.local_storage.local_storage_with_offsets.LocalStorageContract.delete_data
debug: Removing Phis from examples.local_storage.local_storage_with_offsets.LocalStorageContract.set_data
debug: Removing Phis from examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_data_with_default
debug: Removing Phis from examples.local_storage.local_storage_with_offsets.LocalStorageContract.__init__
debug: Removing Phis from examples.local_storage.local_storage_with_offsets.LocalStorageContract.clear_state_program
debug: Output IR to local_storage/out/local_storage_with_offsets_LocalStorageContract.post_ssa.ir
debug: Sequentializing parallel copies in examples.local_storage.local_storage_with_offsets.LocalStorageContract.approval_program
debug: Sequentializing parallel copies in examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_guaranteed_data
debug: Sequentializing parallel copies in examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_data_or_assert
debug: Sequentializing parallel copies in examples.local_storage.local_storage_with_offsets.LocalStorageContract.delete_data
debug: Sequentializing parallel copies in examples.local_storage.local_storage_with_offsets.LocalStorageContract.set_data
debug: Sequentializing parallel copies in examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_data_with_default
debug: Sequentializing parallel copies in examples.local_storage.local_storage_with_offsets.LocalStorageContract.__init__
debug: Sequentializing parallel copies in examples.local_storage.local_storage_with_offsets.LocalStorageContract.clear_state_program
debug: Output IR to local_storage/out/local_storage_with_offsets_LocalStorageContract.parallel_copies.ir
debug: Coalescing local variables in examples.local_storage.local_storage_with_offsets.LocalStorageContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_guaranteed_data using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_data_or_assert using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_with_offsets.LocalStorageContract.delete_data using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_with_offsets.LocalStorageContract.set_data using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_data_with_default using strategy RootOperandGrouping
debug: Coalescing ternary_result%1#2 with [ternary_result%1#3]
debug: Coalescing resulted in 3 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_with_offsets.LocalStorageContract.__init__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.local_storage.local_storage_with_offsets.LocalStorageContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to local_storage/out/local_storage_with_offsets_LocalStorageContract.final.ir
debug: Inserted main_block@0.ops[1]: 'store app_id%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load app_id%0#0' with 'load app_id%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[3]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[5]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[7]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[1]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[3]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[13]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[15]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[9]: 'store is_equal%5#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[12]: 'load is_equal%5#0' with 'load is_equal%5#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[4]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[7]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@4.ops[6]: 'store contains%4#0 to l-stack (copy)'
debug: Replaced main_after_if_else@4.ops[13]: 'load contains%4#0' with 'load contains%4#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@6.ops[1]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_after_if_else@6.ops[3]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@6.ops[6]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_after_if_else@6.ops[8]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@8.ops[1]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_after_if_else@8.ops[3]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@8.ops[9]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_after_if_else@8.ops[11]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_after_if_else@8.ops[14]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_after_if_else@8.ops[16]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_if_body@9.ops[3]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_if_body@9.ops[5]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_if_body@10.ops[2]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_if_body@10.ops[4]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_else_body@11.ops[3]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_else_body@11.ops[5]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_if_body@12.ops[2]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_if_body@12.ops[4]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_else_body@13.ops[3]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_else_body@13.ops[5]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_else_body@19.ops[1]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_else_body@19.ops[3]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_else_body@19.ops[6]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_else_body@19.ops[8]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_if_body@20.ops[3]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_if_body@20.ops[5]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_if_body@21.ops[1]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_if_body@21.ops[4]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_else_body@22.ops[3]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_else_body@22.ops[5]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_if_body@23.ops[5]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_if_body@23.ops[7]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_if_body@23.ops[1]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_if_body@23.ops[4]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Found 13 edge set/s for examples.local_storage.local_storage_with_offsets.LocalStorageContract.approval_program
debug: examples.local_storage.local_storage_with_offsets.LocalStorageContract.approval_program f-stack entry: ['method#0', 'offset#0']
debug: examples.local_storage.local_storage_with_offsets.LocalStorageContract.approval_program f-stack on first store: []
debug: Simplified txna ApplicationArgs 2; dig 1; swap to dig 0; txna ApplicationArgs 2
debug: Simplified txna ApplicationArgs 2; dig 1; swap to dig 0; txna ApplicationArgs 2
debug: Inserted get_guaranteed_data_block@0.ops[4]: 'store app_local_get_ex_did_exist%1#0 to l-stack (copy)'
debug: Replaced get_guaranteed_data_block@0.ops[7]: 'load app_local_get_ex_did_exist%1#0' with 'load app_local_get_ex_did_exist%1#0 from l-stack (no copy)'
debug: Inserted get_guaranteed_data_block@0.ops[6]: 'store app_local_get_ex_value%0#0 to l-stack (copy)'
debug: Replaced get_guaranteed_data_block@0.ops[10]: 'load app_local_get_ex_value%0#0' with 'load app_local_get_ex_value%0#0 from l-stack (no copy)'
debug: Inserted get_data_or_assert_block@0.ops[4]: 'store exists#0 to l-stack (copy)'
debug: Replaced get_data_or_assert_block@0.ops[7]: 'load exists#0' with 'load exists#0 from l-stack (no copy)'
debug: Inserted get_data_or_assert_block@0.ops[6]: 'store result#0 to l-stack (copy)'
debug: Replaced get_data_or_assert_block@0.ops[10]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted get_data_with_default_block@0.ops[4]: 'store awst_tmp%0.1#0 to l-stack (copy)'
debug: Replaced get_data_with_default_block@0.ops[7]: 'load awst_tmp%0.1#0' with 'load awst_tmp%0.1#0 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_data_with_default
debug: Allocated 1 variable/s to x-stack: ternary_result%1#2
debug: shared x-stack for get_data_with_default_ternary_true@1 -> get_data_with_default_ternary_merge@3: ternary_result%1#2
debug: shared x-stack for get_data_with_default_ternary_false@2 -> get_data_with_default_ternary_merge@3: ternary_result%1#2
debug: examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_data_with_default f-stack entry: []
debug: examples.local_storage.local_storage_with_offsets.LocalStorageContract.get_data_with_default f-stack on first store: ['awst_tmp%0.0#0']
info: Writing local_storage/out/local_storage_contract.approval.teal
info: Writing local_storage/out/local_storage_contract.approval.debug.teal
info: Writing local_storage/out/local_storage_contract.clear.teal
info: Writing local_storage/out/local_storage_contract.clear.debug.teal
info: Writing local_storage/out/local_storage_with_offsets.approval.teal
info: Writing local_storage/out/local_storage_with_offsets.approval.debug.teal
info: Writing local_storage/out/local_storage_with_offsets.clear.teal
info: Writing local_storage/out/local_storage_with_offsets.clear.debug.teal