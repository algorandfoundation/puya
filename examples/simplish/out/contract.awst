SCALE = 100000
SCALED_PI = 314159

contract Simplish extends (examples.simplish.base_class::CallCounter)
{
  approval_program(): bool
  {
    if (txn<ApplicationID>() == 0u) {
      return true
    }
    oca: puyapy.UInt64 = txn<OnCompletion>()
    sender: puyapy.Account = txn<Sender>()
    if (oca IS IN (UpdateApplication, DeleteApplication)) {
      if (oca == DeleteApplication) {
        log('I was used ' + examples.simplish.contract::itoa(this.globals['counter']) + ' time(s) before I died')
      }
      return global<CreatorAddress>() == sender
    }
    if (oca == OptIn) {
      if (txn<NumAppArgs>() > 0u) {
        this::set_sender_nickname(txna<ApplicationArgs, 0>())
      }
      return true
    }
    if (oca != NoOp) {
      return false
    }
    if (num_app_args: puyapy.UInt64 := txn<NumAppArgs>() > 0u) {
      method_name: puyapy.Bytes = txna<ApplicationArgs, 0>()
      (msg, result): tuple[puyapy.Bytes, bool] = this::call(method_name, num_app_args)
    } else {
      if (txn<NumAssets>() == 1u) {
        (asset_balance, asset_exists): tuple[puyapy.UInt64, bool] = asset_holding_get<AssetBalance>(sender, 0u)
        if (!(asset_exists)) {
          msg: puyapy.Bytes = 'You do not have any of the asset'
        } else {
          msg: puyapy.Bytes = 'You have asset balance: ' + examples.simplish.contract::itoa(asset_balance)
        }
        result: bool = true
      } else {
        msg: puyapy.Bytes = 'not enough app args or foreign assets'
        result: bool = false
      }
    }
    log(msg)
    this::increment_counter()
    return result
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine call(method_name: puyapy.Bytes, num_app_args: puyapy.UInt64): tuple[puyapy.Bytes, bool]
  {
    assert(num_app_args == 2u, comment="insufficient arguments")
    radius: puyapy.UInt64 = btoi(txna<ApplicationArgs, 1>())
    status: bool = true
    if (method_name == 'circle_area') {
      area: puyapy.UInt64 = examples.simplish.contract::circle_area(radius)
      result: puyapy.Bytes = examples.simplish.contract::itoa(area)
    } else {
      if (method_name == 'circle_circumference') {
        circumference: puyapy.UInt64 = examples.simplish.contract::circle_circumference(radius)
        result: puyapy.Bytes = examples.simplish.contract::itoa(circumference)
      } else {
        if (method_name == 'circle_report') {
          (area, circumference): tuple[puyapy.UInt64, puyapy.UInt64] = (examples.simplish.contract::circle_area(radius), examples.simplish.contract::circle_circumference(radius))
          result: puyapy.Bytes = 'Approximate area and circumference of circle with radius ' + examples.simplish.contract::itoa(radius) + ' = ' + examples.simplish.contract::itoa(area) + ', ' + examples.simplish.contract::itoa(circumference)
        } else {
          status: bool = false
          result: puyapy.Bytes = 'unknown method name'
        }
      }
    }
    return (result, status)
  }
  
  subroutine increment_counter(): None
  {
    log('Incrementing counter!')
    examples.simplish.base_class::CallCounter::increment_counter()
  }
}

subroutine circle_circumference(radius: puyapy.UInt64): puyapy.UInt64
{
  two_pi: puyapy.UInt64 = 2u * 314159u
  return radius * two_pi // 100000u
}

subroutine circle_area(radius: puyapy.UInt64): puyapy.UInt64
{
  result: puyapy.UInt64 = radius ** 2u * 314159u // 100000u
  return result
}

subroutine itoa(i: puyapy.UInt64): puyapy.Bytes
{
  digits: puyapy.Bytes = '0123456789'
  radix: puyapy.UInt64 = len(digits)
  if (i < radix) {
    return digits[i]
  }
  return examples.simplish.contract::itoa(i // radix) + digits[i % radix]
}

subroutine test_intrinsics(): puyapy.UInt64
{
  ii: puyapy.Bytes = gload<1, 1>()
  si: puyapy.Bytes = gloadss(2u, 2u)
  ss: puyapy.Bytes = gloadss(3u, 3u)
  is_: puyapy.Bytes = gloads<4>(4u)
  foo_uint: puyapy.UInt64 = setbit(32u, 0u, 3u)
  foo_int: puyapy.UInt64 = setbit(32u, 0u, 3u)
  foo_bytes: puyapy.Bytes = setbit('32', 0u, 3u)
  test: puyapy.Bytes = app_global_get('foo')
  app_global_put('b', 'yeah')
  app_global_del('foo')
  expect_bytes: puyapy.Bytes = test
  abcd: tuple[puyapy.UInt64, puyapy.UInt64, puyapy.UInt64, puyapy.UInt64] = divmodw(1u, 2u, 3u, 4u)
  hello_str: puyapy.Bytes = base64_decode<StdEncoding>('SGVsbG8=')
  return 0u
}