>> poetry run puyapy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 --log-level=debug undefined_phi_args
debug: Building AWST for __init__.py
debug: Building AWST for undefined_phi_args
debug: Building AWST for embedded puyapy lib at <puya>/puyapy.py
debug: Building AWST for undefined_phi_args/baddie.py
debug: Sealing block@0: // L38
debug: Terminated block@0: // L38
debug: Sealing block@None: // if_body_L39
debug: Sealing block@None: // else_body_L39
debug: Terminated block@1: // if_body_L39
debug: Sealing block@2: // after_if_else_L39
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@2: // after_if_else_L39
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0) in block@0: // L38
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) in block@1: // if_body_L39
debug: Replacing trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1)
debug: Replaced trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L39
debug: Sealing block@None: // if_body_L41
debug: Sealing block@None: // else_body_L41
debug: Terminated block@3: // if_body_L41
debug: Terminated block@4: // else_body_L41
debug: Sealing block@5: // after_if_else_L41
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@5: // after_if_else_L41
debug: Created Phi assignment: let y#2: uint64 = undefined while trying to resolve 'y' in block@2: // after_if_else_L39
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@0) in block@0: // L38
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) in block@1: // if_body_L39
debug: Replacing trivial Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1)
debug: Replaced trivial Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@3) in block@3: // if_body_L41
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) in block@4: // else_body_L41
debug: Replacing trivial Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4)
debug: Replaced trivial Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@5: // after_if_else_L41
debug: Sealing block@None: // if_body_L45
debug: Sealing block@None: // else_body_L45
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@5: // after_if_else_L41
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@2: // after_if_else_L39
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@0: // L38
warning: Variable a potentially used before assignment
debug: Added a#3 to Phi node: let a#2: uint64 = φ(a#3 <- block@0) in block@0: // L38
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#3 <- block@0, a#0 <- block@1) in block@1: // if_body_L39
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3) in block@3: // if_body_L41
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) in block@4: // else_body_L41
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2 in current definition for 1 blocks
debug: Terminated block@6: // if_body_L45
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@5: // after_if_else_L41
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@3) in block@3: // if_body_L41
debug: Added b#1 to Phi node: let b#2: uint64 = φ(b#0 <- block@3, b#1 <- block@4) in block@4: // else_body_L41
debug: Terminated block@7: // else_body_L45
debug: Sealing block@8: // after_if_else_L45
debug: Created Phi assignment: let c#2: uint64 = undefined while trying to resolve 'c' in block@8: // after_if_else_L45
debug: Added c#0 to Phi node: let c#2: uint64 = φ(c#0 <- block@6) in block@6: // if_body_L45
debug: Added c#1 to Phi node: let c#2: uint64 = φ(c#0 <- block@6, c#1 <- block@7) in block@7: // else_body_L45
debug: Terminated block@8: // after_if_else_L45
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Sealing block@None: // if_body_L58
debug: Sealing block@None: // else_body_L58
debug: Terminated block@1: // if_body_L58
debug: Sealing block@2: // after_if_else_L58
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@2: // after_if_else_L58
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0) in block@0: // L57
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) in block@1: // if_body_L58
debug: Replacing trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1)
debug: Replaced trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L58
debug: Sealing block@None: // if_body_L60
debug: Sealing block@None: // else_body_L60
debug: Terminated block@3: // if_body_L60
debug: Terminated block@4: // else_body_L60
debug: Sealing block@5: // after_if_else_L60
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@5: // after_if_else_L60
debug: Created Phi assignment: let y#2: uint64 = undefined while trying to resolve 'y' in block@2: // after_if_else_L58
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@0) in block@0: // L57
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) in block@1: // if_body_L58
debug: Replacing trivial Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1)
debug: Replaced trivial Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@3) in block@3: // if_body_L60
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) in block@4: // else_body_L60
debug: Replacing trivial Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4)
debug: Replaced trivial Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@5: // after_if_else_L60
debug: Sealing block@None: // if_body_L64
debug: Sealing block@None: // else_body_L64
debug: Created Phi assignment: let a#1: bytes = undefined while trying to resolve 'a' in block@5: // after_if_else_L60
debug: Created Phi assignment: let a#2: bytes = undefined while trying to resolve 'a' in block@2: // after_if_else_L58
debug: Created Phi assignment: let a#3: bytes = undefined while trying to resolve 'a' in block@0: // L57
warning: Variable a potentially used before assignment
debug: Added a#3 to Phi node: let a#2: bytes = φ(a#3 <- block@0) in block@0: // L57
debug: Added a#0 to Phi node: let a#2: bytes = φ(a#3 <- block@0, a#0 <- block@1) in block@1: // if_body_L58
debug: Added a#2 to Phi node: let a#1: bytes = φ(a#2 <- block@3) in block@3: // if_body_L60
debug: Added a#2 to Phi node: let a#1: bytes = φ(a#2 <- block@3, a#2 <- block@4) in block@4: // else_body_L60
debug: Replacing trivial Phi node: let a#1: bytes = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2
debug: Deleting Phi assignment: let a#1: bytes = φ(a#2 <- block@3, a#2 <- block@4)
debug: Replaced trivial Phi node: let a#1: bytes = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2 in current definition for 1 blocks
debug: Terminated block@6: // if_body_L64
debug: Created Phi assignment: let b#2: bytes = undefined while trying to resolve 'b' in block@5: // after_if_else_L60
debug: Added b#0 to Phi node: let b#2: bytes = φ(b#0 <- block@3) in block@3: // if_body_L60
debug: Added b#1 to Phi node: let b#2: bytes = φ(b#0 <- block@3, b#1 <- block@4) in block@4: // else_body_L60
debug: Terminated block@7: // else_body_L64
debug: Sealing block@8: // after_if_else_L64
debug: Created Phi assignment: let c#2: bytes = undefined while trying to resolve 'c' in block@8: // after_if_else_L64
debug: Added c#0 to Phi node: let c#2: bytes = φ(c#0 <- block@6) in block@6: // if_body_L64
debug: Added c#1 to Phi node: let c#2: bytes = φ(c#0 <- block@6, c#1 <- block@7) in block@7: // else_body_L64
debug: Terminated block@8: // after_if_else_L64
debug: Sealing block@0: // L76
debug: Terminated block@0: // L76
debug: Sealing block@None: // if_body_L77
debug: Sealing block@None: // else_body_L77
debug: Terminated block@1: // if_body_L77
debug: Sealing block@2: // after_if_else_L77
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@2: // after_if_else_L77
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0) in block@0: // L76
debug: Added x#0 to Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) in block@1: // if_body_L77
debug: Replacing trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0
debug: Deleting Phi assignment: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1)
debug: Replaced trivial Phi node: let x#1: uint64 = φ(x#0 <- block@0, x#0 <- block@1) (x#1) with x#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L77
debug: Sealing block@None: // if_body_L79
debug: Sealing block@None: // else_body_L79
debug: Terminated block@3: // if_body_L79
debug: Terminated block@4: // else_body_L79
debug: Sealing block@5: // after_if_else_L79
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@5: // after_if_else_L79
debug: Created Phi assignment: let y#2: uint64 = undefined while trying to resolve 'y' in block@2: // after_if_else_L77
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@0) in block@0: // L76
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) in block@1: // if_body_L77
debug: Replacing trivial Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1)
debug: Replaced trivial Phi node: let y#2: uint64 = φ(y#0 <- block@0, y#0 <- block@1) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@3) in block@3: // if_body_L79
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) in block@4: // else_body_L79
debug: Replacing trivial Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4)
debug: Replaced trivial Phi node: let y#1: uint64 = φ(y#0 <- block@3, y#0 <- block@4) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@5: // after_if_else_L79
debug: Sealing block@None: // if_body_L83
debug: Sealing block@None: // else_body_L83
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@5: // after_if_else_L79
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@2: // after_if_else_L77
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@0: // L76
warning: Variable a potentially used before assignment
debug: Added a#3 to Phi node: let a#2: uint64 = φ(a#3 <- block@0) in block@0: // L76
debug: Added a#0 to Phi node: let a#2: uint64 = φ(a#3 <- block@0, a#0 <- block@1) in block@1: // if_body_L77
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3) in block@3: // if_body_L79
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) in block@4: // else_body_L79
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#2 <- block@3, a#2 <- block@4) (a#1) with a#2 in current definition for 1 blocks
debug: Terminated block@6: // if_body_L83
debug: Created Phi assignment: let b#2: bytes = undefined while trying to resolve 'b' in block@5: // after_if_else_L79
debug: Added b#0 to Phi node: let b#2: bytes = φ(b#0 <- block@3) in block@3: // if_body_L79
debug: Added b#1 to Phi node: let b#2: bytes = φ(b#0 <- block@3, b#1 <- block@4) in block@4: // else_body_L79
debug: Terminated block@7: // else_body_L83
debug: Sealing block@8: // after_if_else_L83
debug: Created Phi assignment: let c#2: bytes = undefined while trying to resolve 'c' in block@8: // after_if_else_L83
debug: Added c#0 to Phi node: let c#2: bytes = φ(c#0 <- block@6) in block@6: // if_body_L83
debug: Added c#1 to Phi node: let c#2: bytes = φ(c#0 <- block@6, c#1 <- block@7) in block@7: // else_body_L83
debug: Terminated block@8: // after_if_else_L83
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@None: // and_contd_L8
debug: Terminated block@1: // and_contd_L8
debug: Sealing block@None: // bool_true_L8
debug: Sealing block@None: // bool_false_L8
debug: Terminated block@2: // bool_true_L8
debug: Terminated block@3: // bool_false_L8
debug: Sealing block@4: // bool_merge_L8
debug: Created Phi assignment: let and_result%5#2: uint64 = undefined while trying to resolve 'and_result%5' in block@4: // bool_merge_L8
debug: Added and_result%5#0 to Phi node: let and_result%5#2: uint64 = φ(and_result%5#0 <- block@2) in block@2: // bool_true_L8
debug: Added and_result%5#1 to Phi node: let and_result%5#2: uint64 = φ(and_result%5#0 <- block@2, and_result%5#1 <- block@3) in block@3: // bool_false_L8
debug: Terminated block@4: // bool_merge_L8
debug: Sealing block@None: // if_body_L11
debug: Sealing block@None: // else_body_L11
debug: Created Phi assignment: let test_case#1: bytes = undefined while trying to resolve 'test_case' in block@4: // bool_merge_L8
debug: Added test_case#0 to Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2) in block@2: // bool_true_L8
debug: Created Phi assignment: let test_case#2: bytes = undefined while trying to resolve 'test_case' in block@3: // bool_false_L8
debug: Added test_case#0 to Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0) in block@0: // L5
debug: Added test_case#0 to Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) in block@1: // and_contd_L8
debug: Replacing trivial Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) (test_case#2) with test_case#0
debug: Deleting Phi assignment: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1)
debug: Replaced trivial Phi node: let test_case#2: bytes = φ(test_case#0 <- block@0, test_case#0 <- block@1) (test_case#2) with test_case#0 in current definition for 1 blocks
debug: Added test_case#0 to Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) in block@3: // bool_false_L8
debug: Replacing trivial Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) (test_case#1) with test_case#0
debug: Deleting Phi assignment: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3)
debug: Replaced trivial Phi node: let test_case#1: bytes = φ(test_case#0 <- block@2, test_case#0 <- block@3) (test_case#1) with test_case#0 in current definition for 1 blocks
debug: Terminated block@5: // if_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@6: // if_body_L12
debug: Terminated block@7: // else_body_L12
debug: Sealing block@None: // if_body_L15
debug: Sealing block@None: // else_body_L15
debug: Terminated block@8: // if_body_L15
debug: Terminated block@9: // else_body_L15
debug: Sealing block@10: // after_if_else_L15
debug: Terminated block@10: // after_if_else_L15
debug: Sealing block@11: // after_if_else_L12
debug: Terminated block@11: // after_if_else_L12
debug: Terminated block@12: // else_body_L11
debug: Sealing block@None: // if_body_L22
debug: Sealing block@None: // else_body_L22
debug: Terminated block@13: // if_body_L22
debug: Terminated block@14: // else_body_L22
debug: Sealing block@None: // if_body_L25
debug: Sealing block@None: // else_body_L25
debug: Terminated block@15: // if_body_L25
debug: Terminated block@16: // else_body_L25
debug: Sealing block@17: // after_if_else_L25
debug: Terminated block@17: // after_if_else_L25
debug: Sealing block@18: // after_if_else_L22
debug: Terminated block@18: // after_if_else_L22
debug: Sealing block@19: // after_if_else_L11
debug: Terminated block@19: // after_if_else_L11
debug: Sealing block@0: // L33
debug: Terminated block@0: // L33
debug: Output IR to <git root>/examples/undefined_phi_args/out/baddie_Baddie.ssa.ir
info: Optimizing examples.undefined_phi_args.baddie.Baddie at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.undefined_phi_args.baddie.Baddie.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: and_result%5#2, invert_second_condition#0
debug: Replacing {and_result%5#2} with invert_second_condition#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@10: // after_if_else_L15
debug: Removed empty block: block@17: // after_if_else_L25
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.undefined_phi_args.baddie.test_uint_undefined
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.undefined_phi_args.baddie.test_bytes_undefined
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.undefined_phi_args.baddie.test_mixed_undefined
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/undefined_phi_args/out/baddie_Baddie.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@11: // after_if_else_L12
debug: Removed empty block: block@18: // after_if_else_L22
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.undefined_phi_args.baddie.test_uint_undefined
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.undefined_phi_args.baddie.test_bytes_undefined
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.undefined_phi_args.baddie.test_mixed_undefined
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/undefined_phi_args/out/baddie_Baddie.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine examples.undefined_phi_args.baddie.Baddie.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.undefined_phi_args.baddie.test_uint_undefined
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.undefined_phi_args.baddie.test_bytes_undefined
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.undefined_phi_args.baddie.test_mixed_undefined
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 3, ending loop
debug: Output IR to <git root>/examples/undefined_phi_args/out/baddie_Baddie.cssa.ir
debug: Removing Phis from examples.undefined_phi_args.baddie.Baddie.approval_program
debug: Removing Phis from examples.undefined_phi_args.baddie.test_uint_undefined
debug: Removing Phis from examples.undefined_phi_args.baddie.test_bytes_undefined
debug: Removing Phis from examples.undefined_phi_args.baddie.test_mixed_undefined
debug: Removing Phis from examples.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Output IR to <git root>/examples/undefined_phi_args/out/baddie_Baddie.post_ssa.ir
debug: Sequentializing parallel copies in examples.undefined_phi_args.baddie.Baddie.approval_program
debug: Sequentializing parallel copies in examples.undefined_phi_args.baddie.test_uint_undefined
debug: Sequentializing parallel copies in examples.undefined_phi_args.baddie.test_bytes_undefined
debug: Sequentializing parallel copies in examples.undefined_phi_args.baddie.test_mixed_undefined
debug: Sequentializing parallel copies in examples.undefined_phi_args.baddie.Baddie.clear_state_program
debug: Output IR to <git root>/examples/undefined_phi_args/out/baddie_Baddie.parallel_copies.ir
debug: Coalescing local variables in examples.undefined_phi_args.baddie.Baddie.approval_program using strategy RootOperandGrouping
debug: Coalescing and_result%5#0 with [and_result%5#1]
debug: Coalescing invert_second_condition#0 with [invert_second_condition#1]
debug: Coalescing resulted in 5 replacement/s
debug: Coalescing local variables in examples.undefined_phi_args.baddie.test_uint_undefined using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#5, a#2]
debug: Coalescing b#0 with [b#5, b#1, b#2]
debug: Coalescing c#0 with [c#5, c#1, c#2]
debug: Coalescing resulted in 18 replacement/s
debug: Coalescing local variables in examples.undefined_phi_args.baddie.test_bytes_undefined using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#5, a#2]
debug: Coalescing b#0 with [b#5, b#1, b#2]
debug: Coalescing c#0 with [c#5, c#1, c#2]
debug: Coalescing resulted in 18 replacement/s
debug: Coalescing local variables in examples.undefined_phi_args.baddie.test_mixed_undefined using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#5, a#2]
debug: Coalescing b#0 with [b#5, b#1, b#2]
debug: Coalescing c#0 with [c#5, c#1, c#2]
debug: Coalescing resulted in 18 replacement/s
debug: Coalescing local variables in examples.undefined_phi_args.baddie.Baddie.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/undefined_phi_args/out/baddie_Baddie.final.ir
debug: Inserted main_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[10]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_and_contd@1.ops[1]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_and_contd@1.ops[3]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_and_contd@1.ops[5]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_and_contd@1.ops[7]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_and_contd@1.ops[10]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_and_contd@1.ops[12]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_bool_true@2.ops[1]: 'store and_result%5#0 to l-stack (copy)'
debug: Replaced main_bool_true@2.ops[3]: 'load and_result%5#0' with 'load and_result%5#0 from l-stack (no copy)'
debug: Inserted main_bool_false@3.ops[1]: 'store and_result%5#0 to l-stack (copy)'
debug: Replaced main_bool_false@3.ops[3]: 'load and_result%5#0' with 'load and_result%5#0 from l-stack (no copy)'
debug: Inserted main_if_body@5.ops[3]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_if_body@5.ops[5]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[3]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[5]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[8]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[10]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[15]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[17]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[20]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[22]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_else_body@7.ops[3]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_else_body@7.ops[5]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_if_body@8.ops[3]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_if_body@8.ops[5]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_if_body@8.ops[8]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_if_body@8.ops[10]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_if_body@8.ops[15]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_if_body@8.ops[17]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_if_body@8.ops[20]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_if_body@8.ops[22]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_else_body@9.ops[3]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_else_body@9.ops[5]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_else_body@9.ops[8]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_else_body@9.ops[10]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_else_body@9.ops[15]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_else_body@9.ops[17]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_else_body@9.ops[20]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_else_body@9.ops[22]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_else_body@12.ops[3]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_else_body@12.ops[5]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_if_body@13.ops[3]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_if_body@13.ops[5]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_if_body@13.ops[8]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_if_body@13.ops[10]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_if_body@13.ops[15]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_if_body@13.ops[17]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_if_body@13.ops[20]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced main_if_body@13.ops[22]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted main_else_body@14.ops[3]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced main_else_body@14.ops[5]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted main_if_body@15.ops[3]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced main_if_body@15.ops[5]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted main_if_body@15.ops[8]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced main_if_body@15.ops[10]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted main_if_body@15.ops[15]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced main_if_body@15.ops[17]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted main_if_body@15.ops[20]: 'store tmp%29#0 to l-stack (copy)'
debug: Replaced main_if_body@15.ops[22]: 'load tmp%29#0' with 'load tmp%29#0 from l-stack (no copy)'
debug: Inserted main_else_body@16.ops[3]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced main_else_body@16.ops[5]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted main_else_body@16.ops[8]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced main_else_body@16.ops[10]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted main_else_body@16.ops[15]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced main_else_body@16.ops[17]: 'load tmp%32#0' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted main_else_body@16.ops[20]: 'store tmp%33#0 to l-stack (copy)'
debug: Replaced main_else_body@16.ops[22]: 'load tmp%33#0' with 'load tmp%33#0 from l-stack (no copy)'
debug: Found 8 edge set/s for examples.undefined_phi_args.baddie.Baddie.approval_program
debug: Allocated 1 variable/s to x-stack: invert_second_condition#0
debug: shared x-stack for main_bool_true@2 -> main_bool_merge@4: invert_second_condition#0
debug: shared x-stack for main_bool_false@3 -> main_bool_merge@4: invert_second_condition#0
debug: examples.undefined_phi_args.baddie.Baddie.approval_program f-stack entry: []
debug: examples.undefined_phi_args.baddie.Baddie.approval_program f-stack on first store: ['test_case#0']
debug: Found 5 edge set/s for examples.undefined_phi_args.baddie.test_uint_undefined
debug: Allocated 1 variable/s to x-stack: c#0
debug: shared x-stack for test_uint_undefined_if_body@6 -> test_uint_undefined_after_if_else@8: c#0
debug: shared x-stack for test_uint_undefined_else_body@7 -> test_uint_undefined_after_if_else@8: c#0
debug: examples.undefined_phi_args.baddie.test_uint_undefined f-stack entry: ['a#0', 'b#0']
debug: examples.undefined_phi_args.baddie.test_uint_undefined f-stack on first store: []
debug: Found 5 edge set/s for examples.undefined_phi_args.baddie.test_bytes_undefined
debug: Allocated 1 variable/s to x-stack: c#0
debug: shared x-stack for test_bytes_undefined_if_body@6 -> test_bytes_undefined_after_if_else@8: c#0
debug: shared x-stack for test_bytes_undefined_else_body@7 -> test_bytes_undefined_after_if_else@8: c#0
debug: examples.undefined_phi_args.baddie.test_bytes_undefined f-stack entry: ['a#0', 'b#0']
debug: examples.undefined_phi_args.baddie.test_bytes_undefined f-stack on first store: []
debug: Inserted test_mixed_undefined_if_body@6.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_mixed_undefined_if_body@6.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Found 5 edge set/s for examples.undefined_phi_args.baddie.test_mixed_undefined
debug: Allocated 1 variable/s to x-stack: c#0
debug: shared x-stack for test_mixed_undefined_if_body@6 -> test_mixed_undefined_after_if_else@8: c#0
debug: shared x-stack for test_mixed_undefined_else_body@7 -> test_mixed_undefined_after_if_else@8: c#0
debug: examples.undefined_phi_args.baddie.test_mixed_undefined f-stack entry: ['b#0', 'a#0']
debug: examples.undefined_phi_args.baddie.test_mixed_undefined f-stack on first store: []
info: Writing undefined_phi_args/out/baddie.approval.teal
info: Writing undefined_phi_args/out/baddie.approval.debug.teal
info: Writing undefined_phi_args/out/baddie.clear.teal
info: Writing undefined_phi_args/out/baddie.clear.debug.teal
>> exit code = 0