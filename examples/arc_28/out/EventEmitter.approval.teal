#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 8
    // arc_28/contract.py:11
    // class EventEmitter(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@9
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x0a9542cd 0x71a3151f // method "emit_swapped(uint64,uint64)void", method "emit_ufixed(ufixed256x16,ufixed64x2)void"
    txna ApplicationArgs 0
    match emit_swapped emit_ufixed
    err

main___algopy_default_create@9:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_0 // 1
    return


// examples.arc_28.contract.EventEmitter.emit_swapped[routing]() -> void:
emit_swapped:
    // arc_28/contract.py:12
    // @arc4.abimethod
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 2
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    // arc_28/contract.py:14
    // arc4.emit(Swapped(b, a))
    swap
    concat
    pushbytes 0x1ccbd925 // method "Swapped(uint64,uint64)"
    swap
    concat
    dup
    log
    // arc_28/contract.py:15
    // arc4.emit("Swapped(uint64,uint64)", b, a)
    dup
    log
    // arc_28/contract.py:16
    // arc4.emit("Swapped", b, a)
    log
    // arc_28/contract.py:12
    // @arc4.abimethod
    intc_0 // 1
    return


// examples.arc_28.contract.EventEmitter.emit_ufixed[routing]() -> void:
emit_ufixed:
    // arc_28/contract.py:18
    // @arc4.abimethod()
    txna ApplicationArgs 1
    dup
    len
    pushint 32 // 32
    ==
    assert // invalid number of bytes for arc4.ufixed256x16
    txna ApplicationArgs 2
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.ufixed64x2
    // arc_28/contract.py:24
    // arc4.emit("AnEvent(ufixed256x16,ufixed64x2)", a, b)
    concat
    pushbytes 0x7389b1ba // method "AnEvent(ufixed256x16,ufixed64x2)"
    swap
    concat
    log
    // arc_28/contract.py:18
    // @arc4.abimethod()
    intc_0 // 1
    return
