contract EventEmitter
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
    algopy._contract.Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod examples.arc_28.contract.EventEmitter.emit_swapped(a: arc4.uint64, b: arc4.uint64): void
  {
    emit('Swapped(uint64,uint64)', new examples.arc_28.contract.Swapped(a=b, b=a))
    emit('Swapped(uint64,uint64)', new Swapped(field1=b, field2=a))
    emit('Swapped(uint64,uint64)', new Swapped(field1=b, field2=a))
  }
  
  abimethod examples.arc_28.contract.EventEmitter.emit_ufixed(a: arc4.ufixed256x16, b: arc4.ufixed64x2): void
  {
    emit('AnEvent(ufixed256x16,ufixed64x2)', new AnEvent(field1=a, field2=b))
  }
  
  baremethod examples.arc_28.contract.EventEmitter.__algopy_default_create(): void
  {
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}