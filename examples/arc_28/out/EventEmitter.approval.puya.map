{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";AAUA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;AAOK;;AAAA;AAAA;AAAA;;AAAA;AAPL;;;AAAA;;;AAOK;;;AAAA;;;AANA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AACK;;;AAAA;;;AADL;;AAAA;;;;;;;;;;AACA;;;AAEkB;;AAAA;;AAAA;AAAV;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;AAER;;;AAMQ;;AAAA;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "6": {
      "op": "pushbytess 0x0a9542cd 0x71a3151f // method \"emit_swapped(uint64,uint64)void\", method \"emit_ufixed(ufixed256x16,ufixed64x2)void\""
    },
    "18": {
      "op": "txna ApplicationArgs 0"
    },
    "21": {
      "op": "match main_emit_swapped_route@3 main_emit_ufixed_route@4"
    },
    "27": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "29": {
      "op": "return"
    },
    "30": {
      "block": "main_emit_ufixed_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "32": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "33": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "34": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "36": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "37": {
      "op": "txna ApplicationArgs 1"
    },
    "40": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "43": {
      "callsub": "examples.arc_28.contract.EventEmitter.emit_ufixed",
      "op": "callsub emit_ufixed",
      "stack_out": []
    },
    "46": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "48": {
      "op": "return"
    },
    "49": {
      "block": "main_emit_swapped_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "51": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "52": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "53": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "55": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "56": {
      "op": "txna ApplicationArgs 1"
    },
    "59": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "62": {
      "callsub": "examples.arc_28.contract.EventEmitter.emit_swapped",
      "op": "callsub emit_swapped",
      "stack_out": []
    },
    "65": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "67": {
      "op": "return"
    },
    "68": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "70": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "73": {
      "op": "txn ApplicationID"
    },
    "75": {
      "op": "!"
    },
    "76": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "77": {
      "op": "pushint 1 // 1"
    },
    "79": {
      "op": "return"
    },
    "80": {
      "subroutine": "examples.arc_28.contract.EventEmitter.emit_swapped",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "emit_swapped",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "83": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "85": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "a#0 (copy)"
      ]
    },
    "87": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "88": {
      "op": "pushbytes 0x1ccbd925 // method \"Swapped(uint64,uint64)\"",
      "defined_out": [
        "Method(Swapped(uint64,uint64))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(Swapped(uint64,uint64))"
      ]
    },
    "94": {
      "op": "swap",
      "stack_out": [
        "Method(Swapped(uint64,uint64))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "95": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "96": {
      "op": "dup",
      "defined_out": [
        "event%0#0",
        "event%0#0 (copy)"
      ],
      "stack_out": [
        "event%0#0",
        "event%0#0 (copy)"
      ]
    },
    "97": {
      "op": "log",
      "stack_out": [
        "event%0#0"
      ]
    },
    "98": {
      "op": "dup",
      "stack_out": [
        "event%0#0",
        "event%0#0 (copy)"
      ]
    },
    "99": {
      "op": "log",
      "stack_out": [
        "event%0#0"
      ]
    },
    "100": {
      "op": "log",
      "stack_out": []
    },
    "101": {
      "retsub": true,
      "op": "retsub"
    },
    "102": {
      "subroutine": "examples.arc_28.contract.EventEmitter.emit_ufixed",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "emit_ufixed",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "105": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "107": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "b#0 (copy)"
      ]
    },
    "109": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "110": {
      "op": "pushbytes 0x7389b1ba // method \"AnEvent(ufixed256x16,ufixed64x2)\"",
      "defined_out": [
        "Method(AnEvent(ufixed256x16,ufixed64x2))",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "Method(AnEvent(ufixed256x16,ufixed64x2))"
      ]
    },
    "116": {
      "op": "swap",
      "stack_out": [
        "Method(AnEvent(ufixed256x16,ufixed64x2))",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "117": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "118": {
      "op": "log",
      "stack_out": []
    },
    "119": {
      "retsub": true,
      "op": "retsub"
    }
  }
}