{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";AAUA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;AAAA;;AAAA;AAAA;;;;;;;;AACK;;;AAAA;;;AAEa;AAAV;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAJH;;AAAA;AAMA;;;AAAA;;;AAMG;AAAA;;;;;;AAAA;AAAA;AAAA;AANH;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3": {
      "op": "bz main_bare_routing@16",
      "stack_out": []
    },
    "6": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "8": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "9": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "10": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "12": {
      "op": "assert",
      "stack_out": []
    },
    "13": {
      "op": "pushbytess 0x0a9542cd 0x71a3151f // method \"emit_swapped(uint64,uint64)void\", method \"emit_ufixed(ufixed256x16,ufixed64x2)void\"",
      "defined_out": [
        "Method(emit_swapped(uint64,uint64)void)",
        "Method(emit_ufixed(ufixed256x16,ufixed64x2)void)"
      ],
      "stack_out": [
        "Method(emit_swapped(uint64,uint64)void)",
        "Method(emit_ufixed(ufixed256x16,ufixed64x2)void)"
      ]
    },
    "25": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(emit_swapped(uint64,uint64)void)",
        "Method(emit_ufixed(ufixed256x16,ufixed64x2)void)",
        "tmp%7#0"
      ],
      "stack_out": [
        "Method(emit_swapped(uint64,uint64)void)",
        "Method(emit_ufixed(ufixed256x16,ufixed64x2)void)",
        "tmp%7#0"
      ]
    },
    "28": {
      "op": "match emit_swapped emit_ufixed",
      "stack_out": []
    },
    "34": {
      "op": "err"
    },
    "35": {
      "block": "main_bare_routing@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "37": {
      "op": "!",
      "defined_out": [
        "not%tmp%9#0"
      ],
      "stack_out": [
        "not%tmp%9#0"
      ]
    },
    "38": {
      "op": "assert",
      "stack_out": []
    },
    "39": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "41": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "42": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "43": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "45": {
      "op": "return",
      "stack_out": []
    },
    "46": {
      "subroutine": "examples.arc_28.contract.EventEmitter.emit_swapped[routing]",
      "params": {},
      "block": "emit_swapped",
      "stack_in": [],
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "b#0"
      ]
    },
    "49": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "b#0",
        "a#0"
      ]
    },
    "52": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "53": {
      "op": "pushbytes 0x1ccbd925 // method \"Swapped(uint64,uint64)\"",
      "defined_out": [
        "Method(Swapped(uint64,uint64))",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "Method(Swapped(uint64,uint64))"
      ]
    },
    "59": {
      "op": "swap",
      "stack_out": [
        "Method(Swapped(uint64,uint64))",
        "aggregate%head%1#0"
      ]
    },
    "60": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "61": {
      "op": "dup",
      "defined_out": [
        "event%0#0",
        "event%0#0 (copy)"
      ],
      "stack_out": [
        "event%0#0",
        "event%0#0 (copy)"
      ]
    },
    "62": {
      "op": "log",
      "stack_out": [
        "event%0#0"
      ]
    },
    "63": {
      "op": "dup",
      "stack_out": [
        "event%0#0",
        "event%0#0 (copy)"
      ]
    },
    "64": {
      "op": "log",
      "stack_out": [
        "event%0#0"
      ]
    },
    "65": {
      "op": "log",
      "stack_out": []
    },
    "66": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "68": {
      "op": "return",
      "stack_out": []
    },
    "69": {
      "subroutine": "examples.arc_28.contract.EventEmitter.emit_ufixed[routing]",
      "params": {},
      "block": "emit_ufixed",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "72": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "75": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "76": {
      "op": "pushbytes 0x7389b1ba // method \"AnEvent(ufixed256x16,ufixed64x2)\"",
      "defined_out": [
        "Method(AnEvent(ufixed256x16,ufixed64x2))",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "Method(AnEvent(ufixed256x16,ufixed64x2))"
      ]
    },
    "82": {
      "op": "swap",
      "stack_out": [
        "Method(AnEvent(ufixed256x16,ufixed64x2))",
        "aggregate%head%1#0"
      ]
    },
    "83": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "84": {
      "op": "log",
      "stack_out": []
    },
    "85": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "87": {
      "op": "return",
      "stack_out": []
    }
  }
}