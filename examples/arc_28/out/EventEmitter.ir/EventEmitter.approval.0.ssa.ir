main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = examples.arc_28.contract.EventEmitter.__puya_arc4_router__()
        return tmp%0#0

subroutine examples.arc_28.contract.EventEmitter.__puya_arc4_router__() -> bool:
    block@0: // L11
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@6
    block@1: // abi_routing_L11
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "emit_swapped(uint64,uint64)void" => block@2, method "emit_ufixed(ufixed256x16,ufixed64x2)void" => block@3, * => block@4}
    block@2: // emit_swapped_route_L12
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        examples.arc_28.contract.EventEmitter.emit_swapped(reinterpret_Encoded(uint64)%0#0, reinterpret_Encoded(uint64)%1#0)
        return 1u
    block@3: // emit_ufixed_route_L18
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(uint256)%0#0: Encoded(uint256) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        examples.arc_28.contract.EventEmitter.emit_ufixed(reinterpret_Encoded(uint256)%0#0, reinterpret_Encoded(uint64)%2#0)
        return 1u
    block@4: // switch_case_default_L11
        goto block@5
    block@5: // switch_case_next_L11
        goto block@10
    block@6: // bare_routing_L11
        let tmp%11#0: uint64 = (txn OnCompletion)
        switch tmp%11#0 {0u => block@7, * => block@8}
    block@7: // __algopy_default_create_L1
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (== tmp%12#0 0u)
        (assert tmp%13#0) // can only call when creating
        examples.arc_28.contract.EventEmitter.__algopy_default_create()
        return 1u
    block@8: // switch_case_default_L11
        goto block@9
    block@9: // switch_case_next_L11
        goto block@10
    block@10: // after_if_else_L11
        return 0u

subroutine examples.arc_28.contract.EventEmitter.emit_swapped(a: Encoded(uint64), b: Encoded(uint64)) -> void:
    block@0: // L12
        let encoded%0#0: Encoded((uint64)) = (concat 0x b#0)
        let encoded%1#0: Encoded((uint64,uint64)) = (concat encoded%0#0 a#0)
        let encoded%2#0: Encoded((uint64,uint64)) = (concat encoded%1#0 0x)
        let event%0#0: bytes = (concat method "Swapped(uint64,uint64)" encoded%2#0)
        (log event%0#0)
        let encoded%3#0: Encoded((uint64)) = (concat 0x b#0)
        let encoded%4#0: Encoded((uint64,uint64)) = (concat encoded%3#0 a#0)
        let encoded%5#0: Encoded((uint64,uint64)) = (concat encoded%4#0 0x)
        let event%1#0: bytes = (concat method "Swapped(uint64,uint64)" encoded%5#0)
        (log event%1#0)
        let encoded%6#0: Encoded((uint64)) = (concat 0x b#0)
        let encoded%7#0: Encoded((uint64,uint64)) = (concat encoded%6#0 a#0)
        let encoded%8#0: Encoded((uint64,uint64)) = (concat encoded%7#0 0x)
        let event%2#0: bytes = (concat method "Swapped(uint64,uint64)" encoded%8#0)
        (log event%2#0)
        return 

subroutine examples.arc_28.contract.EventEmitter.emit_ufixed(a: Encoded(uint256), b: Encoded(uint64)) -> void:
    block@0: // L18
        let encoded%0#0: Encoded((uint256)) = (concat 0x a#0)
        let encoded%1#0: Encoded((uint256,uint64)) = (concat encoded%0#0 b#0)
        let encoded%2#0: Encoded((uint256,uint64)) = (concat encoded%1#0 0x)
        let event%0#0: bytes = (concat method "AnEvent(ufixed256x16,ufixed64x2)" encoded%2#0)
        (log event%0#0)
        return 

subroutine examples.arc_28.contract.EventEmitter.__algopy_default_create() -> void:
    block@0: // L1
        return 