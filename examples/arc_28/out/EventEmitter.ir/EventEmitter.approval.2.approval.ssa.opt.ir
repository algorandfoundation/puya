main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@7
    block@2: // abi_routing_L11
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "emit_swapped(uint64,uint64)void" => block@3, method "emit_ufixed(ufixed256x16,ufixed64x2)void" => block@4, * => block@11}
    block@3: // emit_swapped_route_L12
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let tmp%8#0: bytes = (txna ApplicationArgs 2)
        examples.arc_28.contract.EventEmitter.emit_swapped(tmp%7#0, tmp%8#0)
        let examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#0: bool = 1u
        goto block@12
    block@4: // emit_ufixed_route_L18
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        let tmp%13#0: bytes = (txna ApplicationArgs 1)
        let tmp%14#0: bytes = (txna ApplicationArgs 2)
        examples.arc_28.contract.EventEmitter.emit_ufixed(tmp%13#0, tmp%14#0)
        let examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#1: bool = 1u
        goto block@12
    block@7: // bare_routing_L11
        let tmp%15#0: uint64 = (txn OnCompletion)
        goto tmp%15#0 ? block@11 : block@8
    block@8: // __algopy_default_create_L1
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // can only call when creating
        let examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#2: bool = 1u
        goto block@12
    block@11: // after_if_else_L11
        let examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#3: bool = 0u
        goto block@12
    block@12: // after_inlined_examples.arc_28.contract.EventEmitter.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#0 <- block@3, examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#1 <- block@4, examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#2 <- block@8, examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#3 <- block@11)
        return tmp%0#0

subroutine examples.arc_28.contract.EventEmitter.emit_swapped(a: bytes, b: bytes) -> void:
    block@0: // L12
        let encoded_tuple_buffer%2#0: bytes = (concat b#0 a#0)
        let event%0#0: bytes = (concat method "Swapped(uint64,uint64)" encoded_tuple_buffer%2#0)
        (log event%0#0)
        (log event%0#0)
        (log event%0#0)
        return 

subroutine examples.arc_28.contract.EventEmitter.emit_ufixed(a: bytes, b: bytes) -> void:
    block@0: // L18
        let encoded_tuple_buffer%2#0: bytes = (concat a#0 b#0)
        let event%0#0: bytes = (concat method "AnEvent(ufixed256x16,ufixed64x2)" encoded_tuple_buffer%2#0)
        (log event%0#0)
        return 