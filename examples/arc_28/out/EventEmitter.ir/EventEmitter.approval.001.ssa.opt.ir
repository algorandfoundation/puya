main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@7, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20, block@20][tmp%4#0] else goto block@20
    block@2: // switch_case_0_L11
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "emit_swapped(uint64,uint64)void" => block@3, method "emit_ufixed(ufixed256x16,ufixed64x2)void" => block@4, * => block@6}
    block@3: // emit_swapped_route_L12
        examples.arc_28.contract.EventEmitter.emit_swapped[routing]()
        goto block@6
    block@4: // emit_ufixed_route_L18
        examples.arc_28.contract.EventEmitter.emit_ufixed[routing]()
        goto block@6
    block@6: // switch_case_next_L11
        fail // this contract does not implement the given ABI method for call NoOp
    block@7: // switch_case_1_L11
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        examples.arc_28.contract.EventEmitter.__algopy_default_create()
        exit 1u
    block@20: // switch_case_default_L11
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine examples.arc_28.contract.EventEmitter.emit_swapped[routing]() -> void:
    block@0: // L12
        let a#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let b#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(b#0, a#0)
        let event%0#0: bytes = (concat method "Swapped(uint64,uint64)" tmp%0#0)
        (log event%0#0)
        (log event%0#0)
        (log event%0#0)
        exit 1u

subroutine examples.arc_28.contract.EventEmitter.emit_ufixed[routing]() -> void:
    block@0: // L18
        let a#0: Encoded(uint256) = (txna ApplicationArgs 1)
        let b#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%0#0: Encoded(uint256,uint64) = bytes_encode<(uint256,uint64)>(a#0, b#0)
        let event%0#0: bytes = (concat method "AnEvent(ufixed256x16,ufixed64x2)" tmp%0#0)
        (log event%0#0)
        exit 1u

subroutine examples.arc_28.contract.EventEmitter.__algopy_default_create() -> void:
    block@0: // L1
        return 