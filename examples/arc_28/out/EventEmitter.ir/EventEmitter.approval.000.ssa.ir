main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = examples.arc_28.contract.EventEmitter.__puya_arc4_router__()
        return tmp%0#0

subroutine examples.arc_28.contract.EventEmitter.__puya_arc4_router__() -> bool:
    block@0: // L11
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@8
    block@1: // abi_routing_L11
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@6
    block@2: // call_NoOp_L11
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "emit_swapped(uint64,uint64)void" => block@3, method "emit_ufixed(ufixed256x16,ufixed64x2)void" => block@4, * => block@5}
    block@3: // emit_swapped_route_L12
        examples.arc_28.contract.EventEmitter.emit_swapped[routing]()
        goto block@5
    block@4: // emit_ufixed_route_L18
        examples.arc_28.contract.EventEmitter.emit_ufixed[routing]()
        goto block@5
    block@5: // switch_case_next_L11
        goto block@7
    block@6: // create_NoOp_L11
        goto block@7
    block@7: // after_if_else_L11
        goto block@9
    block@8: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        examples.arc_28.contract.EventEmitter.__algopy_default_create()
        exit 1u
    block@9: // after_if_else_L11
        exit 0u

subroutine examples.arc_28.contract.EventEmitter.emit_swapped[routing]() -> void:
    block@0: // L12
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%0#0
        let tmp%1#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%1#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let as_Encoded(uint64)%1#0: Encoded(uint64) = tmp%1#0
        examples.arc_28.contract.EventEmitter.emit_swapped(as_Encoded(uint64)%0#0, as_Encoded(uint64)%1#0)
        exit 1u

subroutine examples.arc_28.contract.EventEmitter.emit_ufixed[routing]() -> void:
    block@0: // L18
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for arc4.ufixed256x16
        let as_Encoded(uint256)%0#0: Encoded(uint256) = tmp%0#0
        let tmp%1#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%1#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.ufixed64x2
        let as_Encoded(uint64)%0#0: Encoded(uint64) = tmp%1#0
        examples.arc_28.contract.EventEmitter.emit_ufixed(as_Encoded(uint256)%0#0, as_Encoded(uint64)%0#0)
        exit 1u

subroutine examples.arc_28.contract.EventEmitter.emit_swapped(a: Encoded(uint64), b: Encoded(uint64)) -> void:
    block@0: // L12
        let tmp%0#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(b#0, a#0)
        let event%0#0: bytes = (concat method "Swapped(uint64,uint64)" tmp%0#0)
        (log event%0#0)
        let tmp%1#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(b#0, a#0)
        let event%1#0: bytes = (concat method "Swapped(uint64,uint64)" tmp%1#0)
        (log event%1#0)
        let tmp%2#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(b#0, a#0)
        let event%2#0: bytes = (concat method "Swapped(uint64,uint64)" tmp%2#0)
        (log event%2#0)
        return 

subroutine examples.arc_28.contract.EventEmitter.emit_ufixed(a: Encoded(uint256), b: Encoded(uint64)) -> void:
    block@0: // L18
        let tmp%0#0: Encoded(uint256,uint64) = bytes_encode<(uint256,uint64)>(a#0, b#0)
        let event%0#0: bytes = (concat method "AnEvent(ufixed256x16,ufixed64x2)" tmp%0#0)
        (log event%0#0)
        return 

subroutine examples.arc_28.contract.EventEmitter.__algopy_default_create() -> void:
    block@0: // L1
        return 