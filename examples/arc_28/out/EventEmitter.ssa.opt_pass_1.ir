contract examples.arc_28.contract.EventEmitter:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = examples.arc_28.contract.EventEmitter.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine examples.arc_28.contract.EventEmitter.__puya_arc4_router__() -> bool:
            block@0: // L11
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@6
            block@1: // abi_routing_L11
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "emit_swapped(uint64,uint64)void" => block@2, method "emit_ufixed(ufixed256x16,ufixed64x2)void" => block@3, * => return 0u}
            block@2: // emit_swapped_route_L12
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // is not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: bytes = (txna ApplicationArgs 2)
                examples.arc_28.contract.EventEmitter.emit_swapped(tmp%7#0, tmp%8#0)
                return 1u
            block@3: // emit_ufixed_route_L18
                let tmp%9#0: uint64 = (txn OnCompletion)
                let tmp%10#0: bool = (! tmp%9#0)
                (assert tmp%10#0) // OnCompletion is NoOp
                let tmp%11#0: uint64 = (txn ApplicationID)
                (assert tmp%11#0) // is not creating
                let tmp%13#0: bytes = (txna ApplicationArgs 1)
                let tmp%14#0: bytes = (txna ApplicationArgs 2)
                examples.arc_28.contract.EventEmitter.emit_ufixed(tmp%13#0, tmp%14#0)
                return 1u
            block@6: // bare_routing_L11
                let tmp%15#0: uint64 = (txn OnCompletion)
                goto tmp%15#0 ? block@10 : block@7
            block@7: // __algopy_default_create_L11
                let tmp%16#0: uint64 = (txn ApplicationID)
                let tmp%17#0: bool = (! tmp%16#0)
                (assert tmp%17#0) // is creating
                return 1u
            block@10: // after_if_else_L11
                return 0u
        
        subroutine examples.arc_28.contract.EventEmitter.emit_swapped(a: bytes, b: bytes) -> void:
            block@0: // L12
                let encoded_tuple_buffer%1#0: bytes = b#0
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 a#0)
                let tmp%0#0: bytes = (concat method "Swapped(uint64,uint64)" encoded_tuple_buffer%2#0)
                (log tmp%0#0)
                let encoded_tuple_buffer%4#0: bytes = b#0
                let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 a#0)
                let tmp%1#0: bytes = (concat method "Swapped(uint64,uint64)" encoded_tuple_buffer%5#0)
                (log tmp%1#0)
                let encoded_tuple_buffer%7#0: bytes = b#0
                let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 a#0)
                let tmp%2#0: bytes = (concat method "Swapped(uint64,uint64)" encoded_tuple_buffer%8#0)
                (log tmp%2#0)
                return 
        
        subroutine examples.arc_28.contract.EventEmitter.emit_ufixed(a: bytes, b: bytes) -> void:
            block@0: // L18
                let encoded_tuple_buffer%1#0: bytes = a#0
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 b#0)
                let tmp%0#0: bytes = (concat method "AnEvent(ufixed256x16,ufixed64x2)" encoded_tuple_buffer%2#0)
                (log tmp%0#0)
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u