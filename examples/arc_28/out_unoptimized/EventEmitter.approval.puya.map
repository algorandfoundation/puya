{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAUA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;AAOK;;;;;;AANA;;;;;;AADL;;;AAAA;;AAAA;;;;;;;;;AAAA;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AACK;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;AAAA;AANL;;;;;;AAEkB;AAAA;;AAAA;AAAA;;AAAA;AAAV;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAER;;;;;;AAMQ;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x 0x1ccbd925"
    },
    "13": {
      "op": "b main_block@0"
    },
    "16": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "19": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "21": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "22": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "23": {
      "op": "bz main_bare_routing@16",
      "stack_out": []
    },
    "26": {
      "op": "b main_abi_routing@2"
    },
    "29": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "32": {
      "op": "match",
      "stack_out": []
    },
    "34": {
      "op": "b main_route_NoOp@3"
    },
    "37": {
      "block": "main_route_NoOp@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "39": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "40": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "41": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "42": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "45": {
      "op": "match",
      "stack_out": []
    },
    "47": {
      "op": "b main_switch_case_default@4"
    },
    "50": {
      "block": "main_switch_case_default@4",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "52": {
      "op": "bz main_create_NoOp@10",
      "stack_out": []
    },
    "55": {
      "op": "b main_call_NoOp@5"
    },
    "58": {
      "block": "main_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "61": {
      "op": "pushbytes 0x0a9542cd // method \"emit_swapped(uint64,uint64)void\"",
      "defined_out": [
        "Method(emit_swapped(uint64,uint64)void)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(emit_swapped(uint64,uint64)void)"
      ]
    },
    "67": {
      "op": "pushbytes 0x71a3151f // method \"emit_ufixed(ufixed256x16,ufixed64x2)void\"",
      "defined_out": [
        "Method(emit_swapped(uint64,uint64)void)",
        "Method(emit_ufixed(ufixed256x16,ufixed64x2)void)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(emit_swapped(uint64,uint64)void)",
        "Method(emit_ufixed(ufixed256x16,ufixed64x2)void)"
      ]
    },
    "73": {
      "op": "uncover 2",
      "stack_out": [
        "Method(emit_swapped(uint64,uint64)void)",
        "Method(emit_ufixed(ufixed256x16,ufixed64x2)void)",
        "tmp%7#0"
      ]
    },
    "75": {
      "op": "match main_emit_swapped_route@6 main_emit_ufixed_route@7",
      "stack_out": []
    },
    "81": {
      "op": "b main_switch_case_default@8"
    },
    "84": {
      "block": "main_switch_case_default@8",
      "stack_in": [],
      "op": "b main_switch_case_next@9"
    },
    "87": {
      "block": "main_switch_case_next@9",
      "stack_in": [],
      "op": "b main_after_if_else@13"
    },
    "90": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "b main_switch_case_next@14"
    },
    "93": {
      "block": "main_switch_case_next@14",
      "stack_in": [],
      "op": "b main_switch_case_next@15"
    },
    "96": {
      "block": "main_switch_case_next@15",
      "stack_in": [],
      "op": "b main_after_if_else@20"
    },
    "99": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "100": {
      "block": "main_emit_ufixed_route@7",
      "stack_in": [],
      "callsub": "examples.arc_28.contract.EventEmitter.emit_ufixed[routing]",
      "op": "callsub emit_ufixed"
    },
    "103": {
      "op": "b main_switch_case_next@9"
    },
    "106": {
      "block": "main_emit_swapped_route@6",
      "stack_in": [],
      "callsub": "examples.arc_28.contract.EventEmitter.emit_swapped[routing]",
      "op": "callsub emit_swapped"
    },
    "109": {
      "op": "b main_switch_case_next@9"
    },
    "112": {
      "block": "main_create_NoOp@10",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "115": {
      "op": "match",
      "stack_out": []
    },
    "117": {
      "op": "b main_switch_case_default@11"
    },
    "120": {
      "block": "main_switch_case_default@11",
      "stack_in": [],
      "op": "b main_switch_case_next@12"
    },
    "123": {
      "block": "main_switch_case_next@12",
      "stack_in": [],
      "op": "b main_after_if_else@13"
    },
    "126": {
      "block": "main_bare_routing@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "128": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "129": {
      "op": "uncover 1",
      "stack_out": [
        "0",
        "tmp%9#0"
      ]
    },
    "131": {
      "op": "match main___algopy_default_create@17",
      "stack_out": []
    },
    "135": {
      "op": "b main_switch_case_default@18"
    },
    "138": {
      "block": "main_switch_case_default@18",
      "stack_in": [],
      "op": "b main_switch_case_next@19"
    },
    "141": {
      "block": "main_switch_case_next@19",
      "stack_in": [],
      "op": "b main_after_if_else@20"
    },
    "144": {
      "block": "main___algopy_default_create@17",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "146": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "147": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "148": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "149": {
      "op": "b main_block@22"
    },
    "152": {
      "block": "main_block@22",
      "stack_in": [],
      "op": "b main_after_inlined_examples.arc_28.contract.EventEmitter.__algopy_default_create@23"
    },
    "155": {
      "block": "main_after_inlined_examples.arc_28.contract.EventEmitter.__algopy_default_create@23",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "156": {
      "op": "return",
      "stack_out": []
    },
    "157": {
      "subroutine": "examples.arc_28.contract.EventEmitter.emit_swapped[routing]",
      "params": {},
      "block": "emit_swapped",
      "stack_in": [],
      "op": "b emit_swapped_block@0"
    },
    "160": {
      "block": "emit_swapped_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "163": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "166": {
      "callsub": "examples.arc_28.contract.EventEmitter.emit_swapped",
      "op": "callsub examples.arc_28.contract.EventEmitter.emit_swapped",
      "stack_out": []
    },
    "169": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "170": {
      "op": "return",
      "stack_out": []
    },
    "171": {
      "subroutine": "examples.arc_28.contract.EventEmitter.emit_ufixed[routing]",
      "params": {},
      "block": "emit_ufixed",
      "stack_in": [],
      "op": "b emit_ufixed_block@0"
    },
    "174": {
      "block": "emit_ufixed_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint256)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint256)%0#0"
      ]
    },
    "177": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint256)%0#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint256)%0#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "180": {
      "callsub": "examples.arc_28.contract.EventEmitter.emit_ufixed",
      "op": "callsub examples.arc_28.contract.EventEmitter.emit_ufixed",
      "stack_out": []
    },
    "183": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "184": {
      "op": "return",
      "stack_out": []
    },
    "185": {
      "subroutine": "examples.arc_28.contract.EventEmitter.emit_swapped",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "examples.arc_28.contract.EventEmitter.emit_swapped",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "188": {
      "op": "b examples.arc_28.contract.EventEmitter.emit_swapped_block@0"
    },
    "191": {
      "block": "examples.arc_28.contract.EventEmitter.emit_swapped_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "192": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "b#0 (copy)"
      ],
      "stack_out": [
        "0x",
        "b#0 (copy)"
      ]
    },
    "194": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "195": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "a#0 (copy)"
      ]
    },
    "197": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "bytec_1 // method \"Swapped(uint64,uint64)\"",
      "defined_out": [
        "Method(Swapped(uint64,uint64))",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Method(Swapped(uint64,uint64))"
      ]
    },
    "199": {
      "op": "uncover 1",
      "stack_out": [
        "Method(Swapped(uint64,uint64))",
        "tmp%0#0"
      ]
    },
    "201": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "202": {
      "op": "log",
      "stack_out": []
    },
    "203": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x"
      ]
    },
    "204": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x",
        "b#0 (copy)"
      ]
    },
    "206": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "207": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%head%2#0",
        "a#0 (copy)"
      ]
    },
    "209": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "210": {
      "op": "bytec_1 // method \"Swapped(uint64,uint64)\"",
      "stack_out": [
        "tmp%1#0",
        "Method(Swapped(uint64,uint64))"
      ]
    },
    "211": {
      "op": "uncover 1",
      "stack_out": [
        "Method(Swapped(uint64,uint64))",
        "tmp%1#0"
      ]
    },
    "213": {
      "op": "concat",
      "defined_out": [
        "event%1#0"
      ],
      "stack_out": [
        "event%1#0"
      ]
    },
    "214": {
      "op": "log",
      "stack_out": []
    },
    "215": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x"
      ]
    },
    "216": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x",
        "b#0 (copy)"
      ]
    },
    "218": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%4#0"
      ]
    },
    "219": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%head%4#0",
        "a#0 (copy)"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "222": {
      "op": "bytec_1 // method \"Swapped(uint64,uint64)\"",
      "stack_out": [
        "tmp%2#0",
        "Method(Swapped(uint64,uint64))"
      ]
    },
    "223": {
      "op": "uncover 1",
      "stack_out": [
        "Method(Swapped(uint64,uint64))",
        "tmp%2#0"
      ]
    },
    "225": {
      "op": "concat",
      "defined_out": [
        "event%2#0"
      ],
      "stack_out": [
        "event%2#0"
      ]
    },
    "226": {
      "op": "log",
      "stack_out": []
    },
    "227": {
      "retsub": true,
      "op": "retsub"
    },
    "228": {
      "subroutine": "examples.arc_28.contract.EventEmitter.emit_ufixed",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "examples.arc_28.contract.EventEmitter.emit_ufixed",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "231": {
      "op": "b examples.arc_28.contract.EventEmitter.emit_ufixed_block@0"
    },
    "234": {
      "block": "examples.arc_28.contract.EventEmitter.emit_ufixed_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "235": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x",
        "a#0 (copy)"
      ],
      "stack_out": [
        "0x",
        "a#0 (copy)"
      ]
    },
    "237": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "238": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%head%0#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "b#0 (copy)"
      ]
    },
    "240": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "241": {
      "op": "pushbytes 0x7389b1ba // method \"AnEvent(ufixed256x16,ufixed64x2)\"",
      "defined_out": [
        "Method(AnEvent(ufixed256x16,ufixed64x2))",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Method(AnEvent(ufixed256x16,ufixed64x2))"
      ]
    },
    "247": {
      "op": "uncover 1",
      "stack_out": [
        "Method(AnEvent(ufixed256x16,ufixed64x2))",
        "tmp%0#0"
      ]
    },
    "249": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "250": {
      "op": "log",
      "stack_out": []
    },
    "251": {
      "retsub": true,
      "op": "retsub"
    }
  }
}