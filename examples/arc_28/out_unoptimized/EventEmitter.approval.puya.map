{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAUA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;;;;AACK;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;AAAA;AAAA;AANL;;;;;;AAEkB;AAAA;;AAAA;AAAA;;AAAA;AAAV;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAER;;;;;;AAMQ;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock 0x 0x1ccbd925"
    },
    "13": {
      "op": "b block@0"
    },
    "16": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "19": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "21": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "22": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "24": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "25": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "26": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "27": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "28": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "29": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "31": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "33": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "35": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "37": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "39": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "41": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "43": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "45": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "47": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "49": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "51": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "77": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "80": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "81": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "84": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "87": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "90": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "93": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "96": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "99": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "102": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "105": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "108": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "111": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "113": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "114": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "115": {
      "op": "bz else_body@9",
      "stack_out": []
    },
    "118": {
      "op": "b __algopy_default_create@8"
    },
    "121": {
      "block": "__algopy_default_create@8",
      "stack_in": [],
      "op": "b block@22"
    },
    "124": {
      "block": "block@22",
      "stack_in": [],
      "op": "b after_inlined_examples.arc_28.contract.EventEmitter.__algopy_default_create@23"
    },
    "127": {
      "block": "after_inlined_examples.arc_28.contract.EventEmitter.__algopy_default_create@23",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "128": {
      "op": "return",
      "stack_out": []
    },
    "129": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "else_body@9",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "130": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "133": {
      "op": "pushbytes 0x0a9542cd // method \"emit_swapped(uint64,uint64)void\"",
      "defined_out": [
        "Method(emit_swapped(uint64,uint64)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(emit_swapped(uint64,uint64)void)"
      ]
    },
    "139": {
      "op": "pushbytes 0x71a3151f // method \"emit_ufixed(ufixed256x16,ufixed64x2)void\"",
      "defined_out": [
        "Method(emit_swapped(uint64,uint64)void)",
        "Method(emit_ufixed(ufixed256x16,ufixed64x2)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(emit_swapped(uint64,uint64)void)",
        "Method(emit_ufixed(ufixed256x16,ufixed64x2)void)"
      ]
    },
    "145": {
      "op": "uncover 2",
      "stack_out": [
        "Method(emit_swapped(uint64,uint64)void)",
        "Method(emit_ufixed(ufixed256x16,ufixed64x2)void)",
        "tmp%5#0"
      ]
    },
    "147": {
      "op": "match emit_swapped_route@3 emit_ufixed_route@4",
      "stack_out": []
    },
    "153": {
      "op": "b switch_case_default@5"
    },
    "156": {
      "block": "switch_case_default@5",
      "stack_in": [],
      "op": "b switch_case_next@6"
    },
    "159": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@6",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "160": {
      "block": "emit_ufixed_route@4",
      "stack_in": [],
      "callsub": "examples.arc_28.contract.EventEmitter.emit_ufixed[routing]",
      "op": "callsub emit_ufixed"
    },
    "163": {
      "op": "b switch_case_next@6"
    },
    "166": {
      "block": "emit_swapped_route@3",
      "stack_in": [],
      "callsub": "examples.arc_28.contract.EventEmitter.emit_swapped[routing]",
      "op": "callsub emit_swapped"
    },
    "169": {
      "op": "b switch_case_next@6"
    },
    "172": {
      "subroutine": "examples.arc_28.contract.EventEmitter.emit_swapped[routing]",
      "params": {},
      "block": "emit_swapped",
      "stack_in": [],
      "op": "b emit_swapped_block@0"
    },
    "175": {
      "block": "emit_swapped_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "178": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "181": {
      "callsub": "examples.arc_28.contract.EventEmitter.emit_swapped",
      "op": "callsub examples.arc_28.contract.EventEmitter.emit_swapped",
      "stack_out": []
    },
    "184": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "185": {
      "op": "return",
      "stack_out": []
    },
    "186": {
      "subroutine": "examples.arc_28.contract.EventEmitter.emit_ufixed[routing]",
      "params": {},
      "block": "emit_ufixed",
      "stack_in": [],
      "op": "b emit_ufixed_block@0"
    },
    "189": {
      "block": "emit_ufixed_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint256)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint256)%0#0"
      ]
    },
    "192": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint256)%0#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint256)%0#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "195": {
      "callsub": "examples.arc_28.contract.EventEmitter.emit_ufixed",
      "op": "callsub examples.arc_28.contract.EventEmitter.emit_ufixed",
      "stack_out": []
    },
    "198": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "199": {
      "op": "return",
      "stack_out": []
    },
    "200": {
      "subroutine": "examples.arc_28.contract.EventEmitter.emit_swapped",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "examples.arc_28.contract.EventEmitter.emit_swapped",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "203": {
      "op": "b examples.arc_28.contract.EventEmitter.emit_swapped_block@0"
    },
    "206": {
      "block": "examples.arc_28.contract.EventEmitter.emit_swapped_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "207": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x",
        "b#0 (copy)"
      ],
      "stack_out": [
        "0x",
        "b#0 (copy)"
      ]
    },
    "209": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "210": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0 (copy)",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "a#0 (copy)"
      ]
    },
    "212": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "213": {
      "op": "bytec_1 // method \"Swapped(uint64,uint64)\"",
      "defined_out": [
        "Method(Swapped(uint64,uint64))",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Method(Swapped(uint64,uint64))"
      ]
    },
    "214": {
      "op": "uncover 1",
      "stack_out": [
        "Method(Swapped(uint64,uint64))",
        "tmp%0#0"
      ]
    },
    "216": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "217": {
      "op": "log",
      "stack_out": []
    },
    "218": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x"
      ]
    },
    "219": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x",
        "b#0 (copy)"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "222": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%head%2#0",
        "a#0 (copy)"
      ]
    },
    "224": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "225": {
      "op": "bytec_1 // method \"Swapped(uint64,uint64)\"",
      "stack_out": [
        "tmp%1#0",
        "Method(Swapped(uint64,uint64))"
      ]
    },
    "226": {
      "op": "uncover 1",
      "stack_out": [
        "Method(Swapped(uint64,uint64))",
        "tmp%1#0"
      ]
    },
    "228": {
      "op": "concat",
      "defined_out": [
        "event%1#0"
      ],
      "stack_out": [
        "event%1#0"
      ]
    },
    "229": {
      "op": "log",
      "stack_out": []
    },
    "230": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x"
      ]
    },
    "231": {
      "op": "frame_dig -1",
      "stack_out": [
        "0x",
        "b#0 (copy)"
      ]
    },
    "233": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0"
      ],
      "stack_out": [
        "aggregate%head%4#0"
      ]
    },
    "234": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%head%4#0",
        "a#0 (copy)"
      ]
    },
    "236": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "237": {
      "op": "bytec_1 // method \"Swapped(uint64,uint64)\"",
      "stack_out": [
        "tmp%2#0",
        "Method(Swapped(uint64,uint64))"
      ]
    },
    "238": {
      "op": "uncover 1",
      "stack_out": [
        "Method(Swapped(uint64,uint64))",
        "tmp%2#0"
      ]
    },
    "240": {
      "op": "concat",
      "defined_out": [
        "event%2#0"
      ],
      "stack_out": [
        "event%2#0"
      ]
    },
    "241": {
      "op": "log",
      "stack_out": []
    },
    "242": {
      "retsub": true,
      "op": "retsub"
    },
    "243": {
      "subroutine": "examples.arc_28.contract.EventEmitter.emit_ufixed",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes"
      },
      "block": "examples.arc_28.contract.EventEmitter.emit_ufixed",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "246": {
      "op": "b examples.arc_28.contract.EventEmitter.emit_ufixed_block@0"
    },
    "249": {
      "block": "examples.arc_28.contract.EventEmitter.emit_ufixed_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "250": {
      "op": "frame_dig -2",
      "defined_out": [
        "0x",
        "a#0 (copy)"
      ],
      "stack_out": [
        "0x",
        "a#0 (copy)"
      ]
    },
    "252": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "253": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%head%0#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "b#0 (copy)"
      ]
    },
    "255": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "256": {
      "op": "pushbytes 0x7389b1ba // method \"AnEvent(ufixed256x16,ufixed64x2)\"",
      "defined_out": [
        "Method(AnEvent(ufixed256x16,ufixed64x2))",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Method(AnEvent(ufixed256x16,ufixed64x2))"
      ]
    },
    "262": {
      "op": "uncover 1",
      "stack_out": [
        "Method(AnEvent(ufixed256x16,ufixed64x2))",
        "tmp%0#0"
      ]
    },
    "264": {
      "op": "concat",
      "defined_out": [
        "event%0#0"
      ],
      "stack_out": [
        "event%0#0"
      ]
    },
    "265": {
      "op": "log",
      "stack_out": []
    },
    "266": {
      "retsub": true,
      "op": "retsub"
    }
  }
}