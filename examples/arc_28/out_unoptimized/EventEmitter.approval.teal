#pragma version 10

examples.arc_28.contract.EventEmitter.approval_program:
    // arc_28/contract.py:11
    // class EventEmitter(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@6
    txna ApplicationArgs 0
    method "emit_swapped(uint64,uint64)void"
    method "emit_ufixed(ufixed256x16,ufixed64x2)void"
    uncover 2
    match main_emit_swapped_route@2 main_emit_ufixed_route@3
    b main_switch_case_default@4

main_emit_swapped_route@2:
    // arc_28/contract.py:12
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // arc_28/contract.py:11
    // class EventEmitter(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // arc_28/contract.py:12
    // @arc4.abimethod
    callsub emit_swapped
    int 1
    return

main_emit_ufixed_route@3:
    // arc_28/contract.py:18
    // @arc4.abimethod()
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // arc_28/contract.py:11
    // class EventEmitter(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    // arc_28/contract.py:18
    // @arc4.abimethod()
    callsub emit_ufixed
    int 1
    return

main_switch_case_default@4:
    // arc_28/contract.py:11
    // class EventEmitter(ARC4Contract):
    err // reject transaction

main_bare_routing@6:
    // arc_28/contract.py:11
    // class EventEmitter(ARC4Contract):
    txn OnCompletion
    int 0
    uncover 1
    match main___algopy_default_create@7
    b main_reject_bare_on_completion@8

main___algopy_default_create@7:
    // arc_28/contract.py:11
    // class EventEmitter(ARC4Contract):
    txn ApplicationID
    !
    assert // is creating
    callsub __algopy_default_create
    int 1
    return

main_reject_bare_on_completion@8:
    // arc_28/contract.py:11
    // class EventEmitter(ARC4Contract):
    err // reject transaction


// examples.arc_28.contract.EventEmitter.emit_swapped(a: bytes, b: bytes) -> void:
emit_swapped:
    // arc_28/contract.py:12-13
    // @arc4.abimethod
    // def emit_swapped(self, a: arc4.UInt64, b: arc4.UInt64) -> None:
    proto 2 0
    // arc_28/contract.py:14
    // arc4.emit(Swapped(b, a))
    byte 0x
    frame_dig -1
    concat
    frame_dig -2
    concat
    method "Swapped(uint64,uint64)"
    uncover 1
    concat
    log
    // arc_28/contract.py:15
    // arc4.emit("Swapped(uint64,uint64)", b, a)
    byte 0x
    frame_dig -1
    concat
    frame_dig -2
    concat
    method "Swapped(uint64,uint64)"
    uncover 1
    concat
    log
    // arc_28/contract.py:16
    // arc4.emit("Swapped", b, a)
    byte 0x
    frame_dig -1
    concat
    frame_dig -2
    concat
    method "Swapped(uint64,uint64)"
    uncover 1
    concat
    log
    retsub


// examples.arc_28.contract.EventEmitter.emit_ufixed(a: bytes, b: bytes) -> void:
emit_ufixed:
    // arc_28/contract.py:18-23
    // @arc4.abimethod()
    // def emit_ufixed(
    //     self,
    //     a: arc4.BigUFixedNxM[typing.Literal[256], typing.Literal[16]],
    //     b: arc4.UFixedNxM[typing.Literal[64], typing.Literal[2]],
    // ) -> None:
    proto 2 0
    // arc_28/contract.py:24
    // arc4.emit("AnEvent(ufixed256x16,ufixed64x2)", a, b)
    byte 0x
    frame_dig -2
    concat
    frame_dig -1
    concat
    method "AnEvent(ufixed256x16,ufixed64x2)"
    uncover 1
    concat
    log
    retsub


// examples.arc_28.contract.EventEmitter.__algopy_default_create() -> void:
__algopy_default_create:
    // arc_28/contract.py:11
    // class EventEmitter(ARC4Contract):
    proto 0 0
    retsub
