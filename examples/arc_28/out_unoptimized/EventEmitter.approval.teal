#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock 0x 0x1ccbd925
    b block@0

block@0:
    b block@1

block@1:
    // arc_28/contract.py:11
    // class EventEmitter(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __algopy_default_create@10
    b abi_routing@2

abi_routing@2:
    // arc_28/contract.py:11
    // class EventEmitter(ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz create_NoOp@8
    b call_NoOp@3

call_NoOp@3:
    // arc_28/contract.py:11
    // class EventEmitter(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x0a9542cd // method "emit_swapped(uint64,uint64)void"
    pushbytes 0x71a3151f // method "emit_ufixed(ufixed256x16,ufixed64x2)void"
    uncover 2
    match emit_swapped_route@4 emit_ufixed_route@5
    b switch_case_default@6

switch_case_default@6:
    b switch_case_next@7

switch_case_next@7:
    b after_if_else@9

after_if_else@9:
    b after_if_else@11

after_if_else@11:
    // arc_28/contract.py:11
    // class EventEmitter(ARC4Contract):
    err

emit_ufixed_route@5:
    // arc_28/contract.py:18
    // @arc4.abimethod()
    callsub emit_ufixed
    b switch_case_next@7

emit_swapped_route@4:
    // arc_28/contract.py:12
    // @arc4.abimethod
    callsub emit_swapped
    b switch_case_next@7

create_NoOp@8:
    b after_if_else@9

__algopy_default_create@10:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b block@13

block@13:
    b after_inlined_examples.arc_28.contract.EventEmitter.__algopy_default_create@14

after_inlined_examples.arc_28.contract.EventEmitter.__algopy_default_create@14:
    intc_1 // 1
    return


// examples.arc_28.contract.EventEmitter.emit_swapped[routing]() -> void:
emit_swapped:
    b emit_swapped_block@0

emit_swapped_block@0:
    // arc_28/contract.py:12
    // @arc4.abimethod
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    callsub examples.arc_28.contract.EventEmitter.emit_swapped
    intc_1 // 1
    return


// examples.arc_28.contract.EventEmitter.emit_ufixed[routing]() -> void:
emit_ufixed:
    b emit_ufixed_block@0

emit_ufixed_block@0:
    // arc_28/contract.py:18
    // @arc4.abimethod()
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    callsub examples.arc_28.contract.EventEmitter.emit_ufixed
    intc_1 // 1
    return


// examples.arc_28.contract.EventEmitter.emit_swapped(a: bytes, b: bytes) -> void:
examples.arc_28.contract.EventEmitter.emit_swapped:
    // arc_28/contract.py:12-13
    // @arc4.abimethod
    // def emit_swapped(self, a: arc4.UInt64, b: arc4.UInt64) -> None:
    proto 2 0
    b examples.arc_28.contract.EventEmitter.emit_swapped_block@0

examples.arc_28.contract.EventEmitter.emit_swapped_block@0:
    // arc_28/contract.py:14
    // arc4.emit(Swapped(b, a))
    bytec_0 // 0x
    frame_dig -1
    concat
    frame_dig -2
    concat
    bytec_1 // method "Swapped(uint64,uint64)"
    uncover 1
    concat
    log
    // arc_28/contract.py:15
    // arc4.emit("Swapped(uint64,uint64)", b, a)
    bytec_0 // 0x
    frame_dig -1
    concat
    frame_dig -2
    concat
    bytec_1 // method "Swapped(uint64,uint64)"
    uncover 1
    concat
    log
    // arc_28/contract.py:16
    // arc4.emit("Swapped", b, a)
    bytec_0 // 0x
    frame_dig -1
    concat
    frame_dig -2
    concat
    bytec_1 // method "Swapped(uint64,uint64)"
    uncover 1
    concat
    log
    retsub


// examples.arc_28.contract.EventEmitter.emit_ufixed(a: bytes, b: bytes) -> void:
examples.arc_28.contract.EventEmitter.emit_ufixed:
    // arc_28/contract.py:18-23
    // @arc4.abimethod()
    // def emit_ufixed(
    //     self,
    //     a: arc4.BigUFixedNxM[typing.Literal[256], typing.Literal[16]],
    //     b: arc4.UFixedNxM[typing.Literal[64], typing.Literal[2]],
    // ) -> None:
    proto 2 0
    b examples.arc_28.contract.EventEmitter.emit_ufixed_block@0

examples.arc_28.contract.EventEmitter.emit_ufixed_block@0:
    // arc_28/contract.py:24
    // arc4.emit("AnEvent(ufixed256x16,ufixed64x2)", a, b)
    bytec_0 // 0x
    frame_dig -2
    concat
    frame_dig -1
    concat
    pushbytes 0x7389b1ba // method "AnEvent(ufixed256x16,ufixed64x2)"
    uncover 1
    concat
    log
    retsub
