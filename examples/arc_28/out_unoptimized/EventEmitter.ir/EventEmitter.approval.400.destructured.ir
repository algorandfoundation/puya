main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L11
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@7, 2u => block@10, 3u => block@11, 4u => block@12, 5u => block@13, 6u => block@14, 7u => block@15, 8u => block@16, 9u => block@17, 10u => block@18, 11u => block@19, * => block@20}
    block@2: // switch_case_0_L11
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "emit_swapped(uint64,uint64)void" => block@3, method "emit_ufixed(ufixed256x16,ufixed64x2)void" => block@4, * => block@5}
    block@3: // emit_swapped_route_L12
        examples.arc_28.contract.EventEmitter.emit_swapped[routing]()
        goto block@6
    block@4: // emit_ufixed_route_L18
        examples.arc_28.contract.EventEmitter.emit_ufixed[routing]()
        goto block@6
    block@5: // switch_case_default_L11
        goto block@6
    block@6: // switch_case_next_L11
        fail // this contract does not implement the given ABI method for call NoOp
    block@7: // switch_case_1_L11
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@8 : block@9
    block@8: // __algopy_default_create_L1
        goto block@22
    block@22: // L1
        goto block@23
    block@23: // after_inlined_examples.arc_28.contract.EventEmitter.__algopy_default_create_L1
        exit 1u
    block@9: // else_body_L11
        fail // this contract does not implement the given ABI method for create NoOp
    block@10: // switch_case_2_L11
        goto block@20
    block@11: // switch_case_3_L11
        goto block@20
    block@12: // switch_case_4_L11
        goto block@20
    block@13: // switch_case_5_L11
        goto block@20
    block@14: // switch_case_6_L11
        goto block@20
    block@15: // switch_case_7_L11
        goto block@20
    block@16: // switch_case_8_L11
        goto block@20
    block@17: // switch_case_9_L11
        goto block@20
    block@18: // switch_case_10_L11
        goto block@20
    block@19: // switch_case_11_L11
        goto block@20
    block@20: // switch_case_default_L11
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@21: // after_inlined_examples.arc_28.contract.EventEmitter.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine examples.arc_28.contract.EventEmitter.emit_swapped[routing]() -> void:
    block@0: // L12
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        examples.arc_28.contract.EventEmitter.emit_swapped(reinterpret_Encoded(uint64)%0#0, reinterpret_Encoded(uint64)%1#0)
        exit 1u

subroutine examples.arc_28.contract.EventEmitter.emit_ufixed[routing]() -> void:
    block@0: // L18
        let reinterpret_Encoded(uint256)%0#0: Encoded(uint256) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 2)
        examples.arc_28.contract.EventEmitter.emit_ufixed(reinterpret_Encoded(uint256)%0#0, reinterpret_Encoded(uint64)%0#0)
        exit 1u

subroutine examples.arc_28.contract.EventEmitter.emit_swapped(a: Encoded(uint64), b: Encoded(uint64)) -> void:
    block@0: // L12
        let aggregate%head%0#0: bytes = (concat 0x b#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 a#0)
        let aggregate%as_Encoded(uint64,uint64)%0#0: Encoded(uint64,uint64) = aggregate%head%1#0
        let tmp%0#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%0#0
        let event%0#0: bytes = (concat method "Swapped(uint64,uint64)" tmp%0#0)
        (log event%0#0)
        let aggregate%head%2#0: bytes = (concat 0x b#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 a#0)
        let aggregate%as_Encoded(uint64,uint64)%1#0: Encoded(uint64,uint64) = aggregate%head%3#0
        let tmp%1#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%1#0
        let event%1#0: bytes = (concat method "Swapped(uint64,uint64)" tmp%1#0)
        (log event%1#0)
        let aggregate%head%4#0: bytes = (concat 0x b#0)
        let aggregate%head%5#0: bytes = (concat aggregate%head%4#0 a#0)
        let aggregate%as_Encoded(uint64,uint64)%2#0: Encoded(uint64,uint64) = aggregate%head%5#0
        let tmp%2#0: Encoded(uint64,uint64) = aggregate%as_Encoded(uint64,uint64)%2#0
        let event%2#0: bytes = (concat method "Swapped(uint64,uint64)" tmp%2#0)
        (log event%2#0)
        return 

subroutine examples.arc_28.contract.EventEmitter.emit_ufixed(a: Encoded(uint256), b: Encoded(uint64)) -> void:
    block@0: // L18
        let aggregate%head%0#0: bytes = (concat 0x a#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 b#0)
        let aggregate%as_Encoded(uint256,uint64)%0#0: Encoded(uint256,uint64) = aggregate%head%1#0
        let tmp%0#0: Encoded(uint256,uint64) = aggregate%as_Encoded(uint256,uint64)%0#0
        let event%0#0: bytes = (concat method "AnEvent(ufixed256x16,ufixed64x2)" tmp%0#0)
        (log event%0#0)
        return 