main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L11
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@7
    block@2: // abi_routing_L11
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "emit_swapped(uint64,uint64)void" => block@3, method "emit_ufixed(ufixed256x16,ufixed64x2)void" => block@4, * => block@5}
    block@3: // emit_swapped_route_L12
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 2)
        examples.arc_28.contract.EventEmitter.emit_swapped(reinterpret_bytes[8]%0#0, reinterpret_bytes[8]%1#0)
        let examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#0
        goto block@12
    block@4: // emit_ufixed_route_L18
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_bytes[32]%0#0: bytes[32] = (txna ApplicationArgs 1)
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 2)
        examples.arc_28.contract.EventEmitter.emit_ufixed(reinterpret_bytes[32]%0#0, reinterpret_bytes[8]%2#0)
        let examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#0
        goto block@12
    block@5: // switch_case_default_L11
        goto block@6
    block@6: // switch_case_next_L11
        goto block@11
    block@7: // bare_routing_L11
        let tmp%11#0: uint64 = (txn OnCompletion)
        switch tmp%11#0 {0u => block@8, * => block@9}
    block@8: // __algopy_default_create_L1
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (== tmp%12#0 0u)
        (assert tmp%13#0) // can only call when creating
        goto block@13
    block@13: // L1
        goto block@14
    block@14: // after_inlined_examples.arc_28.contract.EventEmitter.__algopy_default_create_L1
        let examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#0
        goto block@12
    block@9: // switch_case_default_L11
        goto block@10
    block@10: // switch_case_next_L11
        goto block@11
    block@11: // after_if_else_L11
        let examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = examples.arc_28.contract.EventEmitter.__puya_arc4_router__%0#0
        goto block@12
    block@12: // after_inlined_examples.arc_28.contract.EventEmitter.__puya_arc4_router___L1
        return tmp%0#0

subroutine examples.arc_28.contract.EventEmitter.emit_swapped(a: bytes[8], b: bytes[8]) -> void:
    block@0: // L12
        let encoded_tuple_buffer%1#0: bytes = (concat 0x b#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 a#0)
        let event%0#0: bytes = (concat method "Swapped(uint64,uint64)" encoded_tuple_buffer%2#0)
        (log event%0#0)
        let encoded_tuple_buffer%4#0: bytes = (concat 0x b#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 a#0)
        let event%1#0: bytes = (concat method "Swapped(uint64,uint64)" encoded_tuple_buffer%5#0)
        (log event%1#0)
        let encoded_tuple_buffer%7#0: bytes = (concat 0x b#0)
        let encoded_tuple_buffer%8#0: bytes = (concat encoded_tuple_buffer%7#0 a#0)
        let event%2#0: bytes = (concat method "Swapped(uint64,uint64)" encoded_tuple_buffer%8#0)
        (log event%2#0)
        return 

subroutine examples.arc_28.contract.EventEmitter.emit_ufixed(a: bytes[32], b: bytes[8]) -> void:
    block@0: // L18
        let encoded_tuple_buffer%1#0: bytes = (concat 0x a#0)
        let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 b#0)
        let event%0#0: bytes = (concat method "AnEvent(ufixed256x16,ufixed64x2)" encoded_tuple_buffer%2#0)
        (log event%0#0)
        return 