>> poetry run puyapy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 --log-level=debug ssa2
debug: Building AWST for __init__.py
debug: Building AWST for ssa2/__init__.py
debug: Building AWST for embedded puyapy lib at <puya>/puyapy.py
debug: Building AWST for ssa2/contract.py
debug: Sealing block@0: // L42
debug: Terminated block@0: // L42
debug: Sealing block@None: // if_body_L45
debug: Sealing block@None: // else_body_L45
debug: Terminated block@1: // if_body_L45
debug: Sealing block@2: // after_if_else_L45
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@2: // after_if_else_L45
debug: Added b#0 to Phi node: let b#2: uint64 = Phi(b#0 <- block@0) in block@0: // L42
debug: Added b#1 to Phi node: let b#2: uint64 = Phi(b#0 <- block@0, b#1 <- block@1) in block@1: // if_body_L45
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@2: // after_if_else_L45
debug: Added a#0 to Phi node: let a#2: uint64 = Phi(a#0 <- block@0) in block@0: // L42
debug: Added a#1 to Phi node: let a#2: uint64 = Phi(a#0 <- block@0, a#1 <- block@1) in block@1: // if_body_L45
debug: Terminated block@2: // after_if_else_L45
debug: Sealing block@0: // L7
debug: Terminated block@0: // L7
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L15
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L15
debug: Terminated block@1: // for_header_L15
debug: Sealing block@None: // for_body_L15
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@1: // for_header_L15
debug: Created Phi assignment: let b#1: uint64 = undefined while trying to resolve 'b' in block@1: // for_header_L15
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@1: // for_header_L15
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@1: // for_header_L15
debug: Terminated block@2: // for_body_L15
debug: Sealing block@3: // for_footer_L15
debug: Sealing block@None: // after_for_L15
debug: Terminated block@3: // for_footer_L15
debug: Sealing block@1: // for_header_L15
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = Phi(range_item%0#0 <- block@0) in block@0: // L7
debug: Added range_item%0#2 to Phi node: let range_item%0#1: uint64 = Phi(range_item%0#0 <- block@0, range_item%0#2 <- block@3) in block@3: // for_footer_L15
debug: Added b#0 to Phi node: let b#1: uint64 = Phi(b#0 <- block@0) in block@0: // L7
debug: Added b#2 to Phi node: let b#1: uint64 = Phi(b#0 <- block@0, b#2 <- block@3) in block@3: // for_footer_L15
debug: Added a#0 to Phi node: let a#1: uint64 = Phi(a#0 <- block@0) in block@0: // L7
debug: Added a#2 to Phi node: let a#1: uint64 = Phi(a#0 <- block@0, a#2 <- block@3) in block@3: // for_footer_L15
debug: Terminated block@4: // after_for_L15
debug: Sealing block@0: // L37
debug: Terminated block@0: // L37
debug: Output IR to <git root>/examples/ssa2/out/contract_MyContract.ssa.ir
info: Optimizing examples.ssa2.contract.MyContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.ssa2.contract.MyContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Folded 1 + 2 to 3
debug: Folded 4 * 5 to 20
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: range_item%0#1, i#0
debug: Replacing {range_item%0#1} with i#0 made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // for_footer_L15 with block@2: // for_body_L15 in block@1: // for_header_L15
debug: Merged linear block@3: // for_footer_L15 into block@2: // for_body_L15
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.ssa2.contract.MyContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.ssa2.contract.one_hundred
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/ssa2/out/contract_MyContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.ssa2.contract.MyContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.ssa2.contract.MyContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.ssa2.contract.one_hundred
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to <git root>/examples/ssa2/out/contract_MyContract.cssa.ir
debug: Removing Phis from examples.ssa2.contract.MyContract.approval_program
debug: Removing Phis from examples.ssa2.contract.MyContract.clear_state_program
debug: Removing Phis from examples.ssa2.contract.one_hundred
debug: Output IR to <git root>/examples/ssa2/out/contract_MyContract.post_ssa.ir
debug: Sequentializing parallel copies in examples.ssa2.contract.MyContract.approval_program
debug: loc: {a#5=None, b#5=None, i#1=None, a#0=a#0, b#0=b#0, range_item%0#0=range_item%0#0}
debug: pred: {a#5=a#0, b#5=b#0, i#1=range_item%0#0}
debug: ready: a#5, b#5, i#1
debug: to_do: a#5, b#5, i#1
debug: * avail i#1
debug: * avail range_item%0#0
debug: * avail b#5
debug: * avail b#0
debug: * avail a#5
debug: * avail a#0
debug: * to_do i#1
debug: * to_do b#5
debug: * to_do a#5
debug: loc: {a#1=None, b#1=None, i#0=None, a#5=a#5, b#5=b#5, i#1=i#1}
debug: pred: {a#1=a#5, b#1=b#5, i#0=i#1}
debug: ready: a#1, b#1, i#0
debug: to_do: a#1, b#1, i#0
debug: * avail i#0
debug: * avail i#1
debug: * avail b#1
debug: * avail b#5
debug: * avail a#1
debug: * avail a#5
debug: * to_do i#0
debug: * to_do b#1
debug: * to_do a#1
debug: loc: {a#5=None, b#5=None, i#1=None, a#2=a#2, b#2=b#2, range_item%0#2=range_item%0#2}
debug: pred: {a#5=a#2, b#5=b#2, i#1=range_item%0#2}
debug: ready: a#5, b#5, i#1
debug: to_do: a#5, b#5, i#1
debug: * avail i#1
debug: * avail range_item%0#2
debug: * avail b#5
debug: * avail b#2
debug: * avail a#5
debug: * avail a#2
debug: * to_do i#1
debug: * to_do b#5
debug: * to_do a#5
debug: Sequentializing parallel copies in examples.ssa2.contract.MyContract.clear_state_program
debug: Sequentializing parallel copies in examples.ssa2.contract.one_hundred
debug: loc: {a#5=None, b#6=None, a#0=a#0, b#0=b#0}
debug: pred: {a#5=a#0, b#6=b#0}
debug: ready: a#5, b#6
debug: to_do: a#5, b#6
debug: * avail b#6
debug: * avail b#0
debug: * avail a#5
debug: * avail a#0
debug: * to_do b#6
debug: * to_do a#5
debug: loc: {a#5=None, b#6=None, a#1=a#1, b#1=b#1}
debug: pred: {a#5=a#1, b#6=b#1}
debug: ready: a#5, b#6
debug: to_do: a#5, b#6
debug: * avail b#6
debug: * avail b#1
debug: * avail a#5
debug: * avail a#1
debug: * to_do b#6
debug: * to_do a#5
debug: loc: {a#2=None, b#2=None, a#5=a#5, b#6=b#6}
debug: pred: {a#2=a#5, b#2=b#6}
debug: ready: a#2, b#2
debug: to_do: a#2, b#2
debug: * avail b#2
debug: * avail b#6
debug: * avail a#2
debug: * avail a#5
debug: * to_do b#2
debug: * to_do a#2
debug: Output IR to <git root>/examples/ssa2/out/contract_MyContract.parallel_copies.ir
debug: Coalescing local variables in examples.ssa2.contract.MyContract.approval_program using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#5, a#1, a#2]
debug: Coalescing b#0 with [b#5, b#1, b#2]
debug: Coalescing range_item%0#0 with [range_item%0#2]
debug: Coalescing i#0 with [i#1]
debug: Coalescing resulted in 22 replacement/s
debug: Coalescing local variables in examples.ssa2.contract.MyContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.ssa2.contract.one_hundred using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#5, a#1, a#2]
debug: Coalescing b#0 with [b#6, b#1, b#2, b#3]
debug: Coalescing resulted in 17 replacement/s
debug: Output IR to <git root>/examples/ssa2/out/contract_MyContract.final.ir
debug: Inserted main_block@0.ops[5]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[7]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Inserted main_for_header@1.ops[3]: 'store continue_looping%1#0 to l-stack (copy)'
debug: Replaced main_for_header@1.ops[5]: 'load continue_looping%1#0' with 'load continue_looping%1#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[11]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[13]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[2]: 'store a#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[5]: 'load a#0' with 'load a#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[7]: 'store i#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[10]: 'load i#0' with 'load i#0 from l-stack (no copy)'
debug: Inserted main_after_for@4.ops[3]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_after_for@4.ops[5]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.ssa2.contract.MyContract.approval_program
debug: examples.ssa2.contract.MyContract.approval_program f-stack entry: []
debug: examples.ssa2.contract.MyContract.approval_program f-stack on first store: ['a#0', 'b#0', 'i#0']
debug: Inserted main_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted one_hundred_block@0.ops[7]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced one_hundred_block@0.ops[9]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted one_hundred_after_if_else@2.ops[1]: 'store b#0 to l-stack (copy)'
debug: Replaced one_hundred_after_if_else@2.ops[2]: 'load b#0' with 'load b#0 from l-stack (no copy)'
debug: Inserted one_hundred_after_if_else@2.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced one_hundred_after_if_else@2.ops[10]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted one_hundred_after_if_else@2.ops[4]: 'store b#0 to l-stack (copy)'
debug: Replaced one_hundred_after_if_else@2.ops[7]: 'load b#0' with 'load b#0 from l-stack (no copy)'
debug: Found 1 edge set/s for examples.ssa2.contract.one_hundred
debug: examples.ssa2.contract.one_hundred f-stack entry: []
debug: examples.ssa2.contract.one_hundred f-stack on first store: ['a#0', 'b#0']
info: Writing ssa2/out/contract.approval.teal
info: Writing ssa2/out/contract.approval.debug.teal
info: Writing ssa2/out/contract.clear.teal
info: Writing ssa2/out/contract.clear.debug.teal
>> exit code = 0