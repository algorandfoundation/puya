contract examples.hello_world.arc4_contract.HelloWorldContract:
    program approval:
        subroutine examples.hello_world.arc4_contract.HelloWorldContract.approval_program() -> uint64:
            block@0: // L5
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@5
            block@1: // abi_routing_L5
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "say_hello(string)string" => block@2, * => block@3}
            block@2: // say_hello_route_L6
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: uint64 = (== tmp%2#0 NoOp)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: uint64 = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                let tmp%6#0: bytes = examples.hello_world.arc4_contract.HelloWorldContract.say_hello(tmp%5#0)
                let tmp%7#0: bytes = (concat 0x151f7c75 tmp%6#0)
                (log tmp%7#0)
                return 1u
            block@3: // switch_case_default_L5
                goto block@4
            block@4: // switch_case_next_L5
                goto block@8
            block@5: // bare_routing_L5
                let tmp%8#0: uint64 = (txn OnCompletion)
                switch tmp%8#0 {0u => block@6, * => block@7}
            block@6: // create_L5
                let tmp%9#0: uint64 = (txn ApplicationID)
                let tmp%10#0: uint64 = (! tmp%9#0)
                (assert tmp%10#0) // is creating
                return 1u
            block@7: // reject_bare_on_completion_L5
                fail // reject transaction
            block@8: // after_if_else_L5
                fail // reject transaction
        
        subroutine examples.hello_world.arc4_contract.HelloWorldContract.say_hello(name: bytes) -> bytes:
            block@0: // L7
                let array_length%0#0: uint64 = (extract_uint16 name#0 0u)
                let data%1#0: bytes = ((extract 2 0) name#0)
                let concat_result%2#0: bytes = puyapy_lib_arc4.dynamic_array_concat_fixed_size("\x00\x06Hello ", data%1#0, array_length%0#0)
                return concat_result%2#0
        
        subroutine puyapy_lib_arc4.dynamic_array_concat_fixed_size(source: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
            block@0: // L190
                let array_length#0: uint64 = (extract_uint16 source#0 0u)
                let tmp%0#0: uint64 = (+ array_length#0 new_items_count#0)
                let tmp%1#0: bytes = (itob tmp%0#0)
                let tmp%2#0: bytes = (substring3 tmp%1#0 6u 8u)
                let source#1: bytes = (replace3 source#0 0u tmp%2#0)
                let source#2: bytes = (concat source#1 new_items_bytes#0)
                return source#2
    
    program clear-state:
        subroutine examples.hello_world.arc4_contract.HelloWorldContract.clear_state_program() -> uint64:
            block@0: // L5
                return 1u