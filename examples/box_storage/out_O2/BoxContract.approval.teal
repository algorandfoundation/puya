#pragma version 10
#pragma typetrack false

// examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 2 1 8 0 4098 4096 4138
    bytecblock "dynamic_arr_struct" "box" 0x424f585f43 "dynamic_box" 0x151f7c75 "blob" "box_large" "box_a" "box_d" "b" "too_many_bools" "0" "many_ints" 0x68656c6c6f 0x00023432 "default" "box_ref" 0x0014 0x068101
    pushbytes ""
    dupn 9
    txn ApplicationID
    !
    txn OnCompletion
    intc_1 // 1
    shl
    +
    switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_NoOp:
    txn NumAppArgs
    !
    return // on error: this contract does not implement the given ABI method for create NoOp

call_NoOp:
    pushbytess 0x7d37296e 0x33325d3d 0x0199408d 0x772059ca 0x01263df6 0xd566c632 0xfabcb885 0xa6174812 0xf13dd937 0x5ab60f2e 0xf07a0064 0x78f9af3f 0x5cbb9dcc 0x996497ae 0x6cec72ff 0x6f9d1075 0x0d22b441 0x59ef3760 0xaa666b96 0xdfbdd636 0x41427cd1 0x2a141f6c 0x7e843744 0x25600b57 0x29ea595d 0x11453152 0xced1221e 0x04ef4971 0x23ecb32c 0xeef75816 0xb532913a 0xc29f1669 0x9c888c09 0xe6f68506 0x8ee2c364 // method "set_boxes(uint64,byte[],string)void", method "check_keys()void", method "create_many_ints()void", method "set_many_ints(uint64,uint64)void", method "sum_many_ints()uint64", method "delete_boxes()void", method "indirect_extract_and_replace()void", method "read_boxes()(uint64,byte[],string,uint64)", method "boxes_exist()(bool,bool,bool,bool)", method "create_dynamic_arr_struct()void", method "delete_dynamic_arr_struct()void", method "append_dynamic_arr_struct(uint64)uint64", method "pop_dynamic_arr_struct(uint64)uint64", method "set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void", method "nested_write(uint64,uint64)void", method "nested_read(uint64,uint64,uint64)uint64", method "sum_dynamic_arr_struct()uint64", method "create_bools()void", method "set_bool(uint64,bool)void", method "sum_bools(uint64)uint64", method "create_dynamic_box()void", method "delete_dynamic_box()void", method "append_dynamic_box(uint64)uint64", method "pop_dynamic_box(uint64)uint64", method "sum_dynamic_box()uint64", method "write_dynamic_box(uint64,uint64)void", method "write_dynamic_arr_struct(uint64,uint64)void", method "slice_box()void", method "arc4_box()void", method "test_box_ref()void", method "box_map_test()void", method "box_map_set(uint64,string)void", method "box_map_get(uint64)string", method "box_map_del(uint64)void", method "box_map_exists(uint64)bool"
    txna ApplicationArgs 0
    match set_boxes_route@5 check_keys_route@6 create_many_ints_route@7 set_many_ints_route@8 while_top@125 delete_boxes_route@10 indirect_extract_and_replace_route@11 read_boxes_route@12 boxes_exist_route@13 create_dynamic_arr_struct_route@14 delete_dynamic_arr_struct_route@15 append_dynamic_arr_struct_route@16 pop_dynamic_arr_struct_route@17 set_nested_struct_route@18 nested_write_route@19 nested_read_route@20 sum_dynamic_arr_struct_route@21 create_bools_route@22 set_bool_route@23 sum_bools_route@24 create_dynamic_box_route@25 delete_dynamic_box_route@26 append_dynamic_box_route@27 pop_dynamic_box_route@28 sum_dynamic_box_route@29 write_dynamic_box_route@30 write_dynamic_arr_struct_route@31 slice_box_route@32 arc4_box_route@33 test_box_ref_route@34 box_map_test_route@35 box_map_set_route@36 box_map_get_route@37 box_map_del_route@38 box_map_exists_route@39
    err // this contract does not implement the given ABI method for call NoOp

box_map_exists_route@39:
    txna ApplicationArgs 1
    btoi
    itob
    box_len
    bury 1
    pushbytes 0x00
    intc_3 // 0
    uncover 2
    setbit
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

box_map_del_route@38:
    txna ApplicationArgs 1
    btoi
    itob
    box_del
    pop
    intc_1 // 1
    return

box_map_get_route@37:
    txna ApplicationArgs 1
    btoi
    itob
    box_get
    assert // check self.box_map entry exists
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

box_map_set_route@36:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    swap
    itob
    dup
    box_del
    pop
    swap
    box_put
    intc_1 // 1
    return

box_map_test_route@35:
    intc_3 // 0
    itob
    dup
    box_del
    pop
    dup
    pushbytes "Hmmmmm"
    box_put
    box_len
    pop
    pushint 6 // 6
    ==
    assert
    intc_1 // 1
    itob
    dup
    box_get
    bytec 15 // "default"
    cover 2
    select
    bytec 15 // "default"
    ==
    assert
    dup
    box_len
    bury 1
    !
    assert
    dup
    box_del
    pop
    dup
    bytec 13 // "hello"
    box_put
    box_del
    pop
    intc_1 // 1
    return

test_box_ref_route@34:
    bytec 5 // "blob"
    box_len
    bury 1
    !
    assert // no data
    bytec 5 // "blob"
    pushint 32 // 32
    box_create
    assert
    txn Sender
    global CurrentApplicationAddress
    bytec 5 // "blob"
    intc_3 // 0
    dig 3
    box_replace
    bytec 5 // "blob"
    pushint 8000 // 8000
    box_resize
    bytec 5 // "blob"
    intc_3 // 0
    dup
    dig 3
    box_splice
    bytec 5 // "blob"
    pushint 64 // 64
    bytec 13 // 0x68656c6c6f
    box_replace
    bytec 5 // "blob"
    intc_3 // 0
    pushint 69 // 69
    box_extract
    dig 1
    dig 3
    concat
    bytec 13 // 0x68656c6c6f
    concat
    ==
    assert
    bytec 5 // "blob"
    box_del
    assert
    bytec 5 // "blob"
    box_get
    dup
    !
    assert
    dig 1
    pushbytes 0x
    ==
    assert
    dig 3
    cover 2
    select
    dig 2
    ==
    assert
    concat
    bytec 5 // "blob"
    swap
    box_put
    bytec 5 // "blob"
    box_len
    pop
    pushint 64 // 64
    ==
    assert
    bytec 16 // "box_ref"
    pushint 32 // 32
    box_create
    pop
    bytec 16 // "box_ref"
    box_del
    pop
    intc_1 // 1
    return

arc4_box_route@33:
    pushbytess 0x64 0x00010203 // 0x64, 0x00010203
    box_put
    intc_1 // 1
    return

slice_box_route@32:
    bytec 11 // "0"
    box_del
    pop
    bytec 11 // "0"
    pushbytes 0x54657374696e672074657374696e6720313233
    box_put
    bytec 11 // "0"
    box_len
    pop
    dup
    intc_3 // 0
    dig 2
    select
    pushint 7 // 7
    dig 2
    <
    uncover 2
    pushint 7 // 7
    uncover 2
    select
    dig 1
    -
    bytec 11 // "0"
    cover 2
    box_extract
    pushbytes 0x54657374696e67
    ==
    assert
    bytec_2 // 0x424f585f43
    box_del
    pop
    bytec_2 // 0x424f585f43
    pushbytes 0x000548656c6c6f
    box_put
    bytec_2 // 0x424f585f43
    box_len
    pop
    intc_0 // 2
    dig 1
    <
    dig 1
    intc_0 // 2
    uncover 2
    select
    pushint 10 // 10
    dig 2
    <
    uncover 2
    pushint 10 // 10
    uncover 2
    select
    dig 1
    -
    bytec_2 // 0x424f585f43
    cover 2
    box_extract
    pushbytes 0x48656c6c6f
    ==
    return

write_dynamic_arr_struct_route@31:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    bytec_0 // "dynamic_arr_struct"
    pushint 20 // 20
    intc_0 // 2
    box_extract
    btoi
    dig 2
    >
    assert // index out of bounds
    swap
    intc_2 // 8
    *
    pushint 22 // 22
    +
    bytec_0 // "dynamic_arr_struct"
    swap
    uncover 2
    box_replace
    intc_1 // 1
    return

write_dynamic_box_route@30:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    swap
    intc_2 // 8
    *
    intc_0 // 2
    +
    bytec_3 // "dynamic_box"
    swap
    uncover 2
    box_replace
    intc_1 // 1
    return

sum_dynamic_box_route@29:
    intc_3 // 0
    bury 2
    bytec_3 // "dynamic_box"
    intc_3 // 0
    intc_0 // 2
    box_extract
    btoi
    bury 9
    intc_3 // 0
    bury 6

for_header@64:
    dig 5
    dig 9
    <
    bz after_for@66
    dig 5
    dup
    intc_2 // 8
    *
    intc_0 // 2
    +
    bytec_3 // "dynamic_box"
    swap
    intc_2 // 8
    box_extract
    btoi
    dig 3
    +
    bury 3
    intc_1 // 1
    +
    bury 6
    b for_header@64

after_for@66:
    dig 1
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

pop_dynamic_box_route@28:
    txna ApplicationArgs 1
    btoi
    bytec_3 // "dynamic_box"
    intc_3 // 0
    intc_0 // 2
    box_extract
    btoi
    swap
    -
    dup
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    bytec_3 // "dynamic_box"
    intc_3 // 0
    uncover 2
    box_replace
    intc_2 // 8
    *
    intc_0 // 2
    +
    bytec_3 // "dynamic_box"
    swap
    box_resize
    bytec_3 // "dynamic_box"
    intc_3 // 0
    intc_0 // 2
    box_extract
    btoi
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

append_dynamic_box_route@27:
    txna ApplicationArgs 1
    btoi
    dup
    bury 4
    bytec_3 // "dynamic_box"
    intc_3 // 0
    intc_0 // 2
    box_extract
    btoi
    dup
    bury 12
    +
    intc_2 // 8
    *
    intc_0 // 2
    +
    bytec_3 // "dynamic_box"
    swap
    box_resize
    intc_3 // 0
    bury 7

for_header@71:
    dig 6
    dig 3
    <
    bz after_for@73
    dig 6
    dup
    itob
    dig 11
    dup
    cover 2
    intc_2 // 8
    *
    intc_0 // 2
    +
    bytec_3 // "dynamic_box"
    swap
    uncover 2
    box_replace
    intc_1 // 1
    +
    bury 11
    intc_1 // 1
    +
    bury 7
    b for_header@71

after_for@73:
    dig 9
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    bytec_3 // "dynamic_box"
    intc_3 // 0
    uncover 2
    box_replace
    bytec_3 // "dynamic_box"
    intc_3 // 0
    intc_0 // 2
    box_extract
    btoi
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

delete_dynamic_box_route@26:
    bytec_3 // "dynamic_box"
    box_del
    pop
    intc_1 // 1
    return

create_dynamic_box_route@25:
    bytec_3 // "dynamic_box"
    box_del
    pop
    bytec_3 // "dynamic_box"
    pushbytes 0x0000
    box_put
    intc_1 // 1
    return

sum_bools_route@24:
    txna ApplicationArgs 1
    btoi
    bury 4
    intc_3 // 0
    bury 2
    bytec 10 // "too_many_bools"
    box_len
    bury 1
    assert // check self.too_many_bools exists
    intc_3 // 0
    bury 6

for_header@80:
    dig 5
    pushint 33000 // 33000
    <
    dig 2
    bury 2
    bz after_for@86
    dig 5
    dup
    intc_2 // 8
    /
    swap
    intc_2 // 8
    %
    bytec 10 // "too_many_bools"
    uncover 2
    intc_1 // 1
    box_extract
    swap
    getbit
    dig 2
    bury 2
    bz after_if_else@83
    dig 1
    intc_1 // 1
    +
    bury 1

after_if_else@83:
    dupn 2
    bury 3
    dig 4
    ==
    bz after_if_else@85
    dig 1
    bury 1

after_for@86:
    dup
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

after_if_else@85:
    dig 5
    intc_1 // 1
    +
    bury 6
    b for_header@80

set_bool_route@23:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    intc_3 // 0
    getbit
    dig 1
    intc_2 // 8
    /
    uncover 2
    intc_2 // 8
    %
    bytec 10 // "too_many_bools"
    dig 2
    intc_1 // 1
    box_extract
    dig 1
    intc_2 // 8
    <
    assert // index access is out of bounds
    swap
    uncover 3
    setbit
    bytec 10 // "too_many_bools"
    cover 2
    box_replace
    intc_1 // 1
    return

create_bools_route@22:
    bytec 10 // "too_many_bools"
    pushint 4125 // 4125
    box_create
    pop
    intc_1 // 1
    return

sum_dynamic_arr_struct_route@21:
    bytec_0 // "dynamic_arr_struct"
    intc_3 // 0
    intc_2 // 8
    box_extract
    btoi
    dup
    intc_1 // 1
    ==
    assert // expected 1
    bytec_0 // "dynamic_arr_struct"
    pushint 10 // 10
    intc_2 // 8
    box_extract
    btoi
    dup
    intc_0 // 2
    ==
    assert // expected 2
    +
    bury 2
    bytec_0 // "dynamic_arr_struct"
    pushint 20 // 20
    intc_0 // 2
    box_extract
    btoi
    bury 9
    intc_3 // 0
    bury 6

for_header@93:
    dig 5
    dig 9
    <
    bz after_for@95
    bytec_0 // "dynamic_arr_struct"
    pushint 20 // 20
    intc_0 // 2
    box_extract
    btoi
    dig 6
    dup
    uncover 2
    <
    assert // index out of bounds
    dup
    intc_2 // 8
    *
    pushint 22 // 22
    +
    bytec_0 // "dynamic_arr_struct"
    swap
    intc_2 // 8
    box_extract
    btoi
    dig 3
    +
    bury 3
    intc_1 // 1
    +
    bury 6
    b for_header@93

after_for@95:
    bytec_0 // "dynamic_arr_struct"
    pushint 18 // 18
    intc_0 // 2
    box_extract
    btoi
    bytec_0 // "dynamic_arr_struct"
    swap
    intc_0 // 2
    box_extract
    btoi
    bury 8
    intc_3 // 0
    bury 5

for_header@96:
    dig 4
    dig 8
    <
    bz after_for@98
    bytec_0 // "dynamic_arr_struct"
    pushint 18 // 18
    intc_0 // 2
    box_extract
    btoi
    intc_0 // 2
    +
    dig 5
    dup
    cover 2
    intc_2 // 8
    *
    +
    bytec_0 // "dynamic_arr_struct"
    swap
    intc_2 // 8
    box_extract
    btoi
    dig 3
    +
    bury 3
    intc_1 // 1
    +
    bury 5
    b for_header@96

after_for@98:
    dig 1
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

nested_read_route@20:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    bytec_1 // "box"
    intc 4 // 4098
    intc_2 // 8
    box_extract
    btoi
    bytec_1 // "box"
    pushint 4110 // 4110
    intc_2 // 8
    box_extract
    btoi
    bytec_1 // "box"
    pushint 4136 // 4136
    intc_0 // 2
    box_extract
    btoi
    dig 5
    >
    assert // index out of bounds
    intc_0 // 2
    dig 5
    *
    intc 6 // 4138
    dig 1
    +
    bytec_1 // "box"
    swap
    intc_0 // 2
    box_extract
    btoi
    intc 6 // 4138
    +
    bytec_1 // "box"
    dig 1
    intc_0 // 2
    box_extract
    btoi
    dig 6
    >
    assert // index out of bounds
    intc_0 // 2
    +
    dig 5
    intc_2 // 8
    *
    +
    bytec_1 // "box"
    swap
    intc_2 // 8
    box_extract
    btoi
    bytec_1 // "box"
    pushint 4118 // 4118
    intc_2 // 8
    box_extract
    btoi
    bytec_1 // "box"
    pushint 4128 // 4128
    intc_2 // 8
    box_extract
    btoi
    bytec_1 // "box"
    pushint 4108 // 4108
    intc_0 // 2
    box_extract
    btoi
    intc 4 // 4098
    +
    bytec_1 // "box"
    dig 1
    intc_0 // 2
    box_extract
    btoi
    uncover 10
    >
    assert // index out of bounds
    intc_0 // 2
    +
    dup
    uncover 5
    +
    bytec_1 // "box"
    swap
    intc_0 // 2
    box_extract
    btoi
    +
    pushint 18 // 18
    +
    bytec_1 // "box"
    dig 1
    intc_0 // 2
    box_extract
    btoi
    dig 8
    >
    assert // index out of bounds
    intc_0 // 2
    +
    intc_0 // 2
    uncover 8
    *
    dig 1
    +
    bytec_1 // "box"
    swap
    intc_0 // 2
    box_extract
    btoi
    +
    bytec_1 // "box"
    dig 1
    intc_0 // 2
    box_extract
    btoi
    dig 7
    >
    assert // index out of bounds
    intc_0 // 2
    +
    uncover 6
    intc_2 // 8
    *
    +
    bytec_1 // "box"
    swap
    intc_2 // 8
    box_extract
    btoi
    uncover 5
    uncover 5
    +
    uncover 4
    +
    uncover 3
    +
    uncover 2
    +
    +
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

nested_write_route@19:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    dup
    btoi
    bytec_1 // "box"
    intc 4 // 4098
    uncover 3
    box_replace
    dup
    intc_1 // 1
    +
    itob
    bytec_1 // "box"
    pushint 4110 // 4110
    uncover 2
    box_replace
    dup
    intc_0 // 2
    +
    itob
    bytec_1 // "box"
    pushint 4136 // 4136
    intc_0 // 2
    box_extract
    btoi
    dig 3
    >
    assert // index out of bounds
    intc_0 // 2
    dig 3
    *
    intc 6 // 4138
    dig 1
    +
    bytec_1 // "box"
    swap
    intc_0 // 2
    box_extract
    btoi
    intc 6 // 4138
    +
    bytec_1 // "box"
    dig 1
    intc_0 // 2
    box_extract
    btoi
    dig 5
    >
    assert // index out of bounds
    intc_0 // 2
    +
    dig 4
    intc_2 // 8
    *
    swap
    dig 1
    +
    bytec_1 // "box"
    swap
    uncover 4
    box_replace
    dig 2
    pushint 3 // 3
    +
    itob
    bytec_1 // "box"
    pushint 4118 // 4118
    uncover 2
    box_replace
    dig 2
    pushint 4 // 4
    +
    itob
    bytec_1 // "box"
    pushint 4128 // 4128
    uncover 2
    box_replace
    uncover 2
    pushint 5 // 5
    +
    itob
    bytec_1 // "box"
    pushint 4108 // 4108
    intc_0 // 2
    box_extract
    btoi
    intc 4 // 4098
    +
    bytec_1 // "box"
    dig 1
    intc_0 // 2
    box_extract
    btoi
    dig 5
    >
    assert // index out of bounds
    intc_0 // 2
    +
    dup
    dig 4
    +
    bytec_1 // "box"
    swap
    intc_0 // 2
    box_extract
    btoi
    +
    pushint 18 // 18
    +
    bytec_1 // "box"
    dig 1
    intc_0 // 2
    box_extract
    btoi
    dig 5
    >
    assert // index out of bounds
    intc_0 // 2
    +
    dup
    uncover 4
    +
    bytec_1 // "box"
    swap
    intc_0 // 2
    box_extract
    btoi
    +
    bytec_1 // "box"
    dig 1
    intc_0 // 2
    box_extract
    btoi
    uncover 4
    >
    assert // index out of bounds
    intc_0 // 2
    +
    uncover 2
    +
    bytec_1 // "box"
    swap
    uncover 2
    box_replace
    intc_1 // 1
    return

set_nested_struct_route@18:
    txna ApplicationArgs 1
    intc_3 // 0
    extract_uint64
    assert // struct.a is truthy
    txna ApplicationArgs 1
    dup
    len
    intc 4 // 4098
    +
    bytec_1 // "box"
    swap
    box_create
    pop
    bytec_1 // "box"
    intc 5 // 4096
    pushbytes 0x1002
    box_replace
    bytec_1 // "box"
    intc 4 // 4098
    uncover 2
    box_replace
    intc_1 // 1
    return

pop_dynamic_arr_struct_route@17:
    txna ApplicationArgs 1
    btoi
    bytec_0 // "dynamic_arr_struct"
    pushint 20 // 20
    intc_0 // 2
    box_extract
    btoi
    dig 1
    -
    bytec_0 // "dynamic_arr_struct"
    pushint 18 // 18
    intc_0 // 2
    box_extract
    btoi
    bytec_0 // "dynamic_arr_struct"
    swap
    intc_0 // 2
    box_extract
    btoi
    dig 1
    intc_2 // 8
    *
    dup
    pushint 22 // 22
    +
    swap
    pushint 24 // 24
    +
    intc_0 // 2
    -
    uncover 3
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    bytec_0 // "dynamic_arr_struct"
    pushint 20 // 20
    uncover 2
    box_replace
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    bytec_0 // "dynamic_arr_struct"
    pushint 18 // 18
    uncover 2
    box_replace
    uncover 2
    intc_2 // 8
    *
    bytec_0 // "dynamic_arr_struct"
    dig 2
    uncover 2
    pushbytes 0x
    box_splice
    swap
    intc_2 // 8
    *
    intc_0 // 2
    +
    +
    bytec_0 // "dynamic_arr_struct"
    swap
    box_resize
    bytec_0 // "dynamic_arr_struct"
    pushint 20 // 20
    intc_0 // 2
    box_extract
    btoi
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

append_dynamic_arr_struct_route@16:
    txna ApplicationArgs 1
    btoi
    dup
    bury 4
    bytec_0 // "dynamic_arr_struct"
    pushint 10 // 10
    intc_2 // 8
    box_extract
    btoi
    intc_0 // 2
    ==
    assert // expected 2
    bytec_0 // "dynamic_arr_struct"
    pushint 20 // 20
    intc_0 // 2
    box_extract
    btoi
    dup
    bury 12
    bytec_0 // "dynamic_arr_struct"
    pushint 18 // 18
    intc_0 // 2
    box_extract
    btoi
    bytec_0 // "dynamic_arr_struct"
    swap
    intc_0 // 2
    box_extract
    btoi
    dig 1
    dig 3
    +
    intc_2 // 8
    *
    pushint 22 // 22
    +
    swap
    intc_2 // 8
    *
    intc_0 // 2
    +
    +
    bytec_0 // "dynamic_arr_struct"
    swap
    box_resize
    intc_2 // 8
    *
    pushint 22 // 22
    +
    swap
    intc_2 // 8
    *
    bzero
    bytec_0 // "dynamic_arr_struct"
    uncover 2
    intc_3 // 0
    uncover 3
    box_splice
    intc_3 // 0
    bury 7

for_header@109:
    dig 6
    dig 3
    <
    bz after_for@111
    dig 6
    dup
    itob
    dig 11
    dup
    cover 2
    intc_2 // 8
    *
    pushint 22 // 22
    +
    bytec_0 // "dynamic_arr_struct"
    swap
    uncover 2
    box_replace
    intc_1 // 1
    +
    bury 11
    intc_1 // 1
    +
    bury 7
    b for_header@109

after_for@111:
    dig 9
    dup
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    bytec_0 // "dynamic_arr_struct"
    pushint 20 // 20
    uncover 2
    box_replace
    dup
    intc_2 // 8
    *
    pushint 24 // 24
    +
    intc_0 // 2
    -
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    extract 6 2
    bytec_0 // "dynamic_arr_struct"
    pushint 18 // 18
    uncover 2
    box_replace
    bytec_0 // "dynamic_arr_struct"
    pushint 20 // 20
    intc_0 // 2
    box_extract
    btoi
    dup
    uncover 2
    ==
    assert // expected arr length to be correct
    bytec_0 // "dynamic_arr_struct"
    pushint 18 // 18
    intc_0 // 2
    box_extract
    btoi
    bytec_0 // "dynamic_arr_struct"
    swap
    intc_0 // 2
    box_extract
    btoi
    !
    assert // expected arr2 length to be correct
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

delete_dynamic_arr_struct_route@15:
    bytec_0 // "dynamic_arr_struct"
    box_del
    pop
    intc_1 // 1
    return

create_dynamic_arr_struct_route@14:
    txn NumAppArgs
    dup
    intc_0 // 2
    *
    swap
    itob
    bytec 17 // 0x0014
    concat
    swap
    itob
    concat
    pushbytes 0x001600000000
    concat
    bytec_0 // "dynamic_arr_struct"
    box_del
    pop
    bytec_0 // "dynamic_arr_struct"
    swap
    box_put
    intc_1 // 1
    return

boxes_exist_route@13:
    bytec 7 // "box_a"
    box_len
    bury 1
    bytec 9 // "b"
    box_len
    cover 2
    pop
    bytec_2 // 0x424f585f43
    box_len
    cover 3
    pop
    bytec 6 // "box_large"
    box_len
    cover 4
    pop
    pushbytes 0x00
    intc_3 // 0
    uncover 2
    setbit
    intc_1 // 1
    uncover 2
    setbit
    intc_0 // 2
    uncover 2
    setbit
    pushint 3 // 3
    uncover 2
    setbit
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

read_boxes_route@12:
    bytec 7 // "box_a"
    box_get
    assert // check Box exists
    btoi
    intc_1 // 1
    +
    intc_1 // 1
    -
    bytec 9 // "b"
    box_get
    assert // check self.box_b exists
    extract 2 0
    bytec_2 // 0x424f585f43
    box_get
    assert // check self.box_c exists
    bytec 6 // "box_large"
    intc 5 // 4096
    intc_2 // 8
    box_extract
    btoi
    uncover 3
    itob
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    swap
    bytec 17 // 0x0014
    concat
    dig 1
    len
    pushint 20 // 20
    +
    itob
    extract 6 2
    concat
    uncover 2
    itob
    concat
    swap
    concat
    swap
    concat
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

indirect_extract_and_replace_route@11:
    bytec 6 // "box_large"
    intc 5 // 4096
    intc_2 // 8
    box_extract
    btoi
    intc_1 // 1
    +
    itob
    bytec 6 // "box_large"
    intc 5 // 4096
    uncover 2
    box_replace
    intc_1 // 1
    return

delete_boxes_route@10:
    bytec 7 // "box_a"
    box_del
    pop
    bytec 9 // "b"
    box_del
    pop
    bytec_2 // 0x424f585f43
    box_del
    pop
    bytec 7 // "box_a"
    box_get
    swap
    btoi
    pushint 42 // 42
    dig 1
    dig 3
    select
    pushint 42 // 42
    ==
    assert
    bytec 9 // "b"
    box_get
    bytec 14 // 0x00023432
    cover 2
    select
    extract 2 0
    pushbytes 0x3432
    ==
    assert
    bytec_2 // 0x424f585f43
    box_get
    bytec 14 // 0x00023432
    cover 2
    select
    bytec 14 // 0x00023432
    ==
    assert
    swap
    !
    assert
    !
    assert
    bytec 6 // "box_large"
    box_del
    pop
    intc_1 // 1
    return

while_top@125:
    pushint 10510 // 10510
    global OpcodeBudget
    >
    bz after_while@127
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 18 // 0x068101
    itxn_field ApprovalProgram
    bytec 18 // 0x068101
    itxn_field ClearStateProgram
    intc_3 // 0
    itxn_field Fee
    itxn_submit
    b while_top@125

after_while@127:
    intc_3 // 0
    bury 2
    bytec 12 // "many_ints"
    box_len
    bury 1
    assert // check self.many_ints exists
    intc_3 // 0
    bury 6

for_header@128:
    dig 5
    pushint 513 // 513
    <
    bz after_for@130
    dig 5
    dup
    intc_2 // 8
    *
    bytec 12 // "many_ints"
    swap
    intc_2 // 8
    box_extract
    btoi
    dig 3
    +
    bury 3
    intc_1 // 1
    +
    bury 6
    b for_header@128

after_for@130:
    dig 1
    itob
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

set_many_ints_route@8:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    swap
    intc_2 // 8
    *
    bytec 12 // "many_ints"
    swap
    uncover 2
    box_replace
    intc_1 // 1
    return

create_many_ints_route@7:
    bytec 12 // "many_ints"
    pushint 4104 // 4104
    box_create
    pop
    intc_1 // 1
    return

check_keys_route@6:
    intc_1 // 1
    return

set_boxes_route@5:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    uncover 2
    itob
    bytec 7 // "box_a"
    swap
    box_put
    bytec 9 // "b"
    box_del
    pop
    bytec 9 // "b"
    dig 2
    box_put
    bytec_2 // 0x424f585f43
    box_del
    pop
    bytec_2 // 0x424f585f43
    dig 1
    box_put
    dig 1
    extract 2 0
    bytec 8 // "box_d"
    box_del
    pop
    bytec 8 // "box_d"
    dig 1
    box_put
    bytec 6 // "box_large"
    pushint 6160 // 6160
    box_create
    pop
    pushint 42 // 42
    itob
    bytec 6 // "box_large"
    intc 5 // 4096
    uncover 2
    box_replace
    bytec 6 // "box_large"
    intc 5 // 4096
    pushbytes 0x000000000000002a
    box_replace
    bytec 7 // "box_a"
    box_get
    assert // check self.box_a exists
    btoi
    pushint 3 // 3
    +
    itob
    bytec 7 // "box_a"
    swap
    box_put
    bytec 7 // "box_a"
    box_len
    pop
    intc_2 // 8
    ==
    assert
    bytec 9 // "b"
    box_len
    pop
    dig 3
    len
    ==
    assert
    bytec_2 // 0x424f585f43
    box_len
    assert // check self.box_c exists
    dig 2
    len
    dup2
    ==
    assert
    bytec 8 // "box_d"
    box_len
    pop
    dig 3
    len
    dup2
    ==
    assert
    bytec_2 // 0x424f585f43
    intc_3 // 0
    intc_1 // 1
    box_extract
    dig 6
    extract 0 1
    ==
    assert
    dig 3
    intc_1 // 1
    -
    bytec_2 // 0x424f585f43
    swap
    intc_1 // 1
    box_extract
    dig 3
    intc_1 // 1
    -
    dig 7
    swap
    intc_1 // 1
    extract3
    ==
    assert
    intc_1 // 1
    dig 4
    <
    dig 4
    intc_1 // 1
    uncover 2
    select
    dig 4
    swap
    -
    bytec_2 // 0x424f585f43
    intc_3 // 0
    uncover 2
    box_extract
    intc_1 // 1
    dig 4
    >=
    intc_1 // 1
    dig 5
    uncover 2
    select
    dig 4
    swap
    -
    dig 7
    intc_3 // 0
    uncover 2
    substring3
    ==
    assert
    intc_0 // 2
    dig 4
    <
    uncover 4
    intc_0 // 2
    uncover 2
    select
    bytec_2 // 0x424f585f43
    intc_3 // 0
    uncover 2
    box_extract
    intc_0 // 2
    dig 4
    >=
    intc_0 // 2
    uncover 5
    uncover 2
    select
    uncover 5
    intc_3 // 0
    uncover 2
    substring3
    ==
    assert
    bytec 8 // "box_d"
    intc_3 // 0
    intc_1 // 1
    box_extract
    uncover 4
    extract 2 1
    ==
    assert
    dig 1
    intc_1 // 1
    -
    bytec 8 // "box_d"
    swap
    intc_1 // 1
    box_extract
    dig 1
    intc_1 // 1
    -
    dig 4
    swap
    intc_1 // 1
    extract3
    ==
    assert
    intc_1 // 1
    dig 2
    <
    dig 2
    intc_1 // 1
    uncover 2
    select
    dig 2
    swap
    -
    bytec 8 // "box_d"
    intc_3 // 0
    uncover 2
    box_extract
    intc_1 // 1
    dig 2
    >=
    intc_1 // 1
    dig 3
    uncover 2
    select
    dig 2
    swap
    -
    dig 4
    intc_3 // 0
    uncover 2
    substring3
    ==
    assert
    pushint 5 // 5
    dig 2
    <
    dig 2
    pushint 5 // 5
    uncover 2
    select
    bytec 8 // "box_d"
    intc_3 // 0
    uncover 2
    box_extract
    pushint 5 // 5
    dig 2
    >=
    pushint 5 // 5
    dig 3
    uncover 2
    select
    dig 4
    intc_3 // 0
    uncover 2
    substring3
    ==
    assert
    intc_0 // 2
    dig 2
    <
    uncover 2
    intc_0 // 2
    uncover 2
    select
    bytec 8 // "box_d"
    intc_3 // 0
    uncover 2
    box_extract
    intc_0 // 2
    dig 2
    >=
    intc_0 // 2
    uncover 3
    uncover 2
    select
    uncover 2
    intc_3 // 0
    uncover 2
    substring3
    ==
    assert
    bytec 6 // "box_large"
    box_len
    pop
    pushint 6160 // 6160
    ==
    return
