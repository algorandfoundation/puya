#pragma version 10
#pragma typetrack false

// examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 2 5
    bytecblock 0x626c6f62 0x424f585f43 "box_d" "box_a" "b" 0x00 "box_large" 0x64 0x151f7c75 0x68656c6c6f "0" "box_ref" 0x00023432 "default"
    txn NumAppArgs
    bz main_bare_routing@18
    pushbytess 0x7d37296e 0x33325d3d 0xd566c632 0xa6174812 0xf13dd937 0x04ef4971 0x23ecb32c 0xeef75816 0xb532913a 0xc29f1669 0x9c888c09 0xe6f68506 0x8ee2c364 // method "set_boxes(uint64,byte[],string)void", method "check_keys()void", method "delete_boxes()void", method "read_boxes()(uint64,byte[],string,uint64)", method "boxes_exist()(bool,bool,bool,bool)", method "slice_box()void", method "arc4_box()void", method "test_box_ref()void", method "box_map_test()void", method "box_map_set(uint64,string)void", method "box_map_get(uint64)string", method "box_map_del(uint64)void", method "box_map_exists(uint64)bool"
    txna ApplicationArgs 0
    match main_set_boxes_route@5 main_check_keys_route@6 main_delete_boxes_route@7 main_read_boxes_route@8 main_boxes_exist_route@9 main_slice_box_route@10 main_arc4_box_route@11 main_test_box_ref_route@12 main_box_map_test_route@13 main_box_map_set_route@14 main_box_map_get_route@15 main_box_map_del_route@16 main_box_map_exists_route@17

main_after_if_else@20:
    intc_1 // 0
    return

main_box_map_exists_route@17:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    itob
    box_len
    bury 1
    bytec 5 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec 8 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_box_map_del_route@16:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    itob
    box_del
    pop
    intc_0 // 1
    return

main_box_map_get_route@15:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    itob
    box_get
    assert // check self.box_map entry exists
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec 8 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_box_map_set_route@14:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    swap
    itob
    dup
    box_del
    pop
    swap
    box_put
    intc_0 // 1
    return

main_box_map_test_route@13:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 0
    itob
    dup
    box_del
    pop
    dup
    pushbytes "Hmmmmm"
    box_put
    dup
    box_len
    assert // check self.box_map entry exists
    pushint 6 // 6
    ==
    assert
    dup
    box_len
    assert // check self.box_map entry exists
    dig 1
    box_len
    assert // check Box exists
    ==
    assert
    dup
    box_len
    assert // check self.box_map entry exists
    pushint 6 // 6
    ==
    assert
    intc_0 // 1
    itob
    dup
    box_get
    bytec 13 // "default"
    cover 2
    select
    bytec 13 // "default"
    ==
    assert
    dup
    box_get
    bury 1
    !
    assert
    swap
    box_len
    bury 1
    assert
    dup
    box_del
    pop
    dup
    bytec 9 // "hello"
    box_put
    dup
    box_get
    assert // check BoxMap entry exists
    bytec 9 // "hello"
    ==
    assert
    box_del
    pop
    intc_0 // 1
    return

main_test_box_ref_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_0 // "blob"
    box_len
    bury 1
    !
    assert // no data
    bytec_0 // 0x626c6f62
    box_len
    bury 1
    !
    assert // no data
    bytec_0 // 0x626c6f62
    box_len
    bury 1
    !
    assert // no data
    bytec_0 // "blob"
    box_len
    bury 1
    !
    assert // no data
    bytec_0 // "blob"
    pushint 32 // 32
    box_create
    assert
    bytec_0 // "blob"
    box_len
    bury 1
    assert // has data
    txn Sender
    global CurrentApplicationAddress
    bytec_0 // "blob"
    intc_1 // 0
    dig 3
    box_replace
    bytec_0 // "blob"
    pushint 8000 // 8000
    box_resize
    bytec_0 // "blob"
    intc_1 // 0
    dup
    dig 3
    box_splice
    bytec_0 // "blob"
    pushint 64 // 64
    bytec 9 // 0x68656c6c6f
    box_replace
    bytec_0 // "blob"
    intc_1 // 0
    pushint 69 // 69
    box_extract
    dig 1
    dig 3
    concat
    bytec 9 // 0x68656c6c6f
    concat
    ==
    assert
    bytec_0 // "blob"
    box_del
    assert
    bytec_0 // "blob"
    box_get
    !
    assert
    pushbytes 0x
    ==
    assert
    bytec_0 // "blob"
    box_get
    dig 3
    cover 2
    select
    dig 2
    ==
    assert
    concat
    bytec_0 // "blob"
    swap
    box_put
    bytec_0 // "blob"
    box_len
    bury 1
    assert // Blob exists
    bytec_0 // "blob"
    box_len
    assert // check BoxRef exists
    pushint 64 // 64
    ==
    assert
    bytec_0 // "blob"
    box_len
    assert // check BoxRef exists
    pushint 64 // 64
    ==
    assert
    bytec 11 // "box_ref"
    pushint 32 // 32
    box_create
    pop
    bytec 11 // "box_ref"
    box_len
    bury 1
    assert // has data
    bytec 11 // "box_ref"
    box_del
    pop
    intc_0 // 1
    return

main_arc4_box_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec 7 // 0x64
    pushbytes 0x00010203
    box_put
    bytec 7 // 0x64
    box_get
    assert // check Box exists
    extract 0 1 // on error: Index access is out of bounds
    bytec 5 // 0x00
    b==
    assert
    bytec 7 // 0x64
    box_get
    assert // check Box exists
    extract 1 1 // on error: Index access is out of bounds
    pushbytes 0x01
    b==
    assert
    bytec 7 // 0x64
    box_get
    assert // check Box exists
    extract 2 1 // on error: Index access is out of bounds
    pushbytes 0x02
    b==
    assert
    bytec 7 // 0x64
    box_get
    assert // check Box exists
    extract 3 1 // on error: Index access is out of bounds
    pushbytes 0x03
    b==
    assert
    intc_0 // 1
    return

main_slice_box_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec 10 // "0"
    box_del
    pop
    bytec 10 // "0"
    pushbytes 0x54657374696e672074657374696e6720313233
    box_put
    bytec 10 // "0"
    box_len
    pop
    dup
    intc_1 // 0
    dig 2
    select
    pushint 7 // 7
    dig 2
    <
    uncover 2
    pushint 7 // 7
    uncover 2
    select
    dig 1
    -
    bytec 10 // "0"
    cover 2
    box_extract
    pushbytes 0x54657374696e67
    ==
    assert
    bytec_1 // 0x424f585f43
    box_del
    pop
    bytec_1 // 0x424f585f43
    pushbytes 0x000548656c6c6f
    box_put
    bytec_1 // 0x424f585f43
    box_len
    pop
    intc_2 // 2
    dig 1
    <
    dig 1
    intc_2 // 2
    uncover 2
    select
    pushint 10 // 10
    dig 2
    <
    uncover 2
    pushint 10 // 10
    uncover 2
    select
    dig 1
    -
    bytec_1 // 0x424f585f43
    cover 2
    box_extract
    pushbytes 0x48656c6c6f
    ==
    assert
    intc_0 // 1
    return

main_boxes_exist_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_3 // "box_a"
    box_len
    bury 1
    bytec 4 // "b"
    box_len
    cover 2
    pop
    bytec_1 // 0x424f585f43
    box_len
    cover 3
    pop
    bytec 6 // "box_large"
    box_len
    cover 4
    pop
    bytec 5 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec 5 // 0x00
    intc_1 // 0
    uncover 3
    setbit
    bytec 5 // 0x00
    intc_1 // 0
    uncover 4
    setbit
    bytec 5 // 0x00
    intc_1 // 0
    uncover 5
    setbit
    uncover 2
    intc_1 // 0
    getbit
    uncover 3
    intc_0 // 1
    uncover 2
    setbit
    uncover 2
    intc_1 // 0
    getbit
    intc_2 // 2
    swap
    setbit
    swap
    intc_1 // 0
    getbit
    pushint 3 // 3
    swap
    setbit
    bytec 8 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_read_boxes_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec 6 // "box_large"
    pushints 4096 8 // 4096, 8
    box_extract
    bytec_3 // "box_a"
    box_get
    assert // check Box exists
    btoi
    intc_0 // 1
    +
    intc_0 // 1
    -
    bytec 4 // "b"
    box_get
    assert // check self.box_b exists
    extract 2 0
    bytec_1 // 0x424f585f43
    box_get
    assert // check self.box_c exists
    uncover 3
    btoi
    uncover 3
    itob
    dig 3
    len
    itob
    extract 6 2
    uncover 4
    concat
    uncover 2
    itob
    uncover 2
    pushbytes 0x0014
    concat
    dig 2
    len
    pushint 20 // 20
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    swap
    concat
    bytec 8 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_delete_boxes_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    bytec_3 // "box_a"
    box_del
    pop
    bytec 4 // "b"
    box_del
    pop
    bytec_1 // 0x424f585f43
    box_del
    pop
    bytec_3 // "box_a"
    box_get
    swap
    btoi
    pushint 42 // 42
    swap
    uncover 2
    select
    pushint 42 // 42
    ==
    assert
    bytec 4 // "b"
    box_get
    bytec 12 // 0x00023432
    cover 2
    select
    extract 2 0
    pushbytes 0x3432
    ==
    assert
    bytec_1 // 0x424f585f43
    box_get
    bytec 12 // 0x00023432
    cover 2
    select
    bytec 12 // 0x00023432
    ==
    assert
    bytec_3 // "box_a"
    box_get
    swap
    btoi
    swap
    !
    assert
    !
    assert
    bytec 6 // "box_large"
    box_del
    pop
    intc_0 // 1
    return

main_check_keys_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_set_boxes_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    uncover 2
    itob
    bytec_3 // "box_a"
    swap
    box_put
    bytec 4 // "b"
    box_del
    pop
    bytec 4 // "b"
    dig 2
    box_put
    bytec_1 // 0x424f585f43
    box_del
    pop
    bytec_1 // 0x424f585f43
    dig 1
    box_put
    dig 1
    extract 2 0
    bytec_2 // "box_d"
    box_del
    pop
    bytec_2 // "box_d"
    dig 1
    box_put
    bytec 6 // "box_large"
    pushint 6152 // 6152
    box_create
    pop
    bytec 6 // "box_large"
    pushint 4096 // 4096
    pushbytes 0x000000000000002a
    box_replace
    bytec 4 // "b"
    box_get
    assert // check self.box_b exists
    bytec 4 // "b"
    box_get
    assert // check self.box_b exists
    intc_1 // 0
    extract_uint16
    swap
    intc_1 // 0
    extract_uint16
    ==
    assert // direct reference should match copy
    bytec_3 // "box_a"
    box_get
    assert // check self.box_a exists
    btoi
    pushint 3 // 3
    +
    itob
    bytec_3 // "box_a"
    swap
    box_put
    bytec_3 // "box_a"
    box_len
    assert // check self.box_a exists
    pushint 8 // 8
    ==
    assert
    bytec 4 // "b"
    box_len
    assert // check self.box_b exists
    dig 3
    len
    ==
    assert
    bytec_1 // 0x424f585f43
    box_len
    assert // check self.box_c exists
    dig 2
    len
    swap
    dig 1
    ==
    assert
    bytec_2 // "box_d"
    box_len
    assert // check self.box_d exists
    dig 2
    len
    swap
    dig 1
    ==
    assert
    bytec_1 // 0x424f585f43
    intc_1 // 0
    intc_0 // 1
    box_extract
    dig 4
    extract 0 1
    ==
    assert
    bytec_1 // 0x424f585f43
    box_len
    pop
    intc_0 // 1
    -
    bytec_1 // 0x424f585f43
    swap
    intc_0 // 1
    box_extract
    dig 2
    intc_0 // 1
    -
    dig 5
    swap
    intc_0 // 1
    extract3
    ==
    assert
    bytec_1 // 0x424f585f43
    box_len
    pop
    intc_0 // 1
    dig 1
    <
    dig 1
    intc_0 // 1
    uncover 2
    select
    -
    bytec_1 // 0x424f585f43
    intc_1 // 0
    uncover 2
    box_extract
    intc_0 // 1
    dig 3
    >=
    intc_0 // 1
    dig 4
    uncover 2
    select
    dig 3
    swap
    -
    dig 5
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    bytec_1 // 0x424f585f43
    box_len
    pop
    intc_2 // 2
    dig 1
    <
    intc_2 // 2
    swap
    select
    bytec_1 // 0x424f585f43
    intc_1 // 0
    uncover 2
    box_extract
    intc_2 // 2
    dig 3
    >=
    intc_2 // 2
    uncover 4
    uncover 2
    select
    uncover 4
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    bytec_2 // "box_d"
    intc_1 // 0
    intc_0 // 1
    box_extract
    uncover 3
    extract 2 1
    ==
    assert
    bytec_2 // "box_d"
    box_len
    pop
    intc_0 // 1
    -
    bytec_2 // "box_d"
    swap
    intc_0 // 1
    box_extract
    dig 1
    intc_0 // 1
    -
    dig 3
    swap
    intc_0 // 1
    extract3
    ==
    assert
    bytec_2 // "box_d"
    box_len
    pop
    intc_0 // 1
    dig 1
    <
    dig 1
    intc_0 // 1
    uncover 2
    select
    -
    bytec_2 // "box_d"
    intc_1 // 0
    uncover 2
    box_extract
    intc_0 // 1
    dig 2
    >=
    intc_0 // 1
    dig 3
    uncover 2
    select
    dig 2
    swap
    -
    dig 3
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    bytec_2 // "box_d"
    box_len
    pop
    intc_3 // 5
    dig 1
    <
    intc_3 // 5
    swap
    select
    bytec_2 // "box_d"
    intc_1 // 0
    uncover 2
    box_extract
    intc_3 // 5
    dig 2
    >=
    intc_3 // 5
    dig 3
    uncover 2
    select
    dig 3
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    bytec_2 // "box_d"
    box_len
    pop
    intc_2 // 2
    dig 1
    <
    intc_2 // 2
    swap
    select
    bytec_2 // "box_d"
    intc_1 // 0
    uncover 2
    box_extract
    intc_2 // 2
    dig 2
    >=
    intc_2 // 2
    uncover 3
    uncover 2
    select
    uncover 2
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    bytec 6 // "box_large"
    box_len
    assert // check self.box_large exists
    pushint 6152 // 6152
    ==
    assert
    intc_0 // 1
    return

main_bare_routing@18:
    txn OnCompletion
    bnz main_after_if_else@20
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
