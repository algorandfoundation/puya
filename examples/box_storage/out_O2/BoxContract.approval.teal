#pragma version 10

examples.box_storage.contract.BoxContract.approval_program:
    intcblock 1 0 2 5
    bytecblock 0x424f585f43 0x626c6f62 "box_d" "box_a" "b" 0x00 0x64 0x151f7c75 "0" 0x68656c6c6f 0x00023432 "box_ref" "default"
    callsub __puya_arc4_router__
    return


// examples.box_storage.contract.BoxContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@17
    pushbytess 0x7d37296e 0x33325d3d 0xd566c632 0xfbda9ba0 0xe5a3ed52 0x04ef4971 0x23ecb32c 0xeef75816 0xb532913a 0xc29f1669 0x9c888c09 0xe6f68506 0x8ee2c364 // method "set_boxes(uint64,byte[],string)void", method "check_keys()void", method "delete_boxes()void", method "read_boxes()(uint64,byte[],string)", method "boxes_exist()(bool,bool,bool)", method "slice_box()void", method "arc4_box()void", method "test_box_ref()void", method "box_map_test()void", method "box_map_set(uint64,string)void", method "box_map_get(uint64)string", method "box_map_del(uint64)void", method "box_map_exists(uint64)bool"
    txna ApplicationArgs 0
    match __puya_arc4_router___set_boxes_route@2 __puya_arc4_router___check_keys_route@3 __puya_arc4_router___delete_boxes_route@4 __puya_arc4_router___read_boxes_route@5 __puya_arc4_router___boxes_exist_route@6 __puya_arc4_router___slice_box_route@7 __puya_arc4_router___arc4_box_route@8 __puya_arc4_router___test_box_ref_route@9 __puya_arc4_router___box_map_test_route@10 __puya_arc4_router___box_map_set_route@11 __puya_arc4_router___box_map_get_route@12 __puya_arc4_router___box_map_del_route@13 __puya_arc4_router___box_map_exists_route@14
    intc_1 // 0
    retsub

__puya_arc4_router___set_boxes_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    callsub set_boxes
    intc_0 // 1
    retsub

__puya_arc4_router___check_keys_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    retsub

__puya_arc4_router___delete_boxes_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub delete_boxes
    intc_0 // 1
    retsub

__puya_arc4_router___read_boxes_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub read_boxes
    uncover 2
    itob
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    swap
    pushbytes 0x000c
    concat
    dig 1
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___boxes_exist_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub boxes_exist
    bytec 5 // 0x00
    intc_1 // 0
    uncover 4
    setbit
    bytec 5 // 0x00
    intc_1 // 0
    uncover 4
    setbit
    bytec 5 // 0x00
    intc_1 // 0
    uncover 4
    setbit
    swap
    intc_1 // 0
    getbit
    uncover 2
    intc_0 // 1
    uncover 2
    setbit
    swap
    intc_1 // 0
    getbit
    intc_2 // 2
    swap
    setbit
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___slice_box_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub slice_box
    intc_0 // 1
    retsub

__puya_arc4_router___arc4_box_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub arc4_box
    intc_0 // 1
    retsub

__puya_arc4_router___test_box_ref_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_box_ref
    intc_0 // 1
    retsub

__puya_arc4_router___box_map_test_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub box_map_test
    intc_0 // 1
    retsub

__puya_arc4_router___box_map_set_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    callsub box_map_set
    intc_0 // 1
    retsub

__puya_arc4_router___box_map_get_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    callsub box_map_get
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___box_map_del_route@13:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    callsub box_map_del
    intc_0 // 1
    retsub

__puya_arc4_router___box_map_exists_route@14:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    callsub box_map_exists
    bytec 5 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___bare_routing@17:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@21
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    retsub

__puya_arc4_router___after_if_else@21:
    intc_1 // 0
    retsub


// examples.box_storage.contract.BoxContract.set_boxes(a: uint64, b: bytes, c: bytes) -> void:
set_boxes:
    proto 3 0
    frame_dig -3
    itob
    bytec_3 // "box_a"
    swap
    box_put
    bytec 4 // "b"
    box_del
    pop
    bytec 4 // "b"
    frame_dig -2
    box_put
    bytec_0 // 0x424f585f43
    box_del
    pop
    bytec_0 // 0x424f585f43
    frame_dig -1
    box_put
    frame_dig -2
    extract 2 0
    bytec_2 // "box_d"
    box_del
    pop
    bytec_2 // "box_d"
    dig 1
    box_put
    bytec 4 // "b"
    box_get
    assert // check self.box_b exists
    bytec 4 // "b"
    box_get
    assert // check self.box_b exists
    intc_1 // 0
    extract_uint16
    swap
    intc_1 // 0
    extract_uint16
    ==
    assert // direct reference should match copy
    bytec_3 // "box_a"
    box_get
    swap
    btoi
    swap
    assert // check self.box_a exists
    pushint 3 // 3
    +
    itob
    bytec_3 // "box_a"
    swap
    box_put
    bytec_3 // "box_a"
    box_len
    assert // check self.box_a exists
    pushint 8 // 8
    ==
    assert
    bytec 4 // "b"
    box_len
    assert // check self.box_b exists
    frame_dig -2
    len
    ==
    assert
    bytec_0 // 0x424f585f43
    box_len
    assert // check self.box_c exists
    frame_dig -1
    len
    swap
    dig 1
    ==
    assert
    bytec_2 // "box_d"
    box_len
    assert // check self.box_d exists
    dig 2
    len
    swap
    dig 1
    ==
    assert
    bytec_0 // 0x424f585f43
    intc_1 // 0
    intc_0 // 1
    box_extract
    frame_dig -1
    extract 0 1
    ==
    assert
    bytec_0 // 0x424f585f43
    box_len
    pop
    intc_0 // 1
    -
    bytec_0 // 0x424f585f43
    swap
    intc_0 // 1
    box_extract
    dig 2
    intc_0 // 1
    -
    frame_dig -1
    swap
    intc_0 // 1
    extract3
    ==
    assert
    bytec_0 // 0x424f585f43
    box_len
    pop
    intc_0 // 1
    dig 1
    <
    dig 1
    intc_0 // 1
    uncover 2
    select
    -
    bytec_0 // 0x424f585f43
    intc_1 // 0
    uncover 2
    box_extract
    intc_0 // 1
    dig 3
    >=
    intc_0 // 1
    dig 4
    uncover 2
    select
    dig 3
    swap
    -
    frame_dig -1
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    bytec_0 // 0x424f585f43
    box_len
    pop
    intc_2 // 2
    dig 1
    <
    intc_2 // 2
    swap
    select
    bytec_0 // 0x424f585f43
    intc_1 // 0
    uncover 2
    box_extract
    intc_2 // 2
    dig 3
    >=
    intc_2 // 2
    uncover 4
    uncover 2
    select
    frame_dig -1
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    bytec_2 // "box_d"
    intc_1 // 0
    intc_0 // 1
    box_extract
    dig 2
    extract 0 1
    ==
    assert
    bytec_2 // "box_d"
    box_len
    pop
    intc_0 // 1
    -
    bytec_2 // "box_d"
    swap
    intc_0 // 1
    box_extract
    dig 1
    intc_0 // 1
    -
    dig 3
    swap
    intc_0 // 1
    extract3
    ==
    assert
    bytec_2 // "box_d"
    box_len
    pop
    intc_0 // 1
    dig 1
    <
    dig 1
    intc_0 // 1
    uncover 2
    select
    -
    bytec_2 // "box_d"
    intc_1 // 0
    uncover 2
    box_extract
    intc_0 // 1
    dig 2
    >=
    intc_0 // 1
    dig 3
    uncover 2
    select
    dig 2
    swap
    -
    dig 3
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    bytec_2 // "box_d"
    box_len
    pop
    intc_3 // 5
    dig 1
    <
    intc_3 // 5
    swap
    select
    bytec_2 // "box_d"
    intc_1 // 0
    uncover 2
    box_extract
    intc_3 // 5
    dig 2
    >=
    intc_3 // 5
    dig 3
    uncover 2
    select
    dig 3
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    bytec_2 // "box_d"
    box_len
    pop
    intc_2 // 2
    dig 1
    <
    intc_2 // 2
    swap
    select
    bytec_2 // "box_d"
    intc_1 // 0
    uncover 2
    box_extract
    intc_2 // 2
    dig 2
    >=
    intc_2 // 2
    uncover 3
    uncover 2
    select
    uncover 2
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    retsub


// examples.box_storage.contract.BoxContract.delete_boxes() -> void:
delete_boxes:
    proto 0 0
    bytec_3 // "box_a"
    box_del
    pop
    bytec 4 // "b"
    box_del
    pop
    bytec_0 // 0x424f585f43
    box_del
    pop
    bytec_3 // "box_a"
    box_get
    swap
    btoi
    pushint 42 // 42
    swap
    uncover 2
    select
    pushint 42 // 42
    ==
    assert
    bytec 4 // "b"
    box_get
    bytec 10 // 0x00023432
    cover 2
    select
    extract 2 0
    pushbytes 0x3432
    ==
    assert
    bytec_0 // 0x424f585f43
    box_get
    bytec 10 // 0x00023432
    cover 2
    select
    bytec 10 // 0x00023432
    ==
    assert
    bytec_3 // "box_a"
    box_get
    swap
    btoi
    swap
    !
    assert
    !
    assert
    retsub


// examples.box_storage.contract.BoxContract.read_boxes() -> uint64, bytes, bytes:
read_boxes:
    proto 0 3
    bytec_3 // "box_a"
    callsub get_box_value_plus_1
    intc_0 // 1
    -
    bytec 4 // "b"
    box_get
    assert // check self.box_b exists
    extract 2 0
    bytec_0 // 0x424f585f43
    box_get
    assert // check self.box_c exists
    retsub


// examples.box_storage.contract.get_box_value_plus_1(box: bytes) -> uint64:
get_box_value_plus_1:
    proto 1 1
    frame_dig -1
    box_get
    swap
    btoi
    swap
    assert // check Box exists
    intc_0 // 1
    +
    retsub


// examples.box_storage.contract.BoxContract.boxes_exist() -> uint64, uint64, uint64:
boxes_exist:
    proto 0 3
    bytec_3 // "box_a"
    box_len
    bury 1
    bytec 4 // "b"
    box_len
    bury 1
    bytec_0 // 0x424f585f43
    box_len
    bury 1
    retsub


// examples.box_storage.contract.BoxContract.slice_box() -> void:
slice_box:
    proto 0 0
    bytec 8 // "0"
    box_del
    pop
    bytec 8 // "0"
    pushbytes 0x54657374696e672074657374696e6720313233
    box_put
    bytec 8 // "0"
    box_len
    pop
    dup
    intc_1 // 0
    dig 2
    select
    pushint 7 // 7
    dig 2
    <
    uncover 2
    pushint 7 // 7
    uncover 2
    select
    dig 1
    -
    bytec 8 // "0"
    cover 2
    box_extract
    pushbytes 0x54657374696e67
    ==
    assert
    bytec_0 // 0x424f585f43
    box_del
    pop
    bytec_0 // 0x424f585f43
    pushbytes 0x000548656c6c6f
    box_put
    bytec_0 // 0x424f585f43
    box_len
    pop
    intc_2 // 2
    dig 1
    <
    dig 1
    intc_2 // 2
    uncover 2
    select
    pushint 10 // 10
    dig 2
    <
    uncover 2
    pushint 10 // 10
    uncover 2
    select
    dig 1
    -
    bytec_0 // 0x424f585f43
    cover 2
    box_extract
    pushbytes 0x48656c6c6f
    ==
    assert
    retsub


// examples.box_storage.contract.BoxContract.arc4_box() -> void:
arc4_box:
    proto 0 0
    bytec 6 // 0x64
    pushbytes 0x00010203
    box_put
    bytec 6 // 0x64
    box_get
    assert // check Box exists
    extract 0 1 // on error: Index access is out of bounds
    bytec 5 // 0x00
    b==
    assert
    bytec 6 // 0x64
    box_get
    assert // check Box exists
    extract 1 1 // on error: Index access is out of bounds
    pushbytes 0x01
    b==
    assert
    bytec 6 // 0x64
    box_get
    assert // check Box exists
    extract 2 1 // on error: Index access is out of bounds
    pushbytes 0x02
    b==
    assert
    bytec 6 // 0x64
    box_get
    assert // check Box exists
    extract 3 1 // on error: Index access is out of bounds
    pushbytes 0x03
    b==
    assert
    retsub


// examples.box_storage.contract.BoxContract.test_box_ref() -> void:
test_box_ref:
    proto 0 0
    bytec_1 // "blob"
    box_len
    bury 1
    !
    assert // no data
    bytec_1 // 0x626c6f62
    box_len
    bury 1
    !
    assert // no data
    bytec_1 // 0x626c6f62
    box_len
    bury 1
    !
    assert // no data
    bytec_1 // "blob"
    box_len
    bury 1
    !
    assert // no data
    bytec_1 // "blob"
    pushint 32 // 32
    box_create
    assert
    bytec_1 // "blob"
    box_len
    bury 1
    assert // has data
    txn Sender
    global CurrentApplicationAddress
    bytec_1 // "blob"
    intc_1 // 0
    dig 3
    box_replace
    bytec_1 // "blob"
    pushint 8000 // 8000
    box_resize
    bytec_1 // "blob"
    intc_1 // 0
    dup
    dig 3
    box_splice
    bytec_1 // "blob"
    pushint 64 // 64
    bytec 9 // 0x68656c6c6f
    box_replace
    bytec_1 // "blob"
    intc_1 // 0
    pushint 69 // 69
    box_extract
    dig 1
    dig 3
    concat
    bytec 9 // 0x68656c6c6f
    concat
    ==
    assert
    bytec_1 // "blob"
    box_del
    assert
    bytec_1 // "blob"
    box_get
    !
    assert
    pushbytes 0x
    ==
    assert
    bytec_1 // "blob"
    box_get
    dig 3
    cover 2
    select
    dig 2
    ==
    assert
    concat
    bytec_1 // "blob"
    swap
    box_put
    bytec_1 // "blob"
    box_len
    bury 1
    assert // Blob exists
    bytec_1 // "blob"
    box_len
    assert // check BoxRef exists
    pushint 64 // 64
    ==
    assert
    bytec_1 // "blob"
    callsub get_box_ref_length
    pushint 64 // 64
    ==
    assert
    bytec 11 // "box_ref"
    pushint 32 // 32
    box_create
    pop
    bytec 11 // "box_ref"
    box_len
    bury 1
    assert // has data
    bytec 11 // "box_ref"
    box_del
    pop
    retsub


// examples.box_storage.contract.get_box_ref_length(ref: bytes) -> uint64:
get_box_ref_length:
    proto 1 1
    frame_dig -1
    box_len
    assert // check BoxRef exists
    retsub


// examples.box_storage.contract.BoxContract.box_map_test() -> void:
box_map_test:
    proto 0 0
    intc_1 // 0
    itob
    dup
    box_del
    pop
    dup
    pushbytes "Hmmmmm"
    box_put
    dup
    box_len
    assert // check self.box_map entry exists
    pushint 6 // 6
    ==
    assert
    dup
    box_len
    assert // check self.box_map entry exists
    pushint 6 // 6
    ==
    assert
    intc_0 // 1
    itob
    dup
    box_get
    bytec 12 // "default"
    cover 2
    select
    bytec 12 // "default"
    ==
    assert
    dup
    box_get
    bury 1
    !
    assert
    swap
    box_len
    bury 1
    assert
    dup
    box_del
    pop
    dup
    bytec 9 // "hello"
    box_put
    pushbytes 0x
    intc_1 // 0
    callsub get_box_map_value_from_key_plus_1
    bytec 9 // "hello"
    ==
    assert
    box_del
    pop
    retsub


// examples.box_storage.contract.get_box_map_value_from_key_plus_1(box_map: bytes, key: uint64) -> bytes:
get_box_map_value_from_key_plus_1:
    proto 2 1
    frame_dig -1
    intc_0 // 1
    +
    itob
    frame_dig -2
    swap
    concat
    box_get
    assert // check BoxMap entry exists
    retsub


// examples.box_storage.contract.BoxContract.box_map_set(key: uint64, value: bytes) -> void:
box_map_set:
    proto 2 0
    frame_dig -2
    itob
    dup
    box_del
    pop
    frame_dig -1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.box_map_get(key: uint64) -> bytes:
box_map_get:
    proto 1 1
    frame_dig -1
    itob
    box_get
    assert // check self.box_map entry exists
    retsub


// examples.box_storage.contract.BoxContract.box_map_del(key: uint64) -> void:
box_map_del:
    proto 1 0
    frame_dig -1
    itob
    box_del
    pop
    retsub


// examples.box_storage.contract.BoxContract.box_map_exists(key: uint64) -> uint64:
box_map_exists:
    proto 1 1
    frame_dig -1
    itob
    box_len
    bury 1
    retsub
