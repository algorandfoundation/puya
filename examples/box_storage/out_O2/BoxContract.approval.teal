#pragma version 10

examples.box_storage.contract.BoxContract.approval_program:
    txn NumAppArgs
    bz main_bare_routing@17
    method "set_boxes(uint64,byte[],string)void"
    method "check_keys()void"
    method "delete_boxes()void"
    method "read_boxes()(uint64,byte[],string)"
    method "boxes_exist()(bool,bool,bool)"
    method "slice_box()void"
    method "arc4_box()void"
    method "test_box_ref()void"
    method "box_map_test()void"
    method "box_map_set(uint64,string)void"
    method "box_map_get(uint64)string"
    method "box_map_del(uint64)void"
    method "box_map_exists(uint64)bool"
    txna ApplicationArgs 0
    match main_set_boxes_route@2 main_check_keys_route@3 main_delete_boxes_route@4 main_read_boxes_route@5 main_boxes_exist_route@6 main_slice_box_route@7 main_arc4_box_route@8 main_test_box_ref_route@9 main_box_map_test_route@10 main_box_map_set_route@11 main_box_map_get_route@12 main_box_map_del_route@13 main_box_map_exists_route@14
    err // reject transaction

main_set_boxes_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    callsub set_boxes
    int 1
    return

main_check_keys_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub check_keys
    int 1
    return

main_delete_boxes_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub delete_boxes
    int 1
    return

main_read_boxes_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub read_boxes
    cover 2
    swap
    itob
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    swap
    byte 0x000c
    concat
    swap
    dup
    len
    int 12
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_boxes_exist_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub boxes_exist
    cover 2
    swap
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 2
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x00
    int 0
    uncover 3
    setbit
    swap
    int 0
    getbit
    uncover 2
    int 1
    uncover 2
    setbit
    swap
    int 0
    getbit
    int 2
    swap
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_slice_box_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub slice_box
    int 1
    return

main_arc4_box_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub arc4_box
    int 1
    return

main_test_box_ref_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub test_box_ref
    int 1
    return

main_box_map_test_route@10:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub box_map_test
    int 1
    return

main_box_map_set_route@11:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    callsub box_map_set
    int 1
    return

main_box_map_get_route@12:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    callsub box_map_get
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_box_map_del_route@13:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    callsub box_map_del
    int 1
    return

main_box_map_exists_route@14:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    btoi
    callsub box_map_exists
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@17:
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// examples.box_storage.contract.BoxContract.set_boxes(a: uint64, b: bytes, c: bytes) -> void:
set_boxes:
    proto 3 0
    frame_dig -3
    itob
    byte "box_a"
    swap
    box_put
    byte "b"
    box_del
    pop
    byte "b"
    frame_dig -2
    box_put
    byte 0x424f585f43
    box_del
    pop
    byte 0x424f585f43
    frame_dig -1
    box_put
    frame_dig -2
    extract 2 0
    byte "box_d"
    box_del
    pop
    byte "box_d"
    dig 1
    box_put
    byte "b"
    box_get
    assert // check self.box_b exists
    byte "b"
    box_get
    assert // check self.box_b exists
    int 0
    extract_uint16
    swap
    int 0
    extract_uint16
    ==
    assert // direct reference should match copy
    byte "box_a"
    box_get
    swap
    btoi
    swap
    assert // check self.box_a exists
    int 3
    +
    itob
    byte "box_a"
    swap
    box_put
    byte "box_a"
    box_len
    assert // check self.box_a exists
    int 8
    ==
    assert
    byte "b"
    box_len
    assert // check self.box_b exists
    frame_dig -2
    len
    ==
    assert
    byte 0x424f585f43
    box_len
    assert // check self.box_c exists
    frame_dig -1
    len
    dup
    cover 2
    ==
    assert
    byte "box_d"
    box_len
    assert // check self.box_d exists
    dig 2
    len
    dup
    cover 4
    ==
    assert
    byte 0x424f585f43
    int 0
    int 1
    box_extract
    frame_dig -1
    extract 0 1
    ==
    assert
    byte 0x424f585f43
    box_len
    pop
    int 1
    -
    byte 0x424f585f43
    swap
    int 1
    box_extract
    dig 1
    int 1
    -
    dup
    int 1
    +
    frame_dig -1
    cover 2
    substring3
    ==
    assert
    byte 0x424f585f43
    box_len
    pop
    int 1
    dig 1
    <
    swap
    dup
    int 1
    uncover 3
    select
    -
    byte 0x424f585f43
    int 0
    uncover 2
    box_extract
    int 1
    dig 2
    >=
    int 1
    dig 3
    uncover 2
    select
    dig 2
    swap
    -
    frame_dig -1
    int 0
    uncover 2
    substring3
    ==
    assert
    byte 0x424f585f43
    box_len
    pop
    int 2
    dig 1
    <
    int 2
    swap
    select
    byte 0x424f585f43
    int 0
    uncover 2
    box_extract
    int 2
    dig 2
    >=
    int 2
    uncover 3
    uncover 2
    select
    frame_dig -1
    int 0
    uncover 2
    substring3
    ==
    assert
    byte "box_d"
    int 0
    int 1
    box_extract
    dig 1
    extract 0 1
    ==
    assert
    byte "box_d"
    box_len
    pop
    int 1
    -
    byte "box_d"
    swap
    int 1
    box_extract
    dig 2
    int 1
    -
    dup
    int 1
    +
    dig 3
    cover 2
    substring3
    ==
    assert
    byte "box_d"
    box_len
    pop
    int 1
    dig 1
    <
    swap
    dup
    int 1
    uncover 3
    select
    -
    byte "box_d"
    int 0
    uncover 2
    box_extract
    int 1
    dig 3
    >=
    int 1
    dig 4
    uncover 2
    select
    dig 3
    swap
    -
    dig 2
    int 0
    uncover 2
    substring3
    ==
    assert
    byte "box_d"
    box_len
    pop
    int 5
    dig 1
    <
    int 5
    swap
    select
    byte "box_d"
    int 0
    uncover 2
    box_extract
    int 5
    dig 3
    >=
    int 5
    dig 4
    uncover 2
    select
    dig 2
    int 0
    uncover 2
    substring3
    ==
    assert
    byte "box_d"
    box_len
    pop
    int 2
    dig 1
    <
    int 2
    swap
    select
    byte "box_d"
    int 0
    uncover 2
    box_extract
    int 2
    dig 3
    >=
    int 2
    uncover 4
    uncover 2
    select
    uncover 2
    int 0
    uncover 2
    substring3
    ==
    assert
    retsub


// examples.box_storage.contract.BoxContract.check_keys() -> void:
check_keys:
    proto 0 0
    retsub


// examples.box_storage.contract.BoxContract.delete_boxes() -> void:
delete_boxes:
    proto 0 0
    byte "box_a"
    box_del
    pop
    byte "b"
    box_del
    pop
    byte 0x424f585f43
    box_del
    pop
    byte "box_a"
    box_get
    swap
    btoi
    int 42
    swap
    uncover 2
    select
    int 42
    ==
    assert
    byte "b"
    box_get
    byte 0x00023432
    cover 2
    select
    extract 2 0
    byte 0x3432
    ==
    assert
    byte 0x424f585f43
    box_get
    byte 0x00023432
    cover 2
    select
    byte 0x00023432
    ==
    assert
    byte "box_a"
    box_get
    swap
    btoi
    swap
    !
    assert
    !
    assert
    retsub


// examples.box_storage.contract.BoxContract.read_boxes() -> uint64, bytes, bytes:
read_boxes:
    proto 0 3
    byte "box_a"
    callsub get_box_value_plus_1
    int 1
    -
    byte "b"
    box_get
    assert // check self.box_b exists
    extract 2 0
    byte 0x424f585f43
    box_get
    assert // check self.box_c exists
    retsub


// examples.box_storage.contract.get_box_value_plus_1(box: bytes) -> uint64:
get_box_value_plus_1:
    proto 1 1
    frame_dig -1
    box_get
    swap
    btoi
    swap
    assert // check Box exists
    int 1
    +
    retsub


// examples.box_storage.contract.BoxContract.boxes_exist() -> uint64, uint64, uint64:
boxes_exist:
    proto 0 3
    byte "box_a"
    box_len
    bury 1
    byte "b"
    box_len
    bury 1
    byte 0x424f585f43
    box_len
    bury 1
    retsub


// examples.box_storage.contract.BoxContract.slice_box() -> void:
slice_box:
    proto 0 0
    byte "0"
    box_del
    pop
    byte "0"
    byte 0x54657374696e672074657374696e6720313233
    box_put
    byte "0"
    box_len
    pop
    dup
    int 0
    dig 2
    select
    swap
    int 7
    dig 1
    <
    int 7
    swap
    select
    dig 1
    -
    byte "0"
    cover 2
    box_extract
    byte 0x54657374696e67
    ==
    assert
    byte 0x424f585f43
    box_del
    pop
    byte 0x424f585f43
    byte 0x000548656c6c6f
    box_put
    byte 0x424f585f43
    box_len
    pop
    int 2
    dig 1
    <
    swap
    dup
    int 2
    uncover 3
    select
    swap
    int 10
    dig 1
    <
    int 10
    swap
    select
    dig 1
    -
    byte 0x424f585f43
    cover 2
    box_extract
    byte 0x48656c6c6f
    ==
    assert
    retsub


// examples.box_storage.contract.BoxContract.arc4_box() -> void:
arc4_box:
    proto 0 0
    byte 0x64
    byte 0x00010203
    box_put
    byte 0x64
    box_get
    assert // check Box exists
    extract 0 1 // on error: Index access is out of bounds
    byte 0x00
    b==
    assert
    byte 0x64
    box_get
    assert // check Box exists
    extract 1 1 // on error: Index access is out of bounds
    byte 0x01
    b==
    assert
    byte 0x64
    box_get
    assert // check Box exists
    extract 2 1 // on error: Index access is out of bounds
    byte 0x02
    b==
    assert
    byte 0x64
    box_get
    assert // check Box exists
    extract 3 1 // on error: Index access is out of bounds
    byte 0x03
    b==
    assert
    retsub


// examples.box_storage.contract.BoxContract.test_box_ref() -> void:
test_box_ref:
    proto 0 0
    byte "blob"
    box_len
    bury 1
    !
    assert // no data
    byte 0x626c6f62
    box_len
    bury 1
    !
    assert // no data
    byte 0x626c6f62
    box_len
    bury 1
    !
    assert // no data
    byte "blob"
    box_len
    bury 1
    !
    assert // no data
    byte "blob"
    int 32
    box_create
    assert
    byte "blob"
    box_len
    bury 1
    assert // has data
    global CurrentApplicationAddress
    txn Sender
    byte "blob"
    int 0
    dig 2
    box_replace
    byte "blob"
    int 8000
    box_resize
    byte "blob"
    int 0
    dup
    dig 4
    box_splice
    byte "blob"
    int 64
    byte 0x68656c6c6f
    box_replace
    byte "blob"
    int 0
    int 69
    box_extract
    dig 2
    dig 2
    concat
    byte 0x68656c6c6f
    concat
    ==
    assert
    byte "blob"
    box_del
    assert
    byte "blob"
    box_get
    !
    assert
    byte 0x
    ==
    assert
    byte "blob"
    box_get
    dig 2
    cover 2
    select
    dig 1
    ==
    assert
    swap
    concat
    byte "blob"
    swap
    box_put
    byte "blob"
    box_len
    bury 1
    assert // Blob exists
    byte "blob"
    box_len
    assert // check BoxRef exists
    int 64
    ==
    assert
    byte "blob"
    callsub get_box_ref_length
    int 64
    ==
    assert
    byte "box_ref"
    int 32
    box_create
    pop
    byte "box_ref"
    box_len
    bury 1
    assert // has data
    byte "box_ref"
    box_del
    pop
    retsub


// examples.box_storage.contract.get_box_ref_length(ref: bytes) -> uint64:
get_box_ref_length:
    proto 1 1
    frame_dig -1
    box_len
    assert // check BoxRef exists
    retsub


// examples.box_storage.contract.BoxContract.box_map_test() -> void:
box_map_test:
    proto 0 0
    int 0
    itob
    dup
    box_del
    pop
    dup
    byte "Hmmmmm"
    box_put
    dup
    box_len
    assert // check self.box_map entry exists
    int 6
    ==
    assert
    dup
    box_len
    assert // check self.box_map entry exists
    int 6
    ==
    assert
    int 1
    itob
    dup
    box_get
    byte "default"
    cover 2
    select
    byte "default"
    ==
    assert
    dup
    box_get
    bury 1
    !
    assert
    swap
    box_len
    bury 1
    assert
    dup
    box_del
    pop
    dup
    byte "hello"
    box_put
    byte 0x
    int 0
    callsub get_box_map_value_from_key_plus_1
    byte "hello"
    ==
    assert
    box_del
    pop
    retsub


// examples.box_storage.contract.get_box_map_value_from_key_plus_1(box_map: bytes, key: uint64) -> bytes:
get_box_map_value_from_key_plus_1:
    proto 2 1
    frame_dig -1
    int 1
    +
    itob
    frame_dig -2
    swap
    concat
    box_get
    assert // check BoxMap entry exists
    retsub


// examples.box_storage.contract.BoxContract.box_map_set(key: uint64, value: bytes) -> void:
box_map_set:
    proto 2 0
    frame_dig -2
    itob
    dup
    box_del
    pop
    frame_dig -1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.box_map_get(key: uint64) -> bytes:
box_map_get:
    proto 1 1
    frame_dig -1
    itob
    box_get
    assert // check self.box_map entry exists
    retsub


// examples.box_storage.contract.BoxContract.box_map_del(key: uint64) -> void:
box_map_del:
    proto 1 0
    frame_dig -1
    itob
    box_del
    pop
    retsub


// examples.box_storage.contract.BoxContract.box_map_exists(key: uint64) -> uint64:
box_map_exists:
    proto 1 1
    frame_dig -1
    itob
    box_len
    bury 1
    retsub
