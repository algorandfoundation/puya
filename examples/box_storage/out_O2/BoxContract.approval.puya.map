{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA0LK;;AAAA;AAAA;AAAA;;AAAA;AA1LL;;;AAAA;AA4Le;AAAA;AAAA;;AAFV;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtLL;;;AAAA;AAwLyB;AAAjB;;AAFH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlLL;;;AAAA;AAoL4B;AAAb;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA9KL;;;AAAA;AAAA;;;AAAA;;;AAgLqB;AAAA;AAAb;AAAA;;AAAA;AAAA;AAFH;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAEW;AAGK;AAAb;AAAA;;AAAA;AADQ;;;;;;;;AACR;AAGO;AAAA;AAAA;AAAoC;;AAApC;AAAP;AACO;AAAA;AAAA;AAAA;AAAoC;AAAA;AAAA;AAApC;;AAAA;AAAP;AACO;AAAA;AAA8B;;AAA9B;AAAP;AAPQ;AASgB;AAAjB;AAAA;AAAgC;;AAAhC;;AAAA;AAAsD;;AAAtD;AAAP;AACgB;AAAA;AAAA;;AACT;AAAP;AAMA;AAAA;;AAAA;AAAqB;;AAArB;AAEA;;AAtBH;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AAGwB;AACd;AAAA;;AAAA;AAAP;AACqB;AACd;AAAA;;AAAA;AAAP;AACqB;AACd;AAAA;;AAAA;AAAP;AACqB;AACd;AAAA;;AAAA;AAAP;AADqB;AAIM;;AAApB;AAAP;AAIe;;AACD;;AATO;AAWL;AAAhB;;AAAA;AAXqB;AAYN;;;AAAf;AAZqB;AAaN;AAAG;AAAlB;;AAAA;AAbqB;AAcL;;AAJN;;AAIV;AAdqB;AAeI;AAAG;;AAAnB;AACQ;;AAAA;;AAAA;AANP;;AAMO;AAAV;AAAP;AAhBqB;AAmBd;AAAP;AAnBqB;AAuBL;AACT;AAAA;AAAP;AACO;;AAAS;;AAAT;AAAP;AACO;;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAGY;AA7BS;AA6BrB;AAAA;AA7BqB;AA+Bd;AAAA;AAAkB;;AAAlB;AAAP;AA/BqB;AAuFlB;AAAA;AAvDmC;;AAA/B;AAAP;AAGA;;AAAyB;;AAAzB;;AAEA;;AAAA;;AA9CH;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAE+B;;;;;;;;;AAC5B;AAHH;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAE0B;;AACvB;;AADuB;;AACT;;;;;;;;;;;;;;;;;;;;;AAAd;AADuB;;AAEhB;AAAA;AAAA;AAAY;AAAZ;;AAAA;AAAc;;AAAd;;AAAA;AAAA;;AAAc;;AAAd;;AAAA;AAAA;;AAAA;AAFgB;;AAEhB;;AAAA;AAAoB;;;;;;;;;AAApB;AAAP;AAEA;AAAA;;AAAA;AAAmB;;;;;;;;;AAAnB;AACO;AAAA;AAAA;AAAuB;AAAvB;;AAAA;AAAA;;AAAuB;AAAvB;;AAAA;AAAyB;;AAAzB;;AAAA;AAAA;;AAAyB;;AAAzB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAgC;;;;;;;AAAhC;AAAP;AAPH;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAEe;AAAL;AAAA;;AAAuB;;AAAL;AAAA;;AAAA;AAAuB;AAAL;AAAA;;AAAA;AAAuB;;AAAL;AAAA;;AAAA;AAFhE;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAI8B;;AAC4B;;AAAwB;;AAA9C;AAER;AAwHtB;AAAA;AAAA;AAAY;AAAZ;AAxHoC;AAAnC;AACA;;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;;AAAA;AAVP;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAEO;AAAJ;;AACI;;AAAJ;;AACI;AAAJ;;AACO;AAAA;AAAA;AAAA;AAAuB;;AAAvB;;AAAA;;AAAA;AAAsC;;AAAtC;AAAP;AACO;;AAAA;AAAuB;;AAAvB;;AAAA;AAAA;;;AAA2D;;;;AAA3D;AAAP;AACO;AAAA;AAAuB;;AAAvB;;AAAA;AAAuB;;AAAvB;AAAP;AAEO;AAAA;AAAP;AACO;AAAP;AACI;;AAAJ;;AAXH;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AApCA;;AAAA;AAAA;AAAA;;AAAA;AAVL;;;AAAA;AAAA;;;AAAA;;;AAYQ;;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;;AAAA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AAAA;;AAAA;AACmB;;AAAA;;;AAAnB;AAAA;;AAAA;AAAA;;AAAA;AACA;;AAAA;;;AAAA;;AACyB;;AAAzB;AAAA;;AAAA;;AAAA;;AAAA;AACA;;AAA2B;;AAAwB;;;;;;;;;;AAAnD;AAKA;AAAA;AAAA;AAAA;AAAoB;;AAApB;AAAA;AAAA;AAAA;AAAA;AAGO;AAAA;AAAA;AAAqB;;AAArB;AAAP;AACO;;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAP;AACO;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAA;;AAAA;AAAP;AACO;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAA;;AAAA;AAAP;AAGO;AAAuB;AAAvB;AAAA;AAA6B;;AAAA;;;AAA7B;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAA9B;AAAP;AACO;AAAA;AAAA;AAAwB;AAAxB;;AAAA;AAAA;;AAAwB;AAAxB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA+B;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA/B;AAAP;AACO;AAAA;AAAA;AAAwB;AAAxB;;AAAA;AAAwB;AAAxB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA8B;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA9B;AAAP;AAGO;AAAiB;AAAjB;AAAA;AAAuB;;AAAA;;;AAAvB;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAxB;AAAP;AACO;AAAA;AAAA;AAAkB;AAAlB;;AAAA;AAAA;;AAAkB;AAAlB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAyB;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAzB;AAAP;AACO;AAAA;AAAA;AAAkB;AAAlB;;AAAA;AAAkB;AAAlB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAwB;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAxB;AAAP;AACO;AAAA;AAAA;AAAmB;AAAnB;;AAAA;AAAmB;AAAnB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA4C;AAAX;;AAAA;AAAW;AAAX;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAjC;AAAP;AAEO;;AAAA;AAAA;AAAyB;;;AAAzB;AAAP;AAlCH;;AAVL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 2 5 4096"
    },
    "9": {
      "op": "bytecblock 0x424f585f43 0x626c6f62 \"box_d\" \"box_a\" \"b\" \"box_large\" 0x151f7c75 \"0\" 0x68656c6c6f 0x00023432 \"default\" \"box_ref\""
    },
    "80": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "82": {
      "op": "bz main_bare_routing@18",
      "stack_out": []
    },
    "85": {
      "op": "pushbytess 0x7d37296e 0x33325d3d 0xd566c632 0xa6174812 0xf13dd937 0x04ef4971 0x23ecb32c 0xeef75816 0xb532913a 0xc29f1669 0x9c888c09 0xe6f68506 0x8ee2c364 // method \"set_boxes(uint64,byte[],string)void\", method \"check_keys()void\", method \"delete_boxes()void\", method \"read_boxes()(uint64,byte[],string,uint64)\", method \"boxes_exist()(bool,bool,bool,bool)\", method \"slice_box()void\", method \"arc4_box()void\", method \"test_box_ref()void\", method \"box_map_test()void\", method \"box_map_set(uint64,string)void\", method \"box_map_get(uint64)string\", method \"box_map_del(uint64)void\", method \"box_map_exists(uint64)bool\"",
      "defined_out": [
        "Method(arc4_box()void)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(slice_box()void)",
        "Method(test_box_ref()void)"
      ],
      "stack_out": [
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)"
      ]
    },
    "152": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc4_box()void)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(slice_box()void)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "tmp%2#0"
      ]
    },
    "155": {
      "op": "match main_set_boxes_route@5 main_check_keys_route@6 main_delete_boxes_route@7 main_read_boxes_route@8 main_boxes_exist_route@9 main_slice_box_route@10 main_arc4_box_route@11 main_test_box_ref_route@12 main_box_map_test_route@13 main_box_map_set_route@14 main_box_map_get_route@15 main_box_map_del_route@16 main_box_map_exists_route@17",
      "stack_out": []
    },
    "183": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "184": {
      "op": "return",
      "stack_out": []
    },
    "185": {
      "block": "main_box_map_exists_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "187": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "188": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "189": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "191": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "192": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "195": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "196": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "197": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "198": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "200": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "203": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "204": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "206": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%1#1"
      ],
      "stack_out": [
        "aggregate%encoded_bool%1#1"
      ]
    },
    "207": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%1#1"
      ],
      "stack_out": [
        "aggregate%encoded_bool%1#1",
        "0x151f7c75"
      ]
    },
    "209": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%1#1"
      ]
    },
    "210": {
      "op": "concat",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "211": {
      "op": "log",
      "stack_out": []
    },
    "212": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "213": {
      "op": "return",
      "stack_out": []
    },
    "214": {
      "block": "main_box_map_del_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "216": {
      "op": "!",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "217": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "218": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "220": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "221": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "224": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "225": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "226": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "227": {
      "op": "pop",
      "stack_out": []
    },
    "228": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "229": {
      "op": "return",
      "stack_out": []
    },
    "230": {
      "block": "main_box_map_get_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "232": {
      "op": "!",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "233": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "234": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "236": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "237": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "240": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "241": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "242": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%18#1",
        "aggregate%box_get%19#1"
      ],
      "stack_out": [
        "aggregate%box_get%18#1",
        "aggregate%box_get%19#1"
      ]
    },
    "243": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "aggregate%box_get%18#1"
      ]
    },
    "244": {
      "op": "dup",
      "defined_out": [
        "aggregate%box_get%18#1",
        "aggregate%box_get%18#1 (copy)"
      ],
      "stack_out": [
        "aggregate%box_get%18#1",
        "aggregate%box_get%18#1 (copy)"
      ]
    },
    "245": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%18#1",
        "aggregate%length%4#1"
      ],
      "stack_out": [
        "aggregate%box_get%18#1",
        "aggregate%length%4#1"
      ]
    },
    "246": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%6#1",
        "aggregate%box_get%18#1"
      ],
      "stack_out": [
        "aggregate%box_get%18#1",
        "aggregate%as_bytes%6#1"
      ]
    },
    "247": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%box_get%18#1",
        "aggregate%length_uint16%4#1"
      ],
      "stack_out": [
        "aggregate%box_get%18#1",
        "aggregate%length_uint16%4#1"
      ]
    },
    "250": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%4#1",
        "aggregate%box_get%18#1"
      ]
    },
    "251": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%4#1"
      ],
      "stack_out": [
        "aggregate%encoded_value%4#1"
      ]
    },
    "252": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%4#1"
      ],
      "stack_out": [
        "aggregate%encoded_value%4#1",
        "0x151f7c75"
      ]
    },
    "254": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%4#1"
      ]
    },
    "255": {
      "op": "concat",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "256": {
      "op": "log",
      "stack_out": []
    },
    "257": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "258": {
      "op": "return",
      "stack_out": []
    },
    "259": {
      "block": "main_box_map_set_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "261": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "262": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "263": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "265": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "266": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "269": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "270": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "273": {
      "op": "extract 2 0",
      "defined_out": [
        "key#0",
        "value#0"
      ],
      "stack_out": [
        "key#0",
        "value#0"
      ]
    },
    "276": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "key#0"
      ]
    },
    "277": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0"
      ]
    },
    "278": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "279": {
      "op": "box_del",
      "defined_out": [
        "encoded_value%0#0",
        "value#0",
        "{box_del}"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0",
        "{box_del}"
      ]
    },
    "280": {
      "op": "pop",
      "stack_out": [
        "value#0",
        "encoded_value%0#0"
      ]
    },
    "281": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "value#0"
      ]
    },
    "282": {
      "op": "box_put",
      "stack_out": []
    },
    "283": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "284": {
      "op": "return",
      "stack_out": []
    },
    "285": {
      "block": "main_box_map_test_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "287": {
      "op": "!",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "288": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "289": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "291": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "292": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "293": {
      "op": "itob",
      "defined_out": [
        "box_0#0"
      ],
      "stack_out": [
        "box_0#0"
      ]
    },
    "294": {
      "op": "dup",
      "defined_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ],
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ]
    },
    "295": {
      "op": "box_del",
      "defined_out": [
        "box_0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_0#0",
        "{box_del}"
      ]
    },
    "296": {
      "op": "pop",
      "stack_out": [
        "box_0#0"
      ]
    },
    "297": {
      "op": "dup",
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ]
    },
    "298": {
      "op": "pushbytes \"Hmmmmm\"",
      "defined_out": [
        "\"Hmmmmm\"",
        "box_0#0",
        "box_0#0 (copy)"
      ],
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)",
        "\"Hmmmmm\""
      ]
    },
    "306": {
      "op": "box_put",
      "stack_out": [
        "box_0#0"
      ]
    },
    "307": {
      "op": "dup",
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ]
    },
    "308": {
      "op": "box_len",
      "defined_out": [
        "box_0#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "box_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "309": {
      "op": "pop",
      "stack_out": [
        "box_0#0",
        "value%0#0"
      ]
    },
    "310": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "box_0#0",
        "value%0#0"
      ],
      "stack_out": [
        "box_0#0",
        "value%0#0",
        "6"
      ]
    },
    "312": {
      "op": "==",
      "defined_out": [
        "box_0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "box_0#0",
        "tmp%1#1"
      ]
    },
    "313": {
      "op": "assert",
      "stack_out": [
        "box_0#0"
      ]
    },
    "314": {
      "op": "dup",
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ]
    },
    "315": {
      "op": "box_len",
      "defined_out": [
        "box_0#0",
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "box_0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "316": {
      "op": "pop",
      "stack_out": [
        "box_0#0",
        "value%1#0"
      ]
    },
    "317": {
      "op": "swap",
      "stack_out": [
        "value%1#0",
        "box_0#0"
      ]
    },
    "318": {
      "op": "dup",
      "stack_out": [
        "value%1#0",
        "box_0#0",
        "box_0#0 (copy)"
      ]
    },
    "319": {
      "op": "box_len",
      "defined_out": [
        "box_0#0",
        "check%2#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%1#0",
        "box_0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "320": {
      "op": "pop",
      "stack_out": [
        "value%1#0",
        "box_0#0",
        "value%2#0"
      ]
    },
    "321": {
      "op": "uncover 2",
      "stack_out": [
        "box_0#0",
        "value%2#0",
        "value%1#0"
      ]
    },
    "323": {
      "op": "==",
      "defined_out": [
        "box_0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "box_0#0",
        "tmp%2#1"
      ]
    },
    "324": {
      "op": "assert",
      "stack_out": [
        "box_0#0"
      ]
    },
    "325": {
      "op": "box_len",
      "defined_out": [
        "check%3#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "check%3#0"
      ]
    },
    "326": {
      "op": "pop",
      "stack_out": [
        "value%3#0"
      ]
    },
    "327": {
      "op": "pushint 6 // 6",
      "stack_out": [
        "value%3#0",
        "6"
      ]
    },
    "329": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "330": {
      "op": "assert",
      "stack_out": []
    },
    "331": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "332": {
      "op": "itob",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "333": {
      "op": "dup",
      "defined_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "334": {
      "op": "box_get",
      "defined_out": [
        "encoded_value%5#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "335": {
      "op": "bytec 10 // \"default\"",
      "defined_out": [
        "\"default\"",
        "encoded_value%5#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "\"default\""
      ]
    },
    "337": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%5#0",
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "339": {
      "op": "select",
      "defined_out": [
        "encoded_value%5#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "state_get%0#0"
      ]
    },
    "340": {
      "op": "bytec 10 // \"default\"",
      "stack_out": [
        "encoded_value%5#0",
        "state_get%0#0",
        "\"default\""
      ]
    },
    "342": {
      "op": "==",
      "defined_out": [
        "encoded_value%5#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "tmp%5#1"
      ]
    },
    "343": {
      "op": "assert",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "344": {
      "op": "dup",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "345": {
      "op": "box_len",
      "defined_out": [
        "encoded_value%5#0",
        "exists#0",
        "value#2"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "value#2",
        "exists#0"
      ]
    },
    "346": {
      "op": "bury 1",
      "stack_out": [
        "encoded_value%5#0",
        "exists#0"
      ]
    },
    "348": {
      "op": "!",
      "defined_out": [
        "encoded_value%5#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "tmp%6#1"
      ]
    },
    "349": {
      "op": "assert",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "350": {
      "op": "dup",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "351": {
      "op": "box_del",
      "stack_out": [
        "encoded_value%5#0",
        "{box_del}"
      ]
    },
    "352": {
      "op": "pop",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "353": {
      "op": "dup",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "354": {
      "op": "bytec 8 // \"hello\"",
      "defined_out": [
        "\"hello\"",
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)",
        "\"hello\""
      ]
    },
    "356": {
      "op": "box_put",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "357": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "358": {
      "op": "pop",
      "stack_out": []
    },
    "359": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "360": {
      "op": "return",
      "stack_out": []
    },
    "361": {
      "block": "main_test_box_ref_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "363": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "364": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "365": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "367": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "368": {
      "op": "bytec_1 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "369": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "370": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "372": {
      "op": "!",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "373": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "374": {
      "op": "bytec_1 // 0x626c6f62",
      "defined_out": [
        "0x626c6f62"
      ],
      "stack_out": [
        "0x626c6f62"
      ]
    },
    "375": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "maybe_exists%1#1"
      ],
      "stack_out": [
        "_%1#0",
        "maybe_exists%1#1"
      ]
    },
    "376": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#1"
      ]
    },
    "378": {
      "op": "!",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "379": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "380": {
      "op": "bytec_1 // 0x626c6f62",
      "stack_out": [
        "0x626c6f62"
      ]
    },
    "381": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "maybe_exists%2#1"
      ],
      "stack_out": [
        "_%2#0",
        "maybe_exists%2#1"
      ]
    },
    "382": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#1"
      ]
    },
    "384": {
      "op": "!",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "385": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "386": {
      "op": "bytec_1 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "387": {
      "op": "box_len",
      "defined_out": [
        "_%3#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "_%3#0",
        "maybe_exists%3#0"
      ]
    },
    "388": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%3#0"
      ]
    },
    "390": {
      "op": "!",
      "defined_out": [
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%3#2"
      ]
    },
    "391": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "392": {
      "op": "bytec_1 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "393": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "395": {
      "op": "box_create",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "396": {
      "op": "assert",
      "stack_out": []
    },
    "397": {
      "op": "txn Sender",
      "defined_out": [
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0"
      ]
    },
    "399": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "401": {
      "op": "bytec_1 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "402": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "403": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0",
        "sender_bytes#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "sender_bytes#0 (copy)"
      ]
    },
    "405": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "406": {
      "op": "bytec_1 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "407": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"blob\"",
        "8000",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "8000"
      ]
    },
    "410": {
      "op": "box_resize",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "411": {
      "op": "bytec_1 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "412": {
      "op": "intc_1 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "413": {
      "op": "dup",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0"
      ]
    },
    "414": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "app_address#0 (copy)",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0",
        "app_address#0 (copy)"
      ]
    },
    "416": {
      "op": "box_splice",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "417": {
      "op": "bytec_1 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "418": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "\"blob\"",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64"
      ]
    },
    "420": {
      "op": "bytec 8 // 0x68656c6c6f",
      "defined_out": [
        "\"blob\"",
        "0x68656c6c6f",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64",
        "0x68656c6c6f"
      ]
    },
    "422": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "423": {
      "op": "bytec_1 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "424": {
      "op": "intc_1 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "425": {
      "op": "pushint 69 // 69",
      "defined_out": [
        "\"blob\"",
        "0",
        "69",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "69"
      ]
    },
    "427": {
      "op": "box_extract",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0"
      ]
    },
    "428": {
      "op": "dig 1",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "app_address#0 (copy)"
      ]
    },
    "430": {
      "op": "dig 3",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "app_address#0 (copy)",
        "sender_bytes#0 (copy)"
      ]
    },
    "432": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%10#1"
      ]
    },
    "433": {
      "op": "bytec 8 // 0x68656c6c6f",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%10#1",
        "0x68656c6c6f"
      ]
    },
    "435": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%11#1"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%11#1"
      ]
    },
    "436": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%12#1"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%12#1"
      ]
    },
    "437": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "438": {
      "op": "bytec_1 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "439": {
      "op": "box_del",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%13#0"
      ]
    },
    "440": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "441": {
      "op": "bytec_1 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "442": {
      "op": "box_get",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#3"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#3",
        "exists#0"
      ]
    },
    "443": {
      "op": "dup",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "exists#0 (copy)",
        "sender_bytes#0",
        "value#3"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#3",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "444": {
      "op": "!",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "tmp%15#1",
        "value#3"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#3",
        "exists#0",
        "tmp%15#1"
      ]
    },
    "445": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#3",
        "exists#0"
      ]
    },
    "446": {
      "op": "dig 1",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#3",
        "value#3 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#3",
        "exists#0",
        "value#3 (copy)"
      ]
    },
    "448": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#3",
        "value#3 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#3",
        "exists#0",
        "value#3 (copy)",
        "0x"
      ]
    },
    "450": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "tmp%16#1",
        "value#3"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#3",
        "exists#0",
        "tmp%16#1"
      ]
    },
    "451": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#3",
        "exists#0"
      ]
    },
    "452": {
      "op": "dig 3",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#3",
        "exists#0",
        "sender_bytes#0 (copy)"
      ]
    },
    "454": {
      "op": "cover 2",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "sender_bytes#0 (copy)",
        "value#3",
        "exists#0"
      ]
    },
    "456": {
      "op": "select",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "state_get%0#0"
      ]
    },
    "457": {
      "op": "dig 2",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "state_get%0#0",
        "sender_bytes#0 (copy)"
      ]
    },
    "459": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%17#0"
      ]
    },
    "460": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "461": {
      "op": "concat",
      "defined_out": [
        "tmp%18#1"
      ],
      "stack_out": [
        "tmp%18#1"
      ]
    },
    "462": {
      "op": "bytec_1 // \"blob\"",
      "stack_out": [
        "tmp%18#1",
        "\"blob\""
      ]
    },
    "463": {
      "op": "swap",
      "stack_out": [
        "\"blob\"",
        "tmp%18#1"
      ]
    },
    "464": {
      "op": "box_put",
      "stack_out": []
    },
    "465": {
      "op": "bytec_1 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "466": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "467": {
      "op": "pop",
      "stack_out": [
        "value%0#0"
      ]
    },
    "468": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "value%0#0",
        "64"
      ]
    },
    "470": {
      "op": "==",
      "defined_out": [
        "tmp%19#1"
      ],
      "stack_out": [
        "tmp%19#1"
      ]
    },
    "471": {
      "op": "assert",
      "stack_out": []
    },
    "472": {
      "op": "bytec_1 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "473": {
      "op": "box_len",
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "474": {
      "op": "pop",
      "stack_out": [
        "value%0#0"
      ]
    },
    "475": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "value%0#0",
        "64"
      ]
    },
    "477": {
      "op": "==",
      "defined_out": [
        "tmp%21#1"
      ],
      "stack_out": [
        "tmp%21#1"
      ]
    },
    "478": {
      "op": "assert",
      "stack_out": []
    },
    "479": {
      "op": "bytec 11 // \"box_ref\"",
      "defined_out": [
        "\"box_ref\""
      ],
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "481": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "\"box_ref\"",
        "32"
      ]
    },
    "483": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "484": {
      "op": "pop",
      "stack_out": []
    },
    "485": {
      "op": "bytec 11 // \"box_ref\"",
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "487": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "488": {
      "op": "pop",
      "stack_out": []
    },
    "489": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "490": {
      "op": "return",
      "stack_out": []
    },
    "491": {
      "block": "main_arc4_box_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "493": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "494": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "495": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "497": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "498": {
      "op": "pushbytess 0x64 0x00010203 // 0x64, 0x00010203",
      "defined_out": [
        "0x00010203",
        "0x64"
      ],
      "stack_out": [
        "0x64",
        "0x00010203"
      ]
    },
    "507": {
      "op": "box_put",
      "stack_out": []
    },
    "508": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "509": {
      "op": "return",
      "stack_out": []
    },
    "510": {
      "block": "main_slice_box_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "512": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "513": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "514": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "516": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "517": {
      "op": "bytec 7 // \"0\"",
      "defined_out": [
        "\"0\""
      ],
      "stack_out": [
        "\"0\""
      ]
    },
    "519": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "520": {
      "op": "pop",
      "stack_out": []
    },
    "521": {
      "op": "bytec 7 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "523": {
      "op": "pushbytes 0x54657374696e672074657374696e6720313233",
      "defined_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ],
      "stack_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ]
    },
    "544": {
      "op": "box_put",
      "stack_out": []
    },
    "545": {
      "op": "bytec 7 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "547": {
      "op": "box_len",
      "defined_out": [
        "tmp%0#2",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%1#1"
      ]
    },
    "548": {
      "op": "pop",
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "549": {
      "op": "dup",
      "defined_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "550": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "0"
      ]
    },
    "551": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "0",
        "tmp%0#2 (copy)"
      ]
    },
    "553": {
      "op": "select",
      "defined_out": [
        "tmp%0#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%3#0"
      ]
    },
    "554": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "tmp%0#2",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%3#0",
        "7"
      ]
    },
    "556": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#2",
        "tmp%3#0",
        "7",
        "tmp%0#2 (copy)"
      ]
    },
    "558": {
      "op": "<",
      "defined_out": [
        "tmp%0#2",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#2",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "559": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#2"
      ]
    },
    "561": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#2",
        "7"
      ]
    },
    "563": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#2",
        "7",
        "tmp%4#0"
      ]
    },
    "565": {
      "op": "select",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "566": {
      "op": "dig 1",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%3#0 (copy)"
      ]
    },
    "568": {
      "op": "-",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#3"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#3"
      ]
    },
    "569": {
      "op": "bytec 7 // \"0\"",
      "stack_out": [
        "tmp%3#0",
        "tmp%6#3",
        "\"0\""
      ]
    },
    "571": {
      "op": "cover 2",
      "stack_out": [
        "\"0\"",
        "tmp%3#0",
        "tmp%6#3"
      ]
    },
    "573": {
      "op": "box_extract",
      "defined_out": [
        "tmp%7#3"
      ],
      "stack_out": [
        "tmp%7#3"
      ]
    },
    "574": {
      "op": "pushbytes 0x54657374696e67",
      "defined_out": [
        "0x54657374696e67",
        "tmp%7#3"
      ],
      "stack_out": [
        "tmp%7#3",
        "0x54657374696e67"
      ]
    },
    "583": {
      "op": "==",
      "defined_out": [
        "tmp%8#3"
      ],
      "stack_out": [
        "tmp%8#3"
      ]
    },
    "584": {
      "op": "assert",
      "stack_out": []
    },
    "585": {
      "op": "bytec_0 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "586": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "587": {
      "op": "pop",
      "stack_out": []
    },
    "588": {
      "op": "bytec_0 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "589": {
      "op": "pushbytes 0x000548656c6c6f",
      "defined_out": [
        "0x000548656c6c6f",
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43",
        "0x000548656c6c6f"
      ]
    },
    "598": {
      "op": "box_put",
      "stack_out": []
    },
    "599": {
      "op": "bytec_0 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "600": {
      "op": "box_len",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#2"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#2"
      ]
    },
    "601": {
      "op": "pop",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "602": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "2"
      ]
    },
    "603": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "2",
        "tmp%10#0 (copy)"
      ]
    },
    "605": {
      "op": "<",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#1"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%12#1"
      ]
    },
    "606": {
      "op": "dig 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%12#1",
        "tmp%10#0 (copy)"
      ]
    },
    "608": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%12#1",
        "tmp%10#0 (copy)",
        "2"
      ]
    },
    "609": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "2",
        "tmp%12#1"
      ]
    },
    "611": {
      "op": "select",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#2"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#2"
      ]
    },
    "612": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "tmp%10#0",
        "tmp%13#2"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#2",
        "10"
      ]
    },
    "614": {
      "op": "dig 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%13#2",
        "10",
        "tmp%10#0 (copy)"
      ]
    },
    "616": {
      "op": "<",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#2",
        "tmp%14#2"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#2",
        "tmp%14#2"
      ]
    },
    "617": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%13#2",
        "tmp%14#2",
        "tmp%10#0"
      ]
    },
    "619": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%13#2",
        "tmp%14#2",
        "tmp%10#0",
        "10"
      ]
    },
    "621": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%13#2",
        "tmp%10#0",
        "10",
        "tmp%14#2"
      ]
    },
    "623": {
      "op": "select",
      "defined_out": [
        "tmp%13#2",
        "tmp%15#2"
      ],
      "stack_out": [
        "tmp%13#2",
        "tmp%15#2"
      ]
    },
    "624": {
      "op": "dig 1",
      "defined_out": [
        "tmp%13#2",
        "tmp%13#2 (copy)",
        "tmp%15#2"
      ],
      "stack_out": [
        "tmp%13#2",
        "tmp%15#2",
        "tmp%13#2 (copy)"
      ]
    },
    "626": {
      "op": "-",
      "defined_out": [
        "tmp%13#2",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#2",
        "tmp%16#0"
      ]
    },
    "627": {
      "op": "bytec_0 // 0x424f585f43",
      "stack_out": [
        "tmp%13#2",
        "tmp%16#0",
        "0x424f585f43"
      ]
    },
    "628": {
      "op": "cover 2",
      "stack_out": [
        "0x424f585f43",
        "tmp%13#2",
        "tmp%16#0"
      ]
    },
    "630": {
      "op": "box_extract",
      "defined_out": [
        "tmp%17#2"
      ],
      "stack_out": [
        "tmp%17#2"
      ]
    },
    "631": {
      "op": "pushbytes 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "tmp%17#2"
      ],
      "stack_out": [
        "tmp%17#2",
        "0x48656c6c6f"
      ]
    },
    "638": {
      "op": "==",
      "defined_out": [
        "tmp%18#2"
      ],
      "stack_out": [
        "tmp%18#2"
      ]
    },
    "639": {
      "op": "assert",
      "stack_out": []
    },
    "640": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "641": {
      "op": "return",
      "stack_out": []
    },
    "642": {
      "block": "main_boxes_exist_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "644": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "645": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "646": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "648": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "649": {
      "op": "bytec_3 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "650": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "651": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "653": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\"",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "\"b\""
      ]
    },
    "655": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "maybe_exists%0#0",
        "maybe_exists%1#1"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "_%1#0",
        "maybe_exists%1#1"
      ]
    },
    "656": {
      "op": "cover 2",
      "stack_out": [
        "maybe_exists%1#1",
        "maybe_exists%0#0",
        "_%1#0"
      ]
    },
    "658": {
      "op": "pop",
      "stack_out": [
        "maybe_exists%1#1",
        "maybe_exists%0#0"
      ]
    },
    "659": {
      "op": "bytec_0 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "maybe_exists%0#0",
        "maybe_exists%1#1"
      ],
      "stack_out": [
        "maybe_exists%1#1",
        "maybe_exists%0#0",
        "0x424f585f43"
      ]
    },
    "660": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "maybe_exists%0#0",
        "maybe_exists%1#1",
        "maybe_exists%2#1"
      ],
      "stack_out": [
        "maybe_exists%1#1",
        "maybe_exists%0#0",
        "_%2#0",
        "maybe_exists%2#1"
      ]
    },
    "661": {
      "op": "cover 3",
      "stack_out": [
        "maybe_exists%2#1",
        "maybe_exists%1#1",
        "maybe_exists%0#0",
        "_%2#0"
      ]
    },
    "663": {
      "op": "pop",
      "stack_out": [
        "maybe_exists%2#1",
        "maybe_exists%1#1",
        "maybe_exists%0#0"
      ]
    },
    "664": {
      "op": "bytec 5 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "maybe_exists%0#0",
        "maybe_exists%1#1",
        "maybe_exists%2#1"
      ],
      "stack_out": [
        "maybe_exists%2#1",
        "maybe_exists%1#1",
        "maybe_exists%0#0",
        "\"box_large\""
      ]
    },
    "666": {
      "op": "box_len",
      "defined_out": [
        "_%3#0",
        "maybe_exists%0#0",
        "maybe_exists%1#1",
        "maybe_exists%2#1",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%2#1",
        "maybe_exists%1#1",
        "maybe_exists%0#0",
        "_%3#0",
        "maybe_exists%3#0"
      ]
    },
    "667": {
      "op": "cover 4",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#1",
        "maybe_exists%1#1",
        "maybe_exists%0#0",
        "_%3#0"
      ]
    },
    "669": {
      "op": "pop",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#1",
        "maybe_exists%1#1",
        "maybe_exists%0#0"
      ]
    },
    "670": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0",
        "maybe_exists%1#1",
        "maybe_exists%2#1",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#1",
        "maybe_exists%1#1",
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "673": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0",
        "maybe_exists%1#1",
        "maybe_exists%2#1",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#1",
        "maybe_exists%1#1",
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "674": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#1",
        "maybe_exists%1#1",
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "676": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#1",
        "maybe_exists%1#1",
        "maybe_exists%2#1",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#1",
        "maybe_exists%1#1",
        "aggregate%encoded_bool%0#1"
      ]
    },
    "677": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%encoded_bool%0#1",
        "maybe_exists%1#1",
        "maybe_exists%2#1",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#1",
        "maybe_exists%1#1",
        "aggregate%encoded_bool%0#1",
        "1"
      ]
    },
    "678": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#1",
        "aggregate%encoded_bool%0#1",
        "1",
        "maybe_exists%1#1"
      ]
    },
    "680": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%0#1",
        "maybe_exists%2#1",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#1",
        "aggregate%set_bit%0#1"
      ]
    },
    "681": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%set_bit%0#1",
        "maybe_exists%2#1",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#1",
        "aggregate%set_bit%0#1",
        "2"
      ]
    },
    "682": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_exists%3#0",
        "aggregate%set_bit%0#1",
        "2",
        "maybe_exists%2#1"
      ]
    },
    "684": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%1#1",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "aggregate%set_bit%1#1"
      ]
    },
    "685": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "aggregate%set_bit%1#1",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "aggregate%set_bit%1#1",
        "3"
      ]
    },
    "687": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%set_bit%1#1",
        "3",
        "maybe_exists%3#0"
      ]
    },
    "689": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%2#1"
      ],
      "stack_out": [
        "aggregate%set_bit%2#1"
      ]
    },
    "690": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%set_bit%2#1"
      ],
      "stack_out": [
        "aggregate%set_bit%2#1",
        "0x151f7c75"
      ]
    },
    "692": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%set_bit%2#1"
      ]
    },
    "693": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "694": {
      "op": "log",
      "stack_out": []
    },
    "695": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "696": {
      "op": "return",
      "stack_out": []
    },
    "697": {
      "block": "main_read_boxes_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "699": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "700": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "701": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "703": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "704": {
      "op": "bytec 5 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "706": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "\"box_large\"",
        "4096"
      ],
      "stack_out": [
        "\"box_large\"",
        "4096"
      ]
    },
    "708": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "8"
      ],
      "stack_out": [
        "\"box_large\"",
        "4096",
        "8"
      ]
    },
    "710": {
      "op": "box_extract",
      "defined_out": [
        "large_e#0"
      ],
      "stack_out": [
        "large_e#0"
      ]
    },
    "711": {
      "op": "bytec_3 // \"box_a\"",
      "defined_out": [
        "\"box_a\"",
        "large_e#0"
      ],
      "stack_out": [
        "large_e#0",
        "\"box_a\""
      ]
    },
    "712": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#1",
        "aggregate%box_get%3#1",
        "large_e#0"
      ],
      "stack_out": [
        "large_e#0",
        "aggregate%box_get%2#1",
        "aggregate%box_get%3#1"
      ]
    },
    "713": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "stack_out": [
        "large_e#0",
        "aggregate%box_get%2#1"
      ]
    },
    "714": {
      "op": "btoi",
      "defined_out": [
        "large_e#0",
        "maybe_value_converted%0#1"
      ],
      "stack_out": [
        "large_e#0",
        "maybe_value_converted%0#1"
      ]
    },
    "715": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "large_e#0",
        "maybe_value_converted%0#1"
      ],
      "stack_out": [
        "large_e#0",
        "maybe_value_converted%0#1",
        "1"
      ]
    },
    "716": {
      "op": "+",
      "defined_out": [
        "large_e#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%0#2"
      ]
    },
    "717": {
      "op": "intc_0 // 1",
      "stack_out": [
        "large_e#0",
        "tmp%0#2",
        "1"
      ]
    },
    "718": {
      "op": "-",
      "defined_out": [
        "large_e#0",
        "tmp%2#5"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%2#5"
      ]
    },
    "719": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\"",
        "large_e#0",
        "tmp%2#5"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%2#5",
        "\"b\""
      ]
    },
    "721": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#1",
        "aggregate%box_get%5#1",
        "large_e#0",
        "tmp%2#5"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%2#5",
        "aggregate%box_get%4#1",
        "aggregate%box_get%5#1"
      ]
    },
    "722": {
      "error": "check self.box_b exists",
      "op": "assert // check self.box_b exists",
      "stack_out": [
        "large_e#0",
        "tmp%2#5",
        "aggregate%box_get%4#1"
      ]
    },
    "723": {
      "op": "extract 2 0",
      "defined_out": [
        "large_e#0",
        "tmp%2#5",
        "tmp%3#5"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%2#5",
        "tmp%3#5"
      ]
    },
    "726": {
      "op": "bytec_0 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "large_e#0",
        "tmp%2#5",
        "tmp%3#5"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%2#5",
        "tmp%3#5",
        "0x424f585f43"
      ]
    },
    "727": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%box_get%7#1",
        "large_e#0",
        "tmp%2#5",
        "tmp%3#5"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%2#5",
        "tmp%3#5",
        "aggregate%box_get%6#1",
        "aggregate%box_get%7#1"
      ]
    },
    "728": {
      "error": "check self.box_c exists",
      "op": "assert // check self.box_c exists",
      "stack_out": [
        "large_e#0",
        "tmp%2#5",
        "tmp%3#5",
        "aggregate%box_get%6#1"
      ]
    },
    "729": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#5",
        "tmp%3#5",
        "aggregate%box_get%6#1",
        "large_e#0"
      ]
    },
    "731": {
      "op": "btoi",
      "defined_out": [
        "aggregate%box_get%6#1",
        "tmp%2#5",
        "tmp%3#5",
        "tmp%4#4"
      ],
      "stack_out": [
        "tmp%2#5",
        "tmp%3#5",
        "aggregate%box_get%6#1",
        "tmp%4#4"
      ]
    },
    "732": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#5",
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "tmp%2#5"
      ]
    },
    "734": {
      "op": "itob",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%val_as_bytes%1#1",
        "tmp%3#5",
        "tmp%4#4"
      ],
      "stack_out": [
        "tmp%3#5",
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%val_as_bytes%1#1"
      ]
    },
    "735": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%val_as_bytes%1#1",
        "tmp%3#5",
        "tmp%3#5 (copy)",
        "tmp%4#4"
      ],
      "stack_out": [
        "tmp%3#5",
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%val_as_bytes%1#1",
        "tmp%3#5 (copy)"
      ]
    },
    "737": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%length%2#1",
        "aggregate%val_as_bytes%1#1",
        "tmp%3#5",
        "tmp%4#4"
      ],
      "stack_out": [
        "tmp%3#5",
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%val_as_bytes%1#1",
        "aggregate%length%2#1"
      ]
    },
    "738": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#1",
        "aggregate%box_get%6#1",
        "aggregate%val_as_bytes%1#1",
        "tmp%3#5",
        "tmp%4#4"
      ],
      "stack_out": [
        "tmp%3#5",
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%val_as_bytes%1#1",
        "aggregate%as_bytes%2#1"
      ]
    },
    "739": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%length_uint16%2#1",
        "aggregate%val_as_bytes%1#1",
        "tmp%3#5",
        "tmp%4#4"
      ],
      "stack_out": [
        "tmp%3#5",
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%val_as_bytes%1#1",
        "aggregate%length_uint16%2#1"
      ]
    },
    "742": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%val_as_bytes%1#1",
        "aggregate%length_uint16%2#1",
        "tmp%3#5"
      ]
    },
    "744": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%encoded_value%2#1",
        "aggregate%val_as_bytes%1#1",
        "tmp%4#4"
      ],
      "stack_out": [
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%val_as_bytes%1#1",
        "aggregate%encoded_value%2#1"
      ]
    },
    "745": {
      "op": "swap",
      "stack_out": [
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%encoded_value%2#1",
        "aggregate%val_as_bytes%1#1"
      ]
    },
    "746": {
      "op": "pushbytes 0x0014",
      "defined_out": [
        "0x0014",
        "aggregate%box_get%6#1",
        "aggregate%encoded_value%2#1",
        "aggregate%val_as_bytes%1#1",
        "tmp%4#4"
      ],
      "stack_out": [
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%encoded_value%2#1",
        "aggregate%val_as_bytes%1#1",
        "0x0014"
      ]
    },
    "750": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%encoded_value%2#1",
        "aggregate%head%1#1",
        "tmp%4#4"
      ],
      "stack_out": [
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%encoded_value%2#1",
        "aggregate%head%1#1"
      ]
    },
    "751": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%encoded_value%2#1",
        "aggregate%encoded_value%2#1 (copy)",
        "aggregate%head%1#1",
        "tmp%4#4"
      ],
      "stack_out": [
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%encoded_value%2#1",
        "aggregate%head%1#1",
        "aggregate%encoded_value%2#1 (copy)"
      ]
    },
    "753": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%data_length%0#1",
        "aggregate%encoded_value%2#1",
        "aggregate%head%1#1",
        "tmp%4#4"
      ],
      "stack_out": [
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%encoded_value%2#1",
        "aggregate%head%1#1",
        "aggregate%data_length%0#1"
      ]
    },
    "754": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "aggregate%box_get%6#1",
        "aggregate%data_length%0#1",
        "aggregate%encoded_value%2#1",
        "aggregate%head%1#1",
        "tmp%4#4"
      ],
      "stack_out": [
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%encoded_value%2#1",
        "aggregate%head%1#1",
        "aggregate%data_length%0#1",
        "20"
      ]
    },
    "756": {
      "op": "+",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%current_tail_offset%0#1",
        "aggregate%encoded_value%2#1",
        "aggregate%head%1#1",
        "tmp%4#4"
      ],
      "stack_out": [
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%encoded_value%2#1",
        "aggregate%head%1#1",
        "aggregate%current_tail_offset%0#1"
      ]
    },
    "757": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%4#1",
        "aggregate%box_get%6#1",
        "aggregate%encoded_value%2#1",
        "aggregate%head%1#1",
        "tmp%4#4"
      ],
      "stack_out": [
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%encoded_value%2#1",
        "aggregate%head%1#1",
        "aggregate%as_bytes%4#1"
      ]
    },
    "758": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%encoded_value%2#1",
        "aggregate%head%1#1",
        "aggregate%offset_as_uint16%1#1",
        "tmp%4#4"
      ],
      "stack_out": [
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%encoded_value%2#1",
        "aggregate%head%1#1",
        "aggregate%offset_as_uint16%1#1"
      ]
    },
    "761": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%encoded_value%2#1",
        "aggregate%head%2#1",
        "tmp%4#4"
      ],
      "stack_out": [
        "aggregate%box_get%6#1",
        "tmp%4#4",
        "aggregate%encoded_value%2#1",
        "aggregate%head%2#1"
      ]
    },
    "762": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%box_get%6#1",
        "aggregate%encoded_value%2#1",
        "aggregate%head%2#1",
        "tmp%4#4"
      ]
    },
    "764": {
      "op": "itob",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%encoded_value%2#1",
        "aggregate%head%2#1",
        "aggregate%val_as_bytes%2#1"
      ],
      "stack_out": [
        "aggregate%box_get%6#1",
        "aggregate%encoded_value%2#1",
        "aggregate%head%2#1",
        "aggregate%val_as_bytes%2#1"
      ]
    },
    "765": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%encoded_value%2#1",
        "aggregate%head%3#1"
      ],
      "stack_out": [
        "aggregate%box_get%6#1",
        "aggregate%encoded_value%2#1",
        "aggregate%head%3#1"
      ]
    },
    "766": {
      "op": "swap",
      "stack_out": [
        "aggregate%box_get%6#1",
        "aggregate%head%3#1",
        "aggregate%encoded_value%2#1"
      ]
    },
    "767": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%6#1",
        "aggregate%concat%0#1"
      ],
      "stack_out": [
        "aggregate%box_get%6#1",
        "aggregate%concat%0#1"
      ]
    },
    "768": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#1",
        "aggregate%box_get%6#1"
      ]
    },
    "769": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#1"
      ],
      "stack_out": [
        "aggregate%concat%1#1"
      ]
    },
    "770": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%1#1"
      ],
      "stack_out": [
        "aggregate%concat%1#1",
        "0x151f7c75"
      ]
    },
    "772": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%1#1"
      ]
    },
    "773": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "774": {
      "op": "log",
      "stack_out": []
    },
    "775": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "776": {
      "op": "return",
      "stack_out": []
    },
    "777": {
      "block": "main_delete_boxes_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "779": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "780": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "781": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "783": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "784": {
      "op": "bytec_3 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "785": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "786": {
      "op": "pop",
      "stack_out": []
    },
    "787": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "789": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "790": {
      "op": "pop",
      "stack_out": []
    },
    "791": {
      "op": "bytec_0 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "792": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "793": {
      "op": "pop",
      "stack_out": []
    },
    "794": {
      "op": "bytec_3 // \"box_a\"",
      "stack_out": [
        "\"box_a\""
      ]
    },
    "795": {
      "op": "box_get",
      "defined_out": [
        "a_exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "a_exists#0"
      ]
    },
    "796": {
      "op": "swap",
      "stack_out": [
        "a_exists#0",
        "maybe_value%0#0"
      ]
    },
    "797": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "a_exists#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "798": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "a#0",
        "a_exists#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "42"
      ]
    },
    "800": {
      "op": "dig 1",
      "defined_out": [
        "42",
        "a#0",
        "a#0 (copy)",
        "a_exists#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "42",
        "a#0 (copy)"
      ]
    },
    "802": {
      "op": "dig 3",
      "defined_out": [
        "42",
        "a#0",
        "a#0 (copy)",
        "a_exists#0",
        "a_exists#0 (copy)"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "42",
        "a#0 (copy)",
        "a_exists#0 (copy)"
      ]
    },
    "804": {
      "op": "select",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "state_get%0#2"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%0#2"
      ]
    },
    "805": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%0#2",
        "42"
      ]
    },
    "807": {
      "op": "==",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%0#1"
      ]
    },
    "808": {
      "op": "assert",
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "809": {
      "op": "bytec 4 // \"b\"",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "\"b\""
      ]
    },
    "811": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "maybe_exists%1#1",
        "maybe_value%1#2"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%1#2",
        "maybe_exists%1#1"
      ]
    },
    "812": {
      "op": "bytec 9 // 0x00023432",
      "defined_out": [
        "0x00023432",
        "a#0",
        "a_exists#0",
        "maybe_exists%1#1",
        "maybe_value%1#2"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%1#2",
        "maybe_exists%1#1",
        "0x00023432"
      ]
    },
    "814": {
      "op": "cover 2",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "0x00023432",
        "maybe_value%1#2",
        "maybe_exists%1#1"
      ]
    },
    "816": {
      "op": "select",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "state_get%1#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%1#0"
      ]
    },
    "817": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%2#0"
      ]
    },
    "820": {
      "op": "pushbytes 0x3432",
      "defined_out": [
        "0x3432",
        "a#0",
        "a_exists#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%2#0",
        "0x3432"
      ]
    },
    "824": {
      "op": "==",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%3#2"
      ]
    },
    "825": {
      "op": "assert",
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "826": {
      "op": "bytec_0 // 0x424f585f43",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "0x424f585f43"
      ]
    },
    "827": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "maybe_exists%2#1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%2#0",
        "maybe_exists%2#1"
      ]
    },
    "828": {
      "op": "bytec 9 // 0x00023432",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%2#0",
        "maybe_exists%2#1",
        "0x00023432"
      ]
    },
    "830": {
      "op": "cover 2",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "0x00023432",
        "maybe_value%2#0",
        "maybe_exists%2#1"
      ]
    },
    "832": {
      "op": "select",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "state_get%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%2#0"
      ]
    },
    "833": {
      "op": "bytec 9 // 0x00023432",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%2#0",
        "0x00023432"
      ]
    },
    "835": {
      "op": "==",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%6#1"
      ]
    },
    "836": {
      "op": "assert",
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "837": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "a_exists#0"
      ]
    },
    "838": {
      "op": "!",
      "defined_out": [
        "a#0",
        "tmp%7#4"
      ],
      "stack_out": [
        "a#0",
        "tmp%7#4"
      ]
    },
    "839": {
      "op": "assert",
      "stack_out": [
        "a#0"
      ]
    },
    "840": {
      "op": "!",
      "defined_out": [
        "tmp%8#3"
      ],
      "stack_out": [
        "tmp%8#3"
      ]
    },
    "841": {
      "op": "assert",
      "stack_out": []
    },
    "842": {
      "op": "bytec 5 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "844": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "845": {
      "op": "pop",
      "stack_out": []
    },
    "846": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "847": {
      "op": "return",
      "stack_out": []
    },
    "848": {
      "block": "main_check_keys_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "850": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "851": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "852": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "854": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "855": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "856": {
      "op": "return",
      "stack_out": []
    },
    "857": {
      "block": "main_set_boxes_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "859": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "860": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "861": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "863": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "864": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "867": {
      "op": "btoi",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "868": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "871": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "874": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "a#0"
      ]
    },
    "876": {
      "op": "itob",
      "defined_out": [
        "b#0",
        "c#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "encoded_value%0#0"
      ]
    },
    "877": {
      "op": "bytec_3 // \"box_a\"",
      "defined_out": [
        "\"box_a\"",
        "b#0",
        "c#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "encoded_value%0#0",
        "\"box_a\""
      ]
    },
    "878": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "\"box_a\"",
        "encoded_value%0#0"
      ]
    },
    "879": {
      "op": "box_put",
      "stack_out": [
        "b#0",
        "c#0"
      ]
    },
    "880": {
      "op": "bytec 4 // \"b\"",
      "defined_out": [
        "\"b\"",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "\"b\""
      ]
    },
    "882": {
      "op": "box_del",
      "defined_out": [
        "b#0",
        "c#0",
        "{box_del}"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "{box_del}"
      ]
    },
    "883": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0"
      ]
    },
    "884": {
      "op": "bytec 4 // \"b\"",
      "stack_out": [
        "b#0",
        "c#0",
        "\"b\""
      ]
    },
    "886": {
      "op": "dig 2",
      "defined_out": [
        "\"b\"",
        "b#0",
        "b#0 (copy)",
        "c#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "\"b\"",
        "b#0 (copy)"
      ]
    },
    "888": {
      "op": "box_put",
      "stack_out": [
        "b#0",
        "c#0"
      ]
    },
    "889": {
      "op": "bytec_0 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "0x424f585f43"
      ]
    },
    "890": {
      "op": "box_del",
      "stack_out": [
        "b#0",
        "c#0",
        "{box_del}"
      ]
    },
    "891": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0"
      ]
    },
    "892": {
      "op": "bytec_0 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "0x424f585f43"
      ]
    },
    "893": {
      "op": "dig 1",
      "defined_out": [
        "0x424f585f43",
        "b#0",
        "c#0",
        "c#0 (copy)"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "0x424f585f43",
        "c#0 (copy)"
      ]
    },
    "895": {
      "op": "box_put",
      "stack_out": [
        "b#0",
        "c#0"
      ]
    },
    "896": {
      "op": "dig 1",
      "stack_out": [
        "b#0",
        "c#0",
        "b#0 (copy)"
      ]
    },
    "898": {
      "op": "extract 2 0",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10"
      ]
    },
    "901": {
      "op": "bytec_2 // \"box_d\"",
      "defined_out": [
        "\"box_d\"",
        "b#0",
        "c#0",
        "tmp%0#10"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "\"box_d\""
      ]
    },
    "902": {
      "op": "box_del",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "{box_del}"
      ]
    },
    "903": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10"
      ]
    },
    "904": {
      "op": "bytec_2 // \"box_d\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "\"box_d\""
      ]
    },
    "905": {
      "op": "dig 1",
      "defined_out": [
        "\"box_d\"",
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%0#10 (copy)"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "\"box_d\"",
        "tmp%0#10 (copy)"
      ]
    },
    "907": {
      "op": "box_put",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10"
      ]
    },
    "908": {
      "op": "bytec 5 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "b#0",
        "c#0",
        "tmp%0#10"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "\"box_large\""
      ]
    },
    "910": {
      "op": "pushint 6160 // 6160",
      "defined_out": [
        "\"box_large\"",
        "6160",
        "b#0",
        "c#0",
        "tmp%0#10"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "\"box_large\"",
        "6160"
      ]
    },
    "913": {
      "op": "box_create",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "{box_create}"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "{box_create}"
      ]
    },
    "914": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10"
      ]
    },
    "915": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "b#0",
        "c#0",
        "tmp%0#10"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "42"
      ]
    },
    "917": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#1",
        "b#0",
        "c#0",
        "tmp%0#10"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "aggregate%val_as_bytes%0#1"
      ]
    },
    "918": {
      "op": "bytec 5 // \"box_large\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "aggregate%val_as_bytes%0#1",
        "\"box_large\""
      ]
    },
    "920": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "aggregate%val_as_bytes%0#1",
        "b#0",
        "c#0",
        "tmp%0#10"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "aggregate%val_as_bytes%0#1",
        "\"box_large\"",
        "4096"
      ]
    },
    "922": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "\"box_large\"",
        "4096",
        "aggregate%val_as_bytes%0#1"
      ]
    },
    "924": {
      "op": "box_replace",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10"
      ]
    },
    "925": {
      "op": "bytec 5 // \"box_large\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "\"box_large\""
      ]
    },
    "927": {
      "op": "intc 4 // 4096",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "\"box_large\"",
        "4096"
      ]
    },
    "929": {
      "op": "pushbytes 0x000000000000002a",
      "defined_out": [
        "\"box_large\"",
        "0x000000000000002a",
        "4096",
        "b#0",
        "c#0",
        "tmp%0#10"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "\"box_large\"",
        "4096",
        "0x000000000000002a"
      ]
    },
    "939": {
      "op": "box_replace",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10"
      ]
    },
    "940": {
      "op": "bytec_3 // \"box_a\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "\"box_a\""
      ]
    },
    "941": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#1",
        "aggregate%box_get%1#1",
        "b#0",
        "c#0",
        "tmp%0#10"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "aggregate%box_get%0#1",
        "aggregate%box_get%1#1"
      ]
    },
    "942": {
      "error": "check self.box_a exists",
      "op": "assert // check self.box_a exists",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "aggregate%box_get%0#1"
      ]
    },
    "943": {
      "op": "btoi",
      "defined_out": [
        "b#0",
        "c#0",
        "maybe_value_converted%0#1",
        "tmp%0#10"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "maybe_value_converted%0#1"
      ]
    },
    "944": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "b#0",
        "c#0",
        "maybe_value_converted%0#1",
        "tmp%0#10"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "maybe_value_converted%0#1",
        "3"
      ]
    },
    "946": {
      "op": "+",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%3#0"
      ]
    },
    "947": {
      "op": "itob",
      "defined_out": [
        "b#0",
        "c#0",
        "encoded_value%2#1",
        "tmp%0#10"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "encoded_value%2#1"
      ]
    },
    "948": {
      "op": "bytec_3 // \"box_a\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "encoded_value%2#1",
        "\"box_a\""
      ]
    },
    "949": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "\"box_a\"",
        "encoded_value%2#1"
      ]
    },
    "950": {
      "op": "box_put",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10"
      ]
    },
    "951": {
      "op": "bytec_3 // \"box_a\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "\"box_a\""
      ]
    },
    "952": {
      "op": "box_len",
      "defined_out": [
        "b#0",
        "c#0",
        "check%0#0",
        "tmp%0#10",
        "value%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "value%0#0",
        "check%0#0"
      ]
    },
    "953": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "value%0#0"
      ]
    },
    "954": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "b#0",
        "c#0",
        "tmp%0#10",
        "value%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "value%0#0",
        "8"
      ]
    },
    "956": {
      "op": "==",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%4#0"
      ]
    },
    "957": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10"
      ]
    },
    "958": {
      "op": "bytec 4 // \"b\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "\"b\""
      ]
    },
    "960": {
      "op": "box_len",
      "defined_out": [
        "b#0",
        "c#0",
        "check%1#0",
        "tmp%0#10",
        "value%1#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "value%1#0",
        "check%1#0"
      ]
    },
    "961": {
      "error": "check self.box_b exists",
      "op": "assert // check self.box_b exists",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "value%1#0"
      ]
    },
    "962": {
      "op": "dig 3",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "value%1#0",
        "b#0 (copy)"
      ]
    },
    "964": {
      "op": "len",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "value%1#0",
        "tmp%5#0"
      ]
    },
    "965": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%6#1"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%6#1"
      ]
    },
    "966": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10"
      ]
    },
    "967": {
      "op": "bytec_0 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "0x424f585f43"
      ]
    },
    "968": {
      "op": "box_len",
      "defined_out": [
        "b#0",
        "c#0",
        "check%2#0",
        "tmp%0#10",
        "value%2#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "value%2#0",
        "check%2#0"
      ]
    },
    "969": {
      "error": "check self.box_c exists",
      "op": "assert // check self.box_c exists",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "value%2#0"
      ]
    },
    "970": {
      "op": "dig 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "value%2#0",
        "c#0 (copy)"
      ]
    },
    "972": {
      "op": "len",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "value%2#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "value%2#0",
        "tmp%7#5"
      ]
    },
    "973": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "value%2#0"
      ]
    },
    "974": {
      "op": "dig 1",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%7#5 (copy)",
        "value%2#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "value%2#0",
        "tmp%7#5 (copy)"
      ]
    },
    "976": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%8#3"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%8#3"
      ]
    },
    "977": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5"
      ]
    },
    "978": {
      "op": "bytec_2 // \"box_d\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "\"box_d\""
      ]
    },
    "979": {
      "op": "box_len",
      "defined_out": [
        "b#0",
        "c#0",
        "check%3#0",
        "tmp%0#10",
        "tmp%7#5",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "value%3#0",
        "check%3#0"
      ]
    },
    "980": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "value%3#0"
      ]
    },
    "981": {
      "op": "dig 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "value%3#0",
        "tmp%0#10 (copy)"
      ]
    },
    "983": {
      "op": "len",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%7#5",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "value%3#0",
        "tmp%10#0"
      ]
    },
    "984": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "value%3#0"
      ]
    },
    "985": {
      "op": "dig 1",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "tmp%7#5",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "value%3#0",
        "tmp%10#0 (copy)"
      ]
    },
    "987": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%11#2",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%11#2"
      ]
    },
    "988": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0"
      ]
    },
    "989": {
      "op": "bytec_0 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "0x424f585f43"
      ]
    },
    "990": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x424f585f43",
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "0x424f585f43",
        "0"
      ]
    },
    "991": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0",
        "0x424f585f43",
        "1",
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "0x424f585f43",
        "0",
        "1"
      ]
    },
    "992": {
      "op": "box_extract",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%12#3",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%12#3"
      ]
    },
    "993": {
      "op": "dig 4",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%12#3",
        "c#0 (copy)"
      ]
    },
    "995": {
      "op": "extract 0 1",
      "defined_out": [
        "b#0",
        "c#0",
        "extract%0#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%12#3",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%12#3",
        "extract%0#0"
      ]
    },
    "998": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%13#0",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%13#0"
      ]
    },
    "999": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0"
      ]
    },
    "1000": {
      "op": "bytec_0 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "0x424f585f43"
      ]
    },
    "1001": {
      "op": "box_len",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%14#0",
        "tmp%15#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%14#0",
        "tmp%15#1"
      ]
    },
    "1002": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%14#0"
      ]
    },
    "1003": {
      "op": "intc_0 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%14#0",
        "1"
      ]
    },
    "1004": {
      "op": "-",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%16#0",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%16#0"
      ]
    },
    "1005": {
      "op": "bytec_0 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%16#0",
        "0x424f585f43"
      ]
    },
    "1006": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "0x424f585f43",
        "tmp%16#0"
      ]
    },
    "1007": {
      "op": "intc_0 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "0x424f585f43",
        "tmp%16#0",
        "1"
      ]
    },
    "1008": {
      "op": "box_extract",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%17#2",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%17#2"
      ]
    },
    "1009": {
      "op": "dig 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%17#2",
        "tmp%7#5 (copy)"
      ]
    },
    "1011": {
      "op": "intc_0 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%17#2",
        "tmp%7#5 (copy)",
        "1"
      ]
    },
    "1012": {
      "op": "-",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%17#2",
        "tmp%19#2",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%17#2",
        "tmp%19#2"
      ]
    },
    "1013": {
      "op": "dig 5",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%17#2",
        "tmp%19#2",
        "c#0 (copy)"
      ]
    },
    "1015": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%17#2",
        "c#0 (copy)",
        "tmp%19#2"
      ]
    },
    "1016": {
      "op": "intc_0 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%17#2",
        "c#0 (copy)",
        "tmp%19#2",
        "1"
      ]
    },
    "1017": {
      "op": "extract3",
      "defined_out": [
        "b#0",
        "c#0",
        "extract%1#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%17#2",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%17#2",
        "extract%1#0"
      ]
    },
    "1018": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%20#2",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%20#2"
      ]
    },
    "1019": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0"
      ]
    },
    "1020": {
      "op": "bytec_0 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "0x424f585f43"
      ]
    },
    "1021": {
      "op": "box_len",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%21#2",
        "tmp%22#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%21#2",
        "tmp%22#1"
      ]
    },
    "1022": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%21#2"
      ]
    },
    "1023": {
      "op": "intc_0 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%21#2",
        "1"
      ]
    },
    "1024": {
      "op": "dig 1",
      "defined_out": [
        "1",
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%21#2",
        "tmp%21#2 (copy)",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%21#2",
        "1",
        "tmp%21#2 (copy)"
      ]
    },
    "1026": {
      "op": "<",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%21#2",
        "tmp%23#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%21#2",
        "tmp%23#1"
      ]
    },
    "1027": {
      "op": "dig 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%21#2",
        "tmp%23#1",
        "tmp%21#2 (copy)"
      ]
    },
    "1029": {
      "op": "intc_0 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%21#2",
        "tmp%23#1",
        "tmp%21#2 (copy)",
        "1"
      ]
    },
    "1030": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%21#2",
        "tmp%21#2 (copy)",
        "1",
        "tmp%23#1"
      ]
    },
    "1032": {
      "op": "select",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%21#2",
        "tmp%24#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%21#2",
        "tmp%24#1"
      ]
    },
    "1033": {
      "op": "-",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%25#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%25#1"
      ]
    },
    "1034": {
      "op": "bytec_0 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%25#1",
        "0x424f585f43"
      ]
    },
    "1035": {
      "op": "intc_1 // 0",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%25#1",
        "0x424f585f43",
        "0"
      ]
    },
    "1036": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "0x424f585f43",
        "0",
        "tmp%25#1"
      ]
    },
    "1038": {
      "op": "box_extract",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%27#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1"
      ]
    },
    "1039": {
      "op": "intc_0 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "1"
      ]
    },
    "1040": {
      "op": "dig 3",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "1",
        "tmp%7#5 (copy)"
      ]
    },
    "1042": {
      "op": ">=",
      "defined_out": [
        "b#0",
        "c#0",
        "is_out_of_bounds%0#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%27#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "is_out_of_bounds%0#0"
      ]
    },
    "1043": {
      "op": "intc_0 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "is_out_of_bounds%0#0",
        "1"
      ]
    },
    "1044": {
      "op": "dig 4",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "is_out_of_bounds%0#0",
        "1",
        "tmp%7#5 (copy)"
      ]
    },
    "1046": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "1",
        "tmp%7#5 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "1048": {
      "op": "select",
      "defined_out": [
        "b#0",
        "bounded_offset%0#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%27#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "bounded_offset%0#0"
      ]
    },
    "1049": {
      "op": "dig 3",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "bounded_offset%0#0",
        "tmp%7#5 (copy)"
      ]
    },
    "1051": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "tmp%7#5 (copy)",
        "bounded_offset%0#0"
      ]
    },
    "1052": {
      "op": "-",
      "defined_out": [
        "b#0",
        "bounded_index%0#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%27#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "bounded_index%0#0"
      ]
    },
    "1053": {
      "op": "dig 5",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "bounded_index%0#0",
        "c#0 (copy)"
      ]
    },
    "1055": {
      "op": "intc_1 // 0",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "bounded_index%0#0",
        "c#0 (copy)",
        "0"
      ]
    },
    "1056": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "c#0 (copy)",
        "0",
        "bounded_index%0#0"
      ]
    },
    "1058": {
      "op": "substring3",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%27#1",
        "tmp%28#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%27#1",
        "tmp%28#1"
      ]
    },
    "1059": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%29#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%29#1"
      ]
    },
    "1060": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0"
      ]
    },
    "1061": {
      "op": "bytec_0 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "0x424f585f43"
      ]
    },
    "1062": {
      "op": "box_len",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%30#1",
        "tmp%31#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%30#1",
        "tmp%31#1"
      ]
    },
    "1063": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%30#1"
      ]
    },
    "1064": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%30#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%30#1",
        "2"
      ]
    },
    "1065": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%30#1",
        "tmp%30#1 (copy)",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%30#1",
        "2",
        "tmp%30#1 (copy)"
      ]
    },
    "1067": {
      "op": "<",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%30#1",
        "tmp%32#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%30#1",
        "tmp%32#1"
      ]
    },
    "1068": {
      "op": "intc_2 // 2"
    },
    "1069": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%30#1",
        "2",
        "tmp%32#1"
      ]
    },
    "1070": {
      "op": "select",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%33#1",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%33#1"
      ]
    },
    "1071": {
      "op": "bytec_0 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%33#1",
        "0x424f585f43"
      ]
    },
    "1072": {
      "op": "intc_1 // 0",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%33#1",
        "0x424f585f43",
        "0"
      ]
    },
    "1073": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "0x424f585f43",
        "0",
        "tmp%33#1"
      ]
    },
    "1075": {
      "op": "box_extract",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%35#0",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%35#0"
      ]
    },
    "1076": {
      "op": "intc_2 // 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%35#0",
        "2"
      ]
    },
    "1077": {
      "op": "dig 3",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%35#0",
        "2",
        "tmp%7#5 (copy)"
      ]
    },
    "1079": {
      "op": ">=",
      "defined_out": [
        "b#0",
        "c#0",
        "is_out_of_bounds%1#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%35#0",
        "tmp%7#5"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%35#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "1080": {
      "op": "intc_2 // 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%7#5",
        "tmp%10#0",
        "tmp%35#0",
        "is_out_of_bounds%1#0",
        "2"
      ]
    },
    "1081": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%35#0",
        "is_out_of_bounds%1#0",
        "2",
        "tmp%7#5"
      ]
    },
    "1083": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%35#0",
        "2",
        "tmp%7#5",
        "is_out_of_bounds%1#0"
      ]
    },
    "1085": {
      "op": "select",
      "defined_out": [
        "b#0",
        "bounded_index%1#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%35#0",
        "bounded_index%1#0"
      ]
    },
    "1086": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%35#0",
        "bounded_index%1#0",
        "c#0"
      ]
    },
    "1088": {
      "op": "intc_1 // 0",
      "stack_out": [
        "b#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%35#0",
        "bounded_index%1#0",
        "c#0",
        "0"
      ]
    },
    "1089": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%35#0",
        "c#0",
        "0",
        "bounded_index%1#0"
      ]
    },
    "1091": {
      "op": "substring3",
      "defined_out": [
        "b#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%35#0",
        "tmp%36#1"
      ],
      "stack_out": [
        "b#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%35#0",
        "tmp%36#1"
      ]
    },
    "1092": {
      "op": "==",
      "defined_out": [
        "b#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "b#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%37#0"
      ]
    },
    "1093": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "tmp%0#10",
        "tmp%10#0"
      ]
    },
    "1094": {
      "op": "bytec_2 // \"box_d\"",
      "stack_out": [
        "b#0",
        "tmp%0#10",
        "tmp%10#0",
        "\"box_d\""
      ]
    },
    "1095": {
      "op": "intc_1 // 0",
      "stack_out": [
        "b#0",
        "tmp%0#10",
        "tmp%10#0",
        "\"box_d\"",
        "0"
      ]
    },
    "1096": {
      "op": "intc_0 // 1",
      "stack_out": [
        "b#0",
        "tmp%0#10",
        "tmp%10#0",
        "\"box_d\"",
        "0",
        "1"
      ]
    },
    "1097": {
      "op": "box_extract",
      "defined_out": [
        "b#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%38#1"
      ],
      "stack_out": [
        "b#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%38#1"
      ]
    },
    "1098": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%38#1",
        "b#0"
      ]
    },
    "1100": {
      "op": "extract 2 1",
      "defined_out": [
        "extract%2#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%38#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%38#1",
        "extract%2#0"
      ]
    },
    "1103": {
      "op": "==",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%40#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%40#1"
      ]
    },
    "1104": {
      "op": "assert",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0"
      ]
    },
    "1105": {
      "op": "bytec_2 // \"box_d\"",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "\"box_d\""
      ]
    },
    "1106": {
      "op": "box_len",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%41#1",
        "tmp%42#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%41#1",
        "tmp%42#1"
      ]
    },
    "1107": {
      "op": "pop",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%41#1"
      ]
    },
    "1108": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%41#1",
        "1"
      ]
    },
    "1109": {
      "op": "-",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%43#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%43#1"
      ]
    },
    "1110": {
      "op": "bytec_2 // \"box_d\"",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%43#1",
        "\"box_d\""
      ]
    },
    "1111": {
      "op": "swap",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "\"box_d\"",
        "tmp%43#1"
      ]
    },
    "1112": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "\"box_d\"",
        "tmp%43#1",
        "1"
      ]
    },
    "1113": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%44#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%44#1"
      ]
    },
    "1114": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%44#1",
        "tmp%10#0 (copy)"
      ]
    },
    "1116": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%44#1",
        "tmp%10#0 (copy)",
        "1"
      ]
    },
    "1117": {
      "op": "-",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%44#1",
        "tmp%47#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%44#1",
        "tmp%47#1"
      ]
    },
    "1118": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%44#1",
        "tmp%47#1",
        "tmp%0#10 (copy)"
      ]
    },
    "1120": {
      "op": "swap",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%44#1",
        "tmp%0#10 (copy)",
        "tmp%47#1"
      ]
    },
    "1121": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%44#1",
        "tmp%0#10 (copy)",
        "tmp%47#1",
        "1"
      ]
    },
    "1122": {
      "op": "extract3",
      "defined_out": [
        "extract%3#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%44#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%44#1",
        "extract%3#0"
      ]
    },
    "1123": {
      "op": "==",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%48#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%48#1"
      ]
    },
    "1124": {
      "op": "assert",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0"
      ]
    },
    "1125": {
      "op": "bytec_2 // \"box_d\"",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "\"box_d\""
      ]
    },
    "1126": {
      "op": "box_len",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%49#1",
        "tmp%50#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%49#1",
        "tmp%50#1"
      ]
    },
    "1127": {
      "op": "pop",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%49#1"
      ]
    },
    "1128": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%49#1",
        "1"
      ]
    },
    "1129": {
      "op": "dig 1",
      "defined_out": [
        "1",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%49#1",
        "tmp%49#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%49#1",
        "1",
        "tmp%49#1 (copy)"
      ]
    },
    "1131": {
      "op": "<",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%49#1",
        "tmp%51#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%49#1",
        "tmp%51#1"
      ]
    },
    "1132": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%49#1",
        "tmp%51#1",
        "tmp%49#1 (copy)"
      ]
    },
    "1134": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%49#1",
        "tmp%51#1",
        "tmp%49#1 (copy)",
        "1"
      ]
    },
    "1135": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%49#1",
        "tmp%49#1 (copy)",
        "1",
        "tmp%51#1"
      ]
    },
    "1137": {
      "op": "select",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%49#1",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%49#1",
        "tmp%52#0"
      ]
    },
    "1138": {
      "op": "-",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%53#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%53#1"
      ]
    },
    "1139": {
      "op": "bytec_2 // \"box_d\"",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%53#1",
        "\"box_d\""
      ]
    },
    "1140": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%53#1",
        "\"box_d\"",
        "0"
      ]
    },
    "1141": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "\"box_d\"",
        "0",
        "tmp%53#1"
      ]
    },
    "1143": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1"
      ]
    },
    "1144": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "1"
      ]
    },
    "1145": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "1",
        "tmp%10#0 (copy)"
      ]
    },
    "1147": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%2#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "is_out_of_bounds%2#0"
      ]
    },
    "1148": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "is_out_of_bounds%2#0",
        "1"
      ]
    },
    "1149": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "is_out_of_bounds%2#0",
        "1",
        "tmp%10#0 (copy)"
      ]
    },
    "1151": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "1",
        "tmp%10#0 (copy)",
        "is_out_of_bounds%2#0"
      ]
    },
    "1153": {
      "op": "select",
      "defined_out": [
        "bounded_offset%1#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "bounded_offset%1#0"
      ]
    },
    "1154": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "bounded_offset%1#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1156": {
      "op": "swap",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "tmp%10#0 (copy)",
        "bounded_offset%1#0"
      ]
    },
    "1157": {
      "op": "-",
      "defined_out": [
        "bounded_index%2#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "bounded_index%2#0"
      ]
    },
    "1158": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "bounded_index%2#0",
        "tmp%0#10 (copy)"
      ]
    },
    "1160": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "bounded_index%2#0",
        "tmp%0#10 (copy)",
        "0"
      ]
    },
    "1161": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "tmp%0#10 (copy)",
        "0",
        "bounded_index%2#0"
      ]
    },
    "1163": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "tmp%57#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%55#1",
        "tmp%57#1"
      ]
    },
    "1164": {
      "op": "==",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%58#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%58#1"
      ]
    },
    "1165": {
      "op": "assert",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0"
      ]
    },
    "1166": {
      "op": "bytec_2 // \"box_d\"",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "\"box_d\""
      ]
    },
    "1167": {
      "op": "box_len",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%59#1",
        "tmp%60#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%59#1",
        "tmp%60#1"
      ]
    },
    "1168": {
      "op": "pop",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%59#1"
      ]
    },
    "1169": {
      "op": "intc_3 // 5",
      "defined_out": [
        "5",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%59#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%59#1",
        "5"
      ]
    },
    "1170": {
      "op": "dig 1",
      "defined_out": [
        "5",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%59#1",
        "tmp%59#1 (copy)"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%59#1",
        "5",
        "tmp%59#1 (copy)"
      ]
    },
    "1172": {
      "op": "<",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%59#1",
        "tmp%61#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%59#1",
        "tmp%61#1"
      ]
    },
    "1173": {
      "op": "intc_3 // 5"
    },
    "1174": {
      "op": "swap",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%59#1",
        "5",
        "tmp%61#1"
      ]
    },
    "1175": {
      "op": "select",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%62#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%62#1"
      ]
    },
    "1176": {
      "op": "bytec_2 // \"box_d\"",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%62#1",
        "\"box_d\""
      ]
    },
    "1177": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%62#1",
        "\"box_d\"",
        "0"
      ]
    },
    "1178": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "\"box_d\"",
        "0",
        "tmp%62#1"
      ]
    },
    "1180": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1"
      ]
    },
    "1181": {
      "op": "intc_3 // 5",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1",
        "5"
      ]
    },
    "1182": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1",
        "5",
        "tmp%10#0 (copy)"
      ]
    },
    "1184": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%3#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1",
        "is_out_of_bounds%3#0"
      ]
    },
    "1185": {
      "op": "intc_3 // 5",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1",
        "is_out_of_bounds%3#0",
        "5"
      ]
    },
    "1186": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1",
        "is_out_of_bounds%3#0",
        "5",
        "tmp%10#0 (copy)"
      ]
    },
    "1188": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1",
        "5",
        "tmp%10#0 (copy)",
        "is_out_of_bounds%3#0"
      ]
    },
    "1190": {
      "op": "select",
      "defined_out": [
        "bounded_index%3#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1",
        "bounded_index%3#0"
      ]
    },
    "1191": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1",
        "bounded_index%3#0",
        "tmp%0#10 (copy)"
      ]
    },
    "1193": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1",
        "bounded_index%3#0",
        "tmp%0#10 (copy)",
        "0"
      ]
    },
    "1194": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1",
        "tmp%0#10 (copy)",
        "0",
        "bounded_index%3#0"
      ]
    },
    "1196": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1",
        "tmp%66#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%64#1",
        "tmp%66#1"
      ]
    },
    "1197": {
      "op": "==",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%67#0"
      ]
    },
    "1198": {
      "op": "assert",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0"
      ]
    },
    "1199": {
      "op": "bytec_2 // \"box_d\"",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "\"box_d\""
      ]
    },
    "1200": {
      "op": "box_len",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%68#0",
        "tmp%69#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%68#0",
        "tmp%69#1"
      ]
    },
    "1201": {
      "op": "pop",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%68#0"
      ]
    },
    "1202": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%68#0",
        "2"
      ]
    },
    "1203": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%68#0",
        "tmp%68#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%68#0",
        "2",
        "tmp%68#0 (copy)"
      ]
    },
    "1205": {
      "op": "<",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%68#0",
        "tmp%70#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%68#0",
        "tmp%70#1"
      ]
    },
    "1206": {
      "op": "intc_2 // 2"
    },
    "1207": {
      "op": "swap",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%68#0",
        "2",
        "tmp%70#1"
      ]
    },
    "1208": {
      "op": "select",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%71#0"
      ]
    },
    "1209": {
      "op": "bytec_2 // \"box_d\"",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%71#0",
        "\"box_d\""
      ]
    },
    "1210": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%71#0",
        "\"box_d\"",
        "0"
      ]
    },
    "1211": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "\"box_d\"",
        "0",
        "tmp%71#0"
      ]
    },
    "1213": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%73#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%73#1"
      ]
    },
    "1214": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%73#1",
        "2"
      ]
    },
    "1215": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%73#1",
        "2",
        "tmp%10#0 (copy)"
      ]
    },
    "1217": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%4#0",
        "tmp%0#10",
        "tmp%10#0",
        "tmp%73#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%73#1",
        "is_out_of_bounds%4#0"
      ]
    },
    "1218": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%10#0",
        "tmp%73#1",
        "is_out_of_bounds%4#0",
        "2"
      ]
    },
    "1219": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#10",
        "tmp%73#1",
        "is_out_of_bounds%4#0",
        "2",
        "tmp%10#0"
      ]
    },
    "1221": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#10",
        "tmp%73#1",
        "2",
        "tmp%10#0",
        "is_out_of_bounds%4#0"
      ]
    },
    "1223": {
      "op": "select",
      "defined_out": [
        "bounded_index%4#0",
        "tmp%0#10",
        "tmp%73#1"
      ],
      "stack_out": [
        "tmp%0#10",
        "tmp%73#1",
        "bounded_index%4#0"
      ]
    },
    "1224": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%73#1",
        "bounded_index%4#0",
        "tmp%0#10"
      ]
    },
    "1226": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%73#1",
        "bounded_index%4#0",
        "tmp%0#10",
        "0"
      ]
    },
    "1227": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%73#1",
        "tmp%0#10",
        "0",
        "bounded_index%4#0"
      ]
    },
    "1229": {
      "op": "substring3",
      "defined_out": [
        "tmp%73#1",
        "tmp%75#1"
      ],
      "stack_out": [
        "tmp%73#1",
        "tmp%75#1"
      ]
    },
    "1230": {
      "op": "==",
      "defined_out": [
        "tmp%76#1"
      ],
      "stack_out": [
        "tmp%76#1"
      ]
    },
    "1231": {
      "op": "assert",
      "stack_out": []
    },
    "1232": {
      "op": "bytec 5 // \"box_large\"",
      "stack_out": [
        "\"box_large\""
      ]
    },
    "1234": {
      "op": "box_len",
      "defined_out": [
        "check%4#0",
        "value%4#0"
      ],
      "stack_out": [
        "value%4#0",
        "check%4#0"
      ]
    },
    "1235": {
      "op": "pop",
      "stack_out": [
        "value%4#0"
      ]
    },
    "1236": {
      "op": "pushint 6160 // 6160",
      "stack_out": [
        "value%4#0",
        "6160"
      ]
    },
    "1239": {
      "op": "==",
      "defined_out": [
        "tmp%77#1"
      ],
      "stack_out": [
        "tmp%77#1"
      ]
    },
    "1240": {
      "op": "assert",
      "stack_out": []
    },
    "1241": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1242": {
      "op": "return",
      "stack_out": []
    },
    "1243": {
      "block": "main_bare_routing@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1245": {
      "op": "bnz main_after_if_else@20",
      "stack_out": []
    },
    "1248": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "1250": {
      "op": "!",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "1251": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1252": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1253": {
      "op": "return",
      "stack_out": []
    }
  }
}