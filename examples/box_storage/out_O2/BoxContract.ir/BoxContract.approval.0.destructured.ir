main examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@18
    block@4: // abi_routing_L8
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "set_boxes(uint64,byte[],string)void" => block@5, method "check_keys()void" => block@6, method "delete_boxes()void" => block@7, method "read_boxes()(uint64,byte[],string)" => block@8, method "boxes_exist()(bool,bool,bool)" => block@9, method "slice_box()void" => block@10, method "arc4_box()void" => block@11, method "test_box_ref()void" => block@12, method "box_map_test()void" => block@13, method "box_map_set(uint64,string)void" => block@14, method "box_map_get(uint64)string" => block@15, method "box_map_del(uint64)void" => block@16, method "box_map_exists(uint64)bool" => block@17, * => block@20}
    block@5: // set_boxes_route_L17
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi tmp%7#0)
        let b#0: bytes = (txna ApplicationArgs 2)
        let c#0: bytes = (txna ApplicationArgs 3)
        let new_box_value%0#0: bytes = (itob a#0)
        (box_put "box_a" new_box_value%0#0)
        (box_del "b")
        (box_put "b" b#0)
        (box_del 0x424f585f43)
        (box_put 0x424f585f43 c#0)
        let new_box_value%1#0: bytes = ((extract 2 0) b#0)
        (box_del "box_d")
        (box_put "box_d" new_box_value%1#0)
        let (b_value#0: bytes, maybe_exists%0#0: bool) = (box_get "b")
        (assert maybe_exists%0#0) // check self.box_b exists
        let (maybe_value%1#2: bytes, maybe_exists%1#1: bool) = (box_get "b")
        (assert maybe_exists%1#1) // check self.box_b exists
        let tmp%0#2: uint64 = (extract_uint16 maybe_value%1#2 0u)
        let tmp%1#9: uint64 = (extract_uint16 b_value#0 0u)
        let tmp%2#2: bool = (== tmp%0#2 tmp%1#9)
        (assert tmp%2#2) // direct reference should match copy
        let (maybe_value%2#2: bytes, maybe_exists%2#0: bool) = (box_get "box_a")
        let maybe_value_converted%0#0: uint64 = (btoi maybe_value%2#2)
        (assert maybe_exists%2#0) // check self.box_a exists
        let new_box_value%2#0: uint64 = (+ maybe_value_converted%0#0 3u)
        let new_box_value%3#0: bytes = (itob new_box_value%2#0)
        (box_put "box_a" new_box_value%3#0)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "box_a")
        (assert check%0#0) // check self.box_a exists
        let tmp%3#2: bool = (== value%0#0 8u)
        (assert tmp%3#2)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "b")
        (assert check%1#0) // check self.box_b exists
        let tmp%4#5: uint64 = (len b#0)
        let tmp%5#1: bool = (== value%1#0 tmp%4#5)
        (assert tmp%5#1)
        let (value%2#0: uint64, check%2#0: bool) = (box_len 0x424f585f43)
        (assert check%2#0) // check self.box_c exists
        let tmp%6#3: uint64 = (len c#0)
        let tmp%7#4: bool = (== value%2#0 tmp%6#3)
        (assert tmp%7#4)
        let (value%3#0: uint64, check%3#0: bool) = (box_len "box_d")
        (assert check%3#0) // check self.box_d exists
        let tmp%9#3: uint64 = (len new_box_value%1#0)
        let tmp%10#2: bool = (== value%3#0 tmp%9#3)
        (assert tmp%10#2)
        let tmp%11#4: bytes = (box_extract 0x424f585f43 0u 1u)
        let tmp%12#1: bytes = ((extract 0 1) c#0)
        let tmp%13#1: bool = (== tmp%11#4 tmp%12#1)
        (assert tmp%13#1)
        let (tmp%14#3: uint64, tmp%15#2: bool) = (box_len 0x424f585f43)
        let tmp%16#4: uint64 = (- tmp%14#3 1u)
        let tmp%17#4: bytes = (box_extract 0x424f585f43 tmp%16#4 1u)
        let tmp%19#0: uint64 = (- tmp%6#3 1u)
        let tmp%20#2: bytes = (extract3 c#0 tmp%19#0 1u)
        let tmp%21#2: bool = (== tmp%17#4 tmp%20#2)
        (assert tmp%21#2)
        let (tmp%22#2: uint64, tmp%23#1: bool) = (box_len 0x424f585f43)
        let tmp%24#2: bool = (< 1u tmp%22#2)
        let tmp%25#2: uint64 = (select tmp%22#2 1u tmp%24#2)
        let tmp%26#0: uint64 = (- tmp%22#2 tmp%25#2)
        let tmp%28#0: bytes = (box_extract 0x424f585f43 0u tmp%26#0)
        let is_out_of_bounds%0#0: bool = (>= 1u tmp%6#3)
        let bounded_offset%0#0: uint64 = (select 1u tmp%6#3 is_out_of_bounds%0#0)
        let bounded_index%0#0: uint64 = (- tmp%6#3 bounded_offset%0#0)
        let tmp%29#1: bytes = (substring3 c#0 0u bounded_index%0#0)
        let tmp%30#0: bool = (== tmp%28#0 tmp%29#1)
        (assert tmp%30#0)
        let (tmp%31#0: uint64, tmp%32#1: bool) = (box_len 0x424f585f43)
        let tmp%33#1: bool = (< 2u tmp%31#0)
        let tmp%34#1: uint64 = (select tmp%31#0 2u tmp%33#1)
        let tmp%36#1: bytes = (box_extract 0x424f585f43 0u tmp%34#1)
        let is_out_of_bounds%1#0: bool = (>= 2u tmp%6#3)
        let bounded_index%1#0: uint64 = (select 2u tmp%6#3 is_out_of_bounds%1#0)
        let tmp%37#1: bytes = (substring3 c#0 0u bounded_index%1#0)
        let tmp%38#0: bool = (== tmp%36#1 tmp%37#1)
        (assert tmp%38#0)
        let tmp%39#1: bytes = (box_extract "box_d" 0u 1u)
        let tmp%41#1: bytes = ((extract 0 1) new_box_value%1#0)
        let tmp%42#0: bool = (== tmp%39#1 tmp%41#1)
        (assert tmp%42#0)
        let (tmp%43#0: uint64, tmp%44#1: bool) = (box_len "box_d")
        let tmp%45#0: uint64 = (- tmp%43#0 1u)
        let tmp%46#1: bytes = (box_extract "box_d" tmp%45#0 1u)
        let tmp%49#1: uint64 = (- tmp%9#3 1u)
        let tmp%50#1: bytes = (extract3 new_box_value%1#0 tmp%49#1 1u)
        let tmp%51#1: bool = (== tmp%46#1 tmp%50#1)
        (assert tmp%51#1)
        let (tmp%52#1: uint64, tmp%53#1: bool) = (box_len "box_d")
        let tmp%54#0: bool = (< 1u tmp%52#1)
        let tmp%55#0: uint64 = (select tmp%52#1 1u tmp%54#0)
        let tmp%56#1: uint64 = (- tmp%52#1 tmp%55#0)
        let tmp%58#1: bytes = (box_extract "box_d" 0u tmp%56#1)
        let is_out_of_bounds%2#0: bool = (>= 1u tmp%9#3)
        let bounded_offset%1#0: uint64 = (select 1u tmp%9#3 is_out_of_bounds%2#0)
        let bounded_index%2#0: uint64 = (- tmp%9#3 bounded_offset%1#0)
        let tmp%60#1: bytes = (substring3 new_box_value%1#0 0u bounded_index%2#0)
        let tmp%61#0: bool = (== tmp%58#1 tmp%60#1)
        (assert tmp%61#0)
        let (tmp%62#0: uint64, tmp%63#1: bool) = (box_len "box_d")
        let tmp%64#1: bool = (< 5u tmp%62#0)
        let tmp%65#1: uint64 = (select tmp%62#0 5u tmp%64#1)
        let tmp%67#1: bytes = (box_extract "box_d" 0u tmp%65#1)
        let is_out_of_bounds%3#0: bool = (>= 5u tmp%9#3)
        let bounded_index%3#0: uint64 = (select 5u tmp%9#3 is_out_of_bounds%3#0)
        let tmp%69#1: bytes = (substring3 new_box_value%1#0 0u bounded_index%3#0)
        let tmp%70#1: bool = (== tmp%67#1 tmp%69#1)
        (assert tmp%70#1)
        let (tmp%71#1: uint64, tmp%72#1: bool) = (box_len "box_d")
        let tmp%73#1: bool = (< 2u tmp%71#1)
        let tmp%74#0: uint64 = (select tmp%71#1 2u tmp%73#1)
        let tmp%76#0: bytes = (box_extract "box_d" 0u tmp%74#0)
        let is_out_of_bounds%4#0: bool = (>= 2u tmp%9#3)
        let bounded_index%4#0: uint64 = (select 2u tmp%9#3 is_out_of_bounds%4#0)
        let tmp%78#0: bytes = (substring3 new_box_value%1#0 0u bounded_index%4#0)
        let tmp%79#0: bool = (== tmp%76#0 tmp%78#0)
        (assert tmp%79#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@6: // check_keys_route_L48
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@7: // delete_boxes_route_L54
        let tmp%15#0: uint64 = (txn OnCompletion)
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // OnCompletion is not NoOp
        let tmp%17#0: uint64 = (txn ApplicationID)
        (assert tmp%17#0) // can only call when not creating
        (box_del "box_a")
        (box_del "b")
        (box_del 0x424f585f43)
        let (maybe_value%0#1: bytes, maybe_exists%0#0: bool) = (box_get "box_a")
        let maybe_value_converted%0#0: uint64 = (btoi maybe_value%0#1)
        let tmp%0#2: uint64 = (select 42u maybe_value_converted%0#0 maybe_exists%0#0)
        let tmp%1#6: bool = (== tmp%0#2 42u)
        (assert tmp%1#6)
        let (maybe_value%1#2: bytes, maybe_exists%1#1: bool) = (box_get "b")
        let tmp%2#0: bytes = (select 0x00023432 maybe_value%1#2 maybe_exists%1#1)
        let tmp%3#5: bytes = ((extract 2 0) tmp%2#0)
        let tmp%4#0: bool = (== tmp%3#5 0x3432)
        (assert tmp%4#0)
        let (maybe_value%2#2: bytes, maybe_exists%2#0: bool) = (box_get 0x424f585f43)
        let tmp%5#4: bytes = (select 0x00023432 maybe_value%2#2 maybe_exists%2#0)
        let tmp%6#4: bool = (== tmp%5#4 0x00023432)
        (assert tmp%6#4)
        let (maybe_value%3#1: bytes, a_exists#0: bool) = (box_get "box_a")
        let a#0: uint64 = (btoi maybe_value%3#1)
        let tmp%7#4: bool = (! a_exists#0)
        (assert tmp%7#4)
        let tmp%8#3: bool = (! a#0)
        (assert tmp%8#3)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@8: // read_boxes_route_L66
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        let (maybe_value%0#1: bytes, maybe_exists%0#0: bool) = (box_get "box_a")
        let maybe_value_converted%0#0: uint64 = (btoi maybe_value%0#1)
        (assert maybe_exists%0#0) // check Box exists
        let tmp%0#2: uint64 = (+ maybe_value_converted%0#0 1u)
        let tmp%1#9: uint64 = (- tmp%0#2 1u)
        let (maybe_value%0#1: bytes, maybe_exists%0#0: bool) = (box_get "b")
        (assert maybe_exists%0#0) // check self.box_b exists
        let tmp%2#0: bytes = ((extract 2 0) maybe_value%0#1)
        let (maybe_value%1#2: bytes, maybe_exists%1#1: bool) = (box_get 0x424f585f43)
        (assert maybe_exists%1#1) // check self.box_c exists
        let val_as_bytes%0#0: bytes = (itob tmp%1#9)
        let length%0#0: uint64 = (len tmp%2#0)
        let as_bytes%0#0: bytes = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 tmp%2#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 0x000c)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ 12u data_length%0#0)
        let as_bytes%2#0: bytes = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 encoded_value%0#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 maybe_value%1#2)
        let tmp%23#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%5#0)
        (log tmp%23#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@9: // boxes_exist_route_L70
        let tmp%24#0: uint64 = (txn OnCompletion)
        let tmp%25#0: bool = (! tmp%24#0)
        (assert tmp%25#0) // OnCompletion is not NoOp
        let tmp%26#0: uint64 = (txn ApplicationID)
        (assert tmp%26#0) // can only call when not creating
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (box_len "box_a")
        let (maybe_value%1#1: uint64, maybe_exists%1#1: bool) = (box_len "b")
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (box_len 0x424f585f43)
        let encoded_bool%0#0: bytes = (setbit 0x00 0u maybe_exists%0#0)
        let encoded_bool%1#0: bytes = (setbit 0x00 0u maybe_exists%1#1)
        let encoded_bool%2#0: bytes = (setbit 0x00 0u maybe_exists%2#0)
        let is_true%0#0: uint64 = (getbit encoded_bool%1#0 0u)
        let encoded_tuple_buffer%8#0: bytes = (setbit encoded_bool%0#0 1u is_true%0#0)
        let is_true%1#0: uint64 = (getbit encoded_bool%2#0 0u)
        let encoded_tuple_buffer%9#0: bytes = (setbit encoded_tuple_buffer%8#0 2u is_true%1#0)
        let tmp%28#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%9#0)
        (log tmp%28#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@10: // slice_box_route_L74
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        (box_del "0")
        (box_put "0" 0x54657374696e672074657374696e6720313233)
        let (tmp%0#2: uint64, tmp%1#6: bool) = (box_len "0")
        let tmp%3#0: uint64 = (select tmp%0#2 0u tmp%0#2)
        let tmp%4#0: bool = (< 7u tmp%0#2)
        let tmp%5#0: uint64 = (select tmp%0#2 7u tmp%4#0)
        let tmp%6#3: uint64 = (- tmp%5#0 tmp%3#0)
        let tmp%7#0: bytes = (box_extract "0" tmp%3#0 tmp%6#3)
        let tmp%8#3: bool = (== tmp%7#0 0x54657374696e67)
        (assert tmp%8#3)
        (box_del 0x424f585f43)
        (box_put 0x424f585f43 0x000548656c6c6f)
        let (tmp%9#3: uint64, tmp%10#2: bool) = (box_len 0x424f585f43)
        let tmp%11#3: bool = (< 2u tmp%9#3)
        let tmp%12#3: uint64 = (select tmp%9#3 2u tmp%11#3)
        let tmp%13#1: bool = (< 10u tmp%9#3)
        let tmp%14#3: uint64 = (select tmp%9#3 10u tmp%13#1)
        let tmp%15#0: uint64 = (- tmp%14#3 tmp%12#3)
        let tmp%16#2: bytes = (box_extract 0x424f585f43 tmp%12#3 tmp%15#0)
        let tmp%17#2: bool = (== tmp%16#2 0x48656c6c6f)
        (assert tmp%17#2)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@11: // arc4_box_route_L83
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        (box_put 0x64 0x00010203)
        let (maybe_value%0#1: bytes, maybe_exists%0#0: bool) = (box_get 0x64)
        (assert maybe_exists%0#0) // check Box exists
        let reinterpret_biguint%0#0: biguint = ((extract 0 1) maybe_value%0#1) // on error: Index access is out of bounds
        let tmp%0#1: bool = (b== reinterpret_biguint%0#0 0x00)
        (assert tmp%0#1)
        let (maybe_value%1#2: bytes, maybe_exists%1#1: bool) = (box_get 0x64)
        (assert maybe_exists%1#1) // check Box exists
        let reinterpret_biguint%2#0: biguint = ((extract 1 1) maybe_value%1#2) // on error: Index access is out of bounds
        let tmp%1#6: bool = (b== reinterpret_biguint%2#0 0x01)
        (assert tmp%1#6)
        let (maybe_value%2#2: bytes, maybe_exists%2#0: bool) = (box_get 0x64)
        (assert maybe_exists%2#0) // check Box exists
        let reinterpret_biguint%4#0: biguint = ((extract 2 1) maybe_value%2#2) // on error: Index access is out of bounds
        let tmp%2#2: bool = (b== reinterpret_biguint%4#0 0x02)
        (assert tmp%2#2)
        let (maybe_value%3#1: bytes, maybe_exists%3#0: bool) = (box_get 0x64)
        (assert maybe_exists%3#0) // check Box exists
        let reinterpret_biguint%6#0: biguint = ((extract 3 1) maybe_value%3#1) // on error: Index access is out of bounds
        let tmp%3#2: bool = (b== reinterpret_biguint%6#0 0x03)
        (assert tmp%3#2)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@12: // test_box_ref_route_L93
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (box_len "blob")
        let tmp%0#1: bool = (! maybe_exists%0#0)
        (assert tmp%0#1) // no data
        let (maybe_value%1#1: uint64, maybe_exists%1#1: bool) = (box_len 0x626c6f62)
        let tmp%1#6: bool = (! maybe_exists%1#1)
        (assert tmp%1#6) // no data
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (box_len 0x626c6f62)
        let tmp%2#2: bool = (! maybe_exists%2#0)
        (assert tmp%2#2) // no data
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (box_len "blob")
        let tmp%3#2: bool = (! maybe_exists%3#0)
        (assert tmp%3#2) // no data
        let tmp%4#0: bool = (box_create "blob" 32u)
        (assert tmp%4#0)
        let (maybe_value%4#0: uint64, maybe_exists%4#0: bool) = (box_len "blob")
        (assert maybe_exists%4#0) // has data
        let sender_bytes#0: bytes = (txn Sender)
        let app_address#0: bytes = (global CurrentApplicationAddress)
        (box_replace "blob" 0u sender_bytes#0)
        (box_resize "blob" 8000u)
        (box_splice "blob" 0u 0u app_address#0)
        (box_replace "blob" 64u 0x68656c6c6f)
        let prefix#0: bytes = (box_extract "blob" 0u 69u)
        let tmp%7#0: bytes = (concat app_address#0 sender_bytes#0)
        let tmp%8#2: bytes = (concat tmp%7#0 0x68656c6c6f)
        let tmp%9#1: bool = (== prefix#0 tmp%8#2)
        (assert tmp%9#1)
        let tmp%10#2: bool = (box_del "blob")
        (assert tmp%10#2)
        let (value#0: bytes, exists#0: bool) = (box_get "blob")
        let tmp%12#0: bool = (! exists#0)
        (assert tmp%12#0)
        let tmp%13#1: bool = (== value#0 0x)
        (assert tmp%13#1)
        let (maybe_value%6#0: bytes, maybe_exists%6#0: bool) = (box_get "blob")
        let tmp%14#2: bytes = (select sender_bytes#0 maybe_value%6#0 maybe_exists%6#0)
        let tmp%15#2: bool = (== tmp%14#2 sender_bytes#0)
        (assert tmp%15#2)
        let tmp%16#2: bytes = (concat sender_bytes#0 app_address#0)
        (box_put "blob" tmp%16#2)
        let (maybe_value%7#0: uint64, maybe_exists%7#0: bool) = (box_len "blob")
        (assert maybe_exists%7#0) // Blob exists
        let (value%0#0: uint64, check%0#0: bool) = (box_len "blob")
        (assert check%0#0) // check BoxRef exists
        let tmp%17#2: bool = (== value%0#0 64u)
        (assert tmp%17#2)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "blob")
        (assert check%0#0) // check BoxRef exists
        let tmp%19#2: bool = (== value%0#0 64u)
        (assert tmp%19#2)
        (box_create "box_ref" 32u)
        let (maybe_value%8#0: uint64, maybe_exists%8#0: bool) = (box_len "box_ref")
        (assert maybe_exists%8#0) // has data
        (box_del "box_ref")
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@13: // box_map_test_route_L141
        let tmp%41#0: uint64 = (txn OnCompletion)
        let tmp%42#0: bool = (! tmp%41#0)
        (assert tmp%42#0) // OnCompletion is not NoOp
        let tmp%43#0: uint64 = (txn ApplicationID)
        (assert tmp%43#0) // can only call when not creating
        let tmp%0#3: bytes = (itob 0u)
        (box_del tmp%0#3)
        (box_put tmp%0#3 "Hmmmmm")
        let (value%0#0: uint64, check%0#0: bool) = (box_len tmp%0#3)
        (assert check%0#0) // check self.box_map entry exists
        let tmp%5#1: bool = (== value%0#0 6u)
        (assert tmp%5#1)
        let (value%1#0: uint64, check%1#0: bool) = (box_len tmp%0#3)
        (assert check%1#0) // check self.box_map entry exists
        let tmp%9#1: bool = (== value%1#0 6u)
        (assert tmp%9#1)
        let tmp%10#1: bytes = (itob 1u)
        let (maybe_value%0#1: bytes, maybe_exists%0#0: bool) = (box_get tmp%10#1)
        let tmp%12#1: bytes = (select "default" maybe_value%0#1 maybe_exists%0#0)
        let tmp%13#1: bool = (== tmp%12#1 "default")
        (assert tmp%13#1)
        let (value#0: bytes, exists#0: bool) = (box_get tmp%10#1)
        let tmp%16#0: bool = (! exists#0)
        (assert tmp%16#0)
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (box_len tmp%0#3)
        (assert maybe_exists%2#0)
        (box_del tmp%10#1)
        (box_put tmp%10#1 "hello")
        let (maybe_value%0#1: bytes, maybe_exists%0#0: bool) = (box_get tmp%10#1)
        (assert maybe_exists%0#0) // check BoxMap entry exists
        let tmp%23#1: bool = (== maybe_value%0#1 "hello")
        (assert tmp%23#1)
        (box_del tmp%10#1)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@14: // box_map_set_route_L162
        let tmp%45#0: uint64 = (txn OnCompletion)
        let tmp%46#0: bool = (! tmp%45#0)
        (assert tmp%46#0) // OnCompletion is not NoOp
        let tmp%47#0: uint64 = (txn ApplicationID)
        (assert tmp%47#0) // can only call when not creating
        let tmp%49#0: bytes = (txna ApplicationArgs 1)
        let key#0: uint64 = (btoi tmp%49#0)
        let tmp%51#0: bytes = (txna ApplicationArgs 2)
        let value#0: bytes = ((extract 2 0) tmp%51#0)
        let tmp%0#3: bytes = (itob key#0)
        (box_del tmp%0#3)
        (box_put tmp%0#3 value#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@15: // box_map_get_route_L166
        let tmp%53#0: uint64 = (txn OnCompletion)
        let tmp%54#0: bool = (! tmp%53#0)
        (assert tmp%54#0) // OnCompletion is not NoOp
        let tmp%55#0: uint64 = (txn ApplicationID)
        (assert tmp%55#0) // can only call when not creating
        let tmp%57#0: bytes = (txna ApplicationArgs 1)
        let key#0: uint64 = (btoi tmp%57#0)
        let tmp%0#3: bytes = (itob key#0)
        let (maybe_value%0#1: bytes, maybe_exists%0#0: bool) = (box_get tmp%0#3)
        (assert maybe_exists%0#0) // check self.box_map entry exists
        let length%1#0: uint64 = (len maybe_value%0#1)
        let as_bytes%3#0: bytes = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 maybe_value%0#1)
        let tmp%59#0: bytes = (concat 0x151f7c75 encoded_value%1#0)
        (log tmp%59#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@16: // box_map_del_route_L170
        let tmp%60#0: uint64 = (txn OnCompletion)
        let tmp%61#0: bool = (! tmp%60#0)
        (assert tmp%61#0) // OnCompletion is not NoOp
        let tmp%62#0: uint64 = (txn ApplicationID)
        (assert tmp%62#0) // can only call when not creating
        let tmp%64#0: bytes = (txna ApplicationArgs 1)
        let key#0: uint64 = (btoi tmp%64#0)
        let tmp%0#3: bytes = (itob key#0)
        (box_del tmp%0#3)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@17: // box_map_exists_route_L174
        let tmp%66#0: uint64 = (txn OnCompletion)
        let tmp%67#0: bool = (! tmp%66#0)
        (assert tmp%67#0) // OnCompletion is not NoOp
        let tmp%68#0: uint64 = (txn ApplicationID)
        (assert tmp%68#0) // can only call when not creating
        let tmp%70#0: bytes = (txna ApplicationArgs 1)
        let key#0: uint64 = (btoi tmp%70#0)
        let tmp%0#3: bytes = (itob key#0)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (box_len tmp%0#3)
        let encoded_bool%3#0: bytes = (setbit 0x00 0u maybe_exists%0#0)
        let tmp%72#0: bytes = (concat 0x151f7c75 encoded_bool%3#0)
        (log tmp%72#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@18: // bare_routing_L8
        let tmp%73#0: uint64 = (txn OnCompletion)
        goto tmp%73#0 ? block@20 : block@19
    block@19: // __algopy_default_create_L1
        let tmp%74#0: uint64 = (txn ApplicationID)
        let tmp%75#0: bool = (! tmp%74#0)
        (assert tmp%75#0) // can only call when creating
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@20: // after_if_else_L8
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@21
    block@21: // after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router___L1
        return tmp%0#1