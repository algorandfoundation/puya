main examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#3: uint64 = (txn NumAppArgs)
        goto tmp%0#3 ? block@4 : block@51
    block@4: // abi_routing_L75
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "set_boxes(uint64,byte[],string)void" => block@5, method "check_keys()void" => block@6, method "create_many_ints()void" => block@7, method "set_many_ints(uint64,uint64)void" => block@8, method "sum_many_ints()uint64" => block@9, method "delete_boxes()void" => block@13, method "indirect_extract_and_replace()void" => block@14, method "read_boxes()(uint64,byte[],string,uint64)" => block@15, method "boxes_exist()(bool,bool,bool,bool)" => block@16, method "create_dynamic_arr_struct()void" => block@17, method "delete_dynamic_arr_struct()void" => block@18, method "append_dynamic_arr_struct(uint64)uint64" => block@19, method "pop_dynamic_arr_struct(uint64)uint64" => block@23, method "nested_read()uint64" => block@24, method "sum_dynamic_arr_struct()uint64" => block@25, method "create_dynamic_box()void" => block@32, method "delete_dynamic_box()void" => block@33, method "append_dynamic_box(uint64)uint64" => block@34, method "pop_dynamic_box(uint64)uint64" => block@38, method "sum_dynamic_box()uint64" => block@39, method "slice_box()void" => block@43, method "arc4_box()void" => block@44, method "test_box_ref()void" => block@45, method "box_map_test()void" => block@46, method "box_map_set(uint64,string)void" => block@47, method "box_map_get(uint64)string" => block@48, method "box_map_del(uint64)void" => block@49, method "box_map_exists(uint64)bool" => block@50, * => block@53}
    block@5: // set_boxes_route_L89
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let b#1: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let c#1: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        let encoded_value%0#0: bytes[8] = (itob a#0)
        (box_put "box_a" encoded_value%0#0)
        (box_del "b")
        (box_put "b" b#1)
        (box_del 0x424f585f43)
        (box_put 0x424f585f43 c#1)
        let tmp%0#21: bytes = ((extract 2 0) b#1)
        (box_del "box_d")
        (box_put "box_d" tmp%0#21)
        (box_create "box_large" 6160u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 42u)
        (box_replace "box_large" 4096u aggregate%val_as_bytes%0#0)
        (box_replace "box_large" 4096u 0x000000000000002a)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "box_a")
        (assert aggregate%box_get%1#0) // check self.box_a exists
        let maybe_value_converted%0#1: uint64 = (btoi aggregate%box_get%0#0)
        let tmp%5#0: uint64 = (+ maybe_value_converted%0#1 3u)
        let encoded_value%2#2: bytes[8] = (itob tmp%5#0)
        (box_put "box_a" encoded_value%2#2)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "box_a")
        let tmp%6#1: bool = (== value%0#0 8u)
        (assert tmp%6#1)
        let (value%1#1: uint64, check%1#1: bool) = (box_len "b")
        let tmp%7#7: uint64 = (len b#1)
        let tmp%8#3: bool = (== value%1#1 tmp%7#7)
        (assert tmp%8#3)
        let (value%2#1: uint64, check%2#1: bool) = (box_len 0x424f585f43)
        (assert check%2#1) // check self.box_c exists
        let tmp%9#6: uint64 = (len c#1)
        let tmp%10#5: bool = (== value%2#1 tmp%9#6)
        (assert tmp%10#5)
        let (value%3#1: uint64, check%3#1: bool) = (box_len "box_d")
        let tmp%12#0: uint64 = (len tmp%0#21)
        let tmp%13#0: bool = (== value%3#1 tmp%12#0)
        (assert tmp%13#0)
        let tmp%14#4: bytes = (box_extract 0x424f585f43 0u 1u)
        let extract%0#0: bytes = ((extract 0 1) c#1)
        let tmp%15#1: bool = (== tmp%14#4 extract%0#0)
        (assert tmp%15#1)
        let tmp%18#0: uint64 = (- value%2#1 1u)
        let tmp%19#2: bytes = (box_extract 0x424f585f43 tmp%18#0 1u)
        let tmp%21#2: uint64 = (- tmp%9#6 1u)
        let extract%1#0: bytes = (extract3 c#1 tmp%21#2 1u)
        let tmp%22#1: bool = (== tmp%19#2 extract%1#0)
        (assert tmp%22#1)
        let tmp%25#1: bool = (< 1u value%2#1)
        let tmp%26#1: uint64 = (select value%2#1 1u tmp%25#1)
        let tmp%27#1: uint64 = (- value%2#1 tmp%26#1)
        let tmp%29#1: bytes = (box_extract 0x424f585f43 0u tmp%27#1)
        let is_out_of_bounds%0#0: bool = (>= 1u tmp%9#6)
        let bounded_offset%0#0: uint64 = (select 1u tmp%9#6 is_out_of_bounds%0#0)
        let bounded_index%0#0: uint64 = (- tmp%9#6 bounded_offset%0#0)
        let tmp%30#1: bytes = (substring3 c#1 0u bounded_index%0#0)
        let tmp%31#1: bool = (== tmp%29#1 tmp%30#1)
        (assert tmp%31#1)
        let tmp%34#0: bool = (< 2u value%2#1)
        let tmp%35#0: uint64 = (select value%2#1 2u tmp%34#0)
        let tmp%37#1: bytes = (box_extract 0x424f585f43 0u tmp%35#0)
        let is_out_of_bounds%1#0: bool = (>= 2u tmp%9#6)
        let bounded_index%1#0: uint64 = (select 2u tmp%9#6 is_out_of_bounds%1#0)
        let tmp%38#1: bytes = (substring3 c#1 0u bounded_index%1#0)
        let tmp%39#1: bool = (== tmp%37#1 tmp%38#1)
        (assert tmp%39#1)
        let tmp%40#1: bytes = (box_extract "box_d" 0u 1u)
        let extract%2#0: bytes = ((extract 2 1) b#1)
        let tmp%42#1: bool = (== tmp%40#1 extract%2#0)
        (assert tmp%42#1)
        let tmp%45#1: uint64 = (- value%3#1 1u)
        let tmp%46#0: bytes = (box_extract "box_d" tmp%45#1 1u)
        let tmp%49#0: uint64 = (- tmp%12#0 1u)
        let extract%3#0: bytes = (extract3 tmp%0#21 tmp%49#0 1u)
        let tmp%50#1: bool = (== tmp%46#0 extract%3#0)
        (assert tmp%50#1)
        let tmp%53#1: bool = (< 1u value%3#1)
        let tmp%54#1: uint64 = (select value%3#1 1u tmp%53#1)
        let tmp%55#1: uint64 = (- value%3#1 tmp%54#1)
        let tmp%57#1: bytes = (box_extract "box_d" 0u tmp%55#1)
        let is_out_of_bounds%2#0: bool = (>= 1u tmp%12#0)
        let bounded_offset%1#0: uint64 = (select 1u tmp%12#0 is_out_of_bounds%2#0)
        let bounded_index%2#0: uint64 = (- tmp%12#0 bounded_offset%1#0)
        let tmp%59#1: bytes = (substring3 tmp%0#21 0u bounded_index%2#0)
        let tmp%60#1: bool = (== tmp%57#1 tmp%59#1)
        (assert tmp%60#1)
        let tmp%63#1: bool = (< 5u value%3#1)
        let tmp%64#1: uint64 = (select value%3#1 5u tmp%63#1)
        let tmp%66#1: bytes = (box_extract "box_d" 0u tmp%64#1)
        let is_out_of_bounds%3#0: bool = (>= 5u tmp%12#0)
        let bounded_index%3#0: uint64 = (select 5u tmp%12#0 is_out_of_bounds%3#0)
        let tmp%68#1: bytes = (substring3 tmp%0#21 0u bounded_index%3#0)
        let tmp%69#1: bool = (== tmp%66#1 tmp%68#1)
        (assert tmp%69#1)
        let tmp%72#1: bool = (< 2u value%3#1)
        let tmp%73#0: uint64 = (select value%3#1 2u tmp%72#1)
        let tmp%75#1: bytes = (box_extract "box_d" 0u tmp%73#0)
        let is_out_of_bounds%4#0: bool = (>= 2u tmp%12#0)
        let bounded_index%4#0: uint64 = (select 2u tmp%12#0 is_out_of_bounds%4#0)
        let tmp%77#1: bytes = (substring3 tmp%0#21 0u bounded_index%4#0)
        let tmp%78#1: bool = (== tmp%75#1 tmp%77#1)
        (assert tmp%78#1)
        let (value%4#0: uint64, check%4#0: bool) = (box_len "box_large")
        let tmp%79#1: bool = (== value%4#0 6160u)
        (assert tmp%79#1)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@6: // check_keys_route_L125
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@7: // create_many_ints_route_L132
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        (box_create "many_ints" 4104u)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@8: // set_many_ints_route_L136
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        (assert tmp%18#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#1: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let box%index_bytes_offset%0#0: uint64 = (* index#1 8u)
        (box_replace "many_ints" box%index_bytes_offset%0#0 reinterpret_Encoded(uint64)%2#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@9: // sum_many_ints_route_L140
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        goto block@74
    block@74: // while_top_L20
        let tmp%1#6: uint64 = (global OpcodeBudget)
        let tmp%2#14: bool = (> 10510u tmp%1#6)
        goto tmp%2#14 ? block@75 : block@79
    block@75: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@74
    block@79: // after_while_L20
        let total#0: uint64 = 0u
        let (aggregate%box_get%2#0: uint64, aggregate%box_get%3#0: bool) = (box_len "many_ints")
        (assert aggregate%box_get%3#0) // check self.many_ints exists
        let item_index_internal%0#0: uint64 = 0u
        goto block@10
    block@10: // for_header_L144
        let continue_looping%0#0: bool = (< item_index_internal%0#0 513u)
        goto continue_looping%0#0 ? block@11 : block@12
    block@11: // for_body_L145
        let box%index_bytes_offset%1#0: uint64 = (* item_index_internal%0#0 8u)
        let box%box_extract%2#0: Encoded(uint64) = (box_extract "many_ints" box%index_bytes_offset%1#0 8u)
        let val#0: uint64 = (btoi box%box_extract%2#0)
        let total#0: uint64 = (+ total#0 val#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@10
    block@12: // after_for_L144
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob total#0)
        let tmp%28#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%1#0)
        (log tmp%28#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@13: // delete_boxes_route_L148
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        (box_del "box_a")
        (box_del "b")
        (box_del 0x424f585f43)
        let (maybe_value%0#0: bytes, a_exists#0: bool) = (box_get "box_a")
        let a#0: uint64 = (btoi maybe_value%0#0)
        let state_get%0#2: uint64 = (select 42u a#0 a_exists#0)
        let tmp%0#1: bool = (== state_get%0#2 42u)
        (assert tmp%0#1)
        let (maybe_value%1#2: bytes, maybe_exists%1#2: bool) = (box_get "b")
        let state_get%1#0: bytes = (select 0x00023432 maybe_value%1#2 maybe_exists%1#2)
        let tmp%2#0: bytes = ((extract 2 0) state_get%1#0)
        let tmp%3#12: bool = (== tmp%2#0 0x3432)
        (assert tmp%3#12)
        let (maybe_value%2#0: bytes, maybe_exists%2#2: bool) = (box_get 0x424f585f43)
        let state_get%2#0: bytes = (select 0x00023432 maybe_value%2#0 maybe_exists%2#2)
        let tmp%6#1: bool = (== state_get%2#0 0x00023432)
        (assert tmp%6#1)
        let tmp%7#6: bool = (! a_exists#0)
        (assert tmp%7#6)
        let tmp%8#3: bool = (! a#0)
        (assert tmp%8#3)
        (box_del "box_large")
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@14: // indirect_extract_and_replace_route_L161
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        let box%box_extract%3#0: Encoded(uint64) = (box_extract "box_large" 4096u 8u)
        let values%0#4: uint64 = (btoi box%box_extract%3#0)
        let tmp%0#3: uint64 = (+ values%0#4 1u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%0#3)
        (box_replace "box_large" 4096u aggregate%val_as_bytes%2#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@15: // read_boxes_route_L167
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "box_a")
        (assert aggregate%box_get%5#0) // check Box exists
        let maybe_value_converted%0#1: uint64 = (btoi aggregate%box_get%4#0)
        let tmp%0#3: uint64 = (+ maybe_value_converted%0#1 1u)
        let tmp%1#6: uint64 = (- tmp%0#3 1u)
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get "b")
        (assert aggregate%box_get%7#0) // check self.box_b exists
        let tmp%2#0: bytes = ((extract 2 0) aggregate%box_get%6#0)
        let (aggregate%box_get%8#0: bytes, aggregate%box_get%9#0: bool) = (box_get 0x424f585f43)
        (assert aggregate%box_get%9#0) // check self.box_c exists
        let box%box_extract%4#0: Encoded(uint64) = (box_extract "box_large" 4096u 8u)
        let values%0#4: uint64 = (btoi box%box_extract%4#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%1#6)
        let aggregate%length%2#0: uint64 = (len tmp%2#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%2#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%3#0 0x0014)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%2#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 20u aggregate%data_length%0#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob values%0#4)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%val_as_bytes%4#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%encoded_value%2#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%box_get%8#0)
        let tmp%46#0: bytes = (concat 0x151f7c75 aggregate%concat%1#0)
        (log tmp%46#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@16: // boxes_exist_route_L176
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (! tmp%47#0)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        (assert tmp%49#0) // can only call when not creating
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "box_a")
        let (_%1#1: uint64, maybe_exists%1#2: bool) = (box_len "b")
        let (_%2#1: uint64, maybe_exists%2#2: bool) = (box_len 0x424f585f43)
        let (_%3#1: uint64, maybe_exists%3#1: bool) = (box_len "box_large")
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u maybe_exists%0#0)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u maybe_exists%1#2)
        let aggregate%set_bit%1#0: bytes[1] = (setbit aggregate%set_bit%0#0 2u maybe_exists%2#2)
        let aggregate%set_bit%2#0: bytes[1] = (setbit aggregate%set_bit%1#0 3u maybe_exists%3#1)
        let tmp%56#0: bytes = (concat 0x151f7c75 aggregate%set_bit%2#0)
        (log tmp%56#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@17: // create_dynamic_arr_struct_route_L180
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (! tmp%57#0)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        (assert tmp%59#0) // can only call when not creating
        let tmp%0#3: uint64 = (txn NumAppArgs)
        let tmp%1#6: uint64 = (txn NumAppArgs)
        let tmp%2#6: uint64 = (* tmp%1#6 2u)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%0#3)
        let aggregate%head%6#0: bytes = (concat aggregate%val_as_bytes%5#0 0x0014)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%2#6)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%val_as_bytes%6#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%head%7#0 0x001600000000)
        (box_del "dynamic_arr_struct")
        (box_put "dynamic_arr_struct" aggregate%concat%3#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@18: // delete_dynamic_arr_struct_route_L189
        let tmp%61#0: uint64 = (txn OnCompletion)
        let tmp%62#0: bool = (! tmp%61#0)
        (assert tmp%62#0) // OnCompletion is not NoOp
        let tmp%63#0: uint64 = (txn ApplicationID)
        (assert tmp%63#0) // can only call when not creating
        (box_del "dynamic_arr_struct")
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@19: // append_dynamic_arr_struct_route_L193
        let tmp%65#0: uint64 = (txn OnCompletion)
        let tmp%66#0: bool = (! tmp%65#0)
        (assert tmp%66#0) // OnCompletion is not NoOp
        let tmp%67#0: uint64 = (txn ApplicationID)
        (assert tmp%67#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let times#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let box%box_extract%5#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" 10u 8u)
        let values%0#4: uint64 = (btoi box%box_extract%5#0)
        let tmp%0#1: bool = (== values%0#4 2u)
        (assert tmp%0#1) // expected 2
        let box%box_extract%6#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let arr_len#0: uint64 = (btoi box%box_extract%6#0)
        let box%box_extract%7#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%7#0)
        let box%box_extract%8#0: bytes = (box_extract "dynamic_arr_struct" box%btoi%0#0 2u)
        let arr2_len#0: uint64 = (btoi box%box_extract%8#0)
        let arr_size#3: uint64 = (+ arr_len#0 times#0)
        let tmp%3#0: uint64 = (* arr_size#3 8u)
        let head_and_dyn_arr#0: uint64 = (+ tmp%3#0 22u)
        let tmp%1#6: uint64 = (* arr2_len#0 8u)
        let dyn_arr2_index#1: uint64 = (+ 2u tmp%1#6)
        let tmp%3#0: uint64 = (+ head_and_dyn_arr#0 dyn_arr2_index#1)
        (box_resize "dynamic_arr_struct" tmp%3#0)
        let tmp%3#0: uint64 = (* arr_len#0 8u)
        let tmp%5#0: uint64 = (+ tmp%3#0 22u)
        let tmp%6#3: uint64 = (* times#0 8u)
        let tmp%7#3: bytes = (bzero tmp%6#3)
        (box_splice "dynamic_arr_struct" tmp%5#0 0u tmp%7#3)
        let i#0: uint64 = 0u
        goto block@20
    block@20: // for_header_L211
        let continue_looping%0#0: bool = (< i#0 times#0)
        goto continue_looping%0#0 ? block@21 : block@22
    block@21: // for_body_L212
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob i#0)
        let box%index_bytes_offset%2#0: uint64 = (* arr_len#0 8u)
        let box%offset%11#0: uint64 = (+ 22u box%index_bytes_offset%2#0)
        (box_replace "dynamic_arr_struct" box%offset%11#0 aggregate%val_as_bytes%7#0)
        let arr_len#0: uint64 = (+ arr_len#0 1u)
        let i#0: uint64 = (+ i#0 1u)
        goto block@20
    block@22: // after_for_L211
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob arr_len#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%8#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 16u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint16%0#0: bytes = ((extract 6 2) aggregate%val_as_bytes%8#0)
        (box_replace "dynamic_arr_struct" 20u aggregate%uint16%0#0)
        let tmp%3#0: uint64 = (* arr_len#0 8u)
        let tmp%3#0: uint64 = (+ tmp%3#0 24u)
        let arr2_offset#0: uint64 = (- tmp%3#0 2u)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob arr2_offset#0)
        let aggregate%bitlen%1#0: uint64 = (bitlen aggregate%val_as_bytes%9#0)
        let aggregate%no_overflow%1#0: bool = (<= aggregate%bitlen%1#0 16u)
        (assert aggregate%no_overflow%1#0) // overflow
        let aggregate%uint16%1#0: bytes = ((extract 6 2) aggregate%val_as_bytes%9#0)
        (box_replace "dynamic_arr_struct" 18u aggregate%uint16%1#0)
        let box%box_extract%9#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%array_length%4#0: uint64 = (btoi box%box_extract%9#0)
        let tmp%14#2: bool = (== box%array_length%4#0 arr_len#0)
        (assert tmp%14#2) // expected arr length to be correct
        let box%box_extract%10#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%1#0: uint64 = (btoi box%box_extract%10#0)
        let box%box_extract%11#0: bytes = (box_extract "dynamic_arr_struct" box%btoi%1#0 2u)
        let box%array_length%5#0: uint64 = (btoi box%box_extract%11#0)
        let tmp%16#1: bool = (! box%array_length%5#0)
        (assert tmp%16#1) // expected arr2 length to be correct
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob box%array_length%4#0)
        let tmp%72#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%10#0)
        (log tmp%72#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@23: // pop_dynamic_arr_struct_route_L225
        let tmp%73#0: uint64 = (txn OnCompletion)
        let tmp%74#0: bool = (! tmp%73#0)
        (assert tmp%74#0) // OnCompletion is not NoOp
        let tmp%75#0: uint64 = (txn ApplicationID)
        (assert tmp%75#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let times#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        let box%box_extract%13#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%array_length%7#0: uint64 = (btoi box%box_extract%13#0)
        let arr_len#0: uint64 = (- box%array_length%7#0 times#0)
        let box%box_extract%14#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%2#0: uint64 = (btoi box%box_extract%14#0)
        let box%box_extract%15#0: bytes = (box_extract "dynamic_arr_struct" box%btoi%2#0 2u)
        let arr2_len#0: uint64 = (btoi box%box_extract%15#0)
        let tmp%3#0: uint64 = (* arr_len#0 8u)
        let head_and_dyn_arr#0: uint64 = (+ tmp%3#0 22u)
        let tmp%3#0: uint64 = (+ tmp%3#0 24u)
        let arr2_offset#0: uint64 = (- tmp%3#0 2u)
        let aggregate%val_as_bytes%11#0: bytes[8] = (itob arr_len#0)
        let aggregate%bitlen%2#0: uint64 = (bitlen aggregate%val_as_bytes%11#0)
        let aggregate%no_overflow%2#0: bool = (<= aggregate%bitlen%2#0 16u)
        (assert aggregate%no_overflow%2#0) // overflow
        let aggregate%uint16%2#0: bytes = ((extract 6 2) aggregate%val_as_bytes%11#0)
        (box_replace "dynamic_arr_struct" 20u aggregate%uint16%2#0)
        let aggregate%val_as_bytes%12#0: bytes[8] = (itob arr2_offset#0)
        let aggregate%bitlen%3#0: uint64 = (bitlen aggregate%val_as_bytes%12#0)
        let aggregate%no_overflow%3#0: bool = (<= aggregate%bitlen%3#0 16u)
        (assert aggregate%no_overflow%3#0) // overflow
        let aggregate%uint16%3#0: bytes = ((extract 6 2) aggregate%val_as_bytes%12#0)
        (box_replace "dynamic_arr_struct" 18u aggregate%uint16%3#0)
        let tmp%8#0: uint64 = (* times#0 8u)
        (box_splice "dynamic_arr_struct" head_and_dyn_arr#0 tmp%8#0 0x)
        let tmp%1#6: uint64 = (* arr2_len#0 8u)
        let dyn_arr2_index#1: uint64 = (+ 2u tmp%1#6)
        let size#0: uint64 = (+ head_and_dyn_arr#0 dyn_arr2_index#1)
        (box_resize "dynamic_arr_struct" size#0)
        let box%box_extract%16#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%array_length%9#0: uint64 = (btoi box%box_extract%16#0)
        let aggregate%val_as_bytes%13#0: bytes[8] = (itob box%array_length%9#0)
        let tmp%80#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%13#0)
        (log tmp%80#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@24: // nested_read_route_L247
        let tmp%81#0: uint64 = (txn OnCompletion)
        let tmp%82#0: bool = (! tmp%81#0)
        (assert tmp%82#0) // OnCompletion is not NoOp
        let tmp%83#0: uint64 = (txn ApplicationID)
        (assert tmp%83#0) // can only call when not creating
        let box%box_extract%17#0: Encoded(uint64) = (box_extract "box" 0u 8u)
        let a#0: uint64 = (btoi box%box_extract%17#0)
        let box%box_extract%18#0: Encoded(uint64) = (box_extract "box" 12u 8u)
        let b#0: uint64 = (btoi box%box_extract%18#0)
        let box%box_extract%19#0: bytes = (box_extract "box" 38u 2u)
        let box%btoi%3#0: uint64 = (btoi box%box_extract%19#0)
        (assert box%btoi%3#0) // index out of bounds
        let box%box_extract%20#0: bytes = (box_extract "box" 40u 2u)
        let box%btoi%4#0: uint64 = (btoi box%box_extract%20#0)
        let box%offset%28#0: uint64 = (+ 38u box%btoi%4#0)
        let box%box_extract%21#0: bytes = (box_extract "box" box%offset%28#0 2u)
        let box%btoi%5#0: uint64 = (btoi box%box_extract%21#0)
        (assert box%btoi%5#0) // index out of bounds
        let box%offset%29#0: uint64 = (+ box%offset%28#0 2u)
        let box%box_extract%22#0: Encoded(uint64) = (box_extract "box" box%offset%29#0 8u)
        let arr_0_0#0: uint64 = (btoi box%box_extract%22#0)
        let box%box_extract%23#0: Encoded(uint64) = (box_extract "box" 20u 8u)
        let c#0: uint64 = (btoi box%box_extract%23#0)
        let box%box_extract%24#0: Encoded(uint64) = (box_extract "box" 30u 8u)
        let d#0: uint64 = (btoi box%box_extract%24#0)
        let box%box_extract%25#0: bytes = (box_extract "box" 10u 2u)
        let box%btoi%6#0: uint64 = (btoi box%box_extract%25#0)
        let box%box_extract%26#0: bytes = (box_extract "box" box%btoi%6#0 2u)
        let box%btoi%7#0: uint64 = (btoi box%box_extract%26#0)
        let box%index_ok%2#0: bool = (< 1u box%btoi%7#0)
        (assert box%index_ok%2#0) // index out of bounds
        let box%add%7#0: uint64 = (+ box%btoi%6#0 4u)
        let box%box_extract%27#0: bytes = (box_extract "box" box%add%7#0 2u)
        let box%btoi%8#0: uint64 = (btoi box%box_extract%27#0)
        let box%offset%35#0: uint64 = (+ box%btoi%6#0 box%btoi%8#0)
        let box%offset%36#0: uint64 = (+ box%offset%35#0 18u)
        let box%box_extract%28#0: bytes = (box_extract "box" box%offset%36#0 2u)
        let box%btoi%9#0: uint64 = (btoi box%box_extract%28#0)
        (assert box%btoi%9#0) // index out of bounds
        let box%add%9#0: uint64 = (+ box%offset%36#0 2u)
        let box%box_extract%29#0: bytes = (box_extract "box" box%add%9#0 2u)
        let box%btoi%10#0: uint64 = (btoi box%box_extract%29#0)
        let box%offset%37#0: uint64 = (+ box%offset%36#0 box%btoi%10#0)
        let box%box_extract%30#0: bytes = (box_extract "box" box%offset%37#0 2u)
        let box%btoi%11#0: uint64 = (btoi box%box_extract%30#0)
        (assert box%btoi%11#0) // index out of bounds
        let box%offset%38#0: uint64 = (+ box%offset%37#0 2u)
        let box%box_extract%31#0: Encoded(uint64) = (box_extract "box" box%offset%38#0 8u)
        let woah_1_0_0#0: uint64 = (btoi box%box_extract%31#0)
        let tmp%0#3: uint64 = (+ a#0 b#0)
        let tmp%1#6: uint64 = (+ tmp%0#3 arr_0_0#0)
        let tmp%2#6: uint64 = (+ tmp%1#6 c#0)
        let tmp%3#0: uint64 = (+ tmp%2#6 d#0)
        let tmp%4#4: uint64 = (+ tmp%3#0 woah_1_0_0#0)
        let aggregate%val_as_bytes%14#0: bytes[8] = (itob tmp%4#4)
        let tmp%87#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%14#0)
        (log tmp%87#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@25: // sum_dynamic_arr_struct_route_L259
        let tmp%88#0: uint64 = (txn OnCompletion)
        let tmp%89#0: bool = (! tmp%88#0)
        (assert tmp%89#0) // OnCompletion is not NoOp
        let tmp%90#0: uint64 = (txn ApplicationID)
        (assert tmp%90#0) // can only call when not creating
        let box%box_extract%32#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" 0u 8u)
        let values%0#4: uint64 = (btoi box%box_extract%32#0)
        let tmp%0#1: bool = (== values%0#4 1u)
        (assert tmp%0#1) // expected 1
        let box%box_extract%33#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" 10u 8u)
        let values%1#1: uint64 = (btoi box%box_extract%33#0)
        let tmp%1#1: bool = (== values%1#1 2u)
        (assert tmp%1#1) // expected 2
        let total#0: uint64 = (+ values%0#4 values%1#1)
        let box%box_extract%36#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%array_length%10#0: uint64 = (btoi box%box_extract%36#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@26
    block@26: // for_header_L264
        let continue_looping%0#0: bool = (< item_index_internal%0#0 box%array_length%10#0)
        goto continue_looping%0#0 ? block@27 : block@28
    block@27: // for_body_L265
        let box%box_extract%37#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%btoi%12#0: uint64 = (btoi box%box_extract%37#0)
        let box%index_ok%5#0: bool = (< item_index_internal%0#0 box%btoi%12#0)
        (assert box%index_ok%5#0) // index out of bounds
        let box%index_bytes_offset%5#0: uint64 = (* item_index_internal%0#0 8u)
        let box%offset%45#0: uint64 = (+ box%index_bytes_offset%5#0 22u)
        let box%box_extract%38#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" box%offset%45#0 8u)
        let val#0: uint64 = (btoi box%box_extract%38#0)
        let total#0: uint64 = (+ total#0 val#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@26
    block@28: // after_for_L264
        let box%box_extract%39#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%13#0: uint64 = (btoi box%box_extract%39#0)
        let box%box_extract%40#0: bytes = (box_extract "dynamic_arr_struct" box%btoi%13#0 2u)
        let box%array_length%11#0: uint64 = (btoi box%box_extract%40#0)
        let item_index_internal%1#0: uint64 = 0u
        goto block@29
    block@29: // for_header_L266
        let continue_looping%1#0: bool = (< item_index_internal%1#0 box%array_length%11#0)
        goto continue_looping%1#0 ? block@30 : block@31
    block@30: // for_body_L267
        let box%box_extract%41#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%14#0: uint64 = (btoi box%box_extract%41#0)
        let box%index_bytes_offset%6#0: uint64 = (* item_index_internal%1#0 8u)
        let box%element_offset%6#0: uint64 = (+ box%index_bytes_offset%6#0 2u)
        let box%offset%48#0: uint64 = (+ box%btoi%14#0 box%element_offset%6#0)
        let box%box_extract%42#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" box%offset%48#0 8u)
        let val#0: uint64 = (btoi box%box_extract%42#0)
        let total#0: uint64 = (+ total#0 val#0)
        let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
        goto block@29
    block@31: // after_for_L266
        let aggregate%val_as_bytes%15#0: bytes[8] = (itob total#0)
        let tmp%94#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%15#0)
        (log tmp%94#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@32: // create_dynamic_box_route_L270
        let tmp%95#0: uint64 = (txn OnCompletion)
        let tmp%96#0: bool = (! tmp%95#0)
        (assert tmp%96#0) // OnCompletion is not NoOp
        let tmp%97#0: uint64 = (txn ApplicationID)
        (assert tmp%97#0) // can only call when not creating
        (box_del "dynamic_box")
        (box_put "dynamic_box" 0x0000)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@33: // delete_dynamic_box_route_L274
        let tmp%99#0: uint64 = (txn OnCompletion)
        let tmp%100#0: bool = (! tmp%99#0)
        (assert tmp%100#0) // OnCompletion is not NoOp
        let tmp%101#0: uint64 = (txn ApplicationID)
        (assert tmp%101#0) // can only call when not creating
        (box_del "dynamic_box")
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@34: // append_dynamic_box_route_L278
        let tmp%103#0: uint64 = (txn OnCompletion)
        let tmp%104#0: bool = (! tmp%103#0)
        (assert tmp%104#0) // OnCompletion is not NoOp
        let tmp%105#0: uint64 = (txn ApplicationID)
        (assert tmp%105#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let times#0: uint64 = (btoi reinterpret_Encoded(uint64)%5#0)
        let box%box_extract%43#0: Encoded(uint16) = (box_extract "dynamic_box" 0u 2u)
        let arr_len#0: uint64 = (btoi box%box_extract%43#0)
        let tmp%1#6: uint64 = (+ arr_len#0 times#0)
        let tmp%2#6: uint64 = (* tmp%1#6 8u)
        let tmp%3#0: uint64 = (+ 2u tmp%2#6)
        (box_resize "dynamic_box" tmp%3#0)
        let i#0: uint64 = 0u
        goto block@35
    block@35: // for_header_L286
        let continue_looping%0#0: bool = (< i#0 times#0)
        goto continue_looping%0#0 ? block@36 : block@37
    block@36: // for_body_L287
        let aggregate%val_as_bytes%16#0: bytes[8] = (itob i#0)
        let box%index_bytes_offset%7#0: uint64 = (* arr_len#0 8u)
        let box%offset%51#0: uint64 = (+ 2u box%index_bytes_offset%7#0)
        (box_replace "dynamic_box" box%offset%51#0 aggregate%val_as_bytes%16#0)
        let arr_len#0: uint64 = (+ arr_len#0 1u)
        let i#0: uint64 = (+ i#0 1u)
        goto block@35
    block@37: // after_for_L286
        let aggregate%val_as_bytes%17#0: bytes[8] = (itob arr_len#0)
        let aggregate%bitlen%4#0: uint64 = (bitlen aggregate%val_as_bytes%17#0)
        let aggregate%no_overflow%4#0: bool = (<= aggregate%bitlen%4#0 16u)
        (assert aggregate%no_overflow%4#0) // overflow
        let aggregate%uint16%4#0: bytes = ((extract 6 2) aggregate%val_as_bytes%17#0)
        (box_replace "dynamic_box" 0u aggregate%uint16%4#0)
        let box%box_extract%44#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let box%array_length%12#0: uint64 = (btoi box%box_extract%44#0)
        let aggregate%val_as_bytes%18#0: bytes[8] = (itob box%array_length%12#0)
        let tmp%110#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%18#0)
        (log tmp%110#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@38: // pop_dynamic_box_route_L293
        let tmp%111#0: uint64 = (txn OnCompletion)
        let tmp%112#0: bool = (! tmp%111#0)
        (assert tmp%112#0) // OnCompletion is not NoOp
        let tmp%113#0: uint64 = (txn ApplicationID)
        (assert tmp%113#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let times#0: uint64 = (btoi reinterpret_Encoded(uint64)%6#0)
        let box%box_extract%45#0: Encoded(uint16) = (box_extract "dynamic_box" 0u 2u)
        let tmp%0#3: uint64 = (btoi box%box_extract%45#0)
        let arr_len#0: uint64 = (- tmp%0#3 times#0)
        let aggregate%val_as_bytes%19#0: bytes[8] = (itob arr_len#0)
        let aggregate%bitlen%5#0: uint64 = (bitlen aggregate%val_as_bytes%19#0)
        let aggregate%no_overflow%5#0: bool = (<= aggregate%bitlen%5#0 16u)
        (assert aggregate%no_overflow%5#0) // overflow
        let aggregate%uint16%5#0: bytes = ((extract 6 2) aggregate%val_as_bytes%19#0)
        (box_replace "dynamic_box" 0u aggregate%uint16%5#0)
        let tmp%3#0: uint64 = (* arr_len#0 8u)
        let tmp%4#4: uint64 = (+ 2u tmp%3#0)
        (box_resize "dynamic_box" tmp%4#4)
        let box%box_extract%46#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let box%array_length%13#0: uint64 = (btoi box%box_extract%46#0)
        let aggregate%val_as_bytes%20#0: bytes[8] = (itob box%array_length%13#0)
        let tmp%118#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%20#0)
        (log tmp%118#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@39: // sum_dynamic_box_route_L304
        let tmp%119#0: uint64 = (txn OnCompletion)
        let tmp%120#0: bool = (! tmp%119#0)
        (assert tmp%120#0) // OnCompletion is not NoOp
        let tmp%121#0: uint64 = (txn ApplicationID)
        (assert tmp%121#0) // can only call when not creating
        let total#0: uint64 = 0u
        let box%box_extract%47#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let box%array_length%14#0: uint64 = (btoi box%box_extract%47#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@40
    block@40: // for_header_L307
        let continue_looping%0#0: bool = (< item_index_internal%0#0 box%array_length%14#0)
        goto continue_looping%0#0 ? block@41 : block@42
    block@41: // for_body_L308
        let box%index_bytes_offset%8#0: uint64 = (* item_index_internal%0#0 8u)
        let box%element_offset%8#0: uint64 = (+ box%index_bytes_offset%8#0 2u)
        let box%box_extract%48#0: Encoded(uint64) = (box_extract "dynamic_box" box%element_offset%8#0 8u)
        let val#0: uint64 = (btoi box%box_extract%48#0)
        let total#0: uint64 = (+ total#0 val#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@40
    block@42: // after_for_L307
        let aggregate%val_as_bytes%21#0: bytes[8] = (itob total#0)
        let tmp%125#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%21#0)
        (log tmp%125#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@43: // slice_box_route_L311
        let tmp%126#0: uint64 = (txn OnCompletion)
        let tmp%127#0: bool = (! tmp%126#0)
        (assert tmp%127#0) // OnCompletion is not NoOp
        let tmp%128#0: uint64 = (txn ApplicationID)
        (assert tmp%128#0) // can only call when not creating
        (box_del "0")
        (box_put "0" 0x54657374696e672074657374696e6720313233)
        let (tmp%0#3: uint64, tmp%1#1: bool) = (box_len "0")
        let tmp%3#0: uint64 = (select tmp%0#3 0u tmp%0#3)
        let tmp%4#0: bool = (< 7u tmp%0#3)
        let tmp%5#0: uint64 = (select tmp%0#3 7u tmp%4#0)
        let tmp%6#3: uint64 = (- tmp%5#0 tmp%3#0)
        let tmp%7#3: bytes = (box_extract "0" tmp%3#0 tmp%6#3)
        let tmp%8#3: bool = (== tmp%7#3 0x54657374696e67)
        (assert tmp%8#3)
        (box_del 0x424f585f43)
        (box_put 0x424f585f43 0x000548656c6c6f)
        let (tmp%10#0: uint64, tmp%11#2: bool) = (box_len 0x424f585f43)
        let tmp%12#1: bool = (< 2u tmp%10#0)
        let tmp%13#2: uint64 = (select tmp%10#0 2u tmp%12#1)
        let tmp%14#2: bool = (< 10u tmp%10#0)
        let tmp%15#2: uint64 = (select tmp%10#0 10u tmp%14#2)
        let tmp%16#0: uint64 = (- tmp%15#2 tmp%13#2)
        let tmp%17#2: bytes = (box_extract 0x424f585f43 tmp%13#2 tmp%16#0)
        let tmp%18#2: bool = (== tmp%17#2 0x48656c6c6f)
        (assert tmp%18#2)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@44: // arc4_box_route_L320
        let tmp%130#0: uint64 = (txn OnCompletion)
        let tmp%131#0: bool = (! tmp%130#0)
        (assert tmp%131#0) // OnCompletion is not NoOp
        let tmp%132#0: uint64 = (txn ApplicationID)
        (assert tmp%132#0) // can only call when not creating
        (box_put 0x64 0x00010203)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@45: // test_box_ref_route_L330
        let tmp%134#0: uint64 = (txn OnCompletion)
        let tmp%135#0: bool = (! tmp%134#0)
        (assert tmp%135#0) // OnCompletion is not NoOp
        let tmp%136#0: uint64 = (txn ApplicationID)
        (assert tmp%136#0) // can only call when not creating
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "blob")
        let tmp%0#1: bool = (! maybe_exists%0#0)
        (assert tmp%0#1) // no data
        let tmp%4#0: bool = (box_create "blob" 32u)
        (assert tmp%4#0)
        let sender_bytes#0: bytes = (txn Sender)
        let app_address#0: bytes = (global CurrentApplicationAddress)
        (box_replace "blob" 0u sender_bytes#0)
        (box_resize "blob" 8000u)
        (box_splice "blob" 0u 0u app_address#0)
        (box_replace "blob" 64u 0x68656c6c6f)
        let prefix#0: bytes = (box_extract "blob" 0u 69u)
        let tmp%10#1: bytes = (concat app_address#0 sender_bytes#0)
        let tmp%11#1: bytes = (concat tmp%10#1 0x68656c6c6f)
        let tmp%12#1: bool = (== prefix#0 tmp%11#1)
        (assert tmp%12#1)
        let tmp%13#0: bool = (box_del "blob")
        (assert tmp%13#0)
        let (value#3: bytes, exists#0: bool) = (box_get "blob")
        let tmp%15#1: bool = (! exists#0)
        (assert tmp%15#1)
        let tmp%16#1: bool = (== value#3 0x)
        (assert tmp%16#1)
        let state_get%0#0: bytes = (select sender_bytes#0 value#3 exists#0)
        let tmp%17#0: bool = (== state_get%0#0 sender_bytes#0)
        (assert tmp%17#0)
        let tmp%18#1: bytes = (concat sender_bytes#0 app_address#0)
        (box_put "blob" tmp%18#1)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "blob")
        let tmp%19#1: bool = (== value%0#0 64u)
        (assert tmp%19#1)
        (box_create "box_ref" 32u)
        (box_del "box_ref")
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@46: // box_map_test_route_L378
        let tmp%138#0: uint64 = (txn OnCompletion)
        let tmp%139#0: bool = (! tmp%138#0)
        (assert tmp%139#0) // OnCompletion is not NoOp
        let tmp%140#0: uint64 = (txn ApplicationID)
        (assert tmp%140#0) // can only call when not creating
        let box_0#0: bytes = (itob 0u)
        (box_del box_0#0)
        (box_put box_0#0 "Hmmmmm")
        let (value%0#0: uint64, check%0#0: bool) = (box_len box_0#0)
        let tmp%1#1: bool = (== value%0#0 6u)
        (assert tmp%1#1)
        let encoded_value%5#0: bytes[8] = (itob 1u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get encoded_value%5#0)
        let state_get%0#0: bytes = (select "default" maybe_value%0#0 maybe_exists%0#0)
        let tmp%5#1: bool = (== state_get%0#0 "default")
        (assert tmp%5#1)
        let (value#2: uint64, exists#0: bool) = (box_len encoded_value%5#0)
        let tmp%6#1: bool = (! exists#0)
        (assert tmp%6#1)
        (box_del encoded_value%5#0)
        (box_put encoded_value%5#0 "hello")
        (box_del encoded_value%5#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@47: // box_map_set_route_L402
        let tmp%142#0: uint64 = (txn OnCompletion)
        let tmp%143#0: bool = (! tmp%142#0)
        (assert tmp%143#0) // OnCompletion is not NoOp
        let tmp%144#0: uint64 = (txn ApplicationID)
        (assert tmp%144#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%7#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let key#0: uint64 = (btoi reinterpret_Encoded(uint64)%7#0)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 2)
        let value#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let encoded_value%0#0: bytes[8] = (itob key#0)
        (box_del encoded_value%0#0)
        (box_put encoded_value%0#0 value#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@48: // box_map_get_route_L406
        let tmp%148#0: uint64 = (txn OnCompletion)
        let tmp%149#0: bool = (! tmp%148#0)
        (assert tmp%149#0) // OnCompletion is not NoOp
        let tmp%150#0: uint64 = (txn ApplicationID)
        (assert tmp%150#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%8#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let key#0: uint64 = (btoi reinterpret_Encoded(uint64)%8#0)
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let (aggregate%box_get%20#0: bytes, aggregate%box_get%21#0: bool) = (box_get encoded_value%0#0)
        (assert aggregate%box_get%21#0) // check self.box_map entry exists
        let aggregate%length%4#0: uint64 = (len aggregate%box_get%20#0)
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 aggregate%box_get%20#0)
        let tmp%155#0: bytes = (concat 0x151f7c75 aggregate%encoded_value%4#0)
        (log tmp%155#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@49: // box_map_del_route_L410
        let tmp%156#0: uint64 = (txn OnCompletion)
        let tmp%157#0: bool = (! tmp%156#0)
        (assert tmp%157#0) // OnCompletion is not NoOp
        let tmp%158#0: uint64 = (txn ApplicationID)
        (assert tmp%158#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%9#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let key#0: uint64 = (btoi reinterpret_Encoded(uint64)%9#0)
        let encoded_value%0#0: bytes[8] = (itob key#0)
        (box_del encoded_value%0#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@50: // box_map_exists_route_L414
        let tmp%161#0: uint64 = (txn OnCompletion)
        let tmp%162#0: bool = (! tmp%161#0)
        (assert tmp%162#0) // OnCompletion is not NoOp
        let tmp%163#0: uint64 = (txn ApplicationID)
        (assert tmp%163#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%10#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let key#0: uint64 = (btoi reinterpret_Encoded(uint64)%10#0)
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len encoded_value%0#0)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u maybe_exists%0#0)
        let tmp%168#0: bytes = (concat 0x151f7c75 aggregate%encoded_bool%1#0)
        (log tmp%168#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@51: // bare_routing_L75
        let tmp%169#0: uint64 = (txn OnCompletion)
        goto tmp%169#0 ? block@53 : block@52
    block@52: // __algopy_default_create_L1
        let tmp%170#0: uint64 = (txn ApplicationID)
        let tmp%171#0: bool = (! tmp%170#0)
        (assert tmp%171#0) // can only call when creating
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@53: // after_if_else_L75
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@54
    block@54: // after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router___L1
        return tmp%0#1