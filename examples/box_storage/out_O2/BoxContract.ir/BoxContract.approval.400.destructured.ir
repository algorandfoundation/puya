main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@4 : block@44
    block@4: // abi_routing_L80
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "set_boxes(uint64,byte[],string)void" => block@6, method "check_keys()void" => block@7, method "create_many_ints()void" => block@8, method "set_many_ints(uint64,uint64)void" => block@9, method "sum_many_ints()uint64" => block@152, method "delete_boxes()void" => block@11, method "indirect_extract_and_replace()void" => block@12, method "read_boxes()(uint64,byte[],string,uint64)" => block@13, method "boxes_exist()(bool,bool,bool,bool)" => block@14, method "create_dynamic_arr_struct()void" => block@15, method "delete_dynamic_arr_struct()void" => block@16, method "append_dynamic_arr_struct(uint64)uint64" => block@17, method "pop_dynamic_arr_struct(uint64)uint64" => block@18, method "set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void" => block@19, method "nested_write(uint64,uint64)void" => block@20, method "nested_read(uint64,uint64,uint64)uint64" => block@21, method "sum_dynamic_arr_struct()uint64" => block@22, method "create_bools()void" => block@23, method "set_bool(uint64,bool)void" => block@24, method "sum_bools(uint64)uint64" => block@25, method "create_dynamic_box()void" => block@26, method "delete_dynamic_box()void" => block@27, method "append_dynamic_box(uint64)uint64" => block@28, method "pop_dynamic_box(uint64)uint64" => block@29, method "sum_dynamic_box()uint64" => block@30, method "write_dynamic_box(uint64,uint64)void" => block@31, method "write_dynamic_arr_struct(uint64,uint64)void" => block@32, method "slice_box()void" => block@33, method "arc4_box()void" => block@34, method "test_box_ref()void" => block@35, method "box_map_test()void" => block@36, method "box_map_set(uint64,string)void" => block@37, method "box_map_get(uint64)string" => block@38, method "box_map_del(uint64)void" => block@39, method "box_map_exists(uint64)bool" => block@40, * => block@43}
    block@6: // set_boxes_route_L95
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let a#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let b#1: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let c#1: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        let encoded_value%0#0: bytes[8] = (itob a#0)
        (box_put "box_a" encoded_value%0#0)
        (box_del "b")
        (box_put "b" b#1)
        (box_del 0x424f585f43)
        (box_put 0x424f585f43 c#1)
        let tmp%0#27: bytes = ((extract 2 0) b#1)
        (box_del "box_d")
        (box_put "box_d" tmp%0#27)
        (box_create "box_large" 6160u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 42u)
        (box_replace "box_large" 4096u aggregate%val_as_bytes%0#0)
        (box_replace "box_large" 4096u 0x000000000000002a)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "box_a")
        (assert aggregate%box_get%1#0) // check self.box_a exists
        let maybe_value_converted%0#1: uint64 = (btoi aggregate%box_get%0#0)
        let tmp%5#2: uint64 = (+ maybe_value_converted%0#1 3u)
        let encoded_value%2#1: bytes[8] = (itob tmp%5#2)
        (box_put "box_a" encoded_value%2#1)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "box_a")
        let tmp%6#1: bool = (== value%0#0 8u)
        (assert tmp%6#1)
        let (value%1#1: uint64, check%1#1: bool) = (box_len "b")
        let tmp%7#0: uint64 = (len b#1)
        let tmp%8#0: bool = (== value%1#1 tmp%7#0)
        (assert tmp%8#0)
        let (value%2#1: uint64, check%2#1: bool) = (box_len 0x424f585f43)
        (assert check%2#1) // check self.box_c exists
        let tmp%9#0: uint64 = (len c#1)
        let tmp%10#0: bool = (== value%2#1 tmp%9#0)
        (assert tmp%10#0)
        let (value%3#1: uint64, check%3#1: bool) = (box_len "box_d")
        let tmp%12#3: uint64 = (len tmp%0#27)
        let tmp%13#0: bool = (== value%3#1 tmp%12#3)
        (assert tmp%13#0)
        let tmp%14#3: bytes = (box_extract 0x424f585f43 0u 1u)
        let extract%0#0: bytes = ((extract 0 1) c#1)
        let tmp%15#0: bool = (== tmp%14#3 extract%0#0)
        (assert tmp%15#0)
        let tmp%18#2: uint64 = (- value%2#1 1u)
        let tmp%19#1: bytes = (box_extract 0x424f585f43 tmp%18#2 1u)
        let tmp%21#1: uint64 = (- tmp%9#0 1u)
        let extract%1#0: bytes = (extract3 c#1 tmp%21#1 1u)
        let tmp%22#0: bool = (== tmp%19#1 extract%1#0)
        (assert tmp%22#0)
        let tmp%25#0: bool = (< 1u value%2#1)
        let tmp%26#0: uint64 = (select value%2#1 1u tmp%25#0)
        let tmp%27#0: uint64 = (- value%2#1 tmp%26#0)
        let tmp%29#0: bytes = (box_extract 0x424f585f43 0u tmp%27#0)
        let is_out_of_bounds%0#0: bool = (>= 1u tmp%9#0)
        let bounded_offset%0#0: uint64 = (select 1u tmp%9#0 is_out_of_bounds%0#0)
        let bounded_index%0#0: uint64 = (- tmp%9#0 bounded_offset%0#0)
        let tmp%30#0: bytes = (substring3 c#1 0u bounded_index%0#0)
        let tmp%31#0: bool = (== tmp%29#0 tmp%30#0)
        (assert tmp%31#0)
        let tmp%34#0: bool = (< 2u value%2#1)
        let tmp%35#0: uint64 = (select value%2#1 2u tmp%34#0)
        let tmp%37#0: bytes = (box_extract 0x424f585f43 0u tmp%35#0)
        let is_out_of_bounds%1#0: bool = (>= 2u tmp%9#0)
        let bounded_index%1#0: uint64 = (select 2u tmp%9#0 is_out_of_bounds%1#0)
        let tmp%38#0: bytes = (substring3 c#1 0u bounded_index%1#0)
        let tmp%39#0: bool = (== tmp%37#0 tmp%38#0)
        (assert tmp%39#0)
        let tmp%40#0: bytes = (box_extract "box_d" 0u 1u)
        let extract%2#0: bytes = ((extract 2 1) b#1)
        let tmp%42#0: bool = (== tmp%40#0 extract%2#0)
        (assert tmp%42#0)
        let tmp%45#0: uint64 = (- value%3#1 1u)
        let tmp%46#0: bytes = (box_extract "box_d" tmp%45#0 1u)
        let tmp%49#0: uint64 = (- tmp%12#3 1u)
        let extract%3#0: bytes = (extract3 tmp%0#27 tmp%49#0 1u)
        let tmp%50#0: bool = (== tmp%46#0 extract%3#0)
        (assert tmp%50#0)
        let tmp%53#0: bool = (< 1u value%3#1)
        let tmp%54#0: uint64 = (select value%3#1 1u tmp%53#0)
        let tmp%55#0: uint64 = (- value%3#1 tmp%54#0)
        let tmp%57#0: bytes = (box_extract "box_d" 0u tmp%55#0)
        let is_out_of_bounds%2#0: bool = (>= 1u tmp%12#3)
        let bounded_offset%1#0: uint64 = (select 1u tmp%12#3 is_out_of_bounds%2#0)
        let bounded_index%2#0: uint64 = (- tmp%12#3 bounded_offset%1#0)
        let tmp%59#0: bytes = (substring3 tmp%0#27 0u bounded_index%2#0)
        let tmp%60#0: bool = (== tmp%57#0 tmp%59#0)
        (assert tmp%60#0)
        let tmp%63#0: bool = (< 5u value%3#1)
        let tmp%64#0: uint64 = (select value%3#1 5u tmp%63#0)
        let tmp%66#0: bytes = (box_extract "box_d" 0u tmp%64#0)
        let is_out_of_bounds%3#0: bool = (>= 5u tmp%12#3)
        let bounded_index%3#0: uint64 = (select 5u tmp%12#3 is_out_of_bounds%3#0)
        let tmp%68#0: bytes = (substring3 tmp%0#27 0u bounded_index%3#0)
        let tmp%69#0: bool = (== tmp%66#0 tmp%68#0)
        (assert tmp%69#0)
        let tmp%72#0: bool = (< 2u value%3#1)
        let tmp%73#0: uint64 = (select value%3#1 2u tmp%72#0)
        let tmp%75#0: bytes = (box_extract "box_d" 0u tmp%73#0)
        let is_out_of_bounds%4#0: bool = (>= 2u tmp%12#3)
        let bounded_index%4#0: uint64 = (select 2u tmp%12#3 is_out_of_bounds%4#0)
        let tmp%77#0: bytes = (substring3 tmp%0#27 0u bounded_index%4#0)
        let tmp%78#0: bool = (== tmp%75#0 tmp%77#0)
        (assert tmp%78#0)
        let (value%4#0: uint64, check%4#0: bool) = (box_len "box_large")
        let tmp%79#0: bool = (== value%4#0 6160u)
        (assert tmp%79#0)
        exit 1u
    block@7: // check_keys_route_L131
        exit 1u
    block@8: // create_many_ints_route_L138
        (box_create "many_ints" 4104u)
        exit 1u
    block@9: // set_many_ints_route_L142
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let box%element_offset%0#0: uint64 = (* index#0 8u)
        (box_replace "many_ints" box%element_offset%0#0 reinterpret_Encoded(uint64)%1#0)
        exit 1u
    block@152: // while_top_L20
        let tmp%1#8: uint64 = (global OpcodeBudget)
        let tmp%2#24: bool = (> 10510u tmp%1#8)
        goto tmp%2#24 ? block@153 : block@157
    block@153: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@152
    block@157: // after_while_L20
        let total#0: uint64 = 0u
        let (aggregate%box_get%2#0: uint64, aggregate%box_get%3#0: bool) = (box_len "many_ints")
        (assert aggregate%box_get%3#0) // check self.many_ints exists
        let item_index_internal%0#0: uint64 = 0u
        goto block@130
    block@130: // for_header_L150
        let continue_looping%0#0: bool = (< item_index_internal%0#0 513u)
        goto continue_looping%0#0 ? block@131 : block@132
    block@131: // for_body_L151
        let box%element_offset%0#0: uint64 = (* item_index_internal%0#0 8u)
        let box%box_extract%0#0: bytes = (box_extract "many_ints" box%element_offset%0#0 8u)
        let val#0: uint64 = (btoi box%box_extract%0#0)
        let total#0: uint64 = (+ total#0 val#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@130
    block@132: // after_for_L150
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob total#0)
        let tmp%2#7: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%1#0)
        (log tmp%2#7)
        exit 1u
    block@11: // delete_boxes_route_L154
        (box_del "box_a")
        (box_del "b")
        (box_del 0x424f585f43)
        let (maybe_value%0#0: bytes, a_exists#0: bool) = (box_get "box_a")
        let a#0: uint64 = (btoi maybe_value%0#0)
        let state_get%0#2: uint64 = (select 42u a#0 a_exists#0)
        let tmp%0#4: bool = (== state_get%0#2 42u)
        (assert tmp%0#4)
        let (maybe_value%1#1: bytes, maybe_exists%1#1: bool) = (box_get "b")
        let state_get%1#0: bytes = (select 0x00023432 maybe_value%1#1 maybe_exists%1#1)
        let tmp%2#7: bytes = ((extract 2 0) state_get%1#0)
        let tmp%3#0: bool = (== tmp%2#7 0x3432)
        (assert tmp%3#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#2: bool) = (box_get 0x424f585f43)
        let state_get%2#0: bytes = (select 0x00023432 maybe_value%2#0 maybe_exists%2#2)
        let tmp%6#1: bool = (== state_get%2#0 0x00023432)
        (assert tmp%6#1)
        let tmp%7#5: bool = (! a_exists#0)
        (assert tmp%7#5)
        let tmp%8#0: bool = (! a#0)
        (assert tmp%8#0)
        (box_del "box_large")
        exit 1u
    block@12: // indirect_extract_and_replace_route_L167
        let box%box_extract%0#0: bytes = (box_extract "box_large" 4096u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#1: uint64 = (+ values%0#0 1u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%0#1)
        (box_replace "box_large" 4096u aggregate%val_as_bytes%2#0)
        exit 1u
    block@13: // read_boxes_route_L173
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "box_a")
        (assert aggregate%box_get%5#0) // check Box exists
        let maybe_value_converted%0#1: uint64 = (btoi aggregate%box_get%4#0)
        let tmp%0#1: uint64 = (+ maybe_value_converted%0#1 1u)
        let tmp%1#8: uint64 = (- tmp%0#1 1u)
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get "b")
        (assert aggregate%box_get%7#0) // check self.box_b exists
        let tmp%2#7: bytes = ((extract 2 0) aggregate%box_get%6#0)
        let (aggregate%box_get%8#0: bytes, aggregate%box_get%9#0: bool) = (box_get 0x424f585f43)
        (assert aggregate%box_get%9#0) // check self.box_c exists
        let box%box_extract%0#0: bytes = (box_extract "box_large" 4096u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%1#8)
        let aggregate%length%2#0: uint64 = (len tmp%2#7)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 tmp%2#7)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%3#0 0x0014)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%2#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 20u aggregate%data_length%0#0)
        let aggregate%as_bytes%4#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%4#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob values%0#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%val_as_bytes%4#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%encoded_value%2#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 aggregate%box_get%8#0)
        let tmp%5#5: bytes = (concat 0x151f7c75 aggregate%concat%1#0)
        (log tmp%5#5)
        exit 1u
    block@14: // boxes_exist_route_L182
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "box_a")
        let (_%1#1: uint64, maybe_exists%1#1: bool) = (box_len "b")
        let (_%2#1: uint64, maybe_exists%2#2: bool) = (box_len 0x424f585f43)
        let (_%3#1: uint64, maybe_exists%3#1: bool) = (box_len "box_large")
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u maybe_exists%0#0)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u maybe_exists%1#1)
        let aggregate%set_bit%1#0: bytes[1] = (setbit aggregate%set_bit%0#0 2u maybe_exists%2#2)
        let aggregate%set_bit%2#0: bytes[1] = (setbit aggregate%set_bit%1#0 3u maybe_exists%3#1)
        let tmp%5#5: bytes = (concat 0x151f7c75 aggregate%set_bit%2#0)
        (log tmp%5#5)
        exit 1u
    block@15: // create_dynamic_arr_struct_route_L186
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#8: uint64 = (txn NumAppArgs)
        let tmp%2#0: uint64 = (* tmp%1#8 2u)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%0#1)
        let aggregate%head%6#0: bytes = (concat aggregate%val_as_bytes%5#0 0x0014)
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%2#0)
        let aggregate%head%7#0: bytes = (concat aggregate%head%6#0 aggregate%val_as_bytes%6#0)
        let aggregate%concat%3#0: bytes = (concat aggregate%head%7#0 0x001600000000)
        (box_del "dynamic_arr_struct")
        (box_put "dynamic_arr_struct" aggregate%concat%3#0)
        exit 1u
    block@16: // delete_dynamic_arr_struct_route_L195
        (box_del "dynamic_arr_struct")
        exit 1u
    block@17: // append_dynamic_arr_struct_route_L199
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let times#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let box%box_extract%0#0: bytes = (box_extract "dynamic_arr_struct" 10u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#4: bool = (== values%0#0 2u)
        (assert tmp%0#4) // expected 2
        let box%box_extract%1#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let arr_len#0: uint64 = (btoi box%box_extract%1#0)
        let box%box_extract%2#1: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%2#1)
        let box%box_extract%3#1: bytes = (box_extract "dynamic_arr_struct" box%btoi%0#0 2u)
        let arr2_len#0: uint64 = (btoi box%box_extract%3#1)
        let arr_size#3: uint64 = (+ arr_len#0 times#0)
        let tmp%3#6: uint64 = (* arr_size#3 8u)
        let head_and_dyn_arr#0: uint64 = (+ tmp%3#6 22u)
        let tmp%1#8: uint64 = (* arr2_len#0 8u)
        let dyn_arr2_index#1: uint64 = (+ 2u tmp%1#8)
        let tmp%3#6: uint64 = (+ head_and_dyn_arr#0 dyn_arr2_index#1)
        (box_resize "dynamic_arr_struct" tmp%3#6)
        let tmp%3#6: uint64 = (* arr_len#0 8u)
        let tmp%5#2: uint64 = (+ tmp%3#6 22u)
        let tmp%6#2: uint64 = (* times#0 8u)
        let tmp%7#3: bytes = (bzero tmp%6#2)
        (box_splice "dynamic_arr_struct" tmp%5#2 0u tmp%7#3)
        let i#0: uint64 = 0u
        goto block@113
    block@113: // for_header_L217
        let continue_looping%0#0: bool = (< i#0 times#0)
        goto continue_looping%0#0 ? block@114 : block@115
    block@114: // for_body_L218
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob i#0)
        let box%element_offset%0#0: uint64 = (* arr_len#0 8u)
        let box%offset%5#4: uint64 = (+ 22u box%element_offset%0#0)
        (box_replace "dynamic_arr_struct" box%offset%5#4 aggregate%val_as_bytes%7#0)
        let arr_len#0: uint64 = (+ arr_len#0 1u)
        let i#0: uint64 = (+ i#0 1u)
        goto block@113
    block@115: // after_for_L217
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob arr_len#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%8#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 16u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint16%0#0: bytes = ((extract 6 2) aggregate%val_as_bytes%8#0)
        (box_replace "dynamic_arr_struct" 20u aggregate%uint16%0#0)
        let tmp%3#6: uint64 = (* arr_len#0 8u)
        let tmp%3#6: uint64 = (+ tmp%3#6 24u)
        let arr2_offset#0: uint64 = (- tmp%3#6 2u)
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob arr2_offset#0)
        let aggregate%bitlen%1#0: uint64 = (bitlen aggregate%val_as_bytes%9#0)
        let aggregate%no_overflow%1#0: bool = (<= aggregate%bitlen%1#0 16u)
        (assert aggregate%no_overflow%1#0) // overflow
        let aggregate%uint16%1#0: bytes = ((extract 6 2) aggregate%val_as_bytes%9#0)
        (box_replace "dynamic_arr_struct" 18u aggregate%uint16%1#0)
        let box%box_extract%4#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%array_length%2#0: uint64 = (btoi box%box_extract%4#0)
        let tmp%14#1: bool = (== box%array_length%2#0 arr_len#0)
        (assert tmp%14#1) // expected arr length to be correct
        let box%box_extract%5#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%1#0: uint64 = (btoi box%box_extract%5#0)
        let box%box_extract%6#0: bytes = (box_extract "dynamic_arr_struct" box%btoi%1#0 2u)
        let box%array_length%3#0: uint64 = (btoi box%box_extract%6#0)
        let tmp%16#0: bool = (! box%array_length%3#0)
        (assert tmp%16#0) // expected arr2 length to be correct
        let aggregate%val_as_bytes%10#0: bytes[8] = (itob box%array_length%2#0)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%10#0)
        (log tmp%3#1)
        exit 1u
    block@18: // pop_dynamic_arr_struct_route_L231
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let times#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let box%box_extract%0#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%0#0)
        let arr_len#0: uint64 = (- box%array_length%0#0 times#0)
        let box%box_extract%1#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%1#0)
        let box%box_extract%2#1: bytes = (box_extract "dynamic_arr_struct" box%btoi%0#0 2u)
        let arr2_len#0: uint64 = (btoi box%box_extract%2#1)
        let tmp%3#6: uint64 = (* arr_len#0 8u)
        let head_and_dyn_arr#0: uint64 = (+ tmp%3#6 22u)
        let tmp%3#6: uint64 = (+ tmp%3#6 24u)
        let arr2_offset#0: uint64 = (- tmp%3#6 2u)
        let aggregate%val_as_bytes%11#0: bytes[8] = (itob arr_len#0)
        let aggregate%bitlen%2#0: uint64 = (bitlen aggregate%val_as_bytes%11#0)
        let aggregate%no_overflow%2#0: bool = (<= aggregate%bitlen%2#0 16u)
        (assert aggregate%no_overflow%2#0) // overflow
        let aggregate%uint16%2#0: bytes = ((extract 6 2) aggregate%val_as_bytes%11#0)
        (box_replace "dynamic_arr_struct" 20u aggregate%uint16%2#0)
        let aggregate%val_as_bytes%12#0: bytes[8] = (itob arr2_offset#0)
        let aggregate%bitlen%3#0: uint64 = (bitlen aggregate%val_as_bytes%12#0)
        let aggregate%no_overflow%3#0: bool = (<= aggregate%bitlen%3#0 16u)
        (assert aggregate%no_overflow%3#0) // overflow
        let aggregate%uint16%3#0: bytes = ((extract 6 2) aggregate%val_as_bytes%12#0)
        (box_replace "dynamic_arr_struct" 18u aggregate%uint16%3#0)
        let tmp%8#4: uint64 = (* times#0 8u)
        (box_splice "dynamic_arr_struct" head_and_dyn_arr#0 tmp%8#4 0x)
        let tmp%1#8: uint64 = (* arr2_len#0 8u)
        let dyn_arr2_index#1: uint64 = (+ 2u tmp%1#8)
        let size#0: uint64 = (+ head_and_dyn_arr#0 dyn_arr2_index#1)
        (box_resize "dynamic_arr_struct" size#0)
        let box%box_extract%3#1: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%array_length%2#0: uint64 = (btoi box%box_extract%3#1)
        let aggregate%val_as_bytes%13#0: bytes[8] = (itob box%array_length%2#0)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%13#0)
        (log tmp%3#1)
        exit 1u
    block@19: // set_nested_struct_route_L253
        let struct#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = (txna ApplicationArgs 1)
        let values%0#0: uint64 = (extract_uint64 struct#0 0u)
        (assert values%0#0) // struct.a is truthy
        let struct_bytes#0: bytes = (txna ApplicationArgs 1)
        let struct_size#0: uint64 = (len struct_bytes#0)
        let tmp%3#6: uint64 = (+ 4098u struct_size#0)
        (box_create "box" tmp%3#6)
        (box_replace "box" 4096u 0x1002)
        (box_replace "box" 4098u struct_bytes#0)
        exit 1u
    block@20: // nested_write_route_L267
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let value#2: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        (box_replace "box" 4098u reinterpret_Encoded(uint64)%1#0)
        let tmp%0#1: uint64 = (+ value#2 1u)
        let aggregate%val_as_bytes%15#0: bytes[8] = (itob tmp%0#1)
        (box_replace "box" 4110u aggregate%val_as_bytes%15#0)
        let tmp%1#8: uint64 = (+ value#2 2u)
        let aggregate%val_as_bytes%16#0: bytes[8] = (itob tmp%1#8)
        let box%box_extract%0#0: bytes = (box_extract "box" 4136u 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%0#0)
        let box%index_ok%0#0: bool = (< index#0 box%btoi%0#0)
        (assert box%index_ok%0#0) // index out of bounds
        let box%mul%0#0: uint64 = (* 2u index#0)
        let box%add%1#1: uint64 = (+ 4138u box%mul%0#0)
        let box%box_extract%1#0: bytes = (box_extract "box" box%add%1#1 2u)
        let box%btoi%1#0: uint64 = (btoi box%box_extract%1#0)
        let box%offset%7#1: uint64 = (+ 4138u box%btoi%1#0)
        let box%box_extract%2#1: bytes = (box_extract "box" box%offset%7#1 2u)
        let box%btoi%2#0: uint64 = (btoi box%box_extract%2#1)
        let box%index_ok%1#0: bool = (< index#0 box%btoi%2#0)
        (assert box%index_ok%1#0) // index out of bounds
        let box%add%2#1: uint64 = (+ box%offset%7#1 2u)
        let box%element_offset%0#0: uint64 = (* index#0 8u)
        let box%offset%8#1: uint64 = (+ box%add%2#1 box%element_offset%0#0)
        (box_replace "box" box%offset%8#1 aggregate%val_as_bytes%16#0)
        let tmp%2#0: uint64 = (+ value#2 3u)
        let aggregate%val_as_bytes%17#0: bytes[8] = (itob tmp%2#0)
        (box_replace "box" 4118u aggregate%val_as_bytes%17#0)
        let tmp%3#6: uint64 = (+ value#2 4u)
        let aggregate%val_as_bytes%18#0: bytes[8] = (itob tmp%3#6)
        (box_replace "box" 4128u aggregate%val_as_bytes%18#0)
        let tmp%4#0: uint64 = (+ value#2 5u)
        let aggregate%val_as_bytes%19#0: bytes[8] = (itob tmp%4#0)
        let box%box_extract%3#1: bytes = (box_extract "box" 4108u 2u)
        let box%btoi%3#0: uint64 = (btoi box%box_extract%3#1)
        let box%offset%16#0: uint64 = (+ 4098u box%btoi%3#0)
        let box%box_extract%4#0: bytes = (box_extract "box" box%offset%16#0 2u)
        let box%btoi%4#0: uint64 = (btoi box%box_extract%4#0)
        let box%index_ok%2#0: bool = (< index#0 box%btoi%4#0)
        (assert box%index_ok%2#0) // index out of bounds
        let box%add%4#0: uint64 = (+ box%offset%16#0 2u)
        let box%add%5#0: uint64 = (+ box%add%4#0 box%mul%0#0)
        let box%box_extract%5#0: bytes = (box_extract "box" box%add%5#0 2u)
        let box%btoi%5#0: uint64 = (btoi box%box_extract%5#0)
        let box%offset%17#0: uint64 = (+ box%add%4#0 box%btoi%5#0)
        let box%offset%18#0: uint64 = (+ box%offset%17#0 18u)
        let box%box_extract%6#0: bytes = (box_extract "box" box%offset%18#0 2u)
        let box%btoi%6#0: uint64 = (btoi box%box_extract%6#0)
        let box%index_ok%3#0: bool = (< index#0 box%btoi%6#0)
        (assert box%index_ok%3#0) // index out of bounds
        let box%add%6#0: uint64 = (+ box%offset%18#0 2u)
        let box%add%7#0: uint64 = (+ box%add%6#0 box%mul%0#0)
        let box%box_extract%7#0: bytes = (box_extract "box" box%add%7#0 2u)
        let box%btoi%7#0: uint64 = (btoi box%box_extract%7#0)
        let box%offset%19#0: uint64 = (+ box%add%6#0 box%btoi%7#0)
        let box%box_extract%8#0: bytes = (box_extract "box" box%offset%19#0 2u)
        let box%btoi%8#0: uint64 = (btoi box%box_extract%8#0)
        let box%index_ok%4#0: bool = (< index#0 box%btoi%8#0)
        (assert box%index_ok%4#0) // index out of bounds
        let box%add%8#0: uint64 = (+ box%offset%19#0 2u)
        let box%offset%20#0: uint64 = (+ box%add%8#0 box%element_offset%0#0)
        (box_replace "box" box%offset%20#0 aggregate%val_as_bytes%19#0)
        exit 1u
    block@21: // nested_read_route_L277
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let i1#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let i2#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let i3#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let box%box_extract%0#0: bytes = (box_extract "box" 4098u 8u)
        let a#0: uint64 = (btoi box%box_extract%0#0)
        let box%box_extract%1#0: bytes = (box_extract "box" 4110u 8u)
        let b#0: uint64 = (btoi box%box_extract%1#0)
        let box%box_extract%2#1: bytes = (box_extract "box" 4136u 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%2#1)
        let box%index_ok%0#0: bool = (< i1#0 box%btoi%0#0)
        (assert box%index_ok%0#0) // index out of bounds
        let box%mul%0#0: uint64 = (* 2u i1#0)
        let box%add%1#1: uint64 = (+ 4138u box%mul%0#0)
        let box%box_extract%3#1: bytes = (box_extract "box" box%add%1#1 2u)
        let box%btoi%1#0: uint64 = (btoi box%box_extract%3#1)
        let box%offset%7#1: uint64 = (+ 4138u box%btoi%1#0)
        let box%box_extract%4#0: bytes = (box_extract "box" box%offset%7#1 2u)
        let box%btoi%2#0: uint64 = (btoi box%box_extract%4#0)
        let box%index_ok%1#0: bool = (< i2#0 box%btoi%2#0)
        (assert box%index_ok%1#0) // index out of bounds
        let box%add%2#1: uint64 = (+ box%offset%7#1 2u)
        let box%element_offset%0#0: uint64 = (* i2#0 8u)
        let box%offset%8#1: uint64 = (+ box%add%2#1 box%element_offset%0#0)
        let box%box_extract%5#0: bytes = (box_extract "box" box%offset%8#1 8u)
        let arr_arr#0: uint64 = (btoi box%box_extract%5#0)
        let box%box_extract%6#0: bytes = (box_extract "box" 4118u 8u)
        let c#0: uint64 = (btoi box%box_extract%6#0)
        let box%box_extract%7#0: bytes = (box_extract "box" 4128u 8u)
        let d#0: uint64 = (btoi box%box_extract%7#0)
        let box%box_extract%8#0: bytes = (box_extract "box" 4108u 2u)
        let box%btoi%3#0: uint64 = (btoi box%box_extract%8#0)
        let box%offset%16#0: uint64 = (+ 4098u box%btoi%3#0)
        let box%box_extract%9#0: bytes = (box_extract "box" box%offset%16#0 2u)
        let box%btoi%4#0: uint64 = (btoi box%box_extract%9#0)
        let box%index_ok%2#0: bool = (< i1#0 box%btoi%4#0)
        (assert box%index_ok%2#0) // index out of bounds
        let box%add%4#0: uint64 = (+ box%offset%16#0 2u)
        let box%add%5#0: uint64 = (+ box%add%4#0 box%mul%0#0)
        let box%box_extract%10#0: bytes = (box_extract "box" box%add%5#0 2u)
        let box%btoi%5#0: uint64 = (btoi box%box_extract%10#0)
        let box%offset%17#0: uint64 = (+ box%add%4#0 box%btoi%5#0)
        let box%offset%18#0: uint64 = (+ box%offset%17#0 18u)
        let box%box_extract%11#0: bytes = (box_extract "box" box%offset%18#0 2u)
        let box%btoi%6#0: uint64 = (btoi box%box_extract%11#0)
        let box%index_ok%3#0: bool = (< i2#0 box%btoi%6#0)
        (assert box%index_ok%3#0) // index out of bounds
        let box%add%6#0: uint64 = (+ box%offset%18#0 2u)
        let box%mul%2#0: uint64 = (* 2u i2#0)
        let box%add%7#0: uint64 = (+ box%add%6#0 box%mul%2#0)
        let box%box_extract%12#0: bytes = (box_extract "box" box%add%7#0 2u)
        let box%btoi%7#0: uint64 = (btoi box%box_extract%12#0)
        let box%offset%19#0: uint64 = (+ box%add%6#0 box%btoi%7#0)
        let box%box_extract%13#0: bytes = (box_extract "box" box%offset%19#0 2u)
        let box%btoi%8#0: uint64 = (btoi box%box_extract%13#0)
        let box%index_ok%4#0: bool = (< i3#0 box%btoi%8#0)
        (assert box%index_ok%4#0) // index out of bounds
        let box%add%8#0: uint64 = (+ box%offset%19#0 2u)
        let box%element_offset%1#0: uint64 = (* i3#0 8u)
        let box%offset%20#0: uint64 = (+ box%add%8#0 box%element_offset%1#0)
        let box%box_extract%14#0: Encoded(uint64) = (box_extract "box" box%offset%20#0 8u)
        let woah_arr_arr#0: uint64 = (btoi box%box_extract%14#0)
        let tmp%0#1: uint64 = (+ a#0 b#0)
        let tmp%1#8: uint64 = (+ tmp%0#1 arr_arr#0)
        let tmp%2#0: uint64 = (+ tmp%1#8 c#0)
        let tmp%3#6: uint64 = (+ tmp%2#0 d#0)
        let tmp%4#0: uint64 = (+ tmp%3#6 woah_arr_arr#0)
        let aggregate%val_as_bytes%20#0: bytes[8] = (itob tmp%4#0)
        let tmp%5#5: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%20#0)
        (log tmp%5#5)
        exit 1u
    block@22: // sum_dynamic_arr_struct_route_L289
        let box%box_extract%0#0: bytes = (box_extract "dynamic_arr_struct" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#4: bool = (== values%0#0 1u)
        (assert tmp%0#4) // expected 1
        let box%box_extract%1#0: bytes = (box_extract "dynamic_arr_struct" 10u 8u)
        let values%1#0: uint64 = (btoi box%box_extract%1#0)
        let tmp%1#2: bool = (== values%1#0 2u)
        (assert tmp%1#2) // expected 2
        let total#0: uint64 = (+ values%0#0 values%1#0)
        let box%box_extract%4#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%4#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@97
    block@97: // for_header_L294
        let continue_looping%0#0: bool = (< item_index_internal%0#0 box%array_length%0#0)
        goto continue_looping%0#0 ? block@98 : block@99
    block@98: // for_body_L295
        let box%box_extract%5#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%5#0)
        let box%index_ok%0#0: bool = (< item_index_internal%0#0 box%btoi%0#0)
        (assert box%index_ok%0#0) // index out of bounds
        let box%element_offset%0#0: uint64 = (* item_index_internal%0#0 8u)
        let box%offset%6#0: uint64 = (+ 22u box%element_offset%0#0)
        let box%box_extract%6#0: bytes = (box_extract "dynamic_arr_struct" box%offset%6#0 8u)
        let val#0: uint64 = (btoi box%box_extract%6#0)
        let total#0: uint64 = (+ total#0 val#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@97
    block@99: // after_for_L294
        let box%box_extract%7#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%1#0: uint64 = (btoi box%box_extract%7#0)
        let box%box_extract%8#0: bytes = (box_extract "dynamic_arr_struct" box%btoi%1#0 2u)
        let box%array_length%1#0: uint64 = (btoi box%box_extract%8#0)
        let item_index_internal%1#0: uint64 = 0u
        goto block@100
    block@100: // for_header_L296
        let continue_looping%1#0: bool = (< item_index_internal%1#0 box%array_length%1#0)
        goto continue_looping%1#0 ? block@101 : block@102
    block@101: // for_body_L297
        let box%box_extract%9#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%2#0: uint64 = (btoi box%box_extract%9#0)
        let box%add%3#0: uint64 = (+ box%btoi%2#0 2u)
        let box%element_offset%1#0: uint64 = (* item_index_internal%1#0 8u)
        let box%offset%9#0: uint64 = (+ box%add%3#0 box%element_offset%1#0)
        let box%box_extract%10#0: bytes = (box_extract "dynamic_arr_struct" box%offset%9#0 8u)
        let val#0: uint64 = (btoi box%box_extract%10#0)
        let total#0: uint64 = (+ total#0 val#0)
        let item_index_internal%1#0: uint64 = (+ item_index_internal%1#0 1u)
        goto block@100
    block@102: // after_for_L296
        let aggregate%val_as_bytes%21#0: bytes[8] = (itob total#0)
        let tmp%2#7: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%21#0)
        (log tmp%2#7)
        exit 1u
    block@23: // create_bools_route_L300
        (box_create "too_many_bools" 4125u)
        exit 1u
    block@24: // set_bool_route_L304
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(bool8)%0#0: Encoded(bool8) = (txna ApplicationArgs 2)
        let value#6: bool = (getbit reinterpret_Encoded(bool8)%0#0 0u)
        let box%element_byte_offset%0#0: uint64 = (/ index#0 8u)
        let box%element_bit_offset%0#0: uint64 = (% index#0 8u)
        let box%box_extract%0#0: bytes = (box_extract "too_many_bools" box%element_byte_offset%0#0 1u)
        let aggregate%lt%0#0: bool = (< box%element_bit_offset%0#0 8u)
        (assert aggregate%lt%0#0) // index access is out of bounds
        let aggregate%updated_target%0#0: Encoded(bool1[8]) = (setbit box%box_extract%0#0 box%element_bit_offset%0#0 value#6)
        (box_replace "too_many_bools" box%element_byte_offset%0#0 aggregate%updated_target%0#0)
        exit 1u
    block@25: // sum_bools_route_L308
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let stop_at_total#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let total#0: uint64 = 0u
        let (aggregate%box_get%10#0: uint64, aggregate%box_get%11#0: bool) = (box_len "too_many_bools")
        (assert aggregate%box_get%11#0) // check self.too_many_bools exists
        let item_index_internal%0#0: uint64 = 0u
        goto block@84
    block@84: // for_header_L311
        let continue_looping%0#0: bool = (< item_index_internal%0#0 33000u)
        goto continue_looping%0#0 ? block@85 : block@90
    block@85: // for_body_L312
        let box%element_byte_offset%0#0: uint64 = (/ item_index_internal%0#0 8u)
        let box%element_bit_offset%0#0: uint64 = (% item_index_internal%0#0 8u)
        let box%box_extract%0#0: bytes = (box_extract "too_many_bools" box%element_byte_offset%0#0 1u)
        let value#6: bool = (getbit box%box_extract%0#0 box%element_bit_offset%0#0)
        goto value#6 ? block@86 : block@87
    block@86: // if_body_L313
        let total#0: uint64 = (+ total#0 1u)
        goto block@87
    block@87: // after_if_else_L312
        let tmp%1#2: bool = (== total#0 stop_at_total#0)
        goto tmp%1#2 ? block@90 : block@89
    block@89: // after_if_else_L314
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@84
    block@90: // after_for_L311
        let aggregate%val_as_bytes%22#0: bytes[8] = (itob total#0)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%22#0)
        (log tmp%3#1)
        exit 1u
    block@26: // create_dynamic_box_route_L318
        (box_del "dynamic_box")
        (box_put "dynamic_box" 0x0000)
        exit 1u
    block@27: // delete_dynamic_box_route_L322
        (box_del "dynamic_box")
        exit 1u
    block@28: // append_dynamic_box_route_L326
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let times#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let box%box_extract%0#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let arr_len#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%1#8: uint64 = (+ arr_len#0 times#0)
        let tmp%2#0: uint64 = (* tmp%1#8 8u)
        let tmp%3#6: uint64 = (+ 2u tmp%2#0)
        (box_resize "dynamic_box" tmp%3#6)
        let i#0: uint64 = 0u
        goto block@75
    block@75: // for_header_L334
        let continue_looping%0#0: bool = (< i#0 times#0)
        goto continue_looping%0#0 ? block@76 : block@77
    block@76: // for_body_L335
        let aggregate%val_as_bytes%23#0: bytes[8] = (itob i#0)
        let box%element_offset%0#0: uint64 = (* arr_len#0 8u)
        let box%offset%2#0: uint64 = (+ 2u box%element_offset%0#0)
        (box_replace "dynamic_box" box%offset%2#0 aggregate%val_as_bytes%23#0)
        let arr_len#0: uint64 = (+ arr_len#0 1u)
        let i#0: uint64 = (+ i#0 1u)
        goto block@75
    block@77: // after_for_L334
        let aggregate%val_as_bytes%24#0: bytes[8] = (itob arr_len#0)
        let aggregate%bitlen%5#0: uint64 = (bitlen aggregate%val_as_bytes%24#0)
        let aggregate%no_overflow%5#0: bool = (<= aggregate%bitlen%5#0 16u)
        (assert aggregate%no_overflow%5#0) // overflow
        let aggregate%uint16%5#0: bytes = ((extract 6 2) aggregate%val_as_bytes%24#0)
        (box_replace "dynamic_box" 0u aggregate%uint16%5#0)
        let box%box_extract%1#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%1#0)
        let aggregate%val_as_bytes%25#0: bytes[8] = (itob box%array_length%0#0)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%25#0)
        (log tmp%3#1)
        exit 1u
    block@29: // pop_dynamic_box_route_L341
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let times#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let box%box_extract%0#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let tmp%0#1: uint64 = (btoi box%box_extract%0#0)
        let arr_len#0: uint64 = (- tmp%0#1 times#0)
        let aggregate%val_as_bytes%26#0: bytes[8] = (itob arr_len#0)
        let aggregate%bitlen%6#0: uint64 = (bitlen aggregate%val_as_bytes%26#0)
        let aggregate%no_overflow%6#0: bool = (<= aggregate%bitlen%6#0 16u)
        (assert aggregate%no_overflow%6#0) // overflow
        let aggregate%uint16%6#0: bytes = ((extract 6 2) aggregate%val_as_bytes%26#0)
        (box_replace "dynamic_box" 0u aggregate%uint16%6#0)
        let tmp%3#6: uint64 = (* arr_len#0 8u)
        let tmp%4#0: uint64 = (+ 2u tmp%3#6)
        (box_resize "dynamic_box" tmp%4#0)
        let box%box_extract%1#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%1#0)
        let aggregate%val_as_bytes%27#0: bytes[8] = (itob box%array_length%0#0)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%27#0)
        (log tmp%3#1)
        exit 1u
    block@30: // sum_dynamic_box_route_L352
        let total#0: uint64 = 0u
        let box%box_extract%0#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%0#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@68
    block@68: // for_header_L355
        let continue_looping%0#0: bool = (< item_index_internal%0#0 box%array_length%0#0)
        goto continue_looping%0#0 ? block@69 : block@70
    block@69: // for_body_L356
        let box%element_offset%0#0: uint64 = (* item_index_internal%0#0 8u)
        let box%offset%0#1: uint64 = (+ 2u box%element_offset%0#0)
        let box%box_extract%1#0: bytes = (box_extract "dynamic_box" box%offset%0#1 8u)
        let val#0: uint64 = (btoi box%box_extract%1#0)
        let total#0: uint64 = (+ total#0 val#0)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@68
    block@70: // after_for_L355
        let aggregate%val_as_bytes%28#0: bytes[8] = (itob total#0)
        let tmp%2#7: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%28#0)
        (log tmp%2#7)
        exit 1u
    block@31: // write_dynamic_box_route_L359
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let box%element_offset%0#0: uint64 = (* index#0 8u)
        let box%offset%0#1: uint64 = (+ 2u box%element_offset%0#0)
        (box_replace "dynamic_box" box%offset%0#1 reinterpret_Encoded(uint64)%1#0)
        exit 1u
    block@32: // write_dynamic_arr_struct_route_L363
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let index#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let box%box_extract%0#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%0#0)
        let box%index_ok%0#0: bool = (< index#0 box%btoi%0#0)
        (assert box%index_ok%0#0) // index out of bounds
        let box%element_offset%0#0: uint64 = (* index#0 8u)
        let box%offset%1#0: uint64 = (+ 22u box%element_offset%0#0)
        (box_replace "dynamic_arr_struct" box%offset%1#0 reinterpret_Encoded(uint64)%1#0)
        exit 1u
    block@33: // slice_box_route_L367
        (box_del "0")
        (box_put "0" 0x54657374696e672074657374696e6720313233)
        let (tmp%0#1: uint64, tmp%1#2: bool) = (box_len "0")
        let tmp%3#6: uint64 = (select tmp%0#1 0u tmp%0#1)
        let tmp%4#2: bool = (< 7u tmp%0#1)
        let tmp%5#2: uint64 = (select tmp%0#1 7u tmp%4#2)
        let tmp%6#2: uint64 = (- tmp%5#2 tmp%3#6)
        let tmp%7#3: bytes = (box_extract "0" tmp%3#6 tmp%6#2)
        let tmp%8#0: bool = (== tmp%7#3 0x54657374696e67)
        (assert tmp%8#0)
        (box_del 0x424f585f43)
        (box_put 0x424f585f43 0x000548656c6c6f)
        let (tmp%10#2: uint64, tmp%11#0: bool) = (box_len 0x424f585f43)
        let tmp%12#0: bool = (< 2u tmp%10#2)
        let tmp%13#1: uint64 = (select tmp%10#2 2u tmp%12#0)
        let tmp%14#1: bool = (< 10u tmp%10#2)
        let tmp%15#1: uint64 = (select tmp%10#2 10u tmp%14#1)
        let tmp%16#1: uint64 = (- tmp%15#1 tmp%13#1)
        let tmp%17#1: bytes = (box_extract 0x424f585f43 tmp%13#1 tmp%16#1)
        let tmp%18#1: bool = (== tmp%17#1 0x48656c6c6f)
        (assert tmp%18#1)
        exit 1u
    block@34: // arc4_box_route_L376
        (box_put 0x64 0x00010203)
        exit 1u
    block@35: // test_box_ref_route_L386
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "blob")
        let tmp%0#4: bool = (! maybe_exists%0#0)
        (assert tmp%0#4) // no data
        let tmp%4#2: bool = (box_create "blob" 32u)
        (assert tmp%4#2)
        let sender_bytes#0: bytes = (txn Sender)
        let app_address#0: bytes = (global CurrentApplicationAddress)
        (box_replace "blob" 0u sender_bytes#0)
        (box_resize "blob" 8000u)
        (box_splice "blob" 0u 0u app_address#0)
        (box_replace "blob" 64u 0x68656c6c6f)
        let prefix#0: bytes = (box_extract "blob" 0u 69u)
        let tmp%10#1: bytes = (concat app_address#0 sender_bytes#0)
        let tmp%11#1: bytes = (concat tmp%10#1 0x68656c6c6f)
        let tmp%12#0: bool = (== prefix#0 tmp%11#1)
        (assert tmp%12#0)
        let tmp%13#0: bool = (box_del "blob")
        (assert tmp%13#0)
        let (value#3: bytes, exists#0: bool) = (box_get "blob")
        let tmp%15#0: bool = (! exists#0)
        (assert tmp%15#0)
        let tmp%16#0: bool = (== value#3 0x)
        (assert tmp%16#0)
        let state_get%0#0: bytes = (select sender_bytes#0 value#3 exists#0)
        let tmp%17#0: bool = (== state_get%0#0 sender_bytes#0)
        (assert tmp%17#0)
        let tmp%18#0: bytes = (concat sender_bytes#0 app_address#0)
        (box_put "blob" tmp%18#0)
        let (_%5#0: uint64, maybe_exists%7#0: bool) = (box_len "blob")
        let tmp%19#0: bool = (== _%5#0 64u)
        (assert tmp%19#0)
        (box_create "box_ref" 32u)
        (box_del "box_ref")
        exit 1u
    block@36: // box_map_test_route_L434
        let box_0#0: bytes = (itob 0u)
        (box_del box_0#0)
        (box_put box_0#0 "Hmmmmm")
        let (value%0#0: uint64, check%0#0: bool) = (box_len box_0#0)
        let tmp%1#2: bool = (== value%0#0 6u)
        (assert tmp%1#2)
        let encoded_value%5#0: bytes[8] = (itob 1u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get encoded_value%5#0)
        let state_get%0#0: bytes = (select "default" maybe_value%0#0 maybe_exists%0#0)
        let tmp%5#1: bool = (== state_get%0#0 "default")
        (assert tmp%5#1)
        let (value#2: uint64, exists#0: bool) = (box_len encoded_value%5#0)
        let tmp%6#1: bool = (! exists#0)
        (assert tmp%6#1)
        (box_del encoded_value%5#0)
        (box_put encoded_value%5#0 "hello")
        (box_del encoded_value%5#0)
        exit 1u
    block@37: // box_map_set_route_L458
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let key#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 2)
        let value#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let encoded_value%0#0: bytes[8] = (itob key#0)
        (box_del encoded_value%0#0)
        (box_put encoded_value%0#0 value#0)
        exit 1u
    block@38: // box_map_get_route_L462
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let key#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let (aggregate%box_get%22#0: bytes, aggregate%box_get%23#0: bool) = (box_get encoded_value%0#0)
        (assert aggregate%box_get%23#0) // check self.box_map entry exists
        let aggregate%length%4#0: uint64 = (len aggregate%box_get%22#0)
        let aggregate%as_bytes%10#0: bytes[8] = (itob aggregate%length%4#0)
        let aggregate%length_uint16%4#0: bytes = ((extract 6 2) aggregate%as_bytes%10#0)
        let aggregate%encoded_value%4#0: bytes = (concat aggregate%length_uint16%4#0 aggregate%box_get%22#0)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%encoded_value%4#0)
        (log tmp%3#1)
        exit 1u
    block@39: // box_map_del_route_L466
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let key#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let encoded_value%0#0: bytes[8] = (itob key#0)
        (box_del encoded_value%0#0)
        exit 1u
    block@40: // box_map_exists_route_L470
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let key#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len encoded_value%0#0)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u maybe_exists%0#0)
        let tmp%3#1: bytes = (concat 0x151f7c75 aggregate%encoded_bool%1#0)
        (log tmp%3#1)
        exit 1u
    block@43: // after_if_else_L80
        fail
    block@44: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u