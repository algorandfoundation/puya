debug: PuyaOptions(paths=['box_storage'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L110
debug: Terminated block@1: // for_header_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L110
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L110
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L110
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@2: // for_body_L110
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@2: // for_body_L110
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@2: // for_body_L110
debug: Terminated block@2: // for_body_L110
debug: Sealing block@3: // for_footer_L110
debug: Terminated block@3: // for_footer_L110
debug: Sealing block@4: // for_increment_L110
debug: Terminated block@4: // for_increment_L110
debug: Sealing block@1: // for_header_L110
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L92
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L110
debug: Sealing block@2: // for_body_L110
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L110
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let head_and_tail#2: bytes = undefined while trying to resolve 'head_and_tail' in block@1: // for_header_L110
debug: Added head_and_tail#0 to Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0) in block@0: // L92
debug: Added head_and_tail#1 to Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@4) in block@4: // for_increment_L110
debug: Added head_and_tail#2 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1) in block@1: // for_header_L110
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1) (head_and_tail#1) with head_and_tail#2
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1)
debug: Replacing trivial Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#2 <- block@4) (head_and_tail#2) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#2 <- block@4)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1) (head_and_tail#1) with head_and_tail#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#2 <- block@4) (head_and_tail#2) with head_and_tail#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L110
debug: Added new_head#0 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0) in block@0: // L92
debug: Added new_head#2 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@4) in block@4: // for_increment_L110
debug: Added new_head#3 to Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) in block@1: // for_header_L110
debug: Replacing trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3
debug: Deleting Phi assignment: let new_head#1: bytes = φ(new_head#3 <- block@1)
debug: Replaced trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L110
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1: // for_header_L110
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0: // L92
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4) (length_minus_1#1) with length_minus_1#0 in current definition for 4 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1: // for_header_L110
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0: // L92
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4) (popped_header_offset#1) with popped_header_offset#0 in current definition for 4 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1: // for_header_L110
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0: // L92
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4) (popped_offset#1) with popped_offset#0 in current definition for 4 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1: // for_header_L110
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0: // L92
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4) (popped#1) with popped#0 in current definition for 4 blocks
debug: Terminated block@5: // after_for_L110
debug: Sealing block@0: // L124
debug: Terminated block@0: // L124
debug: Sealing block@None: // if_body_L146
debug: Sealing block@None: // else_body_L146
debug: Terminated block@1: // if_body_L146
debug: Sealing block@2: // after_if_else_L146
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L146
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L124
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L146
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L124
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L146
debug: Sealing block@None: // ternary_true_L150
debug: Sealing block@None: // ternary_false_L150
debug: Terminated block@3: // ternary_true_L150
debug: Terminated block@4: // ternary_false_L150
debug: Sealing block@5: // ternary_merge_L150
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L150
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L150
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L150
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L146
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L124
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L150
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@6: // for_header_L150
debug: Terminated block@6: // for_header_L150
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@7: // for_body_L150
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L150
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L150
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L150
debug: Terminated block@7: // for_body_L150
debug: Sealing block@8: // for_footer_L150
debug: Terminated block@8: // for_footer_L150
debug: Sealing block@9: // for_increment_L150
debug: Terminated block@9: // for_increment_L150
debug: Sealing block@6: // for_header_L150
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5, range_item%0#3 <- block@9) in block@9: // for_increment_L150
debug: Sealing block@7: // for_body_L150
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L150
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L146
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L124
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L146
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L150
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L150
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L150
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L150
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L150
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L150
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L150
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L150
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L146
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L124
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L150
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L150
debug: Terminated block@10: // after_for_L150
debug: Sealing block@0: // L157
debug: Terminated block@0: // L157
debug: Sealing block@0: // L189
debug: Terminated block@0: // L189
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L199
debug: Terminated block@1: // for_header_L199
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L199
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@2: // for_body_L199
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@2: // for_body_L199
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@2: // for_body_L199
debug: Terminated block@2: // for_body_L199
debug: Sealing block@3: // for_footer_L199
debug: Terminated block@3: // for_footer_L199
debug: Sealing block@4: // for_increment_L199
debug: Terminated block@4: // for_increment_L199
debug: Sealing block@1: // for_header_L199
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L189
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L199
debug: Sealing block@2: // for_body_L199
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L199
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@4) in block@4: // for_increment_L199
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1) (array_head_and_tail#1) with array_head_and_tail#2
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1)
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1) (array_head_and_tail#1) with array_head_and_tail#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L199
debug: Added new_head#0 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0) in block@0: // L189
debug: Added new_head#2 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@4) in block@4: // for_increment_L199
debug: Added new_head#3 to Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3
debug: Deleting Phi assignment: let new_head#1: bytes = φ(new_head#3 <- block@1)
debug: Replaced trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3 in current definition for 0 blocks
debug: Created Phi assignment: let item_offset_adjustment#2: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1: // for_header_L199
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0: // L189
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@4) in block@4: // for_increment_L199
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1) (item_offset_adjustment#1) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1)
debug: Replacing trivial Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#2 <- block@4) (item_offset_adjustment#2) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#2 <- block@4)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1) (item_offset_adjustment#1) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#2 <- block@4) (item_offset_adjustment#2) with item_offset_adjustment#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L199
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1: // for_header_L199
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L189
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4) in block@4: // for_increment_L199
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 4 blocks
debug: Terminated block@5: // after_for_L199
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@6: // for_header_L204
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@6: // for_header_L204
debug: Terminated block@6: // for_header_L204
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let range_item%1#2: uint64 = undefined while trying to resolve 'range_item%1' in block@7: // for_body_L204
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@7: // for_body_L204
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let new_head#4: bytes = undefined while trying to resolve 'new_head' in block@7: // for_body_L204
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let item_offset_adjustment#4: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@7: // for_body_L204
debug: Terminated block@7: // for_body_L204
debug: Sealing block@8: // for_footer_L204
debug: Terminated block@8: // for_footer_L204
debug: Sealing block@9: // for_increment_L204
debug: Terminated block@9: // for_increment_L204
debug: Sealing block@6: // for_header_L204
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@5) in block@5: // after_for_L199
debug: Added range_item%1#3 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@5, range_item%1#3 <- block@9) in block@9: // for_increment_L204
debug: Sealing block@7: // for_body_L204
debug: Added range_item%1#1 to Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6) (range_item%1#2) with range_item%1#1
debug: Deleting Phi assignment: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6) (range_item%1#2) with range_item%1#1 in current definition for 2 blocks
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@6: // for_header_L204
debug: Created Phi assignment: let new_head_and_tail#3: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L199
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added new_head_and_tail#3 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4) in block@4: // for_increment_L199
debug: Replacing trivial Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4) (new_head_and_tail#3) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4)
debug: Replaced trivial Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4) (new_head_and_tail#3) with new_head_and_tail#0 in current definition for 4 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5) in block@5: // after_for_L199
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#1 <- block@9) in block@9: // for_increment_L204
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6) (new_head_and_tail#1) with new_head_and_tail#2
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6)
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#2 <- block@9) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#2 <- block@9)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6) (new_head_and_tail#1) with new_head_and_tail#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#2 <- block@9) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_head#6: bytes = undefined while trying to resolve 'new_head' in block@6: // for_header_L204
debug: Added new_head#3 to Phi node: let new_head#6: bytes = φ(new_head#3 <- block@5) in block@5: // after_for_L199
debug: Added new_head#5 to Phi node: let new_head#6: bytes = φ(new_head#3 <- block@5, new_head#5 <- block@9) in block@9: // for_increment_L204
debug: Added new_head#6 to Phi node: let new_head#4: bytes = φ(new_head#6 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let new_head#4: bytes = φ(new_head#6 <- block@6) (new_head#4) with new_head#6
debug: Deleting Phi assignment: let new_head#4: bytes = φ(new_head#6 <- block@6)
debug: Replaced trivial Phi node: let new_head#4: bytes = φ(new_head#6 <- block@6) (new_head#4) with new_head#6 in current definition for 0 blocks
debug: Created Phi assignment: let item_offset_adjustment#5: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@6: // for_header_L204
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5) in block@5: // after_for_L199
debug: Added item_offset_adjustment#4 to Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#4 <- block@9) in block@9: // for_increment_L204
debug: Added item_offset_adjustment#5 to Phi node: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6) (item_offset_adjustment#4) with item_offset_adjustment#5
debug: Deleting Phi assignment: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6)
debug: Replacing trivial Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#5 <- block@9) (item_offset_adjustment#5) with item_offset_adjustment#3
debug: Deleting Phi assignment: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#5 <- block@9)
debug: Replaced trivial Phi node: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6) (item_offset_adjustment#4) with item_offset_adjustment#5 in current definition for 3 blocks
debug: Replaced trivial Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#5 <- block@9) (item_offset_adjustment#5) with item_offset_adjustment#3 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L204
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@6: // for_header_L204
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1: // for_header_L199
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0: // L189
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4) in block@4: // for_increment_L199
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4) (array_items_count#2) with array_items_count#0 in current definition for 4 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5) in block@5: // after_for_L199
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9) in block@9: // for_increment_L204
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9) (array_items_count#1) with array_items_count#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@6: // for_header_L204
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5) in block@5: // after_for_L199
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9) in block@9: // for_increment_L204
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9) (new_items_count#2) with new_items_count#0 in current definition for 4 blocks
debug: Created Phi assignment: let array_head_and_tail#3: bytes = undefined while trying to resolve 'array_head_and_tail' in block@6: // for_header_L204
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5) in block@5: // after_for_L199
debug: Added array_head_and_tail#3 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9) in block@9: // for_increment_L204
debug: Replacing trivial Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9) (array_head_and_tail#3) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9)
debug: Replaced trivial Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9) (array_head_and_tail#3) with array_head_and_tail#0 in current definition for 4 blocks
debug: Terminated block@10: // after_for_L204
debug: Sealing block@0: // L217
debug: Terminated block@0: // L217
debug: Sealing block@0: // L240
debug: Terminated block@0: // L240
debug: Sealing block@0: // L252
debug: Terminated block@0: // L252
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L269
debug: Terminated block@1: // for_header_L269
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L269
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@2: // for_body_L269
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@2: // for_body_L269
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@2: // for_body_L269
debug: Terminated block@2: // for_body_L269
debug: Sealing block@3: // for_footer_L269
debug: Terminated block@3: // for_footer_L269
debug: Sealing block@4: // for_increment_L269
debug: Terminated block@4: // for_increment_L269
debug: Sealing block@1: // for_header_L269
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L252
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L269
debug: Sealing block@2: // for_body_L269
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let new_head_and_tail#3: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L269
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L252
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@4) in block@4: // for_increment_L269
debug: Added new_head_and_tail#3 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1) (new_head_and_tail#1) with new_head_and_tail#3
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1) (new_head_and_tail#1) with new_head_and_tail#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_item_length#2: uint64 = undefined while trying to resolve 'new_item_length' in block@1: // for_header_L269
debug: Added new_item_length#0 to Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0) in block@0: // L252
debug: Added new_item_length#1 to Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@4) in block@4: // for_increment_L269
debug: Added new_item_length#2 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1) (new_item_length#1) with new_item_length#2
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1)
debug: Replacing trivial Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#2 <- block@4) (new_item_length#2) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#2 <- block@4)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1) (new_item_length#1) with new_item_length#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#2 <- block@4) (new_item_length#2) with new_item_length#0 in current definition for 4 blocks
debug: Created Phi assignment: let original_item_length#2: uint64 = undefined while trying to resolve 'original_item_length' in block@1: // for_header_L269
debug: Added original_item_length#0 to Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0) in block@0: // L252
debug: Added original_item_length#1 to Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@4) in block@4: // for_increment_L269
debug: Added original_item_length#2 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1) (original_item_length#1) with original_item_length#2
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1)
debug: Replacing trivial Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#2 <- block@4) (original_item_length#2) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#2 <- block@4)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1) (original_item_length#1) with original_item_length#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#2 <- block@4) (original_item_length#2) with original_item_length#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L269
debug: Terminated block@5: // after_for_L269
debug: Sealing block@0: // L278
debug: Terminated block@0: // L278
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L327
debug: Terminated block@1: // for_header_L327
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L327
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L327
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@2: // for_body_L327
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@2: // for_body_L327
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L327
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@2: // for_body_L327
debug: Terminated block@2: // for_body_L327
debug: Sealing block@3: // for_footer_L327
debug: Terminated block@3: // for_footer_L327
debug: Sealing block@4: // for_increment_L327
debug: Terminated block@4: // for_increment_L327
debug: Sealing block@1: // for_header_L327
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L306
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L327
debug: Sealing block@2: // for_body_L327
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L327
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_offset#3: uint64 = undefined while trying to resolve 'tail_offset' in block@1: // for_header_L327
debug: Added tail_offset#0 to Phi node: let tail_offset#3: uint64 = φ(tail_offset#0 <- block@0) in block@0: // L306
debug: Added tail_offset#2 to Phi node: let tail_offset#3: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@4) in block@4: // for_increment_L327
debug: Added tail_offset#3 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1) in block@1: // for_header_L327
debug: Replacing trivial Phi node: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1) (tail_offset#1) with tail_offset#3
debug: Deleting Phi assignment: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1)
debug: Replaced trivial Phi node: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1) (tail_offset#1) with tail_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let array_head_and_tail#3: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L327
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L306
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4) in block@4: // for_increment_L327
debug: Added array_head_and_tail#3 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1) in block@1: // for_header_L327
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1) (array_head_and_tail#1) with array_head_and_tail#3
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1) (array_head_and_tail#1) with array_head_and_tail#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L327
debug: Terminated block@5: // after_for_L327
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L15
debug: Terminated block@0: // L15
debug: Sealing block@0: // L27
debug: Terminated block@0: // L27
debug: Sealing block@0: // L33
debug: Terminated block@0: // L33
debug: Sealing block@0: // L45
debug: Terminated block@0: // L45
debug: Sealing block@0: // L49
debug: Terminated block@0: // L49
debug: Sealing block@0: // L53
debug: Terminated block@0: // L53
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L72
debug: Terminated block@0: // L72
debug: Sealing block@0: // L108
debug: Terminated block@0: // L108
debug: Sealing block@0: // L122
debug: Terminated block@0: // L122
debug: Sealing block@0: // L126
debug: Terminated block@0: // L126
debug: Sealing block@0: // L130
debug: Terminated block@0: // L130
debug: Sealing block@0: // L8
debug: Terminated block@0: // L8
debug: Sealing block@None: // abi_routing_L8
debug: Sealing block@None: // bare_routing_L8
debug: Terminated block@1: // abi_routing_L8
debug: Sealing block@None: // switch_case_default_L8
debug: Sealing block@None: // set_boxes_route_L15
debug: Sealing block@None: // check_keys_route_L27
debug: Sealing block@None: // delete_boxes_route_L33
debug: Sealing block@None: // read_boxes_route_L45
debug: Sealing block@None: // boxes_exist_route_L49
debug: Sealing block@None: // slice_box_route_L53
debug: Sealing block@None: // arc4_box_route_L62
debug: Sealing block@None: // box_ref_route_L72
debug: Sealing block@None: // box_map_test_route_L108
debug: Sealing block@None: // box_map_set_route_L122
debug: Sealing block@None: // box_map_get_route_L126
debug: Sealing block@None: // box_map_exists_route_L130
debug: Terminated block@2: // set_boxes_route_L15
debug: Terminated block@3: // check_keys_route_L27
debug: Terminated block@4: // delete_boxes_route_L33
debug: Terminated block@5: // read_boxes_route_L45
debug: Terminated block@6: // boxes_exist_route_L49
debug: Terminated block@7: // slice_box_route_L53
debug: Terminated block@8: // arc4_box_route_L62
debug: Terminated block@9: // box_ref_route_L72
debug: Terminated block@10: // box_map_test_route_L108
debug: Terminated block@11: // box_map_set_route_L122
debug: Terminated block@12: // box_map_get_route_L126
debug: Terminated block@13: // box_map_exists_route_L130
debug: Terminated block@14: // switch_case_default_L8
debug: Sealing block@15: // switch_case_next_L8
debug: Terminated block@15: // switch_case_next_L8
debug: Terminated block@16: // bare_routing_L8
debug: Sealing block@None: // reject_bare_on_completion_L8
debug: Sealing block@None: // create_L8
debug: Terminated block@17: // create_L8
debug: Terminated block@18: // reject_bare_on_completion_L8
debug: Sealing block@None: // switch_case_next_L8
debug: Sealing block@None: // after_if_else_L8
debug: Sealing block@0: // L8
debug: Terminated block@0: // L8
debug: Output IR to box_storage/out/BoxContract.ssa.ir
info: Optimizing examples.box_storage.contract.BoxContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%2#0 NoOp) to (! tmp%2#0)
debug: Simplified (== tmp%10#0 NoOp) to (! tmp%10#0)
debug: Simplified (== tmp%13#0 NoOp) to (! tmp%13#0)
debug: Simplified (== tmp%16#0 NoOp) to (! tmp%16#0)
debug: Simplified (concat 0x val_as_bytes%0#0) to val_as_bytes%0#0
debug: Simplified ((extract 6 2) as_bytes%1#0) to 0x000c
debug: Simplified (== tmp%20#0 NoOp) to (! tmp%20#0)
debug: Simplified (concat 0x encoded_bool%0#0) to encoded_bool%0#0
debug: Simplified (== tmp%24#0 NoOp) to (! tmp%24#0)
debug: Simplified (== tmp%27#0 NoOp) to (! tmp%27#0)
debug: Simplified (== tmp%30#0 NoOp) to (! tmp%30#0)
debug: Simplified (== tmp%33#0 NoOp) to (! tmp%33#0)
debug: Simplified (== tmp%36#0 NoOp) to (! tmp%36#0)
debug: Simplified (== tmp%43#0 NoOp) to (! tmp%43#0)
debug: Simplified (== tmp%50#0 NoOp) to (! tmp%50#0)
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable current_tail_offset%0#0
debug: Removing unused variable encoded_tuple_buffer%0#0
debug: Removing unused variable as_bytes%1#0
debug: Removing unused variable current_tail_offset%2#0
debug: Removing unused variable current_tail_offset%3#0
debug: Removing unused variable encoded_tuple_buffer%6#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: inlining the default target of a switch/goto nth
debug: adding block@1: // abi_routing_L8 as a predecessor of block@15: // switch_case_next_L8 due to inlining of block@14: // switch_case_default_L8
debug: simplified terminator of block@1: // abi_routing_L8 from switch tmp%1#0 {method "set_boxes(uint64,byte[],string)void" => block@2, method "check_keys()void" => block@3, method "delete_boxes()void" => block@4, method "read_boxes()(uint64,byte[],string)" => block@5, method "boxes_exist()(bool,bool,bool)" => block@6, method "slice_box()void" => block@7, method "arc4_box()void" => block@8, method "box_ref()void" => block@9, method "box_map_test()void" => block@10, method "box_map_set(uint64,string)void" => block@11, method "box_map_get(uint64)string" => block@12, method "box_map_exists(uint64)bool" => block@13, * => block@14} to switch tmp%1#0 {method "set_boxes(uint64,byte[],string)void" => block@2, method "check_keys()void" => block@3, method "delete_boxes()void" => block@4, method "read_boxes()(uint64,byte[],string)" => block@5, method "boxes_exist()(bool,bool,bool)" => block@6, method "slice_box()void" => block@7, method "arc4_box()void" => block@8, method "box_ref()void" => block@9, method "box_map_test()void" => block@10, method "box_map_set(uint64,string)void" => block@11, method "box_map_get(uint64)string" => block@12, method "box_map_exists(uint64)bool" => block@13, * => block@15}
debug: simplifying a switch with constants into goto nth
debug: simplified terminator of block@16: // bare_routing_L8 from switch tmp%57#0 {0u => block@17, * => block@18} to goto_nth [block@17][tmp%57#0] else goto block@18
debug: inlining the default target of a switch/goto nth
debug: simplified terminator of block@1: // abi_routing_L8 from switch tmp%1#0 {method "set_boxes(uint64,byte[],string)void" => block@2, method "check_keys()void" => block@3, method "delete_boxes()void" => block@4, method "read_boxes()(uint64,byte[],string)" => block@5, method "boxes_exist()(bool,bool,bool)" => block@6, method "slice_box()void" => block@7, method "arc4_box()void" => block@8, method "box_ref()void" => block@9, method "box_map_test()void" => block@10, method "box_map_set(uint64,string)void" => block@11, method "box_map_get(uint64)string" => block@12, method "box_map_exists(uint64)bool" => block@13, * => block@15} to switch tmp%1#0 {method "set_boxes(uint64,byte[],string)void" => block@2, method "check_keys()void" => block@3, method "delete_boxes()void" => block@4, method "read_boxes()(uint64,byte[],string)" => block@5, method "boxes_exist()(bool,bool,bool)" => block@6, method "slice_box()void" => block@7, method "arc4_box()void" => block@8, method "box_ref()void" => block@9, method "box_map_test()void" => block@10, method "box_map_set(uint64,string)void" => block@11, method "box_map_get(uint64)string" => block@12, method "box_map_exists(uint64)bool" => block@13, * => fail // reject transaction}
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@16: // bare_routing_L8 from goto_nth [block@17][tmp%57#0] else goto block@18 to goto tmp%57#0 ? block@18 : block@17
debug: inlining condition branch to err block into an assert false
debug: simplified terminator of block@16: // bare_routing_L8 from goto tmp%57#0 ? block@18 : block@17 to goto block@17
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@15: // switch_case_next_L8 into block@14: // switch_case_default_L8
debug: Merged linear block@17: // create_L8 into block@16: // bare_routing_L8
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@14: // switch_case_default_L8, block@18: // reject_bare_on_completion_L8
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.set_boxes
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.check_keys
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== "box_a" 0x626f785f61) to 1u
debug: Simplified (== "b" 0x62) to 1u
debug: Simplified (== 0x424f585f43 0x424f585f43) to 1u
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.delete_boxes
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: maybe_value_converted%1#0, a#0
debug: Replacing {maybe_value_converted%1#0} with a#0 made 1 modifications
debug: Found equivalence set: maybe_exists%3#0, a_exists#0
debug: Replacing {maybe_exists%3#0} with a_exists#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (len "42") to 2u
debug: Simplified (len "42") to 2u
debug: Simplified (== a#0 0u) to (! a#0)
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.read_boxes
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.boxes_exist
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.slice_box
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%0#0, awst_tmp%0#0
debug: Replacing {awst_tmp%0#0} with tmp%0#0 made 6 modifications
debug: Found equivalence set: tmp%11#0, awst_tmp%1#0
debug: Replacing {awst_tmp%1#0} with tmp%11#0 made 6 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (select tmp%0#0 0u tmp%2#0) to (select tmp%0#0 0u tmp%0#0)
debug: Simplified (select tmp%0#0 0u tmp%6#0) to (select tmp%0#0 0u tmp%0#0)
debug: Simplified (len "Hello") to 5u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable box_0#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%6#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%7#0: uint64 = (select tmp%0#0 0u tmp%0#0) with copy of existing registers [Register(ir_type=uint64, name='tmp%3', version=0, source_location=box_storage/contract.py:57:15-31)]
debug: Replacing redundant declaration let tmp%17#0: bool = (< 2u tmp%11#0) with copy of existing registers [Register(ir_type=bool, name='tmp%13', version=0, source_location=box_storage/contract.py:60:15-43)]
debug: Found equivalence set: tmp%3#0, tmp%7#0
debug: Replacing {tmp%7#0} with tmp%3#0 made 1 modifications
debug: Found equivalence set: tmp%13#0, tmp%17#0
debug: Replacing {tmp%17#0} with tmp%13#0 made 1 modifications
debug: Replacing redundant declaration let tmp%18#0: uint64 = (select tmp%11#0 2u tmp%13#0) with copy of existing registers [Register(ir_type=uint64, name='tmp%14', version=0, source_location=box_storage/contract.py:60:15-43)]
debug: Found equivalence set: tmp%14#0, tmp%18#0
debug: Replacing {tmp%18#0} with tmp%14#0 made 1 modifications
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.arc4_box
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: maybe_value%0#0, array_head_and_tail%0#0
debug: Replacing {array_head_and_tail%0#0} with maybe_value%0#0 made 1 modifications
debug: Found equivalence set: maybe_value%1#0, array_head_and_tail%1#0
debug: Replacing {array_head_and_tail%1#0} with maybe_value%1#0 made 1 modifications
debug: Found equivalence set: maybe_value%2#0, array_head_and_tail%2#0
debug: Replacing {array_head_and_tail%2#0} with maybe_value%2#0 made 1 modifications
debug: Found equivalence set: maybe_value%3#0, array_head_and_tail%3#0
debug: Replacing {array_head_and_tail%3#0} with maybe_value%3#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x 0x00) to 0x00
debug: Simplified (concat 0x result%3#0) to result%3#0
debug: Simplified (* 0u 1u) to 0u
debug: Simplified (* 1u 1u) to 1u
debug: Simplified (* 2u 1u) to 2u
debug: Simplified (* 3u 1u) to 3u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable box_d#0
debug: Removing unused variable reinterpret_biguint%1#0
debug: Removing unused variable reinterpret_biguint%3#0
debug: Removing unused variable reinterpret_biguint%5#0
debug: Removing unused variable reinterpret_biguint%7#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_ref
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: maybe_value%2#0, value#0
debug: Replacing {maybe_value%2#0} with value#0 made 1 modifications
debug: Found equivalence set: maybe_exists%2#0, exists#0
debug: Replacing {maybe_exists%2#0} with exists#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (len 0x68656c6c6f) to 5u
debug: Simplified (== "blob" 0x626c6f62) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable box_ref#0
debug: Removing unused variable value_3#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_test
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: maybe_value%1#0, value#1
debug: Replacing {maybe_value%1#0} with value#1 made 1 modifications
debug: Found equivalence set: maybe_exists%1#0, exists#0
debug: Replacing {maybe_exists%1#0} with exists#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat "" tmp%0#0) to tmp%0#0
debug: Simplified (concat "" tmp%2#0) to tmp%2#0
debug: Simplified (len "Hmmmmm") to 6u
debug: Simplified (concat "" tmp%6#0) to tmp%6#0
debug: Simplified (len "Hmmmmm") to 6u
debug: Simplified (concat "" tmp%10#0) to tmp%10#0
debug: Simplified (concat "" tmp%14#0) to tmp%14#0
debug: Simplified (concat "" tmp%17#0) to tmp%17#0
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable key_0#0
debug: Removing unused variable key_1#0
debug: Removing unused variable value#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%2#0: bytes = (itob 0u) with copy of existing registers [Register(ir_type=bytes, name='tmp%0', version=0, source_location=box_storage/contract.py:113:8-27)]
debug: Replacing redundant declaration let tmp%6#0: bytes = (itob 0u) with copy of existing registers [Register(ir_type=bytes, name='tmp%0', version=0, source_location=box_storage/contract.py:113:8-27)]
debug: Replacing redundant declaration let tmp%14#0: bytes = (itob 1u) with copy of existing registers [Register(ir_type=bytes, name='tmp%10', version=0, source_location=box_storage/contract.py:117:15-65)]
debug: Replacing redundant declaration let tmp%17#0: bytes = (itob 0u) with copy of existing registers [Register(ir_type=bytes, name='tmp%0', version=0, source_location=box_storage/contract.py:113:8-27)]
debug: Found equivalence set: tmp%0#0, tmp%1#0, tmp%2#0, tmp%3#0, tmp%6#0, tmp%7#0, tmp%17#0, tmp%18#0
debug: Replacing {tmp%1#0, tmp%2#0, tmp%3#0, tmp%6#0, tmp%7#0, tmp%17#0, tmp%18#0} with tmp%0#0 made 5 modifications
debug: Found equivalence set: tmp%10#0, tmp%11#0, tmp%14#0, tmp%15#0
debug: Replacing {tmp%11#0, tmp%14#0, tmp%15#0} with tmp%10#0 made 2 modifications
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_set
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat "" tmp%0#0) to tmp%0#0
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_get
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat "" tmp%0#0) to tmp%0#0
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_exists
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat "" tmp%0#0) to tmp%0#0
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to box_storage/out/BoxContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: val_as_bytes%0#0, encoded_tuple_buffer%1#0
debug: Replacing {encoded_tuple_buffer%1#0} with val_as_bytes%0#0 made 1 modifications
debug: Found equivalence set: encoded_bool%0#0, encoded_tuple_buffer%7#0
debug: Replacing {encoded_tuple_buffer%7#0} with encoded_bool%0#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable offset_as_uint16%0#0
debug: Removing unused variable data_length%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.set_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.check_keys
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.delete_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified ((extract 6 2) as_bytes%0#0) to 0x0002
debug: Simplified ((extract 6 2) as_bytes%1#0) to 0x0002
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable length%0#0
debug: Removing unused variable as_bytes%0#0
debug: Removing unused variable length%1#0
debug: Removing unused variable as_bytes%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.read_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.boxes_exist
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.slice_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified ((extract 6 2) as_bytes%0#0) to 0x0005
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable length%0#0
debug: Removing unused variable as_bytes%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.arc4_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: result%3#0, array_data%0#0
debug: Replacing {array_data%0#0} with result%3#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x00 0x01) to 0x0001
debug: Simplified (extract3 maybe_value%0#0 0u 1u) // on error: Index access is out of bounds to ((extract 0 1) maybe_value%0#0) // on error: Index access is out of bounds
debug: Simplified (extract3 maybe_value%1#0 1u 1u) // on error: Index access is out of bounds to ((extract 1 1) maybe_value%1#0) // on error: Index access is out of bounds
debug: Simplified (extract3 maybe_value%2#0 2u 1u) // on error: Index access is out of bounds to ((extract 2 1) maybe_value%2#0) // on error: Index access is out of bounds
debug: Simplified (extract3 maybe_value%3#0 3u 1u) // on error: Index access is out of bounds to ((extract 3 1) maybe_value%3#0) // on error: Index access is out of bounds
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable result%0#0
debug: Removing unused variable item_offset%0#0
debug: Removing unused variable item_offset%1#0
debug: Removing unused variable item_offset%2#0
debug: Removing unused variable item_offset%3#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_ref
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (+ 64u 5u) to 69u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%8#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_test
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%8#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_set
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%0#0, tmp%1#0
debug: Replacing {tmp%1#0} with tmp%0#0 made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_get
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%0#0, tmp%1#0
debug: Replacing {tmp%1#0} with tmp%0#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_exists
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%0#0, tmp%1#0
debug: Replacing {tmp%1#0} with tmp%0#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to box_storage/out/BoxContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.set_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.check_keys
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.delete_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x0002 "42") to 0x00023432
debug: Simplified (concat 0x0002 "42") to 0x00023432
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable length_uint16%0#0
debug: Removing unused variable length_uint16%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.read_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.boxes_exist
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.slice_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x0005 "Hello") to 0x000548656c6c6f
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable length_uint16%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.arc4_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x0001 0x02) to 0x000102
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable result%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_ref
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%3#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_test
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_set
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_get
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_exists
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to box_storage/out/BoxContract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.set_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.check_keys
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.delete_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable encoded_value%0#0
debug: Removing unused variable encoded_value%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.read_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.boxes_exist
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.slice_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable encoded_value%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.arc4_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x000102 0x03) to 0x00010203
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable result%2#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_ref
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_test
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_set
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_get
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_exists
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to box_storage/out/BoxContract.ssa.opt_pass_4.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.set_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.check_keys
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.delete_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.read_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.boxes_exist
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.slice_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.arc4_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable result%3#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_ref
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_test
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_set
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_get
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_exists
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to box_storage/out/BoxContract.ssa.opt_pass_5.ir
debug: Begin optimization pass 6/100
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.set_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.check_keys
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.delete_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.read_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.boxes_exist
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.slice_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.arc4_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_ref
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_test
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_set
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_get
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_exists
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 6, ending loop
debug: Removing Phis from examples.box_storage.contract.BoxContract.approval_program
debug: Removing Phis from examples.box_storage.contract.BoxContract.set_boxes
debug: Removing Phis from examples.box_storage.contract.BoxContract.check_keys
debug: Removing Phis from examples.box_storage.contract.BoxContract.delete_boxes
debug: Removing Phis from examples.box_storage.contract.BoxContract.read_boxes
debug: Removing Phis from examples.box_storage.contract.BoxContract.boxes_exist
debug: Removing Phis from examples.box_storage.contract.BoxContract.slice_box
debug: Removing Phis from examples.box_storage.contract.BoxContract.arc4_box
debug: Removing Phis from examples.box_storage.contract.BoxContract.box_ref
debug: Removing Phis from examples.box_storage.contract.BoxContract.box_map_test
debug: Removing Phis from examples.box_storage.contract.BoxContract.box_map_set
debug: Removing Phis from examples.box_storage.contract.BoxContract.box_map_get
debug: Removing Phis from examples.box_storage.contract.BoxContract.box_map_exists
debug: Removing Phis from examples.box_storage.contract.BoxContract.clear_state_program
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.set_boxes using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.check_keys using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.delete_boxes using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.read_boxes using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.boxes_exist using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.slice_box using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.arc4_box using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.box_ref using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.box_map_test using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.box_map_set using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.box_map_get using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.box_map_exists using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.approval_program
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.set_boxes
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.check_keys
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.delete_boxes
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.read_boxes
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.boxes_exist
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.slice_box
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.arc4_box
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.box_ref
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.box_map_test
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.box_map_set
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.box_map_get
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.box_map_exists
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to box_storage/out/BoxContract.destructured.ir
debug: Inserted main_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_abi_routing@1.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_abi_routing@1.ops[15]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[1]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[3]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[5]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[7]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[10]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[12]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[15]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[17]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[21]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[23]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[27]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[31]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[25]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[31]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[19]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[31]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_check_keys_route@3.ops[1]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_check_keys_route@3.ops[3]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_check_keys_route@3.ops[5]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_check_keys_route@3.ops[7]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_check_keys_route@3.ops[10]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_check_keys_route@3.ops[12]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_delete_boxes_route@4.ops[1]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_delete_boxes_route@4.ops[3]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_delete_boxes_route@4.ops[5]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_delete_boxes_route@4.ops[7]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_delete_boxes_route@4.ops[10]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_delete_boxes_route@4.ops[12]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[1]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[3]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[5]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[7]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[10]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[12]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[17]: 'store awst_tmp%0#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[19]: 'load awst_tmp%0#0' with 'load awst_tmp%0#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[24]: 'store length%0#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[26]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[28]: 'store as_bytes%0#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[30]: 'load as_bytes%0#0' with 'load as_bytes%0#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[32]: 'store length_uint16%0#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[34]: 'load length_uint16%0#0' with 'load length_uint16%0#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[48]: 'store current_tail_offset%1#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[50]: 'load current_tail_offset%1#0' with 'load current_tail_offset%1#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[52]: 'store as_bytes%2#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[54]: 'load as_bytes%2#0' with 'load as_bytes%2#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[60]: 'store encoded_tuple_buffer%3#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[62]: 'load encoded_tuple_buffer%3#0' with 'load encoded_tuple_buffer%3#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[65]: 'store encoded_tuple_buffer%4#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[67]: 'load encoded_tuple_buffer%4#0' with 'load encoded_tuple_buffer%4#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[74]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[76]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[44]: 'store data_length%0#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[47]: 'load data_length%0#0' with 'load data_length%0#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[57]: 'store offset_as_uint16%1#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[60]: 'load offset_as_uint16%1#0' with 'load offset_as_uint16%1#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[72]: 'store encoded_tuple_buffer%5#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[75]: 'load encoded_tuple_buffer%5#0' with 'load encoded_tuple_buffer%5#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[16]: 'store awst_tmp%1#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[23]: 'load awst_tmp%1#0' with 'load awst_tmp%1#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[38]: 'store encoded_value%0#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[44]: 'load encoded_value%0#0' with 'load encoded_value%0#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[24]: 'store awst_tmp%1#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[37]: 'load awst_tmp%1#0' with 'load awst_tmp%1#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[22]: 'store val_as_bytes%0#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[42]: 'load val_as_bytes%0#0' with 'load val_as_bytes%0#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[45]: 'store encoded_tuple_buffer%2#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[64]: 'load encoded_tuple_buffer%2#0' with 'load encoded_tuple_buffer%2#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[48]: 'store encoded_value%0#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[71]: 'load encoded_value%0#0' with 'load encoded_value%0#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@5.ops[15]: 'store awst_tmp%2#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@5.ops[77]: 'load awst_tmp%2#0' with 'load awst_tmp%2#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[1]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[3]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[5]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[7]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[10]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[12]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[54]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[56]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[50]: 'store encoded_tuple_buffer%9#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[53]: 'load encoded_tuple_buffer%9#0' with 'load encoded_tuple_buffer%9#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[17]: 'store awst_tmp%3#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[21]: 'load awst_tmp%3#0' with 'load awst_tmp%3#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[37]: 'store is_true%0#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[41]: 'load is_true%0#0' with 'load is_true%0#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[47]: 'store is_true%1#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[51]: 'load is_true%1#0' with 'load is_true%1#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[43]: 'store encoded_tuple_buffer%8#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[50]: 'load encoded_tuple_buffer%8#0' with 'load encoded_tuple_buffer%8#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[28]: 'store encoded_bool%1#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[35]: 'load encoded_bool%1#0' with 'load encoded_bool%1#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[16]: 'store awst_tmp%4#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[27]: 'load awst_tmp%4#0' with 'load awst_tmp%4#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[35]: 'store encoded_bool%2#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[48]: 'load encoded_bool%2#0' with 'load encoded_bool%2#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[15]: 'store awst_tmp%5#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[34]: 'load awst_tmp%5#0' with 'load awst_tmp%5#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@6.ops[25]: 'store encoded_bool%0#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@6.ops[44]: 'load encoded_bool%0#0' with 'load encoded_bool%0#0 from l-stack (no copy)'
debug: Inserted main_slice_box_route@7.ops[1]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced main_slice_box_route@7.ops[3]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted main_slice_box_route@7.ops[5]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced main_slice_box_route@7.ops[7]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted main_slice_box_route@7.ops[10]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced main_slice_box_route@7.ops[12]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted main_arc4_box_route@8.ops[1]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced main_arc4_box_route@8.ops[3]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted main_arc4_box_route@8.ops[5]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced main_arc4_box_route@8.ops[7]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted main_arc4_box_route@8.ops[10]: 'store tmp%29#0 to l-stack (copy)'
debug: Replaced main_arc4_box_route@8.ops[12]: 'load tmp%29#0' with 'load tmp%29#0 from l-stack (no copy)'
debug: Inserted main_box_ref_route@9.ops[1]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced main_box_ref_route@9.ops[3]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted main_box_ref_route@9.ops[5]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced main_box_ref_route@9.ops[7]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted main_box_ref_route@9.ops[10]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced main_box_ref_route@9.ops[12]: 'load tmp%32#0' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted main_box_map_test_route@10.ops[1]: 'store tmp%33#0 to l-stack (copy)'
debug: Replaced main_box_map_test_route@10.ops[3]: 'load tmp%33#0' with 'load tmp%33#0 from l-stack (no copy)'
debug: Inserted main_box_map_test_route@10.ops[5]: 'store tmp%34#0 to l-stack (copy)'
debug: Replaced main_box_map_test_route@10.ops[7]: 'load tmp%34#0' with 'load tmp%34#0 from l-stack (no copy)'
debug: Inserted main_box_map_test_route@10.ops[10]: 'store tmp%35#0 to l-stack (copy)'
debug: Replaced main_box_map_test_route@10.ops[12]: 'load tmp%35#0' with 'load tmp%35#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@11.ops[1]: 'store tmp%36#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@11.ops[3]: 'load tmp%36#0' with 'load tmp%36#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@11.ops[5]: 'store tmp%37#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@11.ops[7]: 'load tmp%37#0' with 'load tmp%37#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@11.ops[10]: 'store tmp%38#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@11.ops[12]: 'load tmp%38#0' with 'load tmp%38#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@11.ops[15]: 'store tmp%39#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@11.ops[17]: 'load tmp%39#0' with 'load tmp%39#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@11.ops[21]: 'store tmp%41#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@11.ops[23]: 'load tmp%41#0' with 'load tmp%41#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@11.ops[25]: 'store tmp%42#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@11.ops[28]: 'load tmp%42#0' with 'load tmp%42#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@11.ops[19]: 'store tmp%40#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@11.ops[28]: 'load tmp%40#0' with 'load tmp%40#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@12.ops[1]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@12.ops[3]: 'load tmp%43#0' with 'load tmp%43#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@12.ops[5]: 'store tmp%44#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@12.ops[7]: 'load tmp%44#0' with 'load tmp%44#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@12.ops[10]: 'store tmp%45#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@12.ops[12]: 'load tmp%45#0' with 'load tmp%45#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@12.ops[15]: 'store tmp%46#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@12.ops[17]: 'load tmp%46#0' with 'load tmp%46#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@12.ops[19]: 'store tmp%47#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@12.ops[21]: 'load tmp%47#0' with 'load tmp%47#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@12.ops[23]: 'store tmp%48#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@12.ops[25]: 'load tmp%48#0' with 'load tmp%48#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@12.ops[27]: 'store length%1#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@12.ops[29]: 'load length%1#0' with 'load length%1#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@12.ops[31]: 'store as_bytes%3#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@12.ops[33]: 'load as_bytes%3#0' with 'load as_bytes%3#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@12.ops[35]: 'store length_uint16%1#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@12.ops[37]: 'load length_uint16%1#0' with 'load length_uint16%1#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@12.ops[44]: 'store tmp%49#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@12.ops[46]: 'load tmp%49#0' with 'load tmp%49#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@12.ops[40]: 'store encoded_value%1#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@12.ops[43]: 'load encoded_value%1#0' with 'load encoded_value%1#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@12.ops[26]: 'store tmp%48#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@12.ops[39]: 'load tmp%48#0' with 'load tmp%48#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@13.ops[1]: 'store tmp%50#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@13.ops[3]: 'load tmp%50#0' with 'load tmp%50#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@13.ops[5]: 'store tmp%51#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@13.ops[7]: 'load tmp%51#0' with 'load tmp%51#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@13.ops[10]: 'store tmp%52#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@13.ops[12]: 'load tmp%52#0' with 'load tmp%52#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@13.ops[15]: 'store tmp%53#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@13.ops[17]: 'load tmp%53#0' with 'load tmp%53#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@13.ops[19]: 'store tmp%54#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@13.ops[21]: 'load tmp%54#0' with 'load tmp%54#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@13.ops[32]: 'store tmp%56#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@13.ops[34]: 'load tmp%56#0' with 'load tmp%56#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@13.ops[28]: 'store encoded_bool%3#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@13.ops[31]: 'load encoded_bool%3#0' with 'load encoded_bool%3#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@13.ops[23]: 'store tmp%55#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@13.ops[27]: 'load tmp%55#0' with 'load tmp%55#0 from l-stack (no copy)'
debug: Inserted main_bare_routing@16.ops[1]: 'store tmp%57#0 to l-stack (copy)'
debug: Replaced main_bare_routing@16.ops[3]: 'load tmp%57#0' with 'load tmp%57#0 from l-stack (no copy)'
debug: Inserted main_bare_routing@16.ops[5]: 'store not%tmp%57#0 to l-stack (copy)'
debug: Replaced main_bare_routing@16.ops[7]: 'load not%tmp%57#0' with 'load not%tmp%57#0 from l-stack (no copy)'
debug: Inserted main_bare_routing@16.ops[10]: 'store tmp%58#0 to l-stack (copy)'
debug: Replaced main_bare_routing@16.ops[12]: 'load tmp%58#0' with 'load tmp%58#0 from l-stack (no copy)'
debug: Inserted main_bare_routing@16.ops[14]: 'store tmp%59#0 to l-stack (copy)'
debug: Replaced main_bare_routing@16.ops[16]: 'load tmp%59#0' with 'load tmp%59#0 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.box_storage.contract.BoxContract.approval_program
debug: Inserted set_boxes_block@0.ops[21]: 'store maybe_value%0#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[23]: 'load maybe_value%0#0' with 'load maybe_value%0#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[31]: 'store new_box_value%1#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[33]: 'load new_box_value%1#0' with 'load new_box_value%1#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[48]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[50]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[64]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[66]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[80]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[82]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[2]: 'store new_box_value%0#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[5]: 'load new_box_value%0#0' with 'load new_box_value%0#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[36]: 'store new_box_value%2#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[39]: 'load new_box_value%2#0' with 'load new_box_value%2#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[43]: 'store check%0#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[46]: 'load check%0#0' with 'load check%0#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[57]: 'store check%1#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[60]: 'load check%1#0' with 'load check%1#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[64]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[67]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[75]: 'store check%2#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[78]: 'load check%2#0' with 'load check%2#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[82]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[85]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[26]: 'store maybe_value_converted%0#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[30]: 'load maybe_value_converted%0#0' with 'load maybe_value_converted%0#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[46]: 'store value%0#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[50]: 'load value%0#0' with 'load value%0#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[21]: 'store maybe_exists%0#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[29]: 'load maybe_exists%0#0' with 'load maybe_exists%0#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[62]: 'store value%1#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[70]: 'load value%1#0' with 'load value%1#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[81]: 'store value%2#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[89]: 'load value%2#0' with 'load value%2#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[12]: 'store maybe_value%0#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[14]: 'load maybe_value%0#0' with 'load maybe_value%0#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[21]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[23]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[26]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[28]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[38]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[40]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[43]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[45]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[55]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[57]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[60]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[62]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[67]: 'store maybe_value%3#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[69]: 'load maybe_value%3#0' with 'load maybe_value%3#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[74]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[76]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[80]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[82]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[16]: 'store maybe_value_converted%0#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[19]: 'load maybe_value_converted%0#0' with 'load maybe_value_converted%0#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[34]: 'store maybe_value%1#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[37]: 'load maybe_value%1#0' with 'load maybe_value%1#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[52]: 'store maybe_value%2#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[55]: 'load maybe_value%2#0' with 'load maybe_value%2#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[33]: 'store maybe_exists%1#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[39]: 'load maybe_exists%1#0' with 'load maybe_exists%1#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[52]: 'store maybe_exists%2#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[58]: 'load maybe_exists%2#0' with 'load maybe_exists%2#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[71]: 'store a_exists#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[78]: 'load a_exists#0' with 'load a_exists#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[77]: 'store a#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[85]: 'load a#0' with 'load a#0 from l-stack (no copy)'
debug: Inserted delete_boxes_block@0.ops[11]: 'store maybe_exists%0#0 to l-stack (copy)'
debug: Replaced delete_boxes_block@0.ops[21]: 'load maybe_exists%0#0' with 'load maybe_exists%0#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[3]: 'store maybe_value%0#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[5]: 'load maybe_value%0#0' with 'load maybe_value%0#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[12]: 'store maybe_exists%1#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[15]: 'load maybe_exists%1#0' with 'load maybe_exists%1#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[19]: 'store maybe_exists%2#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[22]: 'load maybe_exists%2#0' with 'load maybe_exists%2#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[2]: 'store maybe_exists%0#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[9]: 'load maybe_exists%0#0' with 'load maybe_exists%0#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[22]: 'store maybe_value%2#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[28]: 'load maybe_value%2#0' with 'load maybe_value%2#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[15]: 'store maybe_value%1#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[28]: 'load maybe_value%1#0' with 'load maybe_value%1#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[8]: 'store maybe_value_converted%0#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[28]: 'load maybe_value_converted%0#0' with 'load maybe_value_converted%0#0 from l-stack (no copy)'
debug: Inserted boxes_exist_block@0.ops[10]: 'store maybe_exists%2#0 to l-stack (copy)'
debug: Replaced boxes_exist_block@0.ops[15]: 'load maybe_exists%2#0' with 'load maybe_exists%2#0 from l-stack (no copy)'
debug: Inserted boxes_exist_block@0.ops[6]: 'store maybe_exists%1#0 to l-stack (copy)'
debug: Replaced boxes_exist_block@0.ops[15]: 'load maybe_exists%1#0' with 'load maybe_exists%1#0 from l-stack (no copy)'
debug: Inserted boxes_exist_block@0.ops[2]: 'store maybe_exists%0#0 to l-stack (copy)'
debug: Replaced boxes_exist_block@0.ops[15]: 'load maybe_exists%0#0' with 'load maybe_exists%0#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[9]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[11]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[24]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[26]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[34]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[36]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[39]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[41]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[70]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[72]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[80]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[82]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[85]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[87]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[12]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[14]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[53]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[56]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[19]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[22]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[21]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[25]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[32]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[36]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[60]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[63]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[62]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[66]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[71]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[74]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[73]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[77]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[84]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[88]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[15]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[19]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[32]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[37]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[85]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[90]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[67]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[73]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[17]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[32]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[72]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[87]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[11]: 'store reinterpret_biguint%0#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[13]: 'load reinterpret_biguint%0#0' with 'load reinterpret_biguint%0#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[16]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[18]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[28]: 'store reinterpret_biguint%2#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[30]: 'load reinterpret_biguint%2#0' with 'load reinterpret_biguint%2#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[33]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[35]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[45]: 'store reinterpret_biguint%4#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[47]: 'load reinterpret_biguint%4#0' with 'load reinterpret_biguint%4#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[50]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[52]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[62]: 'store reinterpret_biguint%6#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[64]: 'load reinterpret_biguint%6#0' with 'load reinterpret_biguint%6#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[67]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[69]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[5]: 'store maybe_exists%0#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[8]: 'load maybe_exists%0#0' with 'load maybe_exists%0#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[23]: 'store maybe_exists%1#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[26]: 'load maybe_exists%1#0' with 'load maybe_exists%1#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[41]: 'store maybe_exists%2#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[44]: 'load maybe_exists%2#0' with 'load maybe_exists%2#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[59]: 'store maybe_exists%3#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[62]: 'load maybe_exists%3#0' with 'load maybe_exists%3#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[7]: 'store maybe_value%0#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[11]: 'load maybe_value%0#0' with 'load maybe_value%0#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[26]: 'store maybe_value%1#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[30]: 'load maybe_value%1#0' with 'load maybe_value%1#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[45]: 'store maybe_value%2#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[49]: 'load maybe_value%2#0' with 'load maybe_value%2#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[64]: 'store maybe_value%3#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[68]: 'load maybe_value%3#0' with 'load maybe_value%3#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[6]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[8]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[13]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[15]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[51]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[53]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[60]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[62]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[66]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[68]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[76]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[78]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[83]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[85]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[95]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[97]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[100]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[102]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[126]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[128]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[2]: 'store maybe_exists%0#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[5]: 'load maybe_exists%0#0' with 'load maybe_exists%0#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[20]: 'store maybe_exists%1#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[23]: 'load maybe_exists%1#0' with 'load maybe_exists%1#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[58]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[61]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[75]: 'store exists#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[78]: 'load exists#0' with 'load exists#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[94]: 'store maybe_value%3#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[97]: 'load maybe_value%3#0' with 'load maybe_value%3#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[112]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[115]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[119]: 'store maybe_exists%4#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[122]: 'load maybe_exists%4#0' with 'load maybe_exists%4#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[126]: 'store check%0#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[129]: 'load check%0#0' with 'load check%0#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[128]: 'store value%0#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[132]: 'load value%0#0' with 'load value%0#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[93]: 'store maybe_exists%3#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[99]: 'load maybe_exists%3#0' with 'load maybe_exists%3#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[26]: 'store sender_bytes#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[32]: 'load sender_bytes#0' with 'load sender_bytes#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[106]: 'store sender_bytes#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[112]: 'load sender_bytes#0' with 'load sender_bytes#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[78]: 'store value#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[86]: 'load value#0' with 'load value#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[100]: 'store sender_bytes#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[107]: 'load sender_bytes#0' with 'load sender_bytes#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[50]: 'store prefix#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[62]: 'load prefix#0' with 'load prefix#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[29]: 'store app_address#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[41]: 'load app_address#0' with 'load app_address#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[42]: 'store app_address#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[54]: 'load app_address#0' with 'load app_address#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[34]: 'store sender_bytes#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[56]: 'load sender_bytes#0' with 'load sender_bytes#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[57]: 'store sender_bytes#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[104]: 'load sender_bytes#0' with 'load sender_bytes#0 from l-stack (no copy)'
debug: Inserted box_ref_block@0.ops[56]: 'store app_address#0 to l-stack (copy)'
debug: Replaced box_ref_block@0.ops[121]: 'load app_address#0' with 'load app_address#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[19]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[21]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[32]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[34]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[38]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[40]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[48]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[50]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[53]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[55]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[63]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[65]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[12]: 'store check%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[15]: 'load check%0#0' with 'load check%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[26]: 'store check%1#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[29]: 'load check%1#0' with 'load check%1#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[45]: 'store maybe_value%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[48]: 'load maybe_value%0#0' with 'load maybe_value%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[62]: 'store exists#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[65]: 'load exists#0' with 'load exists#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[73]: 'store maybe_exists%2#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[76]: 'load maybe_exists%2#0' with 'load maybe_exists%2#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[5]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[8]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[9]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[12]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[16]: 'store value%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[20]: 'load value%0#0' with 'load value%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[31]: 'store value%1#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[35]: 'load value%1#0' with 'load value%1#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[48]: 'store maybe_exists%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[54]: 'load maybe_exists%0#0' with 'load maybe_exists%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[13]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[28]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[48]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[67]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[29]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[79]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_set_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_set_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_set_block@0.ops[5]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_set_block@0.ops[8]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_get_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_get_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_get_block@0.ops[6]: 'store maybe_exists%0#0 to l-stack (copy)'
debug: Replaced box_map_get_block@0.ops[9]: 'load maybe_exists%0#0' with 'load maybe_exists%0#0 from l-stack (no copy)'
debug: Inserted box_map_get_block@0.ops[8]: 'store maybe_value%0#0 to l-stack (copy)'
debug: Replaced box_map_get_block@0.ops[12]: 'load maybe_value%0#0' with 'load maybe_value%0#0 from l-stack (no copy)'
debug: Inserted box_map_exists_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_exists_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_exists_block@0.ops[6]: 'store maybe_exists%0#0 to l-stack (copy)'
debug: Replaced box_map_exists_block@0.ops[9]: 'load maybe_exists%0#0' with 'load maybe_exists%0#0 from l-stack (no copy)'
info: Writing box_storage/out/BoxContract.approval.teal
info: Writing box_storage/out/BoxContract.clear.teal
info: Writing box_storage/out/BoxContract.arc32.json
info: Writing box_storage/out/client_BoxContract.py