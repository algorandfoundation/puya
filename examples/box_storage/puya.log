debug: PuyaOptions(paths=['box_storage'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@0: // L39
debug: Terminated block@0: // L39
debug: Sealing block@0: // L57
debug: Terminated block@0: // L57
debug: Sealing block@0: // L84
debug: Terminated block@0: // L84
debug: Sealing block@None: // if_body_L106
debug: Sealing block@None: // else_body_L106
debug: Terminated block@1: // if_body_L106
debug: Sealing block@2: // after_if_else_L106
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L106
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L84
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L106
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L84
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L106
debug: Sealing block@None: // ternary_true_L110
debug: Sealing block@None: // ternary_false_L110
debug: Terminated block@3: // ternary_true_L110
debug: Terminated block@4: // ternary_false_L110
debug: Sealing block@5: // ternary_merge_L110
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L110
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L110
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L110
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L106
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L84
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@6: // for_header_L110
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@6: // for_header_L110
debug: Terminated block@6: // for_header_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@7: // for_body_L110
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L110
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L110
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L110
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L110
debug: Terminated block@7: // for_body_L110
debug: Sealing block@8: // for_footer_L110
debug: Terminated block@8: // for_footer_L110
debug: Sealing block@9: // for_increment_L110
debug: Terminated block@9: // for_increment_L110
debug: Sealing block@6: // for_header_L110
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5, range_item%0#3 <- block@9) in block@9: // for_increment_L110
debug: Sealing block@7: // for_body_L110
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L110
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L106
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L84
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L106
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L110
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L110
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L110
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L110
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L110
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L110
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L110
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L110
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L106
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L84
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L106
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L110
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L110
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L110
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L110
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L110
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L110
debug: Terminated block@10: // after_for_L110
debug: Sealing block@0: // L117
debug: Terminated block@0: // L117
debug: Sealing block@0: // L139
debug: Terminated block@0: // L139
debug: Sealing block@0: // L166
debug: Terminated block@0: // L166
debug: Sealing block@0: // L195
debug: Terminated block@0: // L195
debug: Sealing block@None: // if_body_L210
debug: Sealing block@None: // else_body_L210
debug: Terminated block@1: // if_body_L210
debug: Terminated block@2: // else_body_L210
debug: Sealing block@3: // after_if_else_L210
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L210
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L210
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L210
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@4: // for_header_L215
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@4: // for_header_L215
debug: Terminated block@4: // for_header_L215
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@5: // for_body_L215
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_body_L215
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@5: // for_body_L215
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@5: // for_body_L215
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_body_L215
debug: Terminated block@5: // for_body_L215
debug: Sealing block@6: // for_footer_L215
debug: Terminated block@6: // for_footer_L215
debug: Sealing block@7: // for_increment_L215
debug: Terminated block@7: // for_increment_L215
debug: Sealing block@4: // for_header_L215
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3) in block@3: // after_if_else_L210
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@3, range_item%0#3 <- block@7) in block@7: // for_increment_L215
debug: Sealing block@5: // for_body_L215
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@4) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L210
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L210
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3) in block@3: // after_if_else_L210
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@3, tail_cursor#3 <- block@7) in block@7: // for_increment_L215
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@4) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@4: // for_header_L215
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L210
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L210
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@3, array_data#2 <- block@7) in block@7: // for_increment_L215
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@4)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@4) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@4: // for_header_L215
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L210
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L210
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3) in block@3: // after_if_else_L210
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@3, header_cursor#2 <- block@7) in block@7: // for_increment_L215
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) in block@4: // for_header_L215
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@4) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L215
debug: Terminated block@8: // after_for_L215
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L15
debug: Terminated block@0: // L15
debug: Sealing block@0: // L23
debug: Terminated block@0: // L23
debug: Sealing block@0: // L27
debug: Terminated block@0: // L27
debug: Sealing block@0: // L31
debug: Terminated block@0: // L31
debug: Sealing block@0: // L40
debug: Terminated block@0: // L40
debug: Sealing block@0: // L50
debug: Terminated block@0: // L50
debug: Sealing block@0: // L69
debug: Terminated block@0: // L69
debug: Sealing block@0: // L83
debug: Terminated block@0: // L83
debug: Sealing block@0: // L87
debug: Terminated block@0: // L87
debug: Sealing block@0: // L91
debug: Terminated block@0: // L91
debug: Sealing block@0: // L8
debug: Terminated block@0: // L8
debug: Sealing block@None: // abi_routing_L8
debug: Sealing block@None: // bare_routing_L8
debug: Terminated block@1: // abi_routing_L8
debug: Sealing block@None: // switch_case_default_L8
debug: Sealing block@None: // set_boxes_route_L15
debug: Sealing block@None: // read_boxes_route_L23
debug: Sealing block@None: // boxes_exist_route_L27
debug: Sealing block@None: // slice_box_route_L31
debug: Sealing block@None: // arc4_box_route_L40
debug: Sealing block@None: // box_blob_route_L50
debug: Sealing block@None: // box_map_test_route_L69
debug: Sealing block@None: // box_map_set_route_L83
debug: Sealing block@None: // box_map_get_route_L87
debug: Sealing block@None: // box_map_exists_route_L91
debug: Terminated block@2: // set_boxes_route_L15
debug: Terminated block@3: // read_boxes_route_L23
debug: Terminated block@4: // boxes_exist_route_L27
debug: Terminated block@5: // slice_box_route_L31
debug: Terminated block@6: // arc4_box_route_L40
debug: Terminated block@7: // box_blob_route_L50
debug: Terminated block@8: // box_map_test_route_L69
debug: Terminated block@9: // box_map_set_route_L83
debug: Terminated block@10: // box_map_get_route_L87
debug: Terminated block@11: // box_map_exists_route_L91
debug: Terminated block@12: // switch_case_default_L8
debug: Sealing block@13: // switch_case_next_L8
debug: Terminated block@13: // switch_case_next_L8
debug: Terminated block@14: // bare_routing_L8
debug: Sealing block@None: // reject_bare_on_completion_L8
debug: Sealing block@None: // create_L8
debug: Terminated block@15: // create_L8
debug: Terminated block@16: // reject_bare_on_completion_L8
debug: Sealing block@None: // switch_case_next_L8
debug: Sealing block@None: // after_if_else_L8
debug: Sealing block@0: // L8
debug: Terminated block@0: // L8
debug: Output IR to box_storage/out/BoxContract.ssa.ir
info: Optimizing examples.box_storage.contract.BoxContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: awst_tmp%1#0, awst_tmp%3#0
debug: Replacing {awst_tmp%3#0} with awst_tmp%1#0 made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%2#0 NoOp) to (! tmp%2#0)
debug: Simplified (== tmp%10#0 NoOp) to (! tmp%10#0)
debug: Simplified (concat 0x val_as_bytes%0#0) to val_as_bytes%0#0
debug: Simplified ((extract 6 2) value_as_bytes%0#0) to 0x000c
debug: Simplified (== tmp%18#0 NoOp) to (! tmp%18#0)
debug: Simplified (concat 0x tmp%21#0) to tmp%21#0
debug: Simplified (== tmp%25#0 NoOp) to (! tmp%25#0)
debug: Simplified (== tmp%28#0 NoOp) to (! tmp%28#0)
debug: Simplified (== tmp%31#0 NoOp) to (! tmp%31#0)
debug: Simplified (== tmp%34#0 NoOp) to (! tmp%34#0)
debug: Simplified (== tmp%37#0 NoOp) to (! tmp%37#0)
debug: Simplified (== tmp%44#0 NoOp) to (! tmp%44#0)
debug: Simplified (== tmp%52#0 NoOp) to (! tmp%52#0)
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable current_tail_offset%0#0
debug: Removing unused variable encoded_tuple_buffer%0#0
debug: Removing unused variable value_as_bytes%0#0
debug: Removing unused variable current_tail_offset%0#2
debug: Removing unused variable current_tail_offset%1#0
debug: Removing unused variable encoded_tuple_buffer%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: inlining the default target of a switch/goto nth
debug: adding block@1: // abi_routing_L8 as a predecessor of block@13: // switch_case_next_L8 due to inlining of block@12: // switch_case_default_L8
debug: simplified terminator of block@1: // abi_routing_L8 from switch tmp%1#0 {method "set_boxes(uint64,byte[],string)void" => block@2, method "read_boxes()(uint64,byte[],string)" => block@3, method "boxes_exist()(bool,bool,bool)" => block@4, method "slice_box()void" => block@5, method "arc4_box()void" => block@6, method "box_blob()void" => block@7, method "box_map_test()void" => block@8, method "box_map_set(uint64,string)void" => block@9, method "box_map_get(uint64)string" => block@10, method "box_map_exists(uint64)bool" => block@11, * => block@12} to switch tmp%1#0 {method "set_boxes(uint64,byte[],string)void" => block@2, method "read_boxes()(uint64,byte[],string)" => block@3, method "boxes_exist()(bool,bool,bool)" => block@4, method "slice_box()void" => block@5, method "arc4_box()void" => block@6, method "box_blob()void" => block@7, method "box_map_test()void" => block@8, method "box_map_set(uint64,string)void" => block@9, method "box_map_get(uint64)string" => block@10, method "box_map_exists(uint64)bool" => block@11, * => block@13}
debug: simplifying a switch with constants into goto nth
debug: simplified terminator of block@14: // bare_routing_L8 from switch tmp%60#0 {0u => block@15, * => block@16} to goto_nth [block@15][tmp%60#0] else goto block@16
debug: inlining the default target of a switch/goto nth
debug: simplified terminator of block@1: // abi_routing_L8 from switch tmp%1#0 {method "set_boxes(uint64,byte[],string)void" => block@2, method "read_boxes()(uint64,byte[],string)" => block@3, method "boxes_exist()(bool,bool,bool)" => block@4, method "slice_box()void" => block@5, method "arc4_box()void" => block@6, method "box_blob()void" => block@7, method "box_map_test()void" => block@8, method "box_map_set(uint64,string)void" => block@9, method "box_map_get(uint64)string" => block@10, method "box_map_exists(uint64)bool" => block@11, * => block@13} to switch tmp%1#0 {method "set_boxes(uint64,byte[],string)void" => block@2, method "read_boxes()(uint64,byte[],string)" => block@3, method "boxes_exist()(bool,bool,bool)" => block@4, method "slice_box()void" => block@5, method "arc4_box()void" => block@6, method "box_blob()void" => block@7, method "box_map_test()void" => block@8, method "box_map_set(uint64,string)void" => block@9, method "box_map_get(uint64)string" => block@10, method "box_map_exists(uint64)bool" => block@11, * => fail // reject transaction}
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@14: // bare_routing_L8 from goto_nth [block@15][tmp%60#0] else goto block@16 to goto tmp%60#0 ? block@16 : block@15
debug: inlining condition branch to err block into an assert false
debug: simplified terminator of block@14: // bare_routing_L8 from goto tmp%60#0 ? block@16 : block@15 to goto block@15
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@13: // switch_case_next_L8 into block@12: // switch_case_default_L8
debug: Merged linear block@15: // create_L8 into block@14: // bare_routing_L8
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@12: // switch_case_default_L8, block@16: // reject_bare_on_completion_L8
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.set_boxes
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del "b")
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%1#0: bool = (box_del 0x424f585f43)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.read_boxes
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.boxes_exist
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.slice_box
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: box_len%0#0, awst_tmp%0#0
debug: Replacing {awst_tmp%0#0} with box_len%0#0 made 6 modifications
debug: Found equivalence set: box_len%1#0, awst_tmp%1#0
debug: Replacing {awst_tmp%1#0} with box_len%1#0 made 6 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (select box_len%0#0 0u tmp%0#0) to (select box_len%0#0 0u box_len%0#0)
debug: Simplified (select box_len%0#0 0u tmp%4#0) to (select box_len%0#0 0u box_len%0#0)
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable box_0#0
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del 0x30)
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%4#0
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%1#0: bool = (box_del 0x424f585f43)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%5#0: uint64 = (select box_len%0#0 0u box_len%0#0) with copy of existing registers [Register(ir_type=uint64, name='tmp%1', version=0, source_location=box_storage/contract.py:35:15-31)]
debug: Replacing redundant declaration let tmp%13#0: bool = (< 2u box_len%1#0) with copy of existing registers [Register(ir_type=bool, name='tmp%9', version=0, source_location=box_storage/contract.py:38:15-43)]
debug: Found equivalence set: tmp%1#0, tmp%5#0
debug: Replacing {tmp%5#0} with tmp%1#0 made 1 modifications
debug: Found equivalence set: tmp%9#0, tmp%13#0
debug: Replacing {tmp%13#0} with tmp%9#0 made 1 modifications
debug: Replacing redundant declaration let tmp%14#0: uint64 = (select box_len%1#0 2u tmp%9#0) with copy of existing registers [Register(ir_type=uint64, name='tmp%10', version=0, source_location=box_storage/contract.py:38:15-43)]
debug: Found equivalence set: tmp%10#0, tmp%14#0
debug: Replacing {tmp%14#0} with tmp%10#0 made 1 modifications
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.arc4_box
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x 0x00) to 0x00
debug: Simplified (* 0u 1u) to 0u
debug: Simplified (* 1u 1u) to 1u
debug: Simplified (* 2u 1u) to 2u
debug: Simplified (* 3u 1u) to 3u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable box_d#0
debug: Removing unused variable array_data%0#0
debug: Removing unused variable reinterpret_biguint%1#0
debug: Removing unused variable reinterpret_biguint%3#0
debug: Removing unused variable reinterpret_biguint%5#0
debug: Removing unused variable reinterpret_biguint%7#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_blob
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: box_value%0#0, value#0
debug: Replacing {box_value%0#0} with value#0 made 1 modifications
debug: Found equivalence set: box_exists%0#0, exists#0
debug: Replacing {box_exists%0#0} with exists#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable box_blob#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_test
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: box_value%1#0, value#1
debug: Replacing {box_value%1#0} with value#1 made 1 modifications
debug: Found equivalence set: box_exists%3#0, exists#0
debug: Replacing {box_exists%3#0} with exists#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat "" tmp%0#0) to tmp%0#0
debug: Simplified (concat "" tmp%2#0) to tmp%2#0
debug: Simplified (len "Hmmmmm") to 6u
debug: Simplified (concat "" tmp%6#0) to tmp%6#0
debug: Simplified (len "Hmmmmm") to 6u
debug: Simplified (concat "" tmp%10#0) to tmp%10#0
debug: Simplified (concat "" tmp%14#0) to tmp%14#0
debug: Simplified (concat "" tmp%17#0) to tmp%17#0
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable key_0#0
debug: Removing unused variable key_1#0
debug: Removing unused variable value#0
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del tmp%1#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%2#0: bytes = (itob 0u) with copy of existing registers [Register(ir_type=bytes, name='tmp%0', version=0, source_location=box_storage/contract.py:74:8-27)]
debug: Replacing redundant declaration let tmp%6#0: bytes = (itob 0u) with copy of existing registers [Register(ir_type=bytes, name='tmp%0', version=0, source_location=box_storage/contract.py:74:8-27)]
debug: Replacing redundant declaration let tmp%14#0: bytes = (itob 1u) with copy of existing registers [Register(ir_type=bytes, name='tmp%10', version=0, source_location=box_storage/contract.py:78:15-65)]
debug: Replacing redundant declaration let tmp%17#0: bytes = (itob 0u) with copy of existing registers [Register(ir_type=bytes, name='tmp%0', version=0, source_location=box_storage/contract.py:74:8-27)]
debug: Found equivalence set: tmp%0#0, tmp%1#0, tmp%2#0, tmp%3#0, tmp%6#0, tmp%7#0, tmp%17#0, tmp%18#0
debug: Replacing {tmp%1#0, tmp%2#0, tmp%3#0, tmp%6#0, tmp%7#0, tmp%17#0, tmp%18#0} with tmp%0#0 made 5 modifications
debug: Found equivalence set: tmp%10#0, tmp%11#0, tmp%14#0, tmp%15#0
debug: Replacing {tmp%11#0, tmp%14#0, tmp%15#0} with tmp%10#0 made 2 modifications
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_set
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat "" tmp%0#0) to tmp%0#0
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del tmp%1#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_get
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat "" tmp%0#0) to tmp%0#0
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_exists
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat "" tmp%0#0) to tmp%0#0
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to box_storage/out/BoxContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: val_as_bytes%0#0, encoded_tuple_buffer%0#1
debug: Replacing {encoded_tuple_buffer%0#1} with val_as_bytes%0#0 made 1 modifications
debug: Found equivalence set: tmp%21#0, encoded_tuple_buffer%1#1
debug: Replacing {encoded_tuple_buffer%1#1} with tmp%21#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable value_as_uint16%0#0
debug: Removing unused variable data_length%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.set_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del "b")
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%1#0: bool = (box_del 0x424f585f43)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.read_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.boxes_exist
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.slice_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del 0x30)
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%1#0: bool = (box_del 0x424f585f43)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.arc4_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x00 0x01) to 0x0001
debug: Simplified (extract3 box_value%0#0 0u 1u) to ((extract 0 1) box_value%0#0)
debug: Simplified (extract3 box_value%1#0 1u 1u) to ((extract 1 1) box_value%1#0)
debug: Simplified (extract3 box_value%2#0 2u 1u) to ((extract 2 1) box_value%2#0)
debug: Simplified (extract3 box_value%3#0 3u 1u) to ((extract 3 1) box_value%3#0)
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable array_data%0#1
debug: Removing unused variable item_index%0#0
debug: Removing unused variable item_index%1#0
debug: Removing unused variable item_index%2#0
debug: Removing unused variable item_index%3#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_blob
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_test
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del tmp%0#0)
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%8#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_set
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%0#0, tmp%1#0
debug: Replacing {tmp%1#0} with tmp%0#0 made 2 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del tmp%0#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_get
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%0#0, tmp%1#0
debug: Replacing {tmp%1#0} with tmp%0#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_exists
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%0#0, tmp%1#0
debug: Replacing {tmp%1#0} with tmp%0#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to box_storage/out/BoxContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.set_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del "b")
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%1#0: bool = (box_del 0x424f585f43)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.read_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.boxes_exist
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.slice_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del 0x30)
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%1#0: bool = (box_del 0x424f585f43)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.arc4_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x0001 0x02) to 0x000102
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable array_data%0#2
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_blob
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_test
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del tmp%0#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_set
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del tmp%0#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_get
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_exists
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to box_storage/out/BoxContract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.set_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del "b")
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%1#0: bool = (box_del 0x424f585f43)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.read_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.boxes_exist
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.slice_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del 0x30)
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%1#0: bool = (box_del 0x424f585f43)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.arc4_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (concat 0x000102 0x03) to 0x00010203
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable array_data%0#3
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_blob
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_test
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del tmp%0#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_set
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del tmp%0#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_get
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_exists
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to box_storage/out/BoxContract.ssa.opt_pass_4.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.set_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del "b")
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%1#0: bool = (box_del 0x424f585f43)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.read_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.boxes_exist
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.slice_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del 0x30)
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%1#0: bool = (box_del 0x424f585f43)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.arc4_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable array_data%0#4
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_blob
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_test
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del tmp%0#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_set
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del tmp%0#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_get
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_exists
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to box_storage/out/BoxContract.ssa.opt_pass_5.ir
debug: Begin optimization pass 6/100
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.set_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del "b")
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%1#0: bool = (box_del 0x424f585f43)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.read_boxes
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.boxes_exist
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.slice_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del 0x30)
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%1#0: bool = (box_del 0x424f585f43)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.arc4_box
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_blob
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_test
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del tmp%0#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_set
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Not removing unused assignment since source is not marked as pure: let box_del_res%0#0: bool = (box_del tmp%0#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_get
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.box_map_exists
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine examples.box_storage.contract.BoxContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 6, ending loop
debug: Removing Phis from examples.box_storage.contract.BoxContract.approval_program
debug: Removing Phis from examples.box_storage.contract.BoxContract.set_boxes
debug: Removing Phis from examples.box_storage.contract.BoxContract.read_boxes
debug: Removing Phis from examples.box_storage.contract.BoxContract.boxes_exist
debug: Removing Phis from examples.box_storage.contract.BoxContract.slice_box
debug: Removing Phis from examples.box_storage.contract.BoxContract.arc4_box
debug: Removing Phis from examples.box_storage.contract.BoxContract.box_blob
debug: Removing Phis from examples.box_storage.contract.BoxContract.box_map_test
debug: Removing Phis from examples.box_storage.contract.BoxContract.box_map_set
debug: Removing Phis from examples.box_storage.contract.BoxContract.box_map_get
debug: Removing Phis from examples.box_storage.contract.BoxContract.box_map_exists
debug: Removing Phis from examples.box_storage.contract.BoxContract.clear_state_program
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.approval_program using strategy RootOperandGrouping
debug: Coalescing encoded_tuple_buffer%0#2 with [encoded_tuple_buffer%0#3, encoded_tuple_buffer%0#4, encoded_tuple_buffer%0#5]
debug: Coalescing encoded_tuple_buffer%1#2 with [encoded_tuple_buffer%1#3]
debug: Coalescing resulted in 8 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.set_boxes using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.read_boxes using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.boxes_exist using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.slice_box using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.arc4_box using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.box_blob using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.box_map_test using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.box_map_set using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.box_map_get using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.box_map_exists using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.box_storage.contract.BoxContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.approval_program
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.set_boxes
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.read_boxes
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.boxes_exist
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.slice_box
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.arc4_box
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.box_blob
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.box_map_test
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.box_map_set
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.box_map_get
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.box_map_exists
debug: Sequentializing parallel copies in examples.box_storage.contract.BoxContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to box_storage/out/BoxContract.destructured.ir
debug: Inserted main_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_abi_routing@1.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_abi_routing@1.ops[13]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[1]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[3]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[5]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[7]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[10]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[12]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[15]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[17]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[21]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[23]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[27]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[31]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[25]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[31]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_set_boxes_route@2.ops[19]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_set_boxes_route@2.ops[31]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[1]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[3]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[5]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[7]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[10]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[12]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[17]: 'store awst_tmp%0#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[19]: 'load awst_tmp%0#0' with 'load awst_tmp%0#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[24]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[26]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[28]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[30]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[32]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[34]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[48]: 'store current_tail_offset%0#1 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[50]: 'load current_tail_offset%0#1' with 'load current_tail_offset%0#1 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[52]: 'store value_as_bytes%1#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[54]: 'load value_as_bytes%1#0' with 'load value_as_bytes%1#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[60]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[62]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[65]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[67]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[74]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[76]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[44]: 'store data_length%0#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[47]: 'load data_length%0#0' with 'load data_length%0#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[57]: 'store value_as_uint16%1#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[60]: 'load value_as_uint16%1#0' with 'load value_as_uint16%1#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[72]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[75]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[16]: 'store awst_tmp%1#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[23]: 'load awst_tmp%1#0' with 'load awst_tmp%1#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[38]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[44]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[24]: 'store awst_tmp%1#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[37]: 'load awst_tmp%1#0' with 'load awst_tmp%1#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[22]: 'store val_as_bytes%0#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[42]: 'load val_as_bytes%0#0' with 'load val_as_bytes%0#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[45]: 'store encoded_tuple_buffer%0#2 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[64]: 'load encoded_tuple_buffer%0#2' with 'load encoded_tuple_buffer%0#2 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[48]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[71]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_read_boxes_route@3.ops[15]: 'store awst_tmp%2#0 to l-stack (copy)'
debug: Replaced main_read_boxes_route@3.ops[77]: 'load awst_tmp%2#0' with 'load awst_tmp%2#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[1]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[3]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[5]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[7]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[10]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[12]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[54]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[56]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[50]: 'store encoded_tuple_buffer%1#2 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[53]: 'load encoded_tuple_buffer%1#2' with 'load encoded_tuple_buffer%1#2 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[17]: 'store awst_tmp%4#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[21]: 'load awst_tmp%4#0' with 'load awst_tmp%4#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[37]: 'store is_true%0#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[41]: 'load is_true%0#0' with 'load is_true%0#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[47]: 'store is_true%1#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[51]: 'load is_true%1#0' with 'load is_true%1#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[43]: 'store encoded_tuple_buffer%1#2 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[50]: 'load encoded_tuple_buffer%1#2' with 'load encoded_tuple_buffer%1#2 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[28]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[35]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[16]: 'store awst_tmp%5#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[27]: 'load awst_tmp%5#0' with 'load awst_tmp%5#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[35]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[48]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[15]: 'store awst_tmp%6#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[34]: 'load awst_tmp%6#0' with 'load awst_tmp%6#0 from l-stack (no copy)'
debug: Inserted main_boxes_exist_route@4.ops[25]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_boxes_exist_route@4.ops[44]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_slice_box_route@5.ops[1]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced main_slice_box_route@5.ops[3]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted main_slice_box_route@5.ops[5]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced main_slice_box_route@5.ops[7]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted main_slice_box_route@5.ops[10]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced main_slice_box_route@5.ops[12]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted main_arc4_box_route@6.ops[1]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced main_arc4_box_route@6.ops[3]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted main_arc4_box_route@6.ops[5]: 'store tmp%29#0 to l-stack (copy)'
debug: Replaced main_arc4_box_route@6.ops[7]: 'load tmp%29#0' with 'load tmp%29#0 from l-stack (no copy)'
debug: Inserted main_arc4_box_route@6.ops[10]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced main_arc4_box_route@6.ops[12]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted main_box_blob_route@7.ops[1]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced main_box_blob_route@7.ops[3]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted main_box_blob_route@7.ops[5]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced main_box_blob_route@7.ops[7]: 'load tmp%32#0' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted main_box_blob_route@7.ops[10]: 'store tmp%33#0 to l-stack (copy)'
debug: Replaced main_box_blob_route@7.ops[12]: 'load tmp%33#0' with 'load tmp%33#0 from l-stack (no copy)'
debug: Inserted main_box_map_test_route@8.ops[1]: 'store tmp%34#0 to l-stack (copy)'
debug: Replaced main_box_map_test_route@8.ops[3]: 'load tmp%34#0' with 'load tmp%34#0 from l-stack (no copy)'
debug: Inserted main_box_map_test_route@8.ops[5]: 'store tmp%35#0 to l-stack (copy)'
debug: Replaced main_box_map_test_route@8.ops[7]: 'load tmp%35#0' with 'load tmp%35#0 from l-stack (no copy)'
debug: Inserted main_box_map_test_route@8.ops[10]: 'store tmp%36#0 to l-stack (copy)'
debug: Replaced main_box_map_test_route@8.ops[12]: 'load tmp%36#0' with 'load tmp%36#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@9.ops[1]: 'store tmp%37#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@9.ops[3]: 'load tmp%37#0' with 'load tmp%37#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@9.ops[5]: 'store tmp%38#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@9.ops[7]: 'load tmp%38#0' with 'load tmp%38#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@9.ops[10]: 'store tmp%39#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@9.ops[12]: 'load tmp%39#0' with 'load tmp%39#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@9.ops[15]: 'store tmp%40#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@9.ops[17]: 'load tmp%40#0' with 'load tmp%40#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@9.ops[21]: 'store tmp%42#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@9.ops[23]: 'load tmp%42#0' with 'load tmp%42#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@9.ops[25]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@9.ops[28]: 'load tmp%43#0' with 'load tmp%43#0 from l-stack (no copy)'
debug: Inserted main_box_map_set_route@9.ops[19]: 'store tmp%41#0 to l-stack (copy)'
debug: Replaced main_box_map_set_route@9.ops[28]: 'load tmp%41#0' with 'load tmp%41#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@10.ops[1]: 'store tmp%44#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@10.ops[3]: 'load tmp%44#0' with 'load tmp%44#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@10.ops[5]: 'store tmp%45#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@10.ops[7]: 'load tmp%45#0' with 'load tmp%45#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@10.ops[10]: 'store tmp%46#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@10.ops[12]: 'load tmp%46#0' with 'load tmp%46#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@10.ops[15]: 'store tmp%47#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@10.ops[17]: 'load tmp%47#0' with 'load tmp%47#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@10.ops[19]: 'store tmp%48#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@10.ops[21]: 'load tmp%48#0' with 'load tmp%48#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@10.ops[23]: 'store tmp%49#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@10.ops[25]: 'load tmp%49#0' with 'load tmp%49#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@10.ops[27]: 'store length%0#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@10.ops[29]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@10.ops[31]: 'store value_as_bytes%2#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@10.ops[33]: 'load value_as_bytes%2#0' with 'load value_as_bytes%2#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@10.ops[35]: 'store value_as_uint16%2#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@10.ops[37]: 'load value_as_uint16%2#0' with 'load value_as_uint16%2#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@10.ops[44]: 'store tmp%51#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@10.ops[46]: 'load tmp%51#0' with 'load tmp%51#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@10.ops[40]: 'store tmp%50#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@10.ops[43]: 'load tmp%50#0' with 'load tmp%50#0 from l-stack (no copy)'
debug: Inserted main_box_map_get_route@10.ops[26]: 'store tmp%49#0 to l-stack (copy)'
debug: Replaced main_box_map_get_route@10.ops[39]: 'load tmp%49#0' with 'load tmp%49#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@11.ops[1]: 'store tmp%52#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@11.ops[3]: 'load tmp%52#0' with 'load tmp%52#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@11.ops[5]: 'store tmp%53#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@11.ops[7]: 'load tmp%53#0' with 'load tmp%53#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@11.ops[10]: 'store tmp%54#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@11.ops[12]: 'load tmp%54#0' with 'load tmp%54#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@11.ops[15]: 'store tmp%55#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@11.ops[17]: 'load tmp%55#0' with 'load tmp%55#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@11.ops[19]: 'store tmp%56#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@11.ops[21]: 'load tmp%56#0' with 'load tmp%56#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@11.ops[32]: 'store tmp%59#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@11.ops[34]: 'load tmp%59#0' with 'load tmp%59#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@11.ops[28]: 'store tmp%58#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@11.ops[31]: 'load tmp%58#0' with 'load tmp%58#0 from l-stack (no copy)'
debug: Inserted main_box_map_exists_route@11.ops[23]: 'store tmp%57#0 to l-stack (copy)'
debug: Replaced main_box_map_exists_route@11.ops[27]: 'load tmp%57#0' with 'load tmp%57#0 from l-stack (no copy)'
debug: Inserted main_bare_routing@14.ops[1]: 'store tmp%60#0 to l-stack (copy)'
debug: Replaced main_bare_routing@14.ops[3]: 'load tmp%60#0' with 'load tmp%60#0 from l-stack (no copy)'
debug: Inserted main_bare_routing@14.ops[5]: 'store not%tmp%60#0 to l-stack (copy)'
debug: Replaced main_bare_routing@14.ops[7]: 'load not%tmp%60#0' with 'load not%tmp%60#0 from l-stack (no copy)'
debug: Inserted main_bare_routing@14.ops[10]: 'store tmp%61#0 to l-stack (copy)'
debug: Replaced main_bare_routing@14.ops[12]: 'load tmp%61#0' with 'load tmp%61#0 from l-stack (no copy)'
debug: Inserted main_bare_routing@14.ops[14]: 'store tmp%62#0 to l-stack (copy)'
debug: Replaced main_bare_routing@14.ops[16]: 'load tmp%62#0' with 'load tmp%62#0 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.box_storage.contract.BoxContract.approval_program
debug: Inserted set_boxes_block@0.ops[21]: 'store box_value%0#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[23]: 'load box_value%0#0' with 'load box_value%0#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[31]: 'store new_box_value%1#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[33]: 'load new_box_value%1#0' with 'load new_box_value%1#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[2]: 'store new_box_value%0#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[5]: 'load new_box_value%0#0' with 'load new_box_value%0#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[36]: 'store new_box_value%2#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[39]: 'load new_box_value%2#0' with 'load new_box_value%2#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[26]: 'store box_value_uint64%0#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[30]: 'load box_value_uint64%0#0' with 'load box_value_uint64%0#0 from l-stack (no copy)'
debug: Inserted set_boxes_block@0.ops[21]: 'store box_exists%0#0 to l-stack (copy)'
debug: Replaced set_boxes_block@0.ops[29]: 'load box_exists%0#0' with 'load box_exists%0#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[3]: 'store box_value%0#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[5]: 'load box_value%0#0' with 'load box_value%0#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[12]: 'store box_exists%1#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[15]: 'load box_exists%1#0' with 'load box_exists%1#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[19]: 'store box_exists%2#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[22]: 'load box_exists%2#0' with 'load box_exists%2#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[2]: 'store box_exists%0#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[9]: 'load box_exists%0#0' with 'load box_exists%0#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[22]: 'store box_value%2#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[28]: 'load box_value%2#0' with 'load box_value%2#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[15]: 'store box_value%1#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[28]: 'load box_value%1#0' with 'load box_value%1#0 from l-stack (no copy)'
debug: Inserted read_boxes_block@0.ops[8]: 'store box_value_uint64%0#0 to l-stack (copy)'
debug: Replaced read_boxes_block@0.ops[28]: 'load box_value_uint64%0#0' with 'load box_value_uint64%0#0 from l-stack (no copy)'
debug: Inserted boxes_exist_block@0.ops[10]: 'store box_exists%2#0 to l-stack (copy)'
debug: Replaced boxes_exist_block@0.ops[15]: 'load box_exists%2#0' with 'load box_exists%2#0 from l-stack (no copy)'
debug: Inserted boxes_exist_block@0.ops[6]: 'store box_exists%1#0 to l-stack (copy)'
debug: Replaced boxes_exist_block@0.ops[15]: 'load box_exists%1#0' with 'load box_exists%1#0 from l-stack (no copy)'
debug: Inserted boxes_exist_block@0.ops[2]: 'store box_exists%0#0 to l-stack (copy)'
debug: Replaced boxes_exist_block@0.ops[15]: 'load box_exists%0#0' with 'load box_exists%0#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[25]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[27]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[35]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[37]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[40]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[42]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[73]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[75]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[83]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[85]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[88]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[90]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[8]: 'store box_exists%0#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[11]: 'load box_exists%0#0' with 'load box_exists%0#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[14]: 'store box_len%0#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[16]: 'load box_len%0#0' with 'load box_len%0#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[54]: 'store box_exists%1#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[57]: 'load box_exists%1#0' with 'load box_exists%1#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[10]: 'store box_len%0#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[14]: 'load box_len%0#0' with 'load box_len%0#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[22]: 'store box_len%0#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[25]: 'load box_len%0#0' with 'load box_len%0#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[24]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[28]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[35]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[39]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[65]: 'store box_len%1#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[68]: 'load box_len%1#0' with 'load box_len%1#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[67]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[71]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[76]: 'store box_len%1#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[79]: 'load box_len%1#0' with 'load box_len%1#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[78]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[82]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[89]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[93]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[18]: 'store box_len%0#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[22]: 'load box_len%0#0' with 'load box_len%0#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[35]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[40]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[62]: 'store box_len%1#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[67]: 'load box_len%1#0' with 'load box_len%1#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[91]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[96]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[73]: 'store box_len%1#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[79]: 'load box_len%1#0' with 'load box_len%1#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[20]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[35]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted slice_box_block@0.ops[78]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced slice_box_block@0.ops[93]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[11]: 'store reinterpret_biguint%0#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[13]: 'load reinterpret_biguint%0#0' with 'load reinterpret_biguint%0#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[16]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[18]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[28]: 'store reinterpret_biguint%2#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[30]: 'load reinterpret_biguint%2#0' with 'load reinterpret_biguint%2#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[33]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[35]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[45]: 'store reinterpret_biguint%4#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[47]: 'load reinterpret_biguint%4#0' with 'load reinterpret_biguint%4#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[50]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[52]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[62]: 'store reinterpret_biguint%6#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[64]: 'load reinterpret_biguint%6#0' with 'load reinterpret_biguint%6#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[67]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[69]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[5]: 'store box_exists%0#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[8]: 'load box_exists%0#0' with 'load box_exists%0#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[23]: 'store box_exists%1#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[26]: 'load box_exists%1#0' with 'load box_exists%1#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[41]: 'store box_exists%2#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[44]: 'load box_exists%2#0' with 'load box_exists%2#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[59]: 'store box_exists%3#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[62]: 'load box_exists%3#0' with 'load box_exists%3#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[7]: 'store box_value%0#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[11]: 'load box_value%0#0' with 'load box_value%0#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[26]: 'store box_value%1#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[30]: 'load box_value%1#0' with 'load box_value%1#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[45]: 'store box_value%2#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[49]: 'load box_value%2#0' with 'load box_value%2#0 from l-stack (no copy)'
debug: Inserted arc4_box_block@0.ops[64]: 'store box_value%3#0 to l-stack (copy)'
debug: Replaced arc4_box_block@0.ops[68]: 'load box_value%3#0' with 'load box_value%3#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[7]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[9]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[32]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[34]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[38]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[40]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[48]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[50]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[60]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[62]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[65]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[67]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[91]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[93]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[28]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[31]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[45]: 'store exists#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[48]: 'load exists#0' with 'load exists#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[57]: 'store box_value%1#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[60]: 'load box_value%1#0' with 'load box_value%1#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[75]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[78]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[82]: 'store box_exists%2#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[85]: 'load box_exists%2#0' with 'load box_exists%2#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[89]: 'store box_exists%3#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[92]: 'load box_exists%3#0' with 'load box_exists%3#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[91]: 'store box_len%1#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[95]: 'load box_len%1#0' with 'load box_len%1#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[56]: 'store box_exists%1#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[62]: 'load box_exists%1#0' with 'load box_exists%1#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[24]: 'store first_64#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[31]: 'load first_64#0' with 'load first_64#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[69]: 'store sender_bytes#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[75]: 'load sender_bytes#0' with 'load sender_bytes#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[62]: 'store sender_bytes#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[69]: 'load sender_bytes#0' with 'load sender_bytes#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[19]: 'store app_address#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[27]: 'load app_address#0' with 'load app_address#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[1]: 'store sender_bytes#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[14]: 'load sender_bytes#0' with 'load sender_bytes#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[15]: 'store sender_bytes#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[30]: 'load sender_bytes#0' with 'load sender_bytes#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[4]: 'store app_address#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[21]: 'load app_address#0' with 'load app_address#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[32]: 'store sender_bytes#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[66]: 'load sender_bytes#0' with 'load sender_bytes#0 from l-stack (no copy)'
debug: Inserted box_blob_block@0.ops[31]: 'store app_address#0 to l-stack (copy)'
debug: Replaced box_blob_block@0.ops[83]: 'load app_address#0' with 'load app_address#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[19]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[21]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[32]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[34]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[38]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[40]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[48]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[50]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[53]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[55]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[63]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[65]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[12]: 'store box_exists%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[15]: 'load box_exists%0#0' with 'load box_exists%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[26]: 'store box_exists%1#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[29]: 'load box_exists%1#0' with 'load box_exists%1#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[45]: 'store box_value%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[48]: 'load box_value%0#0' with 'load box_value%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[62]: 'store exists#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[65]: 'load exists#0' with 'load exists#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[73]: 'store box_exists%4#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[76]: 'load box_exists%4#0' with 'load box_exists%4#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[5]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[8]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[9]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[12]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[16]: 'store box_len%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[20]: 'load box_len%0#0' with 'load box_len%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[31]: 'store box_len%1#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[35]: 'load box_len%1#0' with 'load box_len%1#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[48]: 'store box_exists%2#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[54]: 'load box_exists%2#0' with 'load box_exists%2#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[13]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[28]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[48]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[67]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted box_map_test_block@0.ops[29]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_test_block@0.ops[79]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_set_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_set_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_set_block@0.ops[5]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_set_block@0.ops[8]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_get_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_get_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_get_block@0.ops[6]: 'store box_exists%0#0 to l-stack (copy)'
debug: Replaced box_map_get_block@0.ops[9]: 'load box_exists%0#0' with 'load box_exists%0#0 from l-stack (no copy)'
debug: Inserted box_map_get_block@0.ops[8]: 'store box_value%0#0 to l-stack (copy)'
debug: Replaced box_map_get_block@0.ops[12]: 'load box_value%0#0' with 'load box_value%0#0 from l-stack (no copy)'
debug: Inserted box_map_exists_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced box_map_exists_block@0.ops[4]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted box_map_exists_block@0.ops[6]: 'store box_exists%0#0 to l-stack (copy)'
debug: Replaced box_map_exists_block@0.ops[9]: 'load box_exists%0#0' with 'load box_exists%0#0 from l-stack (no copy)'
info: Writing box_storage/out/BoxContract.approval.teal
info: Writing box_storage/out/BoxContract.clear.teal
info: Writing box_storage/out/BoxContract.arc32.json
info: Writing box_storage/out/client_BoxContract.py