contract BoxContract
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
    algopy._contract.Contract,
  )
  boxes {
    ['box_a']: uint64
    ['b']: arc4.dynamic_array<arc4.uint8>
    [hex<"424F585F43">]: arc4.dynamic_array<arc4.uint8>
    ['box_d']: bytes
    ['']: uint64 => string
    ['box_ref']: bytes
    ['box_large']: examples.box_storage.contract.LargeStruct
    ['many_ints']: arc4.static_array<uint64, 513>
    ['dynamic_box']: arc4.dynamic_array<uint64>
    ['dynamic_arr_struct']: examples.box_storage.contract.DynamicArrayInAStruct
    ['too_many_bools']: arc4.static_array<bool, 33000>
  }
  
  subroutine examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return this::approval_program()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine examples.box_storage.contract.BoxContract.__init__(): void
  {
    assert(size_of(arc4.static_array<uint64, 513>) > 4096u, comment="expected ManyInts to exceed max bytes size")
  }
  
  abimethod examples.box_storage.contract.BoxContract.set_boxes(a: uint64, b: arc4.dynamic_array<arc4.uint8>, c: arc4.dynamic_array<arc4.uint8>): void
  {
    Box['box_a']: uint64 = a
    Box['b']: arc4.dynamic_array<arc4.uint8> = b.copy()
    Box[hex<"424F585F43">]: arc4.dynamic_array<arc4.uint8> = c
    Box['box_d']: bytes = arc4_decode(b, bytes)
    box_create('box_large', size_of(examples.box_storage.contract.LargeStruct))
    Box['box_large'].e: uint64 = 42u
    box_replace('box_large', size_of(arc4.static_array<arc4.uint8, 1024>) * 4u, reinterpret_cast<bytes>(42_arc4u64))
    b_value: arc4.dynamic_array<arc4.uint8> = Box['b'].copy()
    assert(Box['b'].length == b_value.length, comment="direct reference should match copy")
    Box['box_a'] += 3u
    assert(checked_maybe(box_len('box_a')) == 8u)
    assert(checked_maybe(box_len('b')) == len(reinterpret_cast<bytes>(b)))
    assert(checked_maybe(box_len(hex<"424F585F43">)) == len(reinterpret_cast<bytes>(c)))
    assert(checked_maybe(box_len('box_d')) == len(arc4_decode(b, bytes)))
    assert(box_extract(hex<"424F585F43">, 0u, 1u) == reinterpret_cast<bytes>(c)[0u])
    assert(box_extract(hex<"424F585F43">, box_len(hex<"424F585F43">)[0] - 1u, 1u) == reinterpret_cast<bytes>(c)[len(reinterpret_cast<bytes>(c)) - 1u])
    assert(box_extract(hex<"424F585F43">, 0u, SINGLE_EVAL(id=0, source=box_len(hex<"424F585F43">)[0]) - select(SINGLE_EVAL(id=0), 1u, 1u < SINGLE_EVAL(id=0)) - 0u) == reinterpret_cast<bytes>(c)[:-1])
    assert(box_extract(hex<"424F585F43">, 0u, select(SINGLE_EVAL(id=1, source=box_len(hex<"424F585F43">)[0]), 2u, 2u < SINGLE_EVAL(id=1)) - 0u) == reinterpret_cast<bytes>(c)[:2])
    assert(box_extract('box_d', 0u, 1u) == arc4_decode(b, bytes)[0u])
    assert(box_extract('box_d', box_len('box_d')[0] - 1u, 1u) == arc4_decode(b, bytes)[len(arc4_decode(b, bytes)) - 1u])
    assert(box_extract('box_d', 0u, SINGLE_EVAL(id=2, source=box_len('box_d')[0]) - select(SINGLE_EVAL(id=2), 1u, 1u < SINGLE_EVAL(id=2)) - 0u) == arc4_decode(b, bytes)[:-1])
    assert(box_extract('box_d', 0u, select(SINGLE_EVAL(id=3, source=box_len('box_d')[0]), 5u, 5u < SINGLE_EVAL(id=3)) - 0u) == arc4_decode(b, bytes)[:5])
    assert(box_extract('box_d', 0u, select(SINGLE_EVAL(id=4, source=box_len('box_d')[0]), 2u, 2u < SINGLE_EVAL(id=4)) - 0u) == arc4_decode(b, bytes)[:2u])
    assert(checked_maybe(box_len('box_large')) == size_of(examples.box_storage.contract.LargeStruct))
  }
  
  abimethod examples.box_storage.contract.BoxContract.check_keys(): void
  {
    assert(reinterpret_cast<bytes>('box_a') == hex<"626F785F61">, comment="box a key ok")
    assert(reinterpret_cast<bytes>('b') == hex<"62">, comment="box b key ok")
    assert(reinterpret_cast<bytes>(hex<"424F585F43">) == hex<"424F585F43">, comment="box c key ok")
    assert(reinterpret_cast<bytes>('box_large') == hex<"626F785F6C61726765">, comment="box large key ok")
  }
  
  abimethod examples.box_storage.contract.BoxContract.create_many_ints(): void
  {
    box_create('many_ints', size_of(arc4.static_array<uint64, 513>))
  }
  
  abimethod examples.box_storage.contract.BoxContract.set_many_ints(index: uint64, value: uint64): void
  {
    Box['many_ints'][index]: uint64 = value
  }
  
  abimethod examples.box_storage.contract.BoxContract.sum_many_ints(): uint64
  {
    _puya_lib.util.ensure_budget(required_budget=10500u, fee_source=0u)
    total: uint64 = 0u
    for val in Box['many_ints'] {
      total: uint64 = total + val
    }
    return total
  }
  
  abimethod examples.box_storage.contract.BoxContract.delete_boxes(): void
  {
    STATE_DELETE(Box['box_a'])
    STATE_DELETE(Box['b'])
    STATE_DELETE(Box[hex<"424F585F43">])
    assert(STATE_GET(Box['box_a'], default=42u) == 42u)
    assert(arc4_decode(STATE_GET(Box['b'], default=arc4_encode(hex<"3432">, arc4.dynamic_array<arc4.uint8>)), bytes) == hex<"3432">)
    assert(STATE_GET(Box[hex<"424F585F43">], default='42') == '42')
    (a, a_exists): tuple<uint64,bool> = STATE_GET_EX(Box['box_a'])
    assert(!(a_exists))
    assert(a == 0u)
    STATE_DELETE(Box['box_large'])
  }
  
  abimethod examples.box_storage.contract.BoxContract.indirect_extract_and_replace(): void
  {
    large: examples.box_storage.contract.LargeStruct = Box['box_large'].copy()
    large.e += 1u
    Box['box_large']: examples.box_storage.contract.LargeStruct = large.copy()
  }
  
  abimethod examples.box_storage.contract.BoxContract.read_boxes(): tuple<uint64,bytes,arc4.dynamic_array<arc4.uint8>,uint64>
  {
    return (examples.box_storage.contract.get_box_value_plus_1('box_a') - 1u, arc4_decode(Box['b'], bytes), Box[hex<"424F585F43">], Box['box_large'].e)
  }
  
  abimethod examples.box_storage.contract.BoxContract.boxes_exist(): tuple<bool,bool,bool,bool>
  {
    return (STATE_EXISTS(Box['box_a']), STATE_EXISTS(Box['b']), STATE_EXISTS(Box[hex<"424F585F43">]), STATE_EXISTS(Box['box_large']))
  }
  
  abimethod examples.box_storage.contract.BoxContract.create_dynamic_arr_struct(): void
  {
    Box['dynamic_arr_struct']: examples.box_storage.contract.DynamicArrayInAStruct = new examples.box_storage.contract.DynamicArrayInAStruct(a=txn<NumAppArgs>(), arr=new arc4.dynamic_array<uint64>(), b=txn<NumAppArgs>() * 2u, arr2=new arc4.dynamic_array<uint64>())
  }
  
  abimethod examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct(): void
  {
    STATE_DELETE(Box['dynamic_arr_struct'])
  }
  
  abimethod examples.box_storage.contract.BoxContract.append_dynamic_arr_struct(times: uint64): uint64
  {
    for i in range(0u, times, 1u) {
      Box['dynamic_arr_struct'].arr.extend((i))
    }
    return Box['dynamic_arr_struct'].arr.length
  }
  
  abimethod examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct(times: uint64): uint64
  {
    for _pop in range(0u, times, 1u) {
      Box['dynamic_arr_struct'].arr.pop()
    }
    return Box['dynamic_arr_struct'].arr.length
  }
  
  abimethod examples.box_storage.contract.BoxContract.set_nested_struct(struct: examples.box_storage.contract.NestedStruct): void
  {
    box: box_key = 'box'
    assert(struct.a != 0u, comment="struct.a is truthy")
    struct_bytes: bytes = txna<ApplicationArgs, 1>()
    struct_size: uint64 = len(struct_bytes)
    tail_offset: uint64 = 4098u
    box_create(box, tail_offset + struct_size)
    box_replace(box, tail_offset - 2u, reinterpret_cast<bytes>(arc4_encode(tail_offset, arc4.uint16)))
    box_replace(box, tail_offset, struct_bytes)
  }
  
  abimethod examples.box_storage.contract.BoxContract.nested_write(index: uint64, value: uint64): void
  {
    box: box_key = 'box'
    Box[box].nested.a: uint64 = value
    Box[box].nested.b: uint64 = value + 1u
    Box[box].nested.inner.arr_arr[index][index]: uint64 = value + 2u
    Box[box].nested.inner.c: uint64 = value + 3u
    Box[box].nested.inner.d: uint64 = value + 4u
    Box[box].nested.woah[index].arr_arr[index][index]: uint64 = value + 5u
  }
  
  abimethod examples.box_storage.contract.BoxContract.nested_read(i1: uint64, i2: uint64, i3: uint64): uint64
  {
    box: box_key = 'box'
    a: uint64 = Box[box].nested.a
    b: uint64 = Box[box].nested.b
    arr_arr: uint64 = Box[box].nested.inner.arr_arr[i1][i2]
    c: uint64 = Box[box].nested.inner.c
    d: uint64 = Box[box].nested.inner.d
    woah_arr_arr: uint64 = Box[box].nested.woah[i1].arr_arr[i2][i3]
    return a + b + arr_arr + c + d + woah_arr_arr
  }
  
  abimethod examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct(): uint64
  {
    assert(Box['dynamic_arr_struct'].a == 1u, comment="expected 1")
    assert(Box['dynamic_arr_struct'].b == 2u, comment="expected 2")
    total: uint64 = Box['dynamic_arr_struct'].a + Box['dynamic_arr_struct'].b
    for val in Box['dynamic_arr_struct'].arr {
      total += val
    }
    for val in Box['dynamic_arr_struct'].arr2 {
      total += val
    }
    return total
  }
  
  abimethod examples.box_storage.contract.BoxContract.create_bools(): void
  {
    box_create('too_many_bools', size_of(arc4.static_array<bool, 33000>))
  }
  
  abimethod examples.box_storage.contract.BoxContract.set_bool(index: uint64, value: bool): void
  {
    Box['too_many_bools'][index]: bool = value
  }
  
  abimethod examples.box_storage.contract.BoxContract.sum_bools(stop_at_total: uint64): uint64
  {
    total: uint64 = 0u
    for value in Box['too_many_bools'] {
      if (value) {
        total += 1u
      }
      if (total == stop_at_total) {
        break
      }
    }
    return total
  }
  
  abimethod examples.box_storage.contract.BoxContract.create_dynamic_box(): void
  {
    Box['dynamic_box']: arc4.dynamic_array<uint64> = new arc4.dynamic_array<uint64>()
  }
  
  abimethod examples.box_storage.contract.BoxContract.delete_dynamic_box(): void
  {
    STATE_DELETE(Box['dynamic_box'])
  }
  
  abimethod examples.box_storage.contract.BoxContract.append_dynamic_box(times: uint64): uint64
  {
    for i in range(0u, times, 1u) {
      Box['dynamic_box'].extend((i))
    }
    return Box['dynamic_box'].length
  }
  
  abimethod examples.box_storage.contract.BoxContract.pop_dynamic_box(times: uint64): uint64
  {
    for _pop in range(0u, times, 1u) {
      Box['dynamic_box'].pop()
    }
    return Box['dynamic_box'].length
  }
  
  abimethod examples.box_storage.contract.BoxContract.sum_dynamic_box(): uint64
  {
    total: uint64 = 0u
    for val in Box['dynamic_box'] {
      total += val
    }
    return total
  }
  
  abimethod examples.box_storage.contract.BoxContract.write_dynamic_box(index: uint64, value: uint64): void
  {
    Box['dynamic_box'][index]: uint64 = value
  }
  
  abimethod examples.box_storage.contract.BoxContract.write_dynamic_arr_struct(index: uint64, value: uint64): void
  {
    Box['dynamic_arr_struct'].arr[index]: uint64 = value
  }
  
  abimethod examples.box_storage.contract.BoxContract.slice_box(): void
  {
    box_0: box_key = reinterpret_cast<box_key>(reinterpret_cast<bytes>('0'))
    Box[box_0]: bytes = hex<"54657374696E672074657374696E6720313233">
    assert(box_extract(box_0, select(SINGLE_EVAL(id=5, source=box_len(box_0)[0]), 0u, 0u < SINGLE_EVAL(id=5)), select(SINGLE_EVAL(id=5), 7u, 7u < SINGLE_EVAL(id=5)) - select(SINGLE_EVAL(id=5), 0u, 0u < SINGLE_EVAL(id=5))) == hex<"54657374696E67">)
    Box[hex<"424F585F43">]: arc4.dynamic_array<arc4.uint8> = 'Hello'
    assert(box_extract(hex<"424F585F43">, select(SINGLE_EVAL(id=6, source=box_len(hex<"424F585F43">)[0]), 2u, 2u < SINGLE_EVAL(id=6)), select(SINGLE_EVAL(id=6), 10u, 10u < SINGLE_EVAL(id=6)) - select(SINGLE_EVAL(id=6), 2u, 2u < SINGLE_EVAL(id=6))) == hex<"48656C6C6F">)
  }
  
  abimethod examples.box_storage.contract.BoxContract.arc4_box(): void
  {
    box_d: box_key = hex<"64">
    Box[box_d]: arc4.static_array<arc4.uint8, 4> = new arc4.static_array<arc4.uint8, 4>(0_arc4u8, 1_arc4u8, 2_arc4u8, 3_arc4u8)
    assert(reinterpret_cast<biguint>(Box[box_d][0u]) == reinterpret_cast<biguint>(0_arc4u8))
    assert(reinterpret_cast<biguint>(Box[box_d][1u]) == reinterpret_cast<biguint>(1_arc4u8))
    assert(reinterpret_cast<biguint>(Box[box_d][2u]) == reinterpret_cast<biguint>(2_arc4u8))
    assert(reinterpret_cast<biguint>(Box[box_d][3u]) == reinterpret_cast<biguint>(3_arc4u8))
  }
  
  abimethod examples.box_storage.contract.BoxContract.test_box_ref(): void
  {
    box_ref: box_key = 'blob'
    assert(!(STATE_EXISTS(Box[box_ref])), comment="no data")
    box_ref: box_key = hex<"626C6F62">
    assert(!(STATE_EXISTS(Box[box_ref])), comment="no data")
    box_ref: box_key = hex<"626C6F62">
    assert(!(STATE_EXISTS(Box[box_ref])), comment="no data")
    box_ref: box_key = reinterpret_cast<box_key>(reinterpret_cast<bytes>('blob'))
    assert(!(STATE_EXISTS(Box[box_ref])), comment="no data")
    assert(box_create(box_ref, 32u))
    assert(STATE_EXISTS(Box[box_ref]), comment="has data")
    sender_bytes: bytes = reinterpret_cast<bytes>(txn<Sender>())
    app_address: bytes = reinterpret_cast<bytes>(global<CurrentApplicationAddress>())
    value_3: bytes = hex<"68656C6C6F">
    box_replace(box_ref, 0u, sender_bytes)
    box_resize(box_ref, 8000u)
    box_splice(box_ref, 0u, 0u, app_address)
    box_replace(box_ref, 64u, value_3)
    prefix: bytes = box_extract(box_ref, 0u, 64u + len(value_3))
    assert(prefix == app_address + sender_bytes + value_3)
    assert(box_del(box_ref))
    assert(reinterpret_cast<bytes>(box_ref) == hex<"626C6F62">)
    (value, exists): tuple<bytes,bool> = STATE_GET_EX(Box[box_ref])
    assert(!(exists))
    assert(value == hex<"">)
    assert(STATE_GET(Box[box_ref], default=sender_bytes) == sender_bytes)
    box_put(box_ref, sender_bytes + app_address)
    assert(STATE_EXISTS(Box[box_ref]), comment="Blob exists")
    assert(checked_maybe(box_len(box_ref)) == 64u)
    assert(examples.box_storage.contract.get_box_ref_length(box_ref) == 64u)
    box_create('box_ref', 32u)
    assert(STATE_EXISTS(Box['box_ref']), comment="has data")
    box_del('box_ref')
  }
  
  abimethod examples.box_storage.contract.BoxContract.box_map_test(): void
  {
    key_0: uint64 = 0u
    key_1: uint64 = 1u
    value: string = 'Hmmmmm'
    Box[BoxMapKey(prefix='', key=key_0)]: string = value
    box_0: box_key = BoxMapKey(prefix='', key=key_0)
    assert(checked_maybe(box_len(BoxMapKey(prefix='', key=key_0))) == len(reinterpret_cast<bytes>(value)))
    assert(checked_maybe(box_len(BoxMapKey(prefix='', key=key_0))) == checked_maybe(box_len(box_0)))
    assert(checked_maybe(box_len(BoxMapKey(prefix='', key=key_0))) == len(reinterpret_cast<bytes>(value)))
    assert(STATE_GET(Box[BoxMapKey(prefix='', key=key_1)], default='default') == 'default')
    (value, exists): tuple<string,bool> = STATE_GET_EX(Box[BoxMapKey(prefix='', key=key_1)])
    assert(!(exists))
    assert(STATE_EXISTS(Box[BoxMapKey(prefix='', key=key_0)]))
    assert(reinterpret_cast<bytes>('') == hex<"">)
    tmp_box_map: box_key = hex<"">
    Box[BoxMapKey(prefix=tmp_box_map, key=key_1)]: string = 'hello'
    assert(examples.box_storage.contract.get_box_map_value_from_key_plus_1(tmp_box_map, 0u) == 'hello')
    STATE_DELETE(Box[BoxMapKey(prefix=tmp_box_map, key=key_1)])
  }
  
  abimethod examples.box_storage.contract.BoxContract.box_map_set(key: uint64, value: string): void
  {
    Box[BoxMapKey(prefix='', key=key)]: string = value
  }
  
  abimethod examples.box_storage.contract.BoxContract.box_map_get(key: uint64): string
  {
    return Box[BoxMapKey(prefix='', key=key)]
  }
  
  abimethod examples.box_storage.contract.BoxContract.box_map_del(key: uint64): void
  {
    STATE_DELETE(Box[BoxMapKey(prefix='', key=key)])
  }
  
  abimethod examples.box_storage.contract.BoxContract.box_map_exists(key: uint64): bool
  {
    return STATE_EXISTS(Box[BoxMapKey(prefix='', key=key)])
  }
  
  baremethod examples.box_storage.contract.BoxContract.__algopy_default_create(): void
  {
  }
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}

subroutine get_box_value_plus_1(box: box_key): uint64
{
  return Box[box] + 1u
}

subroutine get_box_ref_length(ref: box_key): uint64
{
  return checked_maybe(box_len(ref))
}

subroutine get_box_map_value_from_key_plus_1(box_map: box_key, key: uint64): string
{
  return Box[BoxMapKey(prefix=box_map, key=key + 1u)]
}