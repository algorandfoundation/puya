{
    "hints": {
        "set_boxes(uint64,byte[],string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_keys()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_boxes()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "read_boxes()(uint64,byte[],string)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "boxes_exist()(bool,bool,bool)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "slice_box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc4_box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_box_ref()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_test()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_set(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_get(uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_del(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_exists(uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5hcHByb3ZhbF9wcm9ncmFtOgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgQm94Q29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDE3CiAgICBtZXRob2QgInNldF9ib3hlcyh1aW50NjQsYnl0ZVtdLHN0cmluZyl2b2lkIgogICAgbWV0aG9kICJjaGVja19rZXlzKCl2b2lkIgogICAgbWV0aG9kICJkZWxldGVfYm94ZXMoKXZvaWQiCiAgICBtZXRob2QgInJlYWRfYm94ZXMoKSh1aW50NjQsYnl0ZVtdLHN0cmluZykiCiAgICBtZXRob2QgImJveGVzX2V4aXN0KCkoYm9vbCxib29sLGJvb2wpIgogICAgbWV0aG9kICJzbGljZV9ib3goKXZvaWQiCiAgICBtZXRob2QgImFyYzRfYm94KCl2b2lkIgogICAgbWV0aG9kICJ0ZXN0X2JveF9yZWYoKXZvaWQiCiAgICBtZXRob2QgImJveF9tYXBfdGVzdCgpdm9pZCIKICAgIG1ldGhvZCAiYm94X21hcF9zZXQodWludDY0LHN0cmluZyl2b2lkIgogICAgbWV0aG9kICJib3hfbWFwX2dldCh1aW50NjQpc3RyaW5nIgogICAgbWV0aG9kICJib3hfbWFwX2RlbCh1aW50NjQpdm9pZCIKICAgIG1ldGhvZCAiYm94X21hcF9leGlzdHModWludDY0KWJvb2wiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3NldF9ib3hlc19yb3V0ZUAyIG1haW5fY2hlY2tfa2V5c19yb3V0ZUAzIG1haW5fZGVsZXRlX2JveGVzX3JvdXRlQDQgbWFpbl9yZWFkX2JveGVzX3JvdXRlQDUgbWFpbl9ib3hlc19leGlzdF9yb3V0ZUA2IG1haW5fc2xpY2VfYm94X3JvdXRlQDcgbWFpbl9hcmM0X2JveF9yb3V0ZUA4IG1haW5fdGVzdF9ib3hfcmVmX3JvdXRlQDkgbWFpbl9ib3hfbWFwX3Rlc3Rfcm91dGVAMTAgbWFpbl9ib3hfbWFwX3NldF9yb3V0ZUAxMSBtYWluX2JveF9tYXBfZ2V0X3JvdXRlQDEyIG1haW5fYm94X21hcF9kZWxfcm91dGVAMTMgbWFpbl9ib3hfbWFwX2V4aXN0c19yb3V0ZUAxNAogICAgZXJyIC8vIHJlamVjdCB0cmFuc2FjdGlvbgoKbWFpbl9zZXRfYm94ZXNfcm91dGVAMjoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjgKICAgIC8vIGNsYXNzIEJveENvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHNldF9ib3hlcwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9jaGVja19rZXlzX3JvdXRlQDM6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGNoZWNrX2tleXMKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fZGVsZXRlX2JveGVzX3JvdXRlQDQ6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGRlbGV0ZV9ib3hlcwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9yZWFkX2JveGVzX3JvdXRlQDU6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHJlYWRfYm94ZXMKICAgIGNvdmVyIDIKICAgIHN3YXAKICAgIGl0b2IKICAgIHN3YXAKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBieXRlIDB4MDAwYwogICAgY29uY2F0CiAgICBzd2FwCiAgICBkdXAKICAgIGxlbgogICAgaW50IDEyCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2JveGVzX2V4aXN0X3JvdXRlQDY6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo1MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGJveGVzX2V4aXN0CiAgICBjb3ZlciAyCiAgICBzd2FwCiAgICBieXRlIDB4MDAKICAgIGludCAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgY292ZXIgMgogICAgYnl0ZSAweDAwCiAgICBpbnQgMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGUgMHgwMAogICAgaW50IDAKICAgIHVuY292ZXIgMwogICAgc2V0Yml0CiAgICBzd2FwCiAgICBpbnQgMAogICAgZ2V0Yml0CiAgICB1bmNvdmVyIDIKICAgIGludCAxCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgc3dhcAogICAgaW50IDAKICAgIGdldGJpdAogICAgaW50IDIKICAgIHN3YXAKICAgIHNldGJpdAogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9zbGljZV9ib3hfcm91dGVANzoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjU0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgc2xpY2VfYm94CiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2FyYzRfYm94X3JvdXRlQDg6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo2MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGFyYzRfYm94CiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3Rlc3RfYm94X3JlZl9yb3V0ZUA5OgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NzMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiB0ZXN0X2JveF9yZWYKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fYm94X21hcF90ZXN0X3JvdXRlQDEwOgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTIxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgYm94X21hcF90ZXN0CiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2JveF9tYXBfc2V0X3JvdXRlQDExOgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTQyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjgKICAgIC8vIGNsYXNzIEJveENvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNDIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBib3hfbWFwX3NldAogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9ib3hfbWFwX2dldF9yb3V0ZUAxMjoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE0NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo4CiAgICAvLyBjbGFzcyBCb3hDb250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNDYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBib3hfbWFwX2dldAogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fYm94X21hcF9kZWxfcm91dGVAMTM6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNTAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgQm94Q29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTUwCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgYm94X21hcF9kZWwKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fYm94X21hcF9leGlzdHNfcm91dGVAMTQ6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNTQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgQm94Q29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTU0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgYm94X21hcF9leGlzdHMKICAgIGJ5dGUgMHgwMAogICAgaW50IDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxNzoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjgKICAgIC8vIGNsYXNzIEJveENvbnRyYWN0KGFyYzQuQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyByZWplY3QgdHJhbnNhY3Rpb24KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIGludCAxCiAgICByZXR1cm4KCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5zZXRfYm94ZXMoYTogdWludDY0LCBiOiBieXRlcywgYzogYnl0ZXMpIC0+IHZvaWQ6CnNldF9ib3hlczoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE2LTE3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBzZXRfYm94ZXMoc2VsZiwgYTogVUludDY0LCBiOiBCeXRlcywgYzogYXJjNC5TdHJpbmcpIC0+IE5vbmU6CiAgICBwcm90byAzIDAKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE4CiAgICAvLyBzZWxmLmJveF9hLnZhbHVlID0gYQogICAgZnJhbWVfZGlnIC0zCiAgICBpdG9iCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMAogICAgLy8gc2VsZi5ib3hfYSA9IEJveChVSW50NjQpCiAgICBieXRlICJib3hfYSIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE4CiAgICAvLyBzZWxmLmJveF9hLnZhbHVlID0gYQogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTEKICAgIC8vIHNlbGYuYm94X2IgPSBCb3hbQnl0ZXNdKEJ5dGVzLCBrZXk9ImIiKQogICAgYnl0ZSAiYiIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE5CiAgICAvLyBzZWxmLmJveF9iLnZhbHVlID0gYgogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMQogICAgLy8gc2VsZi5ib3hfYiA9IEJveFtCeXRlc10oQnl0ZXMsIGtleT0iYiIpCiAgICBieXRlICJiIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTkKICAgIC8vIHNlbGYuYm94X2IudmFsdWUgPSBiCiAgICBmcmFtZV9kaWcgLTIKICAgIGJveF9wdXQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEyCiAgICAvLyBzZWxmLmJveF9jID0gQm94KGFyYzQuU3RyaW5nLCBrZXk9YiJCT1hfQyIpCiAgICBieXRlIDB4NDI0ZjU4NWY0MwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjAKICAgIC8vIHNlbGYuYm94X2MudmFsdWUgPSBjCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEyCiAgICAvLyBzZWxmLmJveF9jID0gQm94KGFyYzQuU3RyaW5nLCBrZXk9YiJCT1hfQyIpCiAgICBieXRlIDB4NDI0ZjU4NWY0MwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjAKICAgIC8vIHNlbGYuYm94X2MudmFsdWUgPSBjCiAgICBmcmFtZV9kaWcgLTEKICAgIGJveF9wdXQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEwCiAgICAvLyBzZWxmLmJveF9hID0gQm94KFVJbnQ2NCkKICAgIGJ5dGUgImJveF9hIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjIKICAgIC8vIHNlbGYuYm94X2EudmFsdWUgKz0gMwogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2EgZXhpc3RzCiAgICBpbnQgMwogICAgKwogICAgaXRvYgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTAKICAgIC8vIHNlbGYuYm94X2EgPSBCb3goVUludDY0KQogICAgYnl0ZSAiYm94X2EiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyMgogICAgLy8gc2VsZi5ib3hfYS52YWx1ZSArPSAzCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMAogICAgLy8gc2VsZi5ib3hfYSA9IEJveChVSW50NjQpCiAgICBieXRlICJib3hfYSIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI0CiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfYS5sZW5ndGggPT0gOAogICAgYm94X2xlbgogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2EgZXhpc3RzCiAgICBpbnQgOAogICAgPT0KICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTEKICAgIC8vIHNlbGYuYm94X2IgPSBCb3hbQnl0ZXNdKEJ5dGVzLCBrZXk9ImIiKQogICAgYnl0ZSAiYiIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI1CiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfYi5sZW5ndGggPT0gYi5sZW5ndGgKICAgIGJveF9sZW4KICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9iIGV4aXN0cwogICAgZnJhbWVfZGlnIC0yCiAgICBsZW4KICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEyCiAgICAvLyBzZWxmLmJveF9jID0gQm94KGFyYzQuU3RyaW5nLCBrZXk9YiJCT1hfQyIpCiAgICBieXRlIDB4NDI0ZjU4NWY0MwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjYKICAgIC8vIGFzc2VydCBzZWxmLmJveF9jLmxlbmd0aCA9PSBjLmJ5dGVzLmxlbmd0aAogICAgYm94X2xlbgogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2MgZXhpc3RzCiAgICBmcmFtZV9kaWcgLTEKICAgIGxlbgogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMuYm94X3N0b3JhZ2UuY29udHJhY3QuQm94Q29udHJhY3QuY2hlY2tfa2V5cygpIC0+IHZvaWQ6CmNoZWNrX2tleXM6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyOC0yOQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgY2hlY2tfa2V5cyhzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5kZWxldGVfYm94ZXMoKSAtPiB2b2lkOgpkZWxldGVfYm94ZXM6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNC0zNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgZGVsZXRlX2JveGVzKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEwCiAgICAvLyBzZWxmLmJveF9hID0gQm94KFVJbnQ2NCkKICAgIGJ5dGUgImJveF9hIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzYKICAgIC8vIGRlbCBzZWxmLmJveF9hLnZhbHVlCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjExCiAgICAvLyBzZWxmLmJveF9iID0gQm94W0J5dGVzXShCeXRlcywga2V5PSJiIikKICAgIGJ5dGUgImIiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNwogICAgLy8gZGVsIHNlbGYuYm94X2IudmFsdWUKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTIKICAgIC8vIHNlbGYuYm94X2MgPSBCb3goYXJjNC5TdHJpbmcsIGtleT1iIkJPWF9DIikKICAgIGJ5dGUgMHg0MjRmNTg1ZjQzCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozOAogICAgLy8gZGVsIHNlbGYuYm94X2MudmFsdWUKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTAKICAgIC8vIHNlbGYuYm94X2EgPSBCb3goVUludDY0KQogICAgYnl0ZSAiYm94X2EiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozOQogICAgLy8gYXNzZXJ0IHNlbGYuYm94X2EuZ2V0KGRlZmF1bHQ9VUludDY0KDQyKSkgPT0gNDIKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGJ0b2kKICAgIGludCA0MgogICAgc3dhcAogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGludCA0MgogICAgPT0KICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTEKICAgIC8vIHNlbGYuYm94X2IgPSBCb3hbQnl0ZXNdKEJ5dGVzLCBrZXk9ImIiKQogICAgYnl0ZSAiYiIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQwCiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfYi5nZXQoZGVmYXVsdD1CeXRlcyhiIjQyIikpID09IGIiNDIiCiAgICBib3hfZ2V0CiAgICBieXRlIDB4MzQzMgogICAgY292ZXIgMgogICAgc2VsZWN0CiAgICBieXRlIDB4MzQzMgogICAgPT0KICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTIKICAgIC8vIHNlbGYuYm94X2MgPSBCb3goYXJjNC5TdHJpbmcsIGtleT1iIkJPWF9DIikKICAgIGJ5dGUgMHg0MjRmNTg1ZjQzCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0MQogICAgLy8gYXNzZXJ0IHNlbGYuYm94X2MuZ2V0KGRlZmF1bHQ9YXJjNC5TdHJpbmcoIjQyIikpID09ICI0MiIKICAgIGJveF9nZXQKICAgIGJ5dGUgMHgwMDAyMzQzMgogICAgY292ZXIgMgogICAgc2VsZWN0CiAgICBieXRlIDB4MDAwMjM0MzIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEwCiAgICAvLyBzZWxmLmJveF9hID0gQm94KFVJbnQ2NCkKICAgIGJ5dGUgImJveF9hIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDIKICAgIC8vIGEsIGFfZXhpc3RzID0gc2VsZi5ib3hfYS5tYXliZSgpCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBidG9pCiAgICBzd2FwCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0MwogICAgLy8gYXNzZXJ0IG5vdCBhX2V4aXN0cwogICAgIQogICAgYXNzZXJ0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0NAogICAgLy8gYXNzZXJ0IGEgPT0gMAogICAgIQogICAgYXNzZXJ0CiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5yZWFkX2JveGVzKCkgLT4gdWludDY0LCBieXRlcywgYnl0ZXM6CnJlYWRfYm94ZXM6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0Ni00NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgcmVhZF9ib3hlcyhzZWxmKSAtPiB0dXBsZVtVSW50NjQsIEJ5dGVzLCBhcmM0LlN0cmluZ106CiAgICBwcm90byAwIDMKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEwCiAgICAvLyBzZWxmLmJveF9hID0gQm94KFVJbnQ2NCkKICAgIGJ5dGUgImJveF9hIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDgKICAgIC8vIHJldHVybiBnZXRfYm94X3ZhbHVlX3BsdXNfMShzZWxmLmJveF9hKSAtIDEsIHNlbGYuYm94X2IudmFsdWUsIHNlbGYuYm94X2MudmFsdWUKICAgIGNhbGxzdWIgZ2V0X2JveF92YWx1ZV9wbHVzXzEKICAgIGludCAxCiAgICAtCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMQogICAgLy8gc2VsZi5ib3hfYiA9IEJveFtCeXRlc10oQnl0ZXMsIGtleT0iYiIpCiAgICBieXRlICJiIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDgKICAgIC8vIHJldHVybiBnZXRfYm94X3ZhbHVlX3BsdXNfMShzZWxmLmJveF9hKSAtIDEsIHNlbGYuYm94X2IudmFsdWUsIHNlbGYuYm94X2MudmFsdWUKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9iIGV4aXN0cwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTIKICAgIC8vIHNlbGYuYm94X2MgPSBCb3goYXJjNC5TdHJpbmcsIGtleT1iIkJPWF9DIikKICAgIGJ5dGUgMHg0MjRmNTg1ZjQzCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0OAogICAgLy8gcmV0dXJuIGdldF9ib3hfdmFsdWVfcGx1c18xKHNlbGYuYm94X2EpIC0gMSwgc2VsZi5ib3hfYi52YWx1ZSwgc2VsZi5ib3hfYy52YWx1ZQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm94X2MgZXhpc3RzCiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5nZXRfYm94X3ZhbHVlX3BsdXNfMShib3g6IGJ5dGVzKSAtPiB1aW50NjQ6CmdldF9ib3hfdmFsdWVfcGx1c18xOgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTU5LTE2MAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBnZXRfYm94X3ZhbHVlX3BsdXNfMShib3g6IEJveFtVSW50NjRdKSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE2MQogICAgLy8gcmV0dXJuIGJveC52YWx1ZSArIDEKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIGNoZWNrIEJveCBleGlzdHMKICAgIGludCAxCiAgICArCiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5ib3hlc19leGlzdCgpIC0+IHVpbnQ2NCwgdWludDY0LCB1aW50NjQ6CmJveGVzX2V4aXN0OgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NTAtNTEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGJveGVzX2V4aXN0KHNlbGYpIC0+IHR1cGxlW2Jvb2wsIGJvb2wsIGJvb2xdOgogICAgcHJvdG8gMCAzCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMAogICAgLy8gc2VsZi5ib3hfYSA9IEJveChVSW50NjQpCiAgICBieXRlICJib3hfYSIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjUyCiAgICAvLyByZXR1cm4gYm9vbChzZWxmLmJveF9hKSwgYm9vbChzZWxmLmJveF9iKSwgYm9vbChzZWxmLmJveF9jKQogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMQogICAgLy8gc2VsZi5ib3hfYiA9IEJveFtCeXRlc10oQnl0ZXMsIGtleT0iYiIpCiAgICBieXRlICJiIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NTIKICAgIC8vIHJldHVybiBib29sKHNlbGYuYm94X2EpLCBib29sKHNlbGYuYm94X2IpLCBib29sKHNlbGYuYm94X2MpCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEyCiAgICAvLyBzZWxmLmJveF9jID0gQm94KGFyYzQuU3RyaW5nLCBrZXk9YiJCT1hfQyIpCiAgICBieXRlIDB4NDI0ZjU4NWY0MwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NTIKICAgIC8vIHJldHVybiBib29sKHNlbGYuYm94X2EpLCBib29sKHNlbGYuYm94X2IpLCBib29sKHNlbGYuYm94X2MpCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIHJldHN1YgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0LnNsaWNlX2JveCgpIC0+IHZvaWQ6CnNsaWNlX2JveDoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjU0LTU1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBzbGljZV9ib3goc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NTYKICAgIC8vIGJveF8wID0gQm94KEJ5dGVzLCBrZXk9U3RyaW5nKCIwIikpCiAgICBieXRlICIwIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NTcKICAgIC8vIGJveF8wLnZhbHVlID0gQnl0ZXMoYiJUZXN0aW5nIHRlc3RpbmcgMTIzIikKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NTYKICAgIC8vIGJveF8wID0gQm94KEJ5dGVzLCBrZXk9U3RyaW5nKCIwIikpCiAgICBieXRlICIwIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NTcKICAgIC8vIGJveF8wLnZhbHVlID0gQnl0ZXMoYiJUZXN0aW5nIHRlc3RpbmcgMTIzIikKICAgIGJ5dGUgMHg1NDY1NzM3NDY5NmU2NzIwNzQ2NTczNzQ2OTZlNjcyMDMxMzIzMwogICAgYm94X3B1dAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NTYKICAgIC8vIGJveF8wID0gQm94KEJ5dGVzLCBrZXk9U3RyaW5nKCIwIikpCiAgICBieXRlICIwIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NTgKICAgIC8vIGFzc2VydCBib3hfMC52YWx1ZVswOjddID09IGIiVGVzdGluZyIKICAgIGJveF9sZW4KICAgIHBvcAogICAgZHVwCiAgICBpbnQgMAogICAgZGlnIDIKICAgIHNlbGVjdAogICAgc3dhcAogICAgaW50IDcKICAgIGRpZyAxCiAgICA8CiAgICBpbnQgNwogICAgc3dhcAogICAgc2VsZWN0CiAgICBkaWcgMQogICAgLQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NTYKICAgIC8vIGJveF8wID0gQm94KEJ5dGVzLCBrZXk9U3RyaW5nKCIwIikpCiAgICBieXRlICIwIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NTgKICAgIC8vIGFzc2VydCBib3hfMC52YWx1ZVswOjddID09IGIiVGVzdGluZyIKICAgIGNvdmVyIDIKICAgIGJveF9leHRyYWN0CiAgICBieXRlIDB4NTQ2NTczNzQ2OTZlNjcKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEyCiAgICAvLyBzZWxmLmJveF9jID0gQm94KGFyYzQuU3RyaW5nLCBrZXk9YiJCT1hfQyIpCiAgICBieXRlIDB4NDI0ZjU4NWY0MwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NjAKICAgIC8vIHNlbGYuYm94X2MudmFsdWUgPSBhcmM0LlN0cmluZygiSGVsbG8iKQogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMgogICAgLy8gc2VsZi5ib3hfYyA9IEJveChhcmM0LlN0cmluZywga2V5PWIiQk9YX0MiKQogICAgYnl0ZSAweDQyNGY1ODVmNDMKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjYwCiAgICAvLyBzZWxmLmJveF9jLnZhbHVlID0gYXJjNC5TdHJpbmcoIkhlbGxvIikKICAgIGJ5dGUgMHgwMDA1NDg2NTZjNmM2ZgogICAgYm94X3B1dAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTIKICAgIC8vIHNlbGYuYm94X2MgPSBCb3goYXJjNC5TdHJpbmcsIGtleT1iIkJPWF9DIikKICAgIGJ5dGUgMHg0MjRmNTg1ZjQzCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo2MQogICAgLy8gYXNzZXJ0IHNlbGYuYm94X2MudmFsdWUuYnl0ZXNbMjoxMF0gPT0gYiJIZWxsbyIKICAgIGJveF9sZW4KICAgIHBvcAogICAgaW50IDIKICAgIGRpZyAxCiAgICA8CiAgICBzd2FwCiAgICBkdXAKICAgIGludCAyCiAgICB1bmNvdmVyIDMKICAgIHNlbGVjdAogICAgc3dhcAogICAgaW50IDEwCiAgICBkaWcgMQogICAgPAogICAgaW50IDEwCiAgICBzd2FwCiAgICBzZWxlY3QKICAgIGRpZyAxCiAgICAtCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMgogICAgLy8gc2VsZi5ib3hfYyA9IEJveChhcmM0LlN0cmluZywga2V5PWIiQk9YX0MiKQogICAgYnl0ZSAweDQyNGY1ODVmNDMKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjYxCiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfYy52YWx1ZS5ieXRlc1syOjEwXSA9PSBiIkhlbGxvIgogICAgY292ZXIgMgogICAgYm94X2V4dHJhY3QKICAgIGJ5dGUgMHg0ODY1NmM2YzZmCiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5hcmM0X2JveCgpIC0+IHZvaWQ6CmFyYzRfYm94OgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NjMtNjQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGFyYzRfYm94KHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjY1CiAgICAvLyBib3hfZCA9IEJveChTdGF0aWNJbnRzLCBrZXk9Qnl0ZXMoYiJkIikpCiAgICBieXRlIDB4NjQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjY2CiAgICAvLyBib3hfZC52YWx1ZSA9IFN0YXRpY0ludHMoYXJjNC5VSW50OCgwKSwgYXJjNC5VSW50OCgxKSwgYXJjNC5VSW50OCgyKSwgYXJjNC5VSW50OCgzKSkKICAgIGJ5dGUgMHgwMDAxMDIwMwogICAgYm94X3B1dAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NjUKICAgIC8vIGJveF9kID0gQm94KFN0YXRpY0ludHMsIGtleT1CeXRlcyhiImQiKSkKICAgIGJ5dGUgMHg2NAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NjgKICAgIC8vIGFzc2VydCBib3hfZC52YWx1ZVswXSA9PSAwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgQm94IGV4aXN0cwogICAgZXh0cmFjdCAwIDEgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBieXRlIDB4MDAKICAgIGI9PQogICAgYXNzZXJ0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo2NQogICAgLy8gYm94X2QgPSBCb3goU3RhdGljSW50cywga2V5PUJ5dGVzKGIiZCIpKQogICAgYnl0ZSAweDY0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo2OQogICAgLy8gYXNzZXJ0IGJveF9kLnZhbHVlWzFdID09IDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBCb3ggZXhpc3RzCiAgICBleHRyYWN0IDEgMSAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ5dGUgMHgwMQogICAgYj09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjY1CiAgICAvLyBib3hfZCA9IEJveChTdGF0aWNJbnRzLCBrZXk9Qnl0ZXMoYiJkIikpCiAgICBieXRlIDB4NjQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjcwCiAgICAvLyBhc3NlcnQgYm94X2QudmFsdWVbMl0gPT0gMgogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIEJveCBleGlzdHMKICAgIGV4dHJhY3QgMiAxIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnl0ZSAweDAyCiAgICBiPT0KICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NjUKICAgIC8vIGJveF9kID0gQm94KFN0YXRpY0ludHMsIGtleT1CeXRlcyhiImQiKSkKICAgIGJ5dGUgMHg2NAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NzEKICAgIC8vIGFzc2VydCBib3hfZC52YWx1ZVszXSA9PSAzCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgQm94IGV4aXN0cwogICAgZXh0cmFjdCAzIDEgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBieXRlIDB4MDMKICAgIGI9PQogICAgYXNzZXJ0CiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC50ZXN0X2JveF9yZWYoKSAtPiB2b2lkOgp0ZXN0X2JveF9yZWY6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo3My03NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgdGVzdF9ib3hfcmVmKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5Ojc1LTc2CiAgICAvLyAjIGluaXQgcmVmLCB3aXRoIHZhbGlkIGtleSB0eXBlcwogICAgLy8gYm94X3JlZiA9IEJveFJlZihrZXk9ImJsb2IiKQogICAgYnl0ZSAiYmxvYiIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5Ojc3CiAgICAvLyBhc3NlcnQgbm90IGJveF9yZWYsICJubyBkYXRhIgogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAhCiAgICBhc3NlcnQgLy8gbm8gZGF0YQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NzgKICAgIC8vIGJveF9yZWYgPSBCb3hSZWYoa2V5PWIiYmxvYiIpCiAgICBieXRlIDB4NjI2YzZmNjIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5Ojc5CiAgICAvLyBhc3NlcnQgbm90IGJveF9yZWYsICJubyBkYXRhIgogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAhCiAgICBhc3NlcnQgLy8gbm8gZGF0YQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6ODAKICAgIC8vIGJveF9yZWYgPSBCb3hSZWYoa2V5PUJ5dGVzKGIiYmxvYiIpKQogICAgYnl0ZSAweDYyNmM2ZjYyCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo4MQogICAgLy8gYXNzZXJ0IG5vdCBib3hfcmVmLCAibm8gZGF0YSIKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgIQogICAgYXNzZXJ0IC8vIG5vIGRhdGEKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjgyCiAgICAvLyBib3hfcmVmID0gQm94UmVmKGtleT1TdHJpbmcoImJsb2IiKSkKICAgIGJ5dGUgImJsb2IiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo4MwogICAgLy8gYXNzZXJ0IG5vdCBib3hfcmVmLCAibm8gZGF0YSIKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgIQogICAgYXNzZXJ0IC8vIG5vIGRhdGEKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjgyCiAgICAvLyBib3hfcmVmID0gQm94UmVmKGtleT1TdHJpbmcoImJsb2IiKSkKICAgIGJ5dGUgImJsb2IiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo4NS04NgogICAgLy8gIyBjcmVhdGUKICAgIC8vIGFzc2VydCBib3hfcmVmLmNyZWF0ZShzaXplPTMyKQogICAgaW50IDMyCiAgICBib3hfY3JlYXRlCiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjgyCiAgICAvLyBib3hfcmVmID0gQm94UmVmKGtleT1TdHJpbmcoImJsb2IiKSkKICAgIGJ5dGUgImJsb2IiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo4NwogICAgLy8gYXNzZXJ0IGJveF9yZWYsICJoYXMgZGF0YSIKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIGhhcyBkYXRhCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo5MQogICAgLy8gYXBwX2FkZHJlc3MgPSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLmJ5dGVzCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6ODktOTAKICAgIC8vICMgbWFuaXB1bGF0ZSBkYXRhCiAgICAvLyBzZW5kZXJfYnl0ZXMgPSBUeG4uc2VuZGVyLmJ5dGVzCiAgICB0eG4gU2VuZGVyCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo4MgogICAgLy8gYm94X3JlZiA9IEJveFJlZihrZXk9U3RyaW5nKCJibG9iIikpCiAgICBieXRlICJibG9iIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6OTMKICAgIC8vIGJveF9yZWYucmVwbGFjZSgwLCBzZW5kZXJfYnl0ZXMpCiAgICBpbnQgMAogICAgZGlnIDIKICAgIGJveF9yZXBsYWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo4MgogICAgLy8gYm94X3JlZiA9IEJveFJlZihrZXk9U3RyaW5nKCJibG9iIikpCiAgICBieXRlICJibG9iIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6OTQKICAgIC8vIGJveF9yZWYucmVzaXplKDgwMDApCiAgICBpbnQgODAwMAogICAgYm94X3Jlc2l6ZQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6ODIKICAgIC8vIGJveF9yZWYgPSBCb3hSZWYoa2V5PVN0cmluZygiYmxvYiIpKQogICAgYnl0ZSAiYmxvYiIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5Ojk1CiAgICAvLyBib3hfcmVmLnNwbGljZSgwLCAwLCBhcHBfYWRkcmVzcykKICAgIGludCAwCiAgICBkdXAKICAgIGRpZyA0CiAgICBib3hfc3BsaWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo4MgogICAgLy8gYm94X3JlZiA9IEJveFJlZihrZXk9U3RyaW5nKCJibG9iIikpCiAgICBieXRlICJibG9iIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6OTYKICAgIC8vIGJveF9yZWYucmVwbGFjZSg2NCwgdmFsdWVfMykKICAgIGludCA2NAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6OTIKICAgIC8vIHZhbHVlXzMgPSBCeXRlcyhiImhlbGxvIikKICAgIGJ5dGUgMHg2ODY1NmM2YzZmCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo5NgogICAgLy8gYm94X3JlZi5yZXBsYWNlKDY0LCB2YWx1ZV8zKQogICAgYm94X3JlcGxhY2UKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjgyCiAgICAvLyBib3hfcmVmID0gQm94UmVmKGtleT1TdHJpbmcoImJsb2IiKSkKICAgIGJ5dGUgImJsb2IiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo5NwogICAgLy8gcHJlZml4ID0gYm94X3JlZi5leHRyYWN0KDAsIDMyICogMiArIHZhbHVlXzMubGVuZ3RoKQogICAgaW50IDAKICAgIGludCA2OQogICAgYm94X2V4dHJhY3QKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5Ojk4CiAgICAvLyBhc3NlcnQgcHJlZml4ID09IGFwcF9hZGRyZXNzICsgc2VuZGVyX2J5dGVzICsgdmFsdWVfMwogICAgZGlnIDIKICAgIGRpZyAyCiAgICBjb25jYXQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjkyCiAgICAvLyB2YWx1ZV8zID0gQnl0ZXMoYiJoZWxsbyIpCiAgICBieXRlIDB4Njg2NTZjNmM2ZgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6OTgKICAgIC8vIGFzc2VydCBwcmVmaXggPT0gYXBwX2FkZHJlc3MgKyBzZW5kZXJfYnl0ZXMgKyB2YWx1ZV8zCiAgICBjb25jYXQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjgyCiAgICAvLyBib3hfcmVmID0gQm94UmVmKGtleT1TdHJpbmcoImJsb2IiKSkKICAgIGJ5dGUgImJsb2IiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMDAtMTAxCiAgICAvLyAjIGRlbGV0ZQogICAgLy8gYXNzZXJ0IGJveF9yZWYuZGVsZXRlKCkKICAgIGJveF9kZWwKICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6ODIKICAgIC8vIGJveF9yZWYgPSBCb3hSZWYoa2V5PVN0cmluZygiYmxvYiIpKQogICAgYnl0ZSAiYmxvYiIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEwNC0xMDUKICAgIC8vICMgcXVlcnkKICAgIC8vIHZhbHVlLCBleGlzdHMgPSBib3hfcmVmLm1heWJlKCkKICAgIGJveF9nZXQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEwNgogICAgLy8gYXNzZXJ0IG5vdCBleGlzdHMKICAgICEKICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTA3CiAgICAvLyBhc3NlcnQgdmFsdWUgPT0gYiIiCiAgICBieXRlIDB4CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo4MgogICAgLy8gYm94X3JlZiA9IEJveFJlZihrZXk9U3RyaW5nKCJibG9iIikpCiAgICBieXRlICJibG9iIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTA4CiAgICAvLyBhc3NlcnQgYm94X3JlZi5nZXQoZGVmYXVsdD1zZW5kZXJfYnl0ZXMpID09IHNlbmRlcl9ieXRlcwogICAgYm94X2dldAogICAgZGlnIDIKICAgIGNvdmVyIDIKICAgIHNlbGVjdAogICAgZGlnIDEKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjExMC0xMTEKICAgIC8vICMgdXBkYXRlCiAgICAvLyBib3hfcmVmLnB1dChzZW5kZXJfYnl0ZXMgKyBhcHBfYWRkcmVzcykKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6ODIKICAgIC8vIGJveF9yZWYgPSBCb3hSZWYoa2V5PVN0cmluZygiYmxvYiIpKQogICAgYnl0ZSAiYmxvYiIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjExMC0xMTEKICAgIC8vICMgdXBkYXRlCiAgICAvLyBib3hfcmVmLnB1dChzZW5kZXJfYnl0ZXMgKyBhcHBfYWRkcmVzcykKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjgyCiAgICAvLyBib3hfcmVmID0gQm94UmVmKGtleT1TdHJpbmcoImJsb2IiKSkKICAgIGJ5dGUgImJsb2IiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMTIKICAgIC8vIGFzc2VydCBib3hfcmVmLCAiQmxvYiBleGlzdHMiCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBCbG9iIGV4aXN0cwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6ODIKICAgIC8vIGJveF9yZWYgPSBCb3hSZWYoa2V5PVN0cmluZygiYmxvYiIpKQogICAgYnl0ZSAiYmxvYiIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjExMwogICAgLy8gYXNzZXJ0IGJveF9yZWYubGVuZ3RoID09IDY0CiAgICBib3hfbGVuCiAgICBhc3NlcnQgLy8gY2hlY2sgQm94UmVmIGV4aXN0cwogICAgaW50IDY0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo4MgogICAgLy8gYm94X3JlZiA9IEJveFJlZihrZXk9U3RyaW5nKCJibG9iIikpCiAgICBieXRlICJibG9iIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTE0CiAgICAvLyBhc3NlcnQgZ2V0X2JveF9yZWZfbGVuZ3RoKGJveF9yZWYpID09IDY0CiAgICBjYWxsc3ViIGdldF9ib3hfcmVmX2xlbmd0aAogICAgaW50IDY0CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNAogICAgLy8gc2VsZi5ib3hfcmVmID0gQm94UmVmKCkKICAgIGJ5dGUgImJveF9yZWYiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMTYtMTE3CiAgICAvLyAjIGluc3RhbmNlIGJveCByZWYKICAgIC8vIHNlbGYuYm94X3JlZi5jcmVhdGUoc2l6ZT1VSW50NjQoMzIpKQogICAgaW50IDMyCiAgICBib3hfY3JlYXRlCiAgICBwb3AKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE0CiAgICAvLyBzZWxmLmJveF9yZWYgPSBCb3hSZWYoKQogICAgYnl0ZSAiYm94X3JlZiIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjExOAogICAgLy8gYXNzZXJ0IHNlbGYuYm94X3JlZiwgImhhcyBkYXRhIgogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gaGFzIGRhdGEKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE0CiAgICAvLyBzZWxmLmJveF9yZWYgPSBCb3hSZWYoKQogICAgYnl0ZSAiYm94X3JlZiIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjExOQogICAgLy8gc2VsZi5ib3hfcmVmLmRlbGV0ZSgpCiAgICBib3hfZGVsCiAgICBwb3AKICAgIHJldHN1YgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LmdldF9ib3hfcmVmX2xlbmd0aChyZWY6IGJ5dGVzKSAtPiB1aW50NjQ6CmdldF9ib3hfcmVmX2xlbmd0aDoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE2NC0xNjUKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgZ2V0X2JveF9yZWZfbGVuZ3RoKHJlZjogQm94UmVmKSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE2NgogICAgLy8gcmV0dXJuIHJlZi5sZW5ndGgKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X2xlbgogICAgYXNzZXJ0IC8vIGNoZWNrIEJveFJlZiBleGlzdHMKICAgIHJldHN1YgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0LmJveF9tYXBfdGVzdCgpIC0+IHZvaWQ6CmJveF9tYXBfdGVzdDoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEyMS0xMjIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGJveF9tYXBfdGVzdChzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMjMKICAgIC8vIGtleV8wID0gVUludDY0KDApCiAgICBpbnQgMAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTI2CiAgICAvLyBzZWxmLmJveF9tYXBba2V5XzBdID0gdmFsdWUKICAgIGl0b2IKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBkdXAKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEyNQogICAgLy8gdmFsdWUgPSBTdHJpbmcoIkhtbW1tbSIpCiAgICBieXRlICJIbW1tbW0iCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMjYKICAgIC8vIHNlbGYuYm94X21hcFtrZXlfMF0gPSB2YWx1ZQogICAgYm94X3B1dAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTI3CiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfbWFwW2tleV8wXS5ieXRlcy5sZW5ndGggPT0gdmFsdWUuYnl0ZXMubGVuZ3RoCiAgICBkdXAKICAgIGJveF9sZW4KICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9tYXAgZW50cnkgZXhpc3RzCiAgICBpbnQgNgogICAgPT0KICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTI4CiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfbWFwLmxlbmd0aChrZXlfMCkgPT0gdmFsdWUuYnl0ZXMubGVuZ3RoCiAgICBkdXAKICAgIGJveF9sZW4KICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9tYXAgZW50cnkgZXhpc3RzCiAgICBpbnQgNgogICAgPT0KICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTI0CiAgICAvLyBrZXlfMSA9IFVJbnQ2NCgxKQogICAgaW50IDEKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEzMAogICAgLy8gYXNzZXJ0IHNlbGYuYm94X21hcC5nZXQoa2V5XzEsIGRlZmF1bHQ9U3RyaW5nKCJkZWZhdWx0IikpID09IFN0cmluZygiZGVmYXVsdCIpCiAgICBpdG9iCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGJ5dGUgImRlZmF1bHQiCiAgICBjb3ZlciAyCiAgICBzZWxlY3QKICAgIGJ5dGUgImRlZmF1bHQiCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMzEKICAgIC8vIHZhbHVlLCBleGlzdHMgPSBzZWxmLmJveF9tYXAubWF5YmUoa2V5XzEpCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGJ1cnkgMQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTMyCiAgICAvLyBhc3NlcnQgbm90IGV4aXN0cwogICAgIQogICAgYXNzZXJ0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMy0xMzMKICAgIC8vICAgICBzZWxmLmJveF9tYXAgPSBCb3hNYXAoVUludDY0LCBTdHJpbmcsIGtleV9wcmVmaXg9IiIpCiAgICAvLyAgICAgc2VsZi5ib3hfcmVmID0gQm94UmVmKCkKICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2V0X2JveGVzKHNlbGYsIGE6IFVJbnQ2NCwgYjogQnl0ZXMsIGM6IGFyYzQuU3RyaW5nKSAtPiBOb25lOgogICAgLy8gICAgIHNlbGYuYm94X2EudmFsdWUgPSBhCiAgICAvLyAgICAgc2VsZi5ib3hfYi52YWx1ZSA9IGIKICAgIC8vICAgICBzZWxmLmJveF9jLnZhbHVlID0gYwogICAgLy8gCiAgICAvLyAgICAgc2VsZi5ib3hfYS52YWx1ZSArPSAzCiAgICAvLyAKICAgIC8vICAgICBhc3NlcnQgc2VsZi5ib3hfYS5sZW5ndGggPT0gOAogICAgLy8gICAgIGFzc2VydCBzZWxmLmJveF9iLmxlbmd0aCA9PSBiLmxlbmd0aAogICAgLy8gICAgIGFzc2VydCBzZWxmLmJveF9jLmxlbmd0aCA9PSBjLmJ5dGVzLmxlbmd0aAogICAgLy8gCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBjaGVja19rZXlzKHNlbGYpIC0+IE5vbmU6CiAgICAvLyAgICAgYXNzZXJ0IHNlbGYuYm94X2Eua2V5ID09IGIiYm94X2EiLCAiYm94IGEga2V5IG9rIgogICAgLy8gICAgIGFzc2VydCBzZWxmLmJveF9iLmtleSA9PSBiImIiLCAiYm94IGIga2V5IG9rIgogICAgLy8gICAgIGFzc2VydCBzZWxmLmJveF9jLmtleSA9PSBiIkJPWF9DIiwgImJveCBjIGtleSBvayIKICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgZGVsZXRlX2JveGVzKHNlbGYpIC0+IE5vbmU6CiAgICAvLyAgICAgZGVsIHNlbGYuYm94X2EudmFsdWUKICAgIC8vICAgICBkZWwgc2VsZi5ib3hfYi52YWx1ZQogICAgLy8gICAgIGRlbCBzZWxmLmJveF9jLnZhbHVlCiAgICAvLyAgICAgYXNzZXJ0IHNlbGYuYm94X2EuZ2V0KGRlZmF1bHQ9VUludDY0KDQyKSkgPT0gNDIKICAgIC8vICAgICBhc3NlcnQgc2VsZi5ib3hfYi5nZXQoZGVmYXVsdD1CeXRlcyhiIjQyIikpID09IGIiNDIiCiAgICAvLyAgICAgYXNzZXJ0IHNlbGYuYm94X2MuZ2V0KGRlZmF1bHQ9YXJjNC5TdHJpbmcoIjQyIikpID09ICI0MiIKICAgIC8vICAgICBhLCBhX2V4aXN0cyA9IHNlbGYuYm94X2EubWF5YmUoKQogICAgLy8gICAgIGFzc2VydCBub3QgYV9leGlzdHMKICAgIC8vICAgICBhc3NlcnQgYSA9PSAwCiAgICAvLyAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHJlYWRfYm94ZXMoc2VsZikgLT4gdHVwbGVbVUludDY0LCBCeXRlcywgYXJjNC5TdHJpbmddOgogICAgLy8gICAgIHJldHVybiBnZXRfYm94X3ZhbHVlX3BsdXNfMShzZWxmLmJveF9hKSAtIDEsIHNlbGYuYm94X2IudmFsdWUsIHNlbGYuYm94X2MudmFsdWUKICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYm94ZXNfZXhpc3Qoc2VsZikgLT4gdHVwbGVbYm9vbCwgYm9vbCwgYm9vbF06CiAgICAvLyAgICAgcmV0dXJuIGJvb2woc2VsZi5ib3hfYSksIGJvb2woc2VsZi5ib3hfYiksIGJvb2woc2VsZi5ib3hfYykKICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2xpY2VfYm94KHNlbGYpIC0+IE5vbmU6CiAgICAvLyAgICAgYm94XzAgPSBCb3goQnl0ZXMsIGtleT1TdHJpbmcoIjAiKSkKICAgIC8vICAgICBib3hfMC52YWx1ZSA9IEJ5dGVzKGIiVGVzdGluZyB0ZXN0aW5nIDEyMyIpCiAgICAvLyAgICAgYXNzZXJ0IGJveF8wLnZhbHVlWzA6N10gPT0gYiJUZXN0aW5nIgogICAgLy8gCiAgICAvLyAgICAgc2VsZi5ib3hfYy52YWx1ZSA9IGFyYzQuU3RyaW5nKCJIZWxsbyIpCiAgICAvLyAgICAgYXNzZXJ0IHNlbGYuYm94X2MudmFsdWUuYnl0ZXNbMjoxMF0gPT0gYiJIZWxsbyIKICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYXJjNF9ib3goc2VsZikgLT4gTm9uZToKICAgIC8vICAgICBib3hfZCA9IEJveChTdGF0aWNJbnRzLCBrZXk9Qnl0ZXMoYiJkIikpCiAgICAvLyAgICAgYm94X2QudmFsdWUgPSBTdGF0aWNJbnRzKGFyYzQuVUludDgoMCksIGFyYzQuVUludDgoMSksIGFyYzQuVUludDgoMiksIGFyYzQuVUludDgoMykpCiAgICAvLyAKICAgIC8vICAgICBhc3NlcnQgYm94X2QudmFsdWVbMF0gPT0gMAogICAgLy8gICAgIGFzc2VydCBib3hfZC52YWx1ZVsxXSA9PSAxCiAgICAvLyAgICAgYXNzZXJ0IGJveF9kLnZhbHVlWzJdID09IDIKICAgIC8vICAgICBhc3NlcnQgYm94X2QudmFsdWVbM10gPT0gMwogICAgLy8gCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiB0ZXN0X2JveF9yZWYoc2VsZikgLT4gTm9uZToKICAgIC8vICAgICAjIGluaXQgcmVmLCB3aXRoIHZhbGlkIGtleSB0eXBlcwogICAgLy8gICAgIGJveF9yZWYgPSBCb3hSZWYoa2V5PSJibG9iIikKICAgIC8vICAgICBhc3NlcnQgbm90IGJveF9yZWYsICJubyBkYXRhIgogICAgLy8gICAgIGJveF9yZWYgPSBCb3hSZWYoa2V5PWIiYmxvYiIpCiAgICAvLyAgICAgYXNzZXJ0IG5vdCBib3hfcmVmLCAibm8gZGF0YSIKICAgIC8vICAgICBib3hfcmVmID0gQm94UmVmKGtleT1CeXRlcyhiImJsb2IiKSkKICAgIC8vICAgICBhc3NlcnQgbm90IGJveF9yZWYsICJubyBkYXRhIgogICAgLy8gICAgIGJveF9yZWYgPSBCb3hSZWYoa2V5PVN0cmluZygiYmxvYiIpKQogICAgLy8gICAgIGFzc2VydCBub3QgYm94X3JlZiwgIm5vIGRhdGEiCiAgICAvLyAKICAgIC8vICAgICAjIGNyZWF0ZQogICAgLy8gICAgIGFzc2VydCBib3hfcmVmLmNyZWF0ZShzaXplPTMyKQogICAgLy8gICAgIGFzc2VydCBib3hfcmVmLCAiaGFzIGRhdGEiCiAgICAvLyAKICAgIC8vICAgICAjIG1hbmlwdWxhdGUgZGF0YQogICAgLy8gICAgIHNlbmRlcl9ieXRlcyA9IFR4bi5zZW5kZXIuYnl0ZXMKICAgIC8vICAgICBhcHBfYWRkcmVzcyA9IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MuYnl0ZXMKICAgIC8vICAgICB2YWx1ZV8zID0gQnl0ZXMoYiJoZWxsbyIpCiAgICAvLyAgICAgYm94X3JlZi5yZXBsYWNlKDAsIHNlbmRlcl9ieXRlcykKICAgIC8vICAgICBib3hfcmVmLnJlc2l6ZSg4MDAwKQogICAgLy8gICAgIGJveF9yZWYuc3BsaWNlKDAsIDAsIGFwcF9hZGRyZXNzKQogICAgLy8gICAgIGJveF9yZWYucmVwbGFjZSg2NCwgdmFsdWVfMykKICAgIC8vICAgICBwcmVmaXggPSBib3hfcmVmLmV4dHJhY3QoMCwgMzIgKiAyICsgdmFsdWVfMy5sZW5ndGgpCiAgICAvLyAgICAgYXNzZXJ0IHByZWZpeCA9PSBhcHBfYWRkcmVzcyArIHNlbmRlcl9ieXRlcyArIHZhbHVlXzMKICAgIC8vIAogICAgLy8gICAgICMgZGVsZXRlCiAgICAvLyAgICAgYXNzZXJ0IGJveF9yZWYuZGVsZXRlKCkKICAgIC8vICAgICBhc3NlcnQgYm94X3JlZi5rZXkgPT0gYiJibG9iIgogICAgLy8gCiAgICAvLyAgICAgIyBxdWVyeQogICAgLy8gICAgIHZhbHVlLCBleGlzdHMgPSBib3hfcmVmLm1heWJlKCkKICAgIC8vICAgICBhc3NlcnQgbm90IGV4aXN0cwogICAgLy8gICAgIGFzc2VydCB2YWx1ZSA9PSBiIiIKICAgIC8vICAgICBhc3NlcnQgYm94X3JlZi5nZXQoZGVmYXVsdD1zZW5kZXJfYnl0ZXMpID09IHNlbmRlcl9ieXRlcwogICAgLy8gCiAgICAvLyAgICAgIyB1cGRhdGUKICAgIC8vICAgICBib3hfcmVmLnB1dChzZW5kZXJfYnl0ZXMgKyBhcHBfYWRkcmVzcykKICAgIC8vICAgICBhc3NlcnQgYm94X3JlZiwgIkJsb2IgZXhpc3RzIgogICAgLy8gICAgIGFzc2VydCBib3hfcmVmLmxlbmd0aCA9PSA2NAogICAgLy8gICAgIGFzc2VydCBnZXRfYm94X3JlZl9sZW5ndGgoYm94X3JlZikgPT0gNjQKICAgIC8vIAogICAgLy8gICAgICMgaW5zdGFuY2UgYm94IHJlZgogICAgLy8gICAgIHNlbGYuYm94X3JlZi5jcmVhdGUoc2l6ZT1VSW50NjQoMzIpKQogICAgLy8gICAgIGFzc2VydCBzZWxmLmJveF9yZWYsICJoYXMgZGF0YSIKICAgIC8vICAgICBzZWxmLmJveF9yZWYuZGVsZXRlKCkKICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYm94X21hcF90ZXN0KHNlbGYpIC0+IE5vbmU6CiAgICAvLyAgICAga2V5XzAgPSBVSW50NjQoMCkKICAgIC8vICAgICBrZXlfMSA9IFVJbnQ2NCgxKQogICAgLy8gICAgIHZhbHVlID0gU3RyaW5nKCJIbW1tbW0iKQogICAgLy8gICAgIHNlbGYuYm94X21hcFtrZXlfMF0gPSB2YWx1ZQogICAgLy8gICAgIGFzc2VydCBzZWxmLmJveF9tYXBba2V5XzBdLmJ5dGVzLmxlbmd0aCA9PSB2YWx1ZS5ieXRlcy5sZW5ndGgKICAgIC8vICAgICBhc3NlcnQgc2VsZi5ib3hfbWFwLmxlbmd0aChrZXlfMCkgPT0gdmFsdWUuYnl0ZXMubGVuZ3RoCiAgICAvLyAKICAgIC8vICAgICBhc3NlcnQgc2VsZi5ib3hfbWFwLmdldChrZXlfMSwgZGVmYXVsdD1TdHJpbmcoImRlZmF1bHQiKSkgPT0gU3RyaW5nKCJkZWZhdWx0IikKICAgIC8vICAgICB2YWx1ZSwgZXhpc3RzID0gc2VsZi5ib3hfbWFwLm1heWJlKGtleV8xKQogICAgLy8gICAgIGFzc2VydCBub3QgZXhpc3RzCiAgICAvLyAgICAgYXNzZXJ0IGtleV8wIGluIHNlbGYuYm94X21hcAogICAgc3dhcAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMzMKICAgIC8vIGFzc2VydCBrZXlfMCBpbiBzZWxmLmJveF9tYXAKICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTM4CiAgICAvLyB0bXBfYm94X21hcFtrZXlfMV0gPSBTdHJpbmcoImhlbGxvIikKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBkdXAKICAgIGJ5dGUgImhlbGxvIgogICAgYm94X3B1dAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTM2LTEzNwogICAgLy8gIyB0ZXN0IGJveCBtYXAgbm90IGFzc2lnbmVkIHRvIHRoZSBjbGFzcyBhbmQgcGFzc2VkIHRvIHN1YnJvdXRpbmUKICAgIC8vIHRtcF9ib3hfbWFwID0gQm94TWFwKFVJbnQ2NCwgU3RyaW5nLCBrZXlfcHJlZml4PUJ5dGVzKCkpCiAgICBieXRlIDB4CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMzkKICAgIC8vIGFzc2VydCBnZXRfYm94X21hcF92YWx1ZV9mcm9tX2tleV9wbHVzXzEodG1wX2JveF9tYXAsIFVJbnQ2NCgwKSkgPT0gImhlbGxvIgogICAgaW50IDAKICAgIGNhbGxzdWIgZ2V0X2JveF9tYXBfdmFsdWVfZnJvbV9rZXlfcGx1c18xCiAgICBieXRlICJoZWxsbyIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE0MAogICAgLy8gZGVsIHRtcF9ib3hfbWFwW2tleV8xXQogICAgYm94X2RlbAogICAgcG9wCiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5nZXRfYm94X21hcF92YWx1ZV9mcm9tX2tleV9wbHVzXzEoYm94X21hcDogYnl0ZXMsIGtleTogdWludDY0KSAtPiBieXRlczoKZ2V0X2JveF9tYXBfdmFsdWVfZnJvbV9rZXlfcGx1c18xOgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTY5LTE3MAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBnZXRfYm94X21hcF92YWx1ZV9mcm9tX2tleV9wbHVzXzEoYm94X21hcDogQm94TWFwW1VJbnQ2NCwgU3RyaW5nXSwga2V5OiBVSW50NjQpIC0+IFN0cmluZzoKICAgIHByb3RvIDIgMQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTcxCiAgICAvLyByZXR1cm4gYm94X21hcFtrZXkgKyAxXQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnQgMQogICAgKwogICAgaXRvYgogICAgZnJhbWVfZGlnIC0yCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBCb3hNYXAgZW50cnkgZXhpc3RzCiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5ib3hfbWFwX3NldChrZXk6IHVpbnQ2NCwgdmFsdWU6IGJ5dGVzKSAtPiB2b2lkOgpib3hfbWFwX3NldDoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE0Mi0xNDMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGJveF9tYXBfc2V0KHNlbGYsIGtleTogVUludDY0LCB2YWx1ZTogU3RyaW5nKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNDQKICAgIC8vIHNlbGYuYm94X21hcFtrZXldID0gdmFsdWUKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgZHVwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMuYm94X3N0b3JhZ2UuY29udHJhY3QuQm94Q29udHJhY3QuYm94X21hcF9nZXQoa2V5OiB1aW50NjQpIC0+IGJ5dGVzOgpib3hfbWFwX2dldDoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE0Ni0xNDcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGJveF9tYXBfZ2V0KHNlbGYsIGtleTogVUludDY0KSAtPiBTdHJpbmc6CiAgICBwcm90byAxIDEKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE0OAogICAgLy8gcmV0dXJuIHNlbGYuYm94X21hcFtrZXldCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9tYXAgZW50cnkgZXhpc3RzCiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5ib3hfbWFwX2RlbChrZXk6IHVpbnQ2NCkgLT4gdm9pZDoKYm94X21hcF9kZWw6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNTAtMTUxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBib3hfbWFwX2RlbChzZWxmLCBrZXk6IFVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTUyCiAgICAvLyBkZWwgc2VsZi5ib3hfbWFwW2tleV0KICAgIGZyYW1lX2RpZyAtMQogICAgaXRvYgogICAgYm94X2RlbAogICAgcG9wCiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5ib3hfbWFwX2V4aXN0cyhrZXk6IHVpbnQ2NCkgLT4gdWludDY0Ogpib3hfbWFwX2V4aXN0czoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE1NC0xNTUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGJveF9tYXBfZXhpc3RzKHNlbGYsIGtleTogVUludDY0KSAtPiBib29sOgogICAgcHJvdG8gMSAxCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMy0xNTYKICAgIC8vICAgICBzZWxmLmJveF9tYXAgPSBCb3hNYXAoVUludDY0LCBTdHJpbmcsIGtleV9wcmVmaXg9IiIpCiAgICAvLyAgICAgc2VsZi5ib3hfcmVmID0gQm94UmVmKCkKICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2V0X2JveGVzKHNlbGYsIGE6IFVJbnQ2NCwgYjogQnl0ZXMsIGM6IGFyYzQuU3RyaW5nKSAtPiBOb25lOgogICAgLy8gICAgIHNlbGYuYm94X2EudmFsdWUgPSBhCiAgICAvLyAgICAgc2VsZi5ib3hfYi52YWx1ZSA9IGIKICAgIC8vICAgICBzZWxmLmJveF9jLnZhbHVlID0gYwogICAgLy8gCiAgICAvLyAgICAgc2VsZi5ib3hfYS52YWx1ZSArPSAzCiAgICAvLyAKICAgIC8vICAgICBhc3NlcnQgc2VsZi5ib3hfYS5sZW5ndGggPT0gOAogICAgLy8gICAgIGFzc2VydCBzZWxmLmJveF9iLmxlbmd0aCA9PSBiLmxlbmd0aAogICAgLy8gICAgIGFzc2VydCBzZWxmLmJveF9jLmxlbmd0aCA9PSBjLmJ5dGVzLmxlbmd0aAogICAgLy8gCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBjaGVja19rZXlzKHNlbGYpIC0+IE5vbmU6CiAgICAvLyAgICAgYXNzZXJ0IHNlbGYuYm94X2Eua2V5ID09IGIiYm94X2EiLCAiYm94IGEga2V5IG9rIgogICAgLy8gICAgIGFzc2VydCBzZWxmLmJveF9iLmtleSA9PSBiImIiLCAiYm94IGIga2V5IG9rIgogICAgLy8gICAgIGFzc2VydCBzZWxmLmJveF9jLmtleSA9PSBiIkJPWF9DIiwgImJveCBjIGtleSBvayIKICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgZGVsZXRlX2JveGVzKHNlbGYpIC0+IE5vbmU6CiAgICAvLyAgICAgZGVsIHNlbGYuYm94X2EudmFsdWUKICAgIC8vICAgICBkZWwgc2VsZi5ib3hfYi52YWx1ZQogICAgLy8gICAgIGRlbCBzZWxmLmJveF9jLnZhbHVlCiAgICAvLyAgICAgYXNzZXJ0IHNlbGYuYm94X2EuZ2V0KGRlZmF1bHQ9VUludDY0KDQyKSkgPT0gNDIKICAgIC8vICAgICBhc3NlcnQgc2VsZi5ib3hfYi5nZXQoZGVmYXVsdD1CeXRlcyhiIjQyIikpID09IGIiNDIiCiAgICAvLyAgICAgYXNzZXJ0IHNlbGYuYm94X2MuZ2V0KGRlZmF1bHQ9YXJjNC5TdHJpbmcoIjQyIikpID09ICI0MiIKICAgIC8vICAgICBhLCBhX2V4aXN0cyA9IHNlbGYuYm94X2EubWF5YmUoKQogICAgLy8gICAgIGFzc2VydCBub3QgYV9leGlzdHMKICAgIC8vICAgICBhc3NlcnQgYSA9PSAwCiAgICAvLyAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHJlYWRfYm94ZXMoc2VsZikgLT4gdHVwbGVbVUludDY0LCBCeXRlcywgYXJjNC5TdHJpbmddOgogICAgLy8gICAgIHJldHVybiBnZXRfYm94X3ZhbHVlX3BsdXNfMShzZWxmLmJveF9hKSAtIDEsIHNlbGYuYm94X2IudmFsdWUsIHNlbGYuYm94X2MudmFsdWUKICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYm94ZXNfZXhpc3Qoc2VsZikgLT4gdHVwbGVbYm9vbCwgYm9vbCwgYm9vbF06CiAgICAvLyAgICAgcmV0dXJuIGJvb2woc2VsZi5ib3hfYSksIGJvb2woc2VsZi5ib3hfYiksIGJvb2woc2VsZi5ib3hfYykKICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2xpY2VfYm94KHNlbGYpIC0+IE5vbmU6CiAgICAvLyAgICAgYm94XzAgPSBCb3goQnl0ZXMsIGtleT1TdHJpbmcoIjAiKSkKICAgIC8vICAgICBib3hfMC52YWx1ZSA9IEJ5dGVzKGIiVGVzdGluZyB0ZXN0aW5nIDEyMyIpCiAgICAvLyAgICAgYXNzZXJ0IGJveF8wLnZhbHVlWzA6N10gPT0gYiJUZXN0aW5nIgogICAgLy8gCiAgICAvLyAgICAgc2VsZi5ib3hfYy52YWx1ZSA9IGFyYzQuU3RyaW5nKCJIZWxsbyIpCiAgICAvLyAgICAgYXNzZXJ0IHNlbGYuYm94X2MudmFsdWUuYnl0ZXNbMjoxMF0gPT0gYiJIZWxsbyIKICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYXJjNF9ib3goc2VsZikgLT4gTm9uZToKICAgIC8vICAgICBib3hfZCA9IEJveChTdGF0aWNJbnRzLCBrZXk9Qnl0ZXMoYiJkIikpCiAgICAvLyAgICAgYm94X2QudmFsdWUgPSBTdGF0aWNJbnRzKGFyYzQuVUludDgoMCksIGFyYzQuVUludDgoMSksIGFyYzQuVUludDgoMiksIGFyYzQuVUludDgoMykpCiAgICAvLyAKICAgIC8vICAgICBhc3NlcnQgYm94X2QudmFsdWVbMF0gPT0gMAogICAgLy8gICAgIGFzc2VydCBib3hfZC52YWx1ZVsxXSA9PSAxCiAgICAvLyAgICAgYXNzZXJ0IGJveF9kLnZhbHVlWzJdID09IDIKICAgIC8vICAgICBhc3NlcnQgYm94X2QudmFsdWVbM10gPT0gMwogICAgLy8gCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiB0ZXN0X2JveF9yZWYoc2VsZikgLT4gTm9uZToKICAgIC8vICAgICAjIGluaXQgcmVmLCB3aXRoIHZhbGlkIGtleSB0eXBlcwogICAgLy8gICAgIGJveF9yZWYgPSBCb3hSZWYoa2V5PSJibG9iIikKICAgIC8vICAgICBhc3NlcnQgbm90IGJveF9yZWYsICJubyBkYXRhIgogICAgLy8gICAgIGJveF9yZWYgPSBCb3hSZWYoa2V5PWIiYmxvYiIpCiAgICAvLyAgICAgYXNzZXJ0IG5vdCBib3hfcmVmLCAibm8gZGF0YSIKICAgIC8vICAgICBib3hfcmVmID0gQm94UmVmKGtleT1CeXRlcyhiImJsb2IiKSkKICAgIC8vICAgICBhc3NlcnQgbm90IGJveF9yZWYsICJubyBkYXRhIgogICAgLy8gICAgIGJveF9yZWYgPSBCb3hSZWYoa2V5PVN0cmluZygiYmxvYiIpKQogICAgLy8gICAgIGFzc2VydCBub3QgYm94X3JlZiwgIm5vIGRhdGEiCiAgICAvLyAKICAgIC8vICAgICAjIGNyZWF0ZQogICAgLy8gICAgIGFzc2VydCBib3hfcmVmLmNyZWF0ZShzaXplPTMyKQogICAgLy8gICAgIGFzc2VydCBib3hfcmVmLCAiaGFzIGRhdGEiCiAgICAvLyAKICAgIC8vICAgICAjIG1hbmlwdWxhdGUgZGF0YQogICAgLy8gICAgIHNlbmRlcl9ieXRlcyA9IFR4bi5zZW5kZXIuYnl0ZXMKICAgIC8vICAgICBhcHBfYWRkcmVzcyA9IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MuYnl0ZXMKICAgIC8vICAgICB2YWx1ZV8zID0gQnl0ZXMoYiJoZWxsbyIpCiAgICAvLyAgICAgYm94X3JlZi5yZXBsYWNlKDAsIHNlbmRlcl9ieXRlcykKICAgIC8vICAgICBib3hfcmVmLnJlc2l6ZSg4MDAwKQogICAgLy8gICAgIGJveF9yZWYuc3BsaWNlKDAsIDAsIGFwcF9hZGRyZXNzKQogICAgLy8gICAgIGJveF9yZWYucmVwbGFjZSg2NCwgdmFsdWVfMykKICAgIC8vICAgICBwcmVmaXggPSBib3hfcmVmLmV4dHJhY3QoMCwgMzIgKiAyICsgdmFsdWVfMy5sZW5ndGgpCiAgICAvLyAgICAgYXNzZXJ0IHByZWZpeCA9PSBhcHBfYWRkcmVzcyArIHNlbmRlcl9ieXRlcyArIHZhbHVlXzMKICAgIC8vIAogICAgLy8gICAgICMgZGVsZXRlCiAgICAvLyAgICAgYXNzZXJ0IGJveF9yZWYuZGVsZXRlKCkKICAgIC8vICAgICBhc3NlcnQgYm94X3JlZi5rZXkgPT0gYiJibG9iIgogICAgLy8gCiAgICAvLyAgICAgIyBxdWVyeQogICAgLy8gICAgIHZhbHVlLCBleGlzdHMgPSBib3hfcmVmLm1heWJlKCkKICAgIC8vICAgICBhc3NlcnQgbm90IGV4aXN0cwogICAgLy8gICAgIGFzc2VydCB2YWx1ZSA9PSBiIiIKICAgIC8vICAgICBhc3NlcnQgYm94X3JlZi5nZXQoZGVmYXVsdD1zZW5kZXJfYnl0ZXMpID09IHNlbmRlcl9ieXRlcwogICAgLy8gCiAgICAvLyAgICAgIyB1cGRhdGUKICAgIC8vICAgICBib3hfcmVmLnB1dChzZW5kZXJfYnl0ZXMgKyBhcHBfYWRkcmVzcykKICAgIC8vICAgICBhc3NlcnQgYm94X3JlZiwgIkJsb2IgZXhpc3RzIgogICAgLy8gICAgIGFzc2VydCBib3hfcmVmLmxlbmd0aCA9PSA2NAogICAgLy8gICAgIGFzc2VydCBnZXRfYm94X3JlZl9sZW5ndGgoYm94X3JlZikgPT0gNjQKICAgIC8vIAogICAgLy8gICAgICMgaW5zdGFuY2UgYm94IHJlZgogICAgLy8gICAgIHNlbGYuYm94X3JlZi5jcmVhdGUoc2l6ZT1VSW50NjQoMzIpKQogICAgLy8gICAgIGFzc2VydCBzZWxmLmJveF9yZWYsICJoYXMgZGF0YSIKICAgIC8vICAgICBzZWxmLmJveF9yZWYuZGVsZXRlKCkKICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYm94X21hcF90ZXN0KHNlbGYpIC0+IE5vbmU6CiAgICAvLyAgICAga2V5XzAgPSBVSW50NjQoMCkKICAgIC8vICAgICBrZXlfMSA9IFVJbnQ2NCgxKQogICAgLy8gICAgIHZhbHVlID0gU3RyaW5nKCJIbW1tbW0iKQogICAgLy8gICAgIHNlbGYuYm94X21hcFtrZXlfMF0gPSB2YWx1ZQogICAgLy8gICAgIGFzc2VydCBzZWxmLmJveF9tYXBba2V5XzBdLmJ5dGVzLmxlbmd0aCA9PSB2YWx1ZS5ieXRlcy5sZW5ndGgKICAgIC8vICAgICBhc3NlcnQgc2VsZi5ib3hfbWFwLmxlbmd0aChrZXlfMCkgPT0gdmFsdWUuYnl0ZXMubGVuZ3RoCiAgICAvLyAKICAgIC8vICAgICBhc3NlcnQgc2VsZi5ib3hfbWFwLmdldChrZXlfMSwgZGVmYXVsdD1TdHJpbmcoImRlZmF1bHQiKSkgPT0gU3RyaW5nKCJkZWZhdWx0IikKICAgIC8vICAgICB2YWx1ZSwgZXhpc3RzID0gc2VsZi5ib3hfbWFwLm1heWJlKGtleV8xKQogICAgLy8gICAgIGFzc2VydCBub3QgZXhpc3RzCiAgICAvLyAgICAgYXNzZXJ0IGtleV8wIGluIHNlbGYuYm94X21hcAogICAgLy8gICAgIGFzc2VydCBzZWxmLmJveF9tYXAua2V5X3ByZWZpeCA9PSBiIiIKICAgIC8vIAogICAgLy8gICAgICMgdGVzdCBib3ggbWFwIG5vdCBhc3NpZ25lZCB0byB0aGUgY2xhc3MgYW5kIHBhc3NlZCB0byBzdWJyb3V0aW5lCiAgICAvLyAgICAgdG1wX2JveF9tYXAgPSBCb3hNYXAoVUludDY0LCBTdHJpbmcsIGtleV9wcmVmaXg9Qnl0ZXMoKSkKICAgIC8vICAgICB0bXBfYm94X21hcFtrZXlfMV0gPSBTdHJpbmcoImhlbGxvIikKICAgIC8vICAgICBhc3NlcnQgZ2V0X2JveF9tYXBfdmFsdWVfZnJvbV9rZXlfcGx1c18xKHRtcF9ib3hfbWFwLCBVSW50NjQoMCkpID09ICJoZWxsbyIKICAgIC8vICAgICBkZWwgdG1wX2JveF9tYXBba2V5XzFdCiAgICAvLyAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGJveF9tYXBfc2V0KHNlbGYsIGtleTogVUludDY0LCB2YWx1ZTogU3RyaW5nKSAtPiBOb25lOgogICAgLy8gICAgIHNlbGYuYm94X21hcFtrZXldID0gdmFsdWUKICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYm94X21hcF9nZXQoc2VsZiwga2V5OiBVSW50NjQpIC0+IFN0cmluZzoKICAgIC8vICAgICByZXR1cm4gc2VsZi5ib3hfbWFwW2tleV0KICAgIC8vIAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYm94X21hcF9kZWwoc2VsZiwga2V5OiBVSW50NjQpIC0+IE5vbmU6CiAgICAvLyAgICAgZGVsIHNlbGYuYm94X21hcFtrZXldCiAgICAvLyAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGJveF9tYXBfZXhpc3RzKHNlbGYsIGtleTogVUludDY0KSAtPiBib29sOgogICAgLy8gICAgIHJldHVybiBrZXkgaW4gc2VsZi5ib3hfbWFwCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTU2CiAgICAvLyByZXR1cm4ga2V5IGluIHNlbGYuYm94X21hcAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgQm94Q29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "BoxContract",
        "methods": [
            {
                "name": "set_boxes",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "string",
                        "name": "c"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_keys",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delete_boxes",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "read_boxes",
                "args": [],
                "returns": {
                    "type": "(uint64,byte[],string)"
                }
            },
            {
                "name": "boxes_exist",
                "args": [],
                "returns": {
                    "type": "(bool,bool,bool)"
                }
            },
            {
                "name": "slice_box",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc4_box",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_box_ref",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_test",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_set",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    },
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_get",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "box_map_del",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_exists",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}