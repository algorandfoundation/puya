{
    "hints": {
        "set_boxes(uint64,byte[],string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_keys()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_many_ints()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_many_ints(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sum_many_ints()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_boxes()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "indirect_extract_and_replace()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "read_boxes()(uint64,byte[],string,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "boxes_exist()(bool,bool,bool,bool)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_dynamic_arr_struct()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_dynamic_arr_struct()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "append_dynamic_arr_struct(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pop_dynamic_arr_struct(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "struct": {
                    "name": "NestedStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "inner",
                            "(uint64,uint64[][],uint64)"
                        ],
                        [
                            "woah",
                            "(uint64,uint64[][],uint64)[]"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "nested_write(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "nested_read(uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sum_dynamic_arr_struct()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_bools()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_bool(uint64,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sum_bools(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_dynamic_box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_dynamic_box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "append_dynamic_box(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pop_dynamic_box(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sum_dynamic_box()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "write_dynamic_box(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "write_dynamic_arr_struct(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "slice_box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc4_box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_box_ref()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_test()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_set(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_get(uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_del(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_exists(uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAyIDEgOCAwIDQwOTYgNDA5OCA0MTM4CiAgICBieXRlY2Jsb2NrICJkeW5hbWljX2Fycl9zdHJ1Y3QiICJib3giICJkeW5hbWljX2JveCIgMHg0MjRmNTg1ZjQzIDB4MTUxZjdjNzUgImJsb2IiICJib3hfbGFyZ2UiICJib3hfYSIgImJveF9kIiAiYiIgInRvb19tYW55X2Jvb2xzIiAibWFueV9pbnRzIiAiMCIgMHgwMDAyMzQzMiAweDY4NjU2YzZjNmYgMHgwNjgxMDEgMHgwMDE0ICJib3hfcmVmIiAiZGVmYXVsdCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjgwCiAgICAvLyBjbGFzcyBCb3hDb250cmFjdChhcmM0LkFSQzRDb250cmFjdCk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9fX2FsZ29weV9kZWZhdWx0X2NyZWF0ZUA0MgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBtdXN0IGJlIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQKICAgIHB1c2hieXRlc3MgMHg3ZDM3Mjk2ZSAweDMzMzI1ZDNkIDB4MDE5OTQwOGQgMHg3NzIwNTljYSAweDAxMjYzZGY2IDB4ZDU2NmM2MzIgMHhmYWJjYjg4NSAweGE2MTc0ODEyIDB4ZjEzZGQ5MzcgMHg1YWI2MGYyZSAweGYwN2EwMDY0IDB4NzhmOWFmM2YgMHg1Y2JiOWRjYyAweDk5NjQ5N2FlIDB4NmNlYzcyZmYgMHg2ZjlkMTA3NSAweDBkMjJiNDQxIDB4NTllZjM3NjAgMHhhYTY2NmI5NiAweGRmYmRkNjM2IDB4NDE0MjdjZDEgMHgyYTE0MWY2YyAweDdlODQzNzQ0IDB4MjU2MDBiNTcgMHgyOWVhNTk1ZCAweDExNDUzMTUyIDB4Y2VkMTIyMWUgMHgwNGVmNDk3MSAweDIzZWNiMzJjIDB4ZWVmNzU4MTYgMHhiNTMyOTEzYSAweGMyOWYxNjY5IDB4OWM4ODhjMDkgMHhlNmY2ODUwNiAweDhlZTJjMzY0IC8vIG1ldGhvZCAic2V0X2JveGVzKHVpbnQ2NCxieXRlW10sc3RyaW5nKXZvaWQiLCBtZXRob2QgImNoZWNrX2tleXMoKXZvaWQiLCBtZXRob2QgImNyZWF0ZV9tYW55X2ludHMoKXZvaWQiLCBtZXRob2QgInNldF9tYW55X2ludHModWludDY0LHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJzdW1fbWFueV9pbnRzKCl1aW50NjQiLCBtZXRob2QgImRlbGV0ZV9ib3hlcygpdm9pZCIsIG1ldGhvZCAiaW5kaXJlY3RfZXh0cmFjdF9hbmRfcmVwbGFjZSgpdm9pZCIsIG1ldGhvZCAicmVhZF9ib3hlcygpKHVpbnQ2NCxieXRlW10sc3RyaW5nLHVpbnQ2NCkiLCBtZXRob2QgImJveGVzX2V4aXN0KCkoYm9vbCxib29sLGJvb2wsYm9vbCkiLCBtZXRob2QgImNyZWF0ZV9keW5hbWljX2Fycl9zdHJ1Y3QoKXZvaWQiLCBtZXRob2QgImRlbGV0ZV9keW5hbWljX2Fycl9zdHJ1Y3QoKXZvaWQiLCBtZXRob2QgImFwcGVuZF9keW5hbWljX2Fycl9zdHJ1Y3QodWludDY0KXVpbnQ2NCIsIG1ldGhvZCAicG9wX2R5bmFtaWNfYXJyX3N0cnVjdCh1aW50NjQpdWludDY0IiwgbWV0aG9kICJzZXRfbmVzdGVkX3N0cnVjdCgodWludDY0LCh1aW50NjQsdWludDY0W11bXSx1aW50NjQpLCh1aW50NjQsdWludDY0W11bXSx1aW50NjQpW10sdWludDY0KSl2b2lkIiwgbWV0aG9kICJuZXN0ZWRfd3JpdGUodWludDY0LHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJuZXN0ZWRfcmVhZCh1aW50NjQsdWludDY0LHVpbnQ2NCl1aW50NjQiLCBtZXRob2QgInN1bV9keW5hbWljX2Fycl9zdHJ1Y3QoKXVpbnQ2NCIsIG1ldGhvZCAiY3JlYXRlX2Jvb2xzKCl2b2lkIiwgbWV0aG9kICJzZXRfYm9vbCh1aW50NjQsYm9vbCl2b2lkIiwgbWV0aG9kICJzdW1fYm9vbHModWludDY0KXVpbnQ2NCIsIG1ldGhvZCAiY3JlYXRlX2R5bmFtaWNfYm94KCl2b2lkIiwgbWV0aG9kICJkZWxldGVfZHluYW1pY19ib3goKXZvaWQiLCBtZXRob2QgImFwcGVuZF9keW5hbWljX2JveCh1aW50NjQpdWludDY0IiwgbWV0aG9kICJwb3BfZHluYW1pY19ib3godWludDY0KXVpbnQ2NCIsIG1ldGhvZCAic3VtX2R5bmFtaWNfYm94KCl1aW50NjQiLCBtZXRob2QgIndyaXRlX2R5bmFtaWNfYm94KHVpbnQ2NCx1aW50NjQpdm9pZCIsIG1ldGhvZCAid3JpdGVfZHluYW1pY19hcnJfc3RydWN0KHVpbnQ2NCx1aW50NjQpdm9pZCIsIG1ldGhvZCAic2xpY2VfYm94KCl2b2lkIiwgbWV0aG9kICJhcmM0X2JveCgpdm9pZCIsIG1ldGhvZCAidGVzdF9ib3hfcmVmKCl2b2lkIiwgbWV0aG9kICJib3hfbWFwX3Rlc3QoKXZvaWQiLCBtZXRob2QgImJveF9tYXBfc2V0KHVpbnQ2NCxzdHJpbmcpdm9pZCIsIG1ldGhvZCAiYm94X21hcF9nZXQodWludDY0KXN0cmluZyIsIG1ldGhvZCAiYm94X21hcF9kZWwodWludDY0KXZvaWQiLCBtZXRob2QgImJveF9tYXBfZXhpc3RzKHVpbnQ2NClib29sIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggc2V0X2JveGVzIG1haW5fY2hlY2tfa2V5c19yb3V0ZUA3IG1haW5fY3JlYXRlX21hbnlfaW50c19yb3V0ZUA4IHNldF9tYW55X2ludHMgc3VtX21hbnlfaW50cyBkZWxldGVfYm94ZXMgaW5kaXJlY3RfZXh0cmFjdF9hbmRfcmVwbGFjZSByZWFkX2JveGVzIGJveGVzX2V4aXN0IGNyZWF0ZV9keW5hbWljX2Fycl9zdHJ1Y3QgbWFpbl9kZWxldGVfZHluYW1pY19hcnJfc3RydWN0X3JvdXRlQDE2IGFwcGVuZF9keW5hbWljX2Fycl9zdHJ1Y3QgcG9wX2R5bmFtaWNfYXJyX3N0cnVjdCBzZXRfbmVzdGVkX3N0cnVjdCBuZXN0ZWRfd3JpdGUgbmVzdGVkX3JlYWQgc3VtX2R5bmFtaWNfYXJyX3N0cnVjdCBtYWluX2NyZWF0ZV9ib29sc19yb3V0ZUAyMyBzZXRfYm9vbCBzdW1fYm9vbHMgY3JlYXRlX2R5bmFtaWNfYm94IG1haW5fZGVsZXRlX2R5bmFtaWNfYm94X3JvdXRlQDI3IGFwcGVuZF9keW5hbWljX2JveCBwb3BfZHluYW1pY19ib3ggc3VtX2R5bmFtaWNfYm94IHdyaXRlX2R5bmFtaWNfYm94IHdyaXRlX2R5bmFtaWNfYXJyX3N0cnVjdCBzbGljZV9ib3ggbWFpbl9hcmM0X2JveF9yb3V0ZUAzNCB0ZXN0X2JveF9yZWYgYm94X21hcF90ZXN0IGJveF9tYXBfc2V0IGJveF9tYXBfZ2V0IGJveF9tYXBfZGVsIGJveF9tYXBfZXhpc3RzCiAgICBlcnIKCm1haW5fYXJjNF9ib3hfcm91dGVAMzQ6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNzgtMzc5CiAgICAvLyBib3hfZCA9IEJveChTdGF0aWNJbnRzLCBrZXk9Qnl0ZXMoYiJkIikpCiAgICAvLyBib3hfZC52YWx1ZSA9IFN0YXRpY0ludHMoYXJjNC5VSW50OCgwKSwgYXJjNC5VSW50OCgxKSwgYXJjNC5VSW50OCgyKSwgYXJjNC5VSW50OCgzKSkKICAgIHB1c2hieXRlc3MgMHg2NCAweDAwMDEwMjAzIC8vIDB4NjQsIDB4MDAwMTAyMDMKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM3OQogICAgLy8gYm94X2QudmFsdWUgPSBTdGF0aWNJbnRzKGFyYzQuVUludDgoMCksIGFyYzQuVUludDgoMSksIGFyYzQuVUludDgoMiksIGFyYzQuVUludDgoMykpCiAgICBib3hfcHV0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNzYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9kZWxldGVfZHluYW1pY19ib3hfcm91dGVAMjc6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozMjQKICAgIC8vIGRlbCBzZWxmLmR5bmFtaWNfYm94LnZhbHVlCiAgICBieXRlY18yIC8vICJkeW5hbWljX2JveCIKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzIyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlX2Jvb2xzX3JvdXRlQDIzOgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzAyCiAgICAvLyBzZWxmLnRvb19tYW55X2Jvb2xzLmNyZWF0ZSgpCiAgICBieXRlYyAxMCAvLyAidG9vX21hbnlfYm9vbHMiCiAgICBwdXNoaW50IDQxMjUgLy8gNDEyNQogICAgYm94X2NyZWF0ZQogICAgcG9wCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozMDAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9kZWxldGVfZHluYW1pY19hcnJfc3RydWN0X3JvdXRlQDE2OgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTk3CiAgICAvLyBkZWwgc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QudmFsdWUKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTk1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlX21hbnlfaW50c19yb3V0ZUA4OgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTQwCiAgICAvLyBzZWxmLm1hbnlfaW50cy5jcmVhdGUoKQogICAgYnl0ZWMgMTEgLy8gIm1hbnlfaW50cyIKICAgIHB1c2hpbnQgNDEwNCAvLyA0MTA0CiAgICBib3hfY3JlYXRlCiAgICBwb3AKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEzOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fY2hlY2tfa2V5c19yb3V0ZUA3OgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTMxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fX19hbGdvcHlfZGVmYXVsdF9jcmVhdGVANDI6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgJiYKICAgIHJldHVybiAvLyBvbiBlcnJvcjogT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5zZXRfYm94ZXNbcm91dGluZ10oKSAtPiB2b2lkOgpzZXRfYm94ZXM6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo5NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo5NwogICAgLy8gc2VsZi5ib3hfYS52YWx1ZSA9IGEKICAgIHVuY292ZXIgMgogICAgaXRvYgogICAgYnl0ZWMgNyAvLyAiYm94X2EiCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo5OAogICAgLy8gc2VsZi5ib3hfYi52YWx1ZSA9IGIuY29weSgpCiAgICBieXRlYyA5IC8vICJiIgogICAgYm94X2RlbAogICAgcG9wCiAgICBieXRlYyA5IC8vICJiIgogICAgZGlnIDIKICAgIGJveF9wdXQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5Ojk5CiAgICAvLyBzZWxmLmJveF9jLnZhbHVlID0gYwogICAgYnl0ZWNfMyAvLyAweDQyNGY1ODVmNDMKICAgIGJveF9kZWwKICAgIHBvcAogICAgYnl0ZWNfMyAvLyAweDQyNGY1ODVmNDMKICAgIGRpZyAxCiAgICBib3hfcHV0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMDAKICAgIC8vIHNlbGYuYm94X2QudmFsdWUgPSBiLm5hdGl2ZQogICAgZGlnIDEKICAgIGV4dHJhY3QgMiAwCiAgICBieXRlYyA4IC8vICJib3hfZCIKICAgIGJveF9kZWwKICAgIHBvcAogICAgYnl0ZWMgOCAvLyAiYm94X2QiCiAgICBkaWcgMQogICAgYm94X3B1dAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTAxCiAgICAvLyBzZWxmLmJveF9sYXJnZS5jcmVhdGUoKQogICAgYnl0ZWMgNiAvLyAiYm94X2xhcmdlIgogICAgcHVzaGludCA2MTYwIC8vIDYxNjAKICAgIGJveF9jcmVhdGUKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTAyCiAgICAvLyBzZWxmLmJveF9sYXJnZS52YWx1ZS5lID0gVUludDY0KDQyKQogICAgcHVzaGludCA0MiAvLyA0MgogICAgaXRvYgogICAgYnl0ZWMgNiAvLyAiYm94X2xhcmdlIgogICAgaW50YyA0IC8vIDQwOTYKICAgIHVuY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEwMwogICAgLy8gc2VsZi5ib3hfbGFyZ2UucmVmLnJlcGxhY2Uoc2l6ZV9vZihCeXRlczEwMjQpICogNCwgYXJjNC5VSW50NjQoNDIpLmJ5dGVzKQogICAgYnl0ZWMgNiAvLyAiYm94X2xhcmdlIgogICAgaW50YyA0IC8vIDQwOTYKICAgIHB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMmEKICAgIGJveF9yZXBsYWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMDgKICAgIC8vIHNlbGYuYm94X2EudmFsdWUgKz0gMwogICAgYnl0ZWMgNyAvLyAiYm94X2EiCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ib3hfYSBleGlzdHMKICAgIGJ0b2kKICAgIHB1c2hpbnQgMyAvLyAzCiAgICArCiAgICBpdG9iCiAgICBieXRlYyA3IC8vICJib3hfYSIKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjExMC0xMTEKICAgIC8vICMgdGVzdCAubGVuZ3RoCiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfYS5sZW5ndGggPT0gOAogICAgYnl0ZWMgNyAvLyAiYm94X2EiCiAgICBib3hfbGVuCiAgICBwb3AKICAgIGludGNfMiAvLyA4CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMTIKICAgIC8vIGFzc2VydCBzZWxmLmJveF9iLmxlbmd0aCA9PSBiLmJ5dGVzLmxlbmd0aAogICAgYnl0ZWMgOSAvLyAiYiIKICAgIGJveF9sZW4KICAgIHBvcAogICAgZGlnIDMKICAgIGxlbgogICAgPT0KICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTEzCiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfYy5sZW5ndGggPT0gYy5ieXRlcy5sZW5ndGgKICAgIGJ5dGVjXzMgLy8gMHg0MjRmNTg1ZjQzCiAgICBib3hfbGVuCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ib3hfYyBleGlzdHMKICAgIGRpZyAyCiAgICBsZW4KICAgIGR1cDIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjExNAogICAgLy8gYXNzZXJ0IHNlbGYuYm94X2QubGVuZ3RoID09IGIubmF0aXZlLmxlbmd0aAogICAgYnl0ZWMgOCAvLyAiYm94X2QiCiAgICBib3hfbGVuCiAgICBwb3AKICAgIGRpZyAzCiAgICBsZW4KICAgIGR1cDIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjExNi0xMTcKICAgIC8vICMgdGVzdCAudmFsdWUuYnl0ZXMKICAgIC8vIGFzc2VydCBzZWxmLmJveF9jLnZhbHVlLmJ5dGVzWzBdID09IGMuYnl0ZXNbMF0KICAgIGJ5dGVjXzMgLy8gMHg0MjRmNTg1ZjQzCiAgICBpbnRjXzMgLy8gMAogICAgaW50Y18xIC8vIDEKICAgIGJveF9leHRyYWN0CiAgICBkaWcgNgogICAgZXh0cmFjdCAwIDEKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjExOAogICAgLy8gYXNzZXJ0IHNlbGYuYm94X2MudmFsdWUuYnl0ZXNbLTFdID09IGMuYnl0ZXNbLTFdCiAgICBkaWcgMwogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGJ5dGVjXzMgLy8gMHg0MjRmNTg1ZjQzCiAgICBzd2FwCiAgICBpbnRjXzEgLy8gMQogICAgYm94X2V4dHJhY3QKICAgIGRpZyAzCiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZGlnIDcKICAgIHN3YXAKICAgIGludGNfMSAvLyAxCiAgICBleHRyYWN0MwogICAgPT0KICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTE5CiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfYy52YWx1ZS5ieXRlc1s6LTFdID09IGMuYnl0ZXNbOi0xXQogICAgaW50Y18xIC8vIDEKICAgIGRpZyA0CiAgICA8CiAgICBkaWcgNAogICAgaW50Y18xIC8vIDEKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBkaWcgNAogICAgc3dhcAogICAgLQogICAgYnl0ZWNfMyAvLyAweDQyNGY1ODVmNDMKICAgIGludGNfMyAvLyAwCiAgICB1bmNvdmVyIDIKICAgIGJveF9leHRyYWN0CiAgICBpbnRjXzEgLy8gMQogICAgZGlnIDQKICAgID49CiAgICBpbnRjXzEgLy8gMQogICAgZGlnIDUKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBkaWcgNAogICAgc3dhcAogICAgLQogICAgZGlnIDcKICAgIGludGNfMyAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEyMAogICAgLy8gYXNzZXJ0IHNlbGYuYm94X2MudmFsdWUuYnl0ZXNbOjJdID09IGMuYnl0ZXNbOjJdCiAgICBpbnRjXzAgLy8gMgogICAgZGlnIDQKICAgIDwKICAgIHVuY292ZXIgNAogICAgaW50Y18wIC8vIDIKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBieXRlY18zIC8vIDB4NDI0ZjU4NWY0MwogICAgaW50Y18zIC8vIDAKICAgIHVuY292ZXIgMgogICAgYm94X2V4dHJhY3QKICAgIGludGNfMCAvLyAyCiAgICBkaWcgNAogICAgPj0KICAgIGludGNfMCAvLyAyCiAgICB1bmNvdmVyIDUKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICB1bmNvdmVyIDUKICAgIGludGNfMyAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEyMi0xMjMKICAgIC8vICMgdGVzdCAudmFsdWUgd2l0aCBCeXRlcyB0eXBlCiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfZC52YWx1ZVswXSA9PSBiLm5hdGl2ZVswXQogICAgYnl0ZWMgOCAvLyAiYm94X2QiCiAgICBpbnRjXzMgLy8gMAogICAgaW50Y18xIC8vIDEKICAgIGJveF9leHRyYWN0CiAgICB1bmNvdmVyIDQKICAgIGV4dHJhY3QgMiAxCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMjQKICAgIC8vIGFzc2VydCBzZWxmLmJveF9kLnZhbHVlWy0xXSA9PSBiLm5hdGl2ZVstMV0KICAgIGRpZyAxCiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgYnl0ZWMgOCAvLyAiYm94X2QiCiAgICBzd2FwCiAgICBpbnRjXzEgLy8gMQogICAgYm94X2V4dHJhY3QKICAgIGRpZyAxCiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZGlnIDQKICAgIHN3YXAKICAgIGludGNfMSAvLyAxCiAgICBleHRyYWN0MwogICAgPT0KICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTI1CiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfZC52YWx1ZVs6LTFdID09IGIubmF0aXZlWzotMV0KICAgIGludGNfMSAvLyAxCiAgICBkaWcgMgogICAgPAogICAgZGlnIDIKICAgIGludGNfMSAvLyAxCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgZGlnIDIKICAgIHN3YXAKICAgIC0KICAgIGJ5dGVjIDggLy8gImJveF9kIgogICAgaW50Y18zIC8vIDAKICAgIHVuY292ZXIgMgogICAgYm94X2V4dHJhY3QKICAgIGludGNfMSAvLyAxCiAgICBkaWcgMgogICAgPj0KICAgIGludGNfMSAvLyAxCiAgICBkaWcgMwogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGRpZyAyCiAgICBzd2FwCiAgICAtCiAgICBkaWcgNAogICAgaW50Y18zIC8vIDAKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgPT0KICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTI2CiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfZC52YWx1ZVs6NV0gPT0gYi5uYXRpdmVbOjVdCiAgICBwdXNoaW50IDUgLy8gNQogICAgZGlnIDIKICAgIDwKICAgIGRpZyAyCiAgICBwdXNoaW50IDUgLy8gNQogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGJ5dGVjIDggLy8gImJveF9kIgogICAgaW50Y18zIC8vIDAKICAgIHVuY292ZXIgMgogICAgYm94X2V4dHJhY3QKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBkaWcgMgogICAgPj0KICAgIHB1c2hpbnQgNSAvLyA1CiAgICBkaWcgMwogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGRpZyA0CiAgICBpbnRjXzMgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxMjcKICAgIC8vIGFzc2VydCBzZWxmLmJveF9kLnZhbHVlWzogVUludDY0KDIpXSA9PSBiLm5hdGl2ZVs6IFVJbnQ2NCgyKV0KICAgIGludGNfMCAvLyAyCiAgICBkaWcgMgogICAgPAogICAgdW5jb3ZlciAyCiAgICBpbnRjXzAgLy8gMgogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGJ5dGVjIDggLy8gImJveF9kIgogICAgaW50Y18zIC8vIDAKICAgIHVuY292ZXIgMgogICAgYm94X2V4dHJhY3QKICAgIGludGNfMCAvLyAyCiAgICBkaWcgMgogICAgPj0KICAgIGludGNfMCAvLyAyCiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICB1bmNvdmVyIDIKICAgIGludGNfMyAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjEyOQogICAgLy8gYXNzZXJ0IHNlbGYuYm94X2xhcmdlLmxlbmd0aCA9PSBzaXplX29mKExhcmdlU3RydWN0KQogICAgYnl0ZWMgNiAvLyAiYm94X2xhcmdlIgogICAgYm94X2xlbgogICAgcG9wCiAgICBwdXNoaW50IDYxNjAgLy8gNjE2MAogICAgPT0KICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5Ojk1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0LnNldF9tYW55X2ludHNbcm91dGluZ10oKSAtPiB2b2lkOgpzZXRfbWFueV9pbnRzOgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTQyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTQ0CiAgICAvLyBzZWxmLm1hbnlfaW50cy52YWx1ZVtpbmRleF0gPSB2YWx1ZQogICAgc3dhcAogICAgaW50Y18yIC8vIDgKICAgICoKICAgIGJ5dGVjIDExIC8vICJtYW55X2ludHMiCiAgICBzd2FwCiAgICB1bmNvdmVyIDIKICAgIGJveF9yZXBsYWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNDIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gZXhhbXBsZXMuYm94X3N0b3JhZ2UuY29udHJhY3QuQm94Q29udHJhY3Quc3VtX21hbnlfaW50c1tyb3V0aW5nXSgpIC0+IHZvaWQ6CnN1bV9tYW55X2ludHM6CiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cAoKc3VtX21hbnlfaW50c193aGlsZV90b3BANzoKICAgIHB1c2hpbnQgMTA1MTAgLy8gMTA1MTAKICAgIGdsb2JhbCBPcGNvZGVCdWRnZXQKICAgID4KICAgIGJ6IHN1bV9tYW55X2ludHNfYWZ0ZXJfd2hpbGVAMTIKICAgIGl0eG5fYmVnaW4KICAgIHB1c2hpbnQgNiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBieXRlYyAxNSAvLyAweDA2ODEwMQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW0KICAgIGJ5dGVjIDE1IC8vIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCiAgICBpbnRjXzMgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBiIHN1bV9tYW55X2ludHNfd2hpbGVfdG9wQDcKCnN1bV9tYW55X2ludHNfYWZ0ZXJfd2hpbGVAMTI6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNDkKICAgIC8vIHRvdGFsID0gVUludDY0KDApCiAgICBpbnRjXzMgLy8gMAogICAgYnVyeSAxCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNTAKICAgIC8vIGZvciB2YWwgaW4gc2VsZi5tYW55X2ludHMudmFsdWU6CiAgICBieXRlYyAxMSAvLyAibWFueV9pbnRzIgogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5tYW55X2ludHMgZXhpc3RzCiAgICBpbnRjXzMgLy8gMAogICAgYnVyeSAyCgpzdW1fbWFueV9pbnRzX2Zvcl9oZWFkZXJAMjoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE1MAogICAgLy8gZm9yIHZhbCBpbiBzZWxmLm1hbnlfaW50cy52YWx1ZToKICAgIGRpZyAxCiAgICBwdXNoaW50IDUxMyAvLyA1MTMKICAgIDwKICAgIGJ6IHN1bV9tYW55X2ludHNfYWZ0ZXJfZm9yQDUKICAgIGRpZyAxCiAgICBkdXAKICAgIGludGNfMiAvLyA4CiAgICAqCiAgICBieXRlYyAxMSAvLyAibWFueV9pbnRzIgogICAgc3dhcAogICAgaW50Y18yIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNTEKICAgIC8vIHRvdGFsID0gdG90YWwgKyB2YWwKICAgIGRpZyAyCiAgICArCiAgICBidXJ5IDIKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBidXJ5IDIKICAgIGIgc3VtX21hbnlfaW50c19mb3JfaGVhZGVyQDIKCnN1bV9tYW55X2ludHNfYWZ0ZXJfZm9yQDU6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNDYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBkdXAKICAgIGl0b2IKICAgIGJ5dGVjIDQgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5kZWxldGVfYm94ZXNbcm91dGluZ10oKSAtPiB2b2lkOgpkZWxldGVfYm94ZXM6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNTYKICAgIC8vIGRlbCBzZWxmLmJveF9hLnZhbHVlCiAgICBieXRlYyA3IC8vICJib3hfYSIKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTU3CiAgICAvLyBkZWwgc2VsZi5ib3hfYi52YWx1ZQogICAgYnl0ZWMgOSAvLyAiYiIKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTU4CiAgICAvLyBkZWwgc2VsZi5ib3hfYy52YWx1ZQogICAgYnl0ZWNfMyAvLyAweDQyNGY1ODVmNDMKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTU5CiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfYS5nZXQoZGVmYXVsdD1VSW50NjQoNDIpKSA9PSA0MgogICAgYnl0ZWMgNyAvLyAiYm94X2EiCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBidG9pCiAgICBwdXNoaW50IDQyIC8vIDQyCiAgICBkaWcgMQogICAgZGlnIDMKICAgIHNlbGVjdAogICAgcHVzaGludCA0MiAvLyA0MgogICAgPT0KICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTYwCiAgICAvLyBhc3NlcnQgc2VsZi5ib3hfYi5nZXQoZGVmYXVsdD1hcmM0LkR5bmFtaWNCeXRlcyhiIjQyIikpLm5hdGl2ZSA9PSBiIjQyIgogICAgYnl0ZWMgOSAvLyAiYiIKICAgIGJveF9nZXQKICAgIGJ5dGVjIDEzIC8vIDB4MDAwMjM0MzIKICAgIGNvdmVyIDIKICAgIHNlbGVjdAogICAgZXh0cmFjdCAyIDAKICAgIHB1c2hieXRlcyAweDM0MzIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE2MQogICAgLy8gYXNzZXJ0IHNlbGYuYm94X2MuZ2V0KGRlZmF1bHQ9YXJjNC5TdHJpbmcoIjQyIikpID09ICI0MiIKICAgIGJ5dGVjXzMgLy8gMHg0MjRmNTg1ZjQzCiAgICBib3hfZ2V0CiAgICBieXRlYyAxMyAvLyAweDAwMDIzNDMyCiAgICBjb3ZlciAyCiAgICBzZWxlY3QKICAgIGJ5dGVjIDEzIC8vIDB4MDAwMjM0MzIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE2MwogICAgLy8gYXNzZXJ0IG5vdCBhX2V4aXN0cwogICAgc3dhcAogICAgIQogICAgYXNzZXJ0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNjQKICAgIC8vIGFzc2VydCBhID09IDAKICAgICEKICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTY1CiAgICAvLyBkZWwgc2VsZi5ib3hfbGFyZ2UudmFsdWUKICAgIGJ5dGVjIDYgLy8gImJveF9sYXJnZSIKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTU0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5pbmRpcmVjdF9leHRyYWN0X2FuZF9yZXBsYWNlW3JvdXRpbmddKCkgLT4gdm9pZDoKaW5kaXJlY3RfZXh0cmFjdF9hbmRfcmVwbGFjZToKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE2OQogICAgLy8gbGFyZ2UgPSBzZWxmLmJveF9sYXJnZS52YWx1ZS5jb3B5KCkKICAgIGJ5dGVjIDYgLy8gImJveF9sYXJnZSIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE2OS0xNzAKICAgIC8vIGxhcmdlID0gc2VsZi5ib3hfbGFyZ2UudmFsdWUuY29weSgpCiAgICAvLyBsYXJnZS5lICs9IDEKICAgIGludGMgNCAvLyA0MDk2CiAgICBpbnRjXzIgLy8gOAogICAgYm94X2V4dHJhY3QKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE3MAogICAgLy8gbGFyZ2UuZSArPSAxCiAgICBidG9pCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgaXRvYgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTcxCiAgICAvLyBzZWxmLmJveF9sYXJnZS52YWx1ZSA9IGxhcmdlLmNvcHkoKQogICAgYnl0ZWMgNiAvLyAiYm94X2xhcmdlIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTY5LTE3MQogICAgLy8gbGFyZ2UgPSBzZWxmLmJveF9sYXJnZS52YWx1ZS5jb3B5KCkKICAgIC8vIGxhcmdlLmUgKz0gMQogICAgLy8gc2VsZi5ib3hfbGFyZ2UudmFsdWUgPSBsYXJnZS5jb3B5KCkKICAgIGludGMgNCAvLyA0MDk2CiAgICB1bmNvdmVyIDIKICAgIGJveF9yZXBsYWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNjcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gZXhhbXBsZXMuYm94X3N0b3JhZ2UuY29udHJhY3QuQm94Q29udHJhY3QucmVhZF9ib3hlc1tyb3V0aW5nXSgpIC0+IHZvaWQ6CnJlYWRfYm94ZXM6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNzYKICAgIC8vIGdldF9ib3hfdmFsdWVfcGx1c18xKHNlbGYuYm94X2EpIC0gMSwKICAgIGJ5dGVjIDcgLy8gImJveF9hIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDc3CiAgICAvLyByZXR1cm4gYm94LnZhbHVlICsgMQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIEJveCBleGlzdHMKICAgIGJ0b2kKICAgIGludGNfMSAvLyAxCiAgICArCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNzYKICAgIC8vIGdldF9ib3hfdmFsdWVfcGx1c18xKHNlbGYuYm94X2EpIC0gMSwKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxNzcKICAgIC8vIHNlbGYuYm94X2IudmFsdWUubmF0aXZlLAogICAgYnl0ZWMgOSAvLyAiYiIKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9iIGV4aXN0cwogICAgZXh0cmFjdCAyIDAKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE3OAogICAgLy8gc2VsZi5ib3hfYy52YWx1ZSwKICAgIGJ5dGVjXzMgLy8gMHg0MjRmNTg1ZjQzCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ib3hfYyBleGlzdHMKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE3OQogICAgLy8gc2VsZi5ib3hfbGFyZ2UudmFsdWUuZSwKICAgIGJ5dGVjIDYgLy8gImJveF9sYXJnZSIKICAgIGludGMgNCAvLyA0MDk2CiAgICBpbnRjXzIgLy8gOAogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE3MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB1bmNvdmVyIDMKICAgIGl0b2IKICAgIGRpZyAzCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICB1bmNvdmVyIDQKICAgIGNvbmNhdAogICAgc3dhcAogICAgYnl0ZWMgMTYgLy8gMHgwMDE0CiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBsZW4KICAgIHB1c2hpbnQgMjAgLy8gMjAKICAgICsKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgaXRvYgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0LmJveGVzX2V4aXN0W3JvdXRpbmddKCkgLT4gdm9pZDoKYm94ZXNfZXhpc3Q6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxODQKICAgIC8vIHJldHVybiBib29sKHNlbGYuYm94X2EpLCBib29sKHNlbGYuYm94X2IpLCBib29sKHNlbGYuYm94X2MpLCBib29sKHNlbGYuYm94X2xhcmdlKQogICAgYnl0ZWMgNyAvLyAiYm94X2EiCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ5dGVjIDkgLy8gImIiCiAgICBib3hfbGVuCiAgICBjb3ZlciAyCiAgICBwb3AKICAgIGJ5dGVjXzMgLy8gMHg0MjRmNTg1ZjQzCiAgICBib3hfbGVuCiAgICBjb3ZlciAzCiAgICBwb3AKICAgIGJ5dGVjIDYgLy8gImJveF9sYXJnZSIKICAgIGJveF9sZW4KICAgIGNvdmVyIDQKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTgyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHB1c2hieXRlcyAweDAwCiAgICBpbnRjXzMgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGludGNfMSAvLyAxCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgaW50Y18wIC8vIDIKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBwdXNoaW50IDMgLy8gMwogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjIDQgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5jcmVhdGVfZHluYW1pY19hcnJfc3RydWN0W3JvdXRpbmddKCkgLT4gdm9pZDoKY3JlYXRlX2R5bmFtaWNfYXJyX3N0cnVjdDoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE4OQogICAgLy8gYT1UeG4ubnVtX2FwcF9hcmdzLAogICAgdHhuIE51bUFwcEFyZ3MKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE5MQogICAgLy8gYj1UeG4ubnVtX2FwcF9hcmdzICogMiwKICAgIGR1cAogICAgaW50Y18wIC8vIDIKICAgICoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE4OC0xOTMKICAgIC8vIHNlbGYuZHluYW1pY19hcnJfc3RydWN0LnZhbHVlID0gRHluYW1pY0FycmF5SW5BU3RydWN0KAogICAgLy8gICAgIGE9VHhuLm51bV9hcHBfYXJncywKICAgIC8vICAgICBhcnI9QXJyYXlbVUludDY0XSgpLAogICAgLy8gICAgIGI9VHhuLm51bV9hcHBfYXJncyAqIDIsCiAgICAvLyAgICAgYXJyMj1BcnJheVtVSW50NjRdKCksCiAgICAvLyApCiAgICBzd2FwCiAgICBpdG9iCiAgICBieXRlYyAxNiAvLyAweDAwMTQKICAgIGNvbmNhdAogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgMHgwMDE2MDAwMDAwMDAKICAgIGNvbmNhdAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTg4CiAgICAvLyBzZWxmLmR5bmFtaWNfYXJyX3N0cnVjdC52YWx1ZSA9IER5bmFtaWNBcnJheUluQVN0cnVjdCgKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE4OC0xOTMKICAgIC8vIHNlbGYuZHluYW1pY19hcnJfc3RydWN0LnZhbHVlID0gRHluYW1pY0FycmF5SW5BU3RydWN0KAogICAgLy8gICAgIGE9VHhuLm51bV9hcHBfYXJncywKICAgIC8vICAgICBhcnI9QXJyYXlbVUludDY0XSgpLAogICAgLy8gICAgIGI9VHhuLm51bV9hcHBfYXJncyAqIDIsCiAgICAvLyAgICAgYXJyMj1BcnJheVtVSW50NjRdKCksCiAgICAvLyApCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE4OAogICAgLy8gc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QudmFsdWUgPSBEeW5hbWljQXJyYXlJbkFTdHJ1Y3QoCiAgICBieXRlY18wIC8vICJkeW5hbWljX2Fycl9zdHJ1Y3QiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToxODgtMTkzCiAgICAvLyBzZWxmLmR5bmFtaWNfYXJyX3N0cnVjdC52YWx1ZSA9IER5bmFtaWNBcnJheUluQVN0cnVjdCgKICAgIC8vICAgICBhPVR4bi5udW1fYXBwX2FyZ3MsCiAgICAvLyAgICAgYXJyPUFycmF5W1VJbnQ2NF0oKSwKICAgIC8vICAgICBiPVR4bi5udW1fYXBwX2FyZ3MgKiAyLAogICAgLy8gICAgIGFycjI9QXJyYXlbVUludDY0XSgpLAogICAgLy8gKQogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MTg2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5hcHBlbmRfZHluYW1pY19hcnJfc3RydWN0W3JvdXRpbmddKCkgLT4gdm9pZDoKYXBwZW5kX2R5bmFtaWNfYXJyX3N0cnVjdDoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE5OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICBkdXAKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIwMS0yMDMKICAgIC8vICMgVE9ETzogc3VwcG9ydCBhcHBlbmQgdXNpbmcgaGlnaCBsZXZlbCBhcnJheSBvcGVyYXRpb25zLCBpbnN0ZWFkIG9mCiAgICAvLyAjICAgICAgIHJlbHlpbmcgb24gc3RydWN0IGxheW91dCB0cmlja3Mgd2l0aCBGaXhlZEFycmF5SW5BU3RydWN0CiAgICAvLyBhc3NlcnQgc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QudmFsdWUuYiA9PSAyLCAiZXhwZWN0ZWQgMiIKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIGludGNfMiAvLyA4CiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgaW50Y18wIC8vIDIKICAgID09CiAgICBhc3NlcnQgLy8gZXhwZWN0ZWQgMgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjA0CiAgICAvLyBhcnJfbGVuID0gc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QudmFsdWUuYXJyLmxlbmd0aAogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgcHVzaGludCAyMCAvLyAyMAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIwNQogICAgLy8gYXJyMl9sZW4gPSBzZWxmLmR5bmFtaWNfYXJyX3N0cnVjdC52YWx1ZS5hcnIyLmxlbmd0aAogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgcHVzaGludCAxOCAvLyAxOAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBieXRlY18wIC8vICJkeW5hbWljX2Fycl9zdHJ1Y3QiCiAgICBzd2FwCiAgICBpbnRjXzAgLy8gMgogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIwOQogICAgLy8gZ2V0X2R5bmFtaWNfYXJyMl9zdHJ1Y3RfYnl0ZV9pbmRleChhcnJfbGVuICsgdGltZXMsIGFycjJfbGVuKQogICAgZGlnIDEKICAgIGRpZyAzCiAgICArCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0OTMKICAgIC8vIGR5bl9hcnJfaW5kZXggPSBzaXplX29mKGFyYzQuVUludDE2KSArIGluZGV4ICogc2l6ZV9vZihVSW50NjQpCiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDkzLTQ5NAogICAgLy8gZHluX2Fycl9pbmRleCA9IHNpemVfb2YoYXJjNC5VSW50MTYpICsgaW5kZXggKiBzaXplX29mKFVJbnQ2NCkKICAgIC8vIHJldHVybiBoZWFkICsgZHluX2Fycl9pbmRleAogICAgcHVzaGludCAyMiAvLyAyMgogICAgKwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NTAwCiAgICAvLyBkeW5fYXJyMl9pbmRleCA9IHNpemVfb2YoYXJjNC5VSW50MTYpICsgYXJyMl9pbmRleCAqIHNpemVfb2YoVUludDY0KQogICAgc3dhcAogICAgaW50Y18yIC8vIDgKICAgICoKICAgIGludGNfMCAvLyAyCiAgICArCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo1MDEKICAgIC8vIHJldHVybiBoZWFkX2FuZF9keW5fYXJyICsgZHluX2FycjJfaW5kZXgKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIwNy0yMDgKICAgIC8vICMgZXhwYW5kIGJveAogICAgLy8gc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QucmVmLnJlc2l6ZSgKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIwNy0yMTAKICAgIC8vICMgZXhwYW5kIGJveAogICAgLy8gc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QucmVmLnJlc2l6ZSgKICAgIC8vICAgICBnZXRfZHluYW1pY19hcnIyX3N0cnVjdF9ieXRlX2luZGV4KGFycl9sZW4gKyB0aW1lcywgYXJyMl9sZW4pCiAgICAvLyApCiAgICBzd2FwCiAgICBib3hfcmVzaXplCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0OTMKICAgIC8vIGR5bl9hcnJfaW5kZXggPSBzaXplX29mKGFyYzQuVUludDE2KSArIGluZGV4ICogc2l6ZV9vZihVSW50NjQpCiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDkzLTQ5NAogICAgLy8gZHluX2Fycl9pbmRleCA9IHNpemVfb2YoYXJjNC5VSW50MTYpICsgaW5kZXggKiBzaXplX29mKFVJbnQ2NCkKICAgIC8vIHJldHVybiBoZWFkICsgZHluX2Fycl9pbmRleAogICAgcHVzaGludCAyMiAvLyAyMgogICAgKwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjEzCiAgICAvLyBnZXRfZHluYW1pY19hcnJfc3RydWN0X2J5dGVfaW5kZXgoYXJyX2xlbiksIDAsIG9wLmJ6ZXJvKHRpbWVzICogc2l6ZV9vZihVSW50NjQpKQogICAgc3dhcAogICAgaW50Y18yIC8vIDgKICAgICoKICAgIGJ6ZXJvCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyMTEtMjEyCiAgICAvLyAjIHNwbGljZSBpbiB6ZXJvIGJ5dGVzIHNvIGV4aXN0aW5nIGRhdGEgaXMgaW4gY29ycmVjdCBsb2NhdGlvbgogICAgLy8gc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QucmVmLnNwbGljZSgKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIxMS0yMTQKICAgIC8vICMgc3BsaWNlIGluIHplcm8gYnl0ZXMgc28gZXhpc3RpbmcgZGF0YSBpcyBpbiBjb3JyZWN0IGxvY2F0aW9uCiAgICAvLyBzZWxmLmR5bmFtaWNfYXJyX3N0cnVjdC5yZWYuc3BsaWNlKAogICAgLy8gICAgIGdldF9keW5hbWljX2Fycl9zdHJ1Y3RfYnl0ZV9pbmRleChhcnJfbGVuKSwgMCwgb3AuYnplcm8odGltZXMgKiBzaXplX29mKFVJbnQ2NCkpCiAgICAvLyApCiAgICB1bmNvdmVyIDIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIxMwogICAgLy8gZ2V0X2R5bmFtaWNfYXJyX3N0cnVjdF9ieXRlX2luZGV4KGFycl9sZW4pLCAwLCBvcC5iemVybyh0aW1lcyAqIHNpemVfb2YoVUludDY0KSkKICAgIGludGNfMyAvLyAwCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyMTEtMjE0CiAgICAvLyAjIHNwbGljZSBpbiB6ZXJvIGJ5dGVzIHNvIGV4aXN0aW5nIGRhdGEgaXMgaW4gY29ycmVjdCBsb2NhdGlvbgogICAgLy8gc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QucmVmLnNwbGljZSgKICAgIC8vICAgICBnZXRfZHluYW1pY19hcnJfc3RydWN0X2J5dGVfaW5kZXgoYXJyX2xlbiksIDAsIG9wLmJ6ZXJvKHRpbWVzICogc2l6ZV9vZihVSW50NjQpKQogICAgLy8gKQogICAgdW5jb3ZlciAzCiAgICBib3hfc3BsaWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyMTcKICAgIC8vIGZvciBpIGluIHVyYW5nZSh0aW1lcyk6CiAgICBpbnRjXzMgLy8gMAoKYXBwZW5kX2R5bmFtaWNfYXJyX3N0cnVjdF9mb3JfaGVhZGVyQDI6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyMTcKICAgIC8vIGZvciBpIGluIHVyYW5nZSh0aW1lcyk6CiAgICBkdXAKICAgIGRpZyAzCiAgICA8CiAgICBieiBhcHBlbmRfZHluYW1pY19hcnJfc3RydWN0X2FmdGVyX2ZvckA1CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyMTgKICAgIC8vIGJveC52YWx1ZS5hcnIuYXJyW2Fycl9sZW5dID0gaQogICAgZHVwbiAyCiAgICBpdG9iCiAgICBkaWcgMwogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgcHVzaGludCAyMiAvLyAyMgogICAgKwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjE1LTIxNgogICAgLy8gIyB1cGRhdGUgdXNpbmcgYSBib3ggdHlwZWQgYXMgYSBGaXhlZEFycmF5CiAgICAvLyBib3ggPSBCb3goRml4ZWRBcnJheUluQVN0cnVjdCwga2V5PXNlbGYuZHluYW1pY19hcnJfc3RydWN0LmtleSkKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIxOAogICAgLy8gYm94LnZhbHVlLmFyci5hcnJbYXJyX2xlbl0gPSBpCiAgICBzd2FwCiAgICB1bmNvdmVyIDIKICAgIGJveF9yZXBsYWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyMTkKICAgIC8vIGFycl9sZW4gKz0gMQogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ1cnkgMwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjE3CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UodGltZXMpOgogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ1cnkgMQogICAgYiBhcHBlbmRfZHluYW1pY19hcnJfc3RydWN0X2Zvcl9oZWFkZXJAMgoKYXBwZW5kX2R5bmFtaWNfYXJyX3N0cnVjdF9hZnRlcl9mb3JANToKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIyMAogICAgLy8gYm94LnZhbHVlLmFyci5sZW5ndGggPSBhcmM0LlVJbnQxNihhcnJfbGVuKQogICAgZGlnIDEKICAgIGR1cAogICAgaXRvYgogICAgZHVwCiAgICBiaXRsZW4KICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGV4dHJhY3QgNiAyCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyMTUtMjE2CiAgICAvLyAjIHVwZGF0ZSB1c2luZyBhIGJveCB0eXBlZCBhcyBhIEZpeGVkQXJyYXkKICAgIC8vIGJveCA9IEJveChGaXhlZEFycmF5SW5BU3RydWN0LCBrZXk9c2VsZi5keW5hbWljX2Fycl9zdHJ1Y3Qua2V5KQogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjIwCiAgICAvLyBib3gudmFsdWUuYXJyLmxlbmd0aCA9IGFyYzQuVUludDE2KGFycl9sZW4pCiAgICBwdXNoaW50IDIwIC8vIDIwCiAgICB1bmNvdmVyIDIKICAgIGJveF9yZXBsYWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0OTMKICAgIC8vIGR5bl9hcnJfaW5kZXggPSBzaXplX29mKGFyYzQuVUludDE2KSArIGluZGV4ICogc2l6ZV9vZihVSW50NjQpCiAgICBkdXAKICAgIGludGNfMiAvLyA4CiAgICAqCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo1MDEKICAgIC8vIHJldHVybiBoZWFkX2FuZF9keW5fYXJyICsgZHluX2FycjJfaW5kZXgKICAgIHB1c2hpbnQgMjQgLy8gMjQKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIyMS0yMjIKICAgIC8vICMgd2hlbiBjYWxjdWxhdGluZyBhcnIyX29mZnNldCBuZWVkIHRvIHN1YiAyIGZyb20gMHRoIGluZGV4IHRvIGFjY291bnQgZm9yIGxlbmd0aCBieXRlcwogICAgLy8gYXJyMl9vZmZzZXQgPSBnZXRfZHluYW1pY19hcnIyX3N0cnVjdF9ieXRlX2luZGV4KGFycl9sZW4sIFVJbnQ2NCgwKSkgLSAyCiAgICBpbnRjXzAgLy8gMgogICAgLQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjIzCiAgICAvLyBib3gudmFsdWUuYXJyMl9vZmZzZXQgPSBhcmM0LlVJbnQxNihhcnIyX29mZnNldCkKICAgIGl0b2IKICAgIGR1cAogICAgYml0bGVuCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBleHRyYWN0IDYgMgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjE1LTIxNgogICAgLy8gIyB1cGRhdGUgdXNpbmcgYSBib3ggdHlwZWQgYXMgYSBGaXhlZEFycmF5CiAgICAvLyBib3ggPSBCb3goRml4ZWRBcnJheUluQVN0cnVjdCwga2V5PXNlbGYuZHluYW1pY19hcnJfc3RydWN0LmtleSkKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIyMwogICAgLy8gYm94LnZhbHVlLmFycjJfb2Zmc2V0ID0gYXJjNC5VSW50MTYoYXJyMl9vZmZzZXQpCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICB1bmNvdmVyIDIKICAgIGJveF9yZXBsYWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyMjYKICAgIC8vIHNlbGYuZHluYW1pY19hcnJfc3RydWN0LnZhbHVlLmFyci5sZW5ndGggPT0gYXJyX2xlbgogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgcHVzaGludCAyMCAvLyAyMAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgPT0KICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIyNS0yMjcKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QudmFsdWUuYXJyLmxlbmd0aCA9PSBhcnJfbGVuCiAgICAvLyApLCAiZXhwZWN0ZWQgYXJyIGxlbmd0aCB0byBiZSBjb3JyZWN0IgogICAgYXNzZXJ0IC8vIGV4cGVjdGVkIGFyciBsZW5ndGggdG8gYmUgY29ycmVjdAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjI4CiAgICAvLyBhc3NlcnQgc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QudmFsdWUuYXJyMi5sZW5ndGggPT0gMCwgImV4cGVjdGVkIGFycjIgbGVuZ3RoIHRvIGJlIGNvcnJlY3QiCiAgICBieXRlY18wIC8vICJkeW5hbWljX2Fycl9zdHJ1Y3QiCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICBpbnRjXzAgLy8gMgogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIHN3YXAKICAgIGludGNfMCAvLyAyCiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgIQogICAgYXNzZXJ0IC8vIGV4cGVjdGVkIGFycjIgbGVuZ3RoIHRvIGJlIGNvcnJlY3QKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjE5OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBpdG9iCiAgICBieXRlYyA0IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gZXhhbXBsZXMuYm94X3N0b3JhZ2UuY29udHJhY3QuQm94Q29udHJhY3QucG9wX2R5bmFtaWNfYXJyX3N0cnVjdFtyb3V0aW5nXSgpIC0+IHZvaWQ6CnBvcF9keW5hbWljX2Fycl9zdHJ1Y3Q6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyMzEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjM2CiAgICAvLyBhcnJfbGVuID0gc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QudmFsdWUuYXJyLmxlbmd0aCAtIHRpbWVzCiAgICBieXRlY18wIC8vICJkeW5hbWljX2Fycl9zdHJ1Y3QiCiAgICBwdXNoaW50IDIwIC8vIDIwCiAgICBpbnRjXzAgLy8gMgogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIGRpZyAxCiAgICAtCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyMzcKICAgIC8vIGFycjJfbGVuID0gc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QudmFsdWUuYXJyMi5sZW5ndGgKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIHB1c2hpbnQgMTggLy8gMTgKICAgIGludGNfMCAvLyAyCiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgc3dhcAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0OTMKICAgIC8vIGR5bl9hcnJfaW5kZXggPSBzaXplX29mKGFyYzQuVUludDE2KSArIGluZGV4ICogc2l6ZV9vZihVSW50NjQpCiAgICBkaWcgMQogICAgaW50Y18yIC8vIDgKICAgICoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQ5NAogICAgLy8gcmV0dXJuIGhlYWQgKyBkeW5fYXJyX2luZGV4CiAgICBkdXAKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQ5My00OTQKICAgIC8vIGR5bl9hcnJfaW5kZXggPSBzaXplX29mKGFyYzQuVUludDE2KSArIGluZGV4ICogc2l6ZV9vZihVSW50NjQpCiAgICAvLyByZXR1cm4gaGVhZCArIGR5bl9hcnJfaW5kZXgKICAgIHB1c2hpbnQgMjIgLy8gMjIKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjUwMQogICAgLy8gcmV0dXJuIGhlYWRfYW5kX2R5bl9hcnIgKyBkeW5fYXJyMl9pbmRleAogICAgc3dhcAogICAgcHVzaGludCAyNCAvLyAyNAogICAgKwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjQwCiAgICAvLyBhcnIyX29mZnNldCA9IGdldF9keW5hbWljX2FycjJfc3RydWN0X2J5dGVfaW5kZXgoYXJyX2xlbiwgVUludDY0KDApKSAtIDIKICAgIGludGNfMCAvLyAyCiAgICAtCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNDEKICAgIC8vIGJveC52YWx1ZS5hcnIubGVuZ3RoID0gYXJjNC5VSW50MTYoYXJyX2xlbikKICAgIHVuY292ZXIgMwogICAgaXRvYgogICAgZHVwCiAgICBiaXRsZW4KICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGV4dHJhY3QgNiAyCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyMzgtMjM5CiAgICAvLyAjIHJlc2l6ZSBhcnJheQogICAgLy8gYm94ID0gQm94KEZpeGVkQXJyYXlJbkFTdHJ1Y3QsIGtleT1zZWxmLmR5bmFtaWNfYXJyX3N0cnVjdC5rZXkpCiAgICBieXRlY18wIC8vICJkeW5hbWljX2Fycl9zdHJ1Y3QiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNDEKICAgIC8vIGJveC52YWx1ZS5hcnIubGVuZ3RoID0gYXJjNC5VSW50MTYoYXJyX2xlbikKICAgIHB1c2hpbnQgMjAgLy8gMjAKICAgIHVuY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI0MgogICAgLy8gYm94LnZhbHVlLmFycjJfb2Zmc2V0ID0gYXJjNC5VSW50MTYoYXJyMl9vZmZzZXQpCiAgICBpdG9iCiAgICBkdXAKICAgIGJpdGxlbgogICAgcHVzaGludCAxNiAvLyAxNgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgZXh0cmFjdCA2IDIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjIzOC0yMzkKICAgIC8vICMgcmVzaXplIGFycmF5CiAgICAvLyBib3ggPSBCb3goRml4ZWRBcnJheUluQVN0cnVjdCwga2V5PXNlbGYuZHluYW1pY19hcnJfc3RydWN0LmtleSkKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI0MgogICAgLy8gYm94LnZhbHVlLmFycjJfb2Zmc2V0ID0gYXJjNC5VSW50MTYoYXJyMl9vZmZzZXQpCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICB1bmNvdmVyIDIKICAgIGJveF9yZXBsYWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNDQKICAgIC8vIGJveC5yZWYuc3BsaWNlKGluZGV4LCB0aW1lcyAqIHNpemVfb2YoVUludDY0KSwgYiIiKQogICAgdW5jb3ZlciAyCiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjM4LTIzOQogICAgLy8gIyByZXNpemUgYXJyYXkKICAgIC8vIGJveCA9IEJveChGaXhlZEFycmF5SW5BU3RydWN0LCBrZXk9c2VsZi5keW5hbWljX2Fycl9zdHJ1Y3Qua2V5KQogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjQ0CiAgICAvLyBib3gucmVmLnNwbGljZShpbmRleCwgdGltZXMgKiBzaXplX29mKFVJbnQ2NCksIGIiIikKICAgIGRpZyAyCiAgICB1bmNvdmVyIDIKICAgIHB1c2hieXRlcyAweAogICAgYm94X3NwbGljZQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NTAwCiAgICAvLyBkeW5fYXJyMl9pbmRleCA9IHNpemVfb2YoYXJjNC5VSW50MTYpICsgYXJyMl9pbmRleCAqIHNpemVfb2YoVUludDY0KQogICAgc3dhcAogICAgaW50Y18yIC8vIDgKICAgICoKICAgIGludGNfMCAvLyAyCiAgICArCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo1MDEKICAgIC8vIHJldHVybiBoZWFkX2FuZF9keW5fYXJyICsgZHluX2FycjJfaW5kZXgKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI0OQogICAgLy8gc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QucmVmLnJlc2l6ZShzaXplKQogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgc3dhcAogICAgYm94X3Jlc2l6ZQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjUxCiAgICAvLyByZXR1cm4gc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QudmFsdWUuYXJyLmxlbmd0aAogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgcHVzaGludCAyMCAvLyAyMAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyMzEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgaXRvYgogICAgYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0LnNldF9uZXN0ZWRfc3RydWN0W3JvdXRpbmddKCkgLT4gdm9pZDoKc2V0X25lc3RlZF9zdHJ1Y3Q6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNTMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNTYKICAgIC8vIGFzc2VydCBzdHJ1Y3QuYSwgInN0cnVjdC5hIGlzIHRydXRoeSIKICAgIGludGNfMyAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgYXNzZXJ0IC8vIHN0cnVjdC5hIGlzIHRydXRoeQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjU3CiAgICAvLyBzdHJ1Y3RfYnl0ZXMgPSBUeG4uYXBwbGljYXRpb25fYXJncygxKQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjU4CiAgICAvLyBzdHJ1Y3Rfc2l6ZSA9IHN0cnVjdF9ieXRlcy5sZW5ndGgKICAgIGR1cAogICAgbGVuCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNTkKICAgIC8vIHRhaWxfb2Zmc2V0ID0gVUludDY0KDQwOTYgKyAyKQogICAgaW50YyA1IC8vIDQwOTgKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI2MC0yNjEKICAgIC8vICMgaW5pdGlhbGl6ZSBib3ggdG8gemVybwogICAgLy8gYm94LmNyZWF0ZShzaXplPXRhaWxfb2Zmc2V0ICsgc3RydWN0X3NpemUpCiAgICArCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNTUKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjYwLTI2MQogICAgLy8gIyBpbml0aWFsaXplIGJveCB0byB6ZXJvCiAgICAvLyBib3guY3JlYXRlKHNpemU9dGFpbF9vZmZzZXQgKyBzdHJ1Y3Rfc2l6ZSkKICAgIHN3YXAKICAgIGJveF9jcmVhdGUKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjU1CiAgICAvLyBib3ggPSBCb3goTGFyZ2VOZXN0ZWRTdHJ1Y3QsIGtleT0iYm94IikKICAgIGJ5dGVjXzEgLy8gImJveCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI2Mi0yNjMKICAgIC8vICMgc2V0IGNvcnJlY3Qgb2Zmc2V0IGZvciBkeW5hbWljIHBvcnRpb24KICAgIC8vIGJveC5yZWYucmVwbGFjZSh0YWlsX29mZnNldCAtIDIsIGFyYzQuVUludDE2KHRhaWxfb2Zmc2V0KS5ieXRlcykKICAgIGludGMgNCAvLyA0MDk2CiAgICBwdXNoYnl0ZXMgMHgxMDAyCiAgICBib3hfcmVwbGFjZQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjU1CiAgICAvLyBib3ggPSBCb3goTGFyZ2VOZXN0ZWRTdHJ1Y3QsIGtleT0iYm94IikKICAgIGJ5dGVjXzEgLy8gImJveCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI1OQogICAgLy8gdGFpbF9vZmZzZXQgPSBVSW50NjQoNDA5NiArIDIpCiAgICBpbnRjIDUgLy8gNDA5OAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjY0LTI2NQogICAgLy8gIyBzZXQgZHluYW1pYyBkYXRhCiAgICAvLyBib3gucmVmLnJlcGxhY2UodGFpbF9vZmZzZXQsIHN0cnVjdF9ieXRlcykKICAgIHVuY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI1MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5uZXN0ZWRfd3JpdGVbcm91dGluZ10oKSAtPiB2b2lkOgpuZXN0ZWRfd3JpdGU6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNjcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBkdXAKICAgIGJ0b2kKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI2OQogICAgLy8gYm94ID0gQm94KExhcmdlTmVzdGVkU3RydWN0LCBrZXk9ImJveCIpCiAgICBieXRlY18xIC8vICJib3giCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzAKICAgIC8vIGJveC52YWx1ZS5uZXN0ZWQuYSA9IHZhbHVlCiAgICBpbnRjIDUgLy8gNDA5OAogICAgdW5jb3ZlciAzCiAgICBib3hfcmVwbGFjZQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjcxCiAgICAvLyBib3gudmFsdWUubmVzdGVkLmIgPSB2YWx1ZSArIDEKICAgIGR1cAogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGl0b2IKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI2OQogICAgLy8gYm94ID0gQm94KExhcmdlTmVzdGVkU3RydWN0LCBrZXk9ImJveCIpCiAgICBieXRlY18xIC8vICJib3giCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzEKICAgIC8vIGJveC52YWx1ZS5uZXN0ZWQuYiA9IHZhbHVlICsgMQogICAgcHVzaGludCA0MTEwIC8vIDQxMTAKICAgIHVuY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI3MgogICAgLy8gYm94LnZhbHVlLm5lc3RlZC5pbm5lci5hcnJfYXJyW2luZGV4XVtpbmRleF0gPSB2YWx1ZSArIDIKICAgIGR1cAogICAgaW50Y18wIC8vIDIKICAgICsKICAgIGl0b2IKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI2OQogICAgLy8gYm94ID0gQm94KExhcmdlTmVzdGVkU3RydWN0LCBrZXk9ImJveCIpCiAgICBieXRlY18xIC8vICJib3giCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzIKICAgIC8vIGJveC52YWx1ZS5uZXN0ZWQuaW5uZXIuYXJyX2FycltpbmRleF1baW5kZXhdID0gdmFsdWUgKyAyCiAgICBwdXNoaW50IDQxMzYgLy8gNDEzNgogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBkaWcgMwogICAgPgogICAgYXNzZXJ0IC8vIGluZGV4IG91dCBvZiBib3VuZHMKICAgIGludGNfMCAvLyAyCiAgICBkaWcgMwogICAgKgogICAgaW50YyA2IC8vIDQxMzgKICAgIGRpZyAxCiAgICArCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNjkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjcyCiAgICAvLyBib3gudmFsdWUubmVzdGVkLmlubmVyLmFycl9hcnJbaW5kZXhdW2luZGV4XSA9IHZhbHVlICsgMgogICAgc3dhcAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBpbnRjIDYgLy8gNDEzOAogICAgKwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjY5CiAgICAvLyBib3ggPSBCb3goTGFyZ2VOZXN0ZWRTdHJ1Y3QsIGtleT0iYm94IikKICAgIGJ5dGVjXzEgLy8gImJveCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI3MgogICAgLy8gYm94LnZhbHVlLm5lc3RlZC5pbm5lci5hcnJfYXJyW2luZGV4XVtpbmRleF0gPSB2YWx1ZSArIDIKICAgIGRpZyAxCiAgICBpbnRjXzAgLy8gMgogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIGRpZyA1CiAgICA+CiAgICBhc3NlcnQgLy8gaW5kZXggb3V0IG9mIGJvdW5kcwogICAgaW50Y18wIC8vIDIKICAgICsKICAgIGRpZyA0CiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgc3dhcAogICAgZGlnIDEKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI2OQogICAgLy8gYm94ID0gQm94KExhcmdlTmVzdGVkU3RydWN0LCBrZXk9ImJveCIpCiAgICBieXRlY18xIC8vICJib3giCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzIKICAgIC8vIGJveC52YWx1ZS5uZXN0ZWQuaW5uZXIuYXJyX2FycltpbmRleF1baW5kZXhdID0gdmFsdWUgKyAyCiAgICBzd2FwCiAgICB1bmNvdmVyIDQKICAgIGJveF9yZXBsYWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzMKICAgIC8vIGJveC52YWx1ZS5uZXN0ZWQuaW5uZXIuYyA9IHZhbHVlICsgMwogICAgZGlnIDIKICAgIHB1c2hpbnQgMyAvLyAzCiAgICArCiAgICBpdG9iCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNjkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjczCiAgICAvLyBib3gudmFsdWUubmVzdGVkLmlubmVyLmMgPSB2YWx1ZSArIDMKICAgIHB1c2hpbnQgNDExOCAvLyA0MTE4CiAgICB1bmNvdmVyIDIKICAgIGJveF9yZXBsYWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzQKICAgIC8vIGJveC52YWx1ZS5uZXN0ZWQuaW5uZXIuZCA9IHZhbHVlICsgNAogICAgZGlnIDIKICAgIHB1c2hpbnQgNCAvLyA0CiAgICArCiAgICBpdG9iCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNjkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjc0CiAgICAvLyBib3gudmFsdWUubmVzdGVkLmlubmVyLmQgPSB2YWx1ZSArIDQKICAgIHB1c2hpbnQgNDEyOCAvLyA0MTI4CiAgICB1bmNvdmVyIDIKICAgIGJveF9yZXBsYWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzUKICAgIC8vIGJveC52YWx1ZS5uZXN0ZWQud29haFtpbmRleF0uYXJyX2FycltpbmRleF1baW5kZXhdID0gdmFsdWUgKyA1CiAgICB1bmNvdmVyIDIKICAgIHB1c2hpbnQgNSAvLyA1CiAgICArCiAgICBpdG9iCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNjkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjc1CiAgICAvLyBib3gudmFsdWUubmVzdGVkLndvYWhbaW5kZXhdLmFycl9hcnJbaW5kZXhdW2luZGV4XSA9IHZhbHVlICsgNQogICAgcHVzaGludCA0MTA4IC8vIDQxMDgKICAgIGludGNfMCAvLyAyCiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgaW50YyA1IC8vIDQwOTgKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI2OQogICAgLy8gYm94ID0gQm94KExhcmdlTmVzdGVkU3RydWN0LCBrZXk9ImJveCIpCiAgICBieXRlY18xIC8vICJib3giCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzUKICAgIC8vIGJveC52YWx1ZS5uZXN0ZWQud29haFtpbmRleF0uYXJyX2FycltpbmRleF1baW5kZXhdID0gdmFsdWUgKyA1CiAgICBkaWcgMQogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBkaWcgNQogICAgPgogICAgYXNzZXJ0IC8vIGluZGV4IG91dCBvZiBib3VuZHMKICAgIGludGNfMCAvLyAyCiAgICArCiAgICBkdXAKICAgIGRpZyA0CiAgICArCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNjkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjc1CiAgICAvLyBib3gudmFsdWUubmVzdGVkLndvYWhbaW5kZXhdLmFycl9hcnJbaW5kZXhdW2luZGV4XSA9IHZhbHVlICsgNQogICAgc3dhcAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICArCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICArCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNjkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjc1CiAgICAvLyBib3gudmFsdWUubmVzdGVkLndvYWhbaW5kZXhdLmFycl9hcnJbaW5kZXhdW2luZGV4XSA9IHZhbHVlICsgNQogICAgZGlnIDEKICAgIGludGNfMCAvLyAyCiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgZGlnIDUKICAgID4KICAgIGFzc2VydCAvLyBpbmRleCBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzAgLy8gMgogICAgKwogICAgZHVwCiAgICB1bmNvdmVyIDQKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI2OQogICAgLy8gYm94ID0gQm94KExhcmdlTmVzdGVkU3RydWN0LCBrZXk9ImJveCIpCiAgICBieXRlY18xIC8vICJib3giCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzUKICAgIC8vIGJveC52YWx1ZS5uZXN0ZWQud29haFtpbmRleF0uYXJyX2FycltpbmRleF1baW5kZXhdID0gdmFsdWUgKyA1CiAgICBzd2FwCiAgICBpbnRjXzAgLy8gMgogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI2OQogICAgLy8gYm94ID0gQm94KExhcmdlTmVzdGVkU3RydWN0LCBrZXk9ImJveCIpCiAgICBieXRlY18xIC8vICJib3giCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzUKICAgIC8vIGJveC52YWx1ZS5uZXN0ZWQud29haFtpbmRleF0uYXJyX2FycltpbmRleF1baW5kZXhdID0gdmFsdWUgKyA1CiAgICBkaWcgMQogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICB1bmNvdmVyIDQKICAgID4KICAgIGFzc2VydCAvLyBpbmRleCBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzAgLy8gMgogICAgKwogICAgdW5jb3ZlciAyCiAgICArCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNjkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjc1CiAgICAvLyBib3gudmFsdWUubmVzdGVkLndvYWhbaW5kZXhdLmFycl9hcnJbaW5kZXhdW2luZGV4XSA9IHZhbHVlICsgNQogICAgc3dhcAogICAgdW5jb3ZlciAyCiAgICBib3hfcmVwbGFjZQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjY3CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0Lm5lc3RlZF9yZWFkW3JvdXRpbmddKCkgLT4gdm9pZDoKbmVzdGVkX3JlYWQ6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjgwCiAgICAvLyBhID0gYm94LnZhbHVlLm5lc3RlZC5hCiAgICBpbnRjIDUgLy8gNDA5OAogICAgaW50Y18yIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjgxCiAgICAvLyBiID0gYm94LnZhbHVlLm5lc3RlZC5iCiAgICBwdXNoaW50IDQxMTAgLy8gNDExMAogICAgaW50Y18yIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjgyCiAgICAvLyBhcnJfYXJyID0gYm94LnZhbHVlLm5lc3RlZC5pbm5lci5hcnJfYXJyW2kxXVtpMl0KICAgIHB1c2hpbnQgNDEzNiAvLyA0MTM2CiAgICBpbnRjXzAgLy8gMgogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIGRpZyA1CiAgICA+CiAgICBhc3NlcnQgLy8gaW5kZXggb3V0IG9mIGJvdW5kcwogICAgaW50Y18wIC8vIDIKICAgIGRpZyA1CiAgICAqCiAgICBpbnRjIDYgLy8gNDEzOAogICAgZGlnIDEKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI3OQogICAgLy8gYm94ID0gQm94KExhcmdlTmVzdGVkU3RydWN0LCBrZXk9ImJveCIpCiAgICBieXRlY18xIC8vICJib3giCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyODIKICAgIC8vIGFycl9hcnIgPSBib3gudmFsdWUubmVzdGVkLmlubmVyLmFycl9hcnJbaTFdW2kyXQogICAgc3dhcAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBpbnRjIDYgLy8gNDEzOAogICAgKwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjc5CiAgICAvLyBib3ggPSBCb3goTGFyZ2VOZXN0ZWRTdHJ1Y3QsIGtleT0iYm94IikKICAgIGJ5dGVjXzEgLy8gImJveCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI4MgogICAgLy8gYXJyX2FyciA9IGJveC52YWx1ZS5uZXN0ZWQuaW5uZXIuYXJyX2FycltpMV1baTJdCiAgICBkaWcgMQogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBkaWcgNgogICAgPgogICAgYXNzZXJ0IC8vIGluZGV4IG91dCBvZiBib3VuZHMKICAgIGludGNfMCAvLyAyCiAgICArCiAgICBkaWcgNQogICAgaW50Y18yIC8vIDgKICAgICoKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI3OQogICAgLy8gYm94ID0gQm94KExhcmdlTmVzdGVkU3RydWN0LCBrZXk9ImJveCIpCiAgICBieXRlY18xIC8vICJib3giCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyODIKICAgIC8vIGFycl9hcnIgPSBib3gudmFsdWUubmVzdGVkLmlubmVyLmFycl9hcnJbaTFdW2kyXQogICAgc3dhcAogICAgaW50Y18yIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MjgzCiAgICAvLyBjID0gYm94LnZhbHVlLm5lc3RlZC5pbm5lci5jCiAgICBwdXNoaW50IDQxMTggLy8gNDExOAogICAgaW50Y18yIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjg0CiAgICAvLyBkID0gYm94LnZhbHVlLm5lc3RlZC5pbm5lci5kCiAgICBwdXNoaW50IDQxMjggLy8gNDEyOAogICAgaW50Y18yIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjg1CiAgICAvLyB3b2FoX2Fycl9hcnIgPSBib3gudmFsdWUubmVzdGVkLndvYWhbaTFdLmFycl9hcnJbaTJdW2kzXQogICAgcHVzaGludCA0MTA4IC8vIDQxMDgKICAgIGludGNfMCAvLyAyCiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgaW50YyA1IC8vIDQwOTgKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI3OQogICAgLy8gYm94ID0gQm94KExhcmdlTmVzdGVkU3RydWN0LCBrZXk9ImJveCIpCiAgICBieXRlY18xIC8vICJib3giCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyODUKICAgIC8vIHdvYWhfYXJyX2FyciA9IGJveC52YWx1ZS5uZXN0ZWQud29haFtpMV0uYXJyX2FycltpMl1baTNdCiAgICBkaWcgMQogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICB1bmNvdmVyIDEwCiAgICA+CiAgICBhc3NlcnQgLy8gaW5kZXggb3V0IG9mIGJvdW5kcwogICAgaW50Y18wIC8vIDIKICAgICsKICAgIGR1cAogICAgdW5jb3ZlciA1CiAgICArCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjg1CiAgICAvLyB3b2FoX2Fycl9hcnIgPSBib3gudmFsdWUubmVzdGVkLndvYWhbaTFdLmFycl9hcnJbaTJdW2kzXQogICAgc3dhcAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICArCiAgICBwdXNoaW50IDE4IC8vIDE4CiAgICArCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjg1CiAgICAvLyB3b2FoX2Fycl9hcnIgPSBib3gudmFsdWUubmVzdGVkLndvYWhbaTFdLmFycl9hcnJbaTJdW2kzXQogICAgZGlnIDEKICAgIGludGNfMCAvLyAyCiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgZGlnIDgKICAgID4KICAgIGFzc2VydCAvLyBpbmRleCBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzAgLy8gMgogICAgKwogICAgaW50Y18wIC8vIDIKICAgIHVuY292ZXIgOAogICAgKgogICAgZGlnIDEKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI3OQogICAgLy8gYm94ID0gQm94KExhcmdlTmVzdGVkU3RydWN0LCBrZXk9ImJveCIpCiAgICBieXRlY18xIC8vICJib3giCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyODUKICAgIC8vIHdvYWhfYXJyX2FyciA9IGJveC52YWx1ZS5uZXN0ZWQud29haFtpMV0uYXJyX2FycltpMl1baTNdCiAgICBzd2FwCiAgICBpbnRjXzAgLy8gMgogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI3OQogICAgLy8gYm94ID0gQm94KExhcmdlTmVzdGVkU3RydWN0LCBrZXk9ImJveCIpCiAgICBieXRlY18xIC8vICJib3giCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyODUKICAgIC8vIHdvYWhfYXJyX2FyciA9IGJveC52YWx1ZS5uZXN0ZWQud29haFtpMV0uYXJyX2FycltpMl1baTNdCiAgICBkaWcgMQogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBkaWcgNwogICAgPgogICAgYXNzZXJ0IC8vIGluZGV4IG91dCBvZiBib3VuZHMKICAgIGludGNfMCAvLyAyCiAgICArCiAgICB1bmNvdmVyIDYKICAgIGludGNfMiAvLyA4CiAgICAqCiAgICArCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyNzkKICAgIC8vIGJveCA9IEJveChMYXJnZU5lc3RlZFN0cnVjdCwga2V5PSJib3giKQogICAgYnl0ZWNfMSAvLyAiYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjg1CiAgICAvLyB3b2FoX2Fycl9hcnIgPSBib3gudmFsdWUubmVzdGVkLndvYWhbaTFdLmFycl9hcnJbaTJdW2kzXQogICAgc3dhcAogICAgaW50Y18yIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyODcKICAgIC8vIHJldHVybiBhICsgYiArIGFycl9hcnIgKyBjICsgZCArIHdvYWhfYXJyX2FycgogICAgdW5jb3ZlciA1CiAgICB1bmNvdmVyIDUKICAgICsKICAgIHVuY292ZXIgNAogICAgKwogICAgdW5jb3ZlciAzCiAgICArCiAgICB1bmNvdmVyIDIKICAgICsKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI3NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGl0b2IKICAgIGJ5dGVjIDQgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5zdW1fZHluYW1pY19hcnJfc3RydWN0W3JvdXRpbmddKCkgLT4gdm9pZDoKc3VtX2R5bmFtaWNfYXJyX3N0cnVjdDoKICAgIHB1c2hieXRlcyAiIgogICAgZHVwCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyOTEKICAgIC8vIGFzc2VydCBzZWxmLmR5bmFtaWNfYXJyX3N0cnVjdC52YWx1ZS5hID09IDEsICJleHBlY3RlZCAxIgogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgaW50Y18zIC8vIDAKICAgIGludGNfMiAvLyA4CiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgZHVwCiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGFzc2VydCAvLyBleHBlY3RlZCAxCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyOTIKICAgIC8vIGFzc2VydCBzZWxmLmR5bmFtaWNfYXJyX3N0cnVjdC52YWx1ZS5iID09IDIsICJleHBlY3RlZCAyIgogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgcHVzaGludCAxMCAvLyAxMAogICAgaW50Y18yIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBkdXAKICAgIGludGNfMCAvLyAyCiAgICA9PQogICAgYXNzZXJ0IC8vIGV4cGVjdGVkIDIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI5MwogICAgLy8gdG90YWwgPSBzZWxmLmR5bmFtaWNfYXJyX3N0cnVjdC52YWx1ZS5hICsgc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QudmFsdWUuYgogICAgKwogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjk0CiAgICAvLyBmb3IgdmFsIGluIHNlbGYuZHluYW1pY19hcnJfc3RydWN0LnZhbHVlLmFycjoKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIHB1c2hpbnQgMjAgLy8gMjAKICAgIGludGNfMCAvLyAyCiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgaW50Y18zIC8vIDAKCnN1bV9keW5hbWljX2Fycl9zdHJ1Y3RfZm9yX2hlYWRlckAyOgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjk0CiAgICAvLyBmb3IgdmFsIGluIHNlbGYuZHluYW1pY19hcnJfc3RydWN0LnZhbHVlLmFycjoKICAgIGR1cAogICAgZGlnIDIKICAgIDwKICAgIGJ6IHN1bV9keW5hbWljX2Fycl9zdHJ1Y3RfYWZ0ZXJfZm9yQDUKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIHB1c2hpbnQgMjAgLy8gMjAKICAgIGludGNfMCAvLyAyCiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgZGlnIDEKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICA8CiAgICBhc3NlcnQgLy8gaW5kZXggb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgcHVzaGludCAyMiAvLyAyMgogICAgKwogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgc3dhcAogICAgaW50Y18yIC8vIDgKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyOTUKICAgIC8vIHRvdGFsICs9IHZhbAogICAgZGlnIDQKICAgICsKICAgIGJ1cnkgNAogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ1cnkgMQogICAgYiBzdW1fZHluYW1pY19hcnJfc3RydWN0X2Zvcl9oZWFkZXJAMgoKc3VtX2R5bmFtaWNfYXJyX3N0cnVjdF9hZnRlcl9mb3JANToKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjI5NgogICAgLy8gZm9yIHZhbCBpbiBzZWxmLmR5bmFtaWNfYXJyX3N0cnVjdC52YWx1ZS5hcnIyOgogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgcHVzaGludCAxOCAvLyAxOAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBieXRlY18wIC8vICJkeW5hbWljX2Fycl9zdHJ1Y3QiCiAgICBzd2FwCiAgICBpbnRjXzAgLy8gMgogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIGJ1cnkgNQogICAgaW50Y18zIC8vIDAKICAgIGJ1cnkgNAoKc3VtX2R5bmFtaWNfYXJyX3N0cnVjdF9mb3JfaGVhZGVyQDY6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyOTYKICAgIC8vIGZvciB2YWwgaW4gc2VsZi5keW5hbWljX2Fycl9zdHJ1Y3QudmFsdWUuYXJyMjoKICAgIGRpZyAzCiAgICBkaWcgNQogICAgPAogICAgYnogc3VtX2R5bmFtaWNfYXJyX3N0cnVjdF9hZnRlcl9mb3JAOQogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgcHVzaGludCAxOCAvLyAxOAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBpbnRjXzAgLy8gMgogICAgKwogICAgZGlnIDQKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50Y18yIC8vIDgKICAgICoKICAgICsKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIHN3YXAKICAgIGludGNfMiAvLyA4CiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mjk3CiAgICAvLyB0b3RhbCArPSB2YWwKICAgIGRpZyA0CiAgICArCiAgICBidXJ5IDQKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBidXJ5IDQKICAgIGIgc3VtX2R5bmFtaWNfYXJyX3N0cnVjdF9mb3JfaGVhZGVyQDYKCnN1bV9keW5hbWljX2Fycl9zdHJ1Y3RfYWZ0ZXJfZm9yQDk6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weToyODkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgZGlnIDIKICAgIGl0b2IKICAgIGJ5dGVjIDQgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5zZXRfYm9vbFtyb3V0aW5nXSgpIC0+IHZvaWQ6CnNldF9ib29sOgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzA0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGludGNfMyAvLyAwCiAgICBnZXRiaXQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjMwNgogICAgLy8gc2VsZi50b29fbWFueV9ib29scy52YWx1ZVtpbmRleF0gPSB2YWx1ZQogICAgZGlnIDEKICAgIGludGNfMiAvLyA4CiAgICAvCiAgICB1bmNvdmVyIDIKICAgIGludGNfMiAvLyA4CiAgICAlCiAgICBieXRlYyAxMCAvLyAidG9vX21hbnlfYm9vbHMiCiAgICBkaWcgMgogICAgaW50Y18xIC8vIDEKICAgIGJveF9leHRyYWN0CiAgICBkaWcgMQogICAgaW50Y18yIC8vIDgKICAgIDwKICAgIGFzc2VydCAvLyBpbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgc3dhcAogICAgdW5jb3ZlciAzCiAgICBzZXRiaXQKICAgIGJ5dGVjIDEwIC8vICJ0b29fbWFueV9ib29scyIKICAgIGNvdmVyIDIKICAgIGJveF9yZXBsYWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozMDQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0LnN1bV9ib29sc1tyb3V0aW5nXSgpIC0+IHZvaWQ6CnN1bV9ib29sczoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjMwOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjMxMAogICAgLy8gdG90YWwgPSBVSW50NjQoKQogICAgaW50Y18zIC8vIDAKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjMxMQogICAgLy8gZm9yIHZhbHVlIGluIHNlbGYudG9vX21hbnlfYm9vbHMudmFsdWU6CiAgICBieXRlYyAxMCAvLyAidG9vX21hbnlfYm9vbHMiCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvb19tYW55X2Jvb2xzIGV4aXN0cwogICAgaW50Y18zIC8vIDAKCnN1bV9ib29sc19mb3JfaGVhZGVyQDI6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozMTEKICAgIC8vIGZvciB2YWx1ZSBpbiBzZWxmLnRvb19tYW55X2Jvb2xzLnZhbHVlOgogICAgZHVwCiAgICBwdXNoaW50IDMzMDAwIC8vIDMzMDAwCiAgICA8CiAgICBieiBzdW1fYm9vbHNfYWZ0ZXJfZm9yQDkKICAgIGR1cG4gMgogICAgaW50Y18yIC8vIDgKICAgIC8KICAgIHN3YXAKICAgIGludGNfMiAvLyA4CiAgICAlCiAgICBieXRlYyAxMCAvLyAidG9vX21hbnlfYm9vbHMiCiAgICB1bmNvdmVyIDIKICAgIGludGNfMSAvLyAxCiAgICBib3hfZXh0cmFjdAogICAgc3dhcAogICAgZ2V0Yml0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozMTIKICAgIC8vIGlmIHZhbHVlOgogICAgYnogc3VtX2Jvb2xzX2FmdGVyX2lmX2Vsc2VANQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzEzCiAgICAvLyB0b3RhbCArPSAxCiAgICBkaWcgMQogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ1cnkgMgoKc3VtX2Jvb2xzX2FmdGVyX2lmX2Vsc2VANToKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjMxNAogICAgLy8gaWYgdG90YWwgPT0gc3RvcF9hdF90b3RhbDoKICAgIGRpZyAxCiAgICBkaWcgMwogICAgPT0KICAgIGJueiBzdW1fYm9vbHNfYWZ0ZXJfZm9yQDkKICAgIGR1cAogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ1cnkgMQogICAgYiBzdW1fYm9vbHNfZm9yX2hlYWRlckAyCgpzdW1fYm9vbHNfYWZ0ZXJfZm9yQDk6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozMDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBkaWcgMQogICAgaXRvYgogICAgYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0LmNyZWF0ZV9keW5hbWljX2JveFtyb3V0aW5nXSgpIC0+IHZvaWQ6CmNyZWF0ZV9keW5hbWljX2JveDoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjMyMAogICAgLy8gc2VsZi5keW5hbWljX2JveC52YWx1ZSA9IEFycmF5W1VJbnQ2NF0oKQogICAgYnl0ZWNfMiAvLyAiZHluYW1pY19ib3giCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGJ5dGVjXzIgLy8gImR5bmFtaWNfYm94IgogICAgcHVzaGJ5dGVzIDB4MDAwMAogICAgYm94X3B1dAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzE4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5hcHBlbmRfZHluYW1pY19ib3hbcm91dGluZ10oKSAtPiB2b2lkOgphcHBlbmRfZHluYW1pY19ib3g6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozMjYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgZHVwCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozMzAKICAgIC8vIGJveCA9IEJveChGaXhlZEFycmF5VUludDY0LCBrZXk9c2VsZi5keW5hbWljX2JveC5rZXkpCiAgICBieXRlY18yIC8vICJkeW5hbWljX2JveCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjMzMQogICAgLy8gYXJyX2xlbiA9IGJveC52YWx1ZS5sZW5ndGgubmF0aXZlCiAgICBpbnRjXzMgLy8gMAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzMzCiAgICAvLyBzZWxmLmR5bmFtaWNfYm94LnJlZi5yZXNpemUoMiArIChhcnJfbGVuICsgdGltZXMpICogOCkKICAgICsKICAgIGludGNfMiAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gMgogICAgKwogICAgYnl0ZWNfMiAvLyAiZHluYW1pY19ib3giCiAgICBzd2FwCiAgICBib3hfcmVzaXplCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozMzQKICAgIC8vIGZvciBpIGluIHVyYW5nZSh0aW1lcyk6CiAgICBpbnRjXzMgLy8gMAoKYXBwZW5kX2R5bmFtaWNfYm94X2Zvcl9oZWFkZXJAMjoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjMzNAogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHRpbWVzKToKICAgIGR1cAogICAgZGlnIDMKICAgIDwKICAgIGJ6IGFwcGVuZF9keW5hbWljX2JveF9hZnRlcl9mb3JANQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzM1CiAgICAvLyBib3gudmFsdWUuYXJyW2Fycl9sZW5dID0gaQogICAgZHVwbiAyCiAgICBpdG9iCiAgICBkaWcgMwogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDIKICAgICsKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjMzMAogICAgLy8gYm94ID0gQm94KEZpeGVkQXJyYXlVSW50NjQsIGtleT1zZWxmLmR5bmFtaWNfYm94LmtleSkKICAgIGJ5dGVjXzIgLy8gImR5bmFtaWNfYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzM1CiAgICAvLyBib3gudmFsdWUuYXJyW2Fycl9sZW5dID0gaQogICAgc3dhcAogICAgdW5jb3ZlciAyCiAgICBib3hfcmVwbGFjZQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzM2CiAgICAvLyBhcnJfbGVuICs9IDEKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBidXJ5IDMKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjMzNAogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHRpbWVzKToKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBidXJ5IDEKICAgIGIgYXBwZW5kX2R5bmFtaWNfYm94X2Zvcl9oZWFkZXJAMgoKYXBwZW5kX2R5bmFtaWNfYm94X2FmdGVyX2ZvckA1OgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzM4CiAgICAvLyBib3gudmFsdWUubGVuZ3RoID0gYXJjNC5VSW50MTYoYXJyX2xlbikKICAgIGRpZyAxCiAgICBpdG9iCiAgICBkdXAKICAgIGJpdGxlbgogICAgcHVzaGludCAxNiAvLyAxNgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgZXh0cmFjdCA2IDIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjMzMAogICAgLy8gYm94ID0gQm94KEZpeGVkQXJyYXlVSW50NjQsIGtleT1zZWxmLmR5bmFtaWNfYm94LmtleSkKICAgIGJ5dGVjXzIgLy8gImR5bmFtaWNfYm94IgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzM4CiAgICAvLyBib3gudmFsdWUubGVuZ3RoID0gYXJjNC5VSW50MTYoYXJyX2xlbikKICAgIGludGNfMyAvLyAwCiAgICB1bmNvdmVyIDIKICAgIGJveF9yZXBsYWNlCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozMzkKICAgIC8vIHJldHVybiBzZWxmLmR5bmFtaWNfYm94LnZhbHVlLmxlbmd0aAogICAgYnl0ZWNfMiAvLyAiZHluYW1pY19ib3giCiAgICBpbnRjXzMgLy8gMAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozMjYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgaXRvYgogICAgYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0LnBvcF9keW5hbWljX2JveFtyb3V0aW5nXSgpIC0+IHZvaWQ6CnBvcF9keW5hbWljX2JveDoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM0MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNDUKICAgIC8vIGJveCA9IEJveChGaXhlZEFycmF5VUludDY0LCBrZXk9c2VsZi5keW5hbWljX2JveC5rZXkpCiAgICBieXRlY18yIC8vICJkeW5hbWljX2JveCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM0NgogICAgLy8gYXJyX2xlbiA9IGJveC52YWx1ZS5sZW5ndGgubmF0aXZlIC0gdGltZXMKICAgIGludGNfMyAvLyAwCiAgICBpbnRjXzAgLy8gMgogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIHN3YXAKICAgIC0KICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM0NwogICAgLy8gYm94LnZhbHVlLmxlbmd0aCA9IGFyYzQuVUludDE2KGFycl9sZW4pCiAgICBkdXAKICAgIGl0b2IKICAgIGR1cAogICAgYml0bGVuCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBleHRyYWN0IDYgMgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzQ1CiAgICAvLyBib3ggPSBCb3goRml4ZWRBcnJheVVJbnQ2NCwga2V5PXNlbGYuZHluYW1pY19ib3gua2V5KQogICAgYnl0ZWNfMiAvLyAiZHluYW1pY19ib3giCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNDcKICAgIC8vIGJveC52YWx1ZS5sZW5ndGggPSBhcmM0LlVJbnQxNihhcnJfbGVuKQogICAgaW50Y18zIC8vIDAKICAgIHVuY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM0OAogICAgLy8gc2VsZi5keW5hbWljX2JveC5yZWYucmVzaXplKDIgKyBhcnJfbGVuICogOCkKICAgIGludGNfMiAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gMgogICAgKwogICAgYnl0ZWNfMiAvLyAiZHluYW1pY19ib3giCiAgICBzd2FwCiAgICBib3hfcmVzaXplCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNTAKICAgIC8vIHJldHVybiBzZWxmLmR5bmFtaWNfYm94LnZhbHVlLmxlbmd0aAogICAgYnl0ZWNfMiAvLyAiZHluYW1pY19ib3giCiAgICBpbnRjXzMgLy8gMAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNDEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgaXRvYgogICAgYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0LnN1bV9keW5hbWljX2JveFtyb3V0aW5nXSgpIC0+IHZvaWQ6CnN1bV9keW5hbWljX2JveDoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM1NAogICAgLy8gdG90YWwgPSBVSW50NjQoKQogICAgaW50Y18zIC8vIDAKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM1NQogICAgLy8gZm9yIHZhbCBpbiBzZWxmLmR5bmFtaWNfYm94LnZhbHVlOgogICAgYnl0ZWNfMiAvLyAiZHluYW1pY19ib3giCiAgICBpbnRjXzMgLy8gMAogICAgaW50Y18wIC8vIDIKICAgIGJveF9leHRyYWN0CiAgICBidG9pCiAgICBpbnRjXzMgLy8gMAoKc3VtX2R5bmFtaWNfYm94X2Zvcl9oZWFkZXJAMjoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM1NQogICAgLy8gZm9yIHZhbCBpbiBzZWxmLmR5bmFtaWNfYm94LnZhbHVlOgogICAgZHVwCiAgICBkaWcgMgogICAgPAogICAgYnogc3VtX2R5bmFtaWNfYm94X2FmdGVyX2ZvckA1CiAgICBkdXBuIDIKICAgIGludGNfMiAvLyA4CiAgICAqCiAgICBpbnRjXzAgLy8gMgogICAgKwogICAgYnl0ZWNfMiAvLyAiZHluYW1pY19ib3giCiAgICBzd2FwCiAgICBpbnRjXzIgLy8gOAogICAgYm94X2V4dHJhY3QKICAgIGJ0b2kKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM1NgogICAgLy8gdG90YWwgKz0gdmFsCiAgICBkaWcgNAogICAgKwogICAgYnVyeSA0CiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgYnVyeSAxCiAgICBiIHN1bV9keW5hbWljX2JveF9mb3JfaGVhZGVyQDIKCnN1bV9keW5hbWljX2JveF9hZnRlcl9mb3JANToKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM1MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBkaWcgMgogICAgaXRvYgogICAgYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0LndyaXRlX2R5bmFtaWNfYm94W3JvdXRpbmddKCkgLT4gdm9pZDoKd3JpdGVfZHluYW1pY19ib3g6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzYxCiAgICAvLyBzZWxmLmR5bmFtaWNfYm94LnZhbHVlW2luZGV4XSA9IHZhbHVlCiAgICBzd2FwCiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgaW50Y18wIC8vIDIKICAgICsKICAgIGJ5dGVjXzIgLy8gImR5bmFtaWNfYm94IgogICAgc3dhcAogICAgdW5jb3ZlciAyCiAgICBib3hfcmVwbGFjZQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzU5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC53cml0ZV9keW5hbWljX2Fycl9zdHJ1Y3Rbcm91dGluZ10oKSAtPiB2b2lkOgp3cml0ZV9keW5hbWljX2Fycl9zdHJ1Y3Q6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNjMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzY1CiAgICAvLyBzZWxmLmR5bmFtaWNfYXJyX3N0cnVjdC52YWx1ZS5hcnJbaW5kZXhdID0gdmFsdWUKICAgIGJ5dGVjXzAgLy8gImR5bmFtaWNfYXJyX3N0cnVjdCIKICAgIHB1c2hpbnQgMjAgLy8gMjAKICAgIGludGNfMCAvLyAyCiAgICBib3hfZXh0cmFjdAogICAgYnRvaQogICAgZGlnIDIKICAgID4KICAgIGFzc2VydCAvLyBpbmRleCBvdXQgb2YgYm91bmRzCiAgICBzd2FwCiAgICBpbnRjXzIgLy8gOAogICAgKgogICAgcHVzaGludCAyMiAvLyAyMgogICAgKwogICAgYnl0ZWNfMCAvLyAiZHluYW1pY19hcnJfc3RydWN0IgogICAgc3dhcAogICAgdW5jb3ZlciAyCiAgICBib3hfcmVwbGFjZQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzYzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5zbGljZV9ib3hbcm91dGluZ10oKSAtPiB2b2lkOgpzbGljZV9ib3g6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNjkKICAgIC8vIGJveF8wID0gQm94KEJ5dGVzLCBrZXk9U3RyaW5nKCIwIikpCiAgICBieXRlYyAxMiAvLyAiMCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM3MAogICAgLy8gYm94XzAudmFsdWUgPSBCeXRlcyhiIlRlc3RpbmcgdGVzdGluZyAxMjMiKQogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNjkKICAgIC8vIGJveF8wID0gQm94KEJ5dGVzLCBrZXk9U3RyaW5nKCIwIikpCiAgICBieXRlYyAxMiAvLyAiMCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM3MAogICAgLy8gYm94XzAudmFsdWUgPSBCeXRlcyhiIlRlc3RpbmcgdGVzdGluZyAxMjMiKQogICAgcHVzaGJ5dGVzIDB4NTQ2NTczNzQ2OTZlNjcyMDc0NjU3Mzc0Njk2ZTY3MjAzMTMyMzMKICAgIGJveF9wdXQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM2OQogICAgLy8gYm94XzAgPSBCb3goQnl0ZXMsIGtleT1TdHJpbmcoIjAiKSkKICAgIGJ5dGVjIDEyIC8vICIwIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzcxCiAgICAvLyBhc3NlcnQgYm94XzAudmFsdWVbMDo3XSA9PSBiIlRlc3RpbmciCiAgICBib3hfbGVuCiAgICBwb3AKICAgIGR1cAogICAgaW50Y18zIC8vIDAKICAgIGRpZyAyCiAgICBzZWxlY3QKICAgIHB1c2hpbnQgNyAvLyA3CiAgICBkaWcgMgogICAgPAogICAgdW5jb3ZlciAyCiAgICBwdXNoaW50IDcgLy8gNwogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGRpZyAxCiAgICAtCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNjkKICAgIC8vIGJveF8wID0gQm94KEJ5dGVzLCBrZXk9U3RyaW5nKCIwIikpCiAgICBieXRlYyAxMiAvLyAiMCIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM3MQogICAgLy8gYXNzZXJ0IGJveF8wLnZhbHVlWzA6N10gPT0gYiJUZXN0aW5nIgogICAgY292ZXIgMgogICAgYm94X2V4dHJhY3QKICAgIHB1c2hieXRlcyAweDU0NjU3Mzc0Njk2ZTY3CiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNzMKICAgIC8vIHNlbGYuYm94X2MudmFsdWUgPSBhcmM0LlN0cmluZygiSGVsbG8iKQogICAgYnl0ZWNfMyAvLyAweDQyNGY1ODVmNDMKICAgIGJveF9kZWwKICAgIHBvcAogICAgYnl0ZWNfMyAvLyAweDQyNGY1ODVmNDMKICAgIHB1c2hieXRlcyAweDAwMDU0ODY1NmM2YzZmCiAgICBib3hfcHV0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozNzQKICAgIC8vIGFzc2VydCBzZWxmLmJveF9jLnZhbHVlLmJ5dGVzWzI6MTBdID09IGIiSGVsbG8iCiAgICBieXRlY18zIC8vIDB4NDI0ZjU4NWY0MwogICAgYm94X2xlbgogICAgcG9wCiAgICBpbnRjXzAgLy8gMgogICAgZGlnIDEKICAgIDwKICAgIGRpZyAxCiAgICBpbnRjXzAgLy8gMgogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIGRpZyAyCiAgICA8CiAgICB1bmNvdmVyIDIKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBkaWcgMQogICAgLQogICAgYnl0ZWNfMyAvLyAweDQyNGY1ODVmNDMKICAgIGNvdmVyIDIKICAgIGJveF9leHRyYWN0CiAgICBwdXNoYnl0ZXMgMHg0ODY1NmM2YzZmCiAgICA9PQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzY3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0LnRlc3RfYm94X3JlZltyb3V0aW5nXSgpIC0+IHZvaWQ6CnRlc3RfYm94X3JlZjoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM4OC0zODkKICAgIC8vICMgaW5pdCByZWYsIHdpdGggdmFsaWQga2V5IHR5cGVzCiAgICAvLyBib3hfcmVmID0gQm94UmVmKGtleT0iYmxvYiIpCiAgICBieXRlYyA1IC8vICJibG9iIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6MzkwCiAgICAvLyBhc3NlcnQgbm90IGJveF9yZWYsICJubyBkYXRhIgogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAhCiAgICBhc3NlcnQgLy8gbm8gZGF0YQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mzk1CiAgICAvLyBib3hfcmVmID0gQm94UmVmKGtleT1TdHJpbmcoImJsb2IiKSkKICAgIGJ5dGVjIDUgLy8gImJsb2IiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozOTgtMzk5CiAgICAvLyAjIGNyZWF0ZQogICAgLy8gYXNzZXJ0IGJveF9yZWYuY3JlYXRlKHNpemU9MzIpCiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICBib3hfY3JlYXRlCiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQwMi00MDMKICAgIC8vICMgbWFuaXB1bGF0ZSBkYXRhCiAgICAvLyBzZW5kZXJfYnl0ZXMgPSBUeG4uc2VuZGVyLmJ5dGVzCiAgICB0eG4gU2VuZGVyCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0MDQKICAgIC8vIGFwcF9hZGRyZXNzID0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcy5ieXRlcwogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM5NQogICAgLy8gYm94X3JlZiA9IEJveFJlZihrZXk9U3RyaW5nKCJibG9iIikpCiAgICBieXRlYyA1IC8vICJibG9iIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDA2CiAgICAvLyBib3hfcmVmLnJlcGxhY2UoMCwgc2VuZGVyX2J5dGVzKQogICAgaW50Y18zIC8vIDAKICAgIGRpZyAzCiAgICBib3hfcmVwbGFjZQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mzk1CiAgICAvLyBib3hfcmVmID0gQm94UmVmKGtleT1TdHJpbmcoImJsb2IiKSkKICAgIGJ5dGVjIDUgLy8gImJsb2IiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0MDcKICAgIC8vIGJveF9yZWYucmVzaXplKDgwMDApCiAgICBwdXNoaW50IDgwMDAgLy8gODAwMAogICAgYm94X3Jlc2l6ZQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mzk1CiAgICAvLyBib3hfcmVmID0gQm94UmVmKGtleT1TdHJpbmcoImJsb2IiKSkKICAgIGJ5dGVjIDUgLy8gImJsb2IiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0MDgKICAgIC8vIGJveF9yZWYuc3BsaWNlKDAsIDAsIGFwcF9hZGRyZXNzKQogICAgaW50Y18zIC8vIDAKICAgIGR1cAogICAgZGlnIDMKICAgIGJveF9zcGxpY2UKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM5NQogICAgLy8gYm94X3JlZiA9IEJveFJlZihrZXk9U3RyaW5nKCJibG9iIikpCiAgICBieXRlYyA1IC8vICJibG9iIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDA5CiAgICAvLyBib3hfcmVmLnJlcGxhY2UoNjQsIHZhbHVlXzMpCiAgICBwdXNoaW50IDY0IC8vIDY0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0MDUKICAgIC8vIHZhbHVlXzMgPSBCeXRlcyhiImhlbGxvIikKICAgIGJ5dGVjIDE0IC8vIDB4Njg2NTZjNmM2ZgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDA5CiAgICAvLyBib3hfcmVmLnJlcGxhY2UoNjQsIHZhbHVlXzMpCiAgICBib3hfcmVwbGFjZQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mzk1CiAgICAvLyBib3hfcmVmID0gQm94UmVmKGtleT1TdHJpbmcoImJsb2IiKSkKICAgIGJ5dGVjIDUgLy8gImJsb2IiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0MTAKICAgIC8vIHByZWZpeCA9IGJveF9yZWYuZXh0cmFjdCgwLCAzMiAqIDIgKyB2YWx1ZV8zLmxlbmd0aCkKICAgIGludGNfMyAvLyAwCiAgICBwdXNoaW50IDY5IC8vIDY5CiAgICBib3hfZXh0cmFjdAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDExCiAgICAvLyBhc3NlcnQgcHJlZml4ID09IGFwcF9hZGRyZXNzICsgc2VuZGVyX2J5dGVzICsgdmFsdWVfMwogICAgZGlnIDEKICAgIGRpZyAzCiAgICBjb25jYXQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQwNQogICAgLy8gdmFsdWVfMyA9IEJ5dGVzKGIiaGVsbG8iKQogICAgYnl0ZWMgMTQgLy8gMHg2ODY1NmM2YzZmCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0MTEKICAgIC8vIGFzc2VydCBwcmVmaXggPT0gYXBwX2FkZHJlc3MgKyBzZW5kZXJfYnl0ZXMgKyB2YWx1ZV8zCiAgICBjb25jYXQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM5NQogICAgLy8gYm94X3JlZiA9IEJveFJlZihrZXk9U3RyaW5nKCJibG9iIikpCiAgICBieXRlYyA1IC8vICJibG9iIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDEzLTQxNAogICAgLy8gIyBkZWxldGUKICAgIC8vIGFzc2VydCBib3hfcmVmLmRlbGV0ZSgpCiAgICBib3hfZGVsCiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjM5NQogICAgLy8gYm94X3JlZiA9IEJveFJlZihrZXk9U3RyaW5nKCJibG9iIikpCiAgICBieXRlYyA1IC8vICJibG9iIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDE3LTQxOAogICAgLy8gIyBxdWVyeQogICAgLy8gdmFsdWUsIGV4aXN0cyA9IGJveF9yZWYubWF5YmUoKQogICAgYm94X2dldAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDE5CiAgICAvLyBhc3NlcnQgbm90IGV4aXN0cwogICAgZHVwCiAgICAhCiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQyMAogICAgLy8gYXNzZXJ0IHZhbHVlID09IGIiIgogICAgZGlnIDEKICAgIHB1c2hieXRlcyAweAogICAgPT0KICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDIxCiAgICAvLyBhc3NlcnQgYm94X3JlZi5nZXQoZGVmYXVsdD1zZW5kZXJfYnl0ZXMpID09IHNlbmRlcl9ieXRlcwogICAgZGlnIDMKICAgIGNvdmVyIDIKICAgIHNlbGVjdAogICAgZGlnIDIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQyMy00MjQKICAgIC8vICMgdXBkYXRlCiAgICAvLyBib3hfcmVmLnB1dChzZW5kZXJfYnl0ZXMgKyBhcHBfYWRkcmVzcykKICAgIGNvbmNhdAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6Mzk1CiAgICAvLyBib3hfcmVmID0gQm94UmVmKGtleT1TdHJpbmcoImJsb2IiKSkKICAgIGJ5dGVjIDUgLy8gImJsb2IiCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0MjMtNDI0CiAgICAvLyAjIHVwZGF0ZQogICAgLy8gYm94X3JlZi5wdXQoc2VuZGVyX2J5dGVzICsgYXBwX2FkZHJlc3MpCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozOTUKICAgIC8vIGJveF9yZWYgPSBCb3hSZWYoa2V5PVN0cmluZygiYmxvYiIpKQogICAgYnl0ZWMgNSAvLyAiYmxvYiIKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQyNQogICAgLy8gYXNzZXJ0IGJveF9yZWYsICJCbG9iIGV4aXN0cyIKICAgIGJveF9sZW4KICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDI2CiAgICAvLyBhc3NlcnQgYm94X3JlZi5sZW5ndGggPT0gNjQKICAgIHB1c2hpbnQgNjQgLy8gNjQKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQyOS00MzAKICAgIC8vICMgaW5zdGFuY2UgYm94IHJlZgogICAgLy8gc2VsZi5ib3hfcmVmLmNyZWF0ZShzaXplPVVJbnQ2NCgzMikpCiAgICBieXRlYyAxNyAvLyAiYm94X3JlZiIKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIGJveF9jcmVhdGUKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDMyCiAgICAvLyBzZWxmLmJveF9yZWYuZGVsZXRlKCkKICAgIGJ5dGVjIDE3IC8vICJib3hfcmVmIgogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTozODYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0LmJveF9tYXBfdGVzdFtyb3V0aW5nXSgpIC0+IHZvaWQ6CmJveF9tYXBfdGVzdDoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQzNgogICAgLy8ga2V5XzAgPSBVSW50NjQoMCkKICAgIGludGNfMyAvLyAwCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0MzkKICAgIC8vIHNlbGYuYm94X21hcFtrZXlfMF0gPSB2YWx1ZQogICAgaXRvYgogICAgZHVwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGR1cAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDM4CiAgICAvLyB2YWx1ZSA9IFN0cmluZygiSG1tbW1tIikKICAgIHB1c2hieXRlcyAiSG1tbW1tIgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDM5CiAgICAvLyBzZWxmLmJveF9tYXBba2V5XzBdID0gdmFsdWUKICAgIGJveF9wdXQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQ0MgogICAgLy8gYXNzZXJ0IHNlbGYuYm94X21hcFtrZXlfMF0uYnl0ZXMubGVuZ3RoID09IHZhbHVlLmJ5dGVzLmxlbmd0aAogICAgYm94X2xlbgogICAgcG9wCiAgICBwdXNoaW50IDYgLy8gNgogICAgPT0KICAgIGFzc2VydAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDM3CiAgICAvLyBrZXlfMSA9IFVJbnQ2NCgxKQogICAgaW50Y18xIC8vIDEKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQ0NgogICAgLy8gYXNzZXJ0IHNlbGYuYm94X21hcC5nZXQoa2V5XzEsIGRlZmF1bHQ9U3RyaW5nKCJkZWZhdWx0IikpID09IFN0cmluZygiZGVmYXVsdCIpCiAgICBpdG9iCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGJ5dGVjIDE4IC8vICJkZWZhdWx0IgogICAgY292ZXIgMgogICAgc2VsZWN0CiAgICBieXRlYyAxOCAvLyAiZGVmYXVsdCIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQ0NwogICAgLy8gdmFsdWUsIGV4aXN0cyA9IHNlbGYuYm94X21hcC5tYXliZShrZXlfMSkKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0NDgKICAgIC8vIGFzc2VydCBub3QgZXhpc3RzCiAgICAhCiAgICBhc3NlcnQKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQ1NAogICAgLy8gdG1wX2JveF9tYXBba2V5XzFdID0gU3RyaW5nKCJoZWxsbyIpCiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgZHVwCiAgICBieXRlYyAxNCAvLyAiaGVsbG8iCiAgICBib3hfcHV0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0NTYKICAgIC8vIGRlbCB0bXBfYm94X21hcFtrZXlfMV0KICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDM0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5ib3hfbWFwX3NldFtyb3V0aW5nXSgpIC0+IHZvaWQ6CmJveF9tYXBfc2V0OgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDU4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0NjAKICAgIC8vIHNlbGYuYm94X21hcFtrZXldID0gdmFsdWUKICAgIHN3YXAKICAgIGl0b2IKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0NTgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIGV4YW1wbGVzLmJveF9zdG9yYWdlLmNvbnRyYWN0LkJveENvbnRyYWN0LmJveF9tYXBfZ2V0W3JvdXRpbmddKCkgLT4gdm9pZDoKYm94X21hcF9nZXQ6CiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0NjIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDY0CiAgICAvLyByZXR1cm4gc2VsZi5ib3hfbWFwW2tleV0KICAgIGl0b2IKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9tYXAgZW50cnkgZXhpc3RzCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0NjIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjIDQgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5ib3hfbWFwX2RlbFtyb3V0aW5nXSgpIC0+IHZvaWQ6CmJveF9tYXBfZGVsOgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6NDY2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQ2OAogICAgLy8gZGVsIHNlbGYuYm94X21hcFtrZXldCiAgICBpdG9iCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQ2NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gZXhhbXBsZXMuYm94X3N0b3JhZ2UuY29udHJhY3QuQm94Q29udHJhY3QuYm94X21hcF9leGlzdHNbcm91dGluZ10oKSAtPiB2b2lkOgpib3hfbWFwX2V4aXN0czoKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQ3MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBib3hfc3RvcmFnZS9jb250cmFjdC5weTo0NzIKICAgIC8vIHJldHVybiBrZXkgaW4gc2VsZi5ib3hfbWFwCiAgICBpdG9iCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIC8vIGJveF9zdG9yYWdlL2NvbnRyYWN0LnB5OjQ3MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBwdXNoYnl0ZXMgMHgwMAogICAgaW50Y18zIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlYyA0IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "BoxContract",
        "methods": [
            {
                "name": "set_boxes",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "string",
                        "name": "c"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_keys",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create_many_ints",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_many_ints",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "uint64",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "sum_many_ints",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "delete_boxes",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "indirect_extract_and_replace",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "read_boxes",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,byte[],string,uint64)"
                }
            },
            {
                "name": "boxes_exist",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(bool,bool,bool,bool)"
                }
            },
            {
                "name": "create_dynamic_arr_struct",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delete_dynamic_arr_struct",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "append_dynamic_arr_struct",
                "args": [
                    {
                        "type": "uint64",
                        "name": "times"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "pop_dynamic_arr_struct",
                "args": [
                    {
                        "type": "uint64",
                        "name": "times"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "set_nested_struct",
                "args": [
                    {
                        "type": "(uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64)",
                        "name": "struct"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "nested_write",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "uint64",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "nested_read",
                "args": [
                    {
                        "type": "uint64",
                        "name": "i1"
                    },
                    {
                        "type": "uint64",
                        "name": "i2"
                    },
                    {
                        "type": "uint64",
                        "name": "i3"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "sum_dynamic_arr_struct",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "create_bools",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_bool",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "bool",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "sum_bools",
                "args": [
                    {
                        "type": "uint64",
                        "name": "stop_at_total"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "create_dynamic_box",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delete_dynamic_box",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "append_dynamic_box",
                "args": [
                    {
                        "type": "uint64",
                        "name": "times"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "pop_dynamic_box",
                "args": [
                    {
                        "type": "uint64",
                        "name": "times"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "sum_dynamic_box",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "write_dynamic_box",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "uint64",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "write_dynamic_arr_struct",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "uint64",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "slice_box",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc4_box",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_box_ref",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_test",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_set",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    },
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_get",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "box_map_del",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_exists",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}