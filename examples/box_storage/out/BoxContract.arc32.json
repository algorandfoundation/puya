{
    "hints": {
        "set_boxes(uint64,byte[],string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_keys()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_boxes()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "read_boxes()(uint64,byte[],string)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "boxes_exist()(bool,bool,bool)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "slice_box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc4_box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_box_ref()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_test()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_set(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_get(uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_del(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_exists(uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gYm94X3N0b3JhZ2UvY29udHJhY3QucHk6OAogICAgLy8gY2xhc3MgQm94Q29udHJhY3QoYXJjNC5BUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "BoxContract",
        "methods": [
            {
                "name": "set_boxes",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "string",
                        "name": "c"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_keys",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delete_boxes",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "read_boxes",
                "args": [],
                "returns": {
                    "type": "(uint64,byte[],string)"
                }
            },
            {
                "name": "boxes_exist",
                "args": [],
                "returns": {
                    "type": "(bool,bool,bool)"
                }
            },
            {
                "name": "slice_box",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc4_box",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_box_ref",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_test",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_set",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    },
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_get",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "box_map_del",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_exists",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}