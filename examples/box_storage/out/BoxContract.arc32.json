{
    "hints": {
        "set_boxes(uint64,byte[],string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_keys()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_many_ints()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_many_ints(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sum_many_ints()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_boxes()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "indirect_extract_and_replace()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "read_boxes()(uint64,byte[],string,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "boxes_exist()(bool,bool,bool,bool)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_dynamic_arr_struct()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_dynamic_arr_struct()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "append_dynamic_arr_struct(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pop_dynamic_arr_struct(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "struct": {
                    "name": "NestedStruct",
                    "elements": [
                        [
                            "a",
                            "uint64"
                        ],
                        [
                            "inner",
                            "(uint64,uint64[][],uint64)"
                        ],
                        [
                            "woah",
                            "(uint64,uint64[][],uint64)[]"
                        ],
                        [
                            "b",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "nested_write(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "nested_read(uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sum_dynamic_arr_struct()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_bools()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_bool(uint64,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sum_bools(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_dynamic_box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_dynamic_box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "append_dynamic_box(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pop_dynamic_box(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sum_dynamic_box()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "write_dynamic_box(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "write_dynamic_arr_struct(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "slice_box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc4_box()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_box_ref()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_test()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_set(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_get(uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_del(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "box_map_exists(uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "BoxContract",
        "methods": [
            {
                "name": "set_boxes",
                "args": [
                    {
                        "type": "uint64",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "string",
                        "name": "c"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "check_keys",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create_many_ints",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_many_ints",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "uint64",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "sum_many_ints",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "delete_boxes",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "indirect_extract_and_replace",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "read_boxes",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,byte[],string,uint64)"
                }
            },
            {
                "name": "boxes_exist",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(bool,bool,bool,bool)"
                }
            },
            {
                "name": "create_dynamic_arr_struct",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delete_dynamic_arr_struct",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "append_dynamic_arr_struct",
                "args": [
                    {
                        "type": "uint64",
                        "name": "times"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "pop_dynamic_arr_struct",
                "args": [
                    {
                        "type": "uint64",
                        "name": "times"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "set_nested_struct",
                "args": [
                    {
                        "type": "(uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64)",
                        "name": "struct"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "nested_write",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "uint64",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "nested_read",
                "args": [
                    {
                        "type": "uint64",
                        "name": "i1"
                    },
                    {
                        "type": "uint64",
                        "name": "i2"
                    },
                    {
                        "type": "uint64",
                        "name": "i3"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "sum_dynamic_arr_struct",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "create_bools",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_bool",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "bool",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "sum_bools",
                "args": [
                    {
                        "type": "uint64",
                        "name": "stop_at_total"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "create_dynamic_box",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delete_dynamic_box",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "append_dynamic_box",
                "args": [
                    {
                        "type": "uint64",
                        "name": "times"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "pop_dynamic_box",
                "args": [
                    {
                        "type": "uint64",
                        "name": "times"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "sum_dynamic_box",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "write_dynamic_box",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "uint64",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "write_dynamic_arr_struct",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index"
                    },
                    {
                        "type": "uint64",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "slice_box",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc4_box",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_box_ref",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_test",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_set",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    },
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_get",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "box_map_del",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "box_map_exists",
                "args": [
                    {
                        "type": "uint64",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}