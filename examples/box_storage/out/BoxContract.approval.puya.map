{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAmVK;;AAAA;AAAA;AAAA;;AAAA;AAnVL;;;AAAA;AAmVK;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA/UL;;;AAAA;AA+UK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA3UL;;;AAAA;AA2UK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAvUL;;;AAAA;AAAA;;;AAAA;;;AAuUK;;;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA1NL;;;AAAA;AA0NK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA3ML;;;AAAA;AA2MK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAtJL;;;AAAA;AAsJK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAtHL;;;AAAA;AAsHK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA7DL;;;AAAA;AAAA;;;AAAA;AA6DK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AApCA;;AAAA;AAAA;AAAA;;AAAA;AAdL;;;AAAA;AAAA;;;AAAA;;;AAcK;;;AAAA;;AAdL;;AAAA;;;;;;;;;AAcA;;;AAEQ;;AAAA;AAAA;;AAAA;AAAA;AACA;;AAAA;;AAAA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AAAA;;AAAA;AACmB;;AAAA;;;AAAnB;;AAAA;;AAAA;;AAAA;;AAAA;AACA;;AAAA;;;AAAA;;AACyB;;AAAzB;AAAA;;AAAA;;AAAA;;AAAA;AACA;;AAA2B;;AAAwB;;;;;;;;;;AAAnD;AAKA;;AAAA;AAAA;AAAA;AAAoB;;AAApB;AAAA;AAAA;;AAAA;AAAA;AAGO;;AAAA;AAAA;AAAqB;AAArB;AAAP;AACO;;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAP;AACO;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAA;AAAP;AACO;;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAA;AAAP;AAGO;AAAuB;AAAvB;AAAA;AAA6B;;AAAA;;;AAA7B;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAA9B;AAAP;AAC+B;AAAxB;;AAAA;AAAA;;AAAwB;AAAxB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA+B;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA/B;AAAP;AAC+B;AAAxB;;AAAA;AAAA;;AAAwB;AAAxB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA8B;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA9B;AAAP;AAGO;;AAAiB;AAAjB;AAAA;AAAuB;;AAAA;;;AAAvB;AAAP;AACO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAwB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAxB;AAAP;AACyB;AAAlB;;AAAA;AAAA;;AAAkB;AAAlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAyB;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAzB;AAAP;AACyB;;AAAlB;;AAAA;AAAA;;AAAkB;;AAAlB;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAwB;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAxB;AAAP;AAC0B;AAAnB;;AAAA;AAAA;;AAAmB;AAAnB;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA4C;AAAX;;AAAA;AAAW;AAAX;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAjC;AAAP;AAEO;;AAAA;AAAA;AAAyB;;;AAAzB;AAAP;;AAWA;;AAAA;;;AAAA;;;AAER;;;AAEQ;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAER;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGgB;AAAR;;AACW;;AAAA;AAAA;;AAAA;;;;AAAnB;;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAmB;;AAAnB;AAAA;AAAA;AAAA;AACoB;;AAAA;AAAA;;;;;;;;;AACZ;;AAAA;;AAAA;AAII;;AAAJ;;AACI;;AAAJ;;AACI;AAAJ;;AACO;;AAAA;AAAA;AAAA;AAAuB;;AAAvB;;AAAA;;AAAA;AAAsC;;AAAtC;AAAP;AACO;;AAAA;AAAuB;;AAAvB;;AAAA;AAAA;;;AAA2D;;;;AAA3D;AAAP;AACO;AAAA;AAAuB;;AAAvB;;AAAA;AAAuB;;AAAvB;AAAP;AAEO;AAAA;AAAP;AACO;AAAP;AACI;;AAAJ;;;AAIQ;;AAAA;;AAAA;AAAA;AACR;AAAW;AAAX;AAAA;AACA;;AADA;;AAAA;;AAAA;;AAMyB;;AA2PtB;AAAA;AAAA;AAAY;AAAZ;AA3PoC;AAAnC;AACA;;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;;AAAA;;AAAA;AAAA;AAAA;AAJJ;AASY;;AAAL;AAAA;;AAAuB;;AAAL;AAAA;;AAAuB;AAAL;AAAA;;AAAuB;;AAAL;AAAA;;AAA7D;AAKM;;AAEA;AAAmB;AAAnB;AAH0B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;AAAhC;AAAA;;AAAA;AAAA;AAAA;;AASI;AAAJ;;;AAER;;;AAIe;AAAA;;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AACU;AAAA;;AAAA;AAAA;AAAA;AAAA;AACC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI4B;;AAAA;;AAAA;AA0OI;AAAR;AAAvB;;AAAA;AAOwB;AAAa;AAAb;AAAvB;AAAA;AACV;AAnPH;AAAA;AAAA;AA2O2C;AAAR;AAAvB;;AAAA;AAtOgD;;AAAQ;AAAR;AAAT;AADnD;AAAA;;AACgD;AADhD;;AAAA;AAKS;AAAA;;AAAA;;AAAA;AAAjB;;;AACY;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAF+B;AAE/B;AAAA;;AAAA;AACW;AAAX;AAAA;;AAFK;AAAA;AAAA;;;;;AAGc;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAJY;AAInC;;AAAA;;AAAA;AA+NmC;AAAQ;AAAR;AAQhC;;AAAA;AArOoE;AAAzD;AACU;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAPW;AAOnC;;AAAA;;AAAA;AAGI;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAGO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AACA;;AAAA;AAER;;;AAKkB;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AACC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8MwB;;AAAQ;AAAR;AAChC;AADS;;AAAA;AAQT;AAAA;;AAAA;AAnNoE;AAAzD;AACS;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAFY;AAEnC;;AAAA;;AAAA;AACwB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAHW;AAGnC;;AAAA;;AAAA;AAEsB;;AAAQ;AAAR;AALa;AAKnC;;AAAA;;AAA+C;;AAA/C;AA8MoC;AAAa;AAAb;AAAvB;AAAA;AACV;AA1MH;AAAA;AAAA;AAEO;AAAA;;AAAA;AAAA;AAAA;AAAP;AAI4B;AACxB;AAAA;AAAA;AAAA;AADwB;AAExB;;AAAA;AAAA;AAAA;AAFwB;AAGlB;;AAAA;AAAA;AAAA;AAAA;AAHkB;AAGlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAHkB;AAGlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHkB;AAGlB;AAAA;AAAA;AAAA;AAHkB;AAIxB;;AAAA;AAAA;AAAA;AAJwB;AAKxB;;AAAA;AAAA;AAAA;AALwB;AAMf;;AAAA;AAAA;AAAA;AANe;AAMf;;AAAA;AAAA;AAAA;AAAe;AAAf;AAAA;AAAA;AAAA;;AAAA;AANe;AAMf;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AANe;AAMf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANe;AAMf;AAAA;AAAA;AAAA;AAAA;AANe;AAMf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANe;AAMf;AAAA;AAAA;AAAA;AAEN;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAP;AAER;;;;;;AAEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AACO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AACQ;AACG;AAAA;;AAAnB;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAmB;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAmB;AAAnB;AAAA;AAAA;AAAA;AACY;;AAAA;AAAA;;;;;;;;;AACO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAnB;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAmB;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmB;AAAnB;AAAA;AAAA;AAAA;AACY;;AAAA;AAAA;;;;;;;;;AACJ;;AAAA;;AAAA;AAIA;AAAA;;AAAA;AAAyB;;;;AAAzB;;AAII;AAAJ;;;AAER;;;AAIwC;AACtB;AAAA;AAAA;AAAA;AAAA;AAEuB;;AAAA;AAAmB;AAApB;AAAJ;AAAA;AAA5B;AAAA;AAAA;AACS;AAAA;;AAAA;;AAAA;AAAjB;;;AACY;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAL4B;AAK5B;AAAA;;AAAA;AACW;AAAX;AAAA;;AAFK;AAAA;AAAA;;;;;AAIU;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AARa;AAQhC;AAAA;;AAAA;AACO;AAAA;AAAA;AAAA;AAAA;AAAP;;AAAA;AAER;;;AAIwC;AACtB;AAAA;AAAA;AAAA;AAAA;;AAAA;AACS;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAFa;AAEhC;AAAA;;AAAA;AAC0C;AAAV;AAAJ;AAAA;AAA5B;AAAA;AAAA;AAEO;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEgB;AACG;AAAnB;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmB;AAAnB;AAAA;AAAA;AAAA;AACY;;AAAA;AAAA;;;;;;;;;AACJ;AAIuB;;AACvB;;AADuB;;AACT;;;;;;;;;;;;;;;;;;;;;AAAd;AADuB;;AAEhB;AAAA;AAAA;AAAY;AAAZ;;AAAA;AAAc;;AAAd;;AAAA;AAAA;;AAAc;;AAAd;;AAAA;AAAA;;AAAA;AAFgB;;AAEhB;;AAAA;AAAoB;;;;;;;;;AAApB;AAAP;AAEA;AAAA;;AAAA;AAAmB;;;;;;;;;AAAnB;AACO;AAAA;AAAA;AAAuB;AAAvB;;AAAA;AAAA;;AAAuB;AAAvB;;AAAA;AAAyB;;AAAzB;;AAAA;AAAA;;AAAyB;;AAAzB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAgC;;;;;;;AAAhC;AAAP;;AAI4B;;;;;;;;;AAC5B;;AAUqB;;AACd;AAAA;;AAAA;AAAP;AAKqB;;AAIM;;AAApB;AAAP;AAIe;;AACD;;AATO;;AAWL;AAAhB;;AAAA;AAXqB;;AAYN;;;AAAf;AAZqB;;AAaN;AAAG;AAAlB;;AAAA;AAbqB;;AAcL;;AAJN;;AAIV;AAdqB;;AAeI;AAAG;;AAAnB;AACQ;;AAAA;;AAAA;AANP;;AAMO;AAAV;AAAP;AAhBqB;;AAmBd;AAAP;AAnBqB;;AAuBL;AACT;AAAA;AAAP;AACO;;AAAS;;AAAT;AAAP;AACO;;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAGY;AA7BS;;AA6BrB;AAAA;AA7BqB;;AA8Bd;AAAA;AACkB;;AAAlB;AAAP;AAIA;;AAAyB;;AAAzB;;AAEA;;AAAA;;;AAIQ;AAGK;AAAb;AAAA;;AAAA;AADQ;;;;;;;;AACR;AAGO;AAAA;AAAoC;;AAApC;AAAP;AALQ;AASgB;AAAjB;AAAA;AAAgC;;AAAhC;;AAAA;AAAsD;;AAAtD;AAAP;AACgB;AAAA;AAAA;;AACT;AAAP;AAMA;AAAA;;AAAA;AAAqB;;AAArB;AAEA;;;AAER;;;AAEqB;;AAAA;AAAb;AAAA;;AAAA;;AAAA;;AAER;;;AAE4B;;AAAA;AAAb;AAAA;AAAP;AAER;;;AAEyB;;AAAA;AAAjB;;;AAER;;;AAEe;;AAAA;AAAA;AAAA;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 2 0 8 4096"
    },
    "9": {
      "op": "bytecblock \"dynamic_arr_struct\" 0x424f585f43 \"box\" \"dynamic_box\" 0x151f7c75 \"blob\" \"box_large\" \"box_a\" \"box_d\" \"b\" \"many_ints\" \"0\" 0x00023432 0x68656c6c6f 0x0014 0x068101 \"box_ref\" \"default\""
    },
    "132": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "134": {
      "op": "bz main_bare_routing@33",
      "stack_out": []
    },
    "137": {
      "op": "pushbytess 0x7d37296e 0x33325d3d 0x0199408d 0x772059ca 0x01263df6 0xd566c632 0xfabcb885 0xa6174812 0xf13dd937 0x5ab60f2e 0xf07a0064 0x78f9af3f 0x5cbb9dcc 0x1baba181 0x0d22b441 0x41427cd1 0x2a141f6c 0x7e843744 0x25600b57 0x29ea595d 0x04ef4971 0x23ecb32c 0xeef75816 0xb532913a 0xc29f1669 0x9c888c09 0xe6f68506 0x8ee2c364 // method \"set_boxes(uint64,byte[],string)void\", method \"check_keys()void\", method \"create_many_ints()void\", method \"set_many_ints(uint64,uint64)void\", method \"sum_many_ints()uint64\", method \"delete_boxes()void\", method \"indirect_extract_and_replace()void\", method \"read_boxes()(uint64,byte[],string,uint64)\", method \"boxes_exist()(bool,bool,bool,bool)\", method \"create_dynamic_arr_struct()void\", method \"delete_dynamic_arr_struct()void\", method \"append_dynamic_arr_struct(uint64)uint64\", method \"pop_dynamic_arr_struct(uint64)uint64\", method \"nested_read()uint64\", method \"sum_dynamic_arr_struct()uint64\", method \"create_dynamic_box()void\", method \"delete_dynamic_box()void\", method \"append_dynamic_box(uint64)uint64\", method \"pop_dynamic_box(uint64)uint64\", method \"sum_dynamic_box()uint64\", method \"slice_box()void\", method \"arc4_box()void\", method \"test_box_ref()void\", method \"box_map_test()void\", method \"box_map_set(uint64,string)void\", method \"box_map_get(uint64)string\", method \"box_map_del(uint64)void\", method \"box_map_exists(uint64)bool\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(arc4_box()void)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(nested_read()uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "Method(test_box_ref()void)"
      ],
      "stack_out": [
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(nested_read()uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)"
      ]
    },
    "279": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(arc4_box()void)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(nested_read()uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(nested_read()uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "tmp%2#0"
      ]
    },
    "282": {
      "op": "match main_set_boxes_route@5 main_check_keys_route@6 main_create_many_ints_route@7 main_set_many_ints_route@8 main_sum_many_ints_route@9 main_delete_boxes_route@10 main_indirect_extract_and_replace_route@11 main_read_boxes_route@12 main_boxes_exist_route@13 main_create_dynamic_arr_struct_route@14 main_delete_dynamic_arr_struct_route@15 main_append_dynamic_arr_struct_route@16 main_pop_dynamic_arr_struct_route@17 main_nested_read_route@18 main_sum_dynamic_arr_struct_route@19 main_create_dynamic_box_route@20 main_delete_dynamic_box_route@21 main_append_dynamic_box_route@22 main_pop_dynamic_box_route@23 main_sum_dynamic_box_route@24 main_slice_box_route@25 main_arc4_box_route@26 main_test_box_ref_route@27 main_box_map_test_route@28 main_box_map_set_route@29 main_box_map_get_route@30 main_box_map_del_route@31 main_box_map_exists_route@32",
      "stack_out": []
    },
    "340": {
      "block": "main_after_if_else@35",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "341": {
      "op": "return",
      "stack_out": []
    },
    "342": {
      "block": "main_box_map_exists_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "344": {
      "op": "!",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "345": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "346": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "348": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "349": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "352": {
      "op": "btoi",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "353": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_exists",
      "op": "callsub box_map_exists",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "356": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "0x00"
      ]
    },
    "359": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0",
        "0x00",
        "0"
      ]
    },
    "360": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%166#0"
      ]
    },
    "362": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%1#0"
      ]
    },
    "363": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "365": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%1#0"
      ]
    },
    "366": {
      "op": "concat",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "367": {
      "op": "log",
      "stack_out": []
    },
    "368": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "369": {
      "op": "return",
      "stack_out": []
    },
    "370": {
      "block": "main_box_map_del_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "372": {
      "op": "!",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "373": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "374": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "376": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "377": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "380": {
      "op": "btoi",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "381": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_del",
      "op": "callsub box_map_del",
      "stack_out": []
    },
    "384": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "385": {
      "op": "return",
      "stack_out": []
    },
    "386": {
      "block": "main_box_map_get_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "388": {
      "op": "!",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "389": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "390": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "392": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "393": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%8#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "396": {
      "op": "btoi",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "397": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_get",
      "op": "callsub box_map_get",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "400": {
      "op": "dup",
      "defined_out": [
        "tmp%153#0",
        "tmp%153#0 (copy)"
      ],
      "stack_out": [
        "tmp%153#0",
        "tmp%153#0 (copy)"
      ]
    },
    "401": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0",
        "aggregate%length%1#0"
      ]
    },
    "402": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "403": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "406": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%1#0",
        "tmp%153#0"
      ]
    },
    "407": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0"
      ]
    },
    "408": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "410": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ]
    },
    "411": {
      "op": "concat",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "412": {
      "op": "log",
      "stack_out": []
    },
    "413": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "414": {
      "op": "return",
      "stack_out": []
    },
    "415": {
      "block": "main_box_map_set_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "417": {
      "op": "!",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "418": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "419": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "421": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "422": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "425": {
      "op": "btoi",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "426": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%1#0",
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0",
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "429": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%146#0",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%146#0",
        "tmp%147#0"
      ]
    },
    "432": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_set",
      "op": "callsub box_map_set",
      "stack_out": []
    },
    "435": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "436": {
      "op": "return",
      "stack_out": []
    },
    "437": {
      "block": "main_box_map_test_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "439": {
      "op": "!",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "440": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "441": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "443": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "444": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_test",
      "op": "callsub box_map_test"
    },
    "447": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "448": {
      "op": "return",
      "stack_out": []
    },
    "449": {
      "block": "main_test_box_ref_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "451": {
      "op": "!",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "452": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "453": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "455": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "456": {
      "callsub": "examples.box_storage.contract.BoxContract.test_box_ref",
      "op": "callsub test_box_ref"
    },
    "459": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "460": {
      "op": "return",
      "stack_out": []
    },
    "461": {
      "block": "main_arc4_box_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "463": {
      "op": "!",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "464": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "465": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "467": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "468": {
      "callsub": "examples.box_storage.contract.BoxContract.arc4_box",
      "op": "callsub arc4_box"
    },
    "471": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "472": {
      "op": "return",
      "stack_out": []
    },
    "473": {
      "block": "main_slice_box_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "475": {
      "op": "!",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "476": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "477": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "479": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "480": {
      "callsub": "examples.box_storage.contract.BoxContract.slice_box",
      "op": "callsub slice_box"
    },
    "483": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "484": {
      "op": "return",
      "stack_out": []
    },
    "485": {
      "block": "main_sum_dynamic_box_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "487": {
      "op": "!",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "488": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "489": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "491": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "492": {
      "callsub": "examples.box_storage.contract.BoxContract.sum_dynamic_box",
      "op": "callsub sum_dynamic_box",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "495": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%9#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%9#0"
      ]
    },
    "496": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%9#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%9#0",
        "0x151f7c75"
      ]
    },
    "498": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%9#0"
      ]
    },
    "499": {
      "op": "concat",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "500": {
      "op": "log",
      "stack_out": []
    },
    "501": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "502": {
      "op": "return",
      "stack_out": []
    },
    "503": {
      "block": "main_pop_dynamic_box_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "505": {
      "op": "!",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "506": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "507": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "509": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "510": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "513": {
      "op": "btoi",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "514": {
      "callsub": "examples.box_storage.contract.BoxContract.pop_dynamic_box",
      "op": "callsub pop_dynamic_box",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "517": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%8#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%8#0"
      ]
    },
    "518": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%8#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%8#0",
        "0x151f7c75"
      ]
    },
    "520": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%8#0"
      ]
    },
    "521": {
      "op": "concat",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "522": {
      "op": "log",
      "stack_out": []
    },
    "523": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "524": {
      "op": "return",
      "stack_out": []
    },
    "525": {
      "block": "main_append_dynamic_box_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "527": {
      "op": "!",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "528": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "529": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "531": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "532": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "535": {
      "op": "btoi",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "536": {
      "callsub": "examples.box_storage.contract.BoxContract.append_dynamic_box",
      "op": "callsub append_dynamic_box",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "539": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%7#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%7#0"
      ]
    },
    "540": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%7#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%7#0",
        "0x151f7c75"
      ]
    },
    "542": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%7#0"
      ]
    },
    "543": {
      "op": "concat",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "544": {
      "op": "log",
      "stack_out": []
    },
    "545": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "546": {
      "op": "return",
      "stack_out": []
    },
    "547": {
      "block": "main_delete_dynamic_box_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "549": {
      "op": "!",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "550": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "551": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "553": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "554": {
      "callsub": "examples.box_storage.contract.BoxContract.delete_dynamic_box",
      "op": "callsub delete_dynamic_box"
    },
    "557": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "558": {
      "op": "return",
      "stack_out": []
    },
    "559": {
      "block": "main_create_dynamic_box_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "561": {
      "op": "!",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "562": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "563": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "565": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "566": {
      "callsub": "examples.box_storage.contract.BoxContract.create_dynamic_box",
      "op": "callsub create_dynamic_box"
    },
    "569": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "570": {
      "op": "return",
      "stack_out": []
    },
    "571": {
      "block": "main_sum_dynamic_arr_struct_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "573": {
      "op": "!",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "574": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "575": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "577": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "578": {
      "callsub": "examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct",
      "op": "callsub sum_dynamic_arr_struct",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "581": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%6#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%6#0"
      ]
    },
    "582": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%6#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%6#0",
        "0x151f7c75"
      ]
    },
    "584": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%6#0"
      ]
    },
    "585": {
      "op": "concat",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "586": {
      "op": "log",
      "stack_out": []
    },
    "587": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "588": {
      "op": "return",
      "stack_out": []
    },
    "589": {
      "block": "main_nested_read_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "591": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "592": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "593": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "595": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "596": {
      "callsub": "examples.box_storage.contract.BoxContract.nested_read",
      "op": "callsub nested_read",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "599": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%5#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "600": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%5#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "602": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "603": {
      "op": "concat",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "604": {
      "op": "log",
      "stack_out": []
    },
    "605": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "606": {
      "op": "return",
      "stack_out": []
    },
    "607": {
      "block": "main_pop_dynamic_arr_struct_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "609": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "610": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "611": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "613": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "614": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "617": {
      "op": "btoi",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "618": {
      "callsub": "examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct",
      "op": "callsub pop_dynamic_arr_struct",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "621": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "622": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "624": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "625": {
      "op": "concat",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "626": {
      "op": "log",
      "stack_out": []
    },
    "627": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "628": {
      "op": "return",
      "stack_out": []
    },
    "629": {
      "block": "main_append_dynamic_arr_struct_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "631": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "632": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "633": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "635": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "636": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "639": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "640": {
      "callsub": "examples.box_storage.contract.BoxContract.append_dynamic_arr_struct",
      "op": "callsub append_dynamic_arr_struct",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "643": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%3#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "644": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%3#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "646": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "647": {
      "op": "concat",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "648": {
      "op": "log",
      "stack_out": []
    },
    "649": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "650": {
      "op": "return",
      "stack_out": []
    },
    "651": {
      "block": "main_delete_dynamic_arr_struct_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "653": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "654": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "655": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "657": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "658": {
      "callsub": "examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct",
      "op": "callsub delete_dynamic_arr_struct"
    },
    "661": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "662": {
      "op": "return",
      "stack_out": []
    },
    "663": {
      "block": "main_create_dynamic_arr_struct_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "665": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "666": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "667": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "669": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "670": {
      "callsub": "examples.box_storage.contract.BoxContract.create_dynamic_arr_struct",
      "op": "callsub create_dynamic_arr_struct"
    },
    "673": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "674": {
      "op": "return",
      "stack_out": []
    },
    "675": {
      "block": "main_boxes_exist_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "677": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "678": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "679": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "681": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "682": {
      "callsub": "examples.box_storage.contract.BoxContract.boxes_exist",
      "op": "callsub boxes_exist",
      "defined_out": [
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ]
    },
    "685": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0",
        "0x00"
      ]
    },
    "688": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0",
        "0x00",
        "0"
      ]
    },
    "689": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0",
        "0x00",
        "0",
        "tmp%51#0"
      ]
    },
    "691": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "692": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%encoded_bool%0#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0",
        "aggregate%encoded_bool%0#0",
        "1"
      ]
    },
    "693": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%53#0",
        "tmp%54#0",
        "aggregate%encoded_bool%0#0",
        "1",
        "tmp%52#0"
      ]
    },
    "695": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%0#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "tmp%54#0",
        "aggregate%set_bit%0#0"
      ]
    },
    "696": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%set_bit%0#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "tmp%54#0",
        "aggregate%set_bit%0#0",
        "2"
      ]
    },
    "697": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%54#0",
        "aggregate%set_bit%0#0",
        "2",
        "tmp%53#0"
      ]
    },
    "699": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%1#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "aggregate%set_bit%1#0"
      ]
    },
    "700": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "aggregate%set_bit%1#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "aggregate%set_bit%1#0",
        "3"
      ]
    },
    "702": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%set_bit%1#0",
        "3",
        "tmp%54#0"
      ]
    },
    "704": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%2#0"
      ],
      "stack_out": [
        "aggregate%set_bit%2#0"
      ]
    },
    "705": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%set_bit%2#0"
      ],
      "stack_out": [
        "aggregate%set_bit%2#0",
        "0x151f7c75"
      ]
    },
    "707": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%set_bit%2#0"
      ]
    },
    "708": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "709": {
      "op": "log",
      "stack_out": []
    },
    "710": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "711": {
      "op": "return",
      "stack_out": []
    },
    "712": {
      "block": "main_read_boxes_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "714": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "715": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "716": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "718": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "719": {
      "callsub": "examples.box_storage.contract.BoxContract.read_boxes",
      "op": "callsub read_boxes",
      "defined_out": [
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "722": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "tmp%41#0"
      ]
    },
    "724": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "725": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "tmp%42#0",
        "tmp%42#0 (copy)",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%42#0 (copy)"
      ]
    },
    "727": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%length%0#0"
      ]
    },
    "728": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "729": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "732": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%42#0"
      ]
    },
    "734": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "735": {
      "op": "swap",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "736": {
      "op": "bytec 14 // 0x0014",
      "defined_out": [
        "0x0014",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%1#0",
        "0x0014"
      ]
    },
    "738": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "739": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0 (copy)"
      ]
    },
    "741": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%data_length%0#0"
      ]
    },
    "742": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%data_length%0#0",
        "20"
      ]
    },
    "744": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "745": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "746": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "749": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0"
      ]
    },
    "750": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%43#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "tmp%44#0"
      ]
    },
    "752": {
      "op": "itob",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%2#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "753": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0"
      ]
    },
    "754": {
      "op": "swap",
      "stack_out": [
        "tmp%43#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "755": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "aggregate%concat%0#0"
      ]
    },
    "756": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#0",
        "tmp%43#0"
      ]
    },
    "757": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "758": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "0x151f7c75"
      ]
    },
    "760": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ]
    },
    "761": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "762": {
      "op": "log",
      "stack_out": []
    },
    "763": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "764": {
      "op": "return",
      "stack_out": []
    },
    "765": {
      "block": "main_indirect_extract_and_replace_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "767": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "768": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "769": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "771": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "772": {
      "callsub": "examples.box_storage.contract.BoxContract.indirect_extract_and_replace",
      "op": "callsub indirect_extract_and_replace"
    },
    "775": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "776": {
      "op": "return",
      "stack_out": []
    },
    "777": {
      "block": "main_delete_boxes_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "779": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "780": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "781": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "783": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "784": {
      "callsub": "examples.box_storage.contract.BoxContract.delete_boxes",
      "op": "callsub delete_boxes"
    },
    "787": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "788": {
      "op": "return",
      "stack_out": []
    },
    "789": {
      "block": "main_sum_many_ints_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "791": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "792": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "793": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "795": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "796": {
      "callsub": "examples.box_storage.contract.BoxContract.sum_many_ints",
      "op": "callsub sum_many_ints",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "799": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "800": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "802": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "803": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "804": {
      "op": "log",
      "stack_out": []
    },
    "805": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "806": {
      "op": "return",
      "stack_out": []
    },
    "807": {
      "block": "main_set_many_ints_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "809": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "810": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "811": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "813": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "814": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "817": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "818": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "821": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "822": {
      "callsub": "examples.box_storage.contract.BoxContract.set_many_ints",
      "op": "callsub set_many_ints",
      "stack_out": []
    },
    "825": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "826": {
      "op": "return",
      "stack_out": []
    },
    "827": {
      "block": "main_create_many_ints_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "829": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "830": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "831": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "833": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "834": {
      "callsub": "examples.box_storage.contract.BoxContract.create_many_ints",
      "op": "callsub create_many_ints"
    },
    "837": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "838": {
      "op": "return",
      "stack_out": []
    },
    "839": {
      "block": "main_check_keys_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "841": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "842": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "843": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "845": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "846": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "847": {
      "op": "return",
      "stack_out": []
    },
    "848": {
      "block": "main_set_boxes_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "850": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "851": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "852": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "854": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "855": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "858": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "859": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "862": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "865": {
      "callsub": "examples.box_storage.contract.BoxContract.set_boxes",
      "op": "callsub set_boxes",
      "stack_out": []
    },
    "868": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "869": {
      "op": "return",
      "stack_out": []
    },
    "870": {
      "block": "main_bare_routing@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "872": {
      "op": "bnz main_after_if_else@35",
      "stack_out": []
    },
    "875": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "877": {
      "op": "!",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "878": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "879": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "880": {
      "op": "return",
      "stack_out": []
    },
    "881": {
      "subroutine": "examples.box_storage.contract.BoxContract.set_boxes",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes"
      },
      "block": "set_boxes",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "884": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "886": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "887": {
      "op": "bytec 7 // \"box_a\"",
      "defined_out": [
        "\"box_a\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_a\""
      ]
    },
    "889": {
      "op": "swap",
      "stack_out": [
        "\"box_a\"",
        "encoded_value%0#0"
      ]
    },
    "890": {
      "op": "box_put",
      "stack_out": []
    },
    "891": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "893": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "894": {
      "op": "pop",
      "stack_out": []
    },
    "895": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "\"b\""
      ]
    },
    "897": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"b\"",
        "b#0 (copy)"
      ],
      "stack_out": [
        "\"b\"",
        "b#0 (copy)"
      ]
    },
    "899": {
      "op": "box_put",
      "stack_out": []
    },
    "900": {
      "op": "bytec_1 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "901": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "902": {
      "op": "pop",
      "stack_out": []
    },
    "903": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "904": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x424f585f43",
        "c#0 (copy)"
      ],
      "stack_out": [
        "0x424f585f43",
        "c#0 (copy)"
      ]
    },
    "906": {
      "op": "box_put",
      "stack_out": []
    },
    "907": {
      "op": "frame_dig -2",
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "909": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "912": {
      "op": "bytec 8 // \"box_d\"",
      "defined_out": [
        "\"box_d\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_d\""
      ]
    },
    "914": {
      "op": "box_del",
      "stack_out": [
        "tmp%0#0",
        "{box_del}"
      ]
    },
    "915": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "916": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "\"box_d\""
      ]
    },
    "918": {
      "op": "dig 1",
      "defined_out": [
        "\"box_d\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_d\"",
        "tmp%0#0 (copy)"
      ]
    },
    "920": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "921": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_large\""
      ]
    },
    "923": {
      "op": "pushint 6160 // 6160",
      "defined_out": [
        "\"box_large\"",
        "6160",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_large\"",
        "6160"
      ]
    },
    "926": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0",
        "{box_create}"
      ],
      "stack_out": [
        "tmp%0#0",
        "{box_create}"
      ]
    },
    "927": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "928": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "42"
      ]
    },
    "930": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "931": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0",
        "\"box_large\""
      ]
    },
    "933": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0",
        "\"box_large\"",
        "4096"
      ]
    },
    "935": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "\"box_large\"",
        "4096",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "937": {
      "op": "box_replace",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "938": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "tmp%0#0",
        "\"box_large\""
      ]
    },
    "940": {
      "op": "intc 4 // 4096",
      "stack_out": [
        "tmp%0#0",
        "\"box_large\"",
        "4096"
      ]
    },
    "942": {
      "op": "pushbytes 0x000000000000002a",
      "defined_out": [
        "\"box_large\"",
        "0x000000000000002a",
        "4096",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_large\"",
        "4096",
        "0x000000000000002a"
      ]
    },
    "952": {
      "op": "box_replace",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "953": {
      "op": "bytec 7 // \"box_a\"",
      "stack_out": [
        "tmp%0#0",
        "\"box_a\""
      ]
    },
    "955": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "956": {
      "error": "check self.box_a exists",
      "op": "assert // check self.box_a exists",
      "stack_out": [
        "tmp%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "957": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "958": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0",
        "3"
      ]
    },
    "960": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "961": {
      "op": "itob",
      "defined_out": [
        "encoded_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_value%2#0"
      ]
    },
    "962": {
      "op": "bytec 7 // \"box_a\"",
      "stack_out": [
        "tmp%0#0",
        "encoded_value%2#0",
        "\"box_a\""
      ]
    },
    "964": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"box_a\"",
        "encoded_value%2#0"
      ]
    },
    "965": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "966": {
      "op": "bytec 7 // \"box_a\"",
      "stack_out": [
        "tmp%0#0",
        "\"box_a\""
      ]
    },
    "968": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "969": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "value%0#0"
      ]
    },
    "970": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%0#0",
        "8"
      ]
    },
    "971": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "972": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "973": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "tmp%0#0",
        "\"b\""
      ]
    },
    "975": {
      "op": "box_len",
      "defined_out": [
        "check%1#0",
        "tmp%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "976": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "value%1#0"
      ]
    },
    "977": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "value%1#0",
        "b#0 (copy)"
      ]
    },
    "979": {
      "op": "len",
      "defined_out": [
        "tmp%0#0",
        "tmp%7#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%1#0",
        "tmp%7#0"
      ]
    },
    "980": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "981": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "982": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "tmp%0#0",
        "0x424f585f43"
      ]
    },
    "983": {
      "op": "box_len",
      "defined_out": [
        "check%2#0",
        "tmp%0#0",
        "value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "984": {
      "error": "check self.box_c exists",
      "op": "assert // check self.box_c exists",
      "stack_out": [
        "tmp%0#0",
        "value%2#0"
      ]
    },
    "985": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "c#0 (copy)"
      ]
    },
    "987": {
      "op": "len",
      "defined_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0"
      ]
    },
    "988": {
      "op": "dup2",
      "defined_out": [
        "tmp%0#0",
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "value%2#0",
        "value%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%2#0 (copy)",
        "tmp%9#0 (copy)"
      ]
    },
    "989": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%10#0",
        "tmp%9#0",
        "value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "990": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0"
      ]
    },
    "991": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "\"box_d\""
      ]
    },
    "993": {
      "op": "box_len",
      "defined_out": [
        "check%3#0",
        "tmp%0#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "check%3#0"
      ]
    },
    "994": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0"
      ]
    },
    "995": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%0#0 (copy)"
      ]
    },
    "997": {
      "op": "len",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "998": {
      "op": "dup2",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%9#0",
        "value%2#0",
        "value%3#0",
        "value%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "tmp%12#0 (copy)"
      ]
    },
    "999": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1000": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1001": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43"
      ]
    },
    "1002": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "0x424f585f43",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "0"
      ]
    },
    "1003": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0",
        "0x424f585f43",
        "1",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "0",
        "1"
      ]
    },
    "1004": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "1005": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%14#0",
        "c#0 (copy)"
      ]
    },
    "1007": {
      "op": "extract 0 1",
      "defined_out": [
        "extract%0#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%14#0",
        "extract%0#0"
      ]
    },
    "1010": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "1011": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1012": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0 (copy)"
      ]
    },
    "1014": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0 (copy)",
        "1"
      ]
    },
    "1015": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%18#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%18#0"
      ]
    },
    "1016": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%18#0",
        "0x424f585f43"
      ]
    },
    "1017": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "tmp%18#0"
      ]
    },
    "1018": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "tmp%18#0",
        "1"
      ]
    },
    "1019": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0"
      ]
    },
    "1020": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%9#0 (copy)"
      ]
    },
    "1022": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%9#0 (copy)",
        "1"
      ]
    },
    "1023": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1024": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%21#0",
        "c#0 (copy)"
      ]
    },
    "1026": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "c#0 (copy)",
        "tmp%21#0"
      ]
    },
    "1027": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "c#0 (copy)",
        "tmp%21#0",
        "1"
      ]
    },
    "1028": {
      "op": "extract3",
      "defined_out": [
        "extract%1#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "extract%1#0"
      ]
    },
    "1029": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%22#0"
      ]
    },
    "1030": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1031": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "1"
      ]
    },
    "1032": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "1",
        "value%2#0 (copy)"
      ]
    },
    "1034": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%25#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%25#0"
      ]
    },
    "1035": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%25#0",
        "value%2#0 (copy)"
      ]
    },
    "1037": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%25#0",
        "value%2#0 (copy)",
        "1"
      ]
    },
    "1038": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0 (copy)",
        "1",
        "tmp%25#0"
      ]
    },
    "1040": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%26#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%26#0"
      ]
    },
    "1041": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%26#0",
        "value%2#0 (copy)"
      ]
    },
    "1043": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0 (copy)",
        "tmp%26#0"
      ]
    },
    "1044": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%27#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%27#0"
      ]
    },
    "1045": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%27#0",
        "0x424f585f43"
      ]
    },
    "1046": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%27#0",
        "0x424f585f43",
        "0"
      ]
    },
    "1047": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "0",
        "tmp%27#0"
      ]
    },
    "1049": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0"
      ]
    },
    "1050": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "1"
      ]
    },
    "1051": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "1",
        "tmp%9#0 (copy)"
      ]
    },
    "1053": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "1054": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "is_out_of_bounds%0#0",
        "1"
      ]
    },
    "1055": {
      "op": "dig 5",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "is_out_of_bounds%0#0",
        "1",
        "tmp%9#0 (copy)"
      ]
    },
    "1057": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "1",
        "tmp%9#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "1059": {
      "op": "select",
      "defined_out": [
        "bounded_offset%0#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_offset%0#0"
      ]
    },
    "1060": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_offset%0#0",
        "tmp%9#0 (copy)"
      ]
    },
    "1062": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0 (copy)",
        "bounded_offset%0#0"
      ]
    },
    "1063": {
      "op": "-",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_index%0#0"
      ]
    },
    "1064": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_index%0#0",
        "c#0 (copy)"
      ]
    },
    "1066": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_index%0#0",
        "c#0 (copy)",
        "0"
      ]
    },
    "1067": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "c#0 (copy)",
        "0",
        "bounded_index%0#0"
      ]
    },
    "1069": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "1070": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%31#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%31#0"
      ]
    },
    "1071": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1072": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "2"
      ]
    },
    "1073": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "2",
        "value%2#0 (copy)"
      ]
    },
    "1075": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%34#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%34#0"
      ]
    },
    "1076": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%34#0",
        "value%2#0"
      ]
    },
    "1078": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%34#0",
        "value%2#0",
        "2"
      ]
    },
    "1079": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0",
        "2",
        "tmp%34#0"
      ]
    },
    "1081": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%35#0",
        "tmp%9#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%35#0"
      ]
    },
    "1082": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%35#0",
        "0x424f585f43"
      ]
    },
    "1083": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%35#0",
        "0x424f585f43",
        "0"
      ]
    },
    "1084": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "0",
        "tmp%35#0"
      ]
    },
    "1086": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%37#0",
        "tmp%9#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0"
      ]
    },
    "1087": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "2"
      ]
    },
    "1088": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "2",
        "tmp%9#0 (copy)"
      ]
    },
    "1090": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%1#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%37#0",
        "tmp%9#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "1091": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "is_out_of_bounds%1#0",
        "2"
      ]
    },
    "1092": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "is_out_of_bounds%1#0",
        "2",
        "tmp%9#0"
      ]
    },
    "1094": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "2",
        "tmp%9#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "1096": {
      "op": "select",
      "defined_out": [
        "bounded_index%1#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%37#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "bounded_index%1#0"
      ]
    },
    "1097": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "bounded_index%1#0",
        "c#0 (copy)"
      ]
    },
    "1099": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "bounded_index%1#0",
        "c#0 (copy)",
        "0"
      ]
    },
    "1100": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "c#0 (copy)",
        "0",
        "bounded_index%1#0"
      ]
    },
    "1102": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%37#0",
        "tmp%38#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "1103": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%39#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%39#0"
      ]
    },
    "1104": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1105": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\""
      ]
    },
    "1107": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "0"
      ]
    },
    "1108": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "0",
        "1"
      ]
    },
    "1109": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%40#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%40#0"
      ]
    },
    "1110": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%40#0",
        "b#0 (copy)"
      ]
    },
    "1112": {
      "op": "extract 2 1",
      "defined_out": [
        "extract%2#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%40#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%40#0",
        "extract%2#0"
      ]
    },
    "1115": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%42#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%42#0"
      ]
    },
    "1116": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1117": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)"
      ]
    },
    "1119": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "1"
      ]
    },
    "1120": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%45#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%45#0"
      ]
    },
    "1121": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%45#0",
        "\"box_d\""
      ]
    },
    "1123": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "tmp%45#0"
      ]
    },
    "1124": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "tmp%45#0",
        "1"
      ]
    },
    "1125": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%46#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0"
      ]
    },
    "1126": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1128": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%12#0 (copy)",
        "1"
      ]
    },
    "1129": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%49#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%49#0"
      ]
    },
    "1130": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%49#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1132": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%0#0 (copy)",
        "tmp%49#0"
      ]
    },
    "1133": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%0#0 (copy)",
        "tmp%49#0",
        "1"
      ]
    },
    "1134": {
      "op": "extract3",
      "defined_out": [
        "extract%3#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%46#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "extract%3#0"
      ]
    },
    "1135": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%50#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%50#0"
      ]
    },
    "1136": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1137": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "1"
      ]
    },
    "1138": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "1",
        "value%3#0 (copy)"
      ]
    },
    "1140": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%53#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%53#0"
      ]
    },
    "1141": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%53#0",
        "value%3#0 (copy)"
      ]
    },
    "1143": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%53#0",
        "value%3#0 (copy)",
        "1"
      ]
    },
    "1144": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "1",
        "tmp%53#0"
      ]
    },
    "1146": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%54#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%54#0"
      ]
    },
    "1147": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%54#0",
        "value%3#0 (copy)"
      ]
    },
    "1149": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "tmp%54#0"
      ]
    },
    "1150": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%55#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%55#0"
      ]
    },
    "1151": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%55#0",
        "\"box_d\""
      ]
    },
    "1153": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%55#0",
        "\"box_d\"",
        "0"
      ]
    },
    "1154": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "0",
        "tmp%55#0"
      ]
    },
    "1156": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%57#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0"
      ]
    },
    "1157": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "1"
      ]
    },
    "1158": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "1",
        "tmp%12#0 (copy)"
      ]
    },
    "1160": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%2#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%57#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "is_out_of_bounds%2#0"
      ]
    },
    "1161": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "is_out_of_bounds%2#0",
        "1"
      ]
    },
    "1162": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "is_out_of_bounds%2#0",
        "1",
        "tmp%12#0 (copy)"
      ]
    },
    "1164": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "1",
        "tmp%12#0 (copy)",
        "is_out_of_bounds%2#0"
      ]
    },
    "1166": {
      "op": "select",
      "defined_out": [
        "bounded_offset%1#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%57#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_offset%1#0"
      ]
    },
    "1167": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_offset%1#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1169": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "tmp%12#0 (copy)",
        "bounded_offset%1#0"
      ]
    },
    "1170": {
      "op": "-",
      "defined_out": [
        "bounded_index%2#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%57#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_index%2#0"
      ]
    },
    "1171": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_index%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1173": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_index%2#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "1174": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "tmp%0#0 (copy)",
        "0",
        "bounded_index%2#0"
      ]
    },
    "1176": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%57#0",
        "tmp%59#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "tmp%59#0"
      ]
    },
    "1177": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%60#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%60#0"
      ]
    },
    "1178": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1179": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%0#0",
        "tmp%12#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "5"
      ]
    },
    "1181": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "5",
        "value%3#0 (copy)"
      ]
    },
    "1183": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%63#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%63#0"
      ]
    },
    "1184": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%63#0",
        "value%3#0 (copy)"
      ]
    },
    "1186": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%63#0",
        "value%3#0 (copy)",
        "5"
      ]
    },
    "1188": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "5",
        "tmp%63#0"
      ]
    },
    "1190": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%64#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%64#0"
      ]
    },
    "1191": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%64#0",
        "\"box_d\""
      ]
    },
    "1193": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%64#0",
        "\"box_d\"",
        "0"
      ]
    },
    "1194": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "0",
        "tmp%64#0"
      ]
    },
    "1196": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%66#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0"
      ]
    },
    "1197": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "5"
      ]
    },
    "1199": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "5",
        "tmp%12#0 (copy)"
      ]
    },
    "1201": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%3#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%66#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "is_out_of_bounds%3#0"
      ]
    },
    "1202": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "is_out_of_bounds%3#0",
        "5"
      ]
    },
    "1204": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "is_out_of_bounds%3#0",
        "5",
        "tmp%12#0 (copy)"
      ]
    },
    "1206": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "5",
        "tmp%12#0 (copy)",
        "is_out_of_bounds%3#0"
      ]
    },
    "1208": {
      "op": "select",
      "defined_out": [
        "bounded_index%3#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%66#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "bounded_index%3#0"
      ]
    },
    "1209": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "bounded_index%3#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1211": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "bounded_index%3#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "1212": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "tmp%0#0 (copy)",
        "0",
        "bounded_index%3#0"
      ]
    },
    "1214": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%66#0",
        "tmp%68#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "tmp%68#0"
      ]
    },
    "1215": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%69#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%69#0"
      ]
    },
    "1216": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1217": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "2"
      ]
    },
    "1218": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "2",
        "value%3#0 (copy)"
      ]
    },
    "1220": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%72#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%72#0"
      ]
    },
    "1221": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%72#0",
        "value%3#0"
      ]
    },
    "1223": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%72#0",
        "value%3#0",
        "2"
      ]
    },
    "1224": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "value%3#0",
        "2",
        "tmp%72#0"
      ]
    },
    "1226": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%73#0"
      ]
    },
    "1227": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%73#0",
        "\"box_d\""
      ]
    },
    "1229": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%73#0",
        "\"box_d\"",
        "0"
      ]
    },
    "1230": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "\"box_d\"",
        "0",
        "tmp%73#0"
      ]
    },
    "1232": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0"
      ]
    },
    "1233": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0",
        "2"
      ]
    },
    "1234": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0",
        "2",
        "tmp%12#0 (copy)"
      ]
    },
    "1236": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%4#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0",
        "is_out_of_bounds%4#0"
      ]
    },
    "1237": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0",
        "is_out_of_bounds%4#0",
        "2"
      ]
    },
    "1238": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%75#0",
        "is_out_of_bounds%4#0",
        "2",
        "tmp%12#0"
      ]
    },
    "1240": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%75#0",
        "2",
        "tmp%12#0",
        "is_out_of_bounds%4#0"
      ]
    },
    "1242": {
      "op": "select",
      "defined_out": [
        "bounded_index%4#0",
        "tmp%0#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%75#0",
        "bounded_index%4#0"
      ]
    },
    "1243": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%75#0",
        "bounded_index%4#0",
        "tmp%0#0"
      ]
    },
    "1245": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%75#0",
        "bounded_index%4#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1246": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%75#0",
        "tmp%0#0",
        "0",
        "bounded_index%4#0"
      ]
    },
    "1248": {
      "op": "substring3",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0"
      ]
    },
    "1249": {
      "op": "==",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "1250": {
      "op": "assert",
      "stack_out": []
    },
    "1251": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "\"box_large\""
      ]
    },
    "1253": {
      "op": "box_len",
      "defined_out": [
        "check%4#0",
        "value%4#0"
      ],
      "stack_out": [
        "value%4#0",
        "check%4#0"
      ]
    },
    "1254": {
      "op": "pop",
      "stack_out": [
        "value%4#0"
      ]
    },
    "1255": {
      "op": "pushint 6160 // 6160",
      "stack_out": [
        "value%4#0",
        "6160"
      ]
    },
    "1258": {
      "op": "==",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1259": {
      "op": "assert",
      "stack_out": []
    },
    "1260": {
      "retsub": true,
      "op": "retsub"
    },
    "1261": {
      "subroutine": "examples.box_storage.contract.BoxContract.create_many_ints",
      "params": {},
      "block": "create_many_ints",
      "stack_in": [],
      "op": "bytec 10 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\""
      ],
      "stack_out": [
        "\"many_ints\""
      ]
    },
    "1263": {
      "op": "pushint 4104 // 4104",
      "defined_out": [
        "\"many_ints\"",
        "4104"
      ],
      "stack_out": [
        "\"many_ints\"",
        "4104"
      ]
    },
    "1266": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "1267": {
      "op": "pop",
      "stack_out": []
    },
    "1268": {
      "retsub": true,
      "op": "retsub"
    },
    "1269": {
      "subroutine": "examples.box_storage.contract.BoxContract.set_many_ints",
      "params": {
        "index#0": "uint64",
        "value#0": "uint64"
      },
      "block": "set_many_ints",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1272": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1274": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1275": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)"
      ]
    },
    "1277": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)",
        "8"
      ]
    },
    "1278": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%index_bytes_offset%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%index_bytes_offset%0#0"
      ]
    },
    "1279": {
      "op": "bytec 10 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\"",
        "aggregate%val_as_bytes%0#0",
        "box%index_bytes_offset%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%index_bytes_offset%0#0",
        "\"many_ints\""
      ]
    },
    "1281": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"many_ints\"",
        "box%index_bytes_offset%0#0"
      ]
    },
    "1282": {
      "op": "uncover 2",
      "stack_out": [
        "\"many_ints\"",
        "box%index_bytes_offset%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1284": {
      "op": "box_replace",
      "stack_out": []
    },
    "1285": {
      "retsub": true,
      "op": "retsub"
    },
    "1286": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_many_ints",
      "params": {},
      "block": "sum_many_ints",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1289": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "item_index_internal%0#0"
      ]
    },
    "1291": {
      "op": "dup",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1292": {
      "block": "sum_many_ints_while_top@6",
      "stack_in": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "op": "pushint 10510 // 10510",
      "defined_out": [
        "10510"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "10510"
      ]
    },
    "1295": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "10510",
        "tmp%1#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "10510",
        "tmp%1#0"
      ]
    },
    "1297": {
      "op": ">",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "tmp%2#0"
      ]
    },
    "1298": {
      "op": "bz sum_many_ints_after_while@11",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1301": {
      "op": "itxn_begin"
    },
    "1302": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "appl"
      ]
    },
    "1304": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1306": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "DeleteApplication"
      ]
    },
    "1308": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1310": {
      "op": "bytec 15 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "0x068101"
      ]
    },
    "1312": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1314": {
      "op": "bytec 15 // 0x068101",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "0x068101"
      ]
    },
    "1316": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1318": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "0"
      ]
    },
    "1319": {
      "op": "itxn_field Fee",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1321": {
      "op": "itxn_submit"
    },
    "1322": {
      "op": "b sum_many_ints_while_top@6"
    },
    "1325": {
      "block": "sum_many_ints_after_while@11",
      "stack_in": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "op": "intc_2 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "total#0"
      ]
    },
    "1326": {
      "op": "frame_bury 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1328": {
      "op": "bytec 10 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\"",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "\"many_ints\""
      ]
    },
    "1330": {
      "op": "box_len",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1331": {
      "op": "bury 1",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1333": {
      "error": "check self.many_ints exists",
      "op": "assert // check self.many_ints exists",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1334": {
      "op": "intc_2 // 0",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "1335": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1337": {
      "block": "sum_many_ints_for_header@1",
      "stack_in": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "1339": {
      "op": "pushint 513 // 513",
      "defined_out": [
        "513",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "513"
      ]
    },
    "1342": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "continue_looping%0#0"
      ]
    },
    "1343": {
      "op": "bz sum_many_ints_after_for@4",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1346": {
      "op": "frame_dig 0",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "1348": {
      "op": "dup",
      "defined_out": [
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "1349": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "8"
      ]
    },
    "1350": {
      "op": "*",
      "defined_out": [
        "box%index_bytes_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "box%index_bytes_offset%0#0"
      ]
    },
    "1351": {
      "op": "bytec 10 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\"",
        "box%index_bytes_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "box%index_bytes_offset%0#0",
        "\"many_ints\""
      ]
    },
    "1353": {
      "op": "swap",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "\"many_ints\"",
        "box%index_bytes_offset%0#0"
      ]
    },
    "1354": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "\"many_ints\"",
        "box%index_bytes_offset%0#0",
        "8"
      ]
    },
    "1355": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "box%box_extract%0#0"
      ]
    },
    "1356": {
      "op": "btoi",
      "defined_out": [
        "item_index_internal%0#0",
        "val#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "val#0"
      ]
    },
    "1357": {
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "val#0",
        "total#0"
      ]
    },
    "1359": {
      "op": "+",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1360": {
      "op": "frame_bury 1",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "1362": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "1363": {
      "op": "+",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "1364": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1366": {
      "op": "b sum_many_ints_for_header@1"
    },
    "1369": {
      "block": "sum_many_ints_after_for@4",
      "stack_in": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "total#0"
      ]
    },
    "1371": {
      "op": "frame_bury 0"
    },
    "1373": {
      "retsub": true,
      "op": "retsub"
    },
    "1374": {
      "subroutine": "examples.box_storage.contract.BoxContract.delete_boxes",
      "params": {},
      "block": "delete_boxes",
      "stack_in": [],
      "op": "bytec 7 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "1376": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1377": {
      "op": "pop",
      "stack_out": []
    },
    "1378": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "1380": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1381": {
      "op": "pop",
      "stack_out": []
    },
    "1382": {
      "op": "bytec_1 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1383": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1384": {
      "op": "pop",
      "stack_out": []
    },
    "1385": {
      "op": "bytec 7 // \"box_a\"",
      "stack_out": [
        "\"box_a\""
      ]
    },
    "1387": {
      "op": "box_get",
      "defined_out": [
        "a_exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "a_exists#0"
      ]
    },
    "1388": {
      "op": "swap",
      "stack_out": [
        "a_exists#0",
        "maybe_value%0#0"
      ]
    },
    "1389": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "a_exists#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "1390": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "a#0",
        "a_exists#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "42"
      ]
    },
    "1392": {
      "op": "dig 1",
      "defined_out": [
        "42",
        "a#0",
        "a#0 (copy)",
        "a_exists#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "42",
        "a#0 (copy)"
      ]
    },
    "1394": {
      "op": "dig 3",
      "defined_out": [
        "42",
        "a#0",
        "a#0 (copy)",
        "a_exists#0",
        "a_exists#0 (copy)"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "42",
        "a#0 (copy)",
        "a_exists#0 (copy)"
      ]
    },
    "1396": {
      "op": "select",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%0#0"
      ]
    },
    "1397": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%0#0",
        "42"
      ]
    },
    "1399": {
      "op": "==",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%0#0"
      ]
    },
    "1400": {
      "op": "assert",
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "1401": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "\"b\""
      ]
    },
    "1403": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1404": {
      "op": "bytec 12 // 0x00023432",
      "defined_out": [
        "0x00023432",
        "a#0",
        "a_exists#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0x00023432"
      ]
    },
    "1406": {
      "op": "cover 2",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "0x00023432",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1408": {
      "op": "select",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "state_get%1#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%1#0"
      ]
    },
    "1409": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%2#0"
      ]
    },
    "1412": {
      "op": "pushbytes 0x3432",
      "defined_out": [
        "0x3432",
        "a#0",
        "a_exists#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%2#0",
        "0x3432"
      ]
    },
    "1416": {
      "op": "==",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%3#0"
      ]
    },
    "1417": {
      "op": "assert",
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "1418": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "0x424f585f43"
      ]
    },
    "1419": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1420": {
      "op": "bytec 12 // 0x00023432",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%2#0",
        "maybe_exists%2#0",
        "0x00023432"
      ]
    },
    "1422": {
      "op": "cover 2",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "0x00023432",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1424": {
      "op": "select",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "state_get%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%2#0"
      ]
    },
    "1425": {
      "op": "bytec 12 // 0x00023432",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%2#0",
        "0x00023432"
      ]
    },
    "1427": {
      "op": "==",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%6#0"
      ]
    },
    "1428": {
      "op": "assert",
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "1429": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "a_exists#0"
      ]
    },
    "1430": {
      "op": "!",
      "defined_out": [
        "a#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%7#0"
      ]
    },
    "1431": {
      "op": "assert",
      "stack_out": [
        "a#0"
      ]
    },
    "1432": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1433": {
      "op": "assert",
      "stack_out": []
    },
    "1434": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "1436": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1437": {
      "op": "pop",
      "stack_out": []
    },
    "1438": {
      "retsub": true,
      "op": "retsub"
    },
    "1439": {
      "subroutine": "examples.box_storage.contract.BoxContract.indirect_extract_and_replace",
      "params": {},
      "block": "indirect_extract_and_replace",
      "stack_in": [],
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "1441": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "\"box_large\"",
        "4096"
      ],
      "stack_out": [
        "\"box_large\"",
        "4096"
      ]
    },
    "1443": {
      "op": "intc_3 // 8",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "8"
      ],
      "stack_out": [
        "\"box_large\"",
        "4096",
        "8"
      ]
    },
    "1444": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "1445": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "1446": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "1"
      ]
    },
    "1447": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1448": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1449": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"box_large\""
      ]
    },
    "1451": {
      "op": "intc 4 // 4096",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"box_large\"",
        "4096"
      ]
    },
    "1453": {
      "op": "uncover 2",
      "stack_out": [
        "\"box_large\"",
        "4096",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1455": {
      "op": "box_replace",
      "stack_out": []
    },
    "1456": {
      "retsub": true,
      "op": "retsub"
    },
    "1457": {
      "subroutine": "examples.box_storage.contract.BoxContract.read_boxes",
      "params": {},
      "block": "read_boxes",
      "stack_in": [],
      "op": "bytec 7 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "1459": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1460": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "1461": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "1462": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "1"
      ]
    },
    "1463": {
      "op": "+",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1464": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#1",
        "1"
      ]
    },
    "1465": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1466": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"b\""
      ]
    },
    "1468": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "1469": {
      "error": "check self.box_b exists",
      "op": "assert // check self.box_b exists",
      "stack_out": [
        "tmp%1#0",
        "aggregate%box_get%2#0"
      ]
    },
    "1470": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1473": {
      "op": "bytec_1 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "0x424f585f43"
      ]
    },
    "1474": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "1475": {
      "error": "check self.box_c exists",
      "op": "assert // check self.box_c exists",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0"
      ]
    },
    "1476": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "aggregate%box_get%4#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0",
        "\"box_large\""
      ]
    },
    "1478": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "aggregate%box_get%4#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0",
        "\"box_large\"",
        "4096"
      ]
    },
    "1480": {
      "op": "intc_3 // 8",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "8",
        "aggregate%box_get%4#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0",
        "\"box_large\"",
        "4096",
        "8"
      ]
    },
    "1481": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%box_get%4#0",
        "box%box_extract%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0",
        "box%box_extract%0#0"
      ]
    },
    "1482": {
      "op": "btoi",
      "defined_out": [
        "aggregate%box_get%4#0",
        "tmp%1#0",
        "tmp%2#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0",
        "values%0#0"
      ]
    },
    "1483": {
      "retsub": true,
      "op": "retsub"
    },
    "1484": {
      "subroutine": "examples.box_storage.contract.BoxContract.boxes_exist",
      "params": {},
      "block": "boxes_exist",
      "stack_in": [],
      "op": "bytec 7 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "1486": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1487": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1489": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\"",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "\"b\""
      ]
    },
    "1491": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1492": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1494": {
      "op": "bytec_1 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "0x424f585f43"
      ]
    },
    "1495": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "_%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1496": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ]
    },
    "1498": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "\"box_large\""
      ]
    },
    "1500": {
      "op": "box_len",
      "defined_out": [
        "_%3#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "_%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1501": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ]
    },
    "1503": {
      "retsub": true,
      "op": "retsub"
    },
    "1504": {
      "subroutine": "examples.box_storage.contract.BoxContract.create_dynamic_arr_struct",
      "params": {},
      "block": "create_dynamic_arr_struct",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1506": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1507": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "2"
      ]
    },
    "1508": {
      "op": "*",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1509": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "1510": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1511": {
      "op": "bytec 14 // 0x0014",
      "defined_out": [
        "0x0014",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%val_as_bytes%0#0",
        "0x0014"
      ]
    },
    "1513": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%1#0"
      ]
    },
    "1514": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%2#0"
      ]
    },
    "1515": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1516": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "1517": {
      "op": "pushbytes 0x001600000000",
      "defined_out": [
        "0x001600000000",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "0x001600000000"
      ]
    },
    "1525": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "1526": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1527": {
      "op": "box_del",
      "defined_out": [
        "aggregate%concat%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "{box_del}"
      ]
    },
    "1528": {
      "op": "pop",
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "1529": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "aggregate%concat%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1530": {
      "op": "swap",
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "aggregate%concat%1#0"
      ]
    },
    "1531": {
      "op": "box_put",
      "stack_out": []
    },
    "1532": {
      "retsub": true,
      "op": "retsub"
    },
    "1533": {
      "subroutine": "examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct",
      "params": {},
      "block": "delete_dynamic_arr_struct",
      "stack_in": [],
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "\"dynamic_arr_struct\""
      ]
    },
    "1534": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1535": {
      "op": "pop",
      "stack_out": []
    },
    "1536": {
      "retsub": true,
      "op": "retsub"
    },
    "1537": {
      "subroutine": "examples.box_storage.contract.BoxContract.append_dynamic_arr_struct",
      "params": {
        "times#0": "uint64"
      },
      "block": "append_dynamic_arr_struct",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1540": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "\"dynamic_arr_struct\""
      ]
    },
    "1541": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "10"
      ],
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "10"
      ]
    },
    "1543": {
      "op": "intc_3 // 8",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "10",
        "8"
      ],
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "10",
        "8"
      ]
    },
    "1544": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "1545": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "1546": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "2"
      ]
    },
    "1547": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1548": {
      "error": "expected 2",
      "op": "assert // expected 2",
      "stack_out": []
    },
    "1549": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "\"dynamic_arr_struct\""
      ]
    },
    "1550": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20"
      ],
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1552": {
      "op": "intc_1 // 2",
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1553": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0"
      ],
      "stack_out": [
        "box%box_extract%1#0"
      ]
    },
    "1554": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0"
      ]
    },
    "1555": {
      "op": "dup",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0"
      ]
    },
    "1556": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1557": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1559": {
      "op": "intc_1 // 2",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "1560": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%box_extract%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "box%box_extract%2#0"
      ]
    },
    "1561": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "box%btoi%0#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "box%btoi%0#0"
      ]
    },
    "1562": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "box%btoi%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1563": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%0#0"
      ]
    },
    "1564": {
      "op": "intc_1 // 2",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%0#0",
        "2"
      ]
    },
    "1565": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%box_extract%3#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "box%box_extract%3#0"
      ]
    },
    "1566": {
      "op": "btoi",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "arr2_len#0"
      ]
    },
    "1567": {
      "op": "dig 1",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "arr_len#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "arr2_len#0",
        "arr_len#0 (copy)"
      ]
    },
    "1569": {
      "op": "frame_dig -1",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "times#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "arr2_len#0",
        "arr_len#0 (copy)",
        "times#0 (copy)"
      ]
    },
    "1571": {
      "op": "+",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "arr_size#1"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "arr2_len#0",
        "arr_size#1"
      ]
    },
    "1572": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "arr2_len#0",
        "arr_size#1",
        "8"
      ]
    },
    "1573": {
      "op": "*",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "arr2_len#0",
        "tmp%3#1"
      ]
    },
    "1574": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "arr2_len#0",
        "arr_len#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "arr2_len#0",
        "tmp%3#1",
        "22"
      ]
    },
    "1576": {
      "op": "+",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "head_and_dyn_arr#1"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "arr2_len#0",
        "head_and_dyn_arr#1"
      ]
    },
    "1577": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "head_and_dyn_arr#1",
        "arr2_len#0"
      ]
    },
    "1578": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "head_and_dyn_arr#1",
        "arr2_len#0",
        "8"
      ]
    },
    "1579": {
      "op": "*",
      "defined_out": [
        "arr_len#0",
        "head_and_dyn_arr#1",
        "tmp%1#2"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "head_and_dyn_arr#1",
        "tmp%1#2"
      ]
    },
    "1580": {
      "op": "intc_1 // 2",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "head_and_dyn_arr#1",
        "tmp%1#2",
        "2"
      ]
    },
    "1581": {
      "op": "+",
      "defined_out": [
        "arr_len#0",
        "dyn_arr2_index#1",
        "head_and_dyn_arr#1"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "head_and_dyn_arr#1",
        "dyn_arr2_index#1"
      ]
    },
    "1582": {
      "op": "+",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "tmp%3#1"
      ]
    },
    "1583": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "tmp%3#1",
        "\"dynamic_arr_struct\""
      ]
    },
    "1584": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "tmp%3#1"
      ]
    },
    "1585": {
      "op": "box_resize",
      "stack_out": [
        "arr_len#0",
        "arr_len#0"
      ]
    },
    "1586": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "8"
      ]
    },
    "1587": {
      "op": "*",
      "stack_out": [
        "arr_len#0",
        "tmp%3#1"
      ]
    },
    "1588": {
      "op": "pushint 22 // 22",
      "stack_out": [
        "arr_len#0",
        "tmp%3#1",
        "22"
      ]
    },
    "1590": {
      "op": "+",
      "defined_out": [
        "arr_len#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%5#1"
      ]
    },
    "1591": {
      "op": "frame_dig -1",
      "stack_out": [
        "arr_len#0",
        "tmp%5#1",
        "times#0 (copy)"
      ]
    },
    "1593": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr_len#0",
        "tmp%5#1",
        "times#0 (copy)",
        "8"
      ]
    },
    "1594": {
      "op": "*",
      "defined_out": [
        "arr_len#0",
        "tmp%5#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%5#1",
        "tmp%6#0"
      ]
    },
    "1595": {
      "op": "bzero",
      "defined_out": [
        "arr_len#0",
        "tmp%5#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%5#1",
        "tmp%7#0"
      ]
    },
    "1596": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr_len#0",
        "tmp%5#1",
        "tmp%7#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1597": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "tmp%7#0",
        "\"dynamic_arr_struct\"",
        "tmp%5#1"
      ]
    },
    "1599": {
      "op": "intc_2 // 0",
      "stack_out": [
        "arr_len#0",
        "tmp%7#0",
        "\"dynamic_arr_struct\"",
        "tmp%5#1",
        "0"
      ]
    },
    "1600": {
      "op": "uncover 3",
      "stack_out": [
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "tmp%5#1",
        "0",
        "tmp%7#0"
      ]
    },
    "1602": {
      "op": "box_splice",
      "stack_out": [
        "arr_len#0"
      ]
    },
    "1603": {
      "op": "intc_2 // 0",
      "defined_out": [
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0"
      ]
    },
    "1604": {
      "block": "append_dynamic_arr_struct_for_header@1",
      "stack_in": [
        "arr_len#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "1606": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "times#0 (copy)"
      ]
    },
    "1608": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1609": {
      "op": "bz append_dynamic_arr_struct_after_for@4",
      "stack_out": [
        "arr_len#0",
        "i#0"
      ]
    },
    "1612": {
      "op": "frame_dig 1",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "1614": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "1615": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1616": {
      "op": "frame_dig 0",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ]
    },
    "1618": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0 (copy)",
        "arr_len#0 (copy)"
      ]
    },
    "1619": {
      "op": "cover 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0 (copy)"
      ]
    },
    "1621": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0 (copy)",
        "8"
      ]
    },
    "1622": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%index_bytes_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%index_bytes_offset%0#0"
      ]
    },
    "1623": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%index_bytes_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%index_bytes_offset%0#0",
        "22"
      ]
    },
    "1625": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%offset%5#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%offset%5#0"
      ]
    },
    "1626": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%offset%5#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%offset%5#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1627": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_arr_struct\"",
        "box%offset%5#0"
      ]
    },
    "1628": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "box%offset%5#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1630": {
      "op": "box_replace",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "1631": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "1"
      ]
    },
    "1632": {
      "op": "+",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "1633": {
      "op": "frame_bury 0",
      "defined_out": [
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "1635": {
      "op": "intc_0 // 1",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1636": {
      "op": "+",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "1637": {
      "op": "frame_bury 1",
      "defined_out": [
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0"
      ]
    },
    "1639": {
      "op": "b append_dynamic_arr_struct_for_header@1"
    },
    "1642": {
      "block": "append_dynamic_arr_struct_after_for@4",
      "stack_in": [
        "arr_len#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "1644": {
      "op": "dup",
      "defined_out": [
        "arr_len#0",
        "arr_len#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "arr_len#0 (copy)"
      ]
    },
    "1645": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1646": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)"
      ]
    },
    "1647": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "1648": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%0#0",
        "16"
      ]
    },
    "1650": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "1651": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1652": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%uint16%0#0"
      ]
    },
    "1655": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%uint16%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1656": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%uint16%0#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1658": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "20",
        "aggregate%uint16%0#0"
      ]
    },
    "1660": {
      "op": "box_replace",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "1661": {
      "op": "dup",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "arr_len#0 (copy)"
      ]
    },
    "1662": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "arr_len#0",
        "arr_len#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "8"
      ]
    },
    "1663": {
      "op": "*",
      "defined_out": [
        "arr_len#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "tmp%3#1"
      ]
    },
    "1664": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "arr_len#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "tmp%3#1",
        "24"
      ]
    },
    "1666": {
      "op": "+",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "tmp%3#1"
      ]
    },
    "1667": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "arr_len#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "tmp%3#1",
        "2"
      ]
    },
    "1668": {
      "op": "-",
      "defined_out": [
        "arr2_offset#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "arr2_offset#0"
      ]
    },
    "1669": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "1670": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "aggregate%val_as_bytes%2#0 (copy)",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%val_as_bytes%2#0 (copy)"
      ]
    },
    "1671": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%1#0",
        "aggregate%val_as_bytes%2#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%bitlen%1#0"
      ]
    },
    "1672": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%bitlen%1#0",
        "16"
      ]
    },
    "1674": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%1#0",
        "aggregate%val_as_bytes%2#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%no_overflow%1#0"
      ]
    },
    "1675": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "1676": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%uint16%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%uint16%1#0"
      ]
    },
    "1679": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%uint16%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1680": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "aggregate%uint16%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%uint16%1#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1682": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "18",
        "aggregate%uint16%1#0"
      ]
    },
    "1684": {
      "op": "box_replace",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "1685": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1686": {
      "op": "pushint 20 // 20",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1688": {
      "op": "intc_1 // 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1689": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%box_extract%4#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "box%box_extract%4#0"
      ]
    },
    "1690": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "box%array_length%2#0"
      ]
    },
    "1691": {
      "op": "dup",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "box%array_length%2#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "box%array_length%2#0",
        "box%array_length%2#0 (copy)"
      ]
    },
    "1692": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "box%array_length%2#0 (copy)",
        "arr_len#0"
      ]
    },
    "1694": {
      "op": "==",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "tmp%14#0"
      ]
    },
    "1695": {
      "error": "expected arr length to be correct",
      "op": "assert // expected arr length to be correct",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0"
      ]
    },
    "1696": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1697": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1699": {
      "op": "intc_1 // 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "1700": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "box%box_extract%5#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "box%box_extract%5#0"
      ]
    },
    "1701": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "box%btoi%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "box%btoi%1#0"
      ]
    },
    "1702": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "box%btoi%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1703": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%1#0"
      ]
    },
    "1704": {
      "op": "intc_1 // 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%1#0",
        "2"
      ]
    },
    "1705": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "box%box_extract%6#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "box%box_extract%6#0"
      ]
    },
    "1706": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "box%array_length%3#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "box%array_length%3#0"
      ]
    },
    "1707": {
      "op": "!",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "tmp%16#0"
      ]
    },
    "1708": {
      "error": "expected arr2 length to be correct",
      "op": "assert // expected arr2 length to be correct",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%2#0"
      ]
    },
    "1709": {
      "op": "frame_bury 0"
    },
    "1711": {
      "retsub": true,
      "op": "retsub"
    },
    "1712": {
      "subroutine": "examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct",
      "params": {
        "times#0": "uint64"
      },
      "block": "pop_dynamic_arr_struct",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1715": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "\"dynamic_arr_struct\""
      ]
    },
    "1716": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20"
      ],
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1718": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "2",
        "20"
      ],
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1719": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "1720": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0"
      ],
      "stack_out": [
        "box%array_length%0#0"
      ]
    },
    "1721": {
      "op": "frame_dig -1",
      "defined_out": [
        "box%array_length%0#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%0#0",
        "times#0 (copy)"
      ]
    },
    "1723": {
      "op": "-",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0"
      ]
    },
    "1724": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1725": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1727": {
      "op": "intc_1 // 2",
      "stack_out": [
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "1728": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%box_extract%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "box%box_extract%1#0"
      ]
    },
    "1729": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "box%btoi%0#0"
      ],
      "stack_out": [
        "arr_len#0",
        "box%btoi%0#0"
      ]
    },
    "1730": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr_len#0",
        "box%btoi%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1731": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%0#0"
      ]
    },
    "1732": {
      "op": "intc_1 // 2",
      "stack_out": [
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%0#0",
        "2"
      ]
    },
    "1733": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%box_extract%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "box%box_extract%2#0"
      ]
    },
    "1734": {
      "op": "btoi",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr2_len#0"
      ]
    },
    "1735": {
      "op": "dig 1",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "arr_len#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "arr2_len#0",
        "arr_len#0 (copy)"
      ]
    },
    "1737": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "arr2_len#0",
        "arr_len#0",
        "arr_len#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "arr2_len#0",
        "arr_len#0 (copy)",
        "8"
      ]
    },
    "1738": {
      "op": "*",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "arr_len#0",
        "arr2_len#0",
        "tmp%3#1"
      ]
    },
    "1739": {
      "op": "dup",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "tmp%3#1",
        "tmp%3#1 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "arr2_len#0",
        "tmp%3#1",
        "tmp%3#1 (copy)"
      ]
    },
    "1740": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "arr2_len#0",
        "arr_len#0",
        "tmp%3#1",
        "tmp%3#1 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "arr2_len#0",
        "tmp%3#1",
        "tmp%3#1 (copy)",
        "22"
      ]
    },
    "1742": {
      "op": "+",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "head_and_dyn_arr#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "arr_len#0",
        "arr2_len#0",
        "tmp%3#1",
        "head_and_dyn_arr#0"
      ]
    },
    "1743": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%3#1"
      ]
    },
    "1744": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "arr2_len#0",
        "arr_len#0",
        "head_and_dyn_arr#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "arr_len#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%3#1",
        "24"
      ]
    },
    "1746": {
      "op": "+",
      "stack_out": [
        "arr_len#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%3#1"
      ]
    },
    "1747": {
      "op": "intc_1 // 2",
      "stack_out": [
        "arr_len#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%3#1",
        "2"
      ]
    },
    "1748": {
      "op": "-",
      "defined_out": [
        "arr2_len#0",
        "arr2_offset#0",
        "arr_len#0",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0"
      ]
    },
    "1749": {
      "op": "uncover 3",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "arr_len#0"
      ]
    },
    "1751": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr2_len#0",
        "arr2_offset#0",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1752": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)",
        "arr2_len#0",
        "arr2_offset#0",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "1753": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr2_len#0",
        "arr2_offset#0",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "1754": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr2_len#0",
        "arr2_offset#0",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "16"
      ]
    },
    "1756": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr2_len#0",
        "arr2_offset#0",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "1757": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1758": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%uint16%0#0",
        "arr2_len#0",
        "arr2_offset#0",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%uint16%0#0"
      ]
    },
    "1761": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%uint16%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1762": {
      "op": "pushint 20 // 20",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%uint16%0#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1764": {
      "op": "uncover 2",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "\"dynamic_arr_struct\"",
        "20",
        "aggregate%uint16%0#0"
      ]
    },
    "1766": {
      "op": "box_replace",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0"
      ]
    },
    "1767": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "arr2_len#0",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1768": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)",
        "arr2_len#0",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)"
      ]
    },
    "1769": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%1#0",
        "aggregate%val_as_bytes%1#0",
        "arr2_len#0",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%1#0"
      ]
    },
    "1770": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%1#0",
        "16"
      ]
    },
    "1772": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%1#0",
        "aggregate%val_as_bytes%1#0",
        "arr2_len#0",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%no_overflow%1#0"
      ]
    },
    "1773": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1774": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%uint16%1#0",
        "arr2_len#0",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%uint16%1#0"
      ]
    },
    "1777": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%uint16%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1778": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%uint16%1#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1780": {
      "op": "uncover 2",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "\"dynamic_arr_struct\"",
        "18",
        "aggregate%uint16%1#0"
      ]
    },
    "1782": {
      "op": "box_replace",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0"
      ]
    },
    "1783": {
      "op": "frame_dig -1",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "times#0 (copy)"
      ]
    },
    "1785": {
      "op": "intc_3 // 8",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "times#0 (copy)",
        "8"
      ]
    },
    "1786": {
      "op": "*",
      "defined_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%8#0"
      ]
    },
    "1787": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%8#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1788": {
      "op": "dig 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "head_and_dyn_arr#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%8#0",
        "\"dynamic_arr_struct\"",
        "head_and_dyn_arr#0 (copy)"
      ]
    },
    "1790": {
      "op": "uncover 2",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "\"dynamic_arr_struct\"",
        "head_and_dyn_arr#0 (copy)",
        "tmp%8#0"
      ]
    },
    "1792": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "0x",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "head_and_dyn_arr#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "\"dynamic_arr_struct\"",
        "head_and_dyn_arr#0 (copy)",
        "tmp%8#0",
        "0x"
      ]
    },
    "1794": {
      "op": "box_splice",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0"
      ]
    },
    "1795": {
      "op": "swap",
      "stack_out": [
        "head_and_dyn_arr#0",
        "arr2_len#0"
      ]
    },
    "1796": {
      "op": "intc_3 // 8",
      "stack_out": [
        "head_and_dyn_arr#0",
        "arr2_len#0",
        "8"
      ]
    },
    "1797": {
      "op": "*",
      "defined_out": [
        "head_and_dyn_arr#0",
        "tmp%1#3"
      ],
      "stack_out": [
        "head_and_dyn_arr#0",
        "tmp%1#3"
      ]
    },
    "1798": {
      "op": "intc_1 // 2",
      "stack_out": [
        "head_and_dyn_arr#0",
        "tmp%1#3",
        "2"
      ]
    },
    "1799": {
      "op": "+",
      "defined_out": [
        "dyn_arr2_index#1",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "head_and_dyn_arr#0",
        "dyn_arr2_index#1"
      ]
    },
    "1800": {
      "op": "+",
      "defined_out": [
        "size#0"
      ],
      "stack_out": [
        "size#0"
      ]
    },
    "1801": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "size#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1802": {
      "op": "swap",
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "size#0"
      ]
    },
    "1803": {
      "op": "box_resize",
      "stack_out": []
    },
    "1804": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "\"dynamic_arr_struct\""
      ]
    },
    "1805": {
      "op": "pushint 20 // 20",
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1807": {
      "op": "intc_1 // 2",
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1808": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%3#0"
      ],
      "stack_out": [
        "box%box_extract%3#0"
      ]
    },
    "1809": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%2#0"
      ],
      "stack_out": [
        "box%array_length%2#0"
      ]
    },
    "1810": {
      "retsub": true,
      "op": "retsub"
    },
    "1811": {
      "subroutine": "examples.box_storage.contract.BoxContract.nested_read",
      "params": {},
      "block": "nested_read",
      "stack_in": [],
      "op": "bytec_2 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "1812": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"box\"",
        "0"
      ],
      "stack_out": [
        "\"box\"",
        "0"
      ]
    },
    "1813": {
      "op": "intc_3 // 8",
      "defined_out": [
        "\"box\"",
        "0",
        "8"
      ],
      "stack_out": [
        "\"box\"",
        "0",
        "8"
      ]
    },
    "1814": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "1815": {
      "op": "btoi",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1816": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "\"box\""
      ]
    },
    "1817": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "\"box\"",
        "12",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "\"box\"",
        "12"
      ]
    },
    "1819": {
      "op": "intc_3 // 8",
      "stack_out": [
        "a#0",
        "\"box\"",
        "12",
        "8"
      ]
    },
    "1820": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "box%box_extract%1#0"
      ],
      "stack_out": [
        "a#0",
        "box%box_extract%1#0"
      ]
    },
    "1821": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "1822": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "\"box\""
      ]
    },
    "1823": {
      "op": "pushint 38 // 38",
      "defined_out": [
        "\"box\"",
        "38",
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "\"box\"",
        "38"
      ]
    },
    "1825": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"box\"",
        "2",
        "38",
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "\"box\"",
        "38",
        "2"
      ]
    },
    "1826": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "b#0",
        "box%box_extract%2#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%box_extract%2#0"
      ]
    },
    "1827": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "box%btoi%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%btoi%0#0"
      ]
    },
    "1828": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "1829": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "\"box\""
      ]
    },
    "1830": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "\"box\"",
        "40",
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "\"box\"",
        "40"
      ]
    },
    "1832": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "\"box\"",
        "40",
        "2"
      ]
    },
    "1833": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "b#0",
        "box%box_extract%3#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%box_extract%3#0"
      ]
    },
    "1834": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "box%btoi%1#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%btoi%1#0"
      ]
    },
    "1835": {
      "op": "pushint 38 // 38",
      "stack_out": [
        "a#0",
        "b#0",
        "box%btoi%1#0",
        "38"
      ]
    },
    "1837": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "box%offset%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%offset%4#0"
      ]
    },
    "1838": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "box%offset%4#0",
        "\"box\""
      ]
    },
    "1839": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "a#0",
        "b#0",
        "box%offset%4#0",
        "box%offset%4#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%offset%4#0",
        "\"box\"",
        "box%offset%4#0 (copy)"
      ]
    },
    "1841": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "box%offset%4#0",
        "\"box\"",
        "box%offset%4#0 (copy)",
        "2"
      ]
    },
    "1842": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "b#0",
        "box%box_extract%4#0",
        "box%offset%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%offset%4#0",
        "box%box_extract%4#0"
      ]
    },
    "1843": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "box%btoi%2#0",
        "box%offset%4#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%offset%4#0",
        "box%btoi%2#0"
      ]
    },
    "1844": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "a#0",
        "b#0",
        "box%offset%4#0"
      ]
    },
    "1845": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "box%offset%4#0",
        "2"
      ]
    },
    "1846": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "box%offset%5#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%offset%5#0"
      ]
    },
    "1847": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "box%offset%5#0",
        "\"box\""
      ]
    },
    "1848": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "\"box\"",
        "box%offset%5#0"
      ]
    },
    "1849": {
      "op": "intc_3 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "\"box\"",
        "box%offset%5#0",
        "8"
      ]
    },
    "1850": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "b#0",
        "box%box_extract%5#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%box_extract%5#0"
      ]
    },
    "1851": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0"
      ]
    },
    "1852": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "\"box\""
      ]
    },
    "1853": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"box\"",
        "20",
        "a#0",
        "arr_0_0#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "\"box\"",
        "20"
      ]
    },
    "1855": {
      "op": "intc_3 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "\"box\"",
        "20",
        "8"
      ]
    },
    "1856": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%box_extract%6#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "box%box_extract%6#0"
      ]
    },
    "1857": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0"
      ]
    },
    "1858": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "\"box\""
      ]
    },
    "1859": {
      "op": "pushint 30 // 30",
      "defined_out": [
        "\"box\"",
        "30",
        "a#0",
        "arr_0_0#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "\"box\"",
        "30"
      ]
    },
    "1861": {
      "op": "intc_3 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "\"box\"",
        "30",
        "8"
      ]
    },
    "1862": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%box_extract%7#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "box%box_extract%7#0"
      ]
    },
    "1863": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0"
      ]
    },
    "1864": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "\"box\""
      ]
    },
    "1865": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "\"box\"",
        "10",
        "a#0",
        "arr_0_0#0",
        "b#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "\"box\"",
        "10"
      ]
    },
    "1867": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "\"box\"",
        "10",
        "2"
      ]
    },
    "1868": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%box_extract%8#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%box_extract%8#0"
      ]
    },
    "1869": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%btoi%3#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0"
      ]
    },
    "1870": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "\"box\""
      ]
    },
    "1871": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%btoi%3#0",
        "box%btoi%3#0 (copy)",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "\"box\"",
        "box%btoi%3#0 (copy)"
      ]
    },
    "1873": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "\"box\"",
        "box%btoi%3#0 (copy)",
        "2"
      ]
    },
    "1874": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%box_extract%9#0",
        "box%btoi%3#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "box%box_extract%9#0"
      ]
    },
    "1875": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%btoi%3#0",
        "box%btoi%4#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "box%btoi%4#0"
      ]
    },
    "1876": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%btoi%3#0",
        "box%btoi%4#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "box%btoi%4#0",
        "1"
      ]
    },
    "1877": {
      "op": ">",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%btoi%3#0",
        "box%index_ok%2#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "box%index_ok%2#0"
      ]
    },
    "1878": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0"
      ]
    },
    "1879": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "box%btoi%3#0 (copy)"
      ]
    },
    "1880": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%btoi%3#0",
        "box%btoi%3#0 (copy)",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "box%btoi%3#0 (copy)",
        "4"
      ]
    },
    "1882": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%add%4#0",
        "box%btoi%3#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "box%add%4#0"
      ]
    },
    "1883": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "box%add%4#0",
        "\"box\""
      ]
    },
    "1884": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "\"box\"",
        "box%add%4#0"
      ]
    },
    "1885": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "\"box\"",
        "box%add%4#0",
        "2"
      ]
    },
    "1886": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%box_extract%10#0",
        "box%btoi%3#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "box%box_extract%10#0"
      ]
    },
    "1887": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%btoi%3#0",
        "box%btoi%5#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "box%btoi%5#0"
      ]
    },
    "1888": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%offset%11#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%11#0"
      ]
    },
    "1889": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%offset%11#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%11#0",
        "18"
      ]
    },
    "1891": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%offset%12#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0"
      ]
    },
    "1892": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0",
        "\"box\""
      ]
    },
    "1893": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%offset%12#0",
        "box%offset%12#0 (copy)",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0",
        "\"box\"",
        "box%offset%12#0 (copy)"
      ]
    },
    "1895": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0",
        "\"box\"",
        "box%offset%12#0 (copy)",
        "2"
      ]
    },
    "1896": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%box_extract%11#0",
        "box%offset%12#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0",
        "box%box_extract%11#0"
      ]
    },
    "1897": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%btoi%6#0",
        "box%offset%12#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0",
        "box%btoi%6#0"
      ]
    },
    "1898": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0"
      ]
    },
    "1899": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0",
        "box%offset%12#0 (copy)"
      ]
    },
    "1900": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0",
        "box%offset%12#0 (copy)",
        "2"
      ]
    },
    "1901": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%add%6#0",
        "box%offset%12#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0",
        "box%add%6#0"
      ]
    },
    "1902": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0",
        "box%add%6#0",
        "\"box\""
      ]
    },
    "1903": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0",
        "\"box\"",
        "box%add%6#0"
      ]
    },
    "1904": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0",
        "\"box\"",
        "box%add%6#0",
        "2"
      ]
    },
    "1905": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%box_extract%12#0",
        "box%offset%12#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0",
        "box%box_extract%12#0"
      ]
    },
    "1906": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%btoi%7#0",
        "box%offset%12#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%12#0",
        "box%btoi%7#0"
      ]
    },
    "1907": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%offset%13#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%13#0"
      ]
    },
    "1908": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%13#0",
        "\"box\""
      ]
    },
    "1909": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%offset%13#0",
        "box%offset%13#0 (copy)",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%13#0",
        "\"box\"",
        "box%offset%13#0 (copy)"
      ]
    },
    "1911": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%13#0",
        "\"box\"",
        "box%offset%13#0 (copy)",
        "2"
      ]
    },
    "1912": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%box_extract%13#0",
        "box%offset%13#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%13#0",
        "box%box_extract%13#0"
      ]
    },
    "1913": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%btoi%8#0",
        "box%offset%13#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%13#0",
        "box%btoi%8#0"
      ]
    },
    "1914": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%13#0"
      ]
    },
    "1915": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%13#0",
        "2"
      ]
    },
    "1916": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%offset%14#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%14#0"
      ]
    },
    "1917": {
      "op": "bytec_2 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%offset%14#0",
        "\"box\""
      ]
    },
    "1918": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "\"box\"",
        "box%offset%14#0"
      ]
    },
    "1919": {
      "op": "intc_3 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "\"box\"",
        "box%offset%14#0",
        "8"
      ]
    },
    "1920": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "box%box_extract%14#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "box%box_extract%14#0"
      ]
    },
    "1921": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_0_0#0",
        "b#0",
        "c#0",
        "d#0",
        "woah_1_0_0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "woah_1_0_0#0"
      ]
    },
    "1922": {
      "op": "uncover 5",
      "stack_out": [
        "b#0",
        "arr_0_0#0",
        "c#0",
        "d#0",
        "woah_1_0_0#0",
        "a#0"
      ]
    },
    "1924": {
      "op": "uncover 5",
      "stack_out": [
        "arr_0_0#0",
        "c#0",
        "d#0",
        "woah_1_0_0#0",
        "a#0",
        "b#0"
      ]
    },
    "1926": {
      "op": "+",
      "defined_out": [
        "arr_0_0#0",
        "c#0",
        "d#0",
        "tmp%0#0",
        "woah_1_0_0#0"
      ],
      "stack_out": [
        "arr_0_0#0",
        "c#0",
        "d#0",
        "woah_1_0_0#0",
        "tmp%0#0"
      ]
    },
    "1927": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "d#0",
        "woah_1_0_0#0",
        "tmp%0#0",
        "arr_0_0#0"
      ]
    },
    "1929": {
      "op": "+",
      "defined_out": [
        "c#0",
        "d#0",
        "tmp%1#0",
        "woah_1_0_0#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "woah_1_0_0#0",
        "tmp%1#0"
      ]
    },
    "1930": {
      "op": "uncover 3",
      "stack_out": [
        "d#0",
        "woah_1_0_0#0",
        "tmp%1#0",
        "c#0"
      ]
    },
    "1932": {
      "op": "+",
      "defined_out": [
        "d#0",
        "tmp%2#0",
        "woah_1_0_0#0"
      ],
      "stack_out": [
        "d#0",
        "woah_1_0_0#0",
        "tmp%2#0"
      ]
    },
    "1933": {
      "op": "uncover 2",
      "stack_out": [
        "woah_1_0_0#0",
        "tmp%2#0",
        "d#0"
      ]
    },
    "1935": {
      "op": "+",
      "defined_out": [
        "tmp%3#0",
        "woah_1_0_0#0"
      ],
      "stack_out": [
        "woah_1_0_0#0",
        "tmp%3#0"
      ]
    },
    "1936": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1937": {
      "retsub": true,
      "op": "retsub"
    },
    "1938": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct",
      "params": {},
      "block": "sum_dynamic_arr_struct",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1941": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "box%array_length%1#0"
      ]
    },
    "1943": {
      "op": "dup",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ]
    },
    "1944": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1945": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\"",
        "0"
      ]
    },
    "1946": {
      "op": "intc_3 // 8",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "0",
        "8"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\"",
        "0",
        "8"
      ]
    },
    "1947": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "box%box_extract%0#0"
      ]
    },
    "1948": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0"
      ]
    },
    "1949": {
      "op": "dup",
      "defined_out": [
        "values%0#0",
        "values%0#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%0#0 (copy)"
      ]
    },
    "1950": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "values%0#0",
        "values%0#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%0#0 (copy)",
        "1"
      ]
    },
    "1951": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "tmp%0#0"
      ]
    },
    "1952": {
      "error": "expected 1",
      "op": "assert // expected 1",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0"
      ]
    },
    "1953": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1954": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "10",
        "values%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "\"dynamic_arr_struct\"",
        "10"
      ]
    },
    "1956": {
      "op": "intc_3 // 8",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "\"dynamic_arr_struct\"",
        "10",
        "8"
      ]
    },
    "1957": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "box%box_extract%1#0"
      ]
    },
    "1958": {
      "op": "btoi",
      "defined_out": [
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0"
      ]
    },
    "1959": {
      "op": "dup",
      "defined_out": [
        "values%0#0",
        "values%1#0",
        "values%1#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0",
        "values%1#0 (copy)"
      ]
    },
    "1960": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "values%0#0",
        "values%1#0",
        "values%1#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0",
        "values%1#0 (copy)",
        "2"
      ]
    },
    "1961": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0",
        "tmp%1#0"
      ]
    },
    "1962": {
      "error": "expected 2",
      "op": "assert // expected 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0"
      ]
    },
    "1963": {
      "op": "+",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0"
      ]
    },
    "1964": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1965": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1967": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1968": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%4#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%box_extract%4#0"
      ]
    },
    "1969": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0"
      ]
    },
    "1970": {
      "op": "intc_2 // 0",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1971": {
      "block": "sum_dynamic_arr_struct_for_header@1",
      "stack_in": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1973": {
      "op": "frame_dig 3",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%array_length%0#0"
      ]
    },
    "1975": {
      "op": "<",
      "defined_out": [
        "box%array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "1976": {
      "op": "bz sum_dynamic_arr_struct_after_for@4",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1979": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1980": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1982": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "2",
        "20",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1983": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%0#0",
        "box%box_extract%5#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%box_extract%5#0"
      ]
    },
    "1984": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "box%btoi%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%0#0"
      ]
    },
    "1985": {
      "op": "frame_dig 4",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1987": {
      "op": "dup"
    },
    "1988": {
      "op": "uncover 2",
      "defined_out": [
        "box%array_length%0#0",
        "box%btoi%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "box%btoi%0#0"
      ]
    },
    "1990": {
      "op": "<",
      "defined_out": [
        "box%array_length%0#0",
        "box%index_ok%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%index_ok%0#0"
      ]
    },
    "1991": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1992": {
      "op": "dup",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "1993": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "8"
      ]
    },
    "1994": {
      "op": "*",
      "defined_out": [
        "box%array_length%0#0",
        "box%index_bytes_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%index_bytes_offset%0#0"
      ]
    },
    "1995": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "box%array_length%0#0",
        "box%index_bytes_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%index_bytes_offset%0#0",
        "22"
      ]
    },
    "1997": {
      "op": "+",
      "defined_out": [
        "box%array_length%0#0",
        "box%offset%6#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%offset%6#0"
      ]
    },
    "1998": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%offset%6#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1999": {
      "op": "swap",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "box%offset%6#0"
      ]
    },
    "2000": {
      "op": "intc_3 // 8",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "box%offset%6#0",
        "8"
      ]
    },
    "2001": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%0#0",
        "box%box_extract%6#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%box_extract%6#0"
      ]
    },
    "2002": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "val#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "val#0"
      ]
    },
    "2003": {
      "op": "frame_dig 2",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "val#0",
        "total#0"
      ]
    },
    "2005": {
      "op": "+",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2006": {
      "op": "frame_bury 2",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2008": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "2009": {
      "op": "+",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2010": {
      "op": "frame_bury 4",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2012": {
      "op": "b sum_dynamic_arr_struct_for_header@1"
    },
    "2015": {
      "block": "sum_dynamic_arr_struct_after_for@4",
      "stack_in": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2016": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "2018": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "2019": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%7#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%box_extract%7#0"
      ]
    },
    "2020": {
      "op": "btoi",
      "defined_out": [
        "box%btoi%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%1#0"
      ]
    },
    "2021": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2022": {
      "op": "swap",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%1#0"
      ]
    },
    "2023": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%1#0",
        "2"
      ]
    },
    "2024": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%8#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%box_extract%8#0"
      ]
    },
    "2025": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%array_length%1#0"
      ]
    },
    "2026": {
      "op": "frame_bury 0",
      "defined_out": [
        "box%array_length%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2028": {
      "op": "intc_2 // 0",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0"
      ]
    },
    "2029": {
      "op": "frame_bury 1",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2031": {
      "block": "sum_dynamic_arr_struct_for_header@5",
      "stack_in": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0"
      ]
    },
    "2033": {
      "op": "frame_dig 0",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%array_length%1#0"
      ]
    },
    "2035": {
      "op": "<",
      "defined_out": [
        "box%array_length%1#0",
        "continue_looping%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%1#0"
      ]
    },
    "2036": {
      "op": "bz sum_dynamic_arr_struct_after_for@8",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2039": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2040": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "2042": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "2",
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "2043": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%1#0",
        "box%box_extract%9#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%box_extract%9#0"
      ]
    },
    "2044": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%1#0",
        "box%btoi%2#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%2#0"
      ]
    },
    "2045": {
      "op": "frame_dig 1",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%2#0",
        "item_index_internal%1#0"
      ]
    },
    "2047": {
      "op": "dup",
      "defined_out": [
        "box%array_length%1#0",
        "box%btoi%2#0",
        "item_index_internal%1#0",
        "item_index_internal%1#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%2#0",
        "item_index_internal%1#0 (copy)",
        "item_index_internal%1#0 (copy)"
      ]
    },
    "2048": {
      "op": "cover 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%btoi%2#0",
        "item_index_internal%1#0 (copy)"
      ]
    },
    "2050": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "box%array_length%1#0",
        "box%btoi%2#0",
        "item_index_internal%1#0",
        "item_index_internal%1#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%btoi%2#0",
        "item_index_internal%1#0 (copy)",
        "8"
      ]
    },
    "2051": {
      "op": "*",
      "defined_out": [
        "box%array_length%1#0",
        "box%btoi%2#0",
        "box%index_bytes_offset%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%btoi%2#0",
        "box%index_bytes_offset%1#0"
      ]
    },
    "2052": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%btoi%2#0",
        "box%index_bytes_offset%1#0",
        "2"
      ]
    },
    "2053": {
      "op": "+",
      "defined_out": [
        "box%array_length%1#0",
        "box%btoi%2#0",
        "box%element_offset%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%btoi%2#0",
        "box%element_offset%1#0"
      ]
    },
    "2054": {
      "op": "+",
      "defined_out": [
        "box%array_length%1#0",
        "box%offset%9#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%offset%9#0"
      ]
    },
    "2055": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%offset%9#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2056": {
      "op": "swap",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\"",
        "box%offset%9#0"
      ]
    },
    "2057": {
      "op": "intc_3 // 8",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\"",
        "box%offset%9#0",
        "8"
      ]
    },
    "2058": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%1#0",
        "box%box_extract%10#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%box_extract%10#0"
      ]
    },
    "2059": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "val#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "val#0"
      ]
    },
    "2060": {
      "op": "frame_dig 2",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "val#0",
        "total#0"
      ]
    },
    "2062": {
      "op": "+",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "total#0"
      ]
    },
    "2063": {
      "op": "frame_bury 2",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0"
      ]
    },
    "2065": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "1"
      ]
    },
    "2066": {
      "op": "+",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0"
      ]
    },
    "2067": {
      "op": "frame_bury 1",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2069": {
      "op": "b sum_dynamic_arr_struct_for_header@5"
    },
    "2072": {
      "block": "sum_dynamic_arr_struct_after_for@8",
      "stack_in": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2074": {
      "op": "frame_bury 0"
    },
    "2076": {
      "retsub": true,
      "op": "retsub"
    },
    "2077": {
      "subroutine": "examples.box_storage.contract.BoxContract.create_dynamic_box",
      "params": {},
      "block": "create_dynamic_box",
      "stack_in": [],
      "op": "bytec_3 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "2078": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2079": {
      "op": "pop",
      "stack_out": []
    },
    "2080": {
      "op": "bytec_3 // \"dynamic_box\"",
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "2081": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "\"dynamic_box\"",
        "0x0000"
      ],
      "stack_out": [
        "\"dynamic_box\"",
        "0x0000"
      ]
    },
    "2085": {
      "op": "box_put",
      "stack_out": []
    },
    "2086": {
      "retsub": true,
      "op": "retsub"
    },
    "2087": {
      "subroutine": "examples.box_storage.contract.BoxContract.delete_dynamic_box",
      "params": {},
      "block": "delete_dynamic_box",
      "stack_in": [],
      "op": "bytec_3 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "2088": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2089": {
      "op": "pop",
      "stack_out": []
    },
    "2090": {
      "retsub": true,
      "op": "retsub"
    },
    "2091": {
      "subroutine": "examples.box_storage.contract.BoxContract.append_dynamic_box",
      "params": {
        "times#0": "uint64"
      },
      "block": "append_dynamic_box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2094": {
      "op": "bytec_3 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "2095": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"dynamic_box\"",
        "0"
      ],
      "stack_out": [
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2096": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "2"
      ],
      "stack_out": [
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2097": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "2098": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0"
      ]
    },
    "2099": {
      "op": "dup",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0"
      ]
    },
    "2100": {
      "op": "frame_dig -1",
      "defined_out": [
        "arr_len#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "times#0 (copy)"
      ]
    },
    "2102": {
      "op": "+",
      "defined_out": [
        "arr_len#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%1#0"
      ]
    },
    "2103": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "arr_len#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%1#0",
        "8"
      ]
    },
    "2104": {
      "op": "*",
      "defined_out": [
        "arr_len#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%2#0"
      ]
    },
    "2105": {
      "op": "intc_1 // 2",
      "stack_out": [
        "arr_len#0",
        "tmp%2#0",
        "2"
      ]
    },
    "2106": {
      "op": "+",
      "defined_out": [
        "arr_len#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%3#0"
      ]
    },
    "2107": {
      "op": "bytec_3 // \"dynamic_box\"",
      "stack_out": [
        "arr_len#0",
        "tmp%3#0",
        "\"dynamic_box\""
      ]
    },
    "2108": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "\"dynamic_box\"",
        "tmp%3#0"
      ]
    },
    "2109": {
      "op": "box_resize",
      "stack_out": [
        "arr_len#0"
      ]
    },
    "2110": {
      "op": "intc_2 // 0",
      "defined_out": [
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0"
      ]
    },
    "2111": {
      "block": "append_dynamic_box_for_header@1",
      "stack_in": [
        "arr_len#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "2113": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "times#0 (copy)"
      ]
    },
    "2115": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "2116": {
      "op": "bz append_dynamic_box_after_for@4",
      "stack_out": [
        "arr_len#0",
        "i#0"
      ]
    },
    "2119": {
      "op": "frame_dig 1",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "2121": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "2122": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2123": {
      "op": "frame_dig 0",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ]
    },
    "2125": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0 (copy)",
        "arr_len#0 (copy)"
      ]
    },
    "2126": {
      "op": "cover 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0 (copy)"
      ]
    },
    "2128": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0 (copy)",
        "8"
      ]
    },
    "2129": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%index_bytes_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%index_bytes_offset%0#0"
      ]
    },
    "2130": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%index_bytes_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%index_bytes_offset%0#0",
        "2"
      ]
    },
    "2131": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%offset%2#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%offset%2#0"
      ]
    },
    "2132": {
      "op": "bytec_3 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%offset%2#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%offset%2#0",
        "\"dynamic_box\""
      ]
    },
    "2133": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_box\"",
        "box%offset%2#0"
      ]
    },
    "2134": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_box\"",
        "box%offset%2#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2136": {
      "op": "box_replace",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "2137": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "1"
      ]
    },
    "2138": {
      "op": "+",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "2139": {
      "op": "frame_bury 0",
      "defined_out": [
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "2141": {
      "op": "intc_0 // 1",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "2142": {
      "op": "+",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "2143": {
      "op": "frame_bury 1",
      "defined_out": [
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0"
      ]
    },
    "2145": {
      "op": "b append_dynamic_box_for_header@1"
    },
    "2148": {
      "block": "append_dynamic_box_after_for@4",
      "stack_in": [
        "arr_len#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "2150": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "2151": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)"
      ]
    },
    "2152": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "2153": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%0#0",
        "16"
      ]
    },
    "2155": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "2156": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "2157": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%uint16%0#0"
      ]
    },
    "2160": {
      "op": "bytec_3 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%uint16%0#0",
        "\"dynamic_box\""
      ]
    },
    "2161": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%uint16%0#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2162": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "\"dynamic_box\"",
        "0",
        "aggregate%uint16%0#0"
      ]
    },
    "2164": {
      "op": "box_replace",
      "stack_out": [
        "arr_len#0",
        "i#0"
      ]
    },
    "2165": {
      "op": "bytec_3 // \"dynamic_box\"",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "\"dynamic_box\""
      ]
    },
    "2166": {
      "op": "intc_2 // 0",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2167": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "2",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2168": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%box_extract%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%box_extract%1#0"
      ]
    },
    "2169": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "box%array_length%0#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "box%array_length%0#0"
      ]
    },
    "2170": {
      "op": "frame_bury 0"
    },
    "2172": {
      "retsub": true,
      "op": "retsub"
    },
    "2173": {
      "subroutine": "examples.box_storage.contract.BoxContract.pop_dynamic_box",
      "params": {
        "times#0": "uint64"
      },
      "block": "pop_dynamic_box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2176": {
      "op": "bytec_3 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "2177": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"dynamic_box\"",
        "0"
      ],
      "stack_out": [
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2178": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "2"
      ],
      "stack_out": [
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2179": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "2180": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2181": {
      "op": "frame_dig -1",
      "defined_out": [
        "times#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "times#0 (copy)"
      ]
    },
    "2183": {
      "op": "-",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0"
      ]
    },
    "2184": {
      "op": "dup",
      "defined_out": [
        "arr_len#0",
        "arr_len#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0 (copy)"
      ]
    },
    "2185": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2186": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "2187": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "2188": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "16"
      ]
    },
    "2190": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "2191": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2192": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%uint16%0#0"
      ]
    },
    "2195": {
      "op": "bytec_3 // \"dynamic_box\"",
      "stack_out": [
        "arr_len#0",
        "aggregate%uint16%0#0",
        "\"dynamic_box\""
      ]
    },
    "2196": {
      "op": "intc_2 // 0",
      "stack_out": [
        "arr_len#0",
        "aggregate%uint16%0#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2197": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "\"dynamic_box\"",
        "0",
        "aggregate%uint16%0#0"
      ]
    },
    "2199": {
      "op": "box_replace",
      "stack_out": [
        "arr_len#0"
      ]
    },
    "2200": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "8"
      ]
    },
    "2201": {
      "op": "*",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2202": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%3#0",
        "2"
      ]
    },
    "2203": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2204": {
      "op": "bytec_3 // \"dynamic_box\"",
      "stack_out": [
        "tmp%4#0",
        "\"dynamic_box\""
      ]
    },
    "2205": {
      "op": "swap",
      "stack_out": [
        "\"dynamic_box\"",
        "tmp%4#0"
      ]
    },
    "2206": {
      "op": "box_resize",
      "stack_out": []
    },
    "2207": {
      "op": "bytec_3 // \"dynamic_box\"",
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "2208": {
      "op": "intc_2 // 0",
      "stack_out": [
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2209": {
      "op": "intc_1 // 2",
      "stack_out": [
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2210": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0"
      ],
      "stack_out": [
        "box%box_extract%1#0"
      ]
    },
    "2211": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0"
      ],
      "stack_out": [
        "box%array_length%0#0"
      ]
    },
    "2212": {
      "retsub": true,
      "op": "retsub"
    },
    "2213": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_dynamic_box",
      "params": {},
      "block": "sum_dynamic_box",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2216": {
      "op": "intc_2 // 0"
    },
    "2217": {
      "op": "bytec_3 // \"dynamic_box\""
    },
    "2218": {
      "op": "intc_2 // 0"
    },
    "2219": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "2",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2220": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%box_extract%0#0"
      ]
    },
    "2221": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0"
      ]
    },
    "2222": {
      "op": "intc_2 // 0",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2223": {
      "block": "sum_dynamic_box_for_header@1",
      "stack_in": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2225": {
      "op": "frame_dig 1",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%array_length%0#0"
      ]
    },
    "2227": {
      "op": "<",
      "defined_out": [
        "box%array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "2228": {
      "op": "bz sum_dynamic_box_after_for@4",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2231": {
      "op": "frame_dig 2",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2233": {
      "op": "dup",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "2234": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "8"
      ]
    },
    "2235": {
      "op": "*",
      "defined_out": [
        "box%array_length%0#0",
        "box%index_bytes_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%index_bytes_offset%0#0"
      ]
    },
    "2236": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "box%array_length%0#0",
        "box%index_bytes_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%index_bytes_offset%0#0",
        "2"
      ]
    },
    "2237": {
      "op": "+",
      "defined_out": [
        "box%array_length%0#0",
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0"
      ]
    },
    "2238": {
      "op": "bytec_3 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "box%array_length%0#0",
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0",
        "\"dynamic_box\""
      ]
    },
    "2239": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "\"dynamic_box\"",
        "box%element_offset%0#0"
      ]
    },
    "2240": {
      "op": "intc_3 // 8",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "\"dynamic_box\"",
        "box%element_offset%0#0",
        "8"
      ]
    },
    "2241": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%0#0",
        "box%box_extract%1#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%box_extract%1#0"
      ]
    },
    "2242": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "val#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "val#0"
      ]
    },
    "2243": {
      "op": "frame_dig 0",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "val#0",
        "total#0"
      ]
    },
    "2245": {
      "op": "+",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2246": {
      "op": "frame_bury 0",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2248": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "2249": {
      "op": "+",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2250": {
      "op": "frame_bury 2",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2252": {
      "op": "b sum_dynamic_box_for_header@1"
    },
    "2255": {
      "block": "sum_dynamic_box_after_for@4",
      "stack_in": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2256": {
      "subroutine": "examples.box_storage.contract.BoxContract.slice_box",
      "params": {},
      "block": "slice_box",
      "stack_in": [],
      "op": "bytec 11 // \"0\"",
      "defined_out": [
        "\"0\""
      ],
      "stack_out": [
        "\"0\""
      ]
    },
    "2258": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2259": {
      "op": "pop",
      "stack_out": []
    },
    "2260": {
      "op": "bytec 11 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "2262": {
      "op": "pushbytes 0x54657374696e672074657374696e6720313233",
      "defined_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ],
      "stack_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ]
    },
    "2283": {
      "op": "box_put",
      "stack_out": []
    },
    "2284": {
      "op": "bytec 11 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "2286": {
      "op": "box_len",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2287": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2288": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2289": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "2290": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "tmp%0#0 (copy)"
      ]
    },
    "2292": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2293": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "7"
      ]
    },
    "2295": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "7",
        "tmp%0#0 (copy)"
      ]
    },
    "2297": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2298": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2300": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "7"
      ]
    },
    "2302": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "7",
        "tmp%4#0"
      ]
    },
    "2304": {
      "op": "select",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "2305": {
      "op": "dig 1",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%3#0 (copy)"
      ]
    },
    "2307": {
      "op": "-",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "2308": {
      "op": "bytec 11 // \"0\"",
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "\"0\""
      ]
    },
    "2310": {
      "op": "cover 2",
      "stack_out": [
        "\"0\"",
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "2312": {
      "op": "box_extract",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2313": {
      "op": "pushbytes 0x54657374696e67",
      "defined_out": [
        "0x54657374696e67",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x54657374696e67"
      ]
    },
    "2322": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "2323": {
      "op": "assert",
      "stack_out": []
    },
    "2324": {
      "op": "bytec_1 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "2325": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "2326": {
      "op": "pop",
      "stack_out": []
    },
    "2327": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "2328": {
      "op": "pushbytes 0x000548656c6c6f",
      "defined_out": [
        "0x000548656c6c6f",
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43",
        "0x000548656c6c6f"
      ]
    },
    "2337": {
      "op": "box_put",
      "stack_out": []
    },
    "2338": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "2339": {
      "op": "box_len",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2340": {
      "op": "pop",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2341": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "2"
      ]
    },
    "2342": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "2",
        "tmp%10#0 (copy)"
      ]
    },
    "2344": {
      "op": "<",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "2345": {
      "op": "dig 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%10#0 (copy)"
      ]
    },
    "2347": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%10#0 (copy)",
        "2"
      ]
    },
    "2348": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "2",
        "tmp%12#0"
      ]
    },
    "2350": {
      "op": "select",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0"
      ]
    },
    "2351": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0",
        "10"
      ]
    },
    "2353": {
      "op": "dig 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0",
        "10",
        "tmp%10#0 (copy)"
      ]
    },
    "2355": {
      "op": "<",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "2356": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%10#0"
      ]
    },
    "2358": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%10#0",
        "10"
      ]
    },
    "2360": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%13#0",
        "tmp%10#0",
        "10",
        "tmp%14#0"
      ]
    },
    "2362": {
      "op": "select",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "2363": {
      "op": "dig 1",
      "defined_out": [
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%13#0 (copy)"
      ]
    },
    "2365": {
      "op": "-",
      "defined_out": [
        "tmp%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "2366": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "tmp%13#0",
        "tmp%16#0",
        "0x424f585f43"
      ]
    },
    "2367": {
      "op": "cover 2",
      "stack_out": [
        "0x424f585f43",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "2369": {
      "op": "box_extract",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "2370": {
      "op": "pushbytes 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0x48656c6c6f"
      ]
    },
    "2377": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "2378": {
      "op": "assert",
      "stack_out": []
    },
    "2379": {
      "retsub": true,
      "op": "retsub"
    },
    "2380": {
      "subroutine": "examples.box_storage.contract.BoxContract.arc4_box",
      "params": {},
      "block": "arc4_box",
      "stack_in": [],
      "op": "pushbytess 0x64 0x00010203 // 0x64, 0x00010203",
      "defined_out": [
        "0x00010203",
        "0x64"
      ],
      "stack_out": [
        "0x64",
        "0x00010203"
      ]
    },
    "2389": {
      "op": "box_put",
      "stack_out": []
    },
    "2390": {
      "retsub": true,
      "op": "retsub"
    },
    "2391": {
      "subroutine": "examples.box_storage.contract.BoxContract.test_box_ref",
      "params": {},
      "block": "test_box_ref",
      "stack_in": [],
      "op": "bytec 5 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "2393": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2394": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2396": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2397": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "2398": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "2400": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "2402": {
      "op": "box_create",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2403": {
      "op": "assert",
      "stack_out": []
    },
    "2404": {
      "op": "txn Sender",
      "defined_out": [
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0"
      ]
    },
    "2406": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2408": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2410": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "2411": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0",
        "sender_bytes#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "sender_bytes#0 (copy)"
      ]
    },
    "2413": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2414": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2416": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"blob\"",
        "8000",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "8000"
      ]
    },
    "2419": {
      "op": "box_resize",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2420": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2422": {
      "op": "intc_2 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "2423": {
      "op": "dup",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0"
      ]
    },
    "2424": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "app_address#0 (copy)",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0",
        "app_address#0 (copy)"
      ]
    },
    "2426": {
      "op": "box_splice",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2427": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2429": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "\"blob\"",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64"
      ]
    },
    "2431": {
      "op": "bytec 13 // 0x68656c6c6f",
      "defined_out": [
        "\"blob\"",
        "0x68656c6c6f",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64",
        "0x68656c6c6f"
      ]
    },
    "2433": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2434": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2436": {
      "op": "intc_2 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "2437": {
      "op": "pushint 69 // 69",
      "defined_out": [
        "\"blob\"",
        "0",
        "69",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "69"
      ]
    },
    "2439": {
      "op": "box_extract",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0"
      ]
    },
    "2440": {
      "op": "dig 1",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "app_address#0 (copy)"
      ]
    },
    "2442": {
      "op": "dig 3",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "app_address#0 (copy)",
        "sender_bytes#0 (copy)"
      ]
    },
    "2444": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%10#0"
      ]
    },
    "2445": {
      "op": "bytec 13 // 0x68656c6c6f",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%10#0",
        "0x68656c6c6f"
      ]
    },
    "2447": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%11#0"
      ]
    },
    "2448": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%12#0"
      ]
    },
    "2449": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2450": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2452": {
      "op": "box_del",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%13#0"
      ]
    },
    "2453": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2454": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2456": {
      "op": "box_get",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0"
      ]
    },
    "2457": {
      "op": "dup",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "exists#0 (copy)",
        "sender_bytes#0",
        "value#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "2458": {
      "op": "!",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "tmp%15#0",
        "value#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "tmp%15#0"
      ]
    },
    "2459": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0"
      ]
    },
    "2460": {
      "op": "dig 1",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "value#0 (copy)"
      ]
    },
    "2462": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "value#0 (copy)",
        "0x"
      ]
    },
    "2464": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "tmp%16#0",
        "value#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "tmp%16#0"
      ]
    },
    "2465": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0"
      ]
    },
    "2466": {
      "op": "dig 3",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "sender_bytes#0 (copy)"
      ]
    },
    "2468": {
      "op": "cover 2",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "sender_bytes#0 (copy)",
        "value#0",
        "exists#0"
      ]
    },
    "2470": {
      "op": "select",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "state_get%0#0"
      ]
    },
    "2471": {
      "op": "dig 2",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "state_get%0#0",
        "sender_bytes#0 (copy)"
      ]
    },
    "2473": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%17#0"
      ]
    },
    "2474": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2475": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "2476": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "tmp%18#0",
        "\"blob\""
      ]
    },
    "2478": {
      "op": "swap",
      "stack_out": [
        "\"blob\"",
        "tmp%18#0"
      ]
    },
    "2479": {
      "op": "box_put",
      "stack_out": []
    },
    "2480": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "2482": {
      "op": "box_len",
      "defined_out": [
        "_%5#0",
        "maybe_exists%7#0"
      ],
      "stack_out": [
        "_%5#0",
        "maybe_exists%7#0"
      ]
    },
    "2483": {
      "op": "pop",
      "stack_out": [
        "_%5#0"
      ]
    },
    "2484": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "_%5#0",
        "64"
      ]
    },
    "2486": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "2487": {
      "op": "assert",
      "stack_out": []
    },
    "2488": {
      "op": "bytec 16 // \"box_ref\"",
      "defined_out": [
        "\"box_ref\""
      ],
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "2490": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "\"box_ref\"",
        "32"
      ]
    },
    "2492": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "2493": {
      "op": "pop",
      "stack_out": []
    },
    "2494": {
      "op": "bytec 16 // \"box_ref\"",
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "2496": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2497": {
      "op": "pop",
      "stack_out": []
    },
    "2498": {
      "retsub": true,
      "op": "retsub"
    },
    "2499": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_test",
      "params": {},
      "block": "box_map_test",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2500": {
      "op": "itob",
      "defined_out": [
        "box_0#0"
      ],
      "stack_out": [
        "box_0#0"
      ]
    },
    "2501": {
      "op": "dup",
      "defined_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ],
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ]
    },
    "2502": {
      "op": "box_del",
      "defined_out": [
        "box_0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_0#0",
        "{box_del}"
      ]
    },
    "2503": {
      "op": "pop",
      "stack_out": [
        "box_0#0"
      ]
    },
    "2504": {
      "op": "dup",
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ]
    },
    "2505": {
      "op": "pushbytes \"Hmmmmm\"",
      "defined_out": [
        "\"Hmmmmm\"",
        "box_0#0",
        "box_0#0 (copy)"
      ],
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)",
        "\"Hmmmmm\""
      ]
    },
    "2513": {
      "op": "box_put",
      "stack_out": [
        "box_0#0"
      ]
    },
    "2514": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "2515": {
      "op": "pop",
      "stack_out": [
        "value%0#0"
      ]
    },
    "2516": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "6"
      ]
    },
    "2518": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2519": {
      "op": "assert",
      "stack_out": []
    },
    "2520": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "2521": {
      "op": "itob",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "2522": {
      "op": "dup",
      "defined_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "2523": {
      "op": "box_get",
      "defined_out": [
        "encoded_value%5#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2524": {
      "op": "bytec 17 // \"default\"",
      "defined_out": [
        "\"default\"",
        "encoded_value%5#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "\"default\""
      ]
    },
    "2526": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%5#0",
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2528": {
      "op": "select",
      "defined_out": [
        "encoded_value%5#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "state_get%0#0"
      ]
    },
    "2529": {
      "op": "bytec 17 // \"default\"",
      "stack_out": [
        "encoded_value%5#0",
        "state_get%0#0",
        "\"default\""
      ]
    },
    "2531": {
      "op": "==",
      "defined_out": [
        "encoded_value%5#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "tmp%5#0"
      ]
    },
    "2532": {
      "op": "assert",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "2533": {
      "op": "dup",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "2534": {
      "op": "box_len",
      "defined_out": [
        "encoded_value%5#0",
        "exists#0",
        "value#1"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "value#1",
        "exists#0"
      ]
    },
    "2535": {
      "op": "bury 1",
      "stack_out": [
        "encoded_value%5#0",
        "exists#0"
      ]
    },
    "2537": {
      "op": "!",
      "defined_out": [
        "encoded_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "tmp%6#0"
      ]
    },
    "2538": {
      "op": "assert",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "2539": {
      "op": "dup",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "2540": {
      "op": "box_del",
      "stack_out": [
        "encoded_value%5#0",
        "{box_del}"
      ]
    },
    "2541": {
      "op": "pop",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "2542": {
      "op": "dup",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "2543": {
      "op": "bytec 13 // \"hello\"",
      "defined_out": [
        "\"hello\"",
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)",
        "\"hello\""
      ]
    },
    "2545": {
      "op": "box_put",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "2546": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "2547": {
      "op": "pop",
      "stack_out": []
    },
    "2548": {
      "retsub": true,
      "op": "retsub"
    },
    "2549": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_set",
      "params": {
        "key#0": "uint64",
        "value#0": "bytes"
      },
      "block": "box_map_set",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2552": {
      "op": "frame_dig -2",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "2554": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2555": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "2556": {
      "op": "box_del",
      "defined_out": [
        "encoded_value%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "{box_del}"
      ]
    },
    "2557": {
      "op": "pop",
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2558": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_value%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "value#0 (copy)"
      ]
    },
    "2560": {
      "op": "box_put",
      "stack_out": []
    },
    "2561": {
      "retsub": true,
      "op": "retsub"
    },
    "2562": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_get",
      "params": {
        "key#0": "uint64"
      },
      "block": "box_map_get",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2565": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "2567": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2568": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "2569": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "2570": {
      "retsub": true,
      "op": "retsub"
    },
    "2571": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_del",
      "params": {
        "key#0": "uint64"
      },
      "block": "box_map_del",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2574": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "2576": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2577": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2578": {
      "op": "pop",
      "stack_out": []
    },
    "2579": {
      "retsub": true,
      "op": "retsub"
    },
    "2580": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_exists",
      "params": {
        "key#0": "uint64"
      },
      "block": "box_map_exists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2583": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "2585": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2586": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2587": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2589": {
      "retsub": true,
      "op": "retsub"
    }
  }
}