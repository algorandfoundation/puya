{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAgVK;;AAAA;AAAA;AAAA;;AAAA;AAhVL;;;AAAA;AAgVK;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA5UL;;;AAAA;AA4UK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAxUL;;;AAAA;AAwUK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AApUL;;;AAAA;AAAA;;;AAAA;;;AAoUK;;;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhDA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AArOL;;;AAAA;AAAA;;;AAAA;AAqOK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAjOL;;;AAAA;AAAA;;;AAAA;AAiOK;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAnNL;;;AAAA;AAmNK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AA7ML;;;AAAA;AA6MK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA3LL;;;AAAA;AA2LK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAvLL;;;AAAA;AAAA;;;AAAA;AAAA;AAuLK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA5JL;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA4JK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAlJL;;;AAAA;AAAA;;;AAAA;AAkJK;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AApIL;;;AAoIK;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AA7HL;;;AAAA;AA6HK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAvHL;;;AAAA;AAuHK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA9DL;;;AAAA;AAAA;;;AAAA;AA8DK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AApCA;;AAAA;AAAA;AAAA;;AAAA;AAfL;;;AAAA;AAAA;;;AAAA;;;AAeK;;;AAAA;;AAfL;;AAAA;;;;;;;;;AAeA;;;AAEQ;;AAAA;AAAA;;AAAA;AAAA;AACA;;AAAA;;AAAA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AAAA;;AAAA;AACmB;;AAAA;;;AAAnB;;AAAA;;AAAA;;AAAA;;AAAA;AACA;;AAAA;;;AAAA;;AACyB;;AAAzB;AAAA;;AAAA;;AAAA;;AAAA;AACA;;AAA2B;;AAAwB;;;;;;;;;;AAAnD;AAKA;;AAAA;AAAA;AAAA;AAAoB;;AAApB;AAAA;AAAA;;AAAA;AAAA;AAGO;;AAAA;AAAA;AAAqB;AAArB;AAAP;AACO;;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAP;AACO;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAA;AAAP;AACO;;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAA;AAAP;AAGO;AAAuB;AAAvB;AAAA;AAA6B;;AAAA;;;AAA7B;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAA9B;AAAP;AAC+B;AAAxB;;AAAA;AAAA;;AAAwB;AAAxB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA+B;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA/B;AAAP;AAC+B;AAAxB;;AAAA;AAAA;;AAAwB;AAAxB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA8B;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA9B;AAAP;AAGO;;AAAiB;AAAjB;AAAA;AAAuB;;AAAA;;;AAAvB;AAAP;AACO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAwB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAxB;AAAP;AACyB;AAAlB;;AAAA;AAAA;;AAAkB;AAAlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAyB;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAzB;AAAP;AACyB;;AAAlB;;AAAA;AAAA;;AAAkB;;AAAlB;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAwB;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAxB;AAAP;AAC0B;AAAnB;;AAAA;AAAA;;AAAmB;AAAnB;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA4C;AAAX;;AAAA;AAAW;AAAX;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAjC;AAAP;AAEO;;AAAA;AAAA;AAAyB;;;AAAzB;AAAP;;AAWA;;AAAA;;;AAAA;;;AAER;;;AAEQ;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAER;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGgB;AAAR;;AACW;;AAAA;AAAA;;AAAA;;;;AAAnB;;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAmB;;AAAnB;AAAA;AAAA;AAAA;AACoB;;AAAA;AAAA;;;;;;;;;AACZ;;AAAA;;AAAA;AAII;;AAAJ;;AACI;;AAAJ;;AACI;AAAJ;;AACO;;AAAA;AAAA;AAAA;AAAuB;;AAAvB;;AAAA;;AAAA;AAAsC;;AAAtC;AAAP;AACO;;AAAA;AAAuB;;AAAvB;;AAAA;AAAA;;;AAA2D;;;;AAA3D;AAAP;AACO;AAAA;AAAuB;;AAAvB;;AAAA;AAAuB;;AAAvB;AAAP;AAEO;AAAA;AAAP;AACO;AAAP;AACI;;AAAJ;;;AAIQ;;AAAA;;AAAA;AAAA;AACR;AAAW;AAAX;AAAA;AACA;;AADA;;AAAA;;AAAA;;AAMyB;;AAuPtB;AAAA;AAAA;AAAY;AAAZ;AAvPoC;AAAnC;AACA;;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;;AAAA;;AAAA;AAAA;AAAA;AAJJ;AASY;;AAAL;AAAA;;AAAuB;;AAAL;AAAA;;AAAuB;AAAL;AAAA;;AAAuB;;AAAL;AAAA;;AAA7D;AAKM;;AAEA;AAAmB;AAAnB;AAH0B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;AAAhC;AAAA;;AAAA;AAAA;AAAA;;AASI;AAAJ;;;AAER;;;AAEiB;AAAA;;AAAA;;AAAA;AAAjB;;;AACY;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AADK;AAAA;AAAA;;;;;AAEF;AAAA;;AAAA;AAAA;AAAA;AAAP;AAAA;AAER;;;AAEoB;AAAA;;AAAA;;AAAA;AAApB;;;AACY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;AADQ;;AAAA;AAAA;AAAA;;;;;AAGL;AAAA;;AAAA;AAAA;AAAA;AAAP;AAAA;AAER;;;AAGe;;AAAA;AAAA;AAAP;AACe;;;AACD;AAAA;AACA;;AAEE;AANiB;AAMjC;AAAA;;AANiC;AAQjB;;AAAiB;;;;AAAjC;AARiC;AAInB;;AAMd;;AAAA;;AAER;;;AAGQ;;AAAA;AADiC;AACjC;;AAAA;;AAAA;AACqB;;AAAQ;AAAR;AAArB;AAFiC;AAEjC;;;AAAA;;AAAA;AAC+C;;AAAQ;AAAR;AAA/C;AAHiC;AAGjC;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAHiC;AAGjC;AAAA;AAAA;AAAA;AAAA;;AAAA;AAHiC;AAGjC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAHiC;AAGjC;AAAA;;AAAA;AAC2B;;AAAQ;;AAAR;AAA3B;AAJiC;AAIjC;;;AAAA;;AAAA;AAC2B;;AAAQ;;AAAR;AAA3B;AALiC;AAKjC;;;AAAA;;AAAA;AACqD;;AAAQ;;AAAR;AAArD;AANiC;AAMjC;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AANiC;AAMjC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AANiC;AAMjC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AANiC;AAMjC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AANiC;AAMjC;AAAA;AAAA;AAAA;AAAA;AANiC;AAMjC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AANiC;AAMjC;AAAA;;AAAA;;AAER;;;AAEyC;AAC7B;;AAAA;AAAA;AAAA;AAD6B;AAE7B;;;AAAA;AAAA;AAAA;AAF6B;AAGvB;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAHuB;AAGvB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAHuB;AAGvB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAHuB;AAGvB;AAAA;AAAA;AAAA;AAHuB;AAI7B;;;AAAA;AAAA;AAAA;AAJ6B;AAK7B;;;AAAA;AAAA;AAAA;AAL6B;AAMlB;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AANkB;AAMlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AANkB;AAMlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AANkB;AAMlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AANkB;AAMlB;AAAA;AAAA;AAAA;AAAA;AANkB;AAMlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AANkB;AAMlB;AAAA;AAAA;AAAA;AAER;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAP;AAER;;;;;;AAEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AACO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AACQ;AACG;AAAnB;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAmB;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAmB;AAAnB;AAAA;AAAA;AAAA;AACY;;AAAA;AAAA;;;;;;;;;AACO;AAAnB;;AAAA;AAAA;AAAA;AAAmB;AAAnB;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAmB;AAAnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAmB;AAAnB;AAAA;AAAA;AAAA;AACY;;AAAA;AAAA;;;;;;;;;AACJ;;AAAA;;AAAA;AAIA;;AAAA;;;AAAA;;;AAER;;;AAEQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAER;;;;;AAEgB;AACK;;AAAA;AAAA;;AAAA;;AAArB;;AAAA;;;;AAAA;;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqB;;AAArB;;AAAA;AAAA;AAAA;AAAA;;;;;AACA;;;AACgB;;AAAS;AAAT;;;;;;;;AACD;;AAAA;AAAf;;;;;;;AAEQ;;;;;;;;;;AAIA;AAAA;;AAAA;AAAyB;;;;AAAzB;;AAII;AAAJ;;;AAER;;;AAEiB;AAAA;;AAAA;;AAAA;AAAjB;;;AACY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AADK;AAAA;AAAA;;;;;AAEF;AAAA;AAAA;AAAA;AAAA;AAAP;AAAA;AAER;;;AAEoB;AAAA;;AAAA;;AAAA;AAApB;;;AACY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADQ;;AAAA;AAAA;AAAA;;;;;AAGL;AAAA;AAAA;AAAA;AAAA;AAAP;AAAA;AAER;;;AAEgB;AACG;AAAnB;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmB;AAAnB;AAAA;AAAA;AAAA;AACY;;AAAA;AAAA;;;;;;;;;AACJ;AAER;;;AAEQ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAER;;;AAEQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAIuB;;AACvB;;AADuB;;AACT;;;;;;;;;;;;;;;;;;;;;AAAd;AADuB;;AAEhB;AAAA;AAAA;AAAY;AAAZ;;AAAA;AAAc;;AAAd;;AAAA;AAAA;;AAAc;;AAAd;;AAAA;AAAA;;AAAA;AAFgB;;AAEhB;;AAAA;AAAoB;;;;;;;;;AAApB;AAAP;AAEA;AAAA;;AAAA;AAAmB;;;;;;;;;AAAnB;AACO;AAAA;AAAA;AAAuB;AAAvB;;AAAA;AAAA;;AAAuB;AAAvB;;AAAA;AAAyB;;AAAzB;;AAAA;AAAA;;AAAyB;;AAAzB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAgC;;;;;;;AAAhC;AAAP;;AAI4B;;;;;;;;;AAC5B;;AAUqB;;AACd;AAAA;;AAAA;AAAP;AAKqB;;AAIM;;AAApB;AAAP;AAIe;;AACD;;AATO;;AAWL;AAAhB;;AAAA;AAXqB;;AAYN;;;AAAf;AAZqB;;AAaN;AAAG;AAAlB;;AAAA;AAbqB;;AAcL;;AAJN;;AAIV;AAdqB;;AAeI;AAAG;;AAAnB;AACQ;;AAAA;;AAAA;AANP;;AAMO;AAAV;AAAP;AAhBqB;;AAmBd;AAAP;AAnBqB;;AAuBL;AACT;AAAA;AAAP;AACO;;AAAS;;AAAT;AAAP;AACO;;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAGY;AA7BS;;AA6BrB;AAAA;AA7BqB;;AA8Bd;AAAA;AACkB;;AAAlB;AAAP;AAIA;;AAAyB;;AAAzB;;AAEA;;AAAA;;;AAIQ;AAGK;AAAb;AAAA;;AAAA;AADQ;;;;;;;;AACR;AAGO;AAAA;AAAoC;;AAApC;AAAP;AALQ;AASgB;AAAjB;AAAA;AAAgC;;AAAhC;;AAAA;AAAsD;;AAAtD;AAAP;AACgB;AAAA;AAAA;;AACT;AAAP;AAMA;AAAA;;AAAA;AAAqB;;AAArB;AAEA;;;AAER;;;AAEqB;;AAAA;AAAb;AAAA;;AAAA;;AAAA;;AAER;;;AAE4B;;AAAA;AAAb;AAAA;AAAP;AAER;;;AAEyB;;AAAA;AAAjB;;;AAER;;;AAEe;;AAAA;AAAA;AAAA;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 2 0 8 4096 4098 4138"
    },
    "13": {
      "op": "bytecblock \"box\" \"dynamic_arr_struct\" \"dynamic_box\" 0x424f585f43 0x151f7c75 \"blob\" \"box_large\" \"box_a\" \"box_d\" \"b\" \"too_many_bools\" \"many_ints\" \"0\" 0x00023432 0x68656c6c6f 0x0014 0x068101 \"box_ref\" \"default\""
    },
    "151": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "153": {
      "op": "bz main_bare_routing@40",
      "stack_out": []
    },
    "156": {
      "op": "pushbytess 0x7d37296e 0x33325d3d 0x0199408d 0x772059ca 0x01263df6 0xd566c632 0xfabcb885 0xa6174812 0xf13dd937 0x5ab60f2e 0xf07a0064 0x78f9af3f 0x5cbb9dcc 0x996497ae 0x6cec72ff 0x6f9d1075 0x0d22b441 0x59ef3760 0xaa666b96 0xdfbdd636 0x41427cd1 0x2a141f6c 0x7e843744 0x25600b57 0x29ea595d 0x11453152 0xced1221e 0x04ef4971 0x23ecb32c 0xeef75816 0xb532913a 0xc29f1669 0x9c888c09 0xe6f68506 0x8ee2c364 // method \"set_boxes(uint64,byte[],string)void\", method \"check_keys()void\", method \"create_many_ints()void\", method \"set_many_ints(uint64,uint64)void\", method \"sum_many_ints()uint64\", method \"delete_boxes()void\", method \"indirect_extract_and_replace()void\", method \"read_boxes()(uint64,byte[],string,uint64)\", method \"boxes_exist()(bool,bool,bool,bool)\", method \"create_dynamic_arr_struct()void\", method \"delete_dynamic_arr_struct()void\", method \"append_dynamic_arr_struct(uint64)uint64\", method \"pop_dynamic_arr_struct(uint64)uint64\", method \"set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void\", method \"nested_write(uint64,uint64)void\", method \"nested_read(uint64,uint64,uint64)uint64\", method \"sum_dynamic_arr_struct()uint64\", method \"create_bools()void\", method \"set_bool(uint64,bool)void\", method \"sum_bools(uint64)uint64\", method \"create_dynamic_box()void\", method \"delete_dynamic_box()void\", method \"append_dynamic_box(uint64)uint64\", method \"pop_dynamic_box(uint64)uint64\", method \"sum_dynamic_box()uint64\", method \"write_dynamic_box(uint64,uint64)void\", method \"write_dynamic_arr_struct(uint64,uint64)void\", method \"slice_box()void\", method \"arc4_box()void\", method \"test_box_ref()void\", method \"box_map_test()void\", method \"box_map_set(uint64,string)void\", method \"box_map_get(uint64)string\", method \"box_map_del(uint64)void\", method \"box_map_exists(uint64)bool\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(arc4_box()void)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_bools()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(nested_read(uint64,uint64,uint64)uint64)",
        "Method(nested_write(uint64,uint64)void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_bool(uint64,bool)void)",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void)",
        "Method(slice_box()void)",
        "Method(sum_bools(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "Method(test_box_ref()void)",
        "Method(write_dynamic_arr_struct(uint64,uint64)void)",
        "Method(write_dynamic_box(uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void)",
        "Method(nested_write(uint64,uint64)void)",
        "Method(nested_read(uint64,uint64,uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_bools()void)",
        "Method(set_bool(uint64,bool)void)",
        "Method(sum_bools(uint64)uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(write_dynamic_box(uint64,uint64)void)",
        "Method(write_dynamic_arr_struct(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)"
      ]
    },
    "333": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(arc4_box()void)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_bools()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(nested_read(uint64,uint64,uint64)uint64)",
        "Method(nested_write(uint64,uint64)void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_bool(uint64,bool)void)",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void)",
        "Method(slice_box()void)",
        "Method(sum_bools(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "Method(test_box_ref()void)",
        "Method(write_dynamic_arr_struct(uint64,uint64)void)",
        "Method(write_dynamic_box(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void)",
        "Method(nested_write(uint64,uint64)void)",
        "Method(nested_read(uint64,uint64,uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_bools()void)",
        "Method(set_bool(uint64,bool)void)",
        "Method(sum_bools(uint64)uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(write_dynamic_box(uint64,uint64)void)",
        "Method(write_dynamic_arr_struct(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "tmp%2#0"
      ]
    },
    "336": {
      "op": "match main_set_boxes_route@5 main_check_keys_route@6 main_create_many_ints_route@7 main_set_many_ints_route@8 main_sum_many_ints_route@9 main_delete_boxes_route@10 main_indirect_extract_and_replace_route@11 main_read_boxes_route@12 main_boxes_exist_route@13 main_create_dynamic_arr_struct_route@14 main_delete_dynamic_arr_struct_route@15 main_append_dynamic_arr_struct_route@16 main_pop_dynamic_arr_struct_route@17 main_set_nested_struct_route@18 main_nested_write_route@19 main_nested_read_route@20 main_sum_dynamic_arr_struct_route@21 main_create_bools_route@22 main_set_bool_route@23 main_sum_bools_route@24 main_create_dynamic_box_route@25 main_delete_dynamic_box_route@26 main_append_dynamic_box_route@27 main_pop_dynamic_box_route@28 main_sum_dynamic_box_route@29 main_write_dynamic_box_route@30 main_write_dynamic_arr_struct_route@31 main_slice_box_route@32 main_arc4_box_route@33 main_test_box_ref_route@34 main_box_map_test_route@35 main_box_map_set_route@36 main_box_map_get_route@37 main_box_map_del_route@38 main_box_map_exists_route@39",
      "stack_out": []
    },
    "408": {
      "block": "main_after_if_else@42",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "409": {
      "op": "return",
      "stack_out": []
    },
    "410": {
      "block": "main_box_map_exists_route@39",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%204#0"
      ],
      "stack_out": [
        "tmp%204#0"
      ]
    },
    "412": {
      "op": "!",
      "defined_out": [
        "tmp%205#0"
      ],
      "stack_out": [
        "tmp%205#0"
      ]
    },
    "413": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "414": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%206#0"
      ],
      "stack_out": [
        "tmp%206#0"
      ]
    },
    "416": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "417": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%21#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%21#0"
      ]
    },
    "420": {
      "op": "btoi",
      "defined_out": [
        "tmp%208#0"
      ],
      "stack_out": [
        "tmp%208#0"
      ]
    },
    "421": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_exists",
      "op": "callsub box_map_exists",
      "defined_out": [
        "tmp%209#0"
      ],
      "stack_out": [
        "tmp%209#0"
      ]
    },
    "424": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%209#0"
      ],
      "stack_out": [
        "tmp%209#0",
        "0x00"
      ]
    },
    "427": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%209#0"
      ],
      "stack_out": [
        "tmp%209#0",
        "0x00",
        "0"
      ]
    },
    "428": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%209#0"
      ]
    },
    "430": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%1#0"
      ]
    },
    "431": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "433": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%1#0"
      ]
    },
    "434": {
      "op": "concat",
      "defined_out": [
        "tmp%211#0"
      ],
      "stack_out": [
        "tmp%211#0"
      ]
    },
    "435": {
      "op": "log",
      "stack_out": []
    },
    "436": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "437": {
      "op": "return",
      "stack_out": []
    },
    "438": {
      "block": "main_box_map_del_route@38",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%199#0"
      ],
      "stack_out": [
        "tmp%199#0"
      ]
    },
    "440": {
      "op": "!",
      "defined_out": [
        "tmp%200#0"
      ],
      "stack_out": [
        "tmp%200#0"
      ]
    },
    "441": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "442": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%201#0"
      ],
      "stack_out": [
        "tmp%201#0"
      ]
    },
    "444": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "445": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%20#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%20#0"
      ]
    },
    "448": {
      "op": "btoi",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "449": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_del",
      "op": "callsub box_map_del",
      "stack_out": []
    },
    "452": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "453": {
      "op": "return",
      "stack_out": []
    },
    "454": {
      "block": "main_box_map_get_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%191#0"
      ],
      "stack_out": [
        "tmp%191#0"
      ]
    },
    "456": {
      "op": "!",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "457": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "458": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0"
      ]
    },
    "460": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "461": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%19#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%19#0"
      ]
    },
    "464": {
      "op": "btoi",
      "defined_out": [
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%195#0"
      ]
    },
    "465": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_get",
      "op": "callsub box_map_get",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "468": {
      "op": "dup",
      "defined_out": [
        "tmp%196#0",
        "tmp%196#0 (copy)"
      ],
      "stack_out": [
        "tmp%196#0",
        "tmp%196#0 (copy)"
      ]
    },
    "469": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0",
        "aggregate%length%1#0"
      ]
    },
    "470": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "471": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "474": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%1#0",
        "tmp%196#0"
      ]
    },
    "475": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0"
      ]
    },
    "476": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "478": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%1#0"
      ]
    },
    "479": {
      "op": "concat",
      "defined_out": [
        "tmp%198#0"
      ],
      "stack_out": [
        "tmp%198#0"
      ]
    },
    "480": {
      "op": "log",
      "stack_out": []
    },
    "481": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "482": {
      "op": "return",
      "stack_out": []
    },
    "483": {
      "block": "main_box_map_set_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%185#0"
      ],
      "stack_out": [
        "tmp%185#0"
      ]
    },
    "485": {
      "op": "!",
      "defined_out": [
        "tmp%186#0"
      ],
      "stack_out": [
        "tmp%186#0"
      ]
    },
    "486": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "487": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%187#0"
      ],
      "stack_out": [
        "tmp%187#0"
      ]
    },
    "489": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "490": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%18#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%18#0"
      ]
    },
    "493": {
      "op": "btoi",
      "defined_out": [
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%189#0"
      ]
    },
    "494": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%1#0",
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%189#0",
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "497": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%189#0",
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%189#0",
        "tmp%190#0"
      ]
    },
    "500": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_set",
      "op": "callsub box_map_set",
      "stack_out": []
    },
    "503": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "504": {
      "op": "return",
      "stack_out": []
    },
    "505": {
      "block": "main_box_map_test_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "507": {
      "op": "!",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "508": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "509": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%183#0"
      ],
      "stack_out": [
        "tmp%183#0"
      ]
    },
    "511": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "512": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_test",
      "op": "callsub box_map_test"
    },
    "515": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "516": {
      "op": "return",
      "stack_out": []
    },
    "517": {
      "block": "main_test_box_ref_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%177#0"
      ],
      "stack_out": [
        "tmp%177#0"
      ]
    },
    "519": {
      "op": "!",
      "defined_out": [
        "tmp%178#0"
      ],
      "stack_out": [
        "tmp%178#0"
      ]
    },
    "520": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "521": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%179#0"
      ],
      "stack_out": [
        "tmp%179#0"
      ]
    },
    "523": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "524": {
      "callsub": "examples.box_storage.contract.BoxContract.test_box_ref",
      "op": "callsub test_box_ref"
    },
    "527": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "528": {
      "op": "return",
      "stack_out": []
    },
    "529": {
      "block": "main_arc4_box_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "531": {
      "op": "!",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "532": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "533": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%175#0"
      ],
      "stack_out": [
        "tmp%175#0"
      ]
    },
    "535": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "536": {
      "callsub": "examples.box_storage.contract.BoxContract.arc4_box",
      "op": "callsub arc4_box"
    },
    "539": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "540": {
      "op": "return",
      "stack_out": []
    },
    "541": {
      "block": "main_slice_box_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%169#0"
      ]
    },
    "543": {
      "op": "!",
      "defined_out": [
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%170#0"
      ]
    },
    "544": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "545": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%171#0"
      ]
    },
    "547": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "548": {
      "callsub": "examples.box_storage.contract.BoxContract.slice_box",
      "op": "callsub slice_box"
    },
    "551": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "552": {
      "op": "return",
      "stack_out": []
    },
    "553": {
      "block": "main_write_dynamic_arr_struct_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "555": {
      "op": "!",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "556": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "557": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "559": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "560": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%16#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%16#0"
      ]
    },
    "563": {
      "op": "btoi",
      "defined_out": [
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0"
      ]
    },
    "564": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%17#0",
        "tmp%167#0"
      ],
      "stack_out": [
        "tmp%167#0",
        "reinterpret_Encoded(uint64)%17#0"
      ]
    },
    "567": {
      "op": "btoi",
      "defined_out": [
        "tmp%167#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%167#0",
        "tmp%168#0"
      ]
    },
    "568": {
      "callsub": "examples.box_storage.contract.BoxContract.write_dynamic_arr_struct",
      "op": "callsub write_dynamic_arr_struct",
      "stack_out": []
    },
    "571": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "572": {
      "op": "return",
      "stack_out": []
    },
    "573": {
      "block": "main_write_dynamic_box_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "575": {
      "op": "!",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "576": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "577": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "579": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "580": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%14#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%14#0"
      ]
    },
    "583": {
      "op": "btoi",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "584": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%15#0",
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "reinterpret_Encoded(uint64)%15#0"
      ]
    },
    "587": {
      "op": "btoi",
      "defined_out": [
        "tmp%161#0",
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%161#0",
        "tmp%162#0"
      ]
    },
    "588": {
      "callsub": "examples.box_storage.contract.BoxContract.write_dynamic_box",
      "op": "callsub write_dynamic_box",
      "stack_out": []
    },
    "591": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "592": {
      "op": "return",
      "stack_out": []
    },
    "593": {
      "block": "main_sum_dynamic_box_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "595": {
      "op": "!",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "596": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "597": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "599": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "600": {
      "callsub": "examples.box_storage.contract.BoxContract.sum_dynamic_box",
      "op": "callsub sum_dynamic_box",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "603": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%10#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%10#0"
      ]
    },
    "604": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%10#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%10#0",
        "0x151f7c75"
      ]
    },
    "606": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%10#0"
      ]
    },
    "607": {
      "op": "concat",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "608": {
      "op": "log",
      "stack_out": []
    },
    "609": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "610": {
      "op": "return",
      "stack_out": []
    },
    "611": {
      "block": "main_pop_dynamic_box_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "613": {
      "op": "!",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "614": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "615": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "617": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "618": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%13#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%13#0"
      ]
    },
    "621": {
      "op": "btoi",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "622": {
      "callsub": "examples.box_storage.contract.BoxContract.pop_dynamic_box",
      "op": "callsub pop_dynamic_box",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "625": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%9#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%9#0"
      ]
    },
    "626": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%9#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%9#0",
        "0x151f7c75"
      ]
    },
    "628": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%9#0"
      ]
    },
    "629": {
      "op": "concat",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "630": {
      "op": "log",
      "stack_out": []
    },
    "631": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "632": {
      "op": "return",
      "stack_out": []
    },
    "633": {
      "block": "main_append_dynamic_box_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "635": {
      "op": "!",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "636": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "637": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "639": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "640": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%12#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%12#0"
      ]
    },
    "643": {
      "op": "btoi",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "644": {
      "callsub": "examples.box_storage.contract.BoxContract.append_dynamic_box",
      "op": "callsub append_dynamic_box",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "647": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%8#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%8#0"
      ]
    },
    "648": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%8#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%8#0",
        "0x151f7c75"
      ]
    },
    "650": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%8#0"
      ]
    },
    "651": {
      "op": "concat",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "652": {
      "op": "log",
      "stack_out": []
    },
    "653": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "654": {
      "op": "return",
      "stack_out": []
    },
    "655": {
      "block": "main_delete_dynamic_box_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "657": {
      "op": "!",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "658": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "659": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "661": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "662": {
      "callsub": "examples.box_storage.contract.BoxContract.delete_dynamic_box",
      "op": "callsub delete_dynamic_box"
    },
    "665": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "666": {
      "op": "return",
      "stack_out": []
    },
    "667": {
      "block": "main_create_dynamic_box_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "669": {
      "op": "!",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "670": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "671": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "673": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "674": {
      "callsub": "examples.box_storage.contract.BoxContract.create_dynamic_box",
      "op": "callsub create_dynamic_box"
    },
    "677": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "678": {
      "op": "return",
      "stack_out": []
    },
    "679": {
      "block": "main_sum_bools_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "681": {
      "op": "!",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "682": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "683": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "685": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "686": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%11#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%11#0"
      ]
    },
    "689": {
      "op": "btoi",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "690": {
      "callsub": "examples.box_storage.contract.BoxContract.sum_bools",
      "op": "callsub sum_bools",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "693": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%7#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%7#0"
      ]
    },
    "694": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%7#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%7#0",
        "0x151f7c75"
      ]
    },
    "696": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%7#0"
      ]
    },
    "697": {
      "op": "concat",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "698": {
      "op": "log",
      "stack_out": []
    },
    "699": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "700": {
      "op": "return",
      "stack_out": []
    },
    "701": {
      "block": "main_set_bool_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "703": {
      "op": "!",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "704": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "705": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "707": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "708": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "711": {
      "op": "btoi",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "712": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "715": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(bool8)%0#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "reinterpret_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "716": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%0#0",
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0",
        "aggregate%get_bit%0#0"
      ]
    },
    "717": {
      "callsub": "examples.box_storage.contract.BoxContract.set_bool",
      "op": "callsub set_bool",
      "stack_out": []
    },
    "720": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "721": {
      "op": "return",
      "stack_out": []
    },
    "722": {
      "block": "main_create_bools_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "724": {
      "op": "!",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "725": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "726": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "728": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "729": {
      "callsub": "examples.box_storage.contract.BoxContract.create_bools",
      "op": "callsub create_bools"
    },
    "732": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "733": {
      "op": "return",
      "stack_out": []
    },
    "734": {
      "block": "main_sum_dynamic_arr_struct_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "736": {
      "op": "!",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "737": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "738": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "740": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "741": {
      "callsub": "examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct",
      "op": "callsub sum_dynamic_arr_struct",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "744": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%6#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%6#0"
      ]
    },
    "745": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%6#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%6#0",
        "0x151f7c75"
      ]
    },
    "747": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%6#0"
      ]
    },
    "748": {
      "op": "concat",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "749": {
      "op": "log",
      "stack_out": []
    },
    "750": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "751": {
      "op": "return",
      "stack_out": []
    },
    "752": {
      "block": "main_nested_read_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "754": {
      "op": "!",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "755": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "756": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "758": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "759": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "762": {
      "op": "btoi",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "763": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%8#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0",
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "766": {
      "op": "btoi",
      "defined_out": [
        "tmp%95#0",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%95#0",
        "tmp%96#0"
      ]
    },
    "767": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%95#0",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%95#0",
        "tmp%96#0",
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "770": {
      "op": "btoi",
      "defined_out": [
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%95#0",
        "tmp%96#0",
        "tmp%97#0"
      ]
    },
    "771": {
      "callsub": "examples.box_storage.contract.BoxContract.nested_read",
      "op": "callsub nested_read",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "774": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%5#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "775": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%5#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "777": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "778": {
      "op": "concat",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "779": {
      "op": "log",
      "stack_out": []
    },
    "780": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "781": {
      "op": "return",
      "stack_out": []
    },
    "782": {
      "block": "main_nested_write_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "784": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "785": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "786": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "788": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "789": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "792": {
      "op": "btoi",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "793": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%6#0",
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "796": {
      "op": "btoi",
      "defined_out": [
        "tmp%89#0",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "tmp%90#0"
      ]
    },
    "797": {
      "callsub": "examples.box_storage.contract.BoxContract.nested_write",
      "op": "callsub nested_write",
      "stack_out": []
    },
    "800": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "801": {
      "op": "return",
      "stack_out": []
    },
    "802": {
      "block": "main_set_nested_struct_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "804": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "805": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "806": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "808": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "809": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)%0#0"
      ]
    },
    "812": {
      "callsub": "examples.box_storage.contract.BoxContract.set_nested_struct",
      "op": "callsub set_nested_struct",
      "stack_out": []
    },
    "815": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "816": {
      "op": "return",
      "stack_out": []
    },
    "817": {
      "block": "main_pop_dynamic_arr_struct_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "819": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "820": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "821": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "823": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "824": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "827": {
      "op": "btoi",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "828": {
      "callsub": "examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct",
      "op": "callsub pop_dynamic_arr_struct",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "831": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "832": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "834": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "835": {
      "op": "concat",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "836": {
      "op": "log",
      "stack_out": []
    },
    "837": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "838": {
      "op": "return",
      "stack_out": []
    },
    "839": {
      "block": "main_append_dynamic_arr_struct_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "841": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "842": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "843": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "845": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "846": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "849": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "850": {
      "callsub": "examples.box_storage.contract.BoxContract.append_dynamic_arr_struct",
      "op": "callsub append_dynamic_arr_struct",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "853": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%3#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "854": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%3#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "856": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "857": {
      "op": "concat",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "858": {
      "op": "log",
      "stack_out": []
    },
    "859": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "860": {
      "op": "return",
      "stack_out": []
    },
    "861": {
      "block": "main_delete_dynamic_arr_struct_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "863": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "864": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "865": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "867": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "868": {
      "callsub": "examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct",
      "op": "callsub delete_dynamic_arr_struct"
    },
    "871": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "872": {
      "op": "return",
      "stack_out": []
    },
    "873": {
      "block": "main_create_dynamic_arr_struct_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "875": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "876": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "877": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "879": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "880": {
      "callsub": "examples.box_storage.contract.BoxContract.create_dynamic_arr_struct",
      "op": "callsub create_dynamic_arr_struct"
    },
    "883": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "884": {
      "op": "return",
      "stack_out": []
    },
    "885": {
      "block": "main_boxes_exist_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "887": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "888": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "889": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "891": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "892": {
      "callsub": "examples.box_storage.contract.BoxContract.boxes_exist",
      "op": "callsub boxes_exist",
      "defined_out": [
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ]
    },
    "895": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0",
        "0x00"
      ]
    },
    "898": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0",
        "0x00",
        "0"
      ]
    },
    "899": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0",
        "0x00",
        "0",
        "tmp%51#0"
      ]
    },
    "901": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "902": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%encoded_bool%0#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0",
        "aggregate%encoded_bool%0#0",
        "1"
      ]
    },
    "903": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%53#0",
        "tmp%54#0",
        "aggregate%encoded_bool%0#0",
        "1",
        "tmp%52#0"
      ]
    },
    "905": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%0#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "tmp%54#0",
        "aggregate%set_bit%0#0"
      ]
    },
    "906": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%set_bit%0#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "tmp%54#0",
        "aggregate%set_bit%0#0",
        "2"
      ]
    },
    "907": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%54#0",
        "aggregate%set_bit%0#0",
        "2",
        "tmp%53#0"
      ]
    },
    "909": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%1#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "aggregate%set_bit%1#0"
      ]
    },
    "910": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "aggregate%set_bit%1#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "aggregate%set_bit%1#0",
        "3"
      ]
    },
    "912": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%set_bit%1#0",
        "3",
        "tmp%54#0"
      ]
    },
    "914": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%2#0"
      ],
      "stack_out": [
        "aggregate%set_bit%2#0"
      ]
    },
    "915": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%set_bit%2#0"
      ],
      "stack_out": [
        "aggregate%set_bit%2#0",
        "0x151f7c75"
      ]
    },
    "917": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%set_bit%2#0"
      ]
    },
    "918": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "919": {
      "op": "log",
      "stack_out": []
    },
    "920": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "921": {
      "op": "return",
      "stack_out": []
    },
    "922": {
      "block": "main_read_boxes_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "924": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "925": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "926": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "928": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "929": {
      "callsub": "examples.box_storage.contract.BoxContract.read_boxes",
      "op": "callsub read_boxes",
      "defined_out": [
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "932": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "tmp%41#0"
      ]
    },
    "934": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "935": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "tmp%42#0",
        "tmp%42#0 (copy)",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%42#0 (copy)"
      ]
    },
    "937": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%length%0#0"
      ]
    },
    "938": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "939": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "942": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%length_uint16%0#0",
        "tmp%42#0"
      ]
    },
    "944": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "945": {
      "op": "swap",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "946": {
      "op": "bytec 15 // 0x0014",
      "defined_out": [
        "0x0014",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%1#0",
        "0x0014"
      ]
    },
    "948": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "949": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0 (copy)"
      ]
    },
    "951": {
      "op": "len",
      "defined_out": [
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%data_length%0#0"
      ]
    },
    "952": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%data_length%0#0",
        "20"
      ]
    },
    "954": {
      "op": "+",
      "defined_out": [
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "955": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "956": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "959": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0"
      ]
    },
    "960": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%43#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "tmp%44#0"
      ]
    },
    "962": {
      "op": "itob",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%2#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "963": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0"
      ]
    },
    "964": {
      "op": "swap",
      "stack_out": [
        "tmp%43#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "965": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "aggregate%concat%0#0"
      ]
    },
    "966": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#0",
        "tmp%43#0"
      ]
    },
    "967": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "968": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "0x151f7c75"
      ]
    },
    "970": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ]
    },
    "971": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "972": {
      "op": "log",
      "stack_out": []
    },
    "973": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "974": {
      "op": "return",
      "stack_out": []
    },
    "975": {
      "block": "main_indirect_extract_and_replace_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "977": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "978": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "979": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "981": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "982": {
      "callsub": "examples.box_storage.contract.BoxContract.indirect_extract_and_replace",
      "op": "callsub indirect_extract_and_replace"
    },
    "985": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "986": {
      "op": "return",
      "stack_out": []
    },
    "987": {
      "block": "main_delete_boxes_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "989": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "990": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "991": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "993": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "994": {
      "callsub": "examples.box_storage.contract.BoxContract.delete_boxes",
      "op": "callsub delete_boxes"
    },
    "997": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "998": {
      "op": "return",
      "stack_out": []
    },
    "999": {
      "block": "main_sum_many_ints_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1001": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1002": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1003": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1005": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1006": {
      "callsub": "examples.box_storage.contract.BoxContract.sum_many_ints",
      "op": "callsub sum_many_ints",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1009": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1010": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1012": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1013": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1014": {
      "op": "log",
      "stack_out": []
    },
    "1015": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1016": {
      "op": "return",
      "stack_out": []
    },
    "1017": {
      "block": "main_set_many_ints_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1019": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1020": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1021": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1023": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1024": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "1027": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1028": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "1031": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "1032": {
      "callsub": "examples.box_storage.contract.BoxContract.set_many_ints",
      "op": "callsub set_many_ints",
      "stack_out": []
    },
    "1035": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1036": {
      "op": "return",
      "stack_out": []
    },
    "1037": {
      "block": "main_create_many_ints_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1039": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1040": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1041": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1043": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1044": {
      "callsub": "examples.box_storage.contract.BoxContract.create_many_ints",
      "op": "callsub create_many_ints"
    },
    "1047": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1048": {
      "op": "return",
      "stack_out": []
    },
    "1049": {
      "block": "main_check_keys_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1051": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1052": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1053": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1055": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1056": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1057": {
      "op": "return",
      "stack_out": []
    },
    "1058": {
      "block": "main_set_boxes_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1060": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1061": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1062": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1064": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1065": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "1068": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1069": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "1072": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "1075": {
      "callsub": "examples.box_storage.contract.BoxContract.set_boxes",
      "op": "callsub set_boxes",
      "stack_out": []
    },
    "1078": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1079": {
      "op": "return",
      "stack_out": []
    },
    "1080": {
      "block": "main_bare_routing@40",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%212#0"
      ],
      "stack_out": [
        "tmp%212#0"
      ]
    },
    "1082": {
      "op": "bnz main_after_if_else@42",
      "stack_out": []
    },
    "1085": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%213#0"
      ],
      "stack_out": [
        "tmp%213#0"
      ]
    },
    "1087": {
      "op": "!",
      "defined_out": [
        "tmp%214#0"
      ],
      "stack_out": [
        "tmp%214#0"
      ]
    },
    "1088": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1089": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1090": {
      "op": "return",
      "stack_out": []
    },
    "1091": {
      "subroutine": "examples.box_storage.contract.BoxContract.set_boxes",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes"
      },
      "block": "set_boxes",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1094": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "1096": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1097": {
      "op": "bytec 7 // \"box_a\"",
      "defined_out": [
        "\"box_a\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_a\""
      ]
    },
    "1099": {
      "op": "swap",
      "stack_out": [
        "\"box_a\"",
        "encoded_value%0#0"
      ]
    },
    "1100": {
      "op": "box_put",
      "stack_out": []
    },
    "1101": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "1103": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1104": {
      "op": "pop",
      "stack_out": []
    },
    "1105": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "\"b\""
      ]
    },
    "1107": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"b\"",
        "b#0 (copy)"
      ],
      "stack_out": [
        "\"b\"",
        "b#0 (copy)"
      ]
    },
    "1109": {
      "op": "box_put",
      "stack_out": []
    },
    "1110": {
      "op": "bytec_3 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1111": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1112": {
      "op": "pop",
      "stack_out": []
    },
    "1113": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1114": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x424f585f43",
        "c#0 (copy)"
      ],
      "stack_out": [
        "0x424f585f43",
        "c#0 (copy)"
      ]
    },
    "1116": {
      "op": "box_put",
      "stack_out": []
    },
    "1117": {
      "op": "frame_dig -2",
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "1119": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1122": {
      "op": "bytec 8 // \"box_d\"",
      "defined_out": [
        "\"box_d\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_d\""
      ]
    },
    "1124": {
      "op": "box_del",
      "stack_out": [
        "tmp%0#0",
        "{box_del}"
      ]
    },
    "1125": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1126": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "\"box_d\""
      ]
    },
    "1128": {
      "op": "dig 1",
      "defined_out": [
        "\"box_d\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_d\"",
        "tmp%0#0 (copy)"
      ]
    },
    "1130": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1131": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_large\""
      ]
    },
    "1133": {
      "op": "pushint 6160 // 6160",
      "defined_out": [
        "\"box_large\"",
        "6160",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_large\"",
        "6160"
      ]
    },
    "1136": {
      "op": "box_create",
      "defined_out": [
        "tmp%0#0",
        "{box_create}"
      ],
      "stack_out": [
        "tmp%0#0",
        "{box_create}"
      ]
    },
    "1137": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1138": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "42"
      ]
    },
    "1140": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1141": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0",
        "\"box_large\""
      ]
    },
    "1143": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0",
        "\"box_large\"",
        "4096"
      ]
    },
    "1145": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "\"box_large\"",
        "4096",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1147": {
      "op": "box_replace",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1148": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "tmp%0#0",
        "\"box_large\""
      ]
    },
    "1150": {
      "op": "intc 4 // 4096",
      "stack_out": [
        "tmp%0#0",
        "\"box_large\"",
        "4096"
      ]
    },
    "1152": {
      "op": "pushbytes 0x000000000000002a",
      "defined_out": [
        "\"box_large\"",
        "0x000000000000002a",
        "4096",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_large\"",
        "4096",
        "0x000000000000002a"
      ]
    },
    "1162": {
      "op": "box_replace",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1163": {
      "op": "bytec 7 // \"box_a\"",
      "stack_out": [
        "tmp%0#0",
        "\"box_a\""
      ]
    },
    "1165": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1166": {
      "error": "check self.box_a exists",
      "op": "assert // check self.box_a exists",
      "stack_out": [
        "tmp%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "1167": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1168": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0",
        "3"
      ]
    },
    "1170": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "1171": {
      "op": "itob",
      "defined_out": [
        "encoded_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_value%2#0"
      ]
    },
    "1172": {
      "op": "bytec 7 // \"box_a\"",
      "stack_out": [
        "tmp%0#0",
        "encoded_value%2#0",
        "\"box_a\""
      ]
    },
    "1174": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"box_a\"",
        "encoded_value%2#0"
      ]
    },
    "1175": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1176": {
      "op": "bytec 7 // \"box_a\"",
      "stack_out": [
        "tmp%0#0",
        "\"box_a\""
      ]
    },
    "1178": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "1179": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "value%0#0"
      ]
    },
    "1180": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%0#0",
        "8"
      ]
    },
    "1181": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "1182": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1183": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "tmp%0#0",
        "\"b\""
      ]
    },
    "1185": {
      "op": "box_len",
      "defined_out": [
        "check%1#0",
        "tmp%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "1186": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "value%1#0"
      ]
    },
    "1187": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "value%1#0",
        "b#0 (copy)"
      ]
    },
    "1189": {
      "op": "len",
      "defined_out": [
        "tmp%0#0",
        "tmp%7#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%1#0",
        "tmp%7#0"
      ]
    },
    "1190": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "1191": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1192": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "tmp%0#0",
        "0x424f585f43"
      ]
    },
    "1193": {
      "op": "box_len",
      "defined_out": [
        "check%2#0",
        "tmp%0#0",
        "value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "1194": {
      "error": "check self.box_c exists",
      "op": "assert // check self.box_c exists",
      "stack_out": [
        "tmp%0#0",
        "value%2#0"
      ]
    },
    "1195": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "c#0 (copy)"
      ]
    },
    "1197": {
      "op": "len",
      "defined_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0"
      ]
    },
    "1198": {
      "op": "dup2",
      "defined_out": [
        "tmp%0#0",
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "value%2#0",
        "value%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%2#0 (copy)",
        "tmp%9#0 (copy)"
      ]
    },
    "1199": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%10#0",
        "tmp%9#0",
        "value%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1200": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0"
      ]
    },
    "1201": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "\"box_d\""
      ]
    },
    "1203": {
      "op": "box_len",
      "defined_out": [
        "check%3#0",
        "tmp%0#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "check%3#0"
      ]
    },
    "1204": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0"
      ]
    },
    "1205": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1207": {
      "op": "len",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1208": {
      "op": "dup2",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%9#0",
        "value%2#0",
        "value%3#0",
        "value%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "tmp%12#0 (copy)"
      ]
    },
    "1209": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1210": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1211": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43"
      ]
    },
    "1212": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "0x424f585f43",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "0"
      ]
    },
    "1213": {
      "op": "intc_0 // 1",
      "defined_out": [
        "0",
        "0x424f585f43",
        "1",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "0",
        "1"
      ]
    },
    "1214": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "1215": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%14#0",
        "c#0 (copy)"
      ]
    },
    "1217": {
      "op": "extract 0 1",
      "defined_out": [
        "extract%0#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%14#0",
        "extract%0#0"
      ]
    },
    "1220": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "1221": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1222": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0 (copy)"
      ]
    },
    "1224": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0 (copy)",
        "1"
      ]
    },
    "1225": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%18#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%18#0"
      ]
    },
    "1226": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%18#0",
        "0x424f585f43"
      ]
    },
    "1227": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "tmp%18#0"
      ]
    },
    "1228": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "tmp%18#0",
        "1"
      ]
    },
    "1229": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0"
      ]
    },
    "1230": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%9#0 (copy)"
      ]
    },
    "1232": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%9#0 (copy)",
        "1"
      ]
    },
    "1233": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "1234": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%21#0",
        "c#0 (copy)"
      ]
    },
    "1236": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "c#0 (copy)",
        "tmp%21#0"
      ]
    },
    "1237": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "c#0 (copy)",
        "tmp%21#0",
        "1"
      ]
    },
    "1238": {
      "op": "extract3",
      "defined_out": [
        "extract%1#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "extract%1#0"
      ]
    },
    "1239": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%22#0"
      ]
    },
    "1240": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1241": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "1"
      ]
    },
    "1242": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "1",
        "value%2#0 (copy)"
      ]
    },
    "1244": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%25#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%25#0"
      ]
    },
    "1245": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%25#0",
        "value%2#0 (copy)"
      ]
    },
    "1247": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%25#0",
        "value%2#0 (copy)",
        "1"
      ]
    },
    "1248": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0 (copy)",
        "1",
        "tmp%25#0"
      ]
    },
    "1250": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%26#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%26#0"
      ]
    },
    "1251": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%26#0",
        "value%2#0 (copy)"
      ]
    },
    "1253": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0 (copy)",
        "tmp%26#0"
      ]
    },
    "1254": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%27#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%27#0"
      ]
    },
    "1255": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%27#0",
        "0x424f585f43"
      ]
    },
    "1256": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%27#0",
        "0x424f585f43",
        "0"
      ]
    },
    "1257": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "0",
        "tmp%27#0"
      ]
    },
    "1259": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0"
      ]
    },
    "1260": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "1"
      ]
    },
    "1261": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "1",
        "tmp%9#0 (copy)"
      ]
    },
    "1263": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "1264": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "is_out_of_bounds%0#0",
        "1"
      ]
    },
    "1265": {
      "op": "dig 5",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "is_out_of_bounds%0#0",
        "1",
        "tmp%9#0 (copy)"
      ]
    },
    "1267": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "1",
        "tmp%9#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "1269": {
      "op": "select",
      "defined_out": [
        "bounded_offset%0#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_offset%0#0"
      ]
    },
    "1270": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_offset%0#0",
        "tmp%9#0 (copy)"
      ]
    },
    "1272": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0 (copy)",
        "bounded_offset%0#0"
      ]
    },
    "1273": {
      "op": "-",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_index%0#0"
      ]
    },
    "1274": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_index%0#0",
        "c#0 (copy)"
      ]
    },
    "1276": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_index%0#0",
        "c#0 (copy)",
        "0"
      ]
    },
    "1277": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "c#0 (copy)",
        "0",
        "bounded_index%0#0"
      ]
    },
    "1279": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "1280": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%31#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%31#0"
      ]
    },
    "1281": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1282": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "2"
      ]
    },
    "1283": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "2",
        "value%2#0 (copy)"
      ]
    },
    "1285": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%34#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%34#0"
      ]
    },
    "1286": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%34#0",
        "value%2#0"
      ]
    },
    "1288": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%34#0",
        "value%2#0",
        "2"
      ]
    },
    "1289": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0",
        "2",
        "tmp%34#0"
      ]
    },
    "1291": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%35#0",
        "tmp%9#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%35#0"
      ]
    },
    "1292": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%35#0",
        "0x424f585f43"
      ]
    },
    "1293": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%35#0",
        "0x424f585f43",
        "0"
      ]
    },
    "1294": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "0",
        "tmp%35#0"
      ]
    },
    "1296": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%37#0",
        "tmp%9#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0"
      ]
    },
    "1297": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "2"
      ]
    },
    "1298": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "2",
        "tmp%9#0 (copy)"
      ]
    },
    "1300": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%1#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%37#0",
        "tmp%9#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "1301": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "is_out_of_bounds%1#0",
        "2"
      ]
    },
    "1302": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "is_out_of_bounds%1#0",
        "2",
        "tmp%9#0"
      ]
    },
    "1304": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "2",
        "tmp%9#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "1306": {
      "op": "select",
      "defined_out": [
        "bounded_index%1#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%37#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "bounded_index%1#0"
      ]
    },
    "1307": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "bounded_index%1#0",
        "c#0 (copy)"
      ]
    },
    "1309": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "bounded_index%1#0",
        "c#0 (copy)",
        "0"
      ]
    },
    "1310": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "c#0 (copy)",
        "0",
        "bounded_index%1#0"
      ]
    },
    "1312": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%37#0",
        "tmp%38#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "1313": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%39#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%39#0"
      ]
    },
    "1314": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1315": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\""
      ]
    },
    "1317": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "0"
      ]
    },
    "1318": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "0",
        "1"
      ]
    },
    "1319": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%40#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%40#0"
      ]
    },
    "1320": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%40#0",
        "b#0 (copy)"
      ]
    },
    "1322": {
      "op": "extract 2 1",
      "defined_out": [
        "extract%2#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%40#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%40#0",
        "extract%2#0"
      ]
    },
    "1325": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%42#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%42#0"
      ]
    },
    "1326": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1327": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)"
      ]
    },
    "1329": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "1"
      ]
    },
    "1330": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%45#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%45#0"
      ]
    },
    "1331": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%45#0",
        "\"box_d\""
      ]
    },
    "1333": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "tmp%45#0"
      ]
    },
    "1334": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "tmp%45#0",
        "1"
      ]
    },
    "1335": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%46#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0"
      ]
    },
    "1336": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1338": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%12#0 (copy)",
        "1"
      ]
    },
    "1339": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%49#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%49#0"
      ]
    },
    "1340": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%49#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1342": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%0#0 (copy)",
        "tmp%49#0"
      ]
    },
    "1343": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%0#0 (copy)",
        "tmp%49#0",
        "1"
      ]
    },
    "1344": {
      "op": "extract3",
      "defined_out": [
        "extract%3#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%46#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "extract%3#0"
      ]
    },
    "1345": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%50#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%50#0"
      ]
    },
    "1346": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1347": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "1"
      ]
    },
    "1348": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "1",
        "value%3#0 (copy)"
      ]
    },
    "1350": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%53#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%53#0"
      ]
    },
    "1351": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%53#0",
        "value%3#0 (copy)"
      ]
    },
    "1353": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%53#0",
        "value%3#0 (copy)",
        "1"
      ]
    },
    "1354": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "1",
        "tmp%53#0"
      ]
    },
    "1356": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%54#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%54#0"
      ]
    },
    "1357": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%54#0",
        "value%3#0 (copy)"
      ]
    },
    "1359": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "tmp%54#0"
      ]
    },
    "1360": {
      "op": "-",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%55#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%55#0"
      ]
    },
    "1361": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%55#0",
        "\"box_d\""
      ]
    },
    "1363": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%55#0",
        "\"box_d\"",
        "0"
      ]
    },
    "1364": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "0",
        "tmp%55#0"
      ]
    },
    "1366": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%57#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0"
      ]
    },
    "1367": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "1"
      ]
    },
    "1368": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "1",
        "tmp%12#0 (copy)"
      ]
    },
    "1370": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%2#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%57#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "is_out_of_bounds%2#0"
      ]
    },
    "1371": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "is_out_of_bounds%2#0",
        "1"
      ]
    },
    "1372": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "is_out_of_bounds%2#0",
        "1",
        "tmp%12#0 (copy)"
      ]
    },
    "1374": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "1",
        "tmp%12#0 (copy)",
        "is_out_of_bounds%2#0"
      ]
    },
    "1376": {
      "op": "select",
      "defined_out": [
        "bounded_offset%1#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%57#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_offset%1#0"
      ]
    },
    "1377": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_offset%1#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1379": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "tmp%12#0 (copy)",
        "bounded_offset%1#0"
      ]
    },
    "1380": {
      "op": "-",
      "defined_out": [
        "bounded_index%2#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%57#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_index%2#0"
      ]
    },
    "1381": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_index%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1383": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_index%2#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "1384": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "tmp%0#0 (copy)",
        "0",
        "bounded_index%2#0"
      ]
    },
    "1386": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%57#0",
        "tmp%59#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "tmp%59#0"
      ]
    },
    "1387": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%60#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%60#0"
      ]
    },
    "1388": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1389": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%0#0",
        "tmp%12#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "5"
      ]
    },
    "1391": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "5",
        "value%3#0 (copy)"
      ]
    },
    "1393": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%63#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%63#0"
      ]
    },
    "1394": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%63#0",
        "value%3#0 (copy)"
      ]
    },
    "1396": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%63#0",
        "value%3#0 (copy)",
        "5"
      ]
    },
    "1398": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "5",
        "tmp%63#0"
      ]
    },
    "1400": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%64#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%64#0"
      ]
    },
    "1401": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%64#0",
        "\"box_d\""
      ]
    },
    "1403": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%64#0",
        "\"box_d\"",
        "0"
      ]
    },
    "1404": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "0",
        "tmp%64#0"
      ]
    },
    "1406": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%66#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0"
      ]
    },
    "1407": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "5"
      ]
    },
    "1409": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "5",
        "tmp%12#0 (copy)"
      ]
    },
    "1411": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%3#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%66#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "is_out_of_bounds%3#0"
      ]
    },
    "1412": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "is_out_of_bounds%3#0",
        "5"
      ]
    },
    "1414": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "is_out_of_bounds%3#0",
        "5",
        "tmp%12#0 (copy)"
      ]
    },
    "1416": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "5",
        "tmp%12#0 (copy)",
        "is_out_of_bounds%3#0"
      ]
    },
    "1418": {
      "op": "select",
      "defined_out": [
        "bounded_index%3#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%66#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "bounded_index%3#0"
      ]
    },
    "1419": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "bounded_index%3#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1421": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "bounded_index%3#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "1422": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "tmp%0#0 (copy)",
        "0",
        "bounded_index%3#0"
      ]
    },
    "1424": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%66#0",
        "tmp%68#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "tmp%68#0"
      ]
    },
    "1425": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%69#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%69#0"
      ]
    },
    "1426": {
      "op": "assert",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "1427": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "2"
      ]
    },
    "1428": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "2",
        "value%3#0 (copy)"
      ]
    },
    "1430": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%72#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%72#0"
      ]
    },
    "1431": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%72#0",
        "value%3#0"
      ]
    },
    "1433": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%72#0",
        "value%3#0",
        "2"
      ]
    },
    "1434": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "value%3#0",
        "2",
        "tmp%72#0"
      ]
    },
    "1436": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%73#0"
      ]
    },
    "1437": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%73#0",
        "\"box_d\""
      ]
    },
    "1439": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%73#0",
        "\"box_d\"",
        "0"
      ]
    },
    "1440": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "\"box_d\"",
        "0",
        "tmp%73#0"
      ]
    },
    "1442": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0"
      ]
    },
    "1443": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0",
        "2"
      ]
    },
    "1444": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0",
        "2",
        "tmp%12#0 (copy)"
      ]
    },
    "1446": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%4#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0",
        "is_out_of_bounds%4#0"
      ]
    },
    "1447": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%75#0",
        "is_out_of_bounds%4#0",
        "2"
      ]
    },
    "1448": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%75#0",
        "is_out_of_bounds%4#0",
        "2",
        "tmp%12#0"
      ]
    },
    "1450": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%75#0",
        "2",
        "tmp%12#0",
        "is_out_of_bounds%4#0"
      ]
    },
    "1452": {
      "op": "select",
      "defined_out": [
        "bounded_index%4#0",
        "tmp%0#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%75#0",
        "bounded_index%4#0"
      ]
    },
    "1453": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%75#0",
        "bounded_index%4#0",
        "tmp%0#0"
      ]
    },
    "1455": {
      "op": "intc_2 // 0",
      "stack_out": [
        "tmp%75#0",
        "bounded_index%4#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1456": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%75#0",
        "tmp%0#0",
        "0",
        "bounded_index%4#0"
      ]
    },
    "1458": {
      "op": "substring3",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0"
      ]
    },
    "1459": {
      "op": "==",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "1460": {
      "op": "assert",
      "stack_out": []
    },
    "1461": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "\"box_large\""
      ]
    },
    "1463": {
      "op": "box_len",
      "defined_out": [
        "check%4#0",
        "value%4#0"
      ],
      "stack_out": [
        "value%4#0",
        "check%4#0"
      ]
    },
    "1464": {
      "op": "pop",
      "stack_out": [
        "value%4#0"
      ]
    },
    "1465": {
      "op": "pushint 6160 // 6160",
      "stack_out": [
        "value%4#0",
        "6160"
      ]
    },
    "1468": {
      "op": "==",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "1469": {
      "op": "assert",
      "stack_out": []
    },
    "1470": {
      "retsub": true,
      "op": "retsub"
    },
    "1471": {
      "subroutine": "examples.box_storage.contract.BoxContract.create_many_ints",
      "params": {},
      "block": "create_many_ints",
      "stack_in": [],
      "op": "bytec 11 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\""
      ],
      "stack_out": [
        "\"many_ints\""
      ]
    },
    "1473": {
      "op": "pushint 4104 // 4104",
      "defined_out": [
        "\"many_ints\"",
        "4104"
      ],
      "stack_out": [
        "\"many_ints\"",
        "4104"
      ]
    },
    "1476": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "1477": {
      "op": "pop",
      "stack_out": []
    },
    "1478": {
      "retsub": true,
      "op": "retsub"
    },
    "1479": {
      "subroutine": "examples.box_storage.contract.BoxContract.set_many_ints",
      "params": {
        "index#0": "uint64",
        "value#0": "uint64"
      },
      "block": "set_many_ints",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1482": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1484": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1485": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)"
      ]
    },
    "1487": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)",
        "8"
      ]
    },
    "1488": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0"
      ]
    },
    "1489": {
      "op": "bytec 11 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\"",
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0",
        "\"many_ints\""
      ]
    },
    "1491": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"many_ints\"",
        "box%element_offset%0#0"
      ]
    },
    "1492": {
      "op": "uncover 2",
      "stack_out": [
        "\"many_ints\"",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1494": {
      "op": "box_replace",
      "stack_out": []
    },
    "1495": {
      "retsub": true,
      "op": "retsub"
    },
    "1496": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_many_ints",
      "params": {},
      "block": "sum_many_ints",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1499": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "item_index_internal%0#0"
      ]
    },
    "1501": {
      "op": "dup",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1502": {
      "block": "sum_many_ints_while_top@6",
      "stack_in": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "op": "pushint 10510 // 10510",
      "defined_out": [
        "10510"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "10510"
      ]
    },
    "1505": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "10510",
        "tmp%1#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "10510",
        "tmp%1#0"
      ]
    },
    "1507": {
      "op": ">",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "tmp%2#0"
      ]
    },
    "1508": {
      "op": "bz sum_many_ints_after_while@11",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1511": {
      "op": "itxn_begin"
    },
    "1512": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "appl"
      ]
    },
    "1514": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1516": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "DeleteApplication"
      ]
    },
    "1518": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1520": {
      "op": "bytec 16 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "0x068101"
      ]
    },
    "1522": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1524": {
      "op": "bytec 16 // 0x068101",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "0x068101"
      ]
    },
    "1526": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1528": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "0"
      ]
    },
    "1529": {
      "op": "itxn_field Fee",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1531": {
      "op": "itxn_submit"
    },
    "1532": {
      "op": "b sum_many_ints_while_top@6"
    },
    "1535": {
      "block": "sum_many_ints_after_while@11",
      "stack_in": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "op": "intc_2 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "total#0"
      ]
    },
    "1536": {
      "op": "frame_bury 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1538": {
      "op": "bytec 11 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\"",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "\"many_ints\""
      ]
    },
    "1540": {
      "op": "box_len",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1541": {
      "op": "bury 1",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1543": {
      "error": "check self.many_ints exists",
      "op": "assert // check self.many_ints exists",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1544": {
      "op": "intc_2 // 0",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "1545": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1547": {
      "block": "sum_many_ints_for_header@1",
      "stack_in": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "1549": {
      "op": "pushint 513 // 513",
      "defined_out": [
        "513",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "513"
      ]
    },
    "1552": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "continue_looping%0#0"
      ]
    },
    "1553": {
      "op": "bz sum_many_ints_after_for@4",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1556": {
      "op": "frame_dig 0",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "1558": {
      "op": "dup",
      "defined_out": [
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "1559": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "8"
      ]
    },
    "1560": {
      "op": "*",
      "defined_out": [
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0"
      ]
    },
    "1561": {
      "op": "bytec 11 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\"",
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0",
        "\"many_ints\""
      ]
    },
    "1563": {
      "op": "swap",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "\"many_ints\"",
        "box%element_offset%0#0"
      ]
    },
    "1564": {
      "op": "intc_3 // 8",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "\"many_ints\"",
        "box%element_offset%0#0",
        "8"
      ]
    },
    "1565": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "box%box_extract%0#0"
      ]
    },
    "1566": {
      "op": "btoi",
      "defined_out": [
        "item_index_internal%0#0",
        "val#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "val#0"
      ]
    },
    "1567": {
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "val#0",
        "total#0"
      ]
    },
    "1569": {
      "op": "+",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1570": {
      "op": "frame_bury 1",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "1572": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "1573": {
      "op": "+",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "1574": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1576": {
      "op": "b sum_many_ints_for_header@1"
    },
    "1579": {
      "block": "sum_many_ints_after_for@4",
      "stack_in": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "total#0"
      ]
    },
    "1581": {
      "op": "frame_bury 0"
    },
    "1583": {
      "retsub": true,
      "op": "retsub"
    },
    "1584": {
      "subroutine": "examples.box_storage.contract.BoxContract.delete_boxes",
      "params": {},
      "block": "delete_boxes",
      "stack_in": [],
      "op": "bytec 7 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "1586": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1587": {
      "op": "pop",
      "stack_out": []
    },
    "1588": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "1590": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1591": {
      "op": "pop",
      "stack_out": []
    },
    "1592": {
      "op": "bytec_3 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1593": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1594": {
      "op": "pop",
      "stack_out": []
    },
    "1595": {
      "op": "bytec 7 // \"box_a\"",
      "stack_out": [
        "\"box_a\""
      ]
    },
    "1597": {
      "op": "box_get",
      "defined_out": [
        "a_exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "a_exists#0"
      ]
    },
    "1598": {
      "op": "swap",
      "stack_out": [
        "a_exists#0",
        "maybe_value%0#0"
      ]
    },
    "1599": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "a_exists#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "1600": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "a#0",
        "a_exists#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "42"
      ]
    },
    "1602": {
      "op": "dig 1",
      "defined_out": [
        "42",
        "a#0",
        "a#0 (copy)",
        "a_exists#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "42",
        "a#0 (copy)"
      ]
    },
    "1604": {
      "op": "dig 3",
      "defined_out": [
        "42",
        "a#0",
        "a#0 (copy)",
        "a_exists#0",
        "a_exists#0 (copy)"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "42",
        "a#0 (copy)",
        "a_exists#0 (copy)"
      ]
    },
    "1606": {
      "op": "select",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%0#0"
      ]
    },
    "1607": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%0#0",
        "42"
      ]
    },
    "1609": {
      "op": "==",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%0#0"
      ]
    },
    "1610": {
      "op": "assert",
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "1611": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "\"b\""
      ]
    },
    "1613": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1614": {
      "op": "bytec 13 // 0x00023432",
      "defined_out": [
        "0x00023432",
        "a#0",
        "a_exists#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0x00023432"
      ]
    },
    "1616": {
      "op": "cover 2",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "0x00023432",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1618": {
      "op": "select",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "state_get%1#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%1#0"
      ]
    },
    "1619": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%2#0"
      ]
    },
    "1622": {
      "op": "pushbytes 0x3432",
      "defined_out": [
        "0x3432",
        "a#0",
        "a_exists#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%2#0",
        "0x3432"
      ]
    },
    "1626": {
      "op": "==",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%3#0"
      ]
    },
    "1627": {
      "op": "assert",
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "1628": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "0x424f585f43"
      ]
    },
    "1629": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1630": {
      "op": "bytec 13 // 0x00023432",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%2#0",
        "maybe_exists%2#0",
        "0x00023432"
      ]
    },
    "1632": {
      "op": "cover 2",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "0x00023432",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1634": {
      "op": "select",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "state_get%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%2#0"
      ]
    },
    "1635": {
      "op": "bytec 13 // 0x00023432",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%2#0",
        "0x00023432"
      ]
    },
    "1637": {
      "op": "==",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%6#0"
      ]
    },
    "1638": {
      "op": "assert",
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "1639": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "a_exists#0"
      ]
    },
    "1640": {
      "op": "!",
      "defined_out": [
        "a#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%7#0"
      ]
    },
    "1641": {
      "op": "assert",
      "stack_out": [
        "a#0"
      ]
    },
    "1642": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1643": {
      "op": "assert",
      "stack_out": []
    },
    "1644": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "1646": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1647": {
      "op": "pop",
      "stack_out": []
    },
    "1648": {
      "retsub": true,
      "op": "retsub"
    },
    "1649": {
      "subroutine": "examples.box_storage.contract.BoxContract.indirect_extract_and_replace",
      "params": {},
      "block": "indirect_extract_and_replace",
      "stack_in": [],
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "1651": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "\"box_large\"",
        "4096"
      ],
      "stack_out": [
        "\"box_large\"",
        "4096"
      ]
    },
    "1653": {
      "op": "intc_3 // 8",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "8"
      ],
      "stack_out": [
        "\"box_large\"",
        "4096",
        "8"
      ]
    },
    "1654": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "1655": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "1656": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "1"
      ]
    },
    "1657": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1658": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1659": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"box_large\""
      ]
    },
    "1661": {
      "op": "intc 4 // 4096",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"box_large\"",
        "4096"
      ]
    },
    "1663": {
      "op": "uncover 2",
      "stack_out": [
        "\"box_large\"",
        "4096",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1665": {
      "op": "box_replace",
      "stack_out": []
    },
    "1666": {
      "retsub": true,
      "op": "retsub"
    },
    "1667": {
      "subroutine": "examples.box_storage.contract.BoxContract.read_boxes",
      "params": {},
      "block": "read_boxes",
      "stack_in": [],
      "op": "bytec 7 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "1669": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1670": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "1671": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "1672": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "1"
      ]
    },
    "1673": {
      "op": "+",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1674": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%0#1",
        "1"
      ]
    },
    "1675": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1676": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"b\""
      ]
    },
    "1678": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "1679": {
      "error": "check self.box_b exists",
      "op": "assert // check self.box_b exists",
      "stack_out": [
        "tmp%1#0",
        "aggregate%box_get%2#0"
      ]
    },
    "1680": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1683": {
      "op": "bytec_3 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "0x424f585f43"
      ]
    },
    "1684": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "1685": {
      "error": "check self.box_c exists",
      "op": "assert // check self.box_c exists",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0"
      ]
    },
    "1686": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "aggregate%box_get%4#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0",
        "\"box_large\""
      ]
    },
    "1688": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "aggregate%box_get%4#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0",
        "\"box_large\"",
        "4096"
      ]
    },
    "1690": {
      "op": "intc_3 // 8",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "8",
        "aggregate%box_get%4#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0",
        "\"box_large\"",
        "4096",
        "8"
      ]
    },
    "1691": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%box_get%4#0",
        "box%box_extract%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0",
        "box%box_extract%0#0"
      ]
    },
    "1692": {
      "op": "btoi",
      "defined_out": [
        "aggregate%box_get%4#0",
        "tmp%1#0",
        "tmp%2#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%4#0",
        "values%0#0"
      ]
    },
    "1693": {
      "retsub": true,
      "op": "retsub"
    },
    "1694": {
      "subroutine": "examples.box_storage.contract.BoxContract.boxes_exist",
      "params": {},
      "block": "boxes_exist",
      "stack_in": [],
      "op": "bytec 7 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "1696": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1697": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1699": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\"",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "\"b\""
      ]
    },
    "1701": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1702": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1704": {
      "op": "bytec_3 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "0x424f585f43"
      ]
    },
    "1705": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "_%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1706": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ]
    },
    "1708": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "\"box_large\""
      ]
    },
    "1710": {
      "op": "box_len",
      "defined_out": [
        "_%3#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "_%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1711": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ]
    },
    "1713": {
      "retsub": true,
      "op": "retsub"
    },
    "1714": {
      "subroutine": "examples.box_storage.contract.BoxContract.create_dynamic_arr_struct",
      "params": {},
      "block": "create_dynamic_arr_struct",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1716": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1717": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "2"
      ]
    },
    "1718": {
      "op": "*",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1719": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "1720": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1721": {
      "op": "bytec 15 // 0x0014",
      "defined_out": [
        "0x0014",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%val_as_bytes%0#0",
        "0x0014"
      ]
    },
    "1723": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%1#0"
      ]
    },
    "1724": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%2#0"
      ]
    },
    "1725": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1726": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "1727": {
      "op": "pushbytes 0x001600000000",
      "defined_out": [
        "0x001600000000",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "0x001600000000"
      ]
    },
    "1735": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "1736": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1737": {
      "op": "box_del",
      "defined_out": [
        "aggregate%concat%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "{box_del}"
      ]
    },
    "1738": {
      "op": "pop",
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "1739": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "aggregate%concat%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1740": {
      "op": "swap",
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "aggregate%concat%1#0"
      ]
    },
    "1741": {
      "op": "box_put",
      "stack_out": []
    },
    "1742": {
      "retsub": true,
      "op": "retsub"
    },
    "1743": {
      "subroutine": "examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct",
      "params": {},
      "block": "delete_dynamic_arr_struct",
      "stack_in": [],
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "\"dynamic_arr_struct\""
      ]
    },
    "1744": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1745": {
      "op": "pop",
      "stack_out": []
    },
    "1746": {
      "retsub": true,
      "op": "retsub"
    },
    "1747": {
      "subroutine": "examples.box_storage.contract.BoxContract.append_dynamic_arr_struct",
      "params": {
        "times#0": "uint64"
      },
      "block": "append_dynamic_arr_struct",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1750": {
      "op": "intc_2 // 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "1751": {
      "block": "append_dynamic_arr_struct_for_header@1",
      "stack_in": [
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "1753": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "times#0 (copy)"
      ]
    },
    "1755": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1756": {
      "op": "bz append_dynamic_arr_struct_after_for@4",
      "stack_out": [
        "i#0"
      ]
    },
    "1759": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "1761": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "1762": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1763": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "aggregate%val_as_bytes%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1764": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "aggregate%val_as_bytes%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1766": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "2",
        "20",
        "aggregate%val_as_bytes%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1767": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%box_extract%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%box_extract%0#0"
      ]
    },
    "1768": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0"
      ]
    },
    "1769": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1770": {
      "op": "box_len",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%box_len%1#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%box_len%0#0",
        "box%box_len%1#0"
      ]
    },
    "1771": {
      "op": "pop",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%box_len%0#0"
      ]
    },
    "1772": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0"
      ]
    },
    "1773": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "box%btoi%0#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "box%btoi%0#0 (copy)"
      ]
    },
    "1774": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "box%btoi%0#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "box%btoi%0#0 (copy)",
        "1"
      ]
    },
    "1775": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%add%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "box%add%0#0"
      ]
    },
    "1776": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%add%0#0",
        "box%box_len%0#0"
      ]
    },
    "1778": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%val_as_bytes%0#0",
        "box%add%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%add%0#0",
        "box%box_len%0#0",
        "8"
      ]
    },
    "1779": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%add%0#0",
        "box%add%1#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%add%0#0",
        "box%add%1#0"
      ]
    },
    "1780": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%add%0#0",
        "box%add%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1781": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%add%0#0",
        "\"dynamic_arr_struct\"",
        "box%add%1#0"
      ]
    },
    "1782": {
      "op": "box_resize",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%add%0#0"
      ]
    },
    "1783": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%as_bytes%0#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%as_bytes%0#0"
      ]
    },
    "1784": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%as_u16_bytes%0#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%as_u16_bytes%0#0"
      ]
    },
    "1787": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%as_u16_bytes%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1788": {
      "op": "pushint 20 // 20",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%as_u16_bytes%0#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1790": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "\"dynamic_arr_struct\"",
        "20",
        "box%as_u16_bytes%0#0"
      ]
    },
    "1792": {
      "op": "box_replace",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0"
      ]
    },
    "1793": {
      "op": "intc_3 // 8",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "8"
      ]
    },
    "1794": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%mul%1#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%mul%1#0"
      ]
    },
    "1795": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "aggregate%val_as_bytes%0#0",
        "box%mul%1#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%mul%1#0",
        "22"
      ]
    },
    "1797": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%add%3#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%add%3#0"
      ]
    },
    "1798": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%add%3#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1799": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_arr_struct\"",
        "box%add%3#0"
      ]
    },
    "1800": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "0",
        "aggregate%val_as_bytes%0#0",
        "box%add%3#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_arr_struct\"",
        "box%add%3#0",
        "0"
      ]
    },
    "1801": {
      "op": "uncover 3",
      "stack_out": [
        "i#0",
        "i#0",
        "\"dynamic_arr_struct\"",
        "box%add%3#0",
        "0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1803": {
      "op": "box_splice",
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "1804": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "i#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1805": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1807": {
      "op": "intc_1 // 2",
      "stack_out": [
        "i#0",
        "i#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "1808": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "box%box_extract%1#0"
      ]
    },
    "1809": {
      "op": "btoi",
      "defined_out": [
        "box%btoi%1#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "box%btoi%1#0"
      ]
    },
    "1810": {
      "op": "intc_3 // 8",
      "stack_out": [
        "i#0",
        "i#0",
        "box%btoi%1#0",
        "8"
      ]
    },
    "1811": {
      "op": "+",
      "defined_out": [
        "box%add%4#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "box%add%4#0"
      ]
    },
    "1812": {
      "op": "itob",
      "defined_out": [
        "box%as_bytes%1#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "box%as_bytes%1#0"
      ]
    },
    "1813": {
      "op": "extract 6 2",
      "defined_out": [
        "box%as_u16_bytes%1#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "box%as_u16_bytes%1#0"
      ]
    },
    "1816": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "i#0",
        "box%as_u16_bytes%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1817": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "i#0",
        "i#0",
        "box%as_u16_bytes%1#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1819": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "i#0",
        "\"dynamic_arr_struct\"",
        "18",
        "box%as_u16_bytes%1#0"
      ]
    },
    "1821": {
      "op": "box_replace",
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "1822": {
      "op": "intc_0 // 1",
      "stack_out": [
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1823": {
      "op": "+",
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "1824": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "1826": {
      "op": "b append_dynamic_arr_struct_for_header@1"
    },
    "1829": {
      "block": "append_dynamic_arr_struct_after_for@4",
      "stack_in": [
        "i#0"
      ],
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "i#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1830": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20"
      ],
      "stack_out": [
        "i#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1832": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "2",
        "20"
      ],
      "stack_out": [
        "i#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1833": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%2#0"
      ],
      "stack_out": [
        "i#0",
        "box%box_extract%2#0"
      ]
    },
    "1834": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0"
      ],
      "stack_out": [
        "i#0",
        "box%array_length%0#0"
      ]
    },
    "1835": {
      "op": "swap"
    },
    "1836": {
      "retsub": true,
      "op": "retsub"
    },
    "1837": {
      "subroutine": "examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct",
      "params": {
        "times#0": "uint64"
      },
      "block": "pop_dynamic_arr_struct",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1840": {
      "op": "intc_2 // 0",
      "defined_out": [
        "_pop#0"
      ],
      "stack_out": [
        "_pop#0"
      ]
    },
    "1841": {
      "block": "pop_dynamic_arr_struct_for_header@1",
      "stack_in": [
        "_pop#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "_pop#0"
      ],
      "stack_out": [
        "_pop#0",
        "_pop#0"
      ]
    },
    "1843": {
      "op": "frame_dig -1",
      "defined_out": [
        "_pop#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "_pop#0",
        "_pop#0",
        "times#0 (copy)"
      ]
    },
    "1845": {
      "op": "<",
      "defined_out": [
        "_pop#0",
        "continue_looping%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "continue_looping%0#0"
      ]
    },
    "1846": {
      "op": "bz pop_dynamic_arr_struct_after_for@4",
      "stack_out": [
        "_pop#0"
      ]
    },
    "1849": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "_pop#0"
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1850": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "_pop#0"
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1852": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "2",
        "20",
        "_pop#0"
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1853": {
      "op": "box_extract",
      "defined_out": [
        "_pop#0",
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%box_extract%0#0"
      ]
    },
    "1854": {
      "op": "btoi",
      "defined_out": [
        "_pop#0",
        "box%btoi%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%btoi%0#0"
      ]
    },
    "1855": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "_pop#0",
        "box%btoi%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%btoi%0#0",
        "1"
      ]
    },
    "1856": {
      "op": "-",
      "defined_out": [
        "_pop#0",
        "box%sub%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%sub%0#0"
      ]
    },
    "1857": {
      "op": "dup",
      "defined_out": [
        "_pop#0",
        "box%sub%0#0",
        "box%sub%0#0 (copy)"
      ],
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "box%sub%0#0 (copy)"
      ]
    },
    "1858": {
      "op": "itob",
      "defined_out": [
        "_pop#0",
        "box%as_bytes%0#0",
        "box%sub%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "box%as_bytes%0#0"
      ]
    },
    "1859": {
      "op": "extract 6 2",
      "defined_out": [
        "_pop#0",
        "box%as_u16_bytes%0#0",
        "box%sub%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "box%as_u16_bytes%0#0"
      ]
    },
    "1862": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "box%as_u16_bytes%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1863": {
      "op": "pushint 20 // 20",
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "box%as_u16_bytes%0#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1865": {
      "op": "uncover 2",
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "\"dynamic_arr_struct\"",
        "20",
        "box%as_u16_bytes%0#0"
      ]
    },
    "1867": {
      "op": "box_replace",
      "stack_out": [
        "_pop#0",
        "box%sub%0#0"
      ]
    },
    "1868": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "_pop#0",
        "box%sub%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "8"
      ]
    },
    "1869": {
      "op": "*",
      "defined_out": [
        "_pop#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%mul%0#0"
      ]
    },
    "1870": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "_pop#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%mul%0#0",
        "22"
      ]
    },
    "1872": {
      "op": "+",
      "defined_out": [
        "_pop#0",
        "box%add%1#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%add%1#0"
      ]
    },
    "1873": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "_pop#0",
        "box%add%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1874": {
      "op": "swap",
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\"",
        "box%add%1#0"
      ]
    },
    "1875": {
      "op": "intc_3 // 8",
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\"",
        "box%add%1#0",
        "8"
      ]
    },
    "1876": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "0x",
        "8",
        "_pop#0",
        "box%add%1#0"
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\"",
        "box%add%1#0",
        "8",
        "0x"
      ]
    },
    "1878": {
      "op": "box_splice",
      "stack_out": [
        "_pop#0"
      ]
    },
    "1879": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1880": {
      "op": "box_len",
      "defined_out": [
        "_pop#0",
        "box%box_len%0#0",
        "box%box_len%1#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%box_len%0#0",
        "box%box_len%1#0"
      ]
    },
    "1881": {
      "op": "pop",
      "stack_out": [
        "_pop#0",
        "box%box_len%0#0"
      ]
    },
    "1882": {
      "op": "intc_3 // 8",
      "stack_out": [
        "_pop#0",
        "box%box_len%0#0",
        "8"
      ]
    },
    "1883": {
      "op": "-",
      "defined_out": [
        "_pop#0",
        "box%sub%1#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%sub%1#0"
      ]
    },
    "1884": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "_pop#0",
        "box%sub%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1885": {
      "op": "swap",
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\"",
        "box%sub%1#0"
      ]
    },
    "1886": {
      "op": "box_resize",
      "stack_out": [
        "_pop#0"
      ]
    },
    "1887": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1888": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "_pop#0"
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1890": {
      "op": "intc_1 // 2",
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "1891": {
      "op": "box_extract",
      "defined_out": [
        "_pop#0",
        "box%box_extract%1#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%box_extract%1#0"
      ]
    },
    "1892": {
      "op": "btoi",
      "defined_out": [
        "_pop#0",
        "box%btoi%1#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%btoi%1#0"
      ]
    },
    "1893": {
      "op": "intc_3 // 8",
      "stack_out": [
        "_pop#0",
        "box%btoi%1#0",
        "8"
      ]
    },
    "1894": {
      "op": "-",
      "defined_out": [
        "_pop#0",
        "box%sub%2#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%sub%2#0"
      ]
    },
    "1895": {
      "op": "itob",
      "defined_out": [
        "_pop#0",
        "box%as_bytes%1#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%as_bytes%1#0"
      ]
    },
    "1896": {
      "op": "extract 6 2",
      "defined_out": [
        "_pop#0",
        "box%as_u16_bytes%1#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%as_u16_bytes%1#0"
      ]
    },
    "1899": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "_pop#0",
        "box%as_u16_bytes%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1900": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "_pop#0",
        "box%as_u16_bytes%1#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1902": {
      "op": "uncover 2",
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\"",
        "18",
        "box%as_u16_bytes%1#0"
      ]
    },
    "1904": {
      "op": "box_replace",
      "stack_out": [
        "_pop#0"
      ]
    },
    "1905": {
      "op": "frame_dig 0",
      "stack_out": [
        "_pop#0",
        "_pop#0"
      ]
    },
    "1907": {
      "op": "intc_0 // 1",
      "stack_out": [
        "_pop#0",
        "_pop#0",
        "1"
      ]
    },
    "1908": {
      "op": "+",
      "stack_out": [
        "_pop#0",
        "_pop#0"
      ]
    },
    "1909": {
      "op": "frame_bury 0",
      "defined_out": [
        "_pop#0"
      ],
      "stack_out": [
        "_pop#0"
      ]
    },
    "1911": {
      "op": "b pop_dynamic_arr_struct_for_header@1"
    },
    "1914": {
      "block": "pop_dynamic_arr_struct_after_for@4",
      "stack_in": [
        "_pop#0"
      ],
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1915": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20"
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1917": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "2",
        "20"
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1918": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%2#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%box_extract%2#0"
      ]
    },
    "1919": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%array_length%0#0"
      ]
    },
    "1920": {
      "op": "swap"
    },
    "1921": {
      "retsub": true,
      "op": "retsub"
    },
    "1922": {
      "subroutine": "examples.box_storage.contract.BoxContract.set_nested_struct",
      "params": {
        "struct#0": "bytes"
      },
      "block": "set_nested_struct",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1925": {
      "op": "frame_dig -1",
      "defined_out": [
        "struct#0 (copy)"
      ],
      "stack_out": [
        "struct#0 (copy)"
      ]
    },
    "1927": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "struct#0 (copy)"
      ],
      "stack_out": [
        "struct#0 (copy)",
        "0"
      ]
    },
    "1928": {
      "op": "extract_uint64",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "1929": {
      "error": "struct.a is truthy",
      "op": "assert // struct.a is truthy",
      "stack_out": []
    },
    "1930": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "struct_bytes#0"
      ],
      "stack_out": [
        "struct_bytes#0"
      ]
    },
    "1933": {
      "op": "dup",
      "defined_out": [
        "struct_bytes#0",
        "struct_bytes#0 (copy)"
      ],
      "stack_out": [
        "struct_bytes#0",
        "struct_bytes#0 (copy)"
      ]
    },
    "1934": {
      "op": "len",
      "defined_out": [
        "struct_bytes#0",
        "struct_size#0"
      ],
      "stack_out": [
        "struct_bytes#0",
        "struct_size#0"
      ]
    },
    "1935": {
      "op": "intc 5 // 4098",
      "defined_out": [
        "4098",
        "struct_bytes#0",
        "struct_size#0"
      ],
      "stack_out": [
        "struct_bytes#0",
        "struct_size#0",
        "4098"
      ]
    },
    "1937": {
      "op": "+",
      "defined_out": [
        "struct_bytes#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct_bytes#0",
        "tmp%3#0"
      ]
    },
    "1938": {
      "op": "bytec_0 // \"box\"",
      "defined_out": [
        "\"box\"",
        "struct_bytes#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct_bytes#0",
        "tmp%3#0",
        "\"box\""
      ]
    },
    "1939": {
      "op": "swap",
      "stack_out": [
        "struct_bytes#0",
        "\"box\"",
        "tmp%3#0"
      ]
    },
    "1940": {
      "op": "box_create",
      "defined_out": [
        "struct_bytes#0",
        "{box_create}"
      ],
      "stack_out": [
        "struct_bytes#0",
        "{box_create}"
      ]
    },
    "1941": {
      "op": "pop",
      "stack_out": [
        "struct_bytes#0"
      ]
    },
    "1942": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "struct_bytes#0",
        "\"box\""
      ]
    },
    "1943": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "\"box\"",
        "4096",
        "struct_bytes#0"
      ],
      "stack_out": [
        "struct_bytes#0",
        "\"box\"",
        "4096"
      ]
    },
    "1945": {
      "op": "pushbytes 0x1002",
      "defined_out": [
        "\"box\"",
        "0x1002",
        "4096",
        "struct_bytes#0"
      ],
      "stack_out": [
        "struct_bytes#0",
        "\"box\"",
        "4096",
        "0x1002"
      ]
    },
    "1949": {
      "op": "box_replace",
      "stack_out": [
        "struct_bytes#0"
      ]
    },
    "1950": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "struct_bytes#0",
        "\"box\""
      ]
    },
    "1951": {
      "op": "intc 5 // 4098",
      "stack_out": [
        "struct_bytes#0",
        "\"box\"",
        "4098"
      ]
    },
    "1953": {
      "op": "uncover 2",
      "stack_out": [
        "\"box\"",
        "4098",
        "struct_bytes#0"
      ]
    },
    "1955": {
      "op": "box_replace",
      "stack_out": []
    },
    "1956": {
      "retsub": true,
      "op": "retsub"
    },
    "1957": {
      "subroutine": "examples.box_storage.contract.BoxContract.nested_write",
      "params": {
        "index#0": "uint64",
        "value#0": "uint64"
      },
      "block": "nested_write",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1960": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1962": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1963": {
      "op": "bytec_0 // \"box\"",
      "defined_out": [
        "\"box\"",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"box\""
      ]
    },
    "1964": {
      "op": "intc 5 // 4098",
      "defined_out": [
        "\"box\"",
        "4098",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"box\"",
        "4098"
      ]
    },
    "1966": {
      "op": "uncover 2",
      "stack_out": [
        "\"box\"",
        "4098",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1968": {
      "op": "box_replace",
      "stack_out": []
    },
    "1969": {
      "op": "frame_dig -1",
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1971": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "1"
      ]
    },
    "1972": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1973": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1974": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "aggregate%val_as_bytes%1#0",
        "\"box\""
      ]
    },
    "1975": {
      "op": "pushint 4110 // 4110",
      "defined_out": [
        "\"box\"",
        "4110",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0",
        "\"box\"",
        "4110"
      ]
    },
    "1978": {
      "op": "uncover 2",
      "stack_out": [
        "\"box\"",
        "4110",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1980": {
      "op": "box_replace",
      "stack_out": []
    },
    "1981": {
      "op": "frame_dig -1",
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "1983": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)",
        "2"
      ]
    },
    "1984": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1985": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "1986": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "\"box\""
      ]
    },
    "1987": {
      "op": "pushint 4136 // 4136",
      "defined_out": [
        "\"box\"",
        "4136",
        "aggregate%val_as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "\"box\"",
        "4136"
      ]
    },
    "1990": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "\"box\"",
        "4136",
        "2"
      ]
    },
    "1991": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%box_extract%0#0"
      ]
    },
    "1992": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%btoi%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%btoi%0#0"
      ]
    },
    "1993": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%btoi%0#0",
        "index#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%btoi%0#0",
        "index#0 (copy)"
      ]
    },
    "1995": {
      "op": ">",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%index_ok%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%index_ok%0#0"
      ]
    },
    "1996": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "1997": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "2"
      ]
    },
    "1998": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "2",
        "index#0 (copy)"
      ]
    },
    "2000": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0"
      ]
    },
    "2001": {
      "op": "intc 6 // 4138",
      "defined_out": [
        "4138",
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "4138"
      ]
    },
    "2003": {
      "op": "dig 1",
      "defined_out": [
        "4138",
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%mul%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "4138",
        "box%mul%0#0 (copy)"
      ]
    },
    "2005": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%add%1#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%add%1#0"
      ]
    },
    "2006": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%add%1#0",
        "\"box\""
      ]
    },
    "2007": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "\"box\"",
        "box%add%1#0"
      ]
    },
    "2008": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "\"box\"",
        "box%add%1#0",
        "2"
      ]
    },
    "2009": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%box_extract%1#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%box_extract%1#0"
      ]
    },
    "2010": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%btoi%1#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%btoi%1#0"
      ]
    },
    "2011": {
      "op": "intc 6 // 4138",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%btoi%1#0",
        "4138"
      ]
    },
    "2013": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ]
    },
    "2014": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "\"box\""
      ]
    },
    "2015": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%offset%7#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "\"box\"",
        "box%offset%7#0 (copy)"
      ]
    },
    "2017": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "\"box\"",
        "box%offset%7#0 (copy)",
        "2"
      ]
    },
    "2018": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%box_extract%2#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%box_extract%2#0"
      ]
    },
    "2019": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%btoi%2#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%btoi%2#0"
      ]
    },
    "2020": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%btoi%2#0",
        "index#0 (copy)"
      ]
    },
    "2022": {
      "op": ">",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%index_ok%1#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%index_ok%1#0"
      ]
    },
    "2023": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ]
    },
    "2024": {
      "op": "intc_1 // 2",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "2"
      ]
    },
    "2025": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%add%2#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%add%2#0"
      ]
    },
    "2026": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%add%2#0",
        "index#0 (copy)"
      ]
    },
    "2028": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%val_as_bytes%2#0",
        "box%add%2#0",
        "box%mul%0#0",
        "index#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%add%2#0",
        "index#0 (copy)",
        "8"
      ]
    },
    "2029": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%add%2#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%add%2#0",
        "box%element_offset%0#0"
      ]
    },
    "2030": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "box%add%2#0"
      ]
    },
    "2031": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%add%2#0",
        "box%element_offset%0#0",
        "box%element_offset%0#0 (copy)",
        "box%mul%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "box%add%2#0",
        "box%element_offset%0#0 (copy)"
      ]
    },
    "2033": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%8#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "box%offset%8#0"
      ]
    },
    "2034": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "box%offset%8#0",
        "\"box\""
      ]
    },
    "2035": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "\"box\"",
        "box%offset%8#0"
      ]
    },
    "2036": {
      "op": "uncover 4",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "\"box\"",
        "box%offset%8#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "2038": {
      "op": "box_replace",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0"
      ]
    },
    "2039": {
      "op": "frame_dig -1",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "value#0 (copy)"
      ]
    },
    "2041": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "value#0 (copy)",
        "3"
      ]
    },
    "2043": {
      "op": "+",
      "defined_out": [
        "box%element_offset%0#0",
        "box%mul%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "tmp%2#0"
      ]
    },
    "2044": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%3#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "2045": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%3#0",
        "\"box\""
      ]
    },
    "2046": {
      "op": "pushint 4118 // 4118",
      "defined_out": [
        "\"box\"",
        "4118",
        "aggregate%val_as_bytes%3#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%3#0",
        "\"box\"",
        "4118"
      ]
    },
    "2049": {
      "op": "uncover 2",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "\"box\"",
        "4118",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "2051": {
      "op": "box_replace",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0"
      ]
    },
    "2052": {
      "op": "frame_dig -1",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "value#0 (copy)"
      ]
    },
    "2054": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "value#0 (copy)",
        "4"
      ]
    },
    "2056": {
      "op": "+",
      "defined_out": [
        "box%element_offset%0#0",
        "box%mul%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "tmp%3#0"
      ]
    },
    "2057": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "2058": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "\"box\""
      ]
    },
    "2059": {
      "op": "pushint 4128 // 4128",
      "defined_out": [
        "\"box\"",
        "4128",
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "\"box\"",
        "4128"
      ]
    },
    "2062": {
      "op": "uncover 2",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "\"box\"",
        "4128",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "2064": {
      "op": "box_replace",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0"
      ]
    },
    "2065": {
      "op": "frame_dig -1",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "value#0 (copy)"
      ]
    },
    "2067": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "value#0 (copy)",
        "5"
      ]
    },
    "2069": {
      "op": "+",
      "defined_out": [
        "box%element_offset%0#0",
        "box%mul%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "tmp%4#0"
      ]
    },
    "2070": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "2071": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "\"box\""
      ]
    },
    "2072": {
      "op": "pushint 4108 // 4108",
      "defined_out": [
        "\"box\"",
        "4108",
        "aggregate%val_as_bytes%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "\"box\"",
        "4108"
      ]
    },
    "2075": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "\"box\"",
        "4108",
        "2"
      ]
    },
    "2076": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%box_extract%3#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%box_extract%3#0"
      ]
    },
    "2077": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%btoi%3#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%btoi%3#0"
      ]
    },
    "2078": {
      "op": "intc 5 // 4098",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%btoi%3#0",
        "4098"
      ]
    },
    "2080": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%16#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%16#0"
      ]
    },
    "2081": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%16#0",
        "\"box\""
      ]
    },
    "2082": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "aggregate%val_as_bytes%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "box%offset%16#0 (copy)"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%16#0",
        "\"box\"",
        "box%offset%16#0 (copy)"
      ]
    },
    "2084": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%16#0",
        "\"box\"",
        "box%offset%16#0 (copy)",
        "2"
      ]
    },
    "2085": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%box_extract%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%16#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%16#0",
        "box%box_extract%4#0"
      ]
    },
    "2086": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%btoi%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%16#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%16#0",
        "box%btoi%4#0"
      ]
    },
    "2087": {
      "op": "frame_dig -2",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%16#0",
        "box%btoi%4#0",
        "index#0 (copy)"
      ]
    },
    "2089": {
      "op": ">",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%element_offset%0#0",
        "box%index_ok%2#0",
        "box%mul%0#0",
        "box%offset%16#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%16#0",
        "box%index_ok%2#0"
      ]
    },
    "2090": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%16#0"
      ]
    },
    "2091": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%16#0",
        "2"
      ]
    },
    "2092": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0"
      ]
    },
    "2093": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0",
        "box%add%4#0 (copy)",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0",
        "box%add%4#0 (copy)"
      ]
    },
    "2094": {
      "op": "dig 4",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0",
        "box%add%4#0 (copy)",
        "box%mul%0#0 (copy)"
      ]
    },
    "2096": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0",
        "box%add%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0",
        "box%add%5#0"
      ]
    },
    "2097": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0",
        "box%add%5#0",
        "\"box\""
      ]
    },
    "2098": {
      "op": "swap",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0",
        "\"box\"",
        "box%add%5#0"
      ]
    },
    "2099": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0",
        "\"box\"",
        "box%add%5#0",
        "2"
      ]
    },
    "2100": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0",
        "box%box_extract%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0",
        "box%box_extract%5#0"
      ]
    },
    "2101": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0",
        "box%btoi%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%4#0",
        "box%btoi%5#0"
      ]
    },
    "2102": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%17#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%17#0"
      ]
    },
    "2103": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "aggregate%val_as_bytes%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%17#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%17#0",
        "18"
      ]
    },
    "2105": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%18#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%18#0"
      ]
    },
    "2106": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%18#0",
        "\"box\""
      ]
    },
    "2107": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "aggregate%val_as_bytes%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%18#0",
        "box%offset%18#0 (copy)"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%18#0",
        "\"box\"",
        "box%offset%18#0 (copy)"
      ]
    },
    "2109": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%18#0",
        "\"box\"",
        "box%offset%18#0 (copy)",
        "2"
      ]
    },
    "2110": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%box_extract%6#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%18#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%18#0",
        "box%box_extract%6#0"
      ]
    },
    "2111": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%btoi%6#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%18#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%18#0",
        "box%btoi%6#0"
      ]
    },
    "2112": {
      "op": "frame_dig -2",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%18#0",
        "box%btoi%6#0",
        "index#0 (copy)"
      ]
    },
    "2114": {
      "op": ">",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%element_offset%0#0",
        "box%index_ok%3#0",
        "box%mul%0#0",
        "box%offset%18#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%18#0",
        "box%index_ok%3#0"
      ]
    },
    "2115": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%18#0"
      ]
    },
    "2116": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%18#0",
        "2"
      ]
    },
    "2117": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0"
      ]
    },
    "2118": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0",
        "box%add%6#0 (copy)",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0",
        "box%add%6#0 (copy)"
      ]
    },
    "2119": {
      "op": "uncover 4",
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0",
        "box%add%6#0 (copy)",
        "box%mul%0#0"
      ]
    },
    "2121": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0",
        "box%add%7#0",
        "box%element_offset%0#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0",
        "box%add%7#0"
      ]
    },
    "2122": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0",
        "box%add%7#0",
        "\"box\""
      ]
    },
    "2123": {
      "op": "swap",
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0",
        "\"box\"",
        "box%add%7#0"
      ]
    },
    "2124": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0",
        "\"box\"",
        "box%add%7#0",
        "2"
      ]
    },
    "2125": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0",
        "box%box_extract%7#0",
        "box%element_offset%0#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0",
        "box%box_extract%7#0"
      ]
    },
    "2126": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0",
        "box%btoi%7#0",
        "box%element_offset%0#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%6#0",
        "box%btoi%7#0"
      ]
    },
    "2127": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%element_offset%0#0",
        "box%offset%19#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%19#0"
      ]
    },
    "2128": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%19#0",
        "\"box\""
      ]
    },
    "2129": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "aggregate%val_as_bytes%5#0",
        "box%element_offset%0#0",
        "box%offset%19#0",
        "box%offset%19#0 (copy)"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%19#0",
        "\"box\"",
        "box%offset%19#0 (copy)"
      ]
    },
    "2131": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%19#0",
        "\"box\"",
        "box%offset%19#0 (copy)",
        "2"
      ]
    },
    "2132": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%box_extract%8#0",
        "box%element_offset%0#0",
        "box%offset%19#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%19#0",
        "box%box_extract%8#0"
      ]
    },
    "2133": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%btoi%8#0",
        "box%element_offset%0#0",
        "box%offset%19#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%19#0",
        "box%btoi%8#0"
      ]
    },
    "2134": {
      "op": "frame_dig -2",
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%19#0",
        "box%btoi%8#0",
        "index#0 (copy)"
      ]
    },
    "2136": {
      "op": ">",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%element_offset%0#0",
        "box%index_ok%4#0",
        "box%offset%19#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%19#0",
        "box%index_ok%4#0"
      ]
    },
    "2137": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%19#0"
      ]
    },
    "2138": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%offset%19#0",
        "2"
      ]
    },
    "2139": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%add%8#0",
        "box%element_offset%0#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%5#0",
        "box%add%8#0"
      ]
    },
    "2140": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%val_as_bytes%5#0",
        "box%add%8#0",
        "box%element_offset%0#0"
      ]
    },
    "2142": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%5#0",
        "box%offset%20#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%5#0",
        "box%offset%20#0"
      ]
    },
    "2143": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "aggregate%val_as_bytes%5#0",
        "box%offset%20#0",
        "\"box\""
      ]
    },
    "2144": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%5#0",
        "\"box\"",
        "box%offset%20#0"
      ]
    },
    "2145": {
      "op": "uncover 2",
      "stack_out": [
        "\"box\"",
        "box%offset%20#0",
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "2147": {
      "op": "box_replace",
      "stack_out": []
    },
    "2148": {
      "retsub": true,
      "op": "retsub"
    },
    "2149": {
      "subroutine": "examples.box_storage.contract.BoxContract.nested_read",
      "params": {
        "i1#0": "uint64",
        "i2#0": "uint64",
        "i3#0": "uint64"
      },
      "block": "nested_read",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "2152": {
      "op": "bytec_0 // \"box\"",
      "defined_out": [
        "\"box\""
      ],
      "stack_out": [
        "\"box\""
      ]
    },
    "2153": {
      "op": "intc 5 // 4098",
      "defined_out": [
        "\"box\"",
        "4098"
      ],
      "stack_out": [
        "\"box\"",
        "4098"
      ]
    },
    "2155": {
      "op": "intc_3 // 8",
      "defined_out": [
        "\"box\"",
        "4098",
        "8"
      ],
      "stack_out": [
        "\"box\"",
        "4098",
        "8"
      ]
    },
    "2156": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "2157": {
      "op": "btoi",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "2158": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "\"box\""
      ]
    },
    "2159": {
      "op": "pushint 4110 // 4110",
      "defined_out": [
        "\"box\"",
        "4110",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "\"box\"",
        "4110"
      ]
    },
    "2162": {
      "op": "intc_3 // 8",
      "stack_out": [
        "a#0",
        "\"box\"",
        "4110",
        "8"
      ]
    },
    "2163": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "box%box_extract%1#0"
      ],
      "stack_out": [
        "a#0",
        "box%box_extract%1#0"
      ]
    },
    "2164": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "2165": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "\"box\""
      ]
    },
    "2166": {
      "op": "pushint 4136 // 4136",
      "defined_out": [
        "\"box\"",
        "4136",
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "\"box\"",
        "4136"
      ]
    },
    "2169": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"box\"",
        "2",
        "4136",
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "\"box\"",
        "4136",
        "2"
      ]
    },
    "2170": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "b#0",
        "box%box_extract%2#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%box_extract%2#0"
      ]
    },
    "2171": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "box%btoi%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%btoi%0#0"
      ]
    },
    "2172": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "b#0",
        "box%btoi%0#0",
        "i1#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%btoi%0#0",
        "i1#0 (copy)"
      ]
    },
    "2174": {
      "op": ">",
      "defined_out": [
        "a#0",
        "b#0",
        "box%index_ok%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%index_ok%0#0"
      ]
    },
    "2175": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "2176": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "2"
      ]
    },
    "2177": {
      "op": "frame_dig -3",
      "stack_out": [
        "a#0",
        "b#0",
        "2",
        "i1#0 (copy)"
      ]
    },
    "2179": {
      "op": "*",
      "defined_out": [
        "a#0",
        "b#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0"
      ]
    },
    "2180": {
      "op": "intc 6 // 4138",
      "defined_out": [
        "4138",
        "a#0",
        "b#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "4138"
      ]
    },
    "2182": {
      "op": "dig 1",
      "defined_out": [
        "4138",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%mul%0#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "4138",
        "box%mul%0#0 (copy)"
      ]
    },
    "2184": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "box%add%1#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%add%1#0"
      ]
    },
    "2185": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%add%1#0",
        "\"box\""
      ]
    },
    "2186": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "\"box\"",
        "box%add%1#0"
      ]
    },
    "2187": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "\"box\"",
        "box%add%1#0",
        "2"
      ]
    },
    "2188": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "b#0",
        "box%box_extract%3#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%box_extract%3#0"
      ]
    },
    "2189": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "box%btoi%1#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%btoi%1#0"
      ]
    },
    "2190": {
      "op": "intc 6 // 4138",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%btoi%1#0",
        "4138"
      ]
    },
    "2192": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ]
    },
    "2193": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "\"box\""
      ]
    },
    "2194": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%offset%7#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "\"box\"",
        "box%offset%7#0 (copy)"
      ]
    },
    "2196": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "\"box\"",
        "box%offset%7#0 (copy)",
        "2"
      ]
    },
    "2197": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "b#0",
        "box%box_extract%4#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%box_extract%4#0"
      ]
    },
    "2198": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "box%btoi%2#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%btoi%2#0"
      ]
    },
    "2199": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "b#0",
        "box%btoi%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "i2#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%btoi%2#0",
        "i2#0 (copy)"
      ]
    },
    "2201": {
      "op": ">",
      "defined_out": [
        "a#0",
        "b#0",
        "box%index_ok%1#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%index_ok%1#0"
      ]
    },
    "2202": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ]
    },
    "2203": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "2"
      ]
    },
    "2204": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "box%add%2#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%add%2#0"
      ]
    },
    "2205": {
      "op": "frame_dig -2",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%add%2#0",
        "i2#0 (copy)"
      ]
    },
    "2207": {
      "op": "intc_3 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%add%2#0",
        "i2#0 (copy)",
        "8"
      ]
    },
    "2208": {
      "op": "*",
      "defined_out": [
        "a#0",
        "b#0",
        "box%add%2#0",
        "box%element_offset%0#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%add%2#0",
        "box%element_offset%0#0"
      ]
    },
    "2209": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%8#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%8#0"
      ]
    },
    "2210": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%8#0",
        "\"box\""
      ]
    },
    "2211": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "\"box\"",
        "box%offset%8#0"
      ]
    },
    "2212": {
      "op": "intc_3 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "\"box\"",
        "box%offset%8#0",
        "8"
      ]
    },
    "2213": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "b#0",
        "box%box_extract%5#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%box_extract%5#0"
      ]
    },
    "2214": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0"
      ]
    },
    "2215": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "\"box\""
      ]
    },
    "2216": {
      "op": "pushint 4118 // 4118",
      "defined_out": [
        "\"box\"",
        "4118",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "\"box\"",
        "4118"
      ]
    },
    "2219": {
      "op": "intc_3 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "\"box\"",
        "4118",
        "8"
      ]
    },
    "2220": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%6#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "box%box_extract%6#0"
      ]
    },
    "2221": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0"
      ]
    },
    "2222": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "\"box\""
      ]
    },
    "2223": {
      "op": "pushint 4128 // 4128",
      "defined_out": [
        "\"box\"",
        "4128",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "\"box\"",
        "4128"
      ]
    },
    "2226": {
      "op": "intc_3 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "\"box\"",
        "4128",
        "8"
      ]
    },
    "2227": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%7#0",
        "box%mul%0#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "box%box_extract%7#0"
      ]
    },
    "2228": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0"
      ]
    },
    "2229": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "\"box\""
      ]
    },
    "2230": {
      "op": "pushint 4108 // 4108",
      "defined_out": [
        "\"box\"",
        "4108",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "\"box\"",
        "4108"
      ]
    },
    "2233": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "\"box\"",
        "4108",
        "2"
      ]
    },
    "2234": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%8#0",
        "box%mul%0#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%box_extract%8#0"
      ]
    },
    "2235": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%btoi%3#0",
        "box%mul%0#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%btoi%3#0"
      ]
    },
    "2236": {
      "op": "intc 5 // 4098",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "4098"
      ]
    },
    "2238": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0"
      ]
    },
    "2239": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "\"box\""
      ]
    },
    "2240": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "box%offset%16#0 (copy)",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "\"box\"",
        "box%offset%16#0 (copy)"
      ]
    },
    "2242": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "\"box\"",
        "box%offset%16#0 (copy)",
        "2"
      ]
    },
    "2243": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%9#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "box%box_extract%9#0"
      ]
    },
    "2244": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%btoi%4#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "box%btoi%4#0"
      ]
    },
    "2245": {
      "op": "frame_dig -3",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "box%btoi%4#0",
        "i1#0 (copy)"
      ]
    },
    "2247": {
      "op": ">",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%index_ok%2#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "box%index_ok%2#0"
      ]
    },
    "2248": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0"
      ]
    },
    "2249": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "2"
      ]
    },
    "2250": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%4#0",
        "box%mul%0#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0"
      ]
    },
    "2251": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%4#0",
        "box%add%4#0 (copy)",
        "box%mul%0#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "box%add%4#0 (copy)"
      ]
    },
    "2252": {
      "op": "uncover 5",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "box%add%4#0 (copy)",
        "box%mul%0#0"
      ]
    },
    "2254": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%4#0",
        "box%add%5#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "box%add%5#0"
      ]
    },
    "2255": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "box%add%5#0",
        "\"box\""
      ]
    },
    "2256": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "\"box\"",
        "box%add%5#0"
      ]
    },
    "2257": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "\"box\"",
        "box%add%5#0",
        "2"
      ]
    },
    "2258": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%4#0",
        "box%box_extract%10#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "box%box_extract%10#0"
      ]
    },
    "2259": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%4#0",
        "box%btoi%5#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "box%btoi%5#0"
      ]
    },
    "2260": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%17#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%17#0"
      ]
    },
    "2261": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%17#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%17#0",
        "18"
      ]
    },
    "2263": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%18#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0"
      ]
    },
    "2264": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "\"box\""
      ]
    },
    "2265": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%18#0",
        "box%offset%18#0 (copy)",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "\"box\"",
        "box%offset%18#0 (copy)"
      ]
    },
    "2267": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "\"box\"",
        "box%offset%18#0 (copy)",
        "2"
      ]
    },
    "2268": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%11#0",
        "box%offset%18#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "box%box_extract%11#0"
      ]
    },
    "2269": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%btoi%6#0",
        "box%offset%18#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "box%btoi%6#0"
      ]
    },
    "2270": {
      "op": "frame_dig -2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "box%btoi%6#0",
        "i2#0 (copy)"
      ]
    },
    "2272": {
      "op": ">",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%index_ok%3#0",
        "box%offset%18#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "box%index_ok%3#0"
      ]
    },
    "2273": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0"
      ]
    },
    "2274": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "2"
      ]
    },
    "2275": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%6#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0"
      ]
    },
    "2276": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "2"
      ]
    },
    "2277": {
      "op": "frame_dig -2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "2",
        "i2#0 (copy)"
      ]
    },
    "2279": {
      "op": "*",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%6#0",
        "box%mul%2#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "box%mul%2#0"
      ]
    },
    "2280": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%6#0",
        "box%add%6#0 (copy)",
        "box%mul%2#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "box%mul%2#0",
        "box%add%6#0 (copy)"
      ]
    },
    "2282": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%6#0",
        "box%add%7#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "box%add%7#0"
      ]
    },
    "2283": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "box%add%7#0",
        "\"box\""
      ]
    },
    "2284": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "\"box\"",
        "box%add%7#0"
      ]
    },
    "2285": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "\"box\"",
        "box%add%7#0",
        "2"
      ]
    },
    "2286": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%6#0",
        "box%box_extract%12#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "box%box_extract%12#0"
      ]
    },
    "2287": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%6#0",
        "box%btoi%7#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "box%btoi%7#0"
      ]
    },
    "2288": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%19#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0"
      ]
    },
    "2289": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "\"box\""
      ]
    },
    "2290": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%19#0",
        "box%offset%19#0 (copy)",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "\"box\"",
        "box%offset%19#0 (copy)"
      ]
    },
    "2292": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "\"box\"",
        "box%offset%19#0 (copy)",
        "2"
      ]
    },
    "2293": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%13#0",
        "box%offset%19#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "box%box_extract%13#0"
      ]
    },
    "2294": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%btoi%8#0",
        "box%offset%19#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "box%btoi%8#0"
      ]
    },
    "2295": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%btoi%8#0",
        "box%offset%19#0",
        "c#0",
        "d#0",
        "i3#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "box%btoi%8#0",
        "i3#0 (copy)"
      ]
    },
    "2297": {
      "op": ">",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%index_ok%4#0",
        "box%offset%19#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "box%index_ok%4#0"
      ]
    },
    "2298": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0"
      ]
    },
    "2299": {
      "op": "intc_1 // 2",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "2"
      ]
    },
    "2300": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%8#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%8#0"
      ]
    },
    "2301": {
      "op": "frame_dig -1",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%8#0",
        "i3#0 (copy)"
      ]
    },
    "2303": {
      "op": "intc_3 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%8#0",
        "i3#0 (copy)",
        "8"
      ]
    },
    "2304": {
      "op": "*",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%8#0",
        "box%element_offset%1#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%8#0",
        "box%element_offset%1#0"
      ]
    },
    "2305": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%20#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%20#0"
      ]
    },
    "2306": {
      "op": "bytec_0 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%20#0",
        "\"box\""
      ]
    },
    "2307": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "\"box\"",
        "box%offset%20#0"
      ]
    },
    "2308": {
      "op": "intc_3 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "\"box\"",
        "box%offset%20#0",
        "8"
      ]
    },
    "2309": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%14#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%box_extract%14#0"
      ]
    },
    "2310": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "c#0",
        "d#0",
        "woah_arr_arr#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "woah_arr_arr#0"
      ]
    },
    "2311": {
      "op": "uncover 5",
      "stack_out": [
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "woah_arr_arr#0",
        "a#0"
      ]
    },
    "2313": {
      "op": "uncover 5",
      "stack_out": [
        "arr_arr#0",
        "c#0",
        "d#0",
        "woah_arr_arr#0",
        "a#0",
        "b#0"
      ]
    },
    "2315": {
      "op": "+",
      "defined_out": [
        "arr_arr#0",
        "c#0",
        "d#0",
        "tmp%0#0",
        "woah_arr_arr#0"
      ],
      "stack_out": [
        "arr_arr#0",
        "c#0",
        "d#0",
        "woah_arr_arr#0",
        "tmp%0#0"
      ]
    },
    "2316": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "d#0",
        "woah_arr_arr#0",
        "tmp%0#0",
        "arr_arr#0"
      ]
    },
    "2318": {
      "op": "+",
      "defined_out": [
        "c#0",
        "d#0",
        "tmp%1#0",
        "woah_arr_arr#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "woah_arr_arr#0",
        "tmp%1#0"
      ]
    },
    "2319": {
      "op": "uncover 3",
      "stack_out": [
        "d#0",
        "woah_arr_arr#0",
        "tmp%1#0",
        "c#0"
      ]
    },
    "2321": {
      "op": "+",
      "defined_out": [
        "d#0",
        "tmp%2#0",
        "woah_arr_arr#0"
      ],
      "stack_out": [
        "d#0",
        "woah_arr_arr#0",
        "tmp%2#0"
      ]
    },
    "2322": {
      "op": "uncover 2",
      "stack_out": [
        "woah_arr_arr#0",
        "tmp%2#0",
        "d#0"
      ]
    },
    "2324": {
      "op": "+",
      "defined_out": [
        "tmp%3#0",
        "woah_arr_arr#0"
      ],
      "stack_out": [
        "woah_arr_arr#0",
        "tmp%3#0"
      ]
    },
    "2325": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2326": {
      "retsub": true,
      "op": "retsub"
    },
    "2327": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct",
      "params": {},
      "block": "sum_dynamic_arr_struct",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2330": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "box%array_length%1#0"
      ]
    },
    "2332": {
      "op": "dup",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ]
    },
    "2333": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2334": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\"",
        "0"
      ]
    },
    "2335": {
      "op": "intc_3 // 8",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "0",
        "8"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\"",
        "0",
        "8"
      ]
    },
    "2336": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "box%box_extract%0#0"
      ]
    },
    "2337": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0"
      ]
    },
    "2338": {
      "op": "dup",
      "defined_out": [
        "values%0#0",
        "values%0#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%0#0 (copy)"
      ]
    },
    "2339": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "values%0#0",
        "values%0#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%0#0 (copy)",
        "1"
      ]
    },
    "2340": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "tmp%0#0"
      ]
    },
    "2341": {
      "error": "expected 1",
      "op": "assert // expected 1",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0"
      ]
    },
    "2342": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2343": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "10",
        "values%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "\"dynamic_arr_struct\"",
        "10"
      ]
    },
    "2345": {
      "op": "intc_3 // 8",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "\"dynamic_arr_struct\"",
        "10",
        "8"
      ]
    },
    "2346": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "box%box_extract%1#0"
      ]
    },
    "2347": {
      "op": "btoi",
      "defined_out": [
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0"
      ]
    },
    "2348": {
      "op": "dup",
      "defined_out": [
        "values%0#0",
        "values%1#0",
        "values%1#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0",
        "values%1#0 (copy)"
      ]
    },
    "2349": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "values%0#0",
        "values%1#0",
        "values%1#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0",
        "values%1#0 (copy)",
        "2"
      ]
    },
    "2350": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0",
        "tmp%1#0"
      ]
    },
    "2351": {
      "error": "expected 2",
      "op": "assert // expected 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0"
      ]
    },
    "2352": {
      "op": "+",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0"
      ]
    },
    "2353": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2354": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "2356": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "2357": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%4#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%box_extract%4#0"
      ]
    },
    "2358": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0"
      ]
    },
    "2359": {
      "op": "intc_2 // 0",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2360": {
      "block": "sum_dynamic_arr_struct_for_header@1",
      "stack_in": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2362": {
      "op": "frame_dig 3",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%array_length%0#0"
      ]
    },
    "2364": {
      "op": "<",
      "defined_out": [
        "box%array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "2365": {
      "op": "bz sum_dynamic_arr_struct_after_for@4",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2368": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2369": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "2371": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "2",
        "20",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "2372": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%0#0",
        "box%box_extract%5#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%box_extract%5#0"
      ]
    },
    "2373": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "box%btoi%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%0#0"
      ]
    },
    "2374": {
      "op": "frame_dig 4",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2376": {
      "op": "dup"
    },
    "2377": {
      "op": "uncover 2",
      "defined_out": [
        "box%array_length%0#0",
        "box%btoi%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "box%btoi%0#0"
      ]
    },
    "2379": {
      "op": "<",
      "defined_out": [
        "box%array_length%0#0",
        "box%index_ok%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%index_ok%0#0"
      ]
    },
    "2380": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2381": {
      "op": "dup",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "2382": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "8"
      ]
    },
    "2383": {
      "op": "*",
      "defined_out": [
        "box%array_length%0#0",
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0"
      ]
    },
    "2384": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "box%array_length%0#0",
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0",
        "22"
      ]
    },
    "2386": {
      "op": "+",
      "defined_out": [
        "box%array_length%0#0",
        "box%offset%6#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%offset%6#0"
      ]
    },
    "2387": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%offset%6#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2388": {
      "op": "swap",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "box%offset%6#0"
      ]
    },
    "2389": {
      "op": "intc_3 // 8",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "box%offset%6#0",
        "8"
      ]
    },
    "2390": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%0#0",
        "box%box_extract%6#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%box_extract%6#0"
      ]
    },
    "2391": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "val#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "val#0"
      ]
    },
    "2392": {
      "op": "frame_dig 2",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "val#0",
        "total#0"
      ]
    },
    "2394": {
      "op": "+",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2395": {
      "op": "frame_bury 2",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2397": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "2398": {
      "op": "+",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2399": {
      "op": "frame_bury 4",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2401": {
      "op": "b sum_dynamic_arr_struct_for_header@1"
    },
    "2404": {
      "block": "sum_dynamic_arr_struct_after_for@4",
      "stack_in": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2405": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "2407": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "2408": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%7#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%box_extract%7#0"
      ]
    },
    "2409": {
      "op": "btoi",
      "defined_out": [
        "box%btoi%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%1#0"
      ]
    },
    "2410": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2411": {
      "op": "swap",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%1#0"
      ]
    },
    "2412": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%1#0",
        "2"
      ]
    },
    "2413": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%8#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%box_extract%8#0"
      ]
    },
    "2414": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%array_length%1#0"
      ]
    },
    "2415": {
      "op": "frame_bury 0",
      "defined_out": [
        "box%array_length%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2417": {
      "op": "intc_2 // 0",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0"
      ]
    },
    "2418": {
      "op": "frame_bury 1",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2420": {
      "block": "sum_dynamic_arr_struct_for_header@5",
      "stack_in": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0"
      ]
    },
    "2422": {
      "op": "frame_dig 0",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%array_length%1#0"
      ]
    },
    "2424": {
      "op": "<",
      "defined_out": [
        "box%array_length%1#0",
        "continue_looping%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%1#0"
      ]
    },
    "2425": {
      "op": "bz sum_dynamic_arr_struct_after_for@8",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2428": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2429": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "2431": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "2",
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "2432": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%1#0",
        "box%box_extract%9#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%box_extract%9#0"
      ]
    },
    "2433": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%1#0",
        "box%btoi%2#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%2#0"
      ]
    },
    "2434": {
      "op": "intc_1 // 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%2#0",
        "2"
      ]
    },
    "2435": {
      "op": "+",
      "defined_out": [
        "box%add%3#0",
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%add%3#0"
      ]
    },
    "2436": {
      "op": "frame_dig 1",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%add%3#0",
        "item_index_internal%1#0"
      ]
    },
    "2438": {
      "op": "dup",
      "defined_out": [
        "box%add%3#0",
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "item_index_internal%1#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%add%3#0",
        "item_index_internal%1#0 (copy)",
        "item_index_internal%1#0 (copy)"
      ]
    },
    "2439": {
      "op": "cover 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%add%3#0",
        "item_index_internal%1#0 (copy)"
      ]
    },
    "2441": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "box%add%3#0",
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "item_index_internal%1#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%add%3#0",
        "item_index_internal%1#0 (copy)",
        "8"
      ]
    },
    "2442": {
      "op": "*",
      "defined_out": [
        "box%add%3#0",
        "box%array_length%1#0",
        "box%element_offset%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%add%3#0",
        "box%element_offset%1#0"
      ]
    },
    "2443": {
      "op": "+",
      "defined_out": [
        "box%array_length%1#0",
        "box%offset%9#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%offset%9#0"
      ]
    },
    "2444": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%offset%9#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2445": {
      "op": "swap",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\"",
        "box%offset%9#0"
      ]
    },
    "2446": {
      "op": "intc_3 // 8",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\"",
        "box%offset%9#0",
        "8"
      ]
    },
    "2447": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%1#0",
        "box%box_extract%10#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%box_extract%10#0"
      ]
    },
    "2448": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "val#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "val#0"
      ]
    },
    "2449": {
      "op": "frame_dig 2",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "val#0",
        "total#0"
      ]
    },
    "2451": {
      "op": "+",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "total#0"
      ]
    },
    "2452": {
      "op": "frame_bury 2",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0"
      ]
    },
    "2454": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "1"
      ]
    },
    "2455": {
      "op": "+",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0"
      ]
    },
    "2456": {
      "op": "frame_bury 1",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2458": {
      "op": "b sum_dynamic_arr_struct_for_header@5"
    },
    "2461": {
      "block": "sum_dynamic_arr_struct_after_for@8",
      "stack_in": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2463": {
      "op": "frame_bury 0"
    },
    "2465": {
      "retsub": true,
      "op": "retsub"
    },
    "2466": {
      "subroutine": "examples.box_storage.contract.BoxContract.create_bools",
      "params": {},
      "block": "create_bools",
      "stack_in": [],
      "op": "bytec 10 // \"too_many_bools\"",
      "defined_out": [
        "\"too_many_bools\""
      ],
      "stack_out": [
        "\"too_many_bools\""
      ]
    },
    "2468": {
      "op": "pushint 4125 // 4125",
      "defined_out": [
        "\"too_many_bools\"",
        "4125"
      ],
      "stack_out": [
        "\"too_many_bools\"",
        "4125"
      ]
    },
    "2471": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "2472": {
      "op": "pop",
      "stack_out": []
    },
    "2473": {
      "retsub": true,
      "op": "retsub"
    },
    "2474": {
      "subroutine": "examples.box_storage.contract.BoxContract.set_bool",
      "params": {
        "index#0": "uint64",
        "value#0": "uint64"
      },
      "block": "set_bool",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2477": {
      "op": "frame_dig -2",
      "defined_out": [
        "index#0 (copy)"
      ],
      "stack_out": [
        "index#0 (copy)"
      ]
    },
    "2479": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "index#0 (copy)"
      ],
      "stack_out": [
        "index#0 (copy)",
        "8"
      ]
    },
    "2480": {
      "op": "/",
      "defined_out": [
        "box%element_byte_offset%0#0"
      ],
      "stack_out": [
        "box%element_byte_offset%0#0"
      ]
    },
    "2481": {
      "op": "frame_dig -2",
      "stack_out": [
        "box%element_byte_offset%0#0",
        "index#0 (copy)"
      ]
    },
    "2483": {
      "op": "intc_3 // 8",
      "stack_out": [
        "box%element_byte_offset%0#0",
        "index#0 (copy)",
        "8"
      ]
    },
    "2484": {
      "op": "%",
      "defined_out": [
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0"
      ],
      "stack_out": [
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0"
      ]
    },
    "2485": {
      "op": "bytec 10 // \"too_many_bools\"",
      "defined_out": [
        "\"too_many_bools\"",
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0"
      ],
      "stack_out": [
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "\"too_many_bools\""
      ]
    },
    "2487": {
      "op": "dig 2",
      "defined_out": [
        "\"too_many_bools\"",
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0",
        "box%element_byte_offset%0#0 (copy)"
      ],
      "stack_out": [
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "\"too_many_bools\"",
        "box%element_byte_offset%0#0 (copy)"
      ]
    },
    "2489": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"too_many_bools\"",
        "1",
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0",
        "box%element_byte_offset%0#0 (copy)"
      ],
      "stack_out": [
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "\"too_many_bools\"",
        "box%element_byte_offset%0#0 (copy)",
        "1"
      ]
    },
    "2490": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0"
      ],
      "stack_out": [
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "box%box_extract%0#0"
      ]
    },
    "2491": {
      "op": "dig 1",
      "defined_out": [
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0",
        "box%element_bit_offset%0#0 (copy)",
        "box%element_byte_offset%0#0"
      ],
      "stack_out": [
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0 (copy)"
      ]
    },
    "2493": {
      "op": "intc_3 // 8",
      "stack_out": [
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0 (copy)",
        "8"
      ]
    },
    "2494": {
      "op": "<",
      "defined_out": [
        "aggregate%lt%0#0",
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0"
      ],
      "stack_out": [
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "box%box_extract%0#0",
        "aggregate%lt%0#0"
      ]
    },
    "2495": {
      "error": "index access is out of bounds",
      "op": "assert // index access is out of bounds",
      "stack_out": [
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "box%box_extract%0#0"
      ]
    },
    "2496": {
      "op": "swap",
      "stack_out": [
        "box%element_byte_offset%0#0",
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0"
      ]
    },
    "2497": {
      "op": "frame_dig -1",
      "defined_out": [
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box%element_byte_offset%0#0",
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0",
        "value#0 (copy)"
      ]
    },
    "2499": {
      "op": "setbit",
      "defined_out": [
        "aggregate%updated_target%0#0",
        "box%element_byte_offset%0#0"
      ],
      "stack_out": [
        "box%element_byte_offset%0#0",
        "aggregate%updated_target%0#0"
      ]
    },
    "2500": {
      "op": "bytec 10 // \"too_many_bools\"",
      "stack_out": [
        "box%element_byte_offset%0#0",
        "aggregate%updated_target%0#0",
        "\"too_many_bools\""
      ]
    },
    "2502": {
      "op": "cover 2",
      "stack_out": [
        "\"too_many_bools\"",
        "box%element_byte_offset%0#0",
        "aggregate%updated_target%0#0"
      ]
    },
    "2504": {
      "op": "box_replace",
      "stack_out": []
    },
    "2505": {
      "retsub": true,
      "op": "retsub"
    },
    "2506": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_bools",
      "params": {
        "stop_at_total#0": "uint64"
      },
      "block": "sum_bools",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2509": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "total#10"
      ]
    },
    "2511": {
      "op": "intc_2 // 0"
    },
    "2512": {
      "op": "bytec 10 // \"too_many_bools\"",
      "defined_out": [
        "\"too_many_bools\"",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "\"too_many_bools\""
      ]
    },
    "2514": {
      "op": "box_len",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "2515": {
      "op": "bury 1",
      "stack_out": [
        "total#10",
        "total#0",
        "aggregate%box_get%1#0"
      ]
    },
    "2517": {
      "error": "check self.too_many_bools exists",
      "op": "assert // check self.too_many_bools exists",
      "stack_out": [
        "total#10",
        "total#0"
      ]
    },
    "2518": {
      "op": "intc_2 // 0",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2519": {
      "block": "sum_bools_for_header@1",
      "stack_in": [
        "total#10",
        "total#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2521": {
      "op": "pushint 33000 // 33000",
      "defined_out": [
        "33000",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "33000"
      ]
    },
    "2525": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "2526": {
      "op": "frame_dig 1",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "continue_looping%0#0",
        "total#10"
      ]
    },
    "2528": {
      "op": "frame_bury 0",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "2530": {
      "op": "bz sum_bools_after_for@8",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2533": {
      "op": "frame_dig 2",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2535": {
      "op": "dup",
      "defined_out": [
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "2536": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "8"
      ]
    },
    "2537": {
      "op": "/",
      "defined_out": [
        "box%element_byte_offset%0#0",
        "item_index_internal%0#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%element_byte_offset%0#0"
      ]
    },
    "2538": {
      "op": "swap",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "box%element_byte_offset%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2539": {
      "op": "intc_3 // 8",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "box%element_byte_offset%0#0",
        "item_index_internal%0#0",
        "8"
      ]
    },
    "2540": {
      "op": "%",
      "defined_out": [
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0",
        "item_index_internal%0#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0"
      ]
    },
    "2541": {
      "op": "bytec 10 // \"too_many_bools\"",
      "defined_out": [
        "\"too_many_bools\"",
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0",
        "item_index_internal%0#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "\"too_many_bools\""
      ]
    },
    "2543": {
      "op": "uncover 2",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "box%element_bit_offset%0#0",
        "\"too_many_bools\"",
        "box%element_byte_offset%0#0"
      ]
    },
    "2545": {
      "op": "intc_0 // 1",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "box%element_bit_offset%0#0",
        "\"too_many_bools\"",
        "box%element_byte_offset%0#0",
        "1"
      ]
    },
    "2546": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0",
        "item_index_internal%0#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "box%element_bit_offset%0#0",
        "box%box_extract%0#0"
      ]
    },
    "2547": {
      "op": "swap",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0"
      ]
    },
    "2548": {
      "op": "getbit",
      "defined_out": [
        "item_index_internal%0#0",
        "total#10",
        "value#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "value#0"
      ]
    },
    "2549": {
      "op": "frame_dig 1",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "value#0",
        "total#10"
      ]
    },
    "2551": {
      "op": "frame_bury 0",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "value#0"
      ]
    },
    "2553": {
      "op": "bz sum_bools_after_if_else@4",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2556": {
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2558": {
      "op": "intc_0 // 1",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "total#0",
        "1"
      ]
    },
    "2559": {
      "op": "+",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "total#10"
      ]
    },
    "2560": {
      "op": "frame_bury 0",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2562": {
      "block": "sum_bools_after_if_else@4",
      "stack_in": [
        "total#10",
        "total#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2564": {
      "op": "dup",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "total#0",
        "total#0"
      ]
    },
    "2565": {
      "op": "frame_bury 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2567": {
      "op": "frame_dig -1",
      "defined_out": [
        "stop_at_total#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "total#0",
        "stop_at_total#0 (copy)"
      ]
    },
    "2569": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "tmp%1#0"
      ]
    },
    "2570": {
      "op": "bz sum_bools_after_if_else@6",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2573": {
      "op": "frame_dig 1",
      "defined_out": [
        "total#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "total#10"
      ]
    },
    "2575": {
      "op": "frame_bury 0",
      "defined_out": [
        "total#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2577": {
      "block": "sum_bools_after_for@8",
      "stack_in": [
        "total#10",
        "total#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2578": {
      "block": "sum_bools_after_if_else@6",
      "stack_in": [
        "total#10",
        "total#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2580": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "2581": {
      "op": "+",
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2582": {
      "op": "frame_bury 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#10",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2584": {
      "op": "b sum_bools_for_header@1"
    },
    "2587": {
      "subroutine": "examples.box_storage.contract.BoxContract.create_dynamic_box",
      "params": {},
      "block": "create_dynamic_box",
      "stack_in": [],
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "2588": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2589": {
      "op": "pop",
      "stack_out": []
    },
    "2590": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "2591": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "\"dynamic_box\"",
        "0x0000"
      ],
      "stack_out": [
        "\"dynamic_box\"",
        "0x0000"
      ]
    },
    "2595": {
      "op": "box_put",
      "stack_out": []
    },
    "2596": {
      "retsub": true,
      "op": "retsub"
    },
    "2597": {
      "subroutine": "examples.box_storage.contract.BoxContract.delete_dynamic_box",
      "params": {},
      "block": "delete_dynamic_box",
      "stack_in": [],
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "2598": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2599": {
      "op": "pop",
      "stack_out": []
    },
    "2600": {
      "retsub": true,
      "op": "retsub"
    },
    "2601": {
      "subroutine": "examples.box_storage.contract.BoxContract.append_dynamic_box",
      "params": {
        "times#0": "uint64"
      },
      "block": "append_dynamic_box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2604": {
      "op": "intc_2 // 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "2605": {
      "block": "append_dynamic_box_for_header@1",
      "stack_in": [
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "2607": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "times#0 (copy)"
      ]
    },
    "2609": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "2610": {
      "op": "bz append_dynamic_box_after_for@4",
      "stack_out": [
        "i#0"
      ]
    },
    "2613": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "2615": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "2616": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2617": {
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "aggregate%val_as_bytes%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_box\""
      ]
    },
    "2618": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "aggregate%val_as_bytes%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2619": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "2",
        "aggregate%val_as_bytes%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2620": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%box_extract%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%box_extract%0#0"
      ]
    },
    "2621": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0"
      ]
    },
    "2622": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "\"dynamic_box\""
      ]
    },
    "2623": {
      "op": "box_len",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%box_len%1#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%box_len%0#0",
        "box%box_len%1#0"
      ]
    },
    "2624": {
      "op": "pop",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%box_len%0#0"
      ]
    },
    "2625": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0"
      ]
    },
    "2626": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "box%btoi%0#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "box%btoi%0#0 (copy)"
      ]
    },
    "2627": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "box%btoi%0#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "box%btoi%0#0 (copy)",
        "1"
      ]
    },
    "2628": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%add%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "box%add%0#0"
      ]
    },
    "2629": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%add%0#0",
        "box%box_len%0#0"
      ]
    },
    "2631": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%val_as_bytes%0#0",
        "box%add%0#0",
        "box%box_len%0#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%add%0#0",
        "box%box_len%0#0",
        "8"
      ]
    },
    "2632": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%add%0#0",
        "box%add%1#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%add%0#0",
        "box%add%1#0"
      ]
    },
    "2633": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%add%0#0",
        "box%add%1#0",
        "\"dynamic_box\""
      ]
    },
    "2634": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%add%0#0",
        "\"dynamic_box\"",
        "box%add%1#0"
      ]
    },
    "2635": {
      "op": "box_resize",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%add%0#0"
      ]
    },
    "2636": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%as_bytes%0#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%as_bytes%0#0"
      ]
    },
    "2637": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%as_u16_bytes%0#0",
        "box%btoi%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%as_u16_bytes%0#0"
      ]
    },
    "2640": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%as_u16_bytes%0#0",
        "\"dynamic_box\""
      ]
    },
    "2641": {
      "op": "intc_2 // 0",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "box%as_u16_bytes%0#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2642": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "\"dynamic_box\"",
        "0",
        "box%as_u16_bytes%0#0"
      ]
    },
    "2644": {
      "op": "box_replace",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0"
      ]
    },
    "2645": {
      "op": "intc_3 // 8",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "8"
      ]
    },
    "2646": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%mul%1#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%mul%1#0"
      ]
    },
    "2647": {
      "op": "intc_1 // 2",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%mul%1#0",
        "2"
      ]
    },
    "2648": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%add%3#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%add%3#0"
      ]
    },
    "2649": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "box%add%3#0",
        "\"dynamic_box\""
      ]
    },
    "2650": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_box\"",
        "box%add%3#0"
      ]
    },
    "2651": {
      "op": "intc_2 // 0",
      "stack_out": [
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_box\"",
        "box%add%3#0",
        "0"
      ]
    },
    "2652": {
      "op": "uncover 3",
      "stack_out": [
        "i#0",
        "i#0",
        "\"dynamic_box\"",
        "box%add%3#0",
        "0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2654": {
      "op": "box_splice",
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "2655": {
      "op": "intc_0 // 1",
      "stack_out": [
        "i#0",
        "i#0",
        "1"
      ]
    },
    "2656": {
      "op": "+",
      "stack_out": [
        "i#0",
        "i#0"
      ]
    },
    "2657": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "2659": {
      "op": "b append_dynamic_box_for_header@1"
    },
    "2662": {
      "block": "append_dynamic_box_after_for@4",
      "stack_in": [
        "i#0"
      ],
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "i#0",
        "\"dynamic_box\""
      ]
    },
    "2663": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"dynamic_box\"",
        "0"
      ],
      "stack_out": [
        "i#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2664": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "2"
      ],
      "stack_out": [
        "i#0",
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2665": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0"
      ],
      "stack_out": [
        "i#0",
        "box%box_extract%1#0"
      ]
    },
    "2666": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0"
      ],
      "stack_out": [
        "i#0",
        "box%array_length%0#0"
      ]
    },
    "2667": {
      "op": "swap"
    },
    "2668": {
      "retsub": true,
      "op": "retsub"
    },
    "2669": {
      "subroutine": "examples.box_storage.contract.BoxContract.pop_dynamic_box",
      "params": {
        "times#0": "uint64"
      },
      "block": "pop_dynamic_box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2672": {
      "op": "intc_2 // 0",
      "defined_out": [
        "_pop#0"
      ],
      "stack_out": [
        "_pop#0"
      ]
    },
    "2673": {
      "block": "pop_dynamic_box_for_header@1",
      "stack_in": [
        "_pop#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "_pop#0"
      ],
      "stack_out": [
        "_pop#0",
        "_pop#0"
      ]
    },
    "2675": {
      "op": "frame_dig -1",
      "defined_out": [
        "_pop#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "_pop#0",
        "_pop#0",
        "times#0 (copy)"
      ]
    },
    "2677": {
      "op": "<",
      "defined_out": [
        "_pop#0",
        "continue_looping%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "continue_looping%0#0"
      ]
    },
    "2678": {
      "op": "bz pop_dynamic_box_after_for@4",
      "stack_out": [
        "_pop#0"
      ]
    },
    "2681": {
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "_pop#0"
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_box\""
      ]
    },
    "2682": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "_pop#0"
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2683": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "2",
        "_pop#0"
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2684": {
      "op": "box_extract",
      "defined_out": [
        "_pop#0",
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%box_extract%0#0"
      ]
    },
    "2685": {
      "op": "btoi",
      "defined_out": [
        "_pop#0",
        "box%btoi%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%btoi%0#0"
      ]
    },
    "2686": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "_pop#0",
        "box%btoi%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%btoi%0#0",
        "1"
      ]
    },
    "2687": {
      "op": "-",
      "defined_out": [
        "_pop#0",
        "box%sub%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%sub%0#0"
      ]
    },
    "2688": {
      "op": "dup",
      "defined_out": [
        "_pop#0",
        "box%sub%0#0",
        "box%sub%0#0 (copy)"
      ],
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "box%sub%0#0 (copy)"
      ]
    },
    "2689": {
      "op": "itob",
      "defined_out": [
        "_pop#0",
        "box%as_bytes%0#0",
        "box%sub%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "box%as_bytes%0#0"
      ]
    },
    "2690": {
      "op": "extract 6 2",
      "defined_out": [
        "_pop#0",
        "box%as_u16_bytes%0#0",
        "box%sub%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "box%as_u16_bytes%0#0"
      ]
    },
    "2693": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "box%as_u16_bytes%0#0",
        "\"dynamic_box\""
      ]
    },
    "2694": {
      "op": "intc_2 // 0",
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "box%as_u16_bytes%0#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2695": {
      "op": "uncover 2",
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "\"dynamic_box\"",
        "0",
        "box%as_u16_bytes%0#0"
      ]
    },
    "2697": {
      "op": "box_replace",
      "stack_out": [
        "_pop#0",
        "box%sub%0#0"
      ]
    },
    "2698": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "_pop#0",
        "box%sub%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%sub%0#0",
        "8"
      ]
    },
    "2699": {
      "op": "*",
      "defined_out": [
        "_pop#0",
        "box%mul%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%mul%0#0"
      ]
    },
    "2700": {
      "op": "intc_1 // 2",
      "stack_out": [
        "_pop#0",
        "box%mul%0#0",
        "2"
      ]
    },
    "2701": {
      "op": "+",
      "defined_out": [
        "_pop#0",
        "box%add%1#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%add%1#0"
      ]
    },
    "2702": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "_pop#0",
        "box%add%1#0",
        "\"dynamic_box\""
      ]
    },
    "2703": {
      "op": "swap",
      "stack_out": [
        "_pop#0",
        "\"dynamic_box\"",
        "box%add%1#0"
      ]
    },
    "2704": {
      "op": "intc_3 // 8",
      "stack_out": [
        "_pop#0",
        "\"dynamic_box\"",
        "box%add%1#0",
        "8"
      ]
    },
    "2705": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"dynamic_box\"",
        "0x",
        "8",
        "_pop#0",
        "box%add%1#0"
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_box\"",
        "box%add%1#0",
        "8",
        "0x"
      ]
    },
    "2707": {
      "op": "box_splice",
      "stack_out": [
        "_pop#0"
      ]
    },
    "2708": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "_pop#0",
        "\"dynamic_box\""
      ]
    },
    "2709": {
      "op": "box_len",
      "defined_out": [
        "_pop#0",
        "box%box_len%0#0",
        "box%box_len%1#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%box_len%0#0",
        "box%box_len%1#0"
      ]
    },
    "2710": {
      "op": "pop",
      "stack_out": [
        "_pop#0",
        "box%box_len%0#0"
      ]
    },
    "2711": {
      "op": "intc_3 // 8",
      "stack_out": [
        "_pop#0",
        "box%box_len%0#0",
        "8"
      ]
    },
    "2712": {
      "op": "-",
      "defined_out": [
        "_pop#0",
        "box%sub%1#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%sub%1#0"
      ]
    },
    "2713": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "_pop#0",
        "box%sub%1#0",
        "\"dynamic_box\""
      ]
    },
    "2714": {
      "op": "swap",
      "stack_out": [
        "_pop#0",
        "\"dynamic_box\"",
        "box%sub%1#0"
      ]
    },
    "2715": {
      "op": "box_resize",
      "stack_out": [
        "_pop#0"
      ]
    },
    "2716": {
      "op": "frame_dig 0",
      "stack_out": [
        "_pop#0",
        "_pop#0"
      ]
    },
    "2718": {
      "op": "intc_0 // 1",
      "stack_out": [
        "_pop#0",
        "_pop#0",
        "1"
      ]
    },
    "2719": {
      "op": "+",
      "stack_out": [
        "_pop#0",
        "_pop#0"
      ]
    },
    "2720": {
      "op": "frame_bury 0",
      "defined_out": [
        "_pop#0"
      ],
      "stack_out": [
        "_pop#0"
      ]
    },
    "2722": {
      "op": "b pop_dynamic_box_for_header@1"
    },
    "2725": {
      "block": "pop_dynamic_box_after_for@4",
      "stack_in": [
        "_pop#0"
      ],
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_box\""
      ]
    },
    "2726": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"dynamic_box\"",
        "0"
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2727": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "2"
      ],
      "stack_out": [
        "_pop#0",
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2728": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%box_extract%1#0"
      ]
    },
    "2729": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0"
      ],
      "stack_out": [
        "_pop#0",
        "box%array_length%0#0"
      ]
    },
    "2730": {
      "op": "swap"
    },
    "2731": {
      "retsub": true,
      "op": "retsub"
    },
    "2732": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_dynamic_box",
      "params": {},
      "block": "sum_dynamic_box",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "2735": {
      "op": "intc_2 // 0"
    },
    "2736": {
      "op": "bytec_2 // \"dynamic_box\""
    },
    "2737": {
      "op": "intc_2 // 0"
    },
    "2738": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "2",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2739": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%box_extract%0#0"
      ]
    },
    "2740": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0"
      ]
    },
    "2741": {
      "op": "intc_2 // 0",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2742": {
      "block": "sum_dynamic_box_for_header@1",
      "stack_in": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2744": {
      "op": "frame_dig 1",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%array_length%0#0"
      ]
    },
    "2746": {
      "op": "<",
      "defined_out": [
        "box%array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "2747": {
      "op": "bz sum_dynamic_box_after_for@4",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2750": {
      "op": "frame_dig 2",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2752": {
      "op": "dup",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "2753": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "8"
      ]
    },
    "2754": {
      "op": "*",
      "defined_out": [
        "box%array_length%0#0",
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0"
      ]
    },
    "2755": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "box%array_length%0#0",
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0",
        "2"
      ]
    },
    "2756": {
      "op": "+",
      "defined_out": [
        "box%array_length%0#0",
        "box%offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%offset%0#0"
      ]
    },
    "2757": {
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "box%array_length%0#0",
        "box%offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%offset%0#0",
        "\"dynamic_box\""
      ]
    },
    "2758": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "\"dynamic_box\"",
        "box%offset%0#0"
      ]
    },
    "2759": {
      "op": "intc_3 // 8",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "\"dynamic_box\"",
        "box%offset%0#0",
        "8"
      ]
    },
    "2760": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%0#0",
        "box%box_extract%1#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%box_extract%1#0"
      ]
    },
    "2761": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "val#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "val#0"
      ]
    },
    "2762": {
      "op": "frame_dig 0",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "val#0",
        "total#0"
      ]
    },
    "2764": {
      "op": "+",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2765": {
      "op": "frame_bury 0",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2767": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "2768": {
      "op": "+",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2769": {
      "op": "frame_bury 2",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2771": {
      "op": "b sum_dynamic_box_for_header@1"
    },
    "2774": {
      "block": "sum_dynamic_box_after_for@4",
      "stack_in": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2775": {
      "subroutine": "examples.box_storage.contract.BoxContract.write_dynamic_box",
      "params": {
        "index#0": "uint64",
        "value#0": "uint64"
      },
      "block": "write_dynamic_box",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2778": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "2780": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2781": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)"
      ]
    },
    "2783": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)",
        "8"
      ]
    },
    "2784": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0"
      ]
    },
    "2785": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0",
        "2"
      ]
    },
    "2786": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%offset%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%offset%0#0"
      ]
    },
    "2787": {
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "aggregate%val_as_bytes%0#0",
        "box%offset%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%offset%0#0",
        "\"dynamic_box\""
      ]
    },
    "2788": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_box\"",
        "box%offset%0#0"
      ]
    },
    "2789": {
      "op": "uncover 2",
      "stack_out": [
        "\"dynamic_box\"",
        "box%offset%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2791": {
      "op": "box_replace",
      "stack_out": []
    },
    "2792": {
      "retsub": true,
      "op": "retsub"
    },
    "2793": {
      "subroutine": "examples.box_storage.contract.BoxContract.write_dynamic_arr_struct",
      "params": {
        "index#0": "uint64",
        "value#0": "uint64"
      },
      "block": "write_dynamic_arr_struct",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2796": {
      "op": "frame_dig -1",
      "defined_out": [
        "value#0 (copy)"
      ],
      "stack_out": [
        "value#0 (copy)"
      ]
    },
    "2798": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2799": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2800": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "2802": {
      "op": "intc_1 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "2",
        "20",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "2803": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%box_extract%0#0"
      ]
    },
    "2804": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0"
      ]
    },
    "2805": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "index#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%btoi%0#0",
        "index#0 (copy)"
      ]
    },
    "2807": {
      "op": ">",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%index_ok%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%index_ok%0#0"
      ]
    },
    "2808": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2809": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)"
      ]
    },
    "2811": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "index#0 (copy)",
        "8"
      ]
    },
    "2812": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0"
      ]
    },
    "2813": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0",
        "22"
      ]
    },
    "2815": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box%offset%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%offset%1#0"
      ]
    },
    "2816": {
      "op": "bytec_1 // \"dynamic_arr_struct\"",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "box%offset%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2817": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_arr_struct\"",
        "box%offset%1#0"
      ]
    },
    "2818": {
      "op": "uncover 2",
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "box%offset%1#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2820": {
      "op": "box_replace",
      "stack_out": []
    },
    "2821": {
      "retsub": true,
      "op": "retsub"
    },
    "2822": {
      "subroutine": "examples.box_storage.contract.BoxContract.slice_box",
      "params": {},
      "block": "slice_box",
      "stack_in": [],
      "op": "bytec 12 // \"0\"",
      "defined_out": [
        "\"0\""
      ],
      "stack_out": [
        "\"0\""
      ]
    },
    "2824": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2825": {
      "op": "pop",
      "stack_out": []
    },
    "2826": {
      "op": "bytec 12 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "2828": {
      "op": "pushbytes 0x54657374696e672074657374696e6720313233",
      "defined_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ],
      "stack_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ]
    },
    "2849": {
      "op": "box_put",
      "stack_out": []
    },
    "2850": {
      "op": "bytec 12 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "2852": {
      "op": "box_len",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2853": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2854": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2855": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "2856": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "tmp%0#0 (copy)"
      ]
    },
    "2858": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2859": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "7"
      ]
    },
    "2861": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "7",
        "tmp%0#0 (copy)"
      ]
    },
    "2863": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2864": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2866": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "7"
      ]
    },
    "2868": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "7",
        "tmp%4#0"
      ]
    },
    "2870": {
      "op": "select",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "2871": {
      "op": "dig 1",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%3#0 (copy)"
      ]
    },
    "2873": {
      "op": "-",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "2874": {
      "op": "bytec 12 // \"0\"",
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "\"0\""
      ]
    },
    "2876": {
      "op": "cover 2",
      "stack_out": [
        "\"0\"",
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "2878": {
      "op": "box_extract",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2879": {
      "op": "pushbytes 0x54657374696e67",
      "defined_out": [
        "0x54657374696e67",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x54657374696e67"
      ]
    },
    "2888": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "2889": {
      "op": "assert",
      "stack_out": []
    },
    "2890": {
      "op": "bytec_3 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "2891": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "2892": {
      "op": "pop",
      "stack_out": []
    },
    "2893": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "2894": {
      "op": "pushbytes 0x000548656c6c6f",
      "defined_out": [
        "0x000548656c6c6f",
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43",
        "0x000548656c6c6f"
      ]
    },
    "2903": {
      "op": "box_put",
      "stack_out": []
    },
    "2904": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "2905": {
      "op": "box_len",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2906": {
      "op": "pop",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2907": {
      "op": "intc_1 // 2",
      "defined_out": [
        "2",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "2"
      ]
    },
    "2908": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "2",
        "tmp%10#0 (copy)"
      ]
    },
    "2910": {
      "op": "<",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "2911": {
      "op": "dig 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%10#0 (copy)"
      ]
    },
    "2913": {
      "op": "intc_1 // 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%10#0 (copy)",
        "2"
      ]
    },
    "2914": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "2",
        "tmp%12#0"
      ]
    },
    "2916": {
      "op": "select",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0"
      ]
    },
    "2917": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0",
        "10"
      ]
    },
    "2919": {
      "op": "dig 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0",
        "10",
        "tmp%10#0 (copy)"
      ]
    },
    "2921": {
      "op": "<",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "2922": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%10#0"
      ]
    },
    "2924": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%10#0",
        "10"
      ]
    },
    "2926": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%13#0",
        "tmp%10#0",
        "10",
        "tmp%14#0"
      ]
    },
    "2928": {
      "op": "select",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "2929": {
      "op": "dig 1",
      "defined_out": [
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%13#0 (copy)"
      ]
    },
    "2931": {
      "op": "-",
      "defined_out": [
        "tmp%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "2932": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "tmp%13#0",
        "tmp%16#0",
        "0x424f585f43"
      ]
    },
    "2933": {
      "op": "cover 2",
      "stack_out": [
        "0x424f585f43",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "2935": {
      "op": "box_extract",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "2936": {
      "op": "pushbytes 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0x48656c6c6f"
      ]
    },
    "2943": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "2944": {
      "op": "assert",
      "stack_out": []
    },
    "2945": {
      "retsub": true,
      "op": "retsub"
    },
    "2946": {
      "subroutine": "examples.box_storage.contract.BoxContract.arc4_box",
      "params": {},
      "block": "arc4_box",
      "stack_in": [],
      "op": "pushbytess 0x64 0x00010203 // 0x64, 0x00010203",
      "defined_out": [
        "0x00010203",
        "0x64"
      ],
      "stack_out": [
        "0x64",
        "0x00010203"
      ]
    },
    "2955": {
      "op": "box_put",
      "stack_out": []
    },
    "2956": {
      "retsub": true,
      "op": "retsub"
    },
    "2957": {
      "subroutine": "examples.box_storage.contract.BoxContract.test_box_ref",
      "params": {},
      "block": "test_box_ref",
      "stack_in": [],
      "op": "bytec 5 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "2959": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2960": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2962": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2963": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "2964": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "2966": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "2968": {
      "op": "box_create",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2969": {
      "op": "assert",
      "stack_out": []
    },
    "2970": {
      "op": "txn Sender",
      "defined_out": [
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0"
      ]
    },
    "2972": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2974": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2976": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "2977": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0",
        "sender_bytes#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "sender_bytes#0 (copy)"
      ]
    },
    "2979": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2980": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2982": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"blob\"",
        "8000",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "8000"
      ]
    },
    "2985": {
      "op": "box_resize",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2986": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2988": {
      "op": "intc_2 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "2989": {
      "op": "dup",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0"
      ]
    },
    "2990": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "app_address#0 (copy)",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0",
        "app_address#0 (copy)"
      ]
    },
    "2992": {
      "op": "box_splice",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2993": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2995": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "\"blob\"",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64"
      ]
    },
    "2997": {
      "op": "bytec 14 // 0x68656c6c6f",
      "defined_out": [
        "\"blob\"",
        "0x68656c6c6f",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64",
        "0x68656c6c6f"
      ]
    },
    "2999": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "3000": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "3002": {
      "op": "intc_2 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "3003": {
      "op": "pushint 69 // 69",
      "defined_out": [
        "\"blob\"",
        "0",
        "69",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "69"
      ]
    },
    "3005": {
      "op": "box_extract",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0"
      ]
    },
    "3006": {
      "op": "dig 1",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "app_address#0 (copy)"
      ]
    },
    "3008": {
      "op": "dig 3",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "app_address#0 (copy)",
        "sender_bytes#0 (copy)"
      ]
    },
    "3010": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%10#0"
      ]
    },
    "3011": {
      "op": "bytec 14 // 0x68656c6c6f",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%10#0",
        "0x68656c6c6f"
      ]
    },
    "3013": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%11#0"
      ]
    },
    "3014": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%12#0"
      ]
    },
    "3015": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "3016": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "3018": {
      "op": "box_del",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%13#0"
      ]
    },
    "3019": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "3020": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "3022": {
      "op": "box_get",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0"
      ]
    },
    "3023": {
      "op": "dup",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "exists#0 (copy)",
        "sender_bytes#0",
        "value#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "3024": {
      "op": "!",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "tmp%15#0",
        "value#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "tmp%15#0"
      ]
    },
    "3025": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0"
      ]
    },
    "3026": {
      "op": "dig 1",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "value#0 (copy)"
      ]
    },
    "3028": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "value#0 (copy)",
        "0x"
      ]
    },
    "3030": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "tmp%16#0",
        "value#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "tmp%16#0"
      ]
    },
    "3031": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0"
      ]
    },
    "3032": {
      "op": "dig 3",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "sender_bytes#0 (copy)"
      ]
    },
    "3034": {
      "op": "cover 2",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "sender_bytes#0 (copy)",
        "value#0",
        "exists#0"
      ]
    },
    "3036": {
      "op": "select",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "state_get%0#0"
      ]
    },
    "3037": {
      "op": "dig 2",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "state_get%0#0",
        "sender_bytes#0 (copy)"
      ]
    },
    "3039": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%17#0"
      ]
    },
    "3040": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "3041": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "3042": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "tmp%18#0",
        "\"blob\""
      ]
    },
    "3044": {
      "op": "swap",
      "stack_out": [
        "\"blob\"",
        "tmp%18#0"
      ]
    },
    "3045": {
      "op": "box_put",
      "stack_out": []
    },
    "3046": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "3048": {
      "op": "box_len",
      "defined_out": [
        "_%5#0",
        "maybe_exists%7#0"
      ],
      "stack_out": [
        "_%5#0",
        "maybe_exists%7#0"
      ]
    },
    "3049": {
      "op": "pop",
      "stack_out": [
        "_%5#0"
      ]
    },
    "3050": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "_%5#0",
        "64"
      ]
    },
    "3052": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "3053": {
      "op": "assert",
      "stack_out": []
    },
    "3054": {
      "op": "bytec 17 // \"box_ref\"",
      "defined_out": [
        "\"box_ref\""
      ],
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "3056": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "\"box_ref\"",
        "32"
      ]
    },
    "3058": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "3059": {
      "op": "pop",
      "stack_out": []
    },
    "3060": {
      "op": "bytec 17 // \"box_ref\"",
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "3062": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "3063": {
      "op": "pop",
      "stack_out": []
    },
    "3064": {
      "retsub": true,
      "op": "retsub"
    },
    "3065": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_test",
      "params": {},
      "block": "box_map_test",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "3066": {
      "op": "itob",
      "defined_out": [
        "box_0#0"
      ],
      "stack_out": [
        "box_0#0"
      ]
    },
    "3067": {
      "op": "dup",
      "defined_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ],
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ]
    },
    "3068": {
      "op": "box_del",
      "defined_out": [
        "box_0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_0#0",
        "{box_del}"
      ]
    },
    "3069": {
      "op": "pop",
      "stack_out": [
        "box_0#0"
      ]
    },
    "3070": {
      "op": "dup",
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ]
    },
    "3071": {
      "op": "pushbytes \"Hmmmmm\"",
      "defined_out": [
        "\"Hmmmmm\"",
        "box_0#0",
        "box_0#0 (copy)"
      ],
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)",
        "\"Hmmmmm\""
      ]
    },
    "3079": {
      "op": "box_put",
      "stack_out": [
        "box_0#0"
      ]
    },
    "3080": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "3081": {
      "op": "pop",
      "stack_out": [
        "value%0#0"
      ]
    },
    "3082": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "6"
      ]
    },
    "3084": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3085": {
      "op": "assert",
      "stack_out": []
    },
    "3086": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "3087": {
      "op": "itob",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "3088": {
      "op": "dup",
      "defined_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "3089": {
      "op": "box_get",
      "defined_out": [
        "encoded_value%5#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3090": {
      "op": "bytec 18 // \"default\"",
      "defined_out": [
        "\"default\"",
        "encoded_value%5#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "\"default\""
      ]
    },
    "3092": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%5#0",
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3094": {
      "op": "select",
      "defined_out": [
        "encoded_value%5#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "state_get%0#0"
      ]
    },
    "3095": {
      "op": "bytec 18 // \"default\"",
      "stack_out": [
        "encoded_value%5#0",
        "state_get%0#0",
        "\"default\""
      ]
    },
    "3097": {
      "op": "==",
      "defined_out": [
        "encoded_value%5#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "tmp%5#0"
      ]
    },
    "3098": {
      "op": "assert",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "3099": {
      "op": "dup",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "3100": {
      "op": "box_len",
      "defined_out": [
        "encoded_value%5#0",
        "exists#0",
        "value#1"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "value#1",
        "exists#0"
      ]
    },
    "3101": {
      "op": "bury 1",
      "stack_out": [
        "encoded_value%5#0",
        "exists#0"
      ]
    },
    "3103": {
      "op": "!",
      "defined_out": [
        "encoded_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "tmp%6#0"
      ]
    },
    "3104": {
      "op": "assert",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "3105": {
      "op": "dup",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "3106": {
      "op": "box_del",
      "stack_out": [
        "encoded_value%5#0",
        "{box_del}"
      ]
    },
    "3107": {
      "op": "pop",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "3108": {
      "op": "dup",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "3109": {
      "op": "bytec 14 // \"hello\"",
      "defined_out": [
        "\"hello\"",
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)",
        "\"hello\""
      ]
    },
    "3111": {
      "op": "box_put",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "3112": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "3113": {
      "op": "pop",
      "stack_out": []
    },
    "3114": {
      "retsub": true,
      "op": "retsub"
    },
    "3115": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_set",
      "params": {
        "key#0": "uint64",
        "value#0": "bytes"
      },
      "block": "box_map_set",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "3118": {
      "op": "frame_dig -2",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "3120": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "3121": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "3122": {
      "op": "box_del",
      "defined_out": [
        "encoded_value%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "{box_del}"
      ]
    },
    "3123": {
      "op": "pop",
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "3124": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_value%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "value#0 (copy)"
      ]
    },
    "3126": {
      "op": "box_put",
      "stack_out": []
    },
    "3127": {
      "retsub": true,
      "op": "retsub"
    },
    "3128": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_get",
      "params": {
        "key#0": "uint64"
      },
      "block": "box_map_get",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3131": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "3133": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "3134": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "3135": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "3136": {
      "retsub": true,
      "op": "retsub"
    },
    "3137": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_del",
      "params": {
        "key#0": "uint64"
      },
      "block": "box_map_del",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "3140": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "3142": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "3143": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "3144": {
      "op": "pop",
      "stack_out": []
    },
    "3145": {
      "retsub": true,
      "op": "retsub"
    },
    "3146": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_exists",
      "params": {
        "key#0": "uint64"
      },
      "block": "box_map_exists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "3149": {
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "3151": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "3152": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "3153": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "3155": {
      "retsub": true,
      "op": "retsub"
    }
  }
}