{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappingsoC;;;;;;;;;AAC5B;AAHH;AAAA;AApDO;AAAJ;;AAFH;AAAA;AApBG;;AAAA;;;AAAA;;AAFH;AAAA;AAvGO;AAAJ;;AAFH;AAAA;AAvDG;;AAAA;;;AAAA;;AAFH;AAAA;AAPA;AAAA;AApCA;;;AAAA;AAAA;;;AAAA;;;AAEG;;AAAA;AAAA;;AAAA;AAAA;AACA;;AAAA;;AAAA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AAAA;;AAAA;AACmB;;AAAA;;;AAAnB;;AAAA;;AAAA;;AAAA;;AAAA;AACA;;AAAA;;;AAAA;;AACyB;;AAAzB;AAAA;;AAAA;;AAAA;;AAAA;AACA;;AAA2B;;AAAwB;;;;;;;;;;AAAnD;AAKA;;AAAA;AAAA;AAAA;AAAoB;;AAApB;AAAA;AAAA;;AAAA;AAAA;AAGO;;AAAA;AAAA;AAAqB;AAArB;AAAP;AACO;;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAP;AACO;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAA;AAAP;AACO;;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAA;AAAP;AAGO;AAAuB;AAAvB;AAAA;AAA6B;;AAAA;;;AAA7B;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAA9B;AAAP;AAC+B;AAAxB;;AAAA;AAAA;;AAAwB;AAAxB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA+B;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA/B;AAAP;AAC+B;AAAxB;;AAAA;AAAA;;AAAwB;AAAxB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA8B;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA9B;AAAP;AAGO;;AAAiB;AAAjB;AAAA;AAAuB;;AAAA;;;AAAvB;AAAP;AACO;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAwB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAxB;AAAP;AACyB;AAAlB;;AAAA;AAAA;;AAAkB;AAAlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAyB;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAzB;AAAP;AACyB;;AAAlB;;AAAA;AAAA;;AAAkB;;AAAlB;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAwB;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAxB;AAAP;AAC0B;AAAnB;;AAAA;AAAA;;AAAmB;AAAnB;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA4C;AAAX;;AAAA;AAAW;AAAX;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAjC;AAAP;AAEO;;AAAA;AAAA;AAAyB;;;AAAzB;AAlCV;AA+CA;;;AAAA;AAAA;;;AAEG;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAFH;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOW;AAAR;;AACW;;AAAA;AAAA;;AAAA;;;;AAAnB;;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAmB;;AAAnB;AAAA;AAAA;AAAA;AACoB;;AAAA;AAAA;;;;;;;;;AALf;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAUO;;AAAJ;;AACI;;AAAJ;;AACI;AAAJ;;AACO;;AAAA;AAAA;AAAA;AAAuB;;AAAvB;;AAAA;;AAAA;AAAsC;;AAAtC;AAAP;AACO;;AAAA;AAAuB;;AAAvB;;AAAA;AAAA;;;AAA2D;;;;AAA3D;AAAP;AACO;AAAA;AAAuB;;AAAvB;;AAAA;AAAuB;;AAAvB;AAAP;AAEO;AAAA;AAAP;AACO;AAAP;AACI;;AAAJ;;AAXH;AAAA;AAeW;;AAAA;;AAAA;AAAA;AACR;AAAW;AAAX;AAAA;AACA;;AADA;;AAAA;;AAAA;AAHH;AAAA;AAS4B;;AA6StB;AAAA;AAAA;AAAY;AAAZ;AA7SoC;AAAnC;AACA;;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;;AAAA;;AAAA;AAAA;AAAA;AANP;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAWe;;AAAL;AAAA;;AAAuB;;AAAL;AAAA;;AAAA;AAAuB;AAAL;AAAA;;AAAA;AAAuB;;AAAL;AAAA;;AAAA;AAFhE;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOS;;AAEA;AAAmB;AAAnB;AAH0B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;AAAA;AAAhC;AAAA;;AAAA;AAAA;AAAA;AAFH;AAAA;AAaA;;;AAAA;AAAA;AAIU;AAAA;;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AACU;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI4B;;AAAA;;AAAA;AA4RI;AAAR;AAAvB;;AAAA;AAOwB;AAAa;AAAb;AAAvB;AAAA;AACV;AArSH;AAAA;AAAA;AA6R2C;AAAR;AAAvB;;AAAA;AAxRgD;AAAQ;AAAR;AAAT;AADnD;AAAA;;AACgD;AADhD;;AAAA;AAKS;AAAA;AAAA;;AAAA;AAAjB;;;AACY;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAF+B;AAE/B;AAAA;;AAAA;AACW;AAAX;AAAA;;AAFK;AAAA;AAAA;;;;;AAGc;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAJY;AAInC;;AAAA;;AAAA;AAiRmC;AAAQ;AAAR;AAQhC;;AAAA;AAvRoE;AAAzD;AACU;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAPW;AAOnC;;AAAA;;AAAA;AAGI;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAGO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;AA7BH;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA;;;AAAA;AAKa;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AACC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgQwB;;AAAQ;AAAR;AAChC;AADS;;AAAA;AAQT;AAAA;;AAAA;AArQoE;AAAzD;AACS;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAFY;AAEnC;;AAAA;;AAAA;AACwB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAHW;AAGnC;;AAAA;;AAAA;AAEsB;;AAAQ;AAAR;AALa;AAKnC;;AAAA;;AAA+C;;AAA/C;AAgQoC;AAAa;AAAb;AAAvB;AAAA;AACV;AA5PH;AAAA;AAAA;AAEO;AAAA;;AAAA;AAAA;AAAA;AApBV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;;;AAGU;AAAA;AAAP;AACe;;;AACD;AAAA;AACA;;AAEE;AANiB;AAMjC;AAAA;;AANiC;AAQjB;;AAAiB;;;;AAAjC;AARiC;AAInB;;AAMd;;AAAA;AAZH;AAAA;AAcA;;;AAAA;AAAA;;;AAAA;AAAA;AAEoC;AACjC;;AAAA;;AAAA;AACqB;AAAQ;AAAR;AAArB;AAFiC;AAEjC;;;AAAA;;AAAA;AAC+C;AAAQ;AAAR;AAA/C;AAHiC;AAGjC;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAHiC;AAGjC;AAAA;AAAA;AAAA;AAAA;;AAAA;AAHiC;AAGjC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAHiC;AAGjC;AAAA;;AAAA;AAC2B;;AAAQ;;AAAR;AAA3B;AAJiC;AAIjC;;;AAAA;;AAAA;AAC2B;;AAAQ;;AAAR;AAA3B;AALiC;AAKjC;;;AAAA;;AAAA;AACqD;;AAAQ;;AAAR;AAArD;AANiC;AAMjC;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AANiC;AAMjC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AANiC;AAMjC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AANiC;AAMjC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AANiC;AAMjC;AAAA;AAAA;AAAA;AAAA;AANiC;AAMjC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AANiC;AAMjC;AAAA;;AAAA;AARH;AAAA;AAUA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAEoC;AAC7B;;AAAA;AAAA;AAAA;AAD6B;AAE7B;;;AAAA;AAAA;AAAA;AAF6B;AAGvB;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAHuB;AAGvB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAHuB;AAGvB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAHuB;AAGvB;AAAA;AAAA;AAAA;AAHuB;AAI7B;;;AAAA;AAAA;AAAA;AAJ6B;AAK7B;;;AAAA;AAAA;AAAA;AAL6B;AAMlB;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AANkB;AAMlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AANkB;AAMlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AANkB;AAMlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AANkB;AAMlB;AAAA;AAAA;AAAA;AAAA;AANkB;AAMlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AANkB;AAMlB;AAAA;AAAA;AAAA;AAER;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAVV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAcU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AACO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AACQ;AACG;AAAnB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAmB;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAmB;AAAnB;AAAA;AAAA;AAAA;AACY;;AAAA;AAAA;;;;;;;;;AACO;AAAnB;;AAAA;AAAA;AAAA;AAAmB;AAAnB;AAAA;AAAA;AAAA;AAAA;;;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAmB;AAAnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAmB;AAAnB;AAAA;AAAA;AAAA;AACY;;AAAA;AAAA;;;;;;;;;AARP;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;AAAA;AAAA;;;AAAA;AAAA;AAEG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAFH;AAAA;;;AAIA;;;AAAA;AAEW;AACK;;AAAA;AAAA;;AAAA;;AAArB;AAAA;;;;AAAA;;;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqB;;AAArB;;AAAA;AAAA;AAAA;AAAA;;;;;AACA;;;AACgB;;AAAS;AAAT;;;;;;;;AACD;;AAAA;AAAf;;;;;;;;;AANK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAYG;AAAA;;AAAA;AAAyB;;;;AAAzB;AAFH;AAAA;AAQA;;;AAAA;AAAA;AAImC;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEuB;AAAmB;AAApB;AAAJ;AAAA;AAA5B;AAAA;AAAA;AACS;AAAA;AAAA;;AAAA;AAAjB;;;AACY;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAL4B;AAK5B;AAAA;;AAAA;AACW;AAAX;AAAA;;AAFK;AAAA;AAAA;;;;;AAIU;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AARa;AAQhC;AAAA;;AAAA;AACO;AAAA;AAAA;AAAA;AAAA;AAbV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;AAAA;AAImC;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACS;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAFa;AAEhC;AAAA;;AAAA;AAC0C;AAAV;AAAJ;AAAA;AAA5B;AAAA;AAAA;AAEO;AAAA;AAAA;AAAA;AAAA;AATV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAaW;AACG;AAAnB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAmB;AAAnB;AAAA;AAAA;AAAA;AACY;;AAAA;AAAA;;;;;;;;;AAJP;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;AAAA;AAAA;;;AAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAFH;AAAA;AAIA;;;AAAA;AAAA;;;AAEG;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAFH;AAAA;AAM0B;;AACvB;;AADuB;;AACT;;;;;;;;;;;;;;;;;;;;;AAAd;AADuB;;AAEhB;AAAA;AAAA;AAAY;AAAZ;;AAAA;AAAc;;AAAd;;AAAA;AAAA;;AAAc;;AAAd;;AAAA;AAAA;;AAAA;AAFgB;;AAEhB;;AAAA;AAAoB;;;;;;;;;AAApB;AAAP;AAEA;AAAA;;AAAA;AAAmB;;;;;;;;;AAAnB;AACO;AAAA;AAAA;AAAuB;AAAvB;;AAAA;AAAA;;AAAuB;AAAvB;;AAAA;AAAyB;;AAAzB;;AAAA;AAAA;;AAAyB;;AAAzB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAgC;;;;;;;AAAhC;AAPV;AAsBwB;;AACd;AAAA;;AAAA;AAAP;AAKqB;;AAIM;;AAApB;AAAP;AAIe;;AACD;;AATO;;AAWL;AAAhB;;AAAA;AAXqB;;AAYN;;;AAAf;AAZqB;;AAaN;AAAG;AAAlB;;AAAA;AAbqB;;AAcL;;AAJN;;AAIV;AAdqB;;AAeI;AAAG;;AAAnB;AACQ;;AAAA;;AAAA;AANP;;AAMO;AAAV;AAAP;AAhBqB;;AAmBd;AAAP;AAnBqB;;AAuBL;AACT;AAAA;AAAP;AACO;;AAAS;;AAAT;AAAP;AACO;;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAGY;AA7BS;;AA6BrB;AAAA;AA7BqB;;AA8Bd;AAAA;AACkB;;AAAlB;AAAP;AAIA;;AAAyB;;AAAzB;;AAEA;;AAAA;;AA9CH;AAAA;AAkDW;AAGK;AAAb;AAAA;;AAAA;AADQ;;;;;;;;AACR;AAGO;AAAA;AAAoC;;AAApC;AAAP;AALQ;AASgB;AAAjB;AAAA;AAAgC;;AAAhC;;AAAA;AAAsD;;AAAtD;AAAP;AACgB;AAAA;AAAA;;AACT;AAAP;AAMA;AAAA;;AAAA;AAAqB;;AAArB;AAEA;;AAtBH;AAAA;AAwBA;;;AAAA;AAAA;;;AAAA;;;AAEgB;AAAA;AAAb;AAAA;;AAAA;AAAA;AAFH;AAAA;AAIA;;;AAAA;AAEuB;AAAb;AAAA;AAFV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;AAEoB;AAAjB;;AAFH;AAAA;AAIA;;;AAAA;AAEU;AAAA;AAAA;;AAFV;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 2 1 8 0 4096 4098 4138"
    },
    "13": {
      "op": "bytecblock \"dynamic_arr_struct\" \"box\" \"dynamic_box\" 0x424f585f43 0x151f7c75 \"blob\" \"box_large\" \"box_a\" \"box_d\" \"b\" \"too_many_bools\" \"many_ints\" \"0\" 0x00023432 0x68656c6c6f 0x068101 0x0014 \"box_ref\" \"default\""
    },
    "151": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "153": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "154": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "156": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "157": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "158": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "159": {
      "op": "switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED",
      "stack_out": []
    },
    "185": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "186": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "188": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "189": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "op": "return // on error: this contract does not implement the given ABI method for create NoOp",
      "defined_out": [],
      "stack_out": []
    },
    "190": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "pushbytess 0x7d37296e 0x33325d3d 0x0199408d 0x772059ca 0x01263df6 0xd566c632 0xfabcb885 0xa6174812 0xf13dd937 0x5ab60f2e 0xf07a0064 0x78f9af3f 0x5cbb9dcc 0x996497ae 0x6cec72ff 0x6f9d1075 0x0d22b441 0x59ef3760 0xaa666b96 0xdfbdd636 0x41427cd1 0x2a141f6c 0x7e843744 0x25600b57 0x29ea595d 0x11453152 0xced1221e 0x04ef4971 0x23ecb32c 0xeef75816 0xb532913a 0xc29f1669 0x9c888c09 0xe6f68506 0x8ee2c364 // method \"set_boxes(uint64,byte[],string)void\", method \"check_keys()void\", method \"create_many_ints()void\", method \"set_many_ints(uint64,uint64)void\", method \"sum_many_ints()uint64\", method \"delete_boxes()void\", method \"indirect_extract_and_replace()void\", method \"read_boxes()(uint64,byte[],string,uint64)\", method \"boxes_exist()(bool,bool,bool,bool)\", method \"create_dynamic_arr_struct()void\", method \"delete_dynamic_arr_struct()void\", method \"append_dynamic_arr_struct(uint64)uint64\", method \"pop_dynamic_arr_struct(uint64)uint64\", method \"set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void\", method \"nested_write(uint64,uint64)void\", method \"nested_read(uint64,uint64,uint64)uint64\", method \"sum_dynamic_arr_struct()uint64\", method \"create_bools()void\", method \"set_bool(uint64,bool)void\", method \"sum_bools(uint64)uint64\", method \"create_dynamic_box()void\", method \"delete_dynamic_box()void\", method \"append_dynamic_box(uint64)uint64\", method \"pop_dynamic_box(uint64)uint64\", method \"sum_dynamic_box()uint64\", method \"write_dynamic_box(uint64,uint64)void\", method \"write_dynamic_arr_struct(uint64,uint64)void\", method \"slice_box()void\", method \"arc4_box()void\", method \"test_box_ref()void\", method \"box_map_test()void\", method \"box_map_set(uint64,string)void\", method \"box_map_get(uint64)string\", method \"box_map_del(uint64)void\", method \"box_map_exists(uint64)bool\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(arc4_box()void)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_bools()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(nested_read(uint64,uint64,uint64)uint64)",
        "Method(nested_write(uint64,uint64)void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_bool(uint64,bool)void)",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void)",
        "Method(slice_box()void)",
        "Method(sum_bools(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "Method(test_box_ref()void)",
        "Method(write_dynamic_arr_struct(uint64,uint64)void)",
        "Method(write_dynamic_box(uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void)",
        "Method(nested_write(uint64,uint64)void)",
        "Method(nested_read(uint64,uint64,uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_bools()void)",
        "Method(set_bool(uint64,bool)void)",
        "Method(sum_bools(uint64)uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(write_dynamic_box(uint64,uint64)void)",
        "Method(write_dynamic_arr_struct(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)"
      ]
    },
    "367": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(arc4_box()void)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_bools()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(nested_read(uint64,uint64,uint64)uint64)",
        "Method(nested_write(uint64,uint64)void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_bool(uint64,bool)void)",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void)",
        "Method(slice_box()void)",
        "Method(sum_bools(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "Method(test_box_ref()void)",
        "Method(write_dynamic_arr_struct(uint64,uint64)void)",
        "Method(write_dynamic_box(uint64,uint64)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void)",
        "Method(nested_write(uint64,uint64)void)",
        "Method(nested_read(uint64,uint64,uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_bools()void)",
        "Method(set_bool(uint64,bool)void)",
        "Method(sum_bools(uint64)uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(write_dynamic_box(uint64,uint64)void)",
        "Method(write_dynamic_arr_struct(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "tmp%5#0"
      ]
    },
    "370": {
      "op": "match set_boxes check_keys_route@6 create_many_ints_route@7 set_many_ints sum_many_ints delete_boxes indirect_extract_and_replace read_boxes boxes_exist create_dynamic_arr_struct delete_dynamic_arr_struct_route@15 append_dynamic_arr_struct pop_dynamic_arr_struct set_nested_struct nested_write nested_read sum_dynamic_arr_struct create_bools_route@22 set_bool sum_bools create_dynamic_box delete_dynamic_box_route@26 append_dynamic_box pop_dynamic_box sum_dynamic_box write_dynamic_box write_dynamic_arr_struct slice_box arc4_box_route@33 test_box_ref box_map_test box_map_set box_map_get box_map_del box_map_exists",
      "stack_out": []
    },
    "442": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "443": {
      "block": "arc4_box_route@33",
      "stack_in": [],
      "op": "pushbytess 0x64 0x00010203 // 0x64, 0x00010203",
      "defined_out": [
        "0x00010203",
        "0x64"
      ],
      "stack_out": [
        "0x64",
        "0x00010203"
      ]
    },
    "452": {
      "op": "box_put",
      "stack_out": []
    },
    "453": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "454": {
      "op": "return",
      "stack_out": []
    },
    "455": {
      "block": "delete_dynamic_box_route@26",
      "stack_in": [],
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "456": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "457": {
      "op": "pop",
      "stack_out": []
    },
    "458": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "459": {
      "op": "return",
      "stack_out": []
    },
    "460": {
      "block": "create_bools_route@22",
      "stack_in": [],
      "op": "bytec 10 // \"too_many_bools\"",
      "defined_out": [
        "\"too_many_bools\""
      ],
      "stack_out": [
        "\"too_many_bools\""
      ]
    },
    "462": {
      "op": "pushint 4125 // 4125",
      "defined_out": [
        "\"too_many_bools\"",
        "4125"
      ],
      "stack_out": [
        "\"too_many_bools\"",
        "4125"
      ]
    },
    "465": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "466": {
      "op": "pop",
      "stack_out": []
    },
    "467": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "468": {
      "op": "return",
      "stack_out": []
    },
    "469": {
      "block": "delete_dynamic_arr_struct_route@15",
      "stack_in": [],
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "\"dynamic_arr_struct\""
      ]
    },
    "470": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "471": {
      "op": "pop",
      "stack_out": []
    },
    "472": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "473": {
      "op": "return",
      "stack_out": []
    },
    "474": {
      "block": "create_many_ints_route@7",
      "stack_in": [],
      "op": "bytec 11 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\""
      ],
      "stack_out": [
        "\"many_ints\""
      ]
    },
    "476": {
      "op": "pushint 4104 // 4104",
      "defined_out": [
        "\"many_ints\"",
        "4104"
      ],
      "stack_out": [
        "\"many_ints\"",
        "4104"
      ]
    },
    "479": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "480": {
      "op": "pop",
      "stack_out": []
    },
    "481": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "482": {
      "op": "return",
      "stack_out": []
    },
    "483": {
      "block": "check_keys_route@6",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "484": {
      "op": "return",
      "stack_out": []
    },
    "485": {
      "subroutine": "examples.box_storage.contract.BoxContract.set_boxes[routing]",
      "params": {},
      "block": "set_boxes",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "488": {
      "op": "btoi",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "489": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "492": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "c#0"
      ]
    },
    "495": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "a#0"
      ]
    },
    "497": {
      "op": "itob",
      "defined_out": [
        "b#0",
        "c#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "encoded_value%0#0"
      ]
    },
    "498": {
      "op": "bytec 7 // \"box_a\"",
      "defined_out": [
        "\"box_a\"",
        "b#0",
        "c#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "encoded_value%0#0",
        "\"box_a\""
      ]
    },
    "500": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "\"box_a\"",
        "encoded_value%0#0"
      ]
    },
    "501": {
      "op": "box_put",
      "stack_out": [
        "b#0",
        "c#0"
      ]
    },
    "502": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\"",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "\"b\""
      ]
    },
    "504": {
      "op": "box_del",
      "defined_out": [
        "b#0",
        "c#0",
        "{box_del}"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "{box_del}"
      ]
    },
    "505": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0"
      ]
    },
    "506": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "b#0",
        "c#0",
        "\"b\""
      ]
    },
    "508": {
      "op": "dig 2",
      "defined_out": [
        "\"b\"",
        "b#0",
        "b#0 (copy)",
        "c#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "\"b\"",
        "b#0 (copy)"
      ]
    },
    "510": {
      "op": "box_put",
      "stack_out": [
        "b#0",
        "c#0"
      ]
    },
    "511": {
      "op": "bytec_3 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "0x424f585f43"
      ]
    },
    "512": {
      "op": "box_del",
      "stack_out": [
        "b#0",
        "c#0",
        "{box_del}"
      ]
    },
    "513": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0"
      ]
    },
    "514": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "0x424f585f43"
      ]
    },
    "515": {
      "op": "dig 1",
      "defined_out": [
        "0x424f585f43",
        "b#0",
        "c#0",
        "c#0 (copy)"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "0x424f585f43",
        "c#0 (copy)"
      ]
    },
    "517": {
      "op": "box_put",
      "stack_out": [
        "b#0",
        "c#0"
      ]
    },
    "518": {
      "op": "dig 1",
      "stack_out": [
        "b#0",
        "c#0",
        "b#0 (copy)"
      ]
    },
    "520": {
      "op": "extract 2 0",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1"
      ]
    },
    "523": {
      "op": "bytec 8 // \"box_d\"",
      "defined_out": [
        "\"box_d\"",
        "b#0",
        "c#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "\"box_d\""
      ]
    },
    "525": {
      "op": "box_del",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "{box_del}"
      ]
    },
    "526": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1"
      ]
    },
    "527": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "\"box_d\""
      ]
    },
    "529": {
      "op": "dig 1",
      "defined_out": [
        "\"box_d\"",
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "\"box_d\"",
        "tmp%0#1 (copy)"
      ]
    },
    "531": {
      "op": "box_put",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1"
      ]
    },
    "532": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "b#0",
        "c#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "\"box_large\""
      ]
    },
    "534": {
      "op": "pushint 6160 // 6160",
      "defined_out": [
        "\"box_large\"",
        "6160",
        "b#0",
        "c#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "\"box_large\"",
        "6160"
      ]
    },
    "537": {
      "op": "box_create",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "{box_create}"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "{box_create}"
      ]
    },
    "538": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1"
      ]
    },
    "539": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "b#0",
        "c#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "42"
      ]
    },
    "541": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "b#0",
        "c#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "542": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "aggregate%val_as_bytes%0#0",
        "\"box_large\""
      ]
    },
    "544": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "aggregate%val_as_bytes%0#0",
        "b#0",
        "c#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "aggregate%val_as_bytes%0#0",
        "\"box_large\"",
        "4096"
      ]
    },
    "546": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "\"box_large\"",
        "4096",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "548": {
      "op": "box_replace",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1"
      ]
    },
    "549": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "\"box_large\""
      ]
    },
    "551": {
      "op": "intc 4 // 4096",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "\"box_large\"",
        "4096"
      ]
    },
    "553": {
      "op": "pushbytes 0x000000000000002a",
      "defined_out": [
        "\"box_large\"",
        "0x000000000000002a",
        "4096",
        "b#0",
        "c#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "\"box_large\"",
        "4096",
        "0x000000000000002a"
      ]
    },
    "563": {
      "op": "box_replace",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1"
      ]
    },
    "564": {
      "op": "bytec 7 // \"box_a\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "\"box_a\""
      ]
    },
    "566": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "b#0",
        "c#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "567": {
      "error": "check self.box_a exists",
      "op": "assert // check self.box_a exists",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "aggregate%box_get%0#0"
      ]
    },
    "568": {
      "op": "btoi",
      "defined_out": [
        "b#0",
        "c#0",
        "maybe_value_converted%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "maybe_value_converted%0#0"
      ]
    },
    "569": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "b#0",
        "c#0",
        "maybe_value_converted%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "maybe_value_converted%0#0",
        "3"
      ]
    },
    "571": {
      "op": "+",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%5#0"
      ]
    },
    "572": {
      "op": "itob",
      "defined_out": [
        "b#0",
        "c#0",
        "encoded_value%2#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "encoded_value%2#0"
      ]
    },
    "573": {
      "op": "bytec 7 // \"box_a\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "encoded_value%2#0",
        "\"box_a\""
      ]
    },
    "575": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "\"box_a\"",
        "encoded_value%2#0"
      ]
    },
    "576": {
      "op": "box_put",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1"
      ]
    },
    "577": {
      "op": "bytec 7 // \"box_a\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "\"box_a\""
      ]
    },
    "579": {
      "op": "box_len",
      "defined_out": [
        "b#0",
        "c#0",
        "check%0#0",
        "tmp%0#1",
        "value%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%0#0",
        "check%0#0"
      ]
    },
    "580": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%0#0"
      ]
    },
    "581": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%0#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%0#0",
        "8"
      ]
    },
    "582": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%6#0"
      ]
    },
    "583": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1"
      ]
    },
    "584": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "\"b\""
      ]
    },
    "586": {
      "op": "box_len",
      "defined_out": [
        "b#0",
        "c#0",
        "check%1#0",
        "tmp%0#1",
        "value%1#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%1#0",
        "check%1#0"
      ]
    },
    "587": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%1#0"
      ]
    },
    "588": {
      "op": "dig 3",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%1#0",
        "b#0 (copy)"
      ]
    },
    "590": {
      "op": "len",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%7#0",
        "value%1#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%1#0",
        "tmp%7#0"
      ]
    },
    "591": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%8#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%8#0"
      ]
    },
    "592": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1"
      ]
    },
    "593": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "0x424f585f43"
      ]
    },
    "594": {
      "op": "box_len",
      "defined_out": [
        "b#0",
        "c#0",
        "check%2#0",
        "tmp%0#1",
        "value%2#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "check%2#0"
      ]
    },
    "595": {
      "error": "check self.box_c exists",
      "op": "assert // check self.box_c exists",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0"
      ]
    },
    "596": {
      "op": "dig 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "c#0 (copy)"
      ]
    },
    "598": {
      "op": "len",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%2#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0"
      ]
    },
    "599": {
      "op": "dup2",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "value%2#0",
        "value%2#0 (copy)"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%2#0 (copy)",
        "tmp%9#0 (copy)"
      ]
    },
    "600": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%10#0",
        "tmp%9#0",
        "value%2#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "601": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0"
      ]
    },
    "602": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "\"box_d\""
      ]
    },
    "604": {
      "op": "box_len",
      "defined_out": [
        "b#0",
        "c#0",
        "check%3#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "check%3#0"
      ]
    },
    "605": {
      "op": "pop",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0"
      ]
    },
    "606": {
      "op": "dig 3",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%0#1 (copy)"
      ]
    },
    "608": {
      "op": "len",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "609": {
      "op": "dup2",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%9#0",
        "value%2#0",
        "value%3#0",
        "value%3#0 (copy)"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "tmp%12#0 (copy)"
      ]
    },
    "610": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "611": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "612": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43"
      ]
    },
    "613": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x424f585f43",
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "0"
      ]
    },
    "614": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "0x424f585f43",
        "1",
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "0",
        "1"
      ]
    },
    "615": {
      "op": "box_extract",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "616": {
      "op": "dig 6",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%14#0",
        "c#0 (copy)"
      ]
    },
    "618": {
      "op": "extract 0 1",
      "defined_out": [
        "b#0",
        "c#0",
        "extract%0#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%14#0",
        "extract%0#0"
      ]
    },
    "621": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "622": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "623": {
      "op": "dig 3",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0 (copy)"
      ]
    },
    "625": {
      "op": "intc_1 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0 (copy)",
        "1"
      ]
    },
    "626": {
      "op": "-",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%18#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%18#0"
      ]
    },
    "627": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%18#0",
        "0x424f585f43"
      ]
    },
    "628": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "tmp%18#0"
      ]
    },
    "629": {
      "op": "intc_1 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "tmp%18#0",
        "1"
      ]
    },
    "630": {
      "op": "box_extract",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0"
      ]
    },
    "631": {
      "op": "dig 3",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%9#0 (copy)"
      ]
    },
    "633": {
      "op": "intc_1 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%9#0 (copy)",
        "1"
      ]
    },
    "634": {
      "op": "-",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "635": {
      "op": "dig 7",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%21#0",
        "c#0 (copy)"
      ]
    },
    "637": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "c#0 (copy)",
        "tmp%21#0"
      ]
    },
    "638": {
      "op": "intc_1 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "c#0 (copy)",
        "tmp%21#0",
        "1"
      ]
    },
    "639": {
      "op": "extract3",
      "defined_out": [
        "b#0",
        "c#0",
        "extract%1#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%19#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%19#0",
        "extract%1#0"
      ]
    },
    "640": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%22#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%22#0"
      ]
    },
    "641": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "642": {
      "op": "intc_1 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "1"
      ]
    },
    "643": {
      "op": "dig 4",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "1",
        "value%2#0 (copy)"
      ]
    },
    "645": {
      "op": "<",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%25#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%25#0"
      ]
    },
    "646": {
      "op": "dig 4",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%25#0",
        "value%2#0 (copy)"
      ]
    },
    "648": {
      "op": "intc_1 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%25#0",
        "value%2#0 (copy)",
        "1"
      ]
    },
    "649": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0 (copy)",
        "1",
        "tmp%25#0"
      ]
    },
    "651": {
      "op": "select",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%26#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%26#0"
      ]
    },
    "652": {
      "op": "dig 4",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%26#0",
        "value%2#0 (copy)"
      ]
    },
    "654": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0 (copy)",
        "tmp%26#0"
      ]
    },
    "655": {
      "op": "-",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%27#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%27#0"
      ]
    },
    "656": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%27#0",
        "0x424f585f43"
      ]
    },
    "657": {
      "op": "intc_3 // 0",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%27#0",
        "0x424f585f43",
        "0"
      ]
    },
    "658": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "0",
        "tmp%27#0"
      ]
    },
    "660": {
      "op": "box_extract",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0"
      ]
    },
    "661": {
      "op": "intc_1 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "1"
      ]
    },
    "662": {
      "op": "dig 4",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "1",
        "tmp%9#0 (copy)"
      ]
    },
    "664": {
      "op": ">=",
      "defined_out": [
        "b#0",
        "c#0",
        "is_out_of_bounds%0#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "665": {
      "op": "intc_1 // 1",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "is_out_of_bounds%0#0",
        "1"
      ]
    },
    "666": {
      "op": "dig 5",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "is_out_of_bounds%0#0",
        "1",
        "tmp%9#0 (copy)"
      ]
    },
    "668": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "1",
        "tmp%9#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "670": {
      "op": "select",
      "defined_out": [
        "b#0",
        "bounded_offset%0#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_offset%0#0"
      ]
    },
    "671": {
      "op": "dig 4",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_offset%0#0",
        "tmp%9#0 (copy)"
      ]
    },
    "673": {
      "op": "swap",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0 (copy)",
        "bounded_offset%0#0"
      ]
    },
    "674": {
      "op": "-",
      "defined_out": [
        "b#0",
        "bounded_index%0#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_index%0#0"
      ]
    },
    "675": {
      "op": "dig 7",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_index%0#0",
        "c#0 (copy)"
      ]
    },
    "677": {
      "op": "intc_3 // 0",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "bounded_index%0#0",
        "c#0 (copy)",
        "0"
      ]
    },
    "678": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "c#0 (copy)",
        "0",
        "bounded_index%0#0"
      ]
    },
    "680": {
      "op": "substring3",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "681": {
      "op": "==",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%31#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%31#0"
      ]
    },
    "682": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "683": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "2"
      ]
    },
    "684": {
      "op": "dig 4",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "2",
        "value%2#0 (copy)"
      ]
    },
    "686": {
      "op": "<",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%34#0",
        "tmp%9#0",
        "value%2#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%2#0",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%34#0"
      ]
    },
    "687": {
      "op": "uncover 4",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%34#0",
        "value%2#0"
      ]
    },
    "689": {
      "op": "intc_0 // 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%34#0",
        "value%2#0",
        "2"
      ]
    },
    "690": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "value%2#0",
        "2",
        "tmp%34#0"
      ]
    },
    "692": {
      "op": "select",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%35#0",
        "tmp%9#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%35#0"
      ]
    },
    "693": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%35#0",
        "0x424f585f43"
      ]
    },
    "694": {
      "op": "intc_3 // 0",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%35#0",
        "0x424f585f43",
        "0"
      ]
    },
    "695": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "0x424f585f43",
        "0",
        "tmp%35#0"
      ]
    },
    "697": {
      "op": "box_extract",
      "defined_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%37#0",
        "tmp%9#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0"
      ]
    },
    "698": {
      "op": "intc_0 // 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "2"
      ]
    },
    "699": {
      "op": "dig 4",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "2",
        "tmp%9#0 (copy)"
      ]
    },
    "701": {
      "op": ">=",
      "defined_out": [
        "b#0",
        "c#0",
        "is_out_of_bounds%1#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%37#0",
        "tmp%9#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "702": {
      "op": "intc_0 // 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "tmp%9#0",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "is_out_of_bounds%1#0",
        "2"
      ]
    },
    "703": {
      "op": "uncover 5",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "is_out_of_bounds%1#0",
        "2",
        "tmp%9#0"
      ]
    },
    "705": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "2",
        "tmp%9#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "707": {
      "op": "select",
      "defined_out": [
        "b#0",
        "bounded_index%1#0",
        "c#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%37#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "c#0",
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "bounded_index%1#0"
      ]
    },
    "708": {
      "op": "uncover 5",
      "stack_out": [
        "b#0",
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "bounded_index%1#0",
        "c#0"
      ]
    },
    "710": {
      "op": "intc_3 // 0",
      "stack_out": [
        "b#0",
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "bounded_index%1#0",
        "c#0",
        "0"
      ]
    },
    "711": {
      "op": "uncover 2",
      "stack_out": [
        "b#0",
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "c#0",
        "0",
        "bounded_index%1#0"
      ]
    },
    "713": {
      "op": "substring3",
      "defined_out": [
        "b#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%37#0",
        "tmp%38#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "714": {
      "op": "==",
      "defined_out": [
        "b#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%39#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%39#0"
      ]
    },
    "715": {
      "op": "assert",
      "stack_out": [
        "b#0",
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "716": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "b#0",
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\""
      ]
    },
    "718": {
      "op": "intc_3 // 0",
      "stack_out": [
        "b#0",
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "0"
      ]
    },
    "719": {
      "op": "intc_1 // 1",
      "stack_out": [
        "b#0",
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "0",
        "1"
      ]
    },
    "720": {
      "op": "box_extract",
      "defined_out": [
        "b#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%40#0",
        "value%3#0"
      ],
      "stack_out": [
        "b#0",
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%40#0"
      ]
    },
    "721": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%40#0",
        "b#0"
      ]
    },
    "723": {
      "op": "extract 2 1",
      "defined_out": [
        "extract%2#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%40#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%40#0",
        "extract%2#0"
      ]
    },
    "726": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%42#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%42#0"
      ]
    },
    "727": {
      "op": "assert",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "728": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)"
      ]
    },
    "730": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "1"
      ]
    },
    "731": {
      "op": "-",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%45#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%45#0"
      ]
    },
    "732": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%45#0",
        "\"box_d\""
      ]
    },
    "734": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "tmp%45#0"
      ]
    },
    "735": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "tmp%45#0",
        "1"
      ]
    },
    "736": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%46#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0"
      ]
    },
    "737": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%12#0 (copy)"
      ]
    },
    "739": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%12#0 (copy)",
        "1"
      ]
    },
    "740": {
      "op": "-",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%49#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%49#0"
      ]
    },
    "741": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%49#0",
        "tmp%0#1 (copy)"
      ]
    },
    "743": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%0#1 (copy)",
        "tmp%49#0"
      ]
    },
    "744": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "tmp%0#1 (copy)",
        "tmp%49#0",
        "1"
      ]
    },
    "745": {
      "op": "extract3",
      "defined_out": [
        "extract%3#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%46#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%46#0",
        "extract%3#0"
      ]
    },
    "746": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%50#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%50#0"
      ]
    },
    "747": {
      "op": "assert",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "748": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "1"
      ]
    },
    "749": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "1",
        "value%3#0 (copy)"
      ]
    },
    "751": {
      "op": "<",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%53#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%53#0"
      ]
    },
    "752": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%53#0",
        "value%3#0 (copy)"
      ]
    },
    "754": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%53#0",
        "value%3#0 (copy)",
        "1"
      ]
    },
    "755": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "1",
        "tmp%53#0"
      ]
    },
    "757": {
      "op": "select",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%54#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%54#0"
      ]
    },
    "758": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%54#0",
        "value%3#0 (copy)"
      ]
    },
    "760": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "tmp%54#0"
      ]
    },
    "761": {
      "op": "-",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%55#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%55#0"
      ]
    },
    "762": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%55#0",
        "\"box_d\""
      ]
    },
    "764": {
      "op": "intc_3 // 0",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%55#0",
        "\"box_d\"",
        "0"
      ]
    },
    "765": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "0",
        "tmp%55#0"
      ]
    },
    "767": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%57#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0"
      ]
    },
    "768": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "1"
      ]
    },
    "769": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "1",
        "tmp%12#0 (copy)"
      ]
    },
    "771": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%2#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%57#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "is_out_of_bounds%2#0"
      ]
    },
    "772": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "is_out_of_bounds%2#0",
        "1"
      ]
    },
    "773": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "is_out_of_bounds%2#0",
        "1",
        "tmp%12#0 (copy)"
      ]
    },
    "775": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "1",
        "tmp%12#0 (copy)",
        "is_out_of_bounds%2#0"
      ]
    },
    "777": {
      "op": "select",
      "defined_out": [
        "bounded_offset%1#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%57#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_offset%1#0"
      ]
    },
    "778": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_offset%1#0",
        "tmp%12#0 (copy)"
      ]
    },
    "780": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "tmp%12#0 (copy)",
        "bounded_offset%1#0"
      ]
    },
    "781": {
      "op": "-",
      "defined_out": [
        "bounded_index%2#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%57#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_index%2#0"
      ]
    },
    "782": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_index%2#0",
        "tmp%0#1 (copy)"
      ]
    },
    "784": {
      "op": "intc_3 // 0",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "bounded_index%2#0",
        "tmp%0#1 (copy)",
        "0"
      ]
    },
    "785": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "tmp%0#1 (copy)",
        "0",
        "bounded_index%2#0"
      ]
    },
    "787": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%57#0",
        "tmp%59#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%57#0",
        "tmp%59#0"
      ]
    },
    "788": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%60#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%60#0"
      ]
    },
    "789": {
      "op": "assert",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "790": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%0#1",
        "tmp%12#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "5"
      ]
    },
    "792": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "5",
        "value%3#0 (copy)"
      ]
    },
    "794": {
      "op": "<",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%63#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%63#0"
      ]
    },
    "795": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%63#0",
        "value%3#0 (copy)"
      ]
    },
    "797": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%63#0",
        "value%3#0 (copy)",
        "5"
      ]
    },
    "799": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "value%3#0 (copy)",
        "5",
        "tmp%63#0"
      ]
    },
    "801": {
      "op": "select",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%64#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%64#0"
      ]
    },
    "802": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%64#0",
        "\"box_d\""
      ]
    },
    "804": {
      "op": "intc_3 // 0",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%64#0",
        "\"box_d\"",
        "0"
      ]
    },
    "805": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "\"box_d\"",
        "0",
        "tmp%64#0"
      ]
    },
    "807": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%66#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0"
      ]
    },
    "808": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "5"
      ]
    },
    "810": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "5",
        "tmp%12#0 (copy)"
      ]
    },
    "812": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%3#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%66#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "is_out_of_bounds%3#0"
      ]
    },
    "813": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "is_out_of_bounds%3#0",
        "5"
      ]
    },
    "815": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "is_out_of_bounds%3#0",
        "5",
        "tmp%12#0 (copy)"
      ]
    },
    "817": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "5",
        "tmp%12#0 (copy)",
        "is_out_of_bounds%3#0"
      ]
    },
    "819": {
      "op": "select",
      "defined_out": [
        "bounded_index%3#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%66#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "bounded_index%3#0"
      ]
    },
    "820": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "bounded_index%3#0",
        "tmp%0#1 (copy)"
      ]
    },
    "822": {
      "op": "intc_3 // 0",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "bounded_index%3#0",
        "tmp%0#1 (copy)",
        "0"
      ]
    },
    "823": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "tmp%0#1 (copy)",
        "0",
        "bounded_index%3#0"
      ]
    },
    "825": {
      "op": "substring3",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%66#0",
        "tmp%68#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%66#0",
        "tmp%68#0"
      ]
    },
    "826": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%69#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%69#0"
      ]
    },
    "827": {
      "op": "assert",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "828": {
      "op": "intc_0 // 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "2"
      ]
    },
    "829": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "2",
        "value%3#0 (copy)"
      ]
    },
    "831": {
      "op": "<",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%72#0",
        "value%3#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%3#0",
        "tmp%12#0",
        "tmp%72#0"
      ]
    },
    "832": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%72#0",
        "value%3#0"
      ]
    },
    "834": {
      "op": "intc_0 // 2",
      "stack_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%72#0",
        "value%3#0",
        "2"
      ]
    },
    "835": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "tmp%12#0",
        "value%3#0",
        "2",
        "tmp%72#0"
      ]
    },
    "837": {
      "op": "select",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%73#0"
      ]
    },
    "838": {
      "op": "bytec 8 // \"box_d\"",
      "stack_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%73#0",
        "\"box_d\""
      ]
    },
    "840": {
      "op": "intc_3 // 0",
      "stack_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%73#0",
        "\"box_d\"",
        "0"
      ]
    },
    "841": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "tmp%12#0",
        "\"box_d\"",
        "0",
        "tmp%73#0"
      ]
    },
    "843": {
      "op": "box_extract",
      "defined_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%75#0"
      ]
    },
    "844": {
      "op": "intc_0 // 2",
      "stack_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%75#0",
        "2"
      ]
    },
    "845": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%75#0",
        "2",
        "tmp%12#0 (copy)"
      ]
    },
    "847": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%4#0",
        "tmp%0#1",
        "tmp%12#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%75#0",
        "is_out_of_bounds%4#0"
      ]
    },
    "848": {
      "op": "intc_0 // 2",
      "stack_out": [
        "tmp%0#1",
        "tmp%12#0",
        "tmp%75#0",
        "is_out_of_bounds%4#0",
        "2"
      ]
    },
    "849": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#1",
        "tmp%75#0",
        "is_out_of_bounds%4#0",
        "2",
        "tmp%12#0"
      ]
    },
    "851": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "tmp%75#0",
        "2",
        "tmp%12#0",
        "is_out_of_bounds%4#0"
      ]
    },
    "853": {
      "op": "select",
      "defined_out": [
        "bounded_index%4#0",
        "tmp%0#1",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%75#0",
        "bounded_index%4#0"
      ]
    },
    "854": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%75#0",
        "bounded_index%4#0",
        "tmp%0#1"
      ]
    },
    "856": {
      "op": "intc_3 // 0",
      "stack_out": [
        "tmp%75#0",
        "bounded_index%4#0",
        "tmp%0#1",
        "0"
      ]
    },
    "857": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%75#0",
        "tmp%0#1",
        "0",
        "bounded_index%4#0"
      ]
    },
    "859": {
      "op": "substring3",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0"
      ]
    },
    "860": {
      "op": "==",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "861": {
      "op": "assert",
      "stack_out": []
    },
    "862": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "\"box_large\""
      ]
    },
    "864": {
      "op": "box_len",
      "defined_out": [
        "check%4#0",
        "value%4#0"
      ],
      "stack_out": [
        "value%4#0",
        "check%4#0"
      ]
    },
    "865": {
      "op": "pop",
      "stack_out": [
        "value%4#0"
      ]
    },
    "866": {
      "op": "pushint 6160 // 6160",
      "stack_out": [
        "value%4#0",
        "6160"
      ]
    },
    "869": {
      "op": "==",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "870": {
      "op": "return",
      "stack_out": []
    },
    "871": {
      "subroutine": "examples.box_storage.contract.BoxContract.set_many_ints[routing]",
      "params": {},
      "block": "set_many_ints",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "874": {
      "op": "btoi",
      "defined_out": [
        "index#0"
      ],
      "stack_out": [
        "index#0"
      ]
    },
    "875": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "878": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "index#0"
      ]
    },
    "879": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "index#0",
        "8"
      ]
    },
    "880": {
      "op": "*",
      "defined_out": [
        "box%element_offset%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box%element_offset%0#0"
      ]
    },
    "881": {
      "op": "bytec 11 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\"",
        "box%element_offset%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box%element_offset%0#0",
        "\"many_ints\""
      ]
    },
    "883": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "\"many_ints\"",
        "box%element_offset%0#0"
      ]
    },
    "884": {
      "op": "uncover 2",
      "stack_out": [
        "\"many_ints\"",
        "box%element_offset%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "886": {
      "op": "box_replace",
      "stack_out": []
    },
    "887": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "888": {
      "op": "return",
      "stack_out": []
    },
    "889": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_many_ints[routing]",
      "params": {},
      "block": "sum_many_ints",
      "stack_in": [],
      "op": "pushbytes \"\"",
      "stack_out": [
        "item_index_internal%0#0"
      ]
    },
    "891": {
      "op": "dup",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "892": {
      "block": "sum_many_ints_while_top@7",
      "stack_in": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "op": "pushint 10510 // 10510",
      "defined_out": [
        "10510"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "10510"
      ]
    },
    "895": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "10510",
        "tmp%1#1"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "10510",
        "tmp%1#1"
      ]
    },
    "897": {
      "op": ">",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "tmp%2#1"
      ]
    },
    "898": {
      "op": "bz sum_many_ints_after_while@12",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "901": {
      "op": "itxn_begin"
    },
    "902": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "appl"
      ]
    },
    "904": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "906": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "DeleteApplication"
      ]
    },
    "908": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "910": {
      "op": "bytec 15 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "0x068101"
      ]
    },
    "912": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "914": {
      "op": "bytec 15 // 0x068101",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "0x068101"
      ]
    },
    "916": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "918": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "0"
      ]
    },
    "919": {
      "op": "itxn_field Fee",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "921": {
      "op": "itxn_submit"
    },
    "922": {
      "op": "b sum_many_ints_while_top@7"
    },
    "925": {
      "block": "sum_many_ints_after_while@12",
      "stack_in": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "op": "intc_3 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "total#0"
      ]
    },
    "926": {
      "op": "bury 1",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "928": {
      "op": "bytec 11 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\"",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "\"many_ints\""
      ]
    },
    "930": {
      "op": "box_len",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "931": {
      "op": "bury 1",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "aggregate%box_get%1#0"
      ]
    },
    "933": {
      "error": "check self.many_ints exists",
      "op": "assert // check self.many_ints exists",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "934": {
      "op": "intc_3 // 0",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "935": {
      "op": "bury 2",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "937": {
      "block": "sum_many_ints_for_header@2",
      "stack_in": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "939": {
      "op": "pushint 513 // 513",
      "defined_out": [
        "513",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "513"
      ]
    },
    "942": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "continue_looping%0#0"
      ]
    },
    "943": {
      "op": "bz sum_many_ints_after_for@5",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "946": {
      "op": "dig 1",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "948": {
      "op": "dup",
      "defined_out": [
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "949": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "8"
      ]
    },
    "950": {
      "op": "*",
      "defined_out": [
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0"
      ]
    },
    "951": {
      "op": "bytec 11 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\"",
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0",
        "\"many_ints\""
      ]
    },
    "953": {
      "op": "swap",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "\"many_ints\"",
        "box%element_offset%0#0"
      ]
    },
    "954": {
      "op": "intc_2 // 8",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "\"many_ints\"",
        "box%element_offset%0#0",
        "8"
      ]
    },
    "955": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "box%box_extract%0#0"
      ]
    },
    "956": {
      "op": "btoi",
      "defined_out": [
        "item_index_internal%0#0",
        "val#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "val#0"
      ]
    },
    "957": {
      "op": "dig 2",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "val#0",
        "total#0"
      ]
    },
    "959": {
      "op": "+",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "960": {
      "op": "bury 2",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "962": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "963": {
      "op": "+",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "964": {
      "op": "bury 2",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "966": {
      "op": "b sum_many_ints_for_header@2"
    },
    "969": {
      "block": "sum_many_ints_after_for@5",
      "stack_in": [
        "item_index_internal%0#0",
        "total#0"
      ],
      "op": "dup",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "total#0"
      ]
    },
    "970": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "971": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "973": {
      "op": "swap",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "974": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "tmp%2#0"
      ]
    },
    "975": {
      "op": "log",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "976": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "total#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "total#0",
        "1"
      ]
    },
    "977": {
      "op": "return",
      "stack_out": [
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "978": {
      "subroutine": "examples.box_storage.contract.BoxContract.delete_boxes[routing]",
      "params": {},
      "block": "delete_boxes",
      "stack_in": [],
      "op": "bytec 7 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "980": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "981": {
      "op": "pop",
      "stack_out": []
    },
    "982": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "984": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "985": {
      "op": "pop",
      "stack_out": []
    },
    "986": {
      "op": "bytec_3 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "987": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "988": {
      "op": "pop",
      "stack_out": []
    },
    "989": {
      "op": "bytec 7 // \"box_a\"",
      "stack_out": [
        "\"box_a\""
      ]
    },
    "991": {
      "op": "box_get",
      "defined_out": [
        "a_exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "a_exists#0"
      ]
    },
    "992": {
      "op": "swap",
      "stack_out": [
        "a_exists#0",
        "maybe_value%0#0"
      ]
    },
    "993": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "a_exists#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "994": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "a#0",
        "a_exists#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "42"
      ]
    },
    "996": {
      "op": "dig 1",
      "defined_out": [
        "42",
        "a#0",
        "a#0 (copy)",
        "a_exists#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "42",
        "a#0 (copy)"
      ]
    },
    "998": {
      "op": "dig 3",
      "defined_out": [
        "42",
        "a#0",
        "a#0 (copy)",
        "a_exists#0",
        "a_exists#0 (copy)"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "42",
        "a#0 (copy)",
        "a_exists#0 (copy)"
      ]
    },
    "1000": {
      "op": "select",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%0#0"
      ]
    },
    "1001": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%0#0",
        "42"
      ]
    },
    "1003": {
      "op": "==",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%0#0"
      ]
    },
    "1004": {
      "op": "assert",
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "1005": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "\"b\""
      ]
    },
    "1007": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1008": {
      "op": "bytec 13 // 0x00023432",
      "defined_out": [
        "0x00023432",
        "a#0",
        "a_exists#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%1#0",
        "maybe_exists%1#0",
        "0x00023432"
      ]
    },
    "1010": {
      "op": "cover 2",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "0x00023432",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1012": {
      "op": "select",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "state_get%1#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%1#0"
      ]
    },
    "1013": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%2#0"
      ]
    },
    "1016": {
      "op": "pushbytes 0x3432",
      "defined_out": [
        "0x3432",
        "a#0",
        "a_exists#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%2#0",
        "0x3432"
      ]
    },
    "1020": {
      "op": "==",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%3#0"
      ]
    },
    "1021": {
      "op": "assert",
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "1022": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "0x424f585f43"
      ]
    },
    "1023": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1024": {
      "op": "bytec 13 // 0x00023432",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "maybe_value%2#0",
        "maybe_exists%2#0",
        "0x00023432"
      ]
    },
    "1026": {
      "op": "cover 2",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "0x00023432",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1028": {
      "op": "select",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "state_get%2#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%2#0"
      ]
    },
    "1029": {
      "op": "bytec 13 // 0x00023432",
      "stack_out": [
        "a_exists#0",
        "a#0",
        "state_get%2#0",
        "0x00023432"
      ]
    },
    "1031": {
      "op": "==",
      "defined_out": [
        "a#0",
        "a_exists#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a_exists#0",
        "a#0",
        "tmp%6#0"
      ]
    },
    "1032": {
      "op": "assert",
      "stack_out": [
        "a_exists#0",
        "a#0"
      ]
    },
    "1033": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "a_exists#0"
      ]
    },
    "1034": {
      "op": "!",
      "defined_out": [
        "a#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%7#0"
      ]
    },
    "1035": {
      "op": "assert",
      "stack_out": [
        "a#0"
      ]
    },
    "1036": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1037": {
      "op": "assert",
      "stack_out": []
    },
    "1038": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "1040": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1041": {
      "op": "pop",
      "stack_out": []
    },
    "1042": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1043": {
      "op": "return",
      "stack_out": []
    },
    "1044": {
      "subroutine": "examples.box_storage.contract.BoxContract.indirect_extract_and_replace[routing]",
      "params": {},
      "block": "indirect_extract_and_replace",
      "stack_in": [],
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "1046": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "\"box_large\"",
        "4096"
      ],
      "stack_out": [
        "\"box_large\"",
        "4096"
      ]
    },
    "1048": {
      "op": "intc_2 // 8",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "8"
      ],
      "stack_out": [
        "\"box_large\"",
        "4096",
        "8"
      ]
    },
    "1049": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%box_extract%0#0"
      ]
    },
    "1050": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "1051": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "1"
      ]
    },
    "1052": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1053": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1054": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"box_large\""
      ]
    },
    "1056": {
      "op": "intc 4 // 4096",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "\"box_large\"",
        "4096"
      ]
    },
    "1058": {
      "op": "uncover 2",
      "stack_out": [
        "\"box_large\"",
        "4096",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1060": {
      "op": "box_replace",
      "stack_out": []
    },
    "1061": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1062": {
      "op": "return",
      "stack_out": []
    },
    "1063": {
      "subroutine": "examples.box_storage.contract.BoxContract.read_boxes[routing]",
      "params": {},
      "block": "read_boxes",
      "stack_in": [],
      "op": "bytec 7 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "1065": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1066": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "1067": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "1068": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "1"
      ]
    },
    "1069": {
      "op": "+",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "1070": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%0#2",
        "1"
      ]
    },
    "1071": {
      "op": "-",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "1072": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\"",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "\"b\""
      ]
    },
    "1074": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "1075": {
      "error": "check self.box_b exists",
      "op": "assert // check self.box_b exists",
      "stack_out": [
        "tmp%1#1",
        "aggregate%box_get%2#0"
      ]
    },
    "1076": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1"
      ]
    },
    "1079": {
      "op": "bytec_3 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "0x424f585f43"
      ]
    },
    "1080": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0",
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "1081": {
      "error": "check self.box_c exists",
      "op": "assert // check self.box_c exists",
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "aggregate%box_get%4#0"
      ]
    },
    "1082": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "aggregate%box_get%4#0",
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "aggregate%box_get%4#0",
        "\"box_large\""
      ]
    },
    "1084": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "aggregate%box_get%4#0",
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "aggregate%box_get%4#0",
        "\"box_large\"",
        "4096"
      ]
    },
    "1086": {
      "op": "intc_2 // 8",
      "defined_out": [
        "\"box_large\"",
        "4096",
        "8",
        "aggregate%box_get%4#0",
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "aggregate%box_get%4#0",
        "\"box_large\"",
        "4096",
        "8"
      ]
    },
    "1087": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%box_get%4#0",
        "box%box_extract%0#0",
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "aggregate%box_get%4#0",
        "box%box_extract%0#0"
      ]
    },
    "1088": {
      "op": "btoi",
      "defined_out": [
        "aggregate%box_get%4#0",
        "tmp%1#1",
        "tmp%2#1",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%1#1",
        "tmp%2#1",
        "aggregate%box_get%4#0",
        "values%0#0"
      ]
    },
    "1089": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#1",
        "aggregate%box_get%4#0",
        "values%0#0",
        "tmp%1#1"
      ]
    },
    "1091": {
      "op": "itob",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#1",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1092": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#1",
        "tmp%2#1 (copy)",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#1 (copy)"
      ]
    },
    "1094": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%length%0#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#1",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%length%0#0"
      ]
    },
    "1095": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%box_get%4#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#1",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1096": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%length_uint16%0#0",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#1",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%2#1",
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "1099": {
      "op": "uncover 4",
      "stack_out": [
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%length_uint16%0#0",
        "tmp%2#1"
      ]
    },
    "1101": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "1102": {
      "op": "swap",
      "stack_out": [
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1103": {
      "op": "bytec 16 // 0x0014",
      "defined_out": [
        "0x0014",
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%val_as_bytes%0#0",
        "0x0014"
      ]
    },
    "1105": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0"
      ]
    },
    "1106": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%0#0 (copy)",
        "aggregate%head%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%encoded_value%0#0 (copy)"
      ]
    },
    "1108": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%data_length%0#0"
      ]
    },
    "1109": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "aggregate%box_get%4#0",
        "aggregate%data_length%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%data_length%0#0",
        "20"
      ]
    },
    "1111": {
      "op": "+",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "1112": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "1113": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "1116": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "values%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "values%0#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0"
      ]
    },
    "1117": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "values%0#0"
      ]
    },
    "1119": {
      "op": "itob",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1120": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%encoded_value%0#0",
        "aggregate%head%3#0"
      ]
    },
    "1121": {
      "op": "swap",
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%head%3#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "1122": {
      "op": "concat",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%concat%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%concat%0#0"
      ]
    },
    "1123": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#0",
        "aggregate%box_get%4#0"
      ]
    },
    "1124": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "1125": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "0x151f7c75"
      ]
    },
    "1127": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%concat%1#0"
      ]
    },
    "1128": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1129": {
      "op": "log",
      "stack_out": []
    },
    "1130": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1131": {
      "op": "return",
      "stack_out": []
    },
    "1132": {
      "subroutine": "examples.box_storage.contract.BoxContract.boxes_exist[routing]",
      "params": {},
      "block": "boxes_exist",
      "stack_in": [],
      "op": "bytec 7 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "1134": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1135": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1137": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\"",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "\"b\""
      ]
    },
    "1139": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1140": {
      "op": "cover 2",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "_%1#0"
      ]
    },
    "1142": {
      "op": "pop",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1143": {
      "op": "bytec_3 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "0x424f585f43"
      ]
    },
    "1144": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "_%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1145": {
      "op": "cover 3",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "_%2#0"
      ]
    },
    "1147": {
      "op": "pop",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1148": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "\"box_large\""
      ]
    },
    "1150": {
      "op": "box_len",
      "defined_out": [
        "_%3#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "_%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1151": {
      "op": "cover 4",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "_%3#0"
      ]
    },
    "1153": {
      "op": "pop",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1154": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "1157": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "1158": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "1160": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "1161": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%encoded_bool%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#0",
        "maybe_exists%1#0",
        "aggregate%encoded_bool%0#0",
        "1"
      ]
    },
    "1162": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#0",
        "aggregate%encoded_bool%0#0",
        "1",
        "maybe_exists%1#0"
      ]
    },
    "1164": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%0#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#0",
        "aggregate%set_bit%0#0"
      ]
    },
    "1165": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "aggregate%set_bit%0#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%2#0",
        "aggregate%set_bit%0#0",
        "2"
      ]
    },
    "1166": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_exists%3#0",
        "aggregate%set_bit%0#0",
        "2",
        "maybe_exists%2#0"
      ]
    },
    "1168": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%1#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "aggregate%set_bit%1#0"
      ]
    },
    "1169": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "aggregate%set_bit%1#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "aggregate%set_bit%1#0",
        "3"
      ]
    },
    "1171": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%set_bit%1#0",
        "3",
        "maybe_exists%3#0"
      ]
    },
    "1173": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%2#0"
      ],
      "stack_out": [
        "aggregate%set_bit%2#0"
      ]
    },
    "1174": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%set_bit%2#0"
      ],
      "stack_out": [
        "aggregate%set_bit%2#0",
        "0x151f7c75"
      ]
    },
    "1176": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%set_bit%2#0"
      ]
    },
    "1177": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1178": {
      "op": "log",
      "stack_out": []
    },
    "1179": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1180": {
      "op": "return",
      "stack_out": []
    },
    "1181": {
      "subroutine": "examples.box_storage.contract.BoxContract.create_dynamic_arr_struct[routing]",
      "params": {},
      "block": "create_dynamic_arr_struct",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1183": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1184": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "2"
      ]
    },
    "1185": {
      "op": "*",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1186": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "1187": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1188": {
      "op": "bytec 16 // 0x0014",
      "defined_out": [
        "0x0014",
        "aggregate%val_as_bytes%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%val_as_bytes%0#0",
        "0x0014"
      ]
    },
    "1190": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%head%1#0"
      ]
    },
    "1191": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%1#0",
        "tmp%2#0"
      ]
    },
    "1192": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1193": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "1194": {
      "op": "pushbytes 0x001600000000",
      "defined_out": [
        "0x001600000000",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "0x001600000000"
      ]
    },
    "1202": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "1203": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "aggregate%concat%1#0"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1204": {
      "op": "box_del",
      "defined_out": [
        "aggregate%concat%1#0",
        "{box_del}"
      ],
      "stack_out": [
        "aggregate%concat%1#0",
        "{box_del}"
      ]
    },
    "1205": {
      "op": "pop",
      "stack_out": [
        "aggregate%concat%1#0"
      ]
    },
    "1206": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "aggregate%concat%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1207": {
      "op": "swap",
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "aggregate%concat%1#0"
      ]
    },
    "1208": {
      "op": "box_put",
      "stack_out": []
    },
    "1209": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1210": {
      "op": "return",
      "stack_out": []
    },
    "1211": {
      "subroutine": "examples.box_storage.contract.BoxContract.append_dynamic_arr_struct[routing]",
      "params": {},
      "block": "append_dynamic_arr_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "1214": {
      "op": "btoi",
      "defined_out": [
        "times#0"
      ],
      "stack_out": [
        "times#0"
      ]
    },
    "1215": {
      "op": "dup",
      "defined_out": [
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "times#0"
      ]
    },
    "1216": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1217": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "10",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "\"dynamic_arr_struct\"",
        "10"
      ]
    },
    "1219": {
      "op": "intc_2 // 8",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "10",
        "8",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "\"dynamic_arr_struct\"",
        "10",
        "8"
      ]
    },
    "1220": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "box%box_extract%0#0"
      ]
    },
    "1221": {
      "op": "btoi",
      "defined_out": [
        "times#0",
        "values%0#0"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "values%0#0"
      ]
    },
    "1222": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "times#0",
        "values%0#0"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "values%0#0",
        "2"
      ]
    },
    "1223": {
      "op": "==",
      "defined_out": [
        "times#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "tmp%0#1"
      ]
    },
    "1224": {
      "error": "expected 2",
      "op": "assert // expected 2",
      "stack_out": [
        "times#0",
        "times#0"
      ]
    },
    "1225": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "times#0",
        "times#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1226": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1228": {
      "op": "intc_0 // 2",
      "stack_out": [
        "times#0",
        "times#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1229": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "box%box_extract%1#0"
      ]
    },
    "1230": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "arr_len#0"
      ]
    },
    "1231": {
      "op": "dup",
      "stack_out": [
        "times#0",
        "times#0",
        "arr_len#0",
        "arr_len#0"
      ]
    },
    "1232": {
      "op": "cover 2",
      "defined_out": [
        "arr_len#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0"
      ]
    },
    "1234": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1235": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "arr_len#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1237": {
      "op": "intc_0 // 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "1238": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%box_extract%2#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "box%box_extract%2#0"
      ]
    },
    "1239": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "box%btoi%0#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "box%btoi%0#0"
      ]
    },
    "1240": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "box%btoi%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1241": {
      "op": "swap",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%0#0"
      ]
    },
    "1242": {
      "op": "intc_0 // 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%0#0",
        "2"
      ]
    },
    "1243": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%box_extract%3#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "box%box_extract%3#0"
      ]
    },
    "1244": {
      "op": "btoi",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "arr2_len#0"
      ]
    },
    "1245": {
      "op": "dig 1",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "arr_len#0 (copy)"
      ]
    },
    "1247": {
      "op": "dig 3",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "times#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "arr_len#0 (copy)",
        "times#0 (copy)"
      ]
    },
    "1249": {
      "op": "+",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "arr_size#1",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "arr_size#1"
      ]
    },
    "1250": {
      "op": "intc_2 // 8",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "arr_size#1",
        "8"
      ]
    },
    "1251": {
      "op": "*",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "times#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "tmp%3#2"
      ]
    },
    "1252": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "arr2_len#0",
        "arr_len#0",
        "times#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "tmp%3#2",
        "22"
      ]
    },
    "1254": {
      "op": "+",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "head_and_dyn_arr#1",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "head_and_dyn_arr#1"
      ]
    },
    "1255": {
      "op": "swap",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "head_and_dyn_arr#1",
        "arr2_len#0"
      ]
    },
    "1256": {
      "op": "intc_2 // 8",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "head_and_dyn_arr#1",
        "arr2_len#0",
        "8"
      ]
    },
    "1257": {
      "op": "*",
      "defined_out": [
        "arr_len#0",
        "head_and_dyn_arr#1",
        "times#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "head_and_dyn_arr#1",
        "tmp%1#1"
      ]
    },
    "1258": {
      "op": "intc_0 // 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "head_and_dyn_arr#1",
        "tmp%1#1",
        "2"
      ]
    },
    "1259": {
      "op": "+",
      "defined_out": [
        "arr_len#0",
        "dyn_arr2_index#1",
        "head_and_dyn_arr#1",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "head_and_dyn_arr#1",
        "dyn_arr2_index#1"
      ]
    },
    "1260": {
      "op": "+",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "tmp%3#2"
      ]
    },
    "1261": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "tmp%3#2",
        "\"dynamic_arr_struct\""
      ]
    },
    "1262": {
      "op": "swap",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "tmp%3#2"
      ]
    },
    "1263": {
      "op": "box_resize",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0"
      ]
    },
    "1264": {
      "op": "intc_2 // 8",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "arr_len#0",
        "8"
      ]
    },
    "1265": {
      "op": "*",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "tmp%3#2"
      ]
    },
    "1266": {
      "op": "pushint 22 // 22",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "tmp%3#2",
        "22"
      ]
    },
    "1268": {
      "op": "+",
      "defined_out": [
        "arr_len#0",
        "times#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "times#0",
        "tmp%5#1"
      ]
    },
    "1269": {
      "op": "swap",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "tmp%5#1",
        "times#0"
      ]
    },
    "1270": {
      "op": "intc_2 // 8",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "tmp%5#1",
        "times#0",
        "8"
      ]
    },
    "1271": {
      "op": "*",
      "defined_out": [
        "arr_len#0",
        "times#0",
        "tmp%5#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "tmp%5#1",
        "tmp%6#0"
      ]
    },
    "1272": {
      "op": "bzero",
      "defined_out": [
        "arr_len#0",
        "times#0",
        "tmp%5#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "tmp%5#1",
        "tmp%7#0"
      ]
    },
    "1273": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "tmp%5#1",
        "tmp%7#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1274": {
      "op": "uncover 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "tmp%7#0",
        "\"dynamic_arr_struct\"",
        "tmp%5#1"
      ]
    },
    "1276": {
      "op": "intc_3 // 0",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "tmp%7#0",
        "\"dynamic_arr_struct\"",
        "tmp%5#1",
        "0"
      ]
    },
    "1277": {
      "op": "uncover 3",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "tmp%5#1",
        "0",
        "tmp%7#0"
      ]
    },
    "1279": {
      "op": "box_splice",
      "stack_out": [
        "times#0",
        "arr_len#0"
      ]
    },
    "1280": {
      "op": "intc_3 // 0",
      "defined_out": [
        "arr_len#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "1281": {
      "block": "append_dynamic_arr_struct_for_header@2",
      "stack_in": [
        "times#0",
        "arr_len#0",
        "i#0"
      ],
      "op": "dup",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "1282": {
      "op": "dig 3",
      "defined_out": [
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "times#0"
      ]
    },
    "1284": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1285": {
      "op": "bz append_dynamic_arr_struct_after_for@5",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "1288": {
      "op": "dupn 2",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "1290": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1291": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ]
    },
    "1293": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0 (copy)",
        "arr_len#0 (copy)"
      ]
    },
    "1294": {
      "op": "cover 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0 (copy)"
      ]
    },
    "1296": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0 (copy)",
        "8"
      ]
    },
    "1297": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%element_offset%0#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0"
      ]
    },
    "1298": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%element_offset%0#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0",
        "22"
      ]
    },
    "1300": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%offset%5#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%offset%5#0"
      ]
    },
    "1301": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%offset%5#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%offset%5#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1302": {
      "op": "swap",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_arr_struct\"",
        "box%offset%5#0"
      ]
    },
    "1303": {
      "op": "uncover 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "box%offset%5#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1305": {
      "op": "box_replace",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "1306": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr_len#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "1"
      ]
    },
    "1307": {
      "op": "+",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "1308": {
      "op": "bury 3",
      "defined_out": [
        "arr_len#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "1310": {
      "op": "intc_1 // 1",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1311": {
      "op": "+",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "1312": {
      "op": "bury 1",
      "defined_out": [
        "arr_len#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "1314": {
      "op": "b append_dynamic_arr_struct_for_header@2"
    },
    "1317": {
      "block": "append_dynamic_arr_struct_after_for@5",
      "stack_in": [
        "times#0",
        "arr_len#0",
        "i#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "1319": {
      "op": "dup",
      "defined_out": [
        "arr_len#0",
        "arr_len#0 (copy)"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "arr_len#0 (copy)"
      ]
    },
    "1320": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1321": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)"
      ]
    },
    "1322": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "1323": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%0#0",
        "16"
      ]
    },
    "1325": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "1326": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1327": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%uint16%0#0"
      ]
    },
    "1330": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%uint16%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1331": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%uint16%0#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1333": {
      "op": "uncover 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "20",
        "aggregate%uint16%0#0"
      ]
    },
    "1335": {
      "op": "box_replace",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "1336": {
      "op": "dup",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "arr_len#0 (copy)"
      ]
    },
    "1337": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "arr_len#0",
        "arr_len#0 (copy)"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "8"
      ]
    },
    "1338": {
      "op": "*",
      "defined_out": [
        "arr_len#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "tmp%3#2"
      ]
    },
    "1339": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "arr_len#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "tmp%3#2",
        "24"
      ]
    },
    "1341": {
      "op": "+",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "tmp%3#2"
      ]
    },
    "1342": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "arr_len#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "tmp%3#2",
        "2"
      ]
    },
    "1343": {
      "op": "-",
      "defined_out": [
        "arr2_offset#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "arr2_offset#0"
      ]
    },
    "1344": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "1345": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "aggregate%val_as_bytes%2#0 (copy)",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%val_as_bytes%2#0 (copy)"
      ]
    },
    "1346": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%1#0",
        "aggregate%val_as_bytes%2#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%bitlen%1#0"
      ]
    },
    "1347": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%bitlen%1#0",
        "16"
      ]
    },
    "1349": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%1#0",
        "aggregate%val_as_bytes%2#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%2#0",
        "aggregate%no_overflow%1#0"
      ]
    },
    "1350": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "1351": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%uint16%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%uint16%1#0"
      ]
    },
    "1354": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%uint16%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1355": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "aggregate%uint16%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%uint16%1#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1357": {
      "op": "uncover 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "18",
        "aggregate%uint16%1#0"
      ]
    },
    "1359": {
      "op": "box_replace",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "1360": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1361": {
      "op": "pushint 20 // 20",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1363": {
      "op": "intc_0 // 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1364": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%box_extract%4#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "box%box_extract%4#0"
      ]
    },
    "1365": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "box%array_length%2#0"
      ]
    },
    "1366": {
      "op": "dup",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "box%array_length%2#0 (copy)"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "box%array_length%2#0",
        "box%array_length%2#0 (copy)"
      ]
    },
    "1367": {
      "op": "uncover 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "box%array_length%2#0 (copy)",
        "arr_len#0"
      ]
    },
    "1369": {
      "op": "==",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "tmp%14#0"
      ]
    },
    "1370": {
      "error": "expected arr length to be correct",
      "op": "assert // expected arr length to be correct",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0"
      ]
    },
    "1371": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1372": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1374": {
      "op": "intc_0 // 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "1375": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "box%box_extract%5#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "box%box_extract%5#0"
      ]
    },
    "1376": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "box%btoi%1#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "box%btoi%1#0"
      ]
    },
    "1377": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "box%btoi%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1378": {
      "op": "swap",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%1#0"
      ]
    },
    "1379": {
      "op": "intc_0 // 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%1#0",
        "2"
      ]
    },
    "1380": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "box%box_extract%6#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "box%box_extract%6#0"
      ]
    },
    "1381": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "box%array_length%3#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "box%array_length%3#0"
      ]
    },
    "1382": {
      "op": "!",
      "defined_out": [
        "arr_len#0",
        "box%array_length%2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0",
        "tmp%16#0"
      ]
    },
    "1383": {
      "error": "expected arr2 length to be correct",
      "op": "assert // expected arr2 length to be correct",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%2#0"
      ]
    },
    "1384": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%3#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "1385": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%3#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "1387": {
      "op": "swap",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "1388": {
      "op": "concat",
      "defined_out": [
        "arr_len#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "1389": {
      "op": "log",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "1390": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "1"
      ]
    },
    "1391": {
      "op": "return",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "1392": {
      "subroutine": "examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct[routing]",
      "params": {},
      "block": "pop_dynamic_arr_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "1395": {
      "op": "btoi",
      "defined_out": [
        "times#0"
      ],
      "stack_out": [
        "times#0"
      ]
    },
    "1396": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1397": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1399": {
      "op": "intc_0 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "2",
        "20",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1400": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "box%box_extract%0#0"
      ]
    },
    "1401": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "box%array_length%0#0"
      ]
    },
    "1402": {
      "op": "dig 1",
      "defined_out": [
        "box%array_length%0#0",
        "times#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "times#0",
        "box%array_length%0#0",
        "times#0 (copy)"
      ]
    },
    "1404": {
      "op": "-",
      "defined_out": [
        "arr_len#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0"
      ]
    },
    "1405": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1406": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "arr_len#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1408": {
      "op": "intc_0 // 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "1409": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%box_extract%1#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "box%box_extract%1#0"
      ]
    },
    "1410": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "box%btoi%0#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "box%btoi%0#0"
      ]
    },
    "1411": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "box%btoi%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1412": {
      "op": "swap",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%0#0"
      ]
    },
    "1413": {
      "op": "intc_0 // 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%0#0",
        "2"
      ]
    },
    "1414": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%box_extract%2#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "box%box_extract%2#0"
      ]
    },
    "1415": {
      "op": "btoi",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "arr2_len#0"
      ]
    },
    "1416": {
      "op": "dig 1",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "arr_len#0 (copy)"
      ]
    },
    "1418": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "arr2_len#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "arr_len#0 (copy)",
        "8"
      ]
    },
    "1419": {
      "op": "*",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "times#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "tmp%3#2"
      ]
    },
    "1420": {
      "op": "dup",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "times#0",
        "tmp%3#2",
        "tmp%3#2 (copy)"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "tmp%3#2",
        "tmp%3#2 (copy)"
      ]
    },
    "1421": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "arr2_len#0",
        "arr_len#0",
        "times#0",
        "tmp%3#2",
        "tmp%3#2 (copy)"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "tmp%3#2",
        "tmp%3#2 (copy)",
        "22"
      ]
    },
    "1423": {
      "op": "+",
      "defined_out": [
        "arr2_len#0",
        "arr_len#0",
        "head_and_dyn_arr#0",
        "times#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "tmp%3#2",
        "head_and_dyn_arr#0"
      ]
    },
    "1424": {
      "op": "swap",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%3#2"
      ]
    },
    "1425": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "arr2_len#0",
        "arr_len#0",
        "head_and_dyn_arr#0",
        "times#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%3#2",
        "24"
      ]
    },
    "1427": {
      "op": "+",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%3#2"
      ]
    },
    "1428": {
      "op": "intc_0 // 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%3#2",
        "2"
      ]
    },
    "1429": {
      "op": "-",
      "defined_out": [
        "arr2_len#0",
        "arr2_offset#0",
        "arr_len#0",
        "head_and_dyn_arr#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0"
      ]
    },
    "1430": {
      "op": "uncover 3",
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "arr_len#0"
      ]
    },
    "1432": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr2_len#0",
        "arr2_offset#0",
        "head_and_dyn_arr#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1433": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)",
        "arr2_len#0",
        "arr2_offset#0",
        "head_and_dyn_arr#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "1434": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr2_len#0",
        "arr2_offset#0",
        "head_and_dyn_arr#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "1435": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr2_len#0",
        "arr2_offset#0",
        "head_and_dyn_arr#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "16"
      ]
    },
    "1437": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr2_len#0",
        "arr2_offset#0",
        "head_and_dyn_arr#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "1438": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1439": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%uint16%0#0",
        "arr2_len#0",
        "arr2_offset#0",
        "head_and_dyn_arr#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%uint16%0#0"
      ]
    },
    "1442": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%uint16%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1443": {
      "op": "pushint 20 // 20",
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "aggregate%uint16%0#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1445": {
      "op": "uncover 2",
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0",
        "\"dynamic_arr_struct\"",
        "20",
        "aggregate%uint16%0#0"
      ]
    },
    "1447": {
      "op": "box_replace",
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "arr2_offset#0"
      ]
    },
    "1448": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1449": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)"
      ]
    },
    "1450": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%1#0",
        "aggregate%val_as_bytes%1#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%1#0"
      ]
    },
    "1451": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%1#0",
        "16"
      ]
    },
    "1453": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%1#0",
        "aggregate%val_as_bytes%1#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%no_overflow%1#0"
      ]
    },
    "1454": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1455": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%uint16%1#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%uint16%1#0"
      ]
    },
    "1458": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%uint16%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1459": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "aggregate%uint16%1#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1461": {
      "op": "uncover 2",
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "\"dynamic_arr_struct\"",
        "18",
        "aggregate%uint16%1#0"
      ]
    },
    "1463": {
      "op": "box_replace",
      "stack_out": [
        "times#0",
        "arr2_len#0",
        "head_and_dyn_arr#0"
      ]
    },
    "1464": {
      "op": "uncover 2",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "times#0"
      ]
    },
    "1466": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "times#0",
        "8"
      ]
    },
    "1467": {
      "op": "*",
      "defined_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%8#0"
      ]
    },
    "1468": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%8#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1469": {
      "op": "dig 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "head_and_dyn_arr#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "tmp%8#0",
        "\"dynamic_arr_struct\"",
        "head_and_dyn_arr#0 (copy)"
      ]
    },
    "1471": {
      "op": "uncover 2",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "\"dynamic_arr_struct\"",
        "head_and_dyn_arr#0 (copy)",
        "tmp%8#0"
      ]
    },
    "1473": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "0x",
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "head_and_dyn_arr#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0",
        "\"dynamic_arr_struct\"",
        "head_and_dyn_arr#0 (copy)",
        "tmp%8#0",
        "0x"
      ]
    },
    "1475": {
      "op": "box_splice",
      "stack_out": [
        "arr2_len#0",
        "head_and_dyn_arr#0"
      ]
    },
    "1476": {
      "op": "swap",
      "stack_out": [
        "head_and_dyn_arr#0",
        "arr2_len#0"
      ]
    },
    "1477": {
      "op": "intc_2 // 8",
      "stack_out": [
        "head_and_dyn_arr#0",
        "arr2_len#0",
        "8"
      ]
    },
    "1478": {
      "op": "*",
      "defined_out": [
        "head_and_dyn_arr#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "head_and_dyn_arr#0",
        "tmp%1#1"
      ]
    },
    "1479": {
      "op": "intc_0 // 2",
      "stack_out": [
        "head_and_dyn_arr#0",
        "tmp%1#1",
        "2"
      ]
    },
    "1480": {
      "op": "+",
      "defined_out": [
        "dyn_arr2_index#1",
        "head_and_dyn_arr#0"
      ],
      "stack_out": [
        "head_and_dyn_arr#0",
        "dyn_arr2_index#1"
      ]
    },
    "1481": {
      "op": "+",
      "defined_out": [
        "size#0"
      ],
      "stack_out": [
        "size#0"
      ]
    },
    "1482": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "size#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1483": {
      "op": "swap",
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "size#0"
      ]
    },
    "1484": {
      "op": "box_resize",
      "stack_out": []
    },
    "1485": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "\"dynamic_arr_struct\""
      ]
    },
    "1486": {
      "op": "pushint 20 // 20",
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1488": {
      "op": "intc_0 // 2",
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1489": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%3#0"
      ],
      "stack_out": [
        "box%box_extract%3#0"
      ]
    },
    "1490": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%2#0"
      ],
      "stack_out": [
        "box%array_length%2#0"
      ]
    },
    "1491": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "1492": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "1494": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "1495": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1496": {
      "op": "log",
      "stack_out": []
    },
    "1497": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1498": {
      "op": "return",
      "stack_out": []
    },
    "1499": {
      "subroutine": "examples.box_storage.contract.BoxContract.set_nested_struct[routing]",
      "params": {},
      "block": "set_nested_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "struct#0"
      ],
      "stack_out": [
        "struct#0"
      ]
    },
    "1502": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "struct#0"
      ],
      "stack_out": [
        "struct#0",
        "0"
      ]
    },
    "1503": {
      "op": "extract_uint64",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "1504": {
      "error": "struct.a is truthy",
      "op": "assert // struct.a is truthy",
      "stack_out": []
    },
    "1505": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "struct_bytes#0"
      ],
      "stack_out": [
        "struct_bytes#0"
      ]
    },
    "1508": {
      "op": "dup",
      "defined_out": [
        "struct_bytes#0",
        "struct_bytes#0 (copy)"
      ],
      "stack_out": [
        "struct_bytes#0",
        "struct_bytes#0 (copy)"
      ]
    },
    "1509": {
      "op": "len",
      "defined_out": [
        "struct_bytes#0",
        "struct_size#0"
      ],
      "stack_out": [
        "struct_bytes#0",
        "struct_size#0"
      ]
    },
    "1510": {
      "op": "intc 5 // 4098",
      "defined_out": [
        "4098",
        "struct_bytes#0",
        "struct_size#0"
      ],
      "stack_out": [
        "struct_bytes#0",
        "struct_size#0",
        "4098"
      ]
    },
    "1512": {
      "op": "+",
      "defined_out": [
        "struct_bytes#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct_bytes#0",
        "tmp%3#0"
      ]
    },
    "1513": {
      "op": "bytec_1 // \"box\"",
      "defined_out": [
        "\"box\"",
        "struct_bytes#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "struct_bytes#0",
        "tmp%3#0",
        "\"box\""
      ]
    },
    "1514": {
      "op": "swap",
      "stack_out": [
        "struct_bytes#0",
        "\"box\"",
        "tmp%3#0"
      ]
    },
    "1515": {
      "op": "box_create",
      "defined_out": [
        "struct_bytes#0",
        "{box_create}"
      ],
      "stack_out": [
        "struct_bytes#0",
        "{box_create}"
      ]
    },
    "1516": {
      "op": "pop",
      "stack_out": [
        "struct_bytes#0"
      ]
    },
    "1517": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "struct_bytes#0",
        "\"box\""
      ]
    },
    "1518": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "\"box\"",
        "4096",
        "struct_bytes#0"
      ],
      "stack_out": [
        "struct_bytes#0",
        "\"box\"",
        "4096"
      ]
    },
    "1520": {
      "op": "pushbytes 0x1002",
      "defined_out": [
        "\"box\"",
        "0x1002",
        "4096",
        "struct_bytes#0"
      ],
      "stack_out": [
        "struct_bytes#0",
        "\"box\"",
        "4096",
        "0x1002"
      ]
    },
    "1524": {
      "op": "box_replace",
      "stack_out": [
        "struct_bytes#0"
      ]
    },
    "1525": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "struct_bytes#0",
        "\"box\""
      ]
    },
    "1526": {
      "op": "intc 5 // 4098",
      "stack_out": [
        "struct_bytes#0",
        "\"box\"",
        "4098"
      ]
    },
    "1528": {
      "op": "uncover 2",
      "stack_out": [
        "\"box\"",
        "4098",
        "struct_bytes#0"
      ]
    },
    "1530": {
      "op": "box_replace",
      "stack_out": []
    },
    "1531": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1532": {
      "op": "return",
      "stack_out": []
    },
    "1533": {
      "subroutine": "examples.box_storage.contract.BoxContract.nested_write[routing]",
      "params": {},
      "block": "nested_write",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "1536": {
      "op": "btoi",
      "defined_out": [
        "index#0"
      ],
      "stack_out": [
        "index#0"
      ]
    },
    "1537": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "1540": {
      "op": "dup",
      "defined_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%1#0 (copy)"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "reinterpret_Encoded(uint64)%1#0 (copy)"
      ]
    },
    "1541": {
      "op": "btoi",
      "defined_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "value#0"
      ]
    },
    "1542": {
      "op": "bytec_1 // \"box\"",
      "defined_out": [
        "\"box\"",
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "value#0",
        "\"box\""
      ]
    },
    "1543": {
      "op": "intc 5 // 4098",
      "defined_out": [
        "\"box\"",
        "4098",
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "value#0",
        "\"box\"",
        "4098"
      ]
    },
    "1545": {
      "op": "uncover 3",
      "stack_out": [
        "index#0",
        "value#0",
        "\"box\"",
        "4098",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "1547": {
      "op": "box_replace",
      "stack_out": [
        "index#0",
        "value#0"
      ]
    },
    "1548": {
      "op": "dup",
      "defined_out": [
        "index#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "value#0 (copy)"
      ]
    },
    "1549": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "index#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "value#0 (copy)",
        "1"
      ]
    },
    "1550": {
      "op": "+",
      "defined_out": [
        "index#0",
        "tmp%0#1",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "tmp%0#1"
      ]
    },
    "1551": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1552": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%0#0",
        "\"box\""
      ]
    },
    "1553": {
      "op": "pushint 4110 // 4110",
      "defined_out": [
        "\"box\"",
        "4110",
        "aggregate%val_as_bytes%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%0#0",
        "\"box\"",
        "4110"
      ]
    },
    "1556": {
      "op": "uncover 2",
      "stack_out": [
        "index#0",
        "value#0",
        "\"box\"",
        "4110",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1558": {
      "op": "box_replace",
      "stack_out": [
        "index#0",
        "value#0"
      ]
    },
    "1559": {
      "op": "dup",
      "stack_out": [
        "index#0",
        "value#0",
        "value#0 (copy)"
      ]
    },
    "1560": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "index#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "value#0 (copy)",
        "2"
      ]
    },
    "1561": {
      "op": "+",
      "defined_out": [
        "index#0",
        "tmp%1#1",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "tmp%1#1"
      ]
    },
    "1562": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1563": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "\"box\""
      ]
    },
    "1564": {
      "op": "pushint 4136 // 4136",
      "defined_out": [
        "\"box\"",
        "4136",
        "aggregate%val_as_bytes%1#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "\"box\"",
        "4136"
      ]
    },
    "1567": {
      "op": "intc_0 // 2",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "\"box\"",
        "4136",
        "2"
      ]
    },
    "1568": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%box_extract%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%box_extract%0#0"
      ]
    },
    "1569": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%btoi%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%btoi%0#0"
      ]
    },
    "1570": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%btoi%0#0",
        "index#0",
        "index#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%btoi%0#0",
        "index#0 (copy)"
      ]
    },
    "1572": {
      "op": ">",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%index_ok%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%index_ok%0#0"
      ]
    },
    "1573": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1574": {
      "op": "intc_0 // 2",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "2"
      ]
    },
    "1575": {
      "op": "dig 3",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "2",
        "index#0 (copy)"
      ]
    },
    "1577": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0"
      ]
    },
    "1578": {
      "op": "intc 6 // 4138",
      "defined_out": [
        "4138",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "4138"
      ]
    },
    "1580": {
      "op": "dig 1",
      "defined_out": [
        "4138",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%mul%0#0 (copy)",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "4138",
        "box%mul%0#0 (copy)"
      ]
    },
    "1582": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%add%1#0",
        "box%mul%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%add%1#0"
      ]
    },
    "1583": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%add%1#0",
        "\"box\""
      ]
    },
    "1584": {
      "op": "swap",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "\"box\"",
        "box%add%1#0"
      ]
    },
    "1585": {
      "op": "intc_0 // 2",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "\"box\"",
        "box%add%1#0",
        "2"
      ]
    },
    "1586": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%box_extract%1#0",
        "box%mul%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%box_extract%1#0"
      ]
    },
    "1587": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%btoi%1#0",
        "box%mul%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%btoi%1#0"
      ]
    },
    "1588": {
      "op": "intc 6 // 4138",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%btoi%1#0",
        "4138"
      ]
    },
    "1590": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ]
    },
    "1591": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "\"box\""
      ]
    },
    "1592": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%offset%7#0 (copy)",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "\"box\"",
        "box%offset%7#0 (copy)"
      ]
    },
    "1594": {
      "op": "intc_0 // 2",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "\"box\"",
        "box%offset%7#0 (copy)",
        "2"
      ]
    },
    "1595": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%box_extract%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%box_extract%2#0"
      ]
    },
    "1596": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%btoi%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%btoi%2#0"
      ]
    },
    "1597": {
      "op": "dig 5",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%btoi%2#0",
        "index#0 (copy)"
      ]
    },
    "1599": {
      "op": ">",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%index_ok%1#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%index_ok%1#0"
      ]
    },
    "1600": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ]
    },
    "1601": {
      "op": "intc_0 // 2",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "2"
      ]
    },
    "1602": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%add%2#0",
        "box%mul%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%add%2#0"
      ]
    },
    "1603": {
      "op": "dig 4",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%add%2#0",
        "index#0 (copy)"
      ]
    },
    "1605": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%val_as_bytes%1#0",
        "box%add%2#0",
        "box%mul%0#0",
        "index#0",
        "index#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%add%2#0",
        "index#0 (copy)",
        "8"
      ]
    },
    "1606": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%add%2#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%add%2#0",
        "box%element_offset%0#0"
      ]
    },
    "1607": {
      "op": "swap",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "box%add%2#0"
      ]
    },
    "1608": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%add%2#0",
        "box%element_offset%0#0",
        "box%element_offset%0#0 (copy)",
        "box%mul%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "box%add%2#0",
        "box%element_offset%0#0 (copy)"
      ]
    },
    "1610": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%8#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "box%offset%8#0"
      ]
    },
    "1611": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "box%offset%8#0",
        "\"box\""
      ]
    },
    "1612": {
      "op": "swap",
      "stack_out": [
        "index#0",
        "value#0",
        "aggregate%val_as_bytes%1#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "\"box\"",
        "box%offset%8#0"
      ]
    },
    "1613": {
      "op": "uncover 4",
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "\"box\"",
        "box%offset%8#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1615": {
      "op": "box_replace",
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0"
      ]
    },
    "1616": {
      "op": "dig 2",
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "value#0 (copy)"
      ]
    },
    "1618": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "value#0 (copy)",
        "3"
      ]
    },
    "1620": {
      "op": "+",
      "defined_out": [
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0",
        "tmp%2#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "tmp%2#0"
      ]
    },
    "1621": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "1622": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%2#0",
        "\"box\""
      ]
    },
    "1623": {
      "op": "pushint 4118 // 4118",
      "defined_out": [
        "\"box\"",
        "4118",
        "aggregate%val_as_bytes%2#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%2#0",
        "\"box\"",
        "4118"
      ]
    },
    "1626": {
      "op": "uncover 2",
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "\"box\"",
        "4118",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "1628": {
      "op": "box_replace",
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0"
      ]
    },
    "1629": {
      "op": "dig 2",
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "value#0 (copy)"
      ]
    },
    "1631": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "value#0 (copy)",
        "4"
      ]
    },
    "1633": {
      "op": "+",
      "defined_out": [
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0",
        "tmp%3#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "tmp%3#0"
      ]
    },
    "1634": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%3#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "1635": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%3#0",
        "\"box\""
      ]
    },
    "1636": {
      "op": "pushint 4128 // 4128",
      "defined_out": [
        "\"box\"",
        "4128",
        "aggregate%val_as_bytes%3#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%3#0",
        "\"box\"",
        "4128"
      ]
    },
    "1639": {
      "op": "uncover 2",
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "\"box\"",
        "4128",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "1641": {
      "op": "box_replace",
      "stack_out": [
        "index#0",
        "value#0",
        "box%mul%0#0",
        "box%element_offset%0#0"
      ]
    },
    "1642": {
      "op": "uncover 2",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "value#0"
      ]
    },
    "1644": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "value#0",
        "5"
      ]
    },
    "1646": {
      "op": "+",
      "defined_out": [
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "tmp%4#0"
      ]
    },
    "1647": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "1648": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "\"box\""
      ]
    },
    "1649": {
      "op": "pushint 4108 // 4108",
      "defined_out": [
        "\"box\"",
        "4108",
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "\"box\"",
        "4108"
      ]
    },
    "1652": {
      "op": "intc_0 // 2",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "\"box\"",
        "4108",
        "2"
      ]
    },
    "1653": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%box_extract%3#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%box_extract%3#0"
      ]
    },
    "1654": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%btoi%3#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%btoi%3#0"
      ]
    },
    "1655": {
      "op": "intc 5 // 4098",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%btoi%3#0",
        "4098"
      ]
    },
    "1657": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%16#0"
      ]
    },
    "1658": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%16#0",
        "\"box\""
      ]
    },
    "1659": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "box%offset%16#0 (copy)",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%16#0",
        "\"box\"",
        "box%offset%16#0 (copy)"
      ]
    },
    "1661": {
      "op": "intc_0 // 2",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%16#0",
        "\"box\"",
        "box%offset%16#0 (copy)",
        "2"
      ]
    },
    "1662": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%box_extract%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%16#0",
        "box%box_extract%4#0"
      ]
    },
    "1663": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%btoi%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%16#0",
        "box%btoi%4#0"
      ]
    },
    "1664": {
      "op": "dig 5",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%16#0",
        "box%btoi%4#0",
        "index#0 (copy)"
      ]
    },
    "1666": {
      "op": ">",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%index_ok%2#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%16#0",
        "box%index_ok%2#0"
      ]
    },
    "1667": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%16#0"
      ]
    },
    "1668": {
      "op": "intc_0 // 2",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%16#0",
        "2"
      ]
    },
    "1669": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0"
      ]
    },
    "1670": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0",
        "box%add%4#0 (copy)",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0",
        "box%add%4#0 (copy)"
      ]
    },
    "1671": {
      "op": "dig 4",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0",
        "box%add%4#0 (copy)",
        "box%mul%0#0 (copy)"
      ]
    },
    "1673": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0",
        "box%add%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0",
        "box%add%5#0"
      ]
    },
    "1674": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0",
        "box%add%5#0",
        "\"box\""
      ]
    },
    "1675": {
      "op": "swap",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0",
        "\"box\"",
        "box%add%5#0"
      ]
    },
    "1676": {
      "op": "intc_0 // 2",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0",
        "\"box\"",
        "box%add%5#0",
        "2"
      ]
    },
    "1677": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0",
        "box%box_extract%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0",
        "box%box_extract%5#0"
      ]
    },
    "1678": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0",
        "box%btoi%5#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%4#0",
        "box%btoi%5#0"
      ]
    },
    "1679": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%17#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%17#0"
      ]
    },
    "1680": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%17#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%17#0",
        "18"
      ]
    },
    "1682": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%18#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%18#0"
      ]
    },
    "1683": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%18#0",
        "\"box\""
      ]
    },
    "1684": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%18#0",
        "box%offset%18#0 (copy)",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%18#0",
        "\"box\"",
        "box%offset%18#0 (copy)"
      ]
    },
    "1686": {
      "op": "intc_0 // 2",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%18#0",
        "\"box\"",
        "box%offset%18#0 (copy)",
        "2"
      ]
    },
    "1687": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%box_extract%6#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%18#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%18#0",
        "box%box_extract%6#0"
      ]
    },
    "1688": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%btoi%6#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "box%offset%18#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%18#0",
        "box%btoi%6#0"
      ]
    },
    "1689": {
      "op": "dig 5",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%18#0",
        "box%btoi%6#0",
        "index#0 (copy)"
      ]
    },
    "1691": {
      "op": ">",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%index_ok%3#0",
        "box%mul%0#0",
        "box%offset%18#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%18#0",
        "box%index_ok%3#0"
      ]
    },
    "1692": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%18#0"
      ]
    },
    "1693": {
      "op": "intc_0 // 2",
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%18#0",
        "2"
      ]
    },
    "1694": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0"
      ]
    },
    "1695": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0",
        "box%add%6#0 (copy)",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%mul%0#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0",
        "box%add%6#0 (copy)"
      ]
    },
    "1696": {
      "op": "uncover 4",
      "stack_out": [
        "index#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0",
        "box%add%6#0 (copy)",
        "box%mul%0#0"
      ]
    },
    "1698": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0",
        "box%add%7#0",
        "box%element_offset%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0",
        "box%add%7#0"
      ]
    },
    "1699": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "index#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0",
        "box%add%7#0",
        "\"box\""
      ]
    },
    "1700": {
      "op": "swap",
      "stack_out": [
        "index#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0",
        "\"box\"",
        "box%add%7#0"
      ]
    },
    "1701": {
      "op": "intc_0 // 2",
      "stack_out": [
        "index#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0",
        "\"box\"",
        "box%add%7#0",
        "2"
      ]
    },
    "1702": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0",
        "box%box_extract%7#0",
        "box%element_offset%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0",
        "box%box_extract%7#0"
      ]
    },
    "1703": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0",
        "box%btoi%7#0",
        "box%element_offset%0#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%6#0",
        "box%btoi%7#0"
      ]
    },
    "1704": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%offset%19#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%19#0"
      ]
    },
    "1705": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "index#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%19#0",
        "\"box\""
      ]
    },
    "1706": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%offset%19#0",
        "box%offset%19#0 (copy)",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%19#0",
        "\"box\"",
        "box%offset%19#0 (copy)"
      ]
    },
    "1708": {
      "op": "intc_0 // 2",
      "stack_out": [
        "index#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%19#0",
        "\"box\"",
        "box%offset%19#0 (copy)",
        "2"
      ]
    },
    "1709": {
      "op": "box_extract",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%box_extract%8#0",
        "box%element_offset%0#0",
        "box%offset%19#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%19#0",
        "box%box_extract%8#0"
      ]
    },
    "1710": {
      "op": "btoi",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%btoi%8#0",
        "box%element_offset%0#0",
        "box%offset%19#0",
        "index#0"
      ],
      "stack_out": [
        "index#0",
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%19#0",
        "box%btoi%8#0"
      ]
    },
    "1711": {
      "op": "uncover 4",
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%19#0",
        "box%btoi%8#0",
        "index#0"
      ]
    },
    "1713": {
      "op": ">",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%element_offset%0#0",
        "box%index_ok%4#0",
        "box%offset%19#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%19#0",
        "box%index_ok%4#0"
      ]
    },
    "1714": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%19#0"
      ]
    },
    "1715": {
      "op": "intc_0 // 2",
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%offset%19#0",
        "2"
      ]
    },
    "1716": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%add%8#0",
        "box%element_offset%0#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "aggregate%val_as_bytes%4#0",
        "box%add%8#0"
      ]
    },
    "1717": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%val_as_bytes%4#0",
        "box%add%8#0",
        "box%element_offset%0#0"
      ]
    },
    "1719": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "box%offset%20#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%4#0",
        "box%offset%20#0"
      ]
    },
    "1720": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "aggregate%val_as_bytes%4#0",
        "box%offset%20#0",
        "\"box\""
      ]
    },
    "1721": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%4#0",
        "\"box\"",
        "box%offset%20#0"
      ]
    },
    "1722": {
      "op": "uncover 2",
      "stack_out": [
        "\"box\"",
        "box%offset%20#0",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "1724": {
      "op": "box_replace",
      "stack_out": []
    },
    "1725": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1726": {
      "op": "return",
      "stack_out": []
    },
    "1727": {
      "subroutine": "examples.box_storage.contract.BoxContract.nested_read[routing]",
      "params": {},
      "block": "nested_read",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "1730": {
      "op": "btoi",
      "defined_out": [
        "i1#0"
      ],
      "stack_out": [
        "i1#0"
      ]
    },
    "1731": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "i1#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "i1#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "1734": {
      "op": "btoi",
      "defined_out": [
        "i1#0",
        "i2#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0"
      ]
    },
    "1735": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "i1#0",
        "i2#0",
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "1738": {
      "op": "btoi",
      "defined_out": [
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0"
      ]
    },
    "1739": {
      "op": "bytec_1 // \"box\"",
      "defined_out": [
        "\"box\"",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "\"box\""
      ]
    },
    "1740": {
      "op": "intc 5 // 4098",
      "defined_out": [
        "\"box\"",
        "4098",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "\"box\"",
        "4098"
      ]
    },
    "1742": {
      "op": "intc_2 // 8",
      "defined_out": [
        "\"box\"",
        "4098",
        "8",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "\"box\"",
        "4098",
        "8"
      ]
    },
    "1743": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "box%box_extract%0#0"
      ]
    },
    "1744": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0"
      ]
    },
    "1745": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "\"box\""
      ]
    },
    "1746": {
      "op": "pushint 4110 // 4110",
      "defined_out": [
        "\"box\"",
        "4110",
        "a#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "\"box\"",
        "4110"
      ]
    },
    "1749": {
      "op": "intc_2 // 8",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "\"box\"",
        "4110",
        "8"
      ]
    },
    "1750": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "box%box_extract%1#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "box%box_extract%1#0"
      ]
    },
    "1751": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0"
      ]
    },
    "1752": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "\"box\""
      ]
    },
    "1753": {
      "op": "pushint 4136 // 4136",
      "defined_out": [
        "\"box\"",
        "4136",
        "a#0",
        "b#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "\"box\"",
        "4136"
      ]
    },
    "1756": {
      "op": "intc_0 // 2",
      "defined_out": [
        "\"box\"",
        "2",
        "4136",
        "a#0",
        "b#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "\"box\"",
        "4136",
        "2"
      ]
    },
    "1757": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "b#0",
        "box%box_extract%2#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%box_extract%2#0"
      ]
    },
    "1758": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "box%btoi%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%btoi%0#0"
      ]
    },
    "1759": {
      "op": "dig 5",
      "defined_out": [
        "a#0",
        "b#0",
        "box%btoi%0#0",
        "i1#0",
        "i1#0 (copy)",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%btoi%0#0",
        "i1#0 (copy)"
      ]
    },
    "1761": {
      "op": ">",
      "defined_out": [
        "a#0",
        "b#0",
        "box%index_ok%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%index_ok%0#0"
      ]
    },
    "1762": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0"
      ]
    },
    "1763": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "2"
      ]
    },
    "1764": {
      "op": "dig 5",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "2",
        "i1#0 (copy)"
      ]
    },
    "1766": {
      "op": "*",
      "defined_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0"
      ]
    },
    "1767": {
      "op": "intc 6 // 4138",
      "defined_out": [
        "4138",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "4138"
      ]
    },
    "1769": {
      "op": "dig 1",
      "defined_out": [
        "4138",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%mul%0#0 (copy)",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "4138",
        "box%mul%0#0 (copy)"
      ]
    },
    "1771": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "box%add%1#0",
        "box%mul%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%add%1#0"
      ]
    },
    "1772": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%add%1#0",
        "\"box\""
      ]
    },
    "1773": {
      "op": "swap",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "\"box\"",
        "box%add%1#0"
      ]
    },
    "1774": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "\"box\"",
        "box%add%1#0",
        "2"
      ]
    },
    "1775": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "b#0",
        "box%box_extract%3#0",
        "box%mul%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%box_extract%3#0"
      ]
    },
    "1776": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "box%btoi%1#0",
        "box%mul%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%btoi%1#0"
      ]
    },
    "1777": {
      "op": "intc 6 // 4138",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%btoi%1#0",
        "4138"
      ]
    },
    "1779": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ]
    },
    "1780": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "\"box\""
      ]
    },
    "1781": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%offset%7#0 (copy)",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "\"box\"",
        "box%offset%7#0 (copy)"
      ]
    },
    "1783": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "\"box\"",
        "box%offset%7#0 (copy)",
        "2"
      ]
    },
    "1784": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "b#0",
        "box%box_extract%4#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%box_extract%4#0"
      ]
    },
    "1785": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "box%btoi%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%btoi%2#0"
      ]
    },
    "1786": {
      "op": "dig 6",
      "defined_out": [
        "a#0",
        "b#0",
        "box%btoi%2#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "i1#0",
        "i2#0",
        "i2#0 (copy)",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%btoi%2#0",
        "i2#0 (copy)"
      ]
    },
    "1788": {
      "op": ">",
      "defined_out": [
        "a#0",
        "b#0",
        "box%index_ok%1#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "box%index_ok%1#0"
      ]
    },
    "1789": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0"
      ]
    },
    "1790": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%7#0",
        "2"
      ]
    },
    "1791": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "box%add%2#0",
        "box%mul%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%add%2#0"
      ]
    },
    "1792": {
      "op": "dig 5",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%add%2#0",
        "i2#0 (copy)"
      ]
    },
    "1794": {
      "op": "intc_2 // 8",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%add%2#0",
        "i2#0 (copy)",
        "8"
      ]
    },
    "1795": {
      "op": "*",
      "defined_out": [
        "a#0",
        "b#0",
        "box%add%2#0",
        "box%element_offset%0#0",
        "box%mul%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%add%2#0",
        "box%element_offset%0#0"
      ]
    },
    "1796": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%8#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%8#0"
      ]
    },
    "1797": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%8#0",
        "\"box\""
      ]
    },
    "1798": {
      "op": "swap",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "\"box\"",
        "box%offset%8#0"
      ]
    },
    "1799": {
      "op": "intc_2 // 8",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "\"box\"",
        "box%offset%8#0",
        "8"
      ]
    },
    "1800": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "b#0",
        "box%box_extract%5#0",
        "box%mul%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "box%box_extract%5#0"
      ]
    },
    "1801": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0"
      ]
    },
    "1802": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "\"box\""
      ]
    },
    "1803": {
      "op": "pushint 4118 // 4118",
      "defined_out": [
        "\"box\"",
        "4118",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "\"box\"",
        "4118"
      ]
    },
    "1806": {
      "op": "intc_2 // 8",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "\"box\"",
        "4118",
        "8"
      ]
    },
    "1807": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%6#0",
        "box%mul%0#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "box%box_extract%6#0"
      ]
    },
    "1808": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "c#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0"
      ]
    },
    "1809": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "\"box\""
      ]
    },
    "1810": {
      "op": "pushint 4128 // 4128",
      "defined_out": [
        "\"box\"",
        "4128",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "c#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "\"box\"",
        "4128"
      ]
    },
    "1813": {
      "op": "intc_2 // 8",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "\"box\"",
        "4128",
        "8"
      ]
    },
    "1814": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%7#0",
        "box%mul%0#0",
        "c#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "box%box_extract%7#0"
      ]
    },
    "1815": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "c#0",
        "d#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0"
      ]
    },
    "1816": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "\"box\""
      ]
    },
    "1817": {
      "op": "pushint 4108 // 4108",
      "defined_out": [
        "\"box\"",
        "4108",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "c#0",
        "d#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "\"box\"",
        "4108"
      ]
    },
    "1820": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "\"box\"",
        "4108",
        "2"
      ]
    },
    "1821": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%8#0",
        "box%mul%0#0",
        "c#0",
        "d#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%box_extract%8#0"
      ]
    },
    "1822": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%btoi%3#0",
        "box%mul%0#0",
        "c#0",
        "d#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%btoi%3#0"
      ]
    },
    "1823": {
      "op": "intc 5 // 4098",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%btoi%3#0",
        "4098"
      ]
    },
    "1825": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "c#0",
        "d#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0"
      ]
    },
    "1826": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "\"box\""
      ]
    },
    "1827": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "box%offset%16#0 (copy)",
        "c#0",
        "d#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "\"box\"",
        "box%offset%16#0 (copy)"
      ]
    },
    "1829": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "\"box\"",
        "box%offset%16#0 (copy)",
        "2"
      ]
    },
    "1830": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%9#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "c#0",
        "d#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "box%box_extract%9#0"
      ]
    },
    "1831": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%btoi%4#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "c#0",
        "d#0",
        "i1#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i1#0",
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "box%btoi%4#0"
      ]
    },
    "1832": {
      "op": "uncover 10",
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "box%btoi%4#0",
        "i1#0"
      ]
    },
    "1834": {
      "op": ">",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%index_ok%2#0",
        "box%mul%0#0",
        "box%offset%16#0",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "box%index_ok%2#0"
      ]
    },
    "1835": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0"
      ]
    },
    "1836": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%16#0",
        "2"
      ]
    },
    "1837": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%4#0",
        "box%mul%0#0",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0"
      ]
    },
    "1838": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%4#0",
        "box%add%4#0 (copy)",
        "box%mul%0#0",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "box%mul%0#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "box%add%4#0 (copy)"
      ]
    },
    "1839": {
      "op": "uncover 5",
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "box%add%4#0 (copy)",
        "box%mul%0#0"
      ]
    },
    "1841": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%4#0",
        "box%add%5#0",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "box%add%5#0"
      ]
    },
    "1842": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "box%add%5#0",
        "\"box\""
      ]
    },
    "1843": {
      "op": "swap",
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "\"box\"",
        "box%add%5#0"
      ]
    },
    "1844": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "\"box\"",
        "box%add%5#0",
        "2"
      ]
    },
    "1845": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%4#0",
        "box%box_extract%10#0",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "box%box_extract%10#0"
      ]
    },
    "1846": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%4#0",
        "box%btoi%5#0",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%4#0",
        "box%btoi%5#0"
      ]
    },
    "1847": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%17#0",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%17#0"
      ]
    },
    "1848": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%17#0",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%17#0",
        "18"
      ]
    },
    "1850": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%18#0",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0"
      ]
    },
    "1851": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "\"box\""
      ]
    },
    "1852": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%18#0",
        "box%offset%18#0 (copy)",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "\"box\"",
        "box%offset%18#0 (copy)"
      ]
    },
    "1854": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "\"box\"",
        "box%offset%18#0 (copy)",
        "2"
      ]
    },
    "1855": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%11#0",
        "box%offset%18#0",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "box%box_extract%11#0"
      ]
    },
    "1856": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%btoi%6#0",
        "box%offset%18#0",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "box%btoi%6#0"
      ]
    },
    "1857": {
      "op": "dig 8",
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "box%btoi%6#0",
        "i2#0 (copy)"
      ]
    },
    "1859": {
      "op": ">",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%index_ok%3#0",
        "box%offset%18#0",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "box%index_ok%3#0"
      ]
    },
    "1860": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0"
      ]
    },
    "1861": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%18#0",
        "2"
      ]
    },
    "1862": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%6#0",
        "c#0",
        "d#0",
        "i2#0",
        "i3#0"
      ],
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0"
      ]
    },
    "1863": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i2#0",
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "2"
      ]
    },
    "1864": {
      "op": "uncover 8",
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "2",
        "i2#0"
      ]
    },
    "1866": {
      "op": "*",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%6#0",
        "box%mul%2#0",
        "c#0",
        "d#0",
        "i3#0"
      ],
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "box%mul%2#0"
      ]
    },
    "1867": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%6#0",
        "box%add%6#0 (copy)",
        "box%mul%2#0",
        "c#0",
        "d#0",
        "i3#0"
      ],
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "box%mul%2#0",
        "box%add%6#0 (copy)"
      ]
    },
    "1869": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%6#0",
        "box%add%7#0",
        "c#0",
        "d#0",
        "i3#0"
      ],
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "box%add%7#0"
      ]
    },
    "1870": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "box%add%7#0",
        "\"box\""
      ]
    },
    "1871": {
      "op": "swap",
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "\"box\"",
        "box%add%7#0"
      ]
    },
    "1872": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "\"box\"",
        "box%add%7#0",
        "2"
      ]
    },
    "1873": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%6#0",
        "box%box_extract%12#0",
        "c#0",
        "d#0",
        "i3#0"
      ],
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "box%box_extract%12#0"
      ]
    },
    "1874": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%6#0",
        "box%btoi%7#0",
        "c#0",
        "d#0",
        "i3#0"
      ],
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%6#0",
        "box%btoi%7#0"
      ]
    },
    "1875": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%19#0",
        "c#0",
        "d#0",
        "i3#0"
      ],
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0"
      ]
    },
    "1876": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "\"box\""
      ]
    },
    "1877": {
      "op": "dig 1",
      "defined_out": [
        "\"box\"",
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%19#0",
        "box%offset%19#0 (copy)",
        "c#0",
        "d#0",
        "i3#0"
      ],
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "\"box\"",
        "box%offset%19#0 (copy)"
      ]
    },
    "1879": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "\"box\"",
        "box%offset%19#0 (copy)",
        "2"
      ]
    },
    "1880": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%13#0",
        "box%offset%19#0",
        "c#0",
        "d#0",
        "i3#0"
      ],
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "box%box_extract%13#0"
      ]
    },
    "1881": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%btoi%8#0",
        "box%offset%19#0",
        "c#0",
        "d#0",
        "i3#0"
      ],
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "box%btoi%8#0"
      ]
    },
    "1882": {
      "op": "dig 7",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%btoi%8#0",
        "box%offset%19#0",
        "c#0",
        "d#0",
        "i3#0",
        "i3#0 (copy)"
      ],
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "box%btoi%8#0",
        "i3#0 (copy)"
      ]
    },
    "1884": {
      "op": ">",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%index_ok%4#0",
        "box%offset%19#0",
        "c#0",
        "d#0",
        "i3#0"
      ],
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "box%index_ok%4#0"
      ]
    },
    "1885": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0"
      ]
    },
    "1886": {
      "op": "intc_0 // 2",
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%19#0",
        "2"
      ]
    },
    "1887": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%8#0",
        "c#0",
        "d#0",
        "i3#0"
      ],
      "stack_out": [
        "i3#0",
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%8#0"
      ]
    },
    "1888": {
      "op": "uncover 6",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%8#0",
        "i3#0"
      ]
    },
    "1890": {
      "op": "intc_2 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%8#0",
        "i3#0",
        "8"
      ]
    },
    "1891": {
      "op": "*",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%add%8#0",
        "box%element_offset%1#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%add%8#0",
        "box%element_offset%1#0"
      ]
    },
    "1892": {
      "op": "+",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%offset%20#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%20#0"
      ]
    },
    "1893": {
      "op": "bytec_1 // \"box\"",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%offset%20#0",
        "\"box\""
      ]
    },
    "1894": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "\"box\"",
        "box%offset%20#0"
      ]
    },
    "1895": {
      "op": "intc_2 // 8",
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "\"box\"",
        "box%offset%20#0",
        "8"
      ]
    },
    "1896": {
      "op": "box_extract",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "box%box_extract%14#0",
        "c#0",
        "d#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "box%box_extract%14#0"
      ]
    },
    "1897": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "arr_arr#0",
        "b#0",
        "c#0",
        "d#0",
        "woah_arr_arr#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "woah_arr_arr#0"
      ]
    },
    "1898": {
      "op": "uncover 5",
      "stack_out": [
        "b#0",
        "arr_arr#0",
        "c#0",
        "d#0",
        "woah_arr_arr#0",
        "a#0"
      ]
    },
    "1900": {
      "op": "uncover 5",
      "stack_out": [
        "arr_arr#0",
        "c#0",
        "d#0",
        "woah_arr_arr#0",
        "a#0",
        "b#0"
      ]
    },
    "1902": {
      "op": "+",
      "defined_out": [
        "arr_arr#0",
        "c#0",
        "d#0",
        "tmp%0#1",
        "woah_arr_arr#0"
      ],
      "stack_out": [
        "arr_arr#0",
        "c#0",
        "d#0",
        "woah_arr_arr#0",
        "tmp%0#1"
      ]
    },
    "1903": {
      "op": "uncover 4",
      "stack_out": [
        "c#0",
        "d#0",
        "woah_arr_arr#0",
        "tmp%0#1",
        "arr_arr#0"
      ]
    },
    "1905": {
      "op": "+",
      "defined_out": [
        "c#0",
        "d#0",
        "tmp%1#1",
        "woah_arr_arr#0"
      ],
      "stack_out": [
        "c#0",
        "d#0",
        "woah_arr_arr#0",
        "tmp%1#1"
      ]
    },
    "1906": {
      "op": "uncover 3",
      "stack_out": [
        "d#0",
        "woah_arr_arr#0",
        "tmp%1#1",
        "c#0"
      ]
    },
    "1908": {
      "op": "+",
      "defined_out": [
        "d#0",
        "tmp%2#1",
        "woah_arr_arr#0"
      ],
      "stack_out": [
        "d#0",
        "woah_arr_arr#0",
        "tmp%2#1"
      ]
    },
    "1909": {
      "op": "uncover 2",
      "stack_out": [
        "woah_arr_arr#0",
        "tmp%2#1",
        "d#0"
      ]
    },
    "1911": {
      "op": "+",
      "defined_out": [
        "tmp%3#1",
        "woah_arr_arr#0"
      ],
      "stack_out": [
        "woah_arr_arr#0",
        "tmp%3#1"
      ]
    },
    "1912": {
      "op": "+",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "1913": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1914": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1916": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1917": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1918": {
      "op": "log",
      "stack_out": []
    },
    "1919": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1920": {
      "op": "return",
      "stack_out": []
    },
    "1921": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct[routing]",
      "params": {},
      "block": "sum_dynamic_arr_struct",
      "stack_in": [],
      "op": "pushbytes \"\"",
      "stack_out": [
        "box%array_length%1#0"
      ]
    },
    "1923": {
      "op": "dup",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ]
    },
    "1924": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1925": {
      "op": "intc_3 // 0",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\"",
        "0"
      ]
    },
    "1926": {
      "op": "intc_2 // 8",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "0",
        "8"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\"",
        "0",
        "8"
      ]
    },
    "1927": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "box%box_extract%0#0"
      ]
    },
    "1928": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0"
      ]
    },
    "1929": {
      "op": "dup",
      "defined_out": [
        "values%0#0",
        "values%0#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%0#0 (copy)"
      ]
    },
    "1930": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "values%0#0",
        "values%0#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%0#0 (copy)",
        "1"
      ]
    },
    "1931": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "values%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "tmp%0#1"
      ]
    },
    "1932": {
      "error": "expected 1",
      "op": "assert // expected 1",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0"
      ]
    },
    "1933": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1934": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "10",
        "values%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "\"dynamic_arr_struct\"",
        "10"
      ]
    },
    "1936": {
      "op": "intc_2 // 8",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "\"dynamic_arr_struct\"",
        "10",
        "8"
      ]
    },
    "1937": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "box%box_extract%1#0"
      ]
    },
    "1938": {
      "op": "btoi",
      "defined_out": [
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0"
      ]
    },
    "1939": {
      "op": "dup",
      "defined_out": [
        "values%0#0",
        "values%1#0",
        "values%1#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0",
        "values%1#0 (copy)"
      ]
    },
    "1940": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "values%0#0",
        "values%1#0",
        "values%1#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0",
        "values%1#0 (copy)",
        "2"
      ]
    },
    "1941": {
      "op": "==",
      "defined_out": [
        "tmp%1#1",
        "values%0#0",
        "values%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0",
        "tmp%1#1"
      ]
    },
    "1942": {
      "error": "expected 2",
      "op": "assert // expected 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "values%0#0",
        "values%1#0"
      ]
    },
    "1943": {
      "op": "+",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0"
      ]
    },
    "1944": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1945": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1947": {
      "op": "intc_0 // 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1948": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%4#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%box_extract%4#0"
      ]
    },
    "1949": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0"
      ]
    },
    "1950": {
      "op": "intc_3 // 0",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1951": {
      "block": "sum_dynamic_arr_struct_for_header@2",
      "stack_in": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1952": {
      "op": "dig 2",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%array_length%0#0"
      ]
    },
    "1954": {
      "op": "<",
      "defined_out": [
        "box%array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "1955": {
      "op": "bz sum_dynamic_arr_struct_after_for@5",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1958": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1959": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "1961": {
      "op": "intc_0 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "2",
        "20",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "1962": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%0#0",
        "box%box_extract%5#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%box_extract%5#0"
      ]
    },
    "1963": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "box%btoi%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%0#0"
      ]
    },
    "1964": {
      "op": "dig 1",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1966": {
      "op": "dup"
    },
    "1967": {
      "op": "uncover 2",
      "defined_out": [
        "box%array_length%0#0",
        "box%btoi%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "box%btoi%0#0"
      ]
    },
    "1969": {
      "op": "<",
      "defined_out": [
        "box%array_length%0#0",
        "box%index_ok%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%index_ok%0#0"
      ]
    },
    "1970": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1971": {
      "op": "dup",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "1972": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "8"
      ]
    },
    "1973": {
      "op": "*",
      "defined_out": [
        "box%array_length%0#0",
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0"
      ]
    },
    "1974": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "box%array_length%0#0",
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0",
        "22"
      ]
    },
    "1976": {
      "op": "+",
      "defined_out": [
        "box%array_length%0#0",
        "box%offset%6#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%offset%6#0"
      ]
    },
    "1977": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%offset%6#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1978": {
      "op": "swap",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "box%offset%6#0"
      ]
    },
    "1979": {
      "op": "intc_2 // 8",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "box%offset%6#0",
        "8"
      ]
    },
    "1980": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%0#0",
        "box%box_extract%6#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%box_extract%6#0"
      ]
    },
    "1981": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "val#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "val#0"
      ]
    },
    "1982": {
      "op": "dig 4",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "val#0",
        "total#0"
      ]
    },
    "1984": {
      "op": "+",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1985": {
      "op": "bury 4",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1987": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "1988": {
      "op": "+",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1989": {
      "op": "bury 1",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1991": {
      "op": "b sum_dynamic_arr_struct_for_header@2"
    },
    "1994": {
      "block": "sum_dynamic_arr_struct_after_for@5",
      "stack_in": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1995": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "1997": {
      "op": "intc_0 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "1998": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%7#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%box_extract%7#0"
      ]
    },
    "1999": {
      "op": "btoi",
      "defined_out": [
        "box%btoi%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%1#0"
      ]
    },
    "2000": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2001": {
      "op": "swap",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%1#0"
      ]
    },
    "2002": {
      "op": "intc_0 // 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "box%btoi%1#0",
        "2"
      ]
    },
    "2003": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%8#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%box_extract%8#0"
      ]
    },
    "2004": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%array_length%1#0"
      ]
    },
    "2005": {
      "op": "bury 5",
      "defined_out": [
        "box%array_length%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2007": {
      "op": "intc_3 // 0",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0"
      ]
    },
    "2008": {
      "op": "bury 4",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2010": {
      "block": "sum_dynamic_arr_struct_for_header@6",
      "stack_in": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0"
      ]
    },
    "2012": {
      "op": "dig 5",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%array_length%1#0"
      ]
    },
    "2014": {
      "op": "<",
      "defined_out": [
        "box%array_length%1#0",
        "continue_looping%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%1#0"
      ]
    },
    "2015": {
      "op": "bz sum_dynamic_arr_struct_after_for@9",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2018": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2019": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "18"
      ]
    },
    "2021": {
      "op": "intc_0 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "18",
        "2",
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "\"dynamic_arr_struct\"",
        "18",
        "2"
      ]
    },
    "2022": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%1#0",
        "box%box_extract%9#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%box_extract%9#0"
      ]
    },
    "2023": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%1#0",
        "box%btoi%2#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%2#0"
      ]
    },
    "2024": {
      "op": "intc_0 // 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%btoi%2#0",
        "2"
      ]
    },
    "2025": {
      "op": "+",
      "defined_out": [
        "box%add%3#0",
        "box%array_length%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%add%3#0"
      ]
    },
    "2026": {
      "op": "dig 4",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%add%3#0",
        "item_index_internal%1#0"
      ]
    },
    "2028": {
      "op": "dup",
      "defined_out": [
        "box%add%3#0",
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "item_index_internal%1#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "box%add%3#0",
        "item_index_internal%1#0 (copy)",
        "item_index_internal%1#0 (copy)"
      ]
    },
    "2029": {
      "op": "cover 2",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%add%3#0",
        "item_index_internal%1#0 (copy)"
      ]
    },
    "2031": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "box%add%3#0",
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "item_index_internal%1#0 (copy)"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%add%3#0",
        "item_index_internal%1#0 (copy)",
        "8"
      ]
    },
    "2032": {
      "op": "*",
      "defined_out": [
        "box%add%3#0",
        "box%array_length%1#0",
        "box%element_offset%1#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%add%3#0",
        "box%element_offset%1#0"
      ]
    },
    "2033": {
      "op": "+",
      "defined_out": [
        "box%array_length%1#0",
        "box%offset%9#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%offset%9#0"
      ]
    },
    "2034": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%offset%9#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2035": {
      "op": "swap",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\"",
        "box%offset%9#0"
      ]
    },
    "2036": {
      "op": "intc_2 // 8",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "\"dynamic_arr_struct\"",
        "box%offset%9#0",
        "8"
      ]
    },
    "2037": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%1#0",
        "box%box_extract%10#0",
        "item_index_internal%1#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "box%box_extract%10#0"
      ]
    },
    "2038": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "val#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "val#0"
      ]
    },
    "2039": {
      "op": "dig 4",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "val#0",
        "total#0"
      ]
    },
    "2041": {
      "op": "+",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "total#0"
      ]
    },
    "2042": {
      "op": "bury 4",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0"
      ]
    },
    "2044": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0",
        "1"
      ]
    },
    "2045": {
      "op": "+",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%1#0"
      ]
    },
    "2046": {
      "op": "bury 4",
      "defined_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2048": {
      "op": "b sum_dynamic_arr_struct_for_header@6"
    },
    "2051": {
      "block": "sum_dynamic_arr_struct_after_for@9",
      "stack_in": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2053": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2054": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "2056": {
      "op": "swap",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2057": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "tmp%2#0"
      ]
    },
    "2058": {
      "op": "log",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2059": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "total#0"
      ],
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "2060": {
      "op": "return",
      "stack_out": [
        "box%array_length%1#0",
        "item_index_internal%1#0",
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2061": {
      "subroutine": "examples.box_storage.contract.BoxContract.set_bool[routing]",
      "params": {},
      "block": "set_bool",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "2064": {
      "op": "btoi",
      "defined_out": [
        "index#0"
      ],
      "stack_out": [
        "index#0"
      ]
    },
    "2065": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "index#0",
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "2068": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "index#0",
        "reinterpret_Encoded(bool8)%0#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "2069": {
      "op": "getbit",
      "defined_out": [
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0"
      ]
    },
    "2070": {
      "op": "dig 1",
      "defined_out": [
        "index#0",
        "index#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "index#0 (copy)"
      ]
    },
    "2072": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "index#0",
        "index#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "index#0 (copy)",
        "8"
      ]
    },
    "2073": {
      "op": "/",
      "defined_out": [
        "box%element_byte_offset%0#0",
        "index#0",
        "value#0"
      ],
      "stack_out": [
        "index#0",
        "value#0",
        "box%element_byte_offset%0#0"
      ]
    },
    "2074": {
      "op": "uncover 2",
      "stack_out": [
        "value#0",
        "box%element_byte_offset%0#0",
        "index#0"
      ]
    },
    "2076": {
      "op": "intc_2 // 8",
      "stack_out": [
        "value#0",
        "box%element_byte_offset%0#0",
        "index#0",
        "8"
      ]
    },
    "2077": {
      "op": "%",
      "defined_out": [
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0"
      ]
    },
    "2078": {
      "op": "bytec 10 // \"too_many_bools\"",
      "defined_out": [
        "\"too_many_bools\"",
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "\"too_many_bools\""
      ]
    },
    "2080": {
      "op": "dig 2",
      "defined_out": [
        "\"too_many_bools\"",
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0",
        "box%element_byte_offset%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "\"too_many_bools\"",
        "box%element_byte_offset%0#0 (copy)"
      ]
    },
    "2082": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"too_many_bools\"",
        "1",
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0",
        "box%element_byte_offset%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "\"too_many_bools\"",
        "box%element_byte_offset%0#0 (copy)",
        "1"
      ]
    },
    "2083": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "box%box_extract%0#0"
      ]
    },
    "2084": {
      "op": "dig 1",
      "defined_out": [
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0",
        "box%element_bit_offset%0#0 (copy)",
        "box%element_byte_offset%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0 (copy)"
      ]
    },
    "2086": {
      "op": "intc_2 // 8",
      "stack_out": [
        "value#0",
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0 (copy)",
        "8"
      ]
    },
    "2087": {
      "op": "<",
      "defined_out": [
        "aggregate%lt%0#0",
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "box%box_extract%0#0",
        "aggregate%lt%0#0"
      ]
    },
    "2088": {
      "error": "index access is out of bounds",
      "op": "assert // index access is out of bounds",
      "stack_out": [
        "value#0",
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "box%box_extract%0#0"
      ]
    },
    "2089": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "box%element_byte_offset%0#0",
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0"
      ]
    },
    "2090": {
      "op": "uncover 3",
      "stack_out": [
        "box%element_byte_offset%0#0",
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0",
        "value#0"
      ]
    },
    "2092": {
      "op": "setbit",
      "defined_out": [
        "aggregate%updated_target%0#0",
        "box%element_byte_offset%0#0"
      ],
      "stack_out": [
        "box%element_byte_offset%0#0",
        "aggregate%updated_target%0#0"
      ]
    },
    "2093": {
      "op": "bytec 10 // \"too_many_bools\"",
      "stack_out": [
        "box%element_byte_offset%0#0",
        "aggregate%updated_target%0#0",
        "\"too_many_bools\""
      ]
    },
    "2095": {
      "op": "cover 2",
      "stack_out": [
        "\"too_many_bools\"",
        "box%element_byte_offset%0#0",
        "aggregate%updated_target%0#0"
      ]
    },
    "2097": {
      "op": "box_replace",
      "stack_out": []
    },
    "2098": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "2099": {
      "op": "return",
      "stack_out": []
    },
    "2100": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_bools[routing]",
      "params": {},
      "block": "sum_bools",
      "stack_in": [],
      "op": "pushbytes \"\"",
      "stack_out": [
        "total#10"
      ]
    },
    "2102": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "total#10",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "2105": {
      "op": "btoi",
      "defined_out": [
        "stop_at_total#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0"
      ]
    },
    "2106": {
      "op": "intc_3 // 0"
    },
    "2107": {
      "op": "bytec 10 // \"too_many_bools\"",
      "defined_out": [
        "\"too_many_bools\"",
        "stop_at_total#0",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "\"too_many_bools\""
      ]
    },
    "2109": {
      "op": "box_len",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "stop_at_total#0",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "2110": {
      "op": "bury 1",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "aggregate%box_get%1#0"
      ]
    },
    "2112": {
      "error": "check self.too_many_bools exists",
      "op": "assert // check self.too_many_bools exists",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0"
      ]
    },
    "2113": {
      "op": "intc_3 // 0",
      "defined_out": [
        "item_index_internal%0#0",
        "stop_at_total#0",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2114": {
      "block": "sum_bools_for_header@2",
      "stack_in": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2115": {
      "op": "pushint 33000 // 33000",
      "defined_out": [
        "33000",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "33000"
      ]
    },
    "2119": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "2120": {
      "op": "dig 2",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "continue_looping%0#0",
        "total#10"
      ]
    },
    "2122": {
      "op": "bury 5",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "2124": {
      "op": "bz sum_bools_after_for@9",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2127": {
      "op": "dupn 2",
      "defined_out": [
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "2129": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "8"
      ]
    },
    "2130": {
      "op": "/",
      "defined_out": [
        "box%element_byte_offset%0#0",
        "item_index_internal%0#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%element_byte_offset%0#0"
      ]
    },
    "2131": {
      "op": "swap",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "box%element_byte_offset%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2132": {
      "op": "intc_2 // 8",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "box%element_byte_offset%0#0",
        "item_index_internal%0#0",
        "8"
      ]
    },
    "2133": {
      "op": "%",
      "defined_out": [
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0",
        "item_index_internal%0#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0"
      ]
    },
    "2134": {
      "op": "bytec 10 // \"too_many_bools\"",
      "defined_out": [
        "\"too_many_bools\"",
        "box%element_bit_offset%0#0",
        "box%element_byte_offset%0#0",
        "item_index_internal%0#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "box%element_byte_offset%0#0",
        "box%element_bit_offset%0#0",
        "\"too_many_bools\""
      ]
    },
    "2136": {
      "op": "uncover 2",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "box%element_bit_offset%0#0",
        "\"too_many_bools\"",
        "box%element_byte_offset%0#0"
      ]
    },
    "2138": {
      "op": "intc_1 // 1",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "box%element_bit_offset%0#0",
        "\"too_many_bools\"",
        "box%element_byte_offset%0#0",
        "1"
      ]
    },
    "2139": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0",
        "item_index_internal%0#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "box%element_bit_offset%0#0",
        "box%box_extract%0#0"
      ]
    },
    "2140": {
      "op": "swap",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "box%box_extract%0#0",
        "box%element_bit_offset%0#0"
      ]
    },
    "2141": {
      "op": "getbit",
      "defined_out": [
        "item_index_internal%0#0",
        "total#10",
        "value#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "value#0"
      ]
    },
    "2142": {
      "op": "dig 2",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "value#0",
        "total#10"
      ]
    },
    "2144": {
      "op": "bury 5",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "value#0"
      ]
    },
    "2146": {
      "op": "bz sum_bools_after_if_else@5",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2149": {
      "op": "dig 1",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2151": {
      "op": "intc_1 // 1",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "total#0",
        "1"
      ]
    },
    "2152": {
      "op": "+",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "total#10"
      ]
    },
    "2153": {
      "op": "bury 4",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2155": {
      "block": "sum_bools_after_if_else@5",
      "stack_in": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2157": {
      "op": "dup",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "total#0",
        "total#0"
      ]
    },
    "2158": {
      "op": "bury 3",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2160": {
      "op": "dig 3",
      "defined_out": [
        "stop_at_total#0",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "total#0",
        "stop_at_total#0"
      ]
    },
    "2162": {
      "op": "==",
      "defined_out": [
        "stop_at_total#0",
        "tmp%1#1",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "tmp%1#1"
      ]
    },
    "2163": {
      "op": "bz sum_bools_after_if_else@7",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2166": {
      "op": "dig 1",
      "defined_out": [
        "stop_at_total#0",
        "total#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "total#10"
      ]
    },
    "2168": {
      "op": "bury 4",
      "defined_out": [
        "stop_at_total#0",
        "total#0",
        "total#10"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2170": {
      "block": "sum_bools_after_for@9",
      "stack_in": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0"
      ],
      "op": "dig 3",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2172": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2173": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "2175": {
      "op": "swap",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2176": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "2177": {
      "op": "log",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2178": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "total#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "2179": {
      "op": "return",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2180": {
      "block": "sum_bools_after_if_else@7",
      "stack_in": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2181": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "2182": {
      "op": "+",
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2183": {
      "op": "bury 1",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#10",
        "stop_at_total#0",
        "total#0",
        "item_index_internal%0#0"
      ]
    },
    "2185": {
      "op": "b sum_bools_for_header@2"
    },
    "2188": {
      "subroutine": "examples.box_storage.contract.BoxContract.create_dynamic_box[routing]",
      "params": {},
      "block": "create_dynamic_box",
      "stack_in": [],
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "2189": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2190": {
      "op": "pop",
      "stack_out": []
    },
    "2191": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "2192": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "\"dynamic_box\"",
        "0x0000"
      ],
      "stack_out": [
        "\"dynamic_box\"",
        "0x0000"
      ]
    },
    "2196": {
      "op": "box_put",
      "stack_out": []
    },
    "2197": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "2198": {
      "op": "return",
      "stack_out": []
    },
    "2199": {
      "subroutine": "examples.box_storage.contract.BoxContract.append_dynamic_box[routing]",
      "params": {},
      "block": "append_dynamic_box",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "2202": {
      "op": "btoi",
      "defined_out": [
        "times#0"
      ],
      "stack_out": [
        "times#0"
      ]
    },
    "2203": {
      "op": "dup",
      "defined_out": [
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "times#0"
      ]
    },
    "2204": {
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "\"dynamic_box\""
      ]
    },
    "2205": {
      "op": "intc_3 // 0",
      "stack_out": [
        "times#0",
        "times#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2206": {
      "op": "intc_0 // 2",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "2",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2207": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "box%box_extract%0#0"
      ]
    },
    "2208": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "times#0",
        "arr_len#0"
      ]
    },
    "2209": {
      "op": "dup"
    },
    "2210": {
      "op": "uncover 2",
      "defined_out": [
        "arr_len#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "arr_len#0",
        "times#0"
      ]
    },
    "2212": {
      "op": "+",
      "defined_out": [
        "arr_len#0",
        "times#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "tmp%1#1"
      ]
    },
    "2213": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "arr_len#0",
        "times#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "tmp%1#1",
        "8"
      ]
    },
    "2214": {
      "op": "*",
      "defined_out": [
        "arr_len#0",
        "times#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "tmp%2#1"
      ]
    },
    "2215": {
      "op": "intc_0 // 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "tmp%2#1",
        "2"
      ]
    },
    "2216": {
      "op": "+",
      "defined_out": [
        "arr_len#0",
        "times#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "tmp%3#1"
      ]
    },
    "2217": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "tmp%3#1",
        "\"dynamic_box\""
      ]
    },
    "2218": {
      "op": "swap",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "\"dynamic_box\"",
        "tmp%3#1"
      ]
    },
    "2219": {
      "op": "box_resize",
      "stack_out": [
        "times#0",
        "arr_len#0"
      ]
    },
    "2220": {
      "op": "intc_3 // 0",
      "defined_out": [
        "arr_len#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "2221": {
      "block": "append_dynamic_box_for_header@2",
      "stack_in": [
        "times#0",
        "arr_len#0",
        "i#0"
      ],
      "op": "dup",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "2222": {
      "op": "dig 3",
      "defined_out": [
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "times#0"
      ]
    },
    "2224": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "2225": {
      "op": "bz append_dynamic_box_after_for@5",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "2228": {
      "op": "dupn 2",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "2230": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2231": {
      "op": "dig 3",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ]
    },
    "2233": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0 (copy)",
        "arr_len#0 (copy)"
      ]
    },
    "2234": {
      "op": "cover 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0 (copy)"
      ]
    },
    "2236": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0 (copy)",
        "8"
      ]
    },
    "2237": {
      "op": "*",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%element_offset%0#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0"
      ]
    },
    "2238": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%element_offset%0#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0",
        "2"
      ]
    },
    "2239": {
      "op": "+",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%offset%2#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%offset%2#0"
      ]
    },
    "2240": {
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0",
        "box%offset%2#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "box%offset%2#0",
        "\"dynamic_box\""
      ]
    },
    "2241": {
      "op": "swap",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "\"dynamic_box\"",
        "box%offset%2#0"
      ]
    },
    "2242": {
      "op": "uncover 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_box\"",
        "box%offset%2#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2244": {
      "op": "box_replace",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "2245": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr_len#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0",
        "1"
      ]
    },
    "2246": {
      "op": "+",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "2247": {
      "op": "bury 3",
      "defined_out": [
        "arr_len#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "2249": {
      "op": "intc_1 // 1",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "2250": {
      "op": "+",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "2251": {
      "op": "bury 1",
      "defined_out": [
        "arr_len#0",
        "i#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "2253": {
      "op": "b append_dynamic_box_for_header@2"
    },
    "2256": {
      "block": "append_dynamic_box_after_for@5",
      "stack_in": [
        "times#0",
        "arr_len#0",
        "i#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "2258": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "2259": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)"
      ]
    },
    "2260": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "2261": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%0#0",
        "16"
      ]
    },
    "2263": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "2264": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "2265": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "aggregate%uint16%0#0"
      ]
    },
    "2268": {
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "aggregate%uint16%0#0",
        "\"dynamic_box\""
      ]
    },
    "2269": {
      "op": "intc_3 // 0",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "aggregate%uint16%0#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2270": {
      "op": "uncover 2",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "\"dynamic_box\"",
        "0",
        "aggregate%uint16%0#0"
      ]
    },
    "2272": {
      "op": "box_replace",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "2273": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "\"dynamic_box\""
      ]
    },
    "2274": {
      "op": "intc_3 // 0",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2275": {
      "op": "intc_0 // 2",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "2",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2276": {
      "op": "box_extract",
      "defined_out": [
        "arr_len#0",
        "box%box_extract%1#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%box_extract%1#0"
      ]
    },
    "2277": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "box%array_length%0#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "box%array_length%0#0"
      ]
    },
    "2278": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "2279": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%2#0",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "2281": {
      "op": "swap",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "2282": {
      "op": "concat",
      "defined_out": [
        "arr_len#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "2283": {
      "op": "log",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "2284": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr_len#0"
      ],
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0",
        "1"
      ]
    },
    "2285": {
      "op": "return",
      "stack_out": [
        "times#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "2286": {
      "subroutine": "examples.box_storage.contract.BoxContract.pop_dynamic_box[routing]",
      "params": {},
      "block": "pop_dynamic_box",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "2289": {
      "op": "btoi",
      "defined_out": [
        "times#0"
      ],
      "stack_out": [
        "times#0"
      ]
    },
    "2290": {
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "\"dynamic_box\""
      ]
    },
    "2291": {
      "op": "intc_3 // 0",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2292": {
      "op": "intc_0 // 2",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "2",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2293": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "times#0"
      ],
      "stack_out": [
        "times#0",
        "box%box_extract%0#0"
      ]
    },
    "2294": {
      "op": "btoi",
      "defined_out": [
        "times#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "times#0",
        "tmp%0#1"
      ]
    },
    "2295": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "times#0"
      ]
    },
    "2296": {
      "op": "-",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0"
      ]
    },
    "2297": {
      "op": "dup",
      "defined_out": [
        "arr_len#0",
        "arr_len#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0 (copy)"
      ]
    },
    "2298": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2299": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "2300": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "2301": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "16"
      ]
    },
    "2303": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "2304": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2305": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%uint16%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%uint16%0#0"
      ]
    },
    "2308": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "arr_len#0",
        "aggregate%uint16%0#0",
        "\"dynamic_box\""
      ]
    },
    "2309": {
      "op": "intc_3 // 0",
      "stack_out": [
        "arr_len#0",
        "aggregate%uint16%0#0",
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2310": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "\"dynamic_box\"",
        "0",
        "aggregate%uint16%0#0"
      ]
    },
    "2312": {
      "op": "box_replace",
      "stack_out": [
        "arr_len#0"
      ]
    },
    "2313": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "8"
      ]
    },
    "2314": {
      "op": "*",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "2315": {
      "op": "intc_0 // 2",
      "stack_out": [
        "tmp%3#1",
        "2"
      ]
    },
    "2316": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2317": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "tmp%4#0",
        "\"dynamic_box\""
      ]
    },
    "2318": {
      "op": "swap",
      "stack_out": [
        "\"dynamic_box\"",
        "tmp%4#0"
      ]
    },
    "2319": {
      "op": "box_resize",
      "stack_out": []
    },
    "2320": {
      "op": "bytec_2 // \"dynamic_box\"",
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "2321": {
      "op": "intc_3 // 0",
      "stack_out": [
        "\"dynamic_box\"",
        "0"
      ]
    },
    "2322": {
      "op": "intc_0 // 2",
      "stack_out": [
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2323": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0"
      ],
      "stack_out": [
        "box%box_extract%1#0"
      ]
    },
    "2324": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0"
      ],
      "stack_out": [
        "box%array_length%0#0"
      ]
    },
    "2325": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "2326": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "2328": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "2329": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2330": {
      "op": "log",
      "stack_out": []
    },
    "2331": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "2332": {
      "op": "return",
      "stack_out": []
    },
    "2333": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_dynamic_box[routing]",
      "params": {},
      "block": "sum_dynamic_box",
      "stack_in": [],
      "op": "intc_3 // 0"
    },
    "2334": {
      "op": "bytec_2 // \"dynamic_box\""
    },
    "2335": {
      "op": "intc_3 // 0"
    },
    "2336": {
      "op": "intc_0 // 2",
      "defined_out": [
        "\"dynamic_box\"",
        "0",
        "2",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "\"dynamic_box\"",
        "0",
        "2"
      ]
    },
    "2337": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%box_extract%0#0"
      ]
    },
    "2338": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0"
      ]
    },
    "2339": {
      "op": "intc_3 // 0",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2340": {
      "block": "sum_dynamic_box_for_header@2",
      "stack_in": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "dup",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2341": {
      "op": "dig 2",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%array_length%0#0"
      ]
    },
    "2343": {
      "op": "<",
      "defined_out": [
        "box%array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "2344": {
      "op": "bz sum_dynamic_box_after_for@5",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2347": {
      "op": "dupn 2",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "2349": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "8"
      ]
    },
    "2350": {
      "op": "*",
      "defined_out": [
        "box%array_length%0#0",
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0"
      ]
    },
    "2351": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "box%array_length%0#0",
        "box%element_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%element_offset%0#0",
        "2"
      ]
    },
    "2352": {
      "op": "+",
      "defined_out": [
        "box%array_length%0#0",
        "box%offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%offset%0#0"
      ]
    },
    "2353": {
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "box%array_length%0#0",
        "box%offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%offset%0#0",
        "\"dynamic_box\""
      ]
    },
    "2354": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "\"dynamic_box\"",
        "box%offset%0#0"
      ]
    },
    "2355": {
      "op": "intc_2 // 8",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "\"dynamic_box\"",
        "box%offset%0#0",
        "8"
      ]
    },
    "2356": {
      "op": "box_extract",
      "defined_out": [
        "box%array_length%0#0",
        "box%box_extract%1#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "box%box_extract%1#0"
      ]
    },
    "2357": {
      "op": "btoi",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "val#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "val#0"
      ]
    },
    "2358": {
      "op": "dig 4",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "val#0",
        "total#0"
      ]
    },
    "2360": {
      "op": "+",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2361": {
      "op": "bury 4",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2363": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "2364": {
      "op": "+",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2365": {
      "op": "bury 1",
      "defined_out": [
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2367": {
      "op": "b sum_dynamic_box_for_header@2"
    },
    "2370": {
      "block": "sum_dynamic_box_after_for@5",
      "stack_in": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "2372": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2373": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "2375": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2376": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "tmp%2#0"
      ]
    },
    "2377": {
      "op": "log",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2378": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "2379": {
      "op": "return",
      "stack_out": [
        "total#0",
        "box%array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "2380": {
      "subroutine": "examples.box_storage.contract.BoxContract.write_dynamic_box[routing]",
      "params": {},
      "block": "write_dynamic_box",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "2383": {
      "op": "btoi",
      "defined_out": [
        "index#0"
      ],
      "stack_out": [
        "index#0"
      ]
    },
    "2384": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "2387": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "index#0"
      ]
    },
    "2388": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "index#0",
        "8"
      ]
    },
    "2389": {
      "op": "*",
      "defined_out": [
        "box%element_offset%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box%element_offset%0#0"
      ]
    },
    "2390": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "box%element_offset%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box%element_offset%0#0",
        "2"
      ]
    },
    "2391": {
      "op": "+",
      "defined_out": [
        "box%offset%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box%offset%0#0"
      ]
    },
    "2392": {
      "op": "bytec_2 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "box%offset%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box%offset%0#0",
        "\"dynamic_box\""
      ]
    },
    "2393": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "\"dynamic_box\"",
        "box%offset%0#0"
      ]
    },
    "2394": {
      "op": "uncover 2",
      "stack_out": [
        "\"dynamic_box\"",
        "box%offset%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "2396": {
      "op": "box_replace",
      "stack_out": []
    },
    "2397": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "2398": {
      "op": "return",
      "stack_out": []
    },
    "2399": {
      "subroutine": "examples.box_storage.contract.BoxContract.write_dynamic_arr_struct[routing]",
      "params": {},
      "block": "write_dynamic_arr_struct",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "2402": {
      "op": "btoi",
      "defined_out": [
        "index#0"
      ],
      "stack_out": [
        "index#0"
      ]
    },
    "2403": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "2406": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2407": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "20",
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "\"dynamic_arr_struct\"",
        "20"
      ]
    },
    "2409": {
      "op": "intc_0 // 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "2",
        "20",
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "\"dynamic_arr_struct\"",
        "20",
        "2"
      ]
    },
    "2410": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "box%box_extract%0#0"
      ]
    },
    "2411": {
      "op": "btoi",
      "defined_out": [
        "box%btoi%0#0",
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "box%btoi%0#0"
      ]
    },
    "2412": {
      "op": "dig 2",
      "defined_out": [
        "box%btoi%0#0",
        "index#0",
        "index#0 (copy)",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "box%btoi%0#0",
        "index#0 (copy)"
      ]
    },
    "2414": {
      "op": ">",
      "defined_out": [
        "box%index_ok%0#0",
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0",
        "box%index_ok%0#0"
      ]
    },
    "2415": {
      "error": "index out of bounds",
      "op": "assert // index out of bounds",
      "stack_out": [
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "2416": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "index#0"
      ]
    },
    "2417": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "index#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "index#0",
        "8"
      ]
    },
    "2418": {
      "op": "*",
      "defined_out": [
        "box%element_offset%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box%element_offset%0#0"
      ]
    },
    "2419": {
      "op": "pushint 22 // 22",
      "defined_out": [
        "22",
        "box%element_offset%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box%element_offset%0#0",
        "22"
      ]
    },
    "2421": {
      "op": "+",
      "defined_out": [
        "box%offset%1#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box%offset%1#0"
      ]
    },
    "2422": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box%offset%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "2423": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "\"dynamic_arr_struct\"",
        "box%offset%1#0"
      ]
    },
    "2424": {
      "op": "uncover 2",
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "box%offset%1#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "2426": {
      "op": "box_replace",
      "stack_out": []
    },
    "2427": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "2428": {
      "op": "return",
      "stack_out": []
    },
    "2429": {
      "subroutine": "examples.box_storage.contract.BoxContract.slice_box[routing]",
      "params": {},
      "block": "slice_box",
      "stack_in": [],
      "op": "bytec 12 // \"0\"",
      "defined_out": [
        "\"0\""
      ],
      "stack_out": [
        "\"0\""
      ]
    },
    "2431": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2432": {
      "op": "pop",
      "stack_out": []
    },
    "2433": {
      "op": "bytec 12 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "2435": {
      "op": "pushbytes 0x54657374696e672074657374696e6720313233",
      "defined_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ],
      "stack_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ]
    },
    "2456": {
      "op": "box_put",
      "stack_out": []
    },
    "2457": {
      "op": "bytec 12 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "2459": {
      "op": "box_len",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "2460": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2461": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "2462": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "2463": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "tmp%0#0 (copy)"
      ]
    },
    "2465": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "2466": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "7"
      ]
    },
    "2468": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "7",
        "tmp%0#0 (copy)"
      ]
    },
    "2470": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "2471": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "2473": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "7"
      ]
    },
    "2475": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "7",
        "tmp%4#0"
      ]
    },
    "2477": {
      "op": "select",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "2478": {
      "op": "dig 1",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%3#0 (copy)"
      ]
    },
    "2480": {
      "op": "-",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "2481": {
      "op": "bytec 12 // \"0\"",
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "\"0\""
      ]
    },
    "2483": {
      "op": "cover 2",
      "stack_out": [
        "\"0\"",
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "2485": {
      "op": "box_extract",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2486": {
      "op": "pushbytes 0x54657374696e67",
      "defined_out": [
        "0x54657374696e67",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x54657374696e67"
      ]
    },
    "2495": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "2496": {
      "op": "assert",
      "stack_out": []
    },
    "2497": {
      "op": "bytec_3 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "2498": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "2499": {
      "op": "pop",
      "stack_out": []
    },
    "2500": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "2501": {
      "op": "pushbytes 0x000548656c6c6f",
      "defined_out": [
        "0x000548656c6c6f",
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43",
        "0x000548656c6c6f"
      ]
    },
    "2510": {
      "op": "box_put",
      "stack_out": []
    },
    "2511": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "2512": {
      "op": "box_len",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "2513": {
      "op": "pop",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "2514": {
      "op": "intc_0 // 2",
      "defined_out": [
        "2",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "2"
      ]
    },
    "2515": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "2",
        "tmp%10#0 (copy)"
      ]
    },
    "2517": {
      "op": "<",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "2518": {
      "op": "dig 1",
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%10#0 (copy)"
      ]
    },
    "2520": {
      "op": "intc_0 // 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%10#0 (copy)",
        "2"
      ]
    },
    "2521": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "2",
        "tmp%12#0"
      ]
    },
    "2523": {
      "op": "select",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0"
      ]
    },
    "2524": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0",
        "10"
      ]
    },
    "2526": {
      "op": "dig 2",
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0",
        "10",
        "tmp%10#0 (copy)"
      ]
    },
    "2528": {
      "op": "<",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "2529": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%10#0"
      ]
    },
    "2531": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%10#0",
        "10"
      ]
    },
    "2533": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%13#0",
        "tmp%10#0",
        "10",
        "tmp%14#0"
      ]
    },
    "2535": {
      "op": "select",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "2536": {
      "op": "dig 1",
      "defined_out": [
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%13#0 (copy)"
      ]
    },
    "2538": {
      "op": "-",
      "defined_out": [
        "tmp%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "2539": {
      "op": "bytec_3 // 0x424f585f43",
      "stack_out": [
        "tmp%13#0",
        "tmp%16#0",
        "0x424f585f43"
      ]
    },
    "2540": {
      "op": "cover 2",
      "stack_out": [
        "0x424f585f43",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "2542": {
      "op": "box_extract",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "2543": {
      "op": "pushbytes 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0x48656c6c6f"
      ]
    },
    "2550": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "2551": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "2552": {
      "subroutine": "examples.box_storage.contract.BoxContract.test_box_ref[routing]",
      "params": {},
      "block": "test_box_ref",
      "stack_in": [],
      "op": "bytec 5 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "2554": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2555": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2557": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2558": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "2559": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "2561": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "2563": {
      "op": "box_create",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2564": {
      "op": "assert",
      "stack_out": []
    },
    "2565": {
      "op": "txn Sender",
      "defined_out": [
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0"
      ]
    },
    "2567": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2569": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2571": {
      "op": "intc_3 // 0",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "2572": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0",
        "sender_bytes#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "sender_bytes#0 (copy)"
      ]
    },
    "2574": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2575": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2577": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"blob\"",
        "8000",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "8000"
      ]
    },
    "2580": {
      "op": "box_resize",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2581": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2583": {
      "op": "intc_3 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "2584": {
      "op": "dup",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0"
      ]
    },
    "2585": {
      "op": "dig 3",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "app_address#0 (copy)",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "0",
        "app_address#0 (copy)"
      ]
    },
    "2587": {
      "op": "box_splice",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2588": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2590": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "\"blob\"",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64"
      ]
    },
    "2592": {
      "op": "bytec 14 // 0x68656c6c6f",
      "defined_out": [
        "\"blob\"",
        "0x68656c6c6f",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "64",
        "0x68656c6c6f"
      ]
    },
    "2594": {
      "op": "box_replace",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2595": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2597": {
      "op": "intc_3 // 0",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0"
      ]
    },
    "2598": {
      "op": "pushint 69 // 69",
      "defined_out": [
        "\"blob\"",
        "0",
        "69",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\"",
        "0",
        "69"
      ]
    },
    "2600": {
      "op": "box_extract",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0"
      ]
    },
    "2601": {
      "op": "dig 1",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "app_address#0 (copy)"
      ]
    },
    "2603": {
      "op": "dig 3",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "app_address#0 (copy)",
        "sender_bytes#0 (copy)"
      ]
    },
    "2605": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%10#0"
      ]
    },
    "2606": {
      "op": "bytec 14 // 0x68656c6c6f",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%10#0",
        "0x68656c6c6f"
      ]
    },
    "2608": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "prefix#0",
        "tmp%11#0"
      ]
    },
    "2609": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%12#0"
      ]
    },
    "2610": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2611": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2613": {
      "op": "box_del",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%13#0"
      ]
    },
    "2614": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2615": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "\"blob\""
      ]
    },
    "2617": {
      "op": "box_get",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0"
      ]
    },
    "2618": {
      "op": "dup",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "exists#0 (copy)",
        "sender_bytes#0",
        "value#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "exists#0 (copy)"
      ]
    },
    "2619": {
      "op": "!",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "tmp%15#0",
        "value#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "tmp%15#0"
      ]
    },
    "2620": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0"
      ]
    },
    "2621": {
      "op": "dig 1",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "value#0 (copy)"
      ]
    },
    "2623": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "value#0 (copy)",
        "0x"
      ]
    },
    "2625": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "tmp%16#0",
        "value#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "tmp%16#0"
      ]
    },
    "2626": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0"
      ]
    },
    "2627": {
      "op": "dig 3",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "value#0",
        "exists#0",
        "sender_bytes#0 (copy)"
      ]
    },
    "2629": {
      "op": "cover 2",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "sender_bytes#0 (copy)",
        "value#0",
        "exists#0"
      ]
    },
    "2631": {
      "op": "select",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "state_get%0#0"
      ]
    },
    "2632": {
      "op": "dig 2",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "state_get%0#0",
        "sender_bytes#0 (copy)"
      ]
    },
    "2634": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0",
        "tmp%17#0"
      ]
    },
    "2635": {
      "op": "assert",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2636": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "2637": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "tmp%18#0",
        "\"blob\""
      ]
    },
    "2639": {
      "op": "swap",
      "stack_out": [
        "\"blob\"",
        "tmp%18#0"
      ]
    },
    "2640": {
      "op": "box_put",
      "stack_out": []
    },
    "2641": {
      "op": "bytec 5 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "2643": {
      "op": "box_len",
      "defined_out": [
        "_%5#0",
        "maybe_exists%7#0"
      ],
      "stack_out": [
        "_%5#0",
        "maybe_exists%7#0"
      ]
    },
    "2644": {
      "op": "pop",
      "stack_out": [
        "_%5#0"
      ]
    },
    "2645": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "_%5#0",
        "64"
      ]
    },
    "2647": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "2648": {
      "op": "assert",
      "stack_out": []
    },
    "2649": {
      "op": "bytec 17 // \"box_ref\"",
      "defined_out": [
        "\"box_ref\""
      ],
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "2651": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "\"box_ref\"",
        "32"
      ]
    },
    "2653": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "2654": {
      "op": "pop",
      "stack_out": []
    },
    "2655": {
      "op": "bytec 17 // \"box_ref\"",
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "2657": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2658": {
      "op": "pop",
      "stack_out": []
    },
    "2659": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "2660": {
      "op": "return",
      "stack_out": []
    },
    "2661": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_test[routing]",
      "params": {},
      "block": "box_map_test",
      "stack_in": [],
      "op": "intc_3 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2662": {
      "op": "itob",
      "defined_out": [
        "box_0#0"
      ],
      "stack_out": [
        "box_0#0"
      ]
    },
    "2663": {
      "op": "dup",
      "defined_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ],
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ]
    },
    "2664": {
      "op": "box_del",
      "defined_out": [
        "box_0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_0#0",
        "{box_del}"
      ]
    },
    "2665": {
      "op": "pop",
      "stack_out": [
        "box_0#0"
      ]
    },
    "2666": {
      "op": "dup",
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)"
      ]
    },
    "2667": {
      "op": "pushbytes \"Hmmmmm\"",
      "defined_out": [
        "\"Hmmmmm\"",
        "box_0#0",
        "box_0#0 (copy)"
      ],
      "stack_out": [
        "box_0#0",
        "box_0#0 (copy)",
        "\"Hmmmmm\""
      ]
    },
    "2675": {
      "op": "box_put",
      "stack_out": [
        "box_0#0"
      ]
    },
    "2676": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "2677": {
      "op": "pop",
      "stack_out": [
        "value%0#0"
      ]
    },
    "2678": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "6"
      ]
    },
    "2680": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2681": {
      "op": "assert",
      "stack_out": []
    },
    "2682": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "2683": {
      "op": "itob",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "2684": {
      "op": "dup",
      "defined_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "2685": {
      "op": "box_get",
      "defined_out": [
        "encoded_value%5#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2686": {
      "op": "bytec 18 // \"default\"",
      "defined_out": [
        "\"default\"",
        "encoded_value%5#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "\"default\""
      ]
    },
    "2688": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%5#0",
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2690": {
      "op": "select",
      "defined_out": [
        "encoded_value%5#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "state_get%0#0"
      ]
    },
    "2691": {
      "op": "bytec 18 // \"default\"",
      "stack_out": [
        "encoded_value%5#0",
        "state_get%0#0",
        "\"default\""
      ]
    },
    "2693": {
      "op": "==",
      "defined_out": [
        "encoded_value%5#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "tmp%5#0"
      ]
    },
    "2694": {
      "op": "assert",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "2695": {
      "op": "dup",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "2696": {
      "op": "box_len",
      "defined_out": [
        "encoded_value%5#0",
        "exists#0",
        "value#1"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "value#1",
        "exists#0"
      ]
    },
    "2697": {
      "op": "bury 1",
      "stack_out": [
        "encoded_value%5#0",
        "exists#0"
      ]
    },
    "2699": {
      "op": "!",
      "defined_out": [
        "encoded_value%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "tmp%6#0"
      ]
    },
    "2700": {
      "op": "assert",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "2701": {
      "op": "dup",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "2702": {
      "op": "box_del",
      "stack_out": [
        "encoded_value%5#0",
        "{box_del}"
      ]
    },
    "2703": {
      "op": "pop",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "2704": {
      "op": "dup",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "2705": {
      "op": "bytec 14 // \"hello\"",
      "defined_out": [
        "\"hello\"",
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)",
        "\"hello\""
      ]
    },
    "2707": {
      "op": "box_put",
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "2708": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "2709": {
      "op": "pop",
      "stack_out": []
    },
    "2710": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "2711": {
      "op": "return",
      "stack_out": []
    },
    "2712": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_set[routing]",
      "params": {},
      "block": "box_map_set",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "2715": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "2716": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "key#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "2719": {
      "op": "extract 2 0",
      "defined_out": [
        "key#0",
        "value#0"
      ],
      "stack_out": [
        "key#0",
        "value#0"
      ]
    },
    "2722": {
      "op": "swap",
      "stack_out": [
        "value#0",
        "key#0"
      ]
    },
    "2723": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0"
      ]
    },
    "2724": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "2725": {
      "op": "box_del",
      "defined_out": [
        "encoded_value%0#0",
        "value#0",
        "{box_del}"
      ],
      "stack_out": [
        "value#0",
        "encoded_value%0#0",
        "{box_del}"
      ]
    },
    "2726": {
      "op": "pop",
      "stack_out": [
        "value#0",
        "encoded_value%0#0"
      ]
    },
    "2727": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "value#0"
      ]
    },
    "2728": {
      "op": "box_put",
      "stack_out": []
    },
    "2729": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "2730": {
      "op": "return",
      "stack_out": []
    },
    "2731": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_get[routing]",
      "params": {},
      "block": "box_map_get",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "2734": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "2735": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2736": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "2737": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "2738": {
      "op": "dup",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "2739": {
      "op": "len",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%length%0#0"
      ]
    },
    "2740": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "2741": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "2744": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "2745": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "2746": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "2748": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "2749": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2750": {
      "op": "log",
      "stack_out": []
    },
    "2751": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "2752": {
      "op": "return",
      "stack_out": []
    },
    "2753": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_del[routing]",
      "params": {},
      "block": "box_map_del",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "2756": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "2757": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2758": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2759": {
      "op": "pop",
      "stack_out": []
    },
    "2760": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "2761": {
      "op": "return",
      "stack_out": []
    },
    "2762": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_exists[routing]",
      "params": {},
      "block": "box_map_exists",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "2765": {
      "op": "btoi",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "2766": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2767": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2768": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2770": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00"
      ]
    },
    "2773": {
      "op": "intc_3 // 0",
      "defined_out": [
        "0",
        "0x00",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "0x00",
        "0"
      ]
    },
    "2774": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_exists%0#0"
      ]
    },
    "2776": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "2777": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "2779": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "2780": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2781": {
      "op": "log",
      "stack_out": []
    },
    "2782": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "2783": {
      "op": "return",
      "stack_out": []
    }
  }
}