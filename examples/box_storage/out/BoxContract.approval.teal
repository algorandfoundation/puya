#pragma version 10

examples.box_storage.contract.BoxContract.approval_program:
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@14
    method "set_boxes(uint64,byte[],string)void"
    method "read_boxes()(uint64,byte[],string)"
    method "boxes_exist()(bool,bool,bool)"
    method "slice_box()void"
    method "arc4_box()void"
    method "box_blob()void"
    method "box_map_test()void"
    method "box_map_set(uint64,string)void"
    method "box_map_get(uint64)string"
    method "box_map_exists(uint64)bool"
    txna ApplicationArgs 0
    match main_set_boxes_route@2 main_read_boxes_route@3 main_boxes_exist_route@4 main_slice_box_route@5 main_arc4_box_route@6 main_box_blob_route@7 main_box_map_test_route@8 main_box_map_set_route@9 main_box_map_get_route@10 main_box_map_exists_route@11
    err // reject transaction

main_set_boxes_route@2:
    // box_storage/contract.py:15
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    // box_storage/contract.py:15
    // @arc4.abimethod
    callsub set_boxes
    int 1
    return

main_read_boxes_route@3:
    // box_storage/contract.py:23
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub read_boxes
    cover 2
    swap
    itob
    swap
    dup
    len
    itob
    substring 6 8
    swap
    concat
    swap
    byte 0x000c
    concat
    swap
    dup
    len
    int 12
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_boxes_exist_route@4:
    // box_storage/contract.py:27
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub boxes_exist
    cover 2
    swap
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 2
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x00
    int 0
    uncover 3
    setbit
    swap
    int 0
    getbit
    uncover 2
    int 1
    uncover 2
    setbit
    swap
    int 0
    getbit
    int 2
    swap
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_slice_box_route@5:
    // box_storage/contract.py:31
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub slice_box
    int 1
    return

main_arc4_box_route@6:
    // box_storage/contract.py:40
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub arc4_box
    int 1
    return

main_box_blob_route@7:
    // box_storage/contract.py:50
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub box_blob
    int 1
    return

main_box_map_test_route@8:
    // box_storage/contract.py:69
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub box_map_test
    int 1
    return

main_box_map_set_route@9:
    // box_storage/contract.py:83
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    // box_storage/contract.py:83
    // @arc4.abimethod
    callsub box_map_set
    int 1
    return

main_box_map_get_route@10:
    // box_storage/contract.py:87
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // box_storage/contract.py:87
    // @arc4.abimethod
    callsub box_map_get
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_box_map_exists_route@11:
    // box_storage/contract.py:91
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // box_storage/contract.py:91
    // @arc4.abimethod
    callsub box_map_exists
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@14:
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// examples.box_storage.contract.BoxContract.set_boxes(a: uint64, b: bytes, c: bytes) -> void:
set_boxes:
    // box_storage/contract.py:15-16
    // @arc4.abimethod
    // def set_boxes(self, a: UInt64, b: Bytes, c: arc4.String) -> None:
    proto 3 0
    // box_storage/contract.py:17
    // self.box_a.value = a
    frame_dig -3
    itob
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:17
    // self.box_a.value = a
    swap
    box_put
    // box_storage/contract.py:11
    // self.box_b = Box(Bytes, key="b")
    byte "b"
    // box_storage/contract.py:18
    // self.box_b.value = b
    box_del
    pop
    // box_storage/contract.py:11
    // self.box_b = Box(Bytes, key="b")
    byte "b"
    // box_storage/contract.py:18
    // self.box_b.value = b
    frame_dig -2
    box_put
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:19
    // self.box_c.value = c
    box_del
    pop
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:19
    // self.box_c.value = c
    frame_dig -1
    box_put
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:21
    // self.box_a.value += 3
    box_get
    swap
    btoi
    swap
    assert // Box must exist
    int 3
    +
    itob
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:21
    // self.box_a.value += 3
    swap
    box_put
    retsub


// examples.box_storage.contract.BoxContract.read_boxes() -> uint64, bytes, bytes:
read_boxes:
    // box_storage/contract.py:23-24
    // @arc4.abimethod
    // def read_boxes(self) -> tuple[UInt64, Bytes, arc4.String]:
    proto 0 3
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:25
    // return self.box_a.value, self.box_b.value, self.box_c.value
    box_get
    swap
    btoi
    swap
    assert // Box must exist
    // box_storage/contract.py:11
    // self.box_b = Box(Bytes, key="b")
    byte "b"
    // box_storage/contract.py:25
    // return self.box_a.value, self.box_b.value, self.box_c.value
    box_get
    assert // Box must exist
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:25
    // return self.box_a.value, self.box_b.value, self.box_c.value
    box_get
    assert // Box must exist
    retsub


// examples.box_storage.contract.BoxContract.boxes_exist() -> uint64, uint64, uint64:
boxes_exist:
    // box_storage/contract.py:27-28
    // @arc4.abimethod
    // def boxes_exist(self) -> tuple[bool, bool, bool]:
    proto 0 3
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:29
    // return bool(self.box_a), bool(self.box_b), bool(self.box_c)
    box_len
    bury 1
    // box_storage/contract.py:11
    // self.box_b = Box(Bytes, key="b")
    byte "b"
    // box_storage/contract.py:29
    // return bool(self.box_a), bool(self.box_b), bool(self.box_c)
    box_len
    bury 1
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:29
    // return bool(self.box_a), bool(self.box_b), bool(self.box_c)
    box_len
    bury 1
    retsub


// examples.box_storage.contract.BoxContract.slice_box() -> void:
slice_box:
    // box_storage/contract.py:31-32
    // @arc4.abimethod
    // def slice_box(self) -> None:
    proto 0 0
    // box_storage/contract.py:33
    // box_0 = Box(Bytes, key=b"0")
    byte 0x30
    // box_storage/contract.py:34
    // box_0.value = Bytes(b"Testing testing 123")
    box_del
    pop
    // box_storage/contract.py:33
    // box_0 = Box(Bytes, key=b"0")
    byte 0x30
    // box_storage/contract.py:34
    // box_0.value = Bytes(b"Testing testing 123")
    byte "Testing testing 123"
    box_put
    // box_storage/contract.py:33
    // box_0 = Box(Bytes, key=b"0")
    byte 0x30
    // box_storage/contract.py:35
    // assert box_0.value[0:7] == b"Testing"
    box_len
    assert // Box must exist
    dup
    int 0
    dig 2
    select
    swap
    int 7
    dig 1
    <
    int 7
    swap
    select
    dig 1
    -
    // box_storage/contract.py:33
    // box_0 = Box(Bytes, key=b"0")
    byte 0x30
    // box_storage/contract.py:35
    // assert box_0.value[0:7] == b"Testing"
    cover 2
    box_extract
    byte "Testing"
    ==
    assert
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:37
    // self.box_c.value = arc4.String("Hello")
    box_del
    pop
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:37
    // self.box_c.value = arc4.String("Hello")
    byte "\x00\x05Hello"
    box_put
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:38
    // assert self.box_c.value.bytes[2:10] == b"Hello"
    box_len
    assert // Box must exist
    int 2
    dig 1
    <
    swap
    dup
    int 2
    uncover 3
    select
    swap
    int 10
    dig 1
    <
    int 10
    swap
    select
    dig 1
    -
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:38
    // assert self.box_c.value.bytes[2:10] == b"Hello"
    cover 2
    box_extract
    byte "Hello"
    ==
    assert
    retsub


// examples.box_storage.contract.BoxContract.arc4_box() -> void:
arc4_box:
    // box_storage/contract.py:40-41
    // @arc4.abimethod
    // def arc4_box(self) -> None:
    proto 0 0
    // box_storage/contract.py:42
    // box_d = Box(StaticInts, key=b"d")
    byte 0x64
    // box_storage/contract.py:43
    // box_d.value = StaticInts(arc4.UInt8(0), arc4.UInt8(1), arc4.UInt8(2), arc4.UInt8(3))
    byte 0x00010203
    box_put
    // box_storage/contract.py:42
    // box_d = Box(StaticInts, key=b"d")
    byte 0x64
    // box_storage/contract.py:45
    // assert box_d.value[0] == 0
    box_get
    assert // Box must exist
    extract 0 1
    byte 0x00
    b==
    assert
    // box_storage/contract.py:42
    // box_d = Box(StaticInts, key=b"d")
    byte 0x64
    // box_storage/contract.py:46
    // assert box_d.value[1] == 1
    box_get
    assert // Box must exist
    extract 1 1
    byte 0x01
    b==
    assert
    // box_storage/contract.py:42
    // box_d = Box(StaticInts, key=b"d")
    byte 0x64
    // box_storage/contract.py:47
    // assert box_d.value[2] == 2
    box_get
    assert // Box must exist
    extract 2 1
    byte 0x02
    b==
    assert
    // box_storage/contract.py:42
    // box_d = Box(StaticInts, key=b"d")
    byte 0x64
    // box_storage/contract.py:48
    // assert box_d.value[3] == 3
    box_get
    assert // Box must exist
    extract 3 1
    byte 0x03
    b==
    assert
    retsub


// examples.box_storage.contract.BoxContract.box_blob() -> void:
box_blob:
    // box_storage/contract.py:50-51
    // @arc4.abimethod
    // def box_blob(self) -> None:
    proto 0 0
    // box_storage/contract.py:54
    // app_address = Global.current_application_address.bytes
    global CurrentApplicationAddress
    // box_storage/contract.py:53
    // sender_bytes = Txn.sender.bytes
    txn Sender
    // box_storage/contract.py:52
    // box_blob = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:55
    // assert box_blob.create(size=8000)
    int 8000
    box_create
    assert
    // box_storage/contract.py:52
    // box_blob = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:56
    // box_blob.replace(0, sender_bytes)
    int 0
    dig 2
    box_replace
    // box_storage/contract.py:52
    // box_blob = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:57
    // box_blob.splice(0, 0, app_address)
    int 0
    dup
    dig 4
    box_splice
    // box_storage/contract.py:52
    // box_blob = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:58
    // first_64 = box_blob.extract(0, 32 * 2)
    int 0
    int 64
    box_extract
    // box_storage/contract.py:59
    // assert first_64 == app_address + sender_bytes
    dig 2
    dig 2
    concat
    ==
    assert
    // box_storage/contract.py:52
    // box_blob = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:60
    // assert box_blob.delete()
    box_del
    assert
    // box_storage/contract.py:52
    // box_blob = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:62
    // value, exists = box_blob.maybe()
    box_get
    bury 1
    // box_storage/contract.py:63
    // assert not exists
    !
    assert
    // box_storage/contract.py:52
    // box_blob = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:64
    // assert box_blob.get(default=sender_bytes) == sender_bytes
    box_get
    dig 2
    cover 2
    select
    dig 1
    ==
    assert
    // box_storage/contract.py:65
    // box_blob.put(sender_bytes + app_address)
    swap
    concat
    // box_storage/contract.py:52
    // box_blob = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:65
    // box_blob.put(sender_bytes + app_address)
    swap
    box_put
    // box_storage/contract.py:52
    // box_blob = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:66
    // assert box_blob, "Blob exists"
    box_len
    bury 1
    assert // Blob exists
    // box_storage/contract.py:52
    // box_blob = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:67
    // assert box_blob.length == 64
    box_len
    assert // Box must exist
    int 64
    ==
    assert
    retsub


// examples.box_storage.contract.BoxContract.box_map_test() -> void:
box_map_test:
    // box_storage/contract.py:69-70
    // @arc4.abimethod
    // def box_map_test(self) -> None:
    proto 0 0
    // box_storage/contract.py:71
    // key_0 = UInt64(0)
    int 0
    // box_storage/contract.py:74
    // self.box_map[key_0] = value
    itob
    dup
    box_del
    pop
    dup
    // box_storage/contract.py:73
    // value = String("Hmmmmm")
    byte "Hmmmmm"
    // box_storage/contract.py:74
    // self.box_map[key_0] = value
    box_put
    // box_storage/contract.py:75
    // assert self.box_map[key_0].bytes.length == value.bytes.length
    dup
    box_len
    assert // Box must exist
    int 6
    ==
    assert
    // box_storage/contract.py:76
    // assert self.box_map.length(key_0) == value.bytes.length
    dup
    box_len
    assert // Box must exist
    int 6
    ==
    assert
    // box_storage/contract.py:72
    // key_1 = UInt64(1)
    int 1
    // box_storage/contract.py:78
    // assert self.box_map.get(key_1, default=String("default")) == String("default")
    itob
    dup
    box_get
    byte "default"
    cover 2
    select
    byte "default"
    ==
    assert
    // box_storage/contract.py:79
    // value, exists = self.box_map.maybe(key_1)
    box_get
    bury 1
    // box_storage/contract.py:80
    // assert not exists
    !
    assert
    // box_storage/contract.py:13-81
    //     self.box_map = BoxMap(UInt64, String, key_prefix="")
    // 
    // @arc4.abimethod
    // def set_boxes(self, a: UInt64, b: Bytes, c: arc4.String) -> None:
    //     self.box_a.value = a
    //     self.box_b.value = b
    //     self.box_c.value = c
    // 
    //     self.box_a.value += 3
    // 
    // @arc4.abimethod
    // def read_boxes(self) -> tuple[UInt64, Bytes, arc4.String]:
    //     return self.box_a.value, self.box_b.value, self.box_c.value
    // 
    // @arc4.abimethod
    // def boxes_exist(self) -> tuple[bool, bool, bool]:
    //     return bool(self.box_a), bool(self.box_b), bool(self.box_c)
    // 
    // @arc4.abimethod
    // def slice_box(self) -> None:
    //     box_0 = Box(Bytes, key=b"0")
    //     box_0.value = Bytes(b"Testing testing 123")
    //     assert box_0.value[0:7] == b"Testing"
    // 
    //     self.box_c.value = arc4.String("Hello")
    //     assert self.box_c.value.bytes[2:10] == b"Hello"
    // 
    // @arc4.abimethod
    // def arc4_box(self) -> None:
    //     box_d = Box(StaticInts, key=b"d")
    //     box_d.value = StaticInts(arc4.UInt8(0), arc4.UInt8(1), arc4.UInt8(2), arc4.UInt8(3))
    // 
    //     assert box_d.value[0] == 0
    //     assert box_d.value[1] == 1
    //     assert box_d.value[2] == 2
    //     assert box_d.value[3] == 3
    // 
    // @arc4.abimethod
    // def box_blob(self) -> None:
    //     box_blob = BoxRef(key="blob")
    //     sender_bytes = Txn.sender.bytes
    //     app_address = Global.current_application_address.bytes
    //     assert box_blob.create(size=8000)
    //     box_blob.replace(0, sender_bytes)
    //     box_blob.splice(0, 0, app_address)
    //     first_64 = box_blob.extract(0, 32 * 2)
    //     assert first_64 == app_address + sender_bytes
    //     assert box_blob.delete()
    // 
    //     value, exists = box_blob.maybe()
    //     assert not exists
    //     assert box_blob.get(default=sender_bytes) == sender_bytes
    //     box_blob.put(sender_bytes + app_address)
    //     assert box_blob, "Blob exists"
    //     assert box_blob.length == 64
    // 
    // @arc4.abimethod
    // def box_map_test(self) -> None:
    //     key_0 = UInt64(0)
    //     key_1 = UInt64(1)
    //     value = String("Hmmmmm")
    //     self.box_map[key_0] = value
    //     assert self.box_map[key_0].bytes.length == value.bytes.length
    //     assert self.box_map.length(key_0) == value.bytes.length
    // 
    //     assert self.box_map.get(key_1, default=String("default")) == String("default")
    //     value, exists = self.box_map.maybe(key_1)
    //     assert not exists
    //     assert key_0 in self.box_map
    box_len
    bury 1
    // box_storage/contract.py:81
    // assert key_0 in self.box_map
    assert
    retsub


// examples.box_storage.contract.BoxContract.box_map_set(key: uint64, value: bytes) -> void:
box_map_set:
    // box_storage/contract.py:83-84
    // @arc4.abimethod
    // def box_map_set(self, key: UInt64, value: String) -> None:
    proto 2 0
    // box_storage/contract.py:85
    // self.box_map[key] = value
    frame_dig -2
    itob
    dup
    box_del
    pop
    frame_dig -1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.box_map_get(key: uint64) -> bytes:
box_map_get:
    // box_storage/contract.py:87-88
    // @arc4.abimethod
    // def box_map_get(self, key: UInt64) -> String:
    proto 1 1
    // box_storage/contract.py:89
    // return self.box_map[key]
    frame_dig -1
    itob
    box_get
    assert // Box must exist
    retsub


// examples.box_storage.contract.BoxContract.box_map_exists(key: uint64) -> uint64:
box_map_exists:
    // box_storage/contract.py:91-92
    // @arc4.abimethod
    // def box_map_exists(self, key: UInt64) -> bool:
    proto 1 1
    // box_storage/contract.py:13-93
    //     self.box_map = BoxMap(UInt64, String, key_prefix="")
    // 
    // @arc4.abimethod
    // def set_boxes(self, a: UInt64, b: Bytes, c: arc4.String) -> None:
    //     self.box_a.value = a
    //     self.box_b.value = b
    //     self.box_c.value = c
    // 
    //     self.box_a.value += 3
    // 
    // @arc4.abimethod
    // def read_boxes(self) -> tuple[UInt64, Bytes, arc4.String]:
    //     return self.box_a.value, self.box_b.value, self.box_c.value
    // 
    // @arc4.abimethod
    // def boxes_exist(self) -> tuple[bool, bool, bool]:
    //     return bool(self.box_a), bool(self.box_b), bool(self.box_c)
    // 
    // @arc4.abimethod
    // def slice_box(self) -> None:
    //     box_0 = Box(Bytes, key=b"0")
    //     box_0.value = Bytes(b"Testing testing 123")
    //     assert box_0.value[0:7] == b"Testing"
    // 
    //     self.box_c.value = arc4.String("Hello")
    //     assert self.box_c.value.bytes[2:10] == b"Hello"
    // 
    // @arc4.abimethod
    // def arc4_box(self) -> None:
    //     box_d = Box(StaticInts, key=b"d")
    //     box_d.value = StaticInts(arc4.UInt8(0), arc4.UInt8(1), arc4.UInt8(2), arc4.UInt8(3))
    // 
    //     assert box_d.value[0] == 0
    //     assert box_d.value[1] == 1
    //     assert box_d.value[2] == 2
    //     assert box_d.value[3] == 3
    // 
    // @arc4.abimethod
    // def box_blob(self) -> None:
    //     box_blob = BoxRef(key="blob")
    //     sender_bytes = Txn.sender.bytes
    //     app_address = Global.current_application_address.bytes
    //     assert box_blob.create(size=8000)
    //     box_blob.replace(0, sender_bytes)
    //     box_blob.splice(0, 0, app_address)
    //     first_64 = box_blob.extract(0, 32 * 2)
    //     assert first_64 == app_address + sender_bytes
    //     assert box_blob.delete()
    // 
    //     value, exists = box_blob.maybe()
    //     assert not exists
    //     assert box_blob.get(default=sender_bytes) == sender_bytes
    //     box_blob.put(sender_bytes + app_address)
    //     assert box_blob, "Blob exists"
    //     assert box_blob.length == 64
    // 
    // @arc4.abimethod
    // def box_map_test(self) -> None:
    //     key_0 = UInt64(0)
    //     key_1 = UInt64(1)
    //     value = String("Hmmmmm")
    //     self.box_map[key_0] = value
    //     assert self.box_map[key_0].bytes.length == value.bytes.length
    //     assert self.box_map.length(key_0) == value.bytes.length
    // 
    //     assert self.box_map.get(key_1, default=String("default")) == String("default")
    //     value, exists = self.box_map.maybe(key_1)
    //     assert not exists
    //     assert key_0 in self.box_map
    // 
    // @arc4.abimethod
    // def box_map_set(self, key: UInt64, value: String) -> None:
    //     self.box_map[key] = value
    // 
    // @arc4.abimethod
    // def box_map_get(self, key: UInt64) -> String:
    //     return self.box_map[key]
    // 
    // @arc4.abimethod
    // def box_map_exists(self, key: UInt64) -> bool:
    //     return key in self.box_map
    frame_dig -1
    itob
    box_len
    bury 1
    // box_storage/contract.py:93
    // return key in self.box_map
    retsub
