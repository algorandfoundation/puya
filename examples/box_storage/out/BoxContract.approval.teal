#pragma version 10

examples.box_storage.contract.BoxContract.approval_program:
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@17
    method "set_boxes(uint64,byte[],string)void"
    method "check_keys()void"
    method "delete_boxes()void"
    method "read_boxes()(uint64,byte[],string)"
    method "boxes_exist()(bool,bool,bool)"
    method "slice_box()void"
    method "arc4_box()void"
    method "box_ref()void"
    method "box_map_test()void"
    method "box_map_set(uint64,string)void"
    method "box_map_get(uint64)string"
    method "box_map_del(uint64)void"
    method "box_map_exists(uint64)bool"
    txna ApplicationArgs 0
    match main_set_boxes_route@2 main_check_keys_route@3 main_delete_boxes_route@4 main_read_boxes_route@5 main_boxes_exist_route@6 main_slice_box_route@7 main_arc4_box_route@8 main_box_ref_route@9 main_box_map_test_route@10 main_box_map_set_route@11 main_box_map_get_route@12 main_box_map_del_route@13 main_box_map_exists_route@14
    err // reject transaction

main_set_boxes_route@2:
    // box_storage/contract.py:15
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    // box_storage/contract.py:15
    // @arc4.abimethod
    callsub set_boxes
    int 1
    return

main_check_keys_route@3:
    // box_storage/contract.py:27
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub check_keys
    int 1
    return

main_delete_boxes_route@4:
    // box_storage/contract.py:33
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub delete_boxes
    int 1
    return

main_read_boxes_route@5:
    // box_storage/contract.py:45
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub read_boxes
    cover 2
    swap
    itob
    swap
    dup
    len
    itob
    extract 6 2
    swap
    concat
    swap
    byte 0x000c
    concat
    swap
    dup
    len
    int 12
    +
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_boxes_exist_route@6:
    // box_storage/contract.py:49
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub boxes_exist
    cover 2
    swap
    byte 0x00
    int 0
    uncover 2
    setbit
    cover 2
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x00
    int 0
    uncover 3
    setbit
    swap
    int 0
    getbit
    uncover 2
    int 1
    uncover 2
    setbit
    swap
    int 0
    getbit
    int 2
    swap
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_slice_box_route@7:
    // box_storage/contract.py:53
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub slice_box
    int 1
    return

main_arc4_box_route@8:
    // box_storage/contract.py:62
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub arc4_box
    int 1
    return

main_box_ref_route@9:
    // box_storage/contract.py:72
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub box_ref
    int 1
    return

main_box_map_test_route@10:
    // box_storage/contract.py:109
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub box_map_test
    int 1
    return

main_box_map_set_route@11:
    // box_storage/contract.py:130
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    // box_storage/contract.py:130
    // @arc4.abimethod
    callsub box_map_set
    int 1
    return

main_box_map_get_route@12:
    // box_storage/contract.py:134
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // box_storage/contract.py:134
    // @arc4.abimethod
    callsub box_map_get
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_box_map_del_route@13:
    // box_storage/contract.py:138
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // box_storage/contract.py:138
    // @arc4.abimethod
    callsub box_map_del
    int 1
    return

main_box_map_exists_route@14:
    // box_storage/contract.py:142
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // box_storage/contract.py:142
    // @arc4.abimethod
    callsub box_map_exists
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@17:
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// examples.box_storage.contract.BoxContract.set_boxes(a: uint64, b: bytes, c: bytes) -> void:
set_boxes:
    // box_storage/contract.py:15-16
    // @arc4.abimethod
    // def set_boxes(self, a: UInt64, b: Bytes, c: arc4.String) -> None:
    proto 3 0
    // box_storage/contract.py:17
    // self.box_a.value = a
    frame_dig -3
    itob
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:17
    // self.box_a.value = a
    swap
    box_put
    // box_storage/contract.py:11
    // self.box_b = Box(Bytes, key="b")
    byte "b"
    // box_storage/contract.py:18
    // self.box_b.value = b
    box_del
    pop
    // box_storage/contract.py:11
    // self.box_b = Box(Bytes, key="b")
    byte "b"
    // box_storage/contract.py:18
    // self.box_b.value = b
    frame_dig -2
    box_put
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:19
    // self.box_c.value = c
    box_del
    pop
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:19
    // self.box_c.value = c
    frame_dig -1
    box_put
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:21
    // self.box_a.value += 3
    box_get
    swap
    btoi
    swap
    assert // check self.box_a exists
    int 3
    +
    itob
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:21
    // self.box_a.value += 3
    swap
    box_put
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:23
    // assert self.box_a.length == 8
    box_len
    assert // check self.box_a exists
    int 8
    ==
    assert
    // box_storage/contract.py:11
    // self.box_b = Box(Bytes, key="b")
    byte "b"
    // box_storage/contract.py:24
    // assert self.box_b.length == b.length
    box_len
    assert // check self.box_b exists
    frame_dig -2
    len
    ==
    assert
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:25
    // assert self.box_c.length == c.bytes.length
    box_len
    assert // check self.box_c exists
    frame_dig -1
    len
    ==
    assert
    retsub


// examples.box_storage.contract.BoxContract.check_keys() -> void:
check_keys:
    // box_storage/contract.py:27-28
    // @arc4.abimethod
    // def check_keys(self) -> None:
    proto 0 0
    retsub


// examples.box_storage.contract.BoxContract.delete_boxes() -> void:
delete_boxes:
    // box_storage/contract.py:33-34
    // @arc4.abimethod
    // def delete_boxes(self) -> None:
    proto 0 0
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:35
    // del self.box_a.value
    box_del
    pop
    // box_storage/contract.py:11
    // self.box_b = Box(Bytes, key="b")
    byte "b"
    // box_storage/contract.py:36
    // del self.box_b.value
    box_del
    pop
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:37
    // del self.box_c.value
    box_del
    pop
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:38
    // assert self.box_a.get(default=UInt64(42)) == 42
    box_get
    swap
    btoi
    int 42
    swap
    uncover 2
    select
    int 42
    ==
    assert
    // box_storage/contract.py:11
    // self.box_b = Box(Bytes, key="b")
    byte "b"
    // box_storage/contract.py:39
    // assert self.box_b.get(default=Bytes(b"42")) == b"42"
    box_get
    byte 0x3432
    cover 2
    select
    byte 0x3432
    ==
    assert
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:40
    // assert self.box_c.get(default=arc4.String("42")) == "42"
    box_get
    byte 0x00023432
    cover 2
    select
    byte 0x00023432
    ==
    assert
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:41
    // a, a_exists = self.box_a.maybe()
    box_get
    swap
    btoi
    swap
    // box_storage/contract.py:42
    // assert not a_exists
    !
    assert
    // box_storage/contract.py:43
    // assert a == 0
    !
    assert
    retsub


// examples.box_storage.contract.BoxContract.read_boxes() -> uint64, bytes, bytes:
read_boxes:
    // box_storage/contract.py:45-46
    // @arc4.abimethod
    // def read_boxes(self) -> tuple[UInt64, Bytes, arc4.String]:
    proto 0 3
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:47
    // return get_box_value_plus_1(self.box_a) - 1, self.box_b.value, self.box_c.value
    callsub get_box_value_plus_1
    int 1
    -
    // box_storage/contract.py:11
    // self.box_b = Box(Bytes, key="b")
    byte "b"
    // box_storage/contract.py:47
    // return get_box_value_plus_1(self.box_a) - 1, self.box_b.value, self.box_c.value
    box_get
    assert // check self.box_b exists
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:47
    // return get_box_value_plus_1(self.box_a) - 1, self.box_b.value, self.box_c.value
    box_get
    assert // check self.box_c exists
    retsub


// examples.box_storage.contract.get_box_value_plus_1(box: bytes) -> uint64:
get_box_value_plus_1:
    // box_storage/contract.py:147-148
    // @subroutine
    // def get_box_value_plus_1(box: Box[UInt64]) -> UInt64:
    proto 1 1
    // box_storage/contract.py:149
    // return box.value + 1
    frame_dig -1
    box_get
    swap
    btoi
    swap
    assert // check Box exists
    int 1
    +
    retsub


// examples.box_storage.contract.BoxContract.boxes_exist() -> uint64, uint64, uint64:
boxes_exist:
    // box_storage/contract.py:49-50
    // @arc4.abimethod
    // def boxes_exist(self) -> tuple[bool, bool, bool]:
    proto 0 3
    // box_storage/contract.py:10
    // self.box_a = Box(UInt64)
    byte "box_a"
    // box_storage/contract.py:51
    // return bool(self.box_a), bool(self.box_b), bool(self.box_c)
    box_len
    bury 1
    // box_storage/contract.py:11
    // self.box_b = Box(Bytes, key="b")
    byte "b"
    // box_storage/contract.py:51
    // return bool(self.box_a), bool(self.box_b), bool(self.box_c)
    box_len
    bury 1
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:51
    // return bool(self.box_a), bool(self.box_b), bool(self.box_c)
    box_len
    bury 1
    retsub


// examples.box_storage.contract.BoxContract.slice_box() -> void:
slice_box:
    // box_storage/contract.py:53-54
    // @arc4.abimethod
    // def slice_box(self) -> None:
    proto 0 0
    // box_storage/contract.py:55
    // box_0 = Box(Bytes, key=b"0")
    byte 0x30
    // box_storage/contract.py:56
    // box_0.value = Bytes(b"Testing testing 123")
    box_del
    pop
    // box_storage/contract.py:55
    // box_0 = Box(Bytes, key=b"0")
    byte 0x30
    // box_storage/contract.py:56
    // box_0.value = Bytes(b"Testing testing 123")
    byte 0x54657374696e672074657374696e6720313233
    box_put
    // box_storage/contract.py:55
    // box_0 = Box(Bytes, key=b"0")
    byte 0x30
    // box_storage/contract.py:57
    // assert box_0.value[0:7] == b"Testing"
    box_len
    pop
    dup
    int 0
    dig 2
    select
    swap
    int 7
    dig 1
    <
    int 7
    swap
    select
    dig 1
    -
    // box_storage/contract.py:55
    // box_0 = Box(Bytes, key=b"0")
    byte 0x30
    // box_storage/contract.py:57
    // assert box_0.value[0:7] == b"Testing"
    cover 2
    box_extract
    byte 0x54657374696e67
    ==
    assert
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:59
    // self.box_c.value = arc4.String("Hello")
    box_del
    pop
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:59
    // self.box_c.value = arc4.String("Hello")
    byte 0x000548656c6c6f
    box_put
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:60
    // assert self.box_c.value.bytes[2:10] == b"Hello"
    box_len
    pop
    int 2
    dig 1
    <
    swap
    dup
    int 2
    uncover 3
    select
    swap
    int 10
    dig 1
    <
    int 10
    swap
    select
    dig 1
    -
    // box_storage/contract.py:12
    // self.box_c = Box(arc4.String, key=b"BOX_C")
    byte 0x424f585f43
    // box_storage/contract.py:60
    // assert self.box_c.value.bytes[2:10] == b"Hello"
    cover 2
    box_extract
    byte 0x48656c6c6f
    ==
    assert
    retsub


// examples.box_storage.contract.BoxContract.arc4_box() -> void:
arc4_box:
    // box_storage/contract.py:62-63
    // @arc4.abimethod
    // def arc4_box(self) -> None:
    proto 0 0
    // box_storage/contract.py:64
    // box_d = Box(StaticInts, key=b"d")
    byte 0x64
    // box_storage/contract.py:65
    // box_d.value = StaticInts(arc4.UInt8(0), arc4.UInt8(1), arc4.UInt8(2), arc4.UInt8(3))
    byte 0x00010203
    box_put
    // box_storage/contract.py:64
    // box_d = Box(StaticInts, key=b"d")
    byte 0x64
    // box_storage/contract.py:67
    // assert box_d.value[0] == 0
    box_get
    assert // check Box exists
    extract 0 1 // on error: Index access is out of bounds
    byte 0x00
    b==
    assert
    // box_storage/contract.py:64
    // box_d = Box(StaticInts, key=b"d")
    byte 0x64
    // box_storage/contract.py:68
    // assert box_d.value[1] == 1
    box_get
    assert // check Box exists
    extract 1 1 // on error: Index access is out of bounds
    byte 0x01
    b==
    assert
    // box_storage/contract.py:64
    // box_d = Box(StaticInts, key=b"d")
    byte 0x64
    // box_storage/contract.py:69
    // assert box_d.value[2] == 2
    box_get
    assert // check Box exists
    extract 2 1 // on error: Index access is out of bounds
    byte 0x02
    b==
    assert
    // box_storage/contract.py:64
    // box_d = Box(StaticInts, key=b"d")
    byte 0x64
    // box_storage/contract.py:70
    // assert box_d.value[3] == 3
    box_get
    assert // check Box exists
    extract 3 1 // on error: Index access is out of bounds
    byte 0x03
    b==
    assert
    retsub


// examples.box_storage.contract.BoxContract.box_ref() -> void:
box_ref:
    // box_storage/contract.py:72-73
    // @arc4.abimethod
    // def box_ref(self) -> None:
    proto 0 0
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:76
    // assert not box_ref, "no data"
    box_len
    bury 1
    !
    assert // no data
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:78-79
    // # create
    // assert box_ref.create(size=32)
    int 32
    box_create
    assert
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:80
    // assert box_ref, "has data"
    box_len
    bury 1
    assert // has data
    // box_storage/contract.py:84
    // app_address = Global.current_application_address.bytes
    global CurrentApplicationAddress
    // box_storage/contract.py:82-83
    // # manipulate data
    // sender_bytes = Txn.sender.bytes
    txn Sender
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:86
    // box_ref.replace(0, sender_bytes)
    int 0
    dig 2
    box_replace
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:87
    // box_ref.resize(8000)
    int 8000
    box_resize
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:88
    // box_ref.splice(0, 0, app_address)
    int 0
    dup
    dig 4
    box_splice
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:89
    // box_ref.replace(64, value_3)
    int 64
    // box_storage/contract.py:85
    // value_3 = Bytes(b"hello")
    byte 0x68656c6c6f
    // box_storage/contract.py:89
    // box_ref.replace(64, value_3)
    box_replace
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:90
    // prefix = box_ref.extract(0, 32 * 2 + value_3.length)
    int 0
    int 69
    box_extract
    // box_storage/contract.py:91
    // assert prefix == app_address + sender_bytes + value_3
    dig 2
    dig 2
    concat
    // box_storage/contract.py:85
    // value_3 = Bytes(b"hello")
    byte 0x68656c6c6f
    // box_storage/contract.py:91
    // assert prefix == app_address + sender_bytes + value_3
    concat
    ==
    assert
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:93-94
    // # delete
    // assert box_ref.delete()
    box_del
    assert
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:97-98
    // # query
    // value, exists = box_ref.maybe()
    box_get
    // box_storage/contract.py:99
    // assert not exists
    !
    assert
    // box_storage/contract.py:100
    // assert value == b""
    byte 0x
    ==
    assert
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:101
    // assert box_ref.get(default=sender_bytes) == sender_bytes
    box_get
    dig 2
    cover 2
    select
    dig 1
    ==
    assert
    // box_storage/contract.py:103-104
    // # update
    // box_ref.put(sender_bytes + app_address)
    swap
    concat
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:103-104
    // # update
    // box_ref.put(sender_bytes + app_address)
    swap
    box_put
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:105
    // assert box_ref, "Blob exists"
    box_len
    bury 1
    assert // Blob exists
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:106
    // assert box_ref.length == 64
    box_len
    assert // check BoxRef exists
    int 64
    ==
    assert
    // box_storage/contract.py:74-75
    // # init ref
    // box_ref = BoxRef(key="blob")
    byte "blob"
    // box_storage/contract.py:107
    // assert get_box_ref_length(box_ref) == 64
    callsub get_box_ref_length
    int 64
    ==
    assert
    retsub


// examples.box_storage.contract.get_box_ref_length(ref: bytes) -> uint64:
get_box_ref_length:
    // box_storage/contract.py:152-153
    // @subroutine
    // def get_box_ref_length(ref: BoxRef) -> UInt64:
    proto 1 1
    // box_storage/contract.py:154
    // return ref.length
    frame_dig -1
    box_len
    assert // check BoxRef exists
    retsub


// examples.box_storage.contract.BoxContract.box_map_test() -> void:
box_map_test:
    // box_storage/contract.py:109-110
    // @arc4.abimethod
    // def box_map_test(self) -> None:
    proto 0 0
    // box_storage/contract.py:111
    // key_0 = UInt64(0)
    int 0
    // box_storage/contract.py:114
    // self.box_map[key_0] = value
    itob
    dup
    box_del
    pop
    dup
    // box_storage/contract.py:113
    // value = String("Hmmmmm")
    byte "Hmmmmm"
    // box_storage/contract.py:114
    // self.box_map[key_0] = value
    box_put
    // box_storage/contract.py:115
    // assert self.box_map[key_0].bytes.length == value.bytes.length
    dup
    box_len
    assert // check self.box_map entry exists
    int 6
    ==
    assert
    // box_storage/contract.py:116
    // assert self.box_map.length(key_0) == value.bytes.length
    dup
    box_len
    assert // check self.box_map entry exists
    int 6
    ==
    assert
    // box_storage/contract.py:112
    // key_1 = UInt64(1)
    int 1
    // box_storage/contract.py:118
    // assert self.box_map.get(key_1, default=String("default")) == String("default")
    itob
    dup
    box_get
    byte "default"
    cover 2
    select
    byte "default"
    ==
    assert
    // box_storage/contract.py:119
    // value, exists = self.box_map.maybe(key_1)
    dup
    box_get
    bury 1
    // box_storage/contract.py:120
    // assert not exists
    !
    assert
    // box_storage/contract.py:13-121
    //     self.box_map = BoxMap(UInt64, String, key_prefix="")
    // 
    // @arc4.abimethod
    // def set_boxes(self, a: UInt64, b: Bytes, c: arc4.String) -> None:
    //     self.box_a.value = a
    //     self.box_b.value = b
    //     self.box_c.value = c
    // 
    //     self.box_a.value += 3
    // 
    //     assert self.box_a.length == 8
    //     assert self.box_b.length == b.length
    //     assert self.box_c.length == c.bytes.length
    // 
    // @arc4.abimethod
    // def check_keys(self) -> None:
    //     assert self.box_a.key == b"box_a", "box a key ok"
    //     assert self.box_b.key == b"b", "box b key ok"
    //     assert self.box_c.key == b"BOX_C", "box c key ok"
    // 
    // @arc4.abimethod
    // def delete_boxes(self) -> None:
    //     del self.box_a.value
    //     del self.box_b.value
    //     del self.box_c.value
    //     assert self.box_a.get(default=UInt64(42)) == 42
    //     assert self.box_b.get(default=Bytes(b"42")) == b"42"
    //     assert self.box_c.get(default=arc4.String("42")) == "42"
    //     a, a_exists = self.box_a.maybe()
    //     assert not a_exists
    //     assert a == 0
    // 
    // @arc4.abimethod
    // def read_boxes(self) -> tuple[UInt64, Bytes, arc4.String]:
    //     return get_box_value_plus_1(self.box_a) - 1, self.box_b.value, self.box_c.value
    // 
    // @arc4.abimethod
    // def boxes_exist(self) -> tuple[bool, bool, bool]:
    //     return bool(self.box_a), bool(self.box_b), bool(self.box_c)
    // 
    // @arc4.abimethod
    // def slice_box(self) -> None:
    //     box_0 = Box(Bytes, key=b"0")
    //     box_0.value = Bytes(b"Testing testing 123")
    //     assert box_0.value[0:7] == b"Testing"
    // 
    //     self.box_c.value = arc4.String("Hello")
    //     assert self.box_c.value.bytes[2:10] == b"Hello"
    // 
    // @arc4.abimethod
    // def arc4_box(self) -> None:
    //     box_d = Box(StaticInts, key=b"d")
    //     box_d.value = StaticInts(arc4.UInt8(0), arc4.UInt8(1), arc4.UInt8(2), arc4.UInt8(3))
    // 
    //     assert box_d.value[0] == 0
    //     assert box_d.value[1] == 1
    //     assert box_d.value[2] == 2
    //     assert box_d.value[3] == 3
    // 
    // @arc4.abimethod
    // def box_ref(self) -> None:
    //     # init ref
    //     box_ref = BoxRef(key="blob")
    //     assert not box_ref, "no data"
    // 
    //     # create
    //     assert box_ref.create(size=32)
    //     assert box_ref, "has data"
    // 
    //     # manipulate data
    //     sender_bytes = Txn.sender.bytes
    //     app_address = Global.current_application_address.bytes
    //     value_3 = Bytes(b"hello")
    //     box_ref.replace(0, sender_bytes)
    //     box_ref.resize(8000)
    //     box_ref.splice(0, 0, app_address)
    //     box_ref.replace(64, value_3)
    //     prefix = box_ref.extract(0, 32 * 2 + value_3.length)
    //     assert prefix == app_address + sender_bytes + value_3
    // 
    //     # delete
    //     assert box_ref.delete()
    //     assert box_ref.key == b"blob"
    // 
    //     # query
    //     value, exists = box_ref.maybe()
    //     assert not exists
    //     assert value == b""
    //     assert box_ref.get(default=sender_bytes) == sender_bytes
    // 
    //     # update
    //     box_ref.put(sender_bytes + app_address)
    //     assert box_ref, "Blob exists"
    //     assert box_ref.length == 64
    //     assert get_box_ref_length(box_ref) == 64
    // 
    // @arc4.abimethod
    // def box_map_test(self) -> None:
    //     key_0 = UInt64(0)
    //     key_1 = UInt64(1)
    //     value = String("Hmmmmm")
    //     self.box_map[key_0] = value
    //     assert self.box_map[key_0].bytes.length == value.bytes.length
    //     assert self.box_map.length(key_0) == value.bytes.length
    // 
    //     assert self.box_map.get(key_1, default=String("default")) == String("default")
    //     value, exists = self.box_map.maybe(key_1)
    //     assert not exists
    //     assert key_0 in self.box_map
    swap
    box_len
    bury 1
    // box_storage/contract.py:121
    // assert key_0 in self.box_map
    assert
    // box_storage/contract.py:126
    // tmp_box_map[key_1] = String("hello")
    dup
    box_del
    pop
    dup
    byte "hello"
    box_put
    // box_storage/contract.py:124-125
    // # test box map not assigned to the class and passed to subroutine
    // tmp_box_map = BoxMap(UInt64, String, key_prefix=b"")
    byte 0x
    // box_storage/contract.py:127
    // assert get_box_map_value_from_key_plus_1(tmp_box_map, UInt64(0)) == "hello"
    int 0
    callsub get_box_map_value_from_key_plus_1
    byte "hello"
    ==
    assert
    // box_storage/contract.py:128
    // del tmp_box_map[key_1]
    box_del
    pop
    retsub


// examples.box_storage.contract.get_box_map_value_from_key_plus_1(box_map: bytes, key: uint64) -> bytes:
get_box_map_value_from_key_plus_1:
    // box_storage/contract.py:157-158
    // @subroutine
    // def get_box_map_value_from_key_plus_1(box_map: BoxMap[UInt64, String], key: UInt64) -> String:
    proto 2 1
    // box_storage/contract.py:159
    // return box_map[key + 1]
    frame_dig -1
    int 1
    +
    itob
    frame_dig -2
    swap
    concat
    box_get
    assert // check BoxMap entry exists
    retsub


// examples.box_storage.contract.BoxContract.box_map_set(key: uint64, value: bytes) -> void:
box_map_set:
    // box_storage/contract.py:130-131
    // @arc4.abimethod
    // def box_map_set(self, key: UInt64, value: String) -> None:
    proto 2 0
    // box_storage/contract.py:132
    // self.box_map[key] = value
    frame_dig -2
    itob
    dup
    box_del
    pop
    frame_dig -1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.box_map_get(key: uint64) -> bytes:
box_map_get:
    // box_storage/contract.py:134-135
    // @arc4.abimethod
    // def box_map_get(self, key: UInt64) -> String:
    proto 1 1
    // box_storage/contract.py:136
    // return self.box_map[key]
    frame_dig -1
    itob
    box_get
    assert // check self.box_map entry exists
    retsub


// examples.box_storage.contract.BoxContract.box_map_del(key: uint64) -> void:
box_map_del:
    // box_storage/contract.py:138-139
    // @arc4.abimethod
    // def box_map_del(self, key: UInt64) -> None:
    proto 1 0
    // box_storage/contract.py:140
    // del self.box_map[key]
    frame_dig -1
    itob
    box_del
    pop
    retsub


// examples.box_storage.contract.BoxContract.box_map_exists(key: uint64) -> uint64:
box_map_exists:
    // box_storage/contract.py:142-143
    // @arc4.abimethod
    // def box_map_exists(self, key: UInt64) -> bool:
    proto 1 1
    // box_storage/contract.py:13-144
    //     self.box_map = BoxMap(UInt64, String, key_prefix="")
    // 
    // @arc4.abimethod
    // def set_boxes(self, a: UInt64, b: Bytes, c: arc4.String) -> None:
    //     self.box_a.value = a
    //     self.box_b.value = b
    //     self.box_c.value = c
    // 
    //     self.box_a.value += 3
    // 
    //     assert self.box_a.length == 8
    //     assert self.box_b.length == b.length
    //     assert self.box_c.length == c.bytes.length
    // 
    // @arc4.abimethod
    // def check_keys(self) -> None:
    //     assert self.box_a.key == b"box_a", "box a key ok"
    //     assert self.box_b.key == b"b", "box b key ok"
    //     assert self.box_c.key == b"BOX_C", "box c key ok"
    // 
    // @arc4.abimethod
    // def delete_boxes(self) -> None:
    //     del self.box_a.value
    //     del self.box_b.value
    //     del self.box_c.value
    //     assert self.box_a.get(default=UInt64(42)) == 42
    //     assert self.box_b.get(default=Bytes(b"42")) == b"42"
    //     assert self.box_c.get(default=arc4.String("42")) == "42"
    //     a, a_exists = self.box_a.maybe()
    //     assert not a_exists
    //     assert a == 0
    // 
    // @arc4.abimethod
    // def read_boxes(self) -> tuple[UInt64, Bytes, arc4.String]:
    //     return get_box_value_plus_1(self.box_a) - 1, self.box_b.value, self.box_c.value
    // 
    // @arc4.abimethod
    // def boxes_exist(self) -> tuple[bool, bool, bool]:
    //     return bool(self.box_a), bool(self.box_b), bool(self.box_c)
    // 
    // @arc4.abimethod
    // def slice_box(self) -> None:
    //     box_0 = Box(Bytes, key=b"0")
    //     box_0.value = Bytes(b"Testing testing 123")
    //     assert box_0.value[0:7] == b"Testing"
    // 
    //     self.box_c.value = arc4.String("Hello")
    //     assert self.box_c.value.bytes[2:10] == b"Hello"
    // 
    // @arc4.abimethod
    // def arc4_box(self) -> None:
    //     box_d = Box(StaticInts, key=b"d")
    //     box_d.value = StaticInts(arc4.UInt8(0), arc4.UInt8(1), arc4.UInt8(2), arc4.UInt8(3))
    // 
    //     assert box_d.value[0] == 0
    //     assert box_d.value[1] == 1
    //     assert box_d.value[2] == 2
    //     assert box_d.value[3] == 3
    // 
    // @arc4.abimethod
    // def box_ref(self) -> None:
    //     # init ref
    //     box_ref = BoxRef(key="blob")
    //     assert not box_ref, "no data"
    // 
    //     # create
    //     assert box_ref.create(size=32)
    //     assert box_ref, "has data"
    // 
    //     # manipulate data
    //     sender_bytes = Txn.sender.bytes
    //     app_address = Global.current_application_address.bytes
    //     value_3 = Bytes(b"hello")
    //     box_ref.replace(0, sender_bytes)
    //     box_ref.resize(8000)
    //     box_ref.splice(0, 0, app_address)
    //     box_ref.replace(64, value_3)
    //     prefix = box_ref.extract(0, 32 * 2 + value_3.length)
    //     assert prefix == app_address + sender_bytes + value_3
    // 
    //     # delete
    //     assert box_ref.delete()
    //     assert box_ref.key == b"blob"
    // 
    //     # query
    //     value, exists = box_ref.maybe()
    //     assert not exists
    //     assert value == b""
    //     assert box_ref.get(default=sender_bytes) == sender_bytes
    // 
    //     # update
    //     box_ref.put(sender_bytes + app_address)
    //     assert box_ref, "Blob exists"
    //     assert box_ref.length == 64
    //     assert get_box_ref_length(box_ref) == 64
    // 
    // @arc4.abimethod
    // def box_map_test(self) -> None:
    //     key_0 = UInt64(0)
    //     key_1 = UInt64(1)
    //     value = String("Hmmmmm")
    //     self.box_map[key_0] = value
    //     assert self.box_map[key_0].bytes.length == value.bytes.length
    //     assert self.box_map.length(key_0) == value.bytes.length
    // 
    //     assert self.box_map.get(key_1, default=String("default")) == String("default")
    //     value, exists = self.box_map.maybe(key_1)
    //     assert not exists
    //     assert key_0 in self.box_map
    //     assert self.box_map.key_prefix == b""
    // 
    //     # test box map not assigned to the class and passed to subroutine
    //     tmp_box_map = BoxMap(UInt64, String, key_prefix=b"")
    //     tmp_box_map[key_1] = String("hello")
    //     assert get_box_map_value_from_key_plus_1(tmp_box_map, UInt64(0)) == "hello"
    //     del tmp_box_map[key_1]
    // 
    // @arc4.abimethod
    // def box_map_set(self, key: UInt64, value: String) -> None:
    //     self.box_map[key] = value
    // 
    // @arc4.abimethod
    // def box_map_get(self, key: UInt64) -> String:
    //     return self.box_map[key]
    // 
    // @arc4.abimethod
    // def box_map_del(self, key: UInt64) -> None:
    //     del self.box_map[key]
    // 
    // @arc4.abimethod
    // def box_map_exists(self, key: UInt64) -> bool:
    //     return key in self.box_map
    frame_dig -1
    itob
    box_len
    bury 1
    // box_storage/contract.py:144
    // return key in self.box_map
    retsub
