#pragma version 10
#pragma typetrack false

// examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 2 5
    bytecblock 0x424f585f43 0x626c6f62 "box_d" "box_a" "b" 0x00 0x64 0x151f7c75 "0" 0x68656c6c6f 0x00023432 "box_ref" "default"
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@18
    pushbytess 0x7d37296e 0x33325d3d 0xd566c632 0xfbda9ba0 0xe5a3ed52 0x04ef4971 0x23ecb32c 0xeef75816 0xb532913a 0xc29f1669 0x9c888c09 0xe6f68506 0x8ee2c364 // method "set_boxes(uint64,byte[],string)void", method "check_keys()void", method "delete_boxes()void", method "read_boxes()(uint64,byte[],string)", method "boxes_exist()(bool,bool,bool)", method "slice_box()void", method "arc4_box()void", method "test_box_ref()void", method "box_map_test()void", method "box_map_set(uint64,string)void", method "box_map_get(uint64)string", method "box_map_del(uint64)void", method "box_map_exists(uint64)bool"
    txna ApplicationArgs 0
    match main_set_boxes_route@5 main_check_keys_route@6 main_delete_boxes_route@7 main_read_boxes_route@8 main_boxes_exist_route@9 main_slice_box_route@10 main_arc4_box_route@11 main_test_box_ref_route@12 main_box_map_test_route@13 main_box_map_set_route@14 main_box_map_get_route@15 main_box_map_del_route@16 main_box_map_exists_route@17

main_after_if_else@20:
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    intc_1 // 0
    return

main_box_map_exists_route@17:
    // box_storage/contract.py:174
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // box_storage/contract.py:174
    // @arc4.abimethod
    callsub box_map_exists
    bytec 5 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_box_map_del_route@16:
    // box_storage/contract.py:170
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // box_storage/contract.py:170
    // @arc4.abimethod
    callsub box_map_del
    intc_0 // 1
    return

main_box_map_get_route@15:
    // box_storage/contract.py:166
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // box_storage/contract.py:166
    // @arc4.abimethod
    callsub box_map_get
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_box_map_set_route@14:
    // box_storage/contract.py:162
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    // box_storage/contract.py:162
    // @arc4.abimethod
    callsub box_map_set
    intc_0 // 1
    return

main_box_map_test_route@13:
    // box_storage/contract.py:141
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub box_map_test
    intc_0 // 1
    return

main_test_box_ref_route@12:
    // box_storage/contract.py:93
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub test_box_ref
    intc_0 // 1
    return

main_arc4_box_route@11:
    // box_storage/contract.py:83
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub arc4_box
    intc_0 // 1
    return

main_slice_box_route@10:
    // box_storage/contract.py:74
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub slice_box
    intc_0 // 1
    return

main_boxes_exist_route@9:
    // box_storage/contract.py:70
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub boxes_exist
    bytec 5 // 0x00
    intc_1 // 0
    uncover 4
    setbit
    bytec 5 // 0x00
    intc_1 // 0
    uncover 4
    setbit
    bytec 5 // 0x00
    intc_1 // 0
    uncover 4
    setbit
    swap
    intc_1 // 0
    getbit
    uncover 2
    intc_0 // 1
    uncover 2
    setbit
    swap
    intc_1 // 0
    getbit
    intc_2 // 2
    swap
    setbit
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_read_boxes_route@8:
    // box_storage/contract.py:66
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub read_boxes
    uncover 2
    itob
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    swap
    pushbytes 0x000c
    concat
    dig 1
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    concat
    swap
    concat
    swap
    concat
    bytec 7 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_delete_boxes_route@7:
    // box_storage/contract.py:54
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub delete_boxes
    intc_0 // 1
    return

main_check_keys_route@6:
    // box_storage/contract.py:48
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    intc_0 // 1
    return

main_set_boxes_route@5:
    // box_storage/contract.py:17
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // box_storage/contract.py:17
    // @arc4.abimethod
    callsub set_boxes
    intc_0 // 1
    return

main_bare_routing@18:
    // box_storage/contract.py:8
    // class BoxContract(arc4.ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@20
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// examples.box_storage.contract.BoxContract.set_boxes(a: uint64, b: bytes, c: bytes) -> void:
set_boxes:
    // box_storage/contract.py:17-18
    // @arc4.abimethod
    // def set_boxes(self, a: UInt64, b: arc4.DynamicBytes, c: arc4.String) -> None:
    proto 3 0
    // box_storage/contract.py:19
    // self.box_a.value = a
    frame_dig -3
    itob
    bytec_3 // "box_a"
    swap
    box_put
    // box_storage/contract.py:20
    // self.box_b.value = b.copy()
    bytec 4 // "b"
    box_del
    pop
    bytec 4 // "b"
    frame_dig -2
    box_put
    // box_storage/contract.py:21
    // self.box_c.value = c
    bytec_0 // 0x424f585f43
    box_del
    pop
    bytec_0 // 0x424f585f43
    frame_dig -1
    box_put
    // box_storage/contract.py:22
    // self.box_d.value = b.native
    frame_dig -2
    extract 2 0
    bytec_2 // "box_d"
    box_del
    pop
    bytec_2 // "box_d"
    dig 1
    box_put
    // box_storage/contract.py:24
    // b_value = self.box_b.value.copy()
    bytec 4 // "b"
    box_get
    assert // check self.box_b exists
    // box_storage/contract.py:25
    // assert self.box_b.value.length == b_value.length, "direct reference should match copy"
    bytec 4 // "b"
    box_get
    assert // check self.box_b exists
    intc_1 // 0
    extract_uint16
    swap
    intc_1 // 0
    extract_uint16
    ==
    assert // direct reference should match copy
    // box_storage/contract.py:27
    // self.box_a.value += 3
    bytec_3 // "box_a"
    box_get
    swap
    btoi
    swap
    assert // check self.box_a exists
    pushint 3 // 3
    +
    itob
    bytec_3 // "box_a"
    swap
    box_put
    // box_storage/contract.py:29-30
    // # test .length
    // assert self.box_a.length == 8
    bytec_3 // "box_a"
    box_len
    assert // check self.box_a exists
    pushint 8 // 8
    ==
    assert
    // box_storage/contract.py:31
    // assert self.box_b.length == b.bytes.length
    bytec 4 // "b"
    box_len
    assert // check self.box_b exists
    frame_dig -2
    len
    ==
    assert
    // box_storage/contract.py:32
    // assert self.box_c.length == c.bytes.length
    bytec_0 // 0x424f585f43
    box_len
    assert // check self.box_c exists
    frame_dig -1
    len
    swap
    dig 1
    ==
    assert
    // box_storage/contract.py:33
    // assert self.box_d.length == b.native.length
    bytec_2 // "box_d"
    box_len
    assert // check self.box_d exists
    dig 2
    len
    swap
    dig 1
    ==
    assert
    // box_storage/contract.py:35-36
    // # test .value.bytes
    // assert self.box_c.value.bytes[0] == c.bytes[0]
    bytec_0 // 0x424f585f43
    intc_1 // 0
    intc_0 // 1
    box_extract
    frame_dig -1
    extract 0 1
    ==
    assert
    // box_storage/contract.py:37
    // assert self.box_c.value.bytes[-1] == c.bytes[-1]
    bytec_0 // 0x424f585f43
    box_len
    pop
    intc_0 // 1
    -
    bytec_0 // 0x424f585f43
    swap
    intc_0 // 1
    box_extract
    dig 2
    intc_0 // 1
    -
    frame_dig -1
    swap
    intc_0 // 1
    extract3
    ==
    assert
    // box_storage/contract.py:38
    // assert self.box_c.value.bytes[:-1] == c.bytes[:-1]
    bytec_0 // 0x424f585f43
    box_len
    pop
    intc_0 // 1
    dig 1
    <
    dig 1
    intc_0 // 1
    uncover 2
    select
    -
    bytec_0 // 0x424f585f43
    intc_1 // 0
    uncover 2
    box_extract
    intc_0 // 1
    dig 3
    >=
    intc_0 // 1
    dig 4
    uncover 2
    select
    dig 3
    swap
    -
    frame_dig -1
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    // box_storage/contract.py:39
    // assert self.box_c.value.bytes[:2] == c.bytes[:2]
    bytec_0 // 0x424f585f43
    box_len
    pop
    intc_2 // 2
    dig 1
    <
    intc_2 // 2
    swap
    select
    bytec_0 // 0x424f585f43
    intc_1 // 0
    uncover 2
    box_extract
    intc_2 // 2
    dig 3
    >=
    intc_2 // 2
    uncover 4
    uncover 2
    select
    frame_dig -1
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    // box_storage/contract.py:41-42
    // # test .value with Bytes type
    // assert self.box_d.value[0] == b.native[0]
    bytec_2 // "box_d"
    intc_1 // 0
    intc_0 // 1
    box_extract
    dig 2
    extract 0 1
    ==
    assert
    // box_storage/contract.py:43
    // assert self.box_d.value[-1] == b.native[-1]
    bytec_2 // "box_d"
    box_len
    pop
    intc_0 // 1
    -
    bytec_2 // "box_d"
    swap
    intc_0 // 1
    box_extract
    dig 1
    intc_0 // 1
    -
    dig 3
    swap
    intc_0 // 1
    extract3
    ==
    assert
    // box_storage/contract.py:44
    // assert self.box_d.value[:-1] == b.native[:-1]
    bytec_2 // "box_d"
    box_len
    pop
    intc_0 // 1
    dig 1
    <
    dig 1
    intc_0 // 1
    uncover 2
    select
    -
    bytec_2 // "box_d"
    intc_1 // 0
    uncover 2
    box_extract
    intc_0 // 1
    dig 2
    >=
    intc_0 // 1
    dig 3
    uncover 2
    select
    dig 2
    swap
    -
    dig 3
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    // box_storage/contract.py:45
    // assert self.box_d.value[:5] == b.native[:5]
    bytec_2 // "box_d"
    box_len
    pop
    intc_3 // 5
    dig 1
    <
    intc_3 // 5
    swap
    select
    bytec_2 // "box_d"
    intc_1 // 0
    uncover 2
    box_extract
    intc_3 // 5
    dig 2
    >=
    intc_3 // 5
    dig 3
    uncover 2
    select
    dig 3
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    // box_storage/contract.py:46
    // assert self.box_d.value[: UInt64(2)] == b.native[: UInt64(2)]
    bytec_2 // "box_d"
    box_len
    pop
    intc_2 // 2
    dig 1
    <
    intc_2 // 2
    swap
    select
    bytec_2 // "box_d"
    intc_1 // 0
    uncover 2
    box_extract
    intc_2 // 2
    dig 2
    >=
    intc_2 // 2
    uncover 3
    uncover 2
    select
    uncover 2
    intc_1 // 0
    uncover 2
    substring3
    ==
    assert
    retsub


// examples.box_storage.contract.BoxContract.delete_boxes() -> void:
delete_boxes:
    // box_storage/contract.py:54-55
    // @arc4.abimethod
    // def delete_boxes(self) -> None:
    proto 0 0
    // box_storage/contract.py:56
    // del self.box_a.value
    bytec_3 // "box_a"
    box_del
    pop
    // box_storage/contract.py:57
    // del self.box_b.value
    bytec 4 // "b"
    box_del
    pop
    // box_storage/contract.py:58
    // del self.box_c.value
    bytec_0 // 0x424f585f43
    box_del
    pop
    // box_storage/contract.py:59
    // assert self.box_a.get(default=UInt64(42)) == 42
    bytec_3 // "box_a"
    box_get
    swap
    btoi
    pushint 42 // 42
    swap
    uncover 2
    select
    pushint 42 // 42
    ==
    assert
    // box_storage/contract.py:60
    // assert self.box_b.get(default=arc4.DynamicBytes(b"42")).native == b"42"
    bytec 4 // "b"
    box_get
    bytec 10 // 0x00023432
    cover 2
    select
    extract 2 0
    pushbytes 0x3432
    ==
    assert
    // box_storage/contract.py:61
    // assert self.box_c.get(default=arc4.String("42")) == "42"
    bytec_0 // 0x424f585f43
    box_get
    bytec 10 // 0x00023432
    cover 2
    select
    bytec 10 // 0x00023432
    ==
    assert
    // box_storage/contract.py:62
    // a, a_exists = self.box_a.maybe()
    bytec_3 // "box_a"
    box_get
    swap
    btoi
    // box_storage/contract.py:63
    // assert not a_exists
    swap
    !
    assert
    // box_storage/contract.py:64
    // assert a == 0
    !
    assert
    retsub


// examples.box_storage.contract.BoxContract.read_boxes() -> uint64, bytes, bytes:
read_boxes:
    // box_storage/contract.py:66-67
    // @arc4.abimethod
    // def read_boxes(self) -> tuple[UInt64, Bytes, arc4.String]:
    proto 0 3
    // box_storage/contract.py:68
    // return get_box_value_plus_1(self.box_a) - 1, self.box_b.value.native, self.box_c.value
    bytec_3 // "box_a"
    // box_storage/contract.py:181
    // return box.value + 1
    box_get
    swap
    btoi
    swap
    assert // check Box exists
    intc_0 // 1
    +
    // box_storage/contract.py:68
    // return get_box_value_plus_1(self.box_a) - 1, self.box_b.value.native, self.box_c.value
    intc_0 // 1
    -
    bytec 4 // "b"
    box_get
    assert // check self.box_b exists
    extract 2 0
    bytec_0 // 0x424f585f43
    box_get
    assert // check self.box_c exists
    retsub


// examples.box_storage.contract.BoxContract.boxes_exist() -> uint64, uint64, uint64:
boxes_exist:
    // box_storage/contract.py:70-71
    // @arc4.abimethod
    // def boxes_exist(self) -> tuple[bool, bool, bool]:
    proto 0 3
    // box_storage/contract.py:72
    // return bool(self.box_a), bool(self.box_b), bool(self.box_c)
    bytec_3 // "box_a"
    box_len
    bury 1
    bytec 4 // "b"
    box_len
    bury 1
    bytec_0 // 0x424f585f43
    box_len
    bury 1
    retsub


// examples.box_storage.contract.BoxContract.slice_box() -> void:
slice_box:
    // box_storage/contract.py:74-75
    // @arc4.abimethod
    // def slice_box(self) -> None:
    proto 0 0
    // box_storage/contract.py:76
    // box_0 = Box(Bytes, key=String("0"))
    bytec 8 // "0"
    // box_storage/contract.py:77
    // box_0.value = Bytes(b"Testing testing 123")
    box_del
    pop
    // box_storage/contract.py:76
    // box_0 = Box(Bytes, key=String("0"))
    bytec 8 // "0"
    // box_storage/contract.py:77
    // box_0.value = Bytes(b"Testing testing 123")
    pushbytes 0x54657374696e672074657374696e6720313233
    box_put
    // box_storage/contract.py:76
    // box_0 = Box(Bytes, key=String("0"))
    bytec 8 // "0"
    // box_storage/contract.py:78
    // assert box_0.value[0:7] == b"Testing"
    box_len
    pop
    dup
    intc_1 // 0
    dig 2
    select
    pushint 7 // 7
    dig 2
    <
    uncover 2
    pushint 7 // 7
    uncover 2
    select
    dig 1
    -
    // box_storage/contract.py:76
    // box_0 = Box(Bytes, key=String("0"))
    bytec 8 // "0"
    // box_storage/contract.py:78
    // assert box_0.value[0:7] == b"Testing"
    cover 2
    box_extract
    pushbytes 0x54657374696e67
    ==
    assert
    // box_storage/contract.py:80
    // self.box_c.value = arc4.String("Hello")
    bytec_0 // 0x424f585f43
    box_del
    pop
    bytec_0 // 0x424f585f43
    pushbytes 0x000548656c6c6f
    box_put
    // box_storage/contract.py:81
    // assert self.box_c.value.bytes[2:10] == b"Hello"
    bytec_0 // 0x424f585f43
    box_len
    pop
    intc_2 // 2
    dig 1
    <
    dig 1
    intc_2 // 2
    uncover 2
    select
    pushint 10 // 10
    dig 2
    <
    uncover 2
    pushint 10 // 10
    uncover 2
    select
    dig 1
    -
    bytec_0 // 0x424f585f43
    cover 2
    box_extract
    pushbytes 0x48656c6c6f
    ==
    assert
    retsub


// examples.box_storage.contract.BoxContract.arc4_box() -> void:
arc4_box:
    // box_storage/contract.py:83-84
    // @arc4.abimethod
    // def arc4_box(self) -> None:
    proto 0 0
    // box_storage/contract.py:85
    // box_d = Box(StaticInts, key=Bytes(b"d"))
    bytec 6 // 0x64
    // box_storage/contract.py:86
    // box_d.value = StaticInts(arc4.UInt8(0), arc4.UInt8(1), arc4.UInt8(2), arc4.UInt8(3))
    pushbytes 0x00010203
    box_put
    // box_storage/contract.py:85
    // box_d = Box(StaticInts, key=Bytes(b"d"))
    bytec 6 // 0x64
    // box_storage/contract.py:88
    // assert box_d.value[0] == 0
    box_get
    assert // check Box exists
    extract 0 1 // on error: Index access is out of bounds
    bytec 5 // 0x00
    b==
    assert
    // box_storage/contract.py:85
    // box_d = Box(StaticInts, key=Bytes(b"d"))
    bytec 6 // 0x64
    // box_storage/contract.py:89
    // assert box_d.value[1] == 1
    box_get
    assert // check Box exists
    extract 1 1 // on error: Index access is out of bounds
    pushbytes 0x01
    b==
    assert
    // box_storage/contract.py:85
    // box_d = Box(StaticInts, key=Bytes(b"d"))
    bytec 6 // 0x64
    // box_storage/contract.py:90
    // assert box_d.value[2] == 2
    box_get
    assert // check Box exists
    extract 2 1 // on error: Index access is out of bounds
    pushbytes 0x02
    b==
    assert
    // box_storage/contract.py:85
    // box_d = Box(StaticInts, key=Bytes(b"d"))
    bytec 6 // 0x64
    // box_storage/contract.py:91
    // assert box_d.value[3] == 3
    box_get
    assert // check Box exists
    extract 3 1 // on error: Index access is out of bounds
    pushbytes 0x03
    b==
    assert
    retsub


// examples.box_storage.contract.BoxContract.test_box_ref() -> void:
test_box_ref:
    // box_storage/contract.py:93-94
    // @arc4.abimethod
    // def test_box_ref(self) -> None:
    proto 0 0
    // box_storage/contract.py:95-96
    // # init ref, with valid key types
    // box_ref = BoxRef(key="blob")
    bytec_1 // "blob"
    // box_storage/contract.py:97
    // assert not box_ref, "no data"
    box_len
    bury 1
    !
    assert // no data
    // box_storage/contract.py:98
    // box_ref = BoxRef(key=b"blob")
    bytec_1 // 0x626c6f62
    // box_storage/contract.py:99
    // assert not box_ref, "no data"
    box_len
    bury 1
    !
    assert // no data
    // box_storage/contract.py:100
    // box_ref = BoxRef(key=Bytes(b"blob"))
    bytec_1 // 0x626c6f62
    // box_storage/contract.py:101
    // assert not box_ref, "no data"
    box_len
    bury 1
    !
    assert // no data
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:103
    // assert not box_ref, "no data"
    box_len
    bury 1
    !
    assert // no data
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:105-106
    // # create
    // assert box_ref.create(size=32)
    pushint 32 // 32
    box_create
    assert
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:107
    // assert box_ref, "has data"
    box_len
    bury 1
    assert // has data
    // box_storage/contract.py:109-110
    // # manipulate data
    // sender_bytes = Txn.sender.bytes
    txn Sender
    // box_storage/contract.py:111
    // app_address = Global.current_application_address.bytes
    global CurrentApplicationAddress
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:113
    // box_ref.replace(0, sender_bytes)
    intc_1 // 0
    dig 3
    box_replace
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:114
    // box_ref.resize(8000)
    pushint 8000 // 8000
    box_resize
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:115
    // box_ref.splice(0, 0, app_address)
    intc_1 // 0
    dup
    dig 3
    box_splice
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:116
    // box_ref.replace(64, value_3)
    pushint 64 // 64
    // box_storage/contract.py:112
    // value_3 = Bytes(b"hello")
    bytec 9 // 0x68656c6c6f
    // box_storage/contract.py:116
    // box_ref.replace(64, value_3)
    box_replace
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:117
    // prefix = box_ref.extract(0, 32 * 2 + value_3.length)
    intc_1 // 0
    pushint 69 // 69
    box_extract
    // box_storage/contract.py:118
    // assert prefix == app_address + sender_bytes + value_3
    dig 1
    dig 3
    concat
    // box_storage/contract.py:112
    // value_3 = Bytes(b"hello")
    bytec 9 // 0x68656c6c6f
    // box_storage/contract.py:118
    // assert prefix == app_address + sender_bytes + value_3
    concat
    ==
    assert
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:120-121
    // # delete
    // assert box_ref.delete()
    box_del
    assert
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:124-125
    // # query
    // value, exists = box_ref.maybe()
    box_get
    // box_storage/contract.py:126
    // assert not exists
    !
    assert
    // box_storage/contract.py:127
    // assert value == b""
    pushbytes 0x
    ==
    assert
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:128
    // assert box_ref.get(default=sender_bytes) == sender_bytes
    box_get
    dig 3
    cover 2
    select
    dig 2
    ==
    assert
    // box_storage/contract.py:130-131
    // # update
    // box_ref.put(sender_bytes + app_address)
    concat
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:130-131
    // # update
    // box_ref.put(sender_bytes + app_address)
    swap
    box_put
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:132
    // assert box_ref, "Blob exists"
    box_len
    bury 1
    assert // Blob exists
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:133
    // assert box_ref.length == 64
    box_len
    assert // check BoxRef exists
    pushint 64 // 64
    ==
    assert
    // box_storage/contract.py:102
    // box_ref = BoxRef(key=String("blob"))
    bytec_1 // "blob"
    // box_storage/contract.py:186
    // return ref.length
    box_len
    assert // check BoxRef exists
    // box_storage/contract.py:134
    // assert get_box_ref_length(box_ref) == 64
    pushint 64 // 64
    ==
    assert
    // box_storage/contract.py:136-137
    // # instance box ref
    // self.box_ref.create(size=UInt64(32))
    bytec 11 // "box_ref"
    pushint 32 // 32
    box_create
    pop
    // box_storage/contract.py:138
    // assert self.box_ref, "has data"
    bytec 11 // "box_ref"
    box_len
    bury 1
    assert // has data
    // box_storage/contract.py:139
    // self.box_ref.delete()
    bytec 11 // "box_ref"
    box_del
    pop
    retsub


// examples.box_storage.contract.BoxContract.box_map_test() -> void:
box_map_test:
    // box_storage/contract.py:141-142
    // @arc4.abimethod
    // def box_map_test(self) -> None:
    proto 0 0
    // box_storage/contract.py:143
    // key_0 = UInt64(0)
    intc_1 // 0
    // box_storage/contract.py:146
    // self.box_map[key_0] = value
    itob
    dup
    box_del
    pop
    dup
    // box_storage/contract.py:145
    // value = String("Hmmmmm")
    pushbytes "Hmmmmm"
    // box_storage/contract.py:146
    // self.box_map[key_0] = value
    box_put
    // box_storage/contract.py:147
    // assert self.box_map[key_0].bytes.length == value.bytes.length
    dup
    box_len
    assert // check self.box_map entry exists
    pushint 6 // 6
    ==
    assert
    // box_storage/contract.py:148
    // assert self.box_map.length(key_0) == value.bytes.length
    dup
    box_len
    assert // check self.box_map entry exists
    pushint 6 // 6
    ==
    assert
    // box_storage/contract.py:144
    // key_1 = UInt64(1)
    intc_0 // 1
    // box_storage/contract.py:150
    // assert self.box_map.get(key_1, default=String("default")) == String("default")
    itob
    dup
    box_get
    bytec 12 // "default"
    cover 2
    select
    bytec 12 // "default"
    ==
    assert
    // box_storage/contract.py:151
    // value, exists = self.box_map.maybe(key_1)
    dup
    box_get
    bury 1
    // box_storage/contract.py:152
    // assert not exists
    !
    assert
    // box_storage/contract.py:153
    // assert key_0 in self.box_map
    swap
    box_len
    bury 1
    assert
    // box_storage/contract.py:158
    // tmp_box_map[key_1] = String("hello")
    dup
    box_del
    pop
    dup
    bytec 9 // "hello"
    box_put
    // box_storage/contract.py:191
    // return box_map[key + 1]
    dup
    box_get
    assert // check BoxMap entry exists
    // box_storage/contract.py:159
    // assert get_box_map_value_from_key_plus_1(tmp_box_map, UInt64(0)) == "hello"
    bytec 9 // "hello"
    ==
    assert
    // box_storage/contract.py:160
    // del tmp_box_map[key_1]
    box_del
    pop
    retsub


// examples.box_storage.contract.BoxContract.box_map_set(key: uint64, value: bytes) -> void:
box_map_set:
    // box_storage/contract.py:162-163
    // @arc4.abimethod
    // def box_map_set(self, key: UInt64, value: String) -> None:
    proto 2 0
    // box_storage/contract.py:164
    // self.box_map[key] = value
    frame_dig -2
    itob
    dup
    box_del
    pop
    frame_dig -1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.box_map_get(key: uint64) -> bytes:
box_map_get:
    // box_storage/contract.py:166-167
    // @arc4.abimethod
    // def box_map_get(self, key: UInt64) -> String:
    proto 1 1
    // box_storage/contract.py:168
    // return self.box_map[key]
    frame_dig -1
    itob
    box_get
    assert // check self.box_map entry exists
    retsub


// examples.box_storage.contract.BoxContract.box_map_del(key: uint64) -> void:
box_map_del:
    // box_storage/contract.py:170-171
    // @arc4.abimethod
    // def box_map_del(self, key: UInt64) -> None:
    proto 1 0
    // box_storage/contract.py:172
    // del self.box_map[key]
    frame_dig -1
    itob
    box_del
    pop
    retsub


// examples.box_storage.contract.BoxContract.box_map_exists(key: uint64) -> uint64:
box_map_exists:
    // box_storage/contract.py:174-175
    // @arc4.abimethod
    // def box_map_exists(self, key: UInt64) -> bool:
    proto 1 1
    // box_storage/contract.py:176
    // return key in self.box_map
    frame_dig -1
    itob
    box_len
    bury 1
    retsub
