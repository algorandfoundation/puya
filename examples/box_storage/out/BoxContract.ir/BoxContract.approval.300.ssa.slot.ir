main examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#3: uint64 = (txn NumAppArgs)
        goto tmp%0#3 ? block@4 : block@37
    block@4: // abi_routing_L80
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "set_boxes(uint64,byte[],string)void" => block@5, method "check_keys()void" => block@6, method "create_many_ints()void" => block@7, method "set_many_ints(uint64,uint64)void" => block@8, method "sum_many_ints()uint64" => block@9, method "delete_boxes()void" => block@10, method "indirect_extract_and_replace()void" => block@11, method "read_boxes()(uint64,byte[],string,uint64)" => block@12, method "boxes_exist()(bool,bool,bool,bool)" => block@13, method "create_dynamic_arr_struct()void" => block@14, method "delete_dynamic_arr_struct()void" => block@15, method "append_dynamic_arr_struct(uint64)uint64" => block@16, method "pop_dynamic_arr_struct(uint64)uint64" => block@17, method "set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void" => block@18, method "nested_write(uint64,uint64)void" => block@19, method "nested_read(uint64,uint64,uint64)uint64" => block@20, method "sum_dynamic_arr_struct()uint64" => block@21, method "create_dynamic_box()void" => block@22, method "delete_dynamic_box()void" => block@23, method "append_dynamic_box(uint64)uint64" => block@24, method "pop_dynamic_box(uint64)uint64" => block@25, method "sum_dynamic_box()uint64" => block@26, method "write_dynamic_box(uint64,uint64)void" => block@27, method "write_dynamic_arr_struct(uint64,uint64)void" => block@28, method "slice_box()void" => block@29, method "arc4_box()void" => block@30, method "test_box_ref()void" => block@31, method "box_map_test()void" => block@32, method "box_map_set(uint64,string)void" => block@33, method "box_map_get(uint64)string" => block@34, method "box_map_del(uint64)void" => block@35, method "box_map_exists(uint64)bool" => block@36, * => block@39}
    block@5: // set_boxes_route_L94
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        examples.box_storage.contract.BoxContract.set_boxes(tmp%7#0, reinterpret_Encoded(len+uint8[])%0#0, reinterpret_Encoded(len+utf8[])%0#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@40
    block@6: // check_keys_route_L130
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@40
    block@7: // create_many_ints_route_L137
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        (assert tmp%14#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.create_many_ints()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@40
    block@8: // set_many_ints_route_L141
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        (assert tmp%18#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%20#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%21#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        examples.box_storage.contract.BoxContract.set_many_ints(tmp%20#0, tmp%21#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@40
    block@9: // sum_many_ints_route_L145
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        (assert tmp%24#0) // can only call when not creating
        let tmp%26#0: uint64 = examples.box_storage.contract.BoxContract.sum_many_ints()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%26#0)
        let tmp%28#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%28#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@40
    block@10: // delete_boxes_route_L153
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        (assert tmp%31#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.delete_boxes()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#5: bool = 1u
        goto block@40
    block@11: // indirect_extract_and_replace_route_L166
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        (assert tmp%35#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.indirect_extract_and_replace()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#6: bool = 1u
        goto block@40
    block@12: // read_boxes_route_L172
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        (assert tmp%39#0) // can only call when not creating
        let (tmp%41#0: uint64, tmp%42#0: bytes, tmp%43#0: Encoded(len+utf8[]), tmp%44#0: uint64) = examples.box_storage.contract.BoxContract.read_boxes()
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%41#0)
        let aggregate%length%0#0: uint64 = (len tmp%42#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%42#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%1#0 0x0014)
        let aggregate%data_length%0#0: uint64 = (len aggregate%encoded_value%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 20u aggregate%data_length%0#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%44#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%val_as_bytes%2#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%encoded_value%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%43#0)
        let tmp%46#0: bytes = (concat 0x151f7c75 aggregate%concat%1#0)
        (log tmp%46#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#7: bool = 1u
        goto block@40
    block@13: // boxes_exist_route_L181
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (! tmp%47#0)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        (assert tmp%49#0) // can only call when not creating
        let (tmp%51#0: bool, tmp%52#0: bool, tmp%53#0: bool, tmp%54#0: bool) = examples.box_storage.contract.BoxContract.boxes_exist()
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%51#0)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u tmp%52#0)
        let aggregate%set_bit%1#0: bytes[1] = (setbit aggregate%set_bit%0#0 2u tmp%53#0)
        let aggregate%set_bit%2#0: bytes[1] = (setbit aggregate%set_bit%1#0 3u tmp%54#0)
        let tmp%56#0: bytes = (concat 0x151f7c75 aggregate%set_bit%2#0)
        (log tmp%56#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#8: bool = 1u
        goto block@40
    block@14: // create_dynamic_arr_struct_route_L185
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (! tmp%57#0)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        (assert tmp%59#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.create_dynamic_arr_struct()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#9: bool = 1u
        goto block@40
    block@15: // delete_dynamic_arr_struct_route_L194
        let tmp%61#0: uint64 = (txn OnCompletion)
        let tmp%62#0: bool = (! tmp%61#0)
        (assert tmp%62#0) // OnCompletion is not NoOp
        let tmp%63#0: uint64 = (txn ApplicationID)
        (assert tmp%63#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#10: bool = 1u
        goto block@40
    block@16: // append_dynamic_arr_struct_route_L198
        let tmp%65#0: uint64 = (txn OnCompletion)
        let tmp%66#0: bool = (! tmp%65#0)
        (assert tmp%66#0) // OnCompletion is not NoOp
        let tmp%67#0: uint64 = (txn ApplicationID)
        (assert tmp%67#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%69#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let tmp%70#0: uint64 = examples.box_storage.contract.BoxContract.append_dynamic_arr_struct(tmp%69#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%70#0)
        let tmp%72#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%3#0)
        (log tmp%72#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#11: bool = 1u
        goto block@40
    block@17: // pop_dynamic_arr_struct_route_L230
        let tmp%73#0: uint64 = (txn OnCompletion)
        let tmp%74#0: bool = (! tmp%73#0)
        (assert tmp%74#0) // OnCompletion is not NoOp
        let tmp%75#0: uint64 = (txn ApplicationID)
        (assert tmp%75#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%77#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        let tmp%78#0: uint64 = examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct(tmp%77#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%78#0)
        let tmp%80#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%4#0)
        (log tmp%80#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#12: bool = 1u
        goto block@40
    block@18: // set_nested_struct_route_L252
        let tmp%81#0: uint64 = (txn OnCompletion)
        let tmp%82#0: bool = (! tmp%81#0)
        (assert tmp%82#0) // OnCompletion is not NoOp
        let tmp%83#0: uint64 = (txn ApplicationID)
        (assert tmp%83#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)%0#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = (txna ApplicationArgs 1)
        examples.box_storage.contract.BoxContract.set_nested_struct(reinterpret_Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)%0#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#13: bool = 1u
        goto block@40
    block@19: // nested_write_route_L266
        let tmp%85#0: uint64 = (txn OnCompletion)
        let tmp%86#0: bool = (! tmp%85#0)
        (assert tmp%86#0) // OnCompletion is not NoOp
        let tmp%87#0: uint64 = (txn ApplicationID)
        (assert tmp%87#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%89#0: uint64 = (btoi reinterpret_Encoded(uint64)%5#0)
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%90#0: uint64 = (btoi reinterpret_Encoded(uint64)%6#0)
        examples.box_storage.contract.BoxContract.nested_write(tmp%89#0, tmp%90#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#14: bool = 1u
        goto block@40
    block@20: // nested_read_route_L276
        let tmp%91#0: uint64 = (txn OnCompletion)
        let tmp%92#0: bool = (! tmp%91#0)
        (assert tmp%92#0) // OnCompletion is not NoOp
        let tmp%93#0: uint64 = (txn ApplicationID)
        (assert tmp%93#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%7#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%95#0: uint64 = (btoi reinterpret_Encoded(uint64)%7#0)
        let reinterpret_Encoded(uint64)%8#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%96#0: uint64 = (btoi reinterpret_Encoded(uint64)%8#0)
        let reinterpret_Encoded(uint64)%9#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%97#0: uint64 = (btoi reinterpret_Encoded(uint64)%9#0)
        let tmp%98#0: uint64 = examples.box_storage.contract.BoxContract.nested_read(tmp%95#0, tmp%96#0, tmp%97#0)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%98#0)
        let tmp%100#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%5#0)
        (log tmp%100#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#15: bool = 1u
        goto block@40
    block@21: // sum_dynamic_arr_struct_route_L288
        let tmp%101#0: uint64 = (txn OnCompletion)
        let tmp%102#0: bool = (! tmp%101#0)
        (assert tmp%102#0) // OnCompletion is not NoOp
        let tmp%103#0: uint64 = (txn ApplicationID)
        (assert tmp%103#0) // can only call when not creating
        let tmp%105#0: uint64 = examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct()
        let aggregate%val_as_bytes%6#0: bytes[8] = (itob tmp%105#0)
        let tmp%107#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%6#0)
        (log tmp%107#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#16: bool = 1u
        goto block@40
    block@22: // create_dynamic_box_route_L299
        let tmp%108#0: uint64 = (txn OnCompletion)
        let tmp%109#0: bool = (! tmp%108#0)
        (assert tmp%109#0) // OnCompletion is not NoOp
        let tmp%110#0: uint64 = (txn ApplicationID)
        (assert tmp%110#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.create_dynamic_box()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#17: bool = 1u
        goto block@40
    block@23: // delete_dynamic_box_route_L303
        let tmp%112#0: uint64 = (txn OnCompletion)
        let tmp%113#0: bool = (! tmp%112#0)
        (assert tmp%113#0) // OnCompletion is not NoOp
        let tmp%114#0: uint64 = (txn ApplicationID)
        (assert tmp%114#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.delete_dynamic_box()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#18: bool = 1u
        goto block@40
    block@24: // append_dynamic_box_route_L307
        let tmp%116#0: uint64 = (txn OnCompletion)
        let tmp%117#0: bool = (! tmp%116#0)
        (assert tmp%117#0) // OnCompletion is not NoOp
        let tmp%118#0: uint64 = (txn ApplicationID)
        (assert tmp%118#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%10#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%120#0: uint64 = (btoi reinterpret_Encoded(uint64)%10#0)
        let tmp%121#0: uint64 = examples.box_storage.contract.BoxContract.append_dynamic_box(tmp%120#0)
        let aggregate%val_as_bytes%7#0: bytes[8] = (itob tmp%121#0)
        let tmp%123#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%7#0)
        (log tmp%123#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#19: bool = 1u
        goto block@40
    block@25: // pop_dynamic_box_route_L322
        let tmp%124#0: uint64 = (txn OnCompletion)
        let tmp%125#0: bool = (! tmp%124#0)
        (assert tmp%125#0) // OnCompletion is not NoOp
        let tmp%126#0: uint64 = (txn ApplicationID)
        (assert tmp%126#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%11#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%128#0: uint64 = (btoi reinterpret_Encoded(uint64)%11#0)
        let tmp%129#0: uint64 = examples.box_storage.contract.BoxContract.pop_dynamic_box(tmp%128#0)
        let aggregate%val_as_bytes%8#0: bytes[8] = (itob tmp%129#0)
        let tmp%131#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%8#0)
        (log tmp%131#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#20: bool = 1u
        goto block@40
    block@26: // sum_dynamic_box_route_L333
        let tmp%132#0: uint64 = (txn OnCompletion)
        let tmp%133#0: bool = (! tmp%132#0)
        (assert tmp%133#0) // OnCompletion is not NoOp
        let tmp%134#0: uint64 = (txn ApplicationID)
        (assert tmp%134#0) // can only call when not creating
        let tmp%136#0: uint64 = examples.box_storage.contract.BoxContract.sum_dynamic_box()
        let aggregate%val_as_bytes%9#0: bytes[8] = (itob tmp%136#0)
        let tmp%138#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%9#0)
        (log tmp%138#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#21: bool = 1u
        goto block@40
    block@27: // write_dynamic_box_route_L340
        let tmp%139#0: uint64 = (txn OnCompletion)
        let tmp%140#0: bool = (! tmp%139#0)
        (assert tmp%140#0) // OnCompletion is not NoOp
        let tmp%141#0: uint64 = (txn ApplicationID)
        (assert tmp%141#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%12#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%143#0: uint64 = (btoi reinterpret_Encoded(uint64)%12#0)
        let reinterpret_Encoded(uint64)%13#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%144#0: uint64 = (btoi reinterpret_Encoded(uint64)%13#0)
        examples.box_storage.contract.BoxContract.write_dynamic_box(tmp%143#0, tmp%144#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#22: bool = 1u
        goto block@40
    block@28: // write_dynamic_arr_struct_route_L344
        let tmp%145#0: uint64 = (txn OnCompletion)
        let tmp%146#0: bool = (! tmp%145#0)
        (assert tmp%146#0) // OnCompletion is not NoOp
        let tmp%147#0: uint64 = (txn ApplicationID)
        (assert tmp%147#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%14#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%149#0: uint64 = (btoi reinterpret_Encoded(uint64)%14#0)
        let reinterpret_Encoded(uint64)%15#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%150#0: uint64 = (btoi reinterpret_Encoded(uint64)%15#0)
        examples.box_storage.contract.BoxContract.write_dynamic_arr_struct(tmp%149#0, tmp%150#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#23: bool = 1u
        goto block@40
    block@29: // slice_box_route_L348
        let tmp%151#0: uint64 = (txn OnCompletion)
        let tmp%152#0: bool = (! tmp%151#0)
        (assert tmp%152#0) // OnCompletion is not NoOp
        let tmp%153#0: uint64 = (txn ApplicationID)
        (assert tmp%153#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.slice_box()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#24: bool = 1u
        goto block@40
    block@30: // arc4_box_route_L357
        let tmp%155#0: uint64 = (txn OnCompletion)
        let tmp%156#0: bool = (! tmp%155#0)
        (assert tmp%156#0) // OnCompletion is not NoOp
        let tmp%157#0: uint64 = (txn ApplicationID)
        (assert tmp%157#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.arc4_box()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#25: bool = 1u
        goto block@40
    block@31: // test_box_ref_route_L367
        let tmp%159#0: uint64 = (txn OnCompletion)
        let tmp%160#0: bool = (! tmp%159#0)
        (assert tmp%160#0) // OnCompletion is not NoOp
        let tmp%161#0: uint64 = (txn ApplicationID)
        (assert tmp%161#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.test_box_ref()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#26: bool = 1u
        goto block@40
    block@32: // box_map_test_route_L415
        let tmp%163#0: uint64 = (txn OnCompletion)
        let tmp%164#0: bool = (! tmp%163#0)
        (assert tmp%164#0) // OnCompletion is not NoOp
        let tmp%165#0: uint64 = (txn ApplicationID)
        (assert tmp%165#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.box_map_test()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#27: bool = 1u
        goto block@40
    block@33: // box_map_set_route_L439
        let tmp%167#0: uint64 = (txn OnCompletion)
        let tmp%168#0: bool = (! tmp%167#0)
        (assert tmp%168#0) // OnCompletion is not NoOp
        let tmp%169#0: uint64 = (txn ApplicationID)
        (assert tmp%169#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%16#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%171#0: uint64 = (btoi reinterpret_Encoded(uint64)%16#0)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 2)
        let tmp%172#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        examples.box_storage.contract.BoxContract.box_map_set(tmp%171#0, tmp%172#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#28: bool = 1u
        goto block@40
    block@34: // box_map_get_route_L443
        let tmp%173#0: uint64 = (txn OnCompletion)
        let tmp%174#0: bool = (! tmp%173#0)
        (assert tmp%174#0) // OnCompletion is not NoOp
        let tmp%175#0: uint64 = (txn ApplicationID)
        (assert tmp%175#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%17#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%177#0: uint64 = (btoi reinterpret_Encoded(uint64)%17#0)
        let tmp%178#0: string = examples.box_storage.contract.BoxContract.box_map_get(tmp%177#0)
        let aggregate%length%1#0: uint64 = (len tmp%178#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%178#0)
        let tmp%180#0: bytes = (concat 0x151f7c75 aggregate%encoded_value%1#0)
        (log tmp%180#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#29: bool = 1u
        goto block@40
    block@35: // box_map_del_route_L447
        let tmp%181#0: uint64 = (txn OnCompletion)
        let tmp%182#0: bool = (! tmp%181#0)
        (assert tmp%182#0) // OnCompletion is not NoOp
        let tmp%183#0: uint64 = (txn ApplicationID)
        (assert tmp%183#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%18#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%185#0: uint64 = (btoi reinterpret_Encoded(uint64)%18#0)
        examples.box_storage.contract.BoxContract.box_map_del(tmp%185#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#30: bool = 1u
        goto block@40
    block@36: // box_map_exists_route_L451
        let tmp%186#0: uint64 = (txn OnCompletion)
        let tmp%187#0: bool = (! tmp%186#0)
        (assert tmp%187#0) // OnCompletion is not NoOp
        let tmp%188#0: uint64 = (txn ApplicationID)
        (assert tmp%188#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%19#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%190#0: uint64 = (btoi reinterpret_Encoded(uint64)%19#0)
        let tmp%191#0: bool = examples.box_storage.contract.BoxContract.box_map_exists(tmp%190#0)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u tmp%191#0)
        let tmp%193#0: bytes = (concat 0x151f7c75 aggregate%encoded_bool%1#0)
        (log tmp%193#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#31: bool = 1u
        goto block@40
    block@37: // bare_routing_L80
        let tmp%194#0: uint64 = (txn OnCompletion)
        goto tmp%194#0 ? block@39 : block@38
    block@38: // __algopy_default_create_L1
        let tmp%195#0: uint64 = (txn ApplicationID)
        let tmp%196#0: bool = (! tmp%195#0)
        (assert tmp%196#0) // can only call when creating
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#32: bool = 1u
        goto block@40
    block@39: // after_if_else_L80
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#33: bool = 0u
        goto block@40
    block@40: // after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router___L1
        let tmp%0#1: bool = φ(examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0 <- block@5, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#1 <- block@6, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#2 <- block@7, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#3 <- block@8, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#4 <- block@9, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#5 <- block@10, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#6 <- block@11, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#7 <- block@12, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#8 <- block@13, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#9 <- block@14, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#10 <- block@15, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#11 <- block@16, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#12 <- block@17, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#13 <- block@18, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#14 <- block@19, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#15 <- block@20, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#16 <- block@21, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#17 <- block@22, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#18 <- block@23, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#19 <- block@24, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#20 <- block@25, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#21 <- block@26, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#22 <- block@27, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#23 <- block@28, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#24 <- block@29, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#25 <- block@30, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#26 <- block@31, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#27 <- block@32, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#28 <- block@33, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#29 <- block@34, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#30 <- block@35, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#31 <- block@36, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#32 <- block@38, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#33 <- block@39)
        return tmp%0#1

subroutine examples.box_storage.contract.BoxContract.set_boxes(a: uint64, b: Encoded(len+uint8[]), c: Encoded(len+utf8[])) -> void:
    block@0: // L94
        let encoded_value%0#0: bytes[8] = (itob a#0)
        (box_put "box_a" encoded_value%0#0)
        (box_del "b")
        (box_put "b" b#0)
        (box_del 0x424f585f43)
        (box_put 0x424f585f43 c#0)
        let tmp%0#0: bytes = ((extract 2 0) b#0)
        (box_del "box_d")
        (box_put "box_d" tmp%0#0)
        (box_create "box_large" 6160u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 42u)
        (box_replace "box_large" 4096u aggregate%val_as_bytes%0#0)
        (box_replace "box_large" 4096u 0x000000000000002a)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "box_a")
        (assert aggregate%box_get%1#0) // check self.box_a exists
        let maybe_value_converted%0#0: uint64 = (btoi aggregate%box_get%0#0)
        let tmp%5#0: uint64 = (+ maybe_value_converted%0#0 3u)
        let encoded_value%2#0: bytes[8] = (itob tmp%5#0)
        (box_put "box_a" encoded_value%2#0)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "box_a")
        let tmp%6#0: bool = (== value%0#0 8u)
        (assert tmp%6#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "b")
        let tmp%7#0: uint64 = (len b#0)
        let tmp%8#0: bool = (== value%1#0 tmp%7#0)
        (assert tmp%8#0)
        let (value%2#0: uint64, check%2#0: bool) = (box_len 0x424f585f43)
        (assert check%2#0) // check self.box_c exists
        let tmp%9#0: uint64 = (len c#0)
        let tmp%10#0: bool = (== value%2#0 tmp%9#0)
        (assert tmp%10#0)
        let (value%3#0: uint64, check%3#0: bool) = (box_len "box_d")
        let tmp%12#0: uint64 = (len tmp%0#0)
        let tmp%13#0: bool = (== value%3#0 tmp%12#0)
        (assert tmp%13#0)
        let tmp%14#0: bytes = (box_extract 0x424f585f43 0u 1u)
        let extract%0#0: bytes = ((extract 0 1) c#0)
        let tmp%15#0: bool = (== tmp%14#0 extract%0#0)
        (assert tmp%15#0)
        let tmp%18#0: uint64 = (- value%2#0 1u)
        let tmp%19#0: bytes = (box_extract 0x424f585f43 tmp%18#0 1u)
        let tmp%21#0: uint64 = (- tmp%9#0 1u)
        let extract%1#0: bytes = (extract3 c#0 tmp%21#0 1u)
        let tmp%22#0: bool = (== tmp%19#0 extract%1#0)
        (assert tmp%22#0)
        let tmp%25#0: bool = (< 1u value%2#0)
        let tmp%26#0: uint64 = (select value%2#0 1u tmp%25#0)
        let tmp%27#0: uint64 = (- value%2#0 tmp%26#0)
        let tmp%29#0: bytes = (box_extract 0x424f585f43 0u tmp%27#0)
        let is_out_of_bounds%0#0: bool = (>= 1u tmp%9#0)
        let bounded_offset%0#0: uint64 = (select 1u tmp%9#0 is_out_of_bounds%0#0)
        let bounded_index%0#0: uint64 = (- tmp%9#0 bounded_offset%0#0)
        let tmp%30#0: bytes = (substring3 c#0 0u bounded_index%0#0)
        let tmp%31#0: bool = (== tmp%29#0 tmp%30#0)
        (assert tmp%31#0)
        let tmp%34#0: bool = (< 2u value%2#0)
        let tmp%35#0: uint64 = (select value%2#0 2u tmp%34#0)
        let tmp%37#0: bytes = (box_extract 0x424f585f43 0u tmp%35#0)
        let is_out_of_bounds%1#0: bool = (>= 2u tmp%9#0)
        let bounded_index%1#0: uint64 = (select 2u tmp%9#0 is_out_of_bounds%1#0)
        let tmp%38#0: bytes = (substring3 c#0 0u bounded_index%1#0)
        let tmp%39#0: bool = (== tmp%37#0 tmp%38#0)
        (assert tmp%39#0)
        let tmp%40#0: bytes = (box_extract "box_d" 0u 1u)
        let extract%2#0: bytes = ((extract 2 1) b#0)
        let tmp%42#0: bool = (== tmp%40#0 extract%2#0)
        (assert tmp%42#0)
        let tmp%45#0: uint64 = (- value%3#0 1u)
        let tmp%46#0: bytes = (box_extract "box_d" tmp%45#0 1u)
        let tmp%49#0: uint64 = (- tmp%12#0 1u)
        let extract%3#0: bytes = (extract3 tmp%0#0 tmp%49#0 1u)
        let tmp%50#0: bool = (== tmp%46#0 extract%3#0)
        (assert tmp%50#0)
        let tmp%53#0: bool = (< 1u value%3#0)
        let tmp%54#0: uint64 = (select value%3#0 1u tmp%53#0)
        let tmp%55#0: uint64 = (- value%3#0 tmp%54#0)
        let tmp%57#0: bytes = (box_extract "box_d" 0u tmp%55#0)
        let is_out_of_bounds%2#0: bool = (>= 1u tmp%12#0)
        let bounded_offset%1#0: uint64 = (select 1u tmp%12#0 is_out_of_bounds%2#0)
        let bounded_index%2#0: uint64 = (- tmp%12#0 bounded_offset%1#0)
        let tmp%59#0: bytes = (substring3 tmp%0#0 0u bounded_index%2#0)
        let tmp%60#0: bool = (== tmp%57#0 tmp%59#0)
        (assert tmp%60#0)
        let tmp%63#0: bool = (< 5u value%3#0)
        let tmp%64#0: uint64 = (select value%3#0 5u tmp%63#0)
        let tmp%66#0: bytes = (box_extract "box_d" 0u tmp%64#0)
        let is_out_of_bounds%3#0: bool = (>= 5u tmp%12#0)
        let bounded_index%3#0: uint64 = (select 5u tmp%12#0 is_out_of_bounds%3#0)
        let tmp%68#0: bytes = (substring3 tmp%0#0 0u bounded_index%3#0)
        let tmp%69#0: bool = (== tmp%66#0 tmp%68#0)
        (assert tmp%69#0)
        let tmp%72#0: bool = (< 2u value%3#0)
        let tmp%73#0: uint64 = (select value%3#0 2u tmp%72#0)
        let tmp%75#0: bytes = (box_extract "box_d" 0u tmp%73#0)
        let is_out_of_bounds%4#0: bool = (>= 2u tmp%12#0)
        let bounded_index%4#0: uint64 = (select 2u tmp%12#0 is_out_of_bounds%4#0)
        let tmp%77#0: bytes = (substring3 tmp%0#0 0u bounded_index%4#0)
        let tmp%78#0: bool = (== tmp%75#0 tmp%77#0)
        (assert tmp%78#0)
        let (value%4#0: uint64, check%4#0: bool) = (box_len "box_large")
        let tmp%79#0: bool = (== value%4#0 6160u)
        (assert tmp%79#0)
        return 

subroutine examples.box_storage.contract.BoxContract.create_many_ints() -> void:
    block@0: // L137
        (box_create "many_ints" 4104u)
        return 

subroutine examples.box_storage.contract.BoxContract.set_many_ints(index: uint64, value: uint64) -> void:
    block@0: // L141
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob value#0)
        let box%index_bytes_offset%0#0: uint64 = (* index#0 8u)
        (box_replace "many_ints" box%index_bytes_offset%0#0 aggregate%val_as_bytes%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.sum_many_ints() -> uint64:
    block@6: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> 10510u tmp%1#0)
        goto tmp%2#0 ? block@7 : block@11
    block@7: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        itxn_submit
        goto block@6
    block@11: // after_while_L20
        let total#0: uint64 = 0u
        let (aggregate%box_get%0#0: uint64, aggregate%box_get%1#0: bool) = (box_len "many_ints")
        (assert aggregate%box_get%1#0) // check self.many_ints exists
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L149
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@11, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@11, total#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 513u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L150
        let box%index_bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "many_ints" box%index_bytes_offset%0#0 8u)
        let val#0: uint64 = (btoi box%box_extract%0#0)
        let total#2: uint64 = (+ total#1 val#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L149
        return total#1

subroutine examples.box_storage.contract.BoxContract.delete_boxes() -> void:
    block@0: // L153
        (box_del "box_a")
        (box_del "b")
        (box_del 0x424f585f43)
        let (maybe_value%0#0: bytes, a_exists#0: bool) = (box_get "box_a")
        let a#0: uint64 = (btoi maybe_value%0#0)
        let state_get%0#0: uint64 = (select 42u a#0 a_exists#0)
        let tmp%0#0: bool = (== state_get%0#0 42u)
        (assert tmp%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "b")
        let state_get%1#0: bytes = (select 0x00023432 maybe_value%1#0 maybe_exists%1#0)
        let tmp%2#0: bytes = ((extract 2 0) state_get%1#0)
        let tmp%3#0: bool = (== tmp%2#0 0x3432)
        (assert tmp%3#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get 0x424f585f43)
        let state_get%2#0: bytes = (select 0x00023432 maybe_value%2#0 maybe_exists%2#0)
        let tmp%6#0: bool = (== state_get%2#0 0x00023432)
        (assert tmp%6#0)
        let tmp%7#0: bool = (! a_exists#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (! a#0)
        (assert tmp%8#0)
        (box_del "box_large")
        return 

subroutine examples.box_storage.contract.BoxContract.indirect_extract_and_replace() -> void:
    block@0: // L166
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "box_large" 4096u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#0: uint64 = (+ values%0#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        (box_replace "box_large" 4096u aggregate%val_as_bytes%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.read_boxes() -> <uint64, bytes, Encoded(len+utf8[]), uint64>:
    block@0: // L172
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "box_a")
        (assert aggregate%box_get%1#0) // check Box exists
        let maybe_value_converted%0#0: uint64 = (btoi aggregate%box_get%0#0)
        let tmp%0#1: uint64 = (+ maybe_value_converted%0#0 1u)
        let tmp%1#0: uint64 = (- tmp%0#1 1u)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "b")
        (assert aggregate%box_get%3#0) // check self.box_b exists
        let tmp%2#0: bytes = ((extract 2 0) aggregate%box_get%2#0)
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get 0x424f585f43)
        (assert aggregate%box_get%5#0) // check self.box_c exists
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "box_large" 4096u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        return tmp%1#0 tmp%2#0 aggregate%box_get%4#0 values%0#0

subroutine examples.box_storage.contract.BoxContract.boxes_exist() -> <bool, bool, bool, bool>:
    block@0: // L181
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "box_a")
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "b")
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len 0x424f585f43)
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "box_large")
        return maybe_exists%0#0 maybe_exists%1#0 maybe_exists%2#0 maybe_exists%3#0

subroutine examples.box_storage.contract.BoxContract.create_dynamic_arr_struct() -> void:
    block@0: // L185
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: uint64 = (* tmp%1#0 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 0x0014)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%2#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%val_as_bytes%1#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%head%2#0 0x001600000000)
        (box_del "dynamic_arr_struct")
        (box_put "dynamic_arr_struct" aggregate%concat%1#0)
        return 

subroutine examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct() -> void:
    block@0: // L194
        (box_del "dynamic_arr_struct")
        return 

subroutine examples.box_storage.contract.BoxContract.append_dynamic_arr_struct(times: uint64) -> uint64:
    block@0: // L198
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" 10u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#0: bool = (== values%0#0 2u)
        (assert tmp%0#0) // expected 2
        let box%box_extract%1#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let arr_len#0: uint64 = (btoi box%box_extract%1#0)
        let box%box_extract%2#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%2#0)
        let box%box_extract%3#0: bytes = (box_extract "dynamic_arr_struct" box%btoi%0#0 2u)
        let arr2_len#0: uint64 = (btoi box%box_extract%3#0)
        let arr_size#1: uint64 = (+ arr_len#0 times#0)
        let tmp%3#4: uint64 = (* arr_size#1 8u)
        let head_and_dyn_arr#1: uint64 = (+ tmp%3#4 22u)
        let tmp%1#2: uint64 = (* arr2_len#0 8u)
        let dyn_arr2_index#1: uint64 = (+ 2u tmp%1#2)
        let tmp%3#3: uint64 = (+ head_and_dyn_arr#1 dyn_arr2_index#1)
        (box_resize "dynamic_arr_struct" tmp%3#3)
        let tmp%3#5: uint64 = (* arr_len#0 8u)
        let tmp%5#1: uint64 = (+ tmp%3#5 22u)
        let tmp%6#0: uint64 = (* times#0 8u)
        let tmp%7#0: bytes = (bzero tmp%6#0)
        (box_splice "dynamic_arr_struct" tmp%5#1 0u tmp%7#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L216
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr_len#1: uint64 = φ(arr_len#0 <- block@0, arr_len#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 times#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L217
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#1)
        let box%index_bytes_offset%0#0: uint64 = (* arr_len#1 8u)
        let box%offset%5#0: uint64 = (+ 22u box%index_bytes_offset%0#0)
        (box_replace "dynamic_arr_struct" box%offset%5#0 aggregate%val_as_bytes%0#0)
        let arr_len#2: uint64 = (+ arr_len#1 1u)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L216
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob arr_len#1)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%1#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 16u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint16%0#0: bytes = ((extract 6 2) aggregate%val_as_bytes%1#0)
        (box_replace "dynamic_arr_struct" 20u aggregate%uint16%0#0)
        let tmp%3#2: uint64 = (* arr_len#1 8u)
        let tmp%3#1: uint64 = (+ tmp%3#2 24u)
        let arr2_offset#0: uint64 = (- tmp%3#1 2u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob arr2_offset#0)
        let aggregate%bitlen%1#0: uint64 = (bitlen aggregate%val_as_bytes%2#0)
        let aggregate%no_overflow%1#0: bool = (<= aggregate%bitlen%1#0 16u)
        (assert aggregate%no_overflow%1#0) // overflow
        let aggregate%uint16%1#0: bytes = ((extract 6 2) aggregate%val_as_bytes%2#0)
        (box_replace "dynamic_arr_struct" 18u aggregate%uint16%1#0)
        let box%box_extract%4#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%array_length%2#0: uint64 = (btoi box%box_extract%4#0)
        let tmp%14#0: bool = (== box%array_length%2#0 arr_len#1)
        (assert tmp%14#0) // expected arr length to be correct
        let box%box_extract%5#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%1#0: uint64 = (btoi box%box_extract%5#0)
        let box%box_extract%6#0: bytes = (box_extract "dynamic_arr_struct" box%btoi%1#0 2u)
        let box%array_length%3#0: uint64 = (btoi box%box_extract%6#0)
        let tmp%16#0: bool = (! box%array_length%3#0)
        (assert tmp%16#0) // expected arr2 length to be correct
        return box%array_length%2#0

subroutine examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct(times: uint64) -> uint64:
    block@0: // L230
        let box%box_extract%0#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%0#0)
        let arr_len#0: uint64 = (- box%array_length%0#0 times#0)
        let box%box_extract%1#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%1#0)
        let box%box_extract%2#0: bytes = (box_extract "dynamic_arr_struct" box%btoi%0#0 2u)
        let arr2_len#0: uint64 = (btoi box%box_extract%2#0)
        let tmp%3#2: uint64 = (* arr_len#0 8u)
        let head_and_dyn_arr#0: uint64 = (+ tmp%3#2 22u)
        let tmp%3#1: uint64 = (+ tmp%3#2 24u)
        let arr2_offset#0: uint64 = (- tmp%3#1 2u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob arr_len#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%0#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 16u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint16%0#0: bytes = ((extract 6 2) aggregate%val_as_bytes%0#0)
        (box_replace "dynamic_arr_struct" 20u aggregate%uint16%0#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob arr2_offset#0)
        let aggregate%bitlen%1#0: uint64 = (bitlen aggregate%val_as_bytes%1#0)
        let aggregate%no_overflow%1#0: bool = (<= aggregate%bitlen%1#0 16u)
        (assert aggregate%no_overflow%1#0) // overflow
        let aggregate%uint16%1#0: bytes = ((extract 6 2) aggregate%val_as_bytes%1#0)
        (box_replace "dynamic_arr_struct" 18u aggregate%uint16%1#0)
        let tmp%8#0: uint64 = (* times#0 8u)
        (box_splice "dynamic_arr_struct" head_and_dyn_arr#0 tmp%8#0 0x)
        let tmp%1#3: uint64 = (* arr2_len#0 8u)
        let dyn_arr2_index#1: uint64 = (+ 2u tmp%1#3)
        let size#0: uint64 = (+ head_and_dyn_arr#0 dyn_arr2_index#1)
        (box_resize "dynamic_arr_struct" size#0)
        let box%box_extract%3#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%array_length%2#0: uint64 = (btoi box%box_extract%3#0)
        return box%array_length%2#0

subroutine examples.box_storage.contract.BoxContract.set_nested_struct(struct: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) -> void:
    block@0: // L252
        let values%0#0: uint64 = (extract_uint64 struct#0 0u)
        (assert values%0#0) // struct.a is truthy
        let struct_bytes#0: bytes = (txna ApplicationArgs 1)
        let struct_size#0: uint64 = (len struct_bytes#0)
        let tmp%3#0: uint64 = (+ 4098u struct_size#0)
        (box_create "box" tmp%3#0)
        (box_replace "box" 4096u 0x1002)
        (box_replace "box" 4098u struct_bytes#0)
        return 

subroutine examples.box_storage.contract.BoxContract.nested_write(index: uint64, value: uint64) -> void:
    block@0: // L266
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob value#0)
        (box_replace "box" 4098u aggregate%val_as_bytes%0#0)
        let tmp%0#0: uint64 = (+ value#0 1u)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%0#0)
        (box_replace "box" 4110u aggregate%val_as_bytes%1#0)
        let tmp%1#0: uint64 = (+ value#0 2u)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%1#0)
        let box%box_extract%0#0: bytes = (box_extract "box" 4136u 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%0#0)
        let box%index_ok%0#0: bool = (< index#0 box%btoi%0#0)
        (assert box%index_ok%0#0) // index out of bounds
        let box%mul%0#0: uint64 = (* 2u index#0)
        let box%add%0#0: uint64 = (+ 2u box%mul%0#0)
        let box%add%1#0: uint64 = (+ box%mul%0#0 4138u)
        let box%box_extract%1#0: bytes = (box_extract "box" box%add%1#0 2u)
        let box%btoi%1#0: uint64 = (btoi box%box_extract%1#0)
        let box%offset%7#0: uint64 = (+ box%btoi%1#0 4138u)
        let box%box_extract%2#0: bytes = (box_extract "box" box%offset%7#0 2u)
        let box%btoi%2#0: uint64 = (btoi box%box_extract%2#0)
        let box%index_ok%1#0: bool = (< index#0 box%btoi%2#0)
        (assert box%index_ok%1#0) // index out of bounds
        let box%index_bytes_offset%0#0: uint64 = (* index#0 8u)
        let box%element_offset%1#0: uint64 = (+ box%index_bytes_offset%0#0 2u)
        let box%offset%8#0: uint64 = (+ box%offset%7#0 box%element_offset%1#0)
        (box_replace "box" box%offset%8#0 aggregate%val_as_bytes%2#0)
        let tmp%2#0: uint64 = (+ value#0 3u)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%2#0)
        (box_replace "box" 4118u aggregate%val_as_bytes%3#0)
        let tmp%3#0: uint64 = (+ value#0 4u)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%3#0)
        (box_replace "box" 4128u aggregate%val_as_bytes%4#0)
        let tmp%4#0: uint64 = (+ value#0 5u)
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%4#0)
        let box%box_extract%3#0: bytes = (box_extract "box" 4108u 2u)
        let box%btoi%3#0: uint64 = (btoi box%box_extract%3#0)
        let box%offset%16#0: uint64 = (+ 4098u box%btoi%3#0)
        let box%box_extract%4#0: bytes = (box_extract "box" box%offset%16#0 2u)
        let box%btoi%4#0: uint64 = (btoi box%box_extract%4#0)
        let box%index_ok%2#0: bool = (< index#0 box%btoi%4#0)
        (assert box%index_ok%2#0) // index out of bounds
        let box%add%4#0: uint64 = (+ box%offset%16#0 box%add%0#0)
        let box%box_extract%5#0: bytes = (box_extract "box" box%add%4#0 2u)
        let box%btoi%5#0: uint64 = (btoi box%box_extract%5#0)
        let box%element_offset%2#0: uint64 = (+ box%btoi%5#0 2u)
        let box%offset%17#0: uint64 = (+ box%offset%16#0 box%element_offset%2#0)
        let box%offset%18#0: uint64 = (+ box%offset%17#0 18u)
        let box%box_extract%6#0: bytes = (box_extract "box" box%offset%18#0 2u)
        let box%btoi%6#0: uint64 = (btoi box%box_extract%6#0)
        let box%index_ok%3#0: bool = (< index#0 box%btoi%6#0)
        (assert box%index_ok%3#0) // index out of bounds
        let box%add%6#0: uint64 = (+ box%offset%18#0 box%add%0#0)
        let box%box_extract%7#0: bytes = (box_extract "box" box%add%6#0 2u)
        let box%btoi%7#0: uint64 = (btoi box%box_extract%7#0)
        let box%element_offset%3#0: uint64 = (+ box%btoi%7#0 2u)
        let box%offset%19#0: uint64 = (+ box%offset%18#0 box%element_offset%3#0)
        let box%box_extract%8#0: bytes = (box_extract "box" box%offset%19#0 2u)
        let box%btoi%8#0: uint64 = (btoi box%box_extract%8#0)
        let box%index_ok%4#0: bool = (< index#0 box%btoi%8#0)
        (assert box%index_ok%4#0) // index out of bounds
        let box%offset%20#0: uint64 = (+ box%offset%19#0 box%element_offset%1#0)
        (box_replace "box" box%offset%20#0 aggregate%val_as_bytes%5#0)
        return 

subroutine examples.box_storage.contract.BoxContract.nested_read(i1: uint64, i2: uint64, i3: uint64) -> uint64:
    block@0: // L276
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "box" 4098u 8u)
        let a#0: uint64 = (btoi box%box_extract%0#0)
        let box%box_extract%1#0: Encoded(uint64) = (box_extract "box" 4110u 8u)
        let b#0: uint64 = (btoi box%box_extract%1#0)
        let box%box_extract%2#0: bytes = (box_extract "box" 4136u 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%2#0)
        let box%index_ok%0#0: bool = (< i1#0 box%btoi%0#0)
        (assert box%index_ok%0#0) // index out of bounds
        let box%mul%0#0: uint64 = (* 2u i1#0)
        let box%add%0#0: uint64 = (+ 2u box%mul%0#0)
        let box%add%1#0: uint64 = (+ box%mul%0#0 4138u)
        let box%box_extract%3#0: bytes = (box_extract "box" box%add%1#0 2u)
        let box%btoi%1#0: uint64 = (btoi box%box_extract%3#0)
        let box%offset%7#0: uint64 = (+ box%btoi%1#0 4138u)
        let box%box_extract%4#0: bytes = (box_extract "box" box%offset%7#0 2u)
        let box%btoi%2#0: uint64 = (btoi box%box_extract%4#0)
        let box%index_ok%1#0: bool = (< i2#0 box%btoi%2#0)
        (assert box%index_ok%1#0) // index out of bounds
        let box%index_bytes_offset%0#0: uint64 = (* i2#0 8u)
        let box%element_offset%1#0: uint64 = (+ box%index_bytes_offset%0#0 2u)
        let box%offset%8#0: uint64 = (+ box%offset%7#0 box%element_offset%1#0)
        let box%box_extract%5#0: Encoded(uint64) = (box_extract "box" box%offset%8#0 8u)
        let arr_arr#0: uint64 = (btoi box%box_extract%5#0)
        let box%box_extract%6#0: Encoded(uint64) = (box_extract "box" 4118u 8u)
        let c#0: uint64 = (btoi box%box_extract%6#0)
        let box%box_extract%7#0: Encoded(uint64) = (box_extract "box" 4128u 8u)
        let d#0: uint64 = (btoi box%box_extract%7#0)
        let box%box_extract%8#0: bytes = (box_extract "box" 4108u 2u)
        let box%btoi%3#0: uint64 = (btoi box%box_extract%8#0)
        let box%offset%16#0: uint64 = (+ 4098u box%btoi%3#0)
        let box%box_extract%9#0: bytes = (box_extract "box" box%offset%16#0 2u)
        let box%btoi%4#0: uint64 = (btoi box%box_extract%9#0)
        let box%index_ok%2#0: bool = (< i1#0 box%btoi%4#0)
        (assert box%index_ok%2#0) // index out of bounds
        let box%add%4#0: uint64 = (+ box%offset%16#0 box%add%0#0)
        let box%box_extract%10#0: bytes = (box_extract "box" box%add%4#0 2u)
        let box%btoi%5#0: uint64 = (btoi box%box_extract%10#0)
        let box%element_offset%2#0: uint64 = (+ box%btoi%5#0 2u)
        let box%offset%17#0: uint64 = (+ box%offset%16#0 box%element_offset%2#0)
        let box%offset%18#0: uint64 = (+ box%offset%17#0 18u)
        let box%box_extract%11#0: bytes = (box_extract "box" box%offset%18#0 2u)
        let box%btoi%6#0: uint64 = (btoi box%box_extract%11#0)
        let box%index_ok%3#0: bool = (< i2#0 box%btoi%6#0)
        (assert box%index_ok%3#0) // index out of bounds
        let box%mul%2#0: uint64 = (* 2u i2#0)
        let box%add%5#0: uint64 = (+ 2u box%mul%2#0)
        let box%add%6#0: uint64 = (+ box%offset%18#0 box%add%5#0)
        let box%box_extract%12#0: bytes = (box_extract "box" box%add%6#0 2u)
        let box%btoi%7#0: uint64 = (btoi box%box_extract%12#0)
        let box%element_offset%3#0: uint64 = (+ box%btoi%7#0 2u)
        let box%offset%19#0: uint64 = (+ box%offset%18#0 box%element_offset%3#0)
        let box%box_extract%13#0: bytes = (box_extract "box" box%offset%19#0 2u)
        let box%btoi%8#0: uint64 = (btoi box%box_extract%13#0)
        let box%index_ok%4#0: bool = (< i3#0 box%btoi%8#0)
        (assert box%index_ok%4#0) // index out of bounds
        let box%index_bytes_offset%1#0: uint64 = (* i3#0 8u)
        let box%element_offset%4#0: uint64 = (+ box%index_bytes_offset%1#0 2u)
        let box%offset%20#0: uint64 = (+ box%offset%19#0 box%element_offset%4#0)
        let box%box_extract%14#0: Encoded(uint64) = (box_extract "box" box%offset%20#0 8u)
        let woah_arr_arr#0: uint64 = (btoi box%box_extract%14#0)
        let tmp%0#0: uint64 = (+ a#0 b#0)
        let tmp%1#0: uint64 = (+ tmp%0#0 arr_arr#0)
        let tmp%2#0: uint64 = (+ tmp%1#0 c#0)
        let tmp%3#0: uint64 = (+ tmp%2#0 d#0)
        let tmp%4#0: uint64 = (+ tmp%3#0 woah_arr_arr#0)
        return tmp%4#0

subroutine examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct() -> uint64:
    block@0: // L288
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" 0u 8u)
        let values%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#0: bool = (== values%0#0 1u)
        (assert tmp%0#0) // expected 1
        let box%box_extract%1#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" 10u 8u)
        let values%1#0: uint64 = (btoi box%box_extract%1#0)
        let tmp%1#0: bool = (== values%1#0 2u)
        (assert tmp%1#0) // expected 2
        let total#0: uint64 = (+ values%0#0 values%1#0)
        let box%box_extract%4#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%4#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L293
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 box%array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L294
        let box%box_extract%5#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%5#0)
        let box%index_ok%0#0: bool = (< item_index_internal%0#1 box%btoi%0#0)
        (assert box%index_ok%0#0) // index out of bounds
        let box%index_bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let box%offset%6#0: uint64 = (+ box%index_bytes_offset%0#0 22u)
        let box%box_extract%6#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" box%offset%6#0 8u)
        let val#0: uint64 = (btoi box%box_extract%6#0)
        let total#2: uint64 = (+ total#1 val#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L293
        let box%box_extract%7#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%1#0: uint64 = (btoi box%box_extract%7#0)
        let box%box_extract%8#0: bytes = (box_extract "dynamic_arr_struct" box%btoi%1#0 2u)
        let box%array_length%1#0: uint64 = (btoi box%box_extract%8#0)
        let item_index_internal%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L295
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@6)
        let total#3: uint64 = φ(total#1 <- block@4, total#4 <- block@6)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 box%array_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L296
        let box%box_extract%9#0: bytes = (box_extract "dynamic_arr_struct" 18u 2u)
        let box%btoi%2#0: uint64 = (btoi box%box_extract%9#0)
        let box%index_bytes_offset%1#0: uint64 = (* item_index_internal%1#1 8u)
        let box%element_offset%1#0: uint64 = (+ box%index_bytes_offset%1#0 2u)
        let box%offset%9#0: uint64 = (+ box%btoi%2#0 box%element_offset%1#0)
        let box%box_extract%10#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" box%offset%9#0 8u)
        let val#1: uint64 = (btoi box%box_extract%10#0)
        let total#4: uint64 = (+ total#3 val#1)
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@8: // after_for_L295
        return total#3

subroutine examples.box_storage.contract.BoxContract.create_dynamic_box() -> void:
    block@0: // L299
        (box_del "dynamic_box")
        (box_put "dynamic_box" 0x0000)
        return 

subroutine examples.box_storage.contract.BoxContract.delete_dynamic_box() -> void:
    block@0: // L303
        (box_del "dynamic_box")
        return 

subroutine examples.box_storage.contract.BoxContract.append_dynamic_box(times: uint64) -> uint64:
    block@0: // L307
        let box%box_extract%0#0: Encoded(uint16) = (box_extract "dynamic_box" 0u 2u)
        let arr_len#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%1#0: uint64 = (+ arr_len#0 times#0)
        let tmp%2#0: uint64 = (* tmp%1#0 8u)
        let tmp%3#0: uint64 = (+ 2u tmp%2#0)
        (box_resize "dynamic_box" tmp%3#0)
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L315
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@2)
        let arr_len#1: uint64 = φ(arr_len#0 <- block@0, arr_len#2 <- block@2)
        let continue_looping%0#0: bool = (< i#1 times#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L316
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#1)
        let box%index_bytes_offset%0#0: uint64 = (* arr_len#1 8u)
        let box%offset%2#0: uint64 = (+ 2u box%index_bytes_offset%0#0)
        (box_replace "dynamic_box" box%offset%2#0 aggregate%val_as_bytes%0#0)
        let arr_len#2: uint64 = (+ arr_len#1 1u)
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L315
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob arr_len#1)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%1#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 16u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint16%0#0: bytes = ((extract 6 2) aggregate%val_as_bytes%1#0)
        (box_replace "dynamic_box" 0u aggregate%uint16%0#0)
        let box%box_extract%1#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%1#0)
        return box%array_length%0#0

subroutine examples.box_storage.contract.BoxContract.pop_dynamic_box(times: uint64) -> uint64:
    block@0: // L322
        let box%box_extract%0#0: Encoded(uint16) = (box_extract "dynamic_box" 0u 2u)
        let tmp%0#0: uint64 = (btoi box%box_extract%0#0)
        let arr_len#0: uint64 = (- tmp%0#0 times#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob arr_len#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%0#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 16u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint16%0#0: bytes = ((extract 6 2) aggregate%val_as_bytes%0#0)
        (box_replace "dynamic_box" 0u aggregate%uint16%0#0)
        let tmp%3#0: uint64 = (* arr_len#0 8u)
        let tmp%4#0: uint64 = (+ 2u tmp%3#0)
        (box_resize "dynamic_box" tmp%4#0)
        let box%box_extract%1#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%1#0)
        return box%array_length%0#0

subroutine examples.box_storage.contract.BoxContract.sum_dynamic_box() -> uint64:
    block@0: // L333
        let total#0: uint64 = 0u
        let box%box_extract%0#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%0#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L336
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 box%array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L337
        let box%index_bytes_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let box%element_offset%0#0: uint64 = (+ box%index_bytes_offset%0#0 2u)
        let box%box_extract%1#0: Encoded(uint64) = (box_extract "dynamic_box" box%element_offset%0#0 8u)
        let val#0: uint64 = (btoi box%box_extract%1#0)
        let total#2: uint64 = (+ total#1 val#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L336
        return total#1

subroutine examples.box_storage.contract.BoxContract.write_dynamic_box(index: uint64, value: uint64) -> void:
    block@0: // L340
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob value#0)
        let box%index_bytes_offset%0#0: uint64 = (* index#0 8u)
        let box%element_offset%0#0: uint64 = (+ box%index_bytes_offset%0#0 2u)
        (box_replace "dynamic_box" box%element_offset%0#0 aggregate%val_as_bytes%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.write_dynamic_arr_struct(index: uint64, value: uint64) -> void:
    block@0: // L344
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob value#0)
        let box%box_extract%0#0: bytes = (box_extract "dynamic_arr_struct" 20u 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%0#0)
        let box%index_ok%0#0: bool = (< index#0 box%btoi%0#0)
        (assert box%index_ok%0#0) // index out of bounds
        let box%index_bytes_offset%0#0: uint64 = (* index#0 8u)
        let box%offset%1#0: uint64 = (+ box%index_bytes_offset%0#0 22u)
        (box_replace "dynamic_arr_struct" box%offset%1#0 aggregate%val_as_bytes%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.slice_box() -> void:
    block@0: // L348
        (box_del "0")
        (box_put "0" 0x54657374696e672074657374696e6720313233)
        let (tmp%0#0: uint64, tmp%1#0: bool) = (box_len "0")
        let tmp%3#0: uint64 = (select tmp%0#0 0u tmp%0#0)
        let tmp%4#0: bool = (< 7u tmp%0#0)
        let tmp%5#0: uint64 = (select tmp%0#0 7u tmp%4#0)
        let tmp%6#0: uint64 = (- tmp%5#0 tmp%3#0)
        let tmp%7#0: bytes = (box_extract "0" tmp%3#0 tmp%6#0)
        let tmp%8#0: bool = (== tmp%7#0 0x54657374696e67)
        (assert tmp%8#0)
        (box_del 0x424f585f43)
        (box_put 0x424f585f43 0x000548656c6c6f)
        let (tmp%10#0: uint64, tmp%11#0: bool) = (box_len 0x424f585f43)
        let tmp%12#0: bool = (< 2u tmp%10#0)
        let tmp%13#0: uint64 = (select tmp%10#0 2u tmp%12#0)
        let tmp%14#0: bool = (< 10u tmp%10#0)
        let tmp%15#0: uint64 = (select tmp%10#0 10u tmp%14#0)
        let tmp%16#0: uint64 = (- tmp%15#0 tmp%13#0)
        let tmp%17#0: bytes = (box_extract 0x424f585f43 tmp%13#0 tmp%16#0)
        let tmp%18#0: bool = (== tmp%17#0 0x48656c6c6f)
        (assert tmp%18#0)
        return 

subroutine examples.box_storage.contract.BoxContract.arc4_box() -> void:
    block@0: // L357
        (box_put 0x64 0x00010203)
        return 

subroutine examples.box_storage.contract.BoxContract.test_box_ref() -> void:
    block@0: // L367
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "blob")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0) // no data
        let tmp%4#0: bool = (box_create "blob" 32u)
        (assert tmp%4#0)
        let sender_bytes#0: bytes = (txn Sender)
        let app_address#0: bytes = (global CurrentApplicationAddress)
        (box_replace "blob" 0u sender_bytes#0)
        (box_resize "blob" 8000u)
        (box_splice "blob" 0u 0u app_address#0)
        (box_replace "blob" 64u 0x68656c6c6f)
        let prefix#0: bytes = (box_extract "blob" 0u 69u)
        let tmp%10#0: bytes = (concat app_address#0 sender_bytes#0)
        let tmp%11#0: bytes = (concat tmp%10#0 0x68656c6c6f)
        let tmp%12#0: bool = (== prefix#0 tmp%11#0)
        (assert tmp%12#0)
        let tmp%13#0: bool = (box_del "blob")
        (assert tmp%13#0)
        let (value#0: bytes, exists#0: bool) = (box_get "blob")
        let tmp%15#0: bool = (! exists#0)
        (assert tmp%15#0)
        let tmp%16#0: bool = (== value#0 0x)
        (assert tmp%16#0)
        let state_get%0#0: bytes = (select sender_bytes#0 value#0 exists#0)
        let tmp%17#0: bool = (== state_get%0#0 sender_bytes#0)
        (assert tmp%17#0)
        let tmp%18#0: bytes = (concat sender_bytes#0 app_address#0)
        (box_put "blob" tmp%18#0)
        let (_%5#0: uint64, maybe_exists%7#0: bool) = (box_len "blob")
        let tmp%19#0: bool = (== _%5#0 64u)
        (assert tmp%19#0)
        (box_create "box_ref" 32u)
        (box_del "box_ref")
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_test() -> void:
    block@0: // L415
        let box_0#0: bytes = (itob 0u)
        (box_del box_0#0)
        (box_put box_0#0 "Hmmmmm")
        let (value%0#0: uint64, check%0#0: bool) = (box_len box_0#0)
        let tmp%1#0: bool = (== value%0#0 6u)
        (assert tmp%1#0)
        let encoded_value%5#0: bytes[8] = (itob 1u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get encoded_value%5#0)
        let state_get%0#0: bytes = (select "default" maybe_value%0#0 maybe_exists%0#0)
        let tmp%5#0: bool = (== state_get%0#0 "default")
        (assert tmp%5#0)
        let (value#1: uint64, exists#0: bool) = (box_len encoded_value%5#0)
        let tmp%6#0: bool = (! exists#0)
        (assert tmp%6#0)
        (box_del encoded_value%5#0)
        (box_put encoded_value%5#0 "hello")
        (box_del encoded_value%5#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_set(key: uint64, value: string) -> void:
    block@0: // L439
        let encoded_value%0#0: bytes[8] = (itob key#0)
        (box_del encoded_value%0#0)
        (box_put encoded_value%0#0 value#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_get(key: uint64) -> string:
    block@0: // L443
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get encoded_value%0#0)
        (assert aggregate%box_get%1#0) // check self.box_map entry exists
        return aggregate%box_get%0#0

subroutine examples.box_storage.contract.BoxContract.box_map_del(key: uint64) -> void:
    block@0: // L447
        let encoded_value%0#0: bytes[8] = (itob key#0)
        (box_del encoded_value%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_exists(key: uint64) -> bool:
    block@0: // L451
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len encoded_value%0#0)
        return maybe_exists%0#0