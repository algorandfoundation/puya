main examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        examples.box_storage.contract.BoxContract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@7
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@6
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@6
    block@5: // switch_case_default_L26
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@7: // after_while_L20
        return 

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let tmp%0#0: bytes = ((substring 0 2) array#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) array#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_byte_length_head(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let tmp%0#0: bytes = ((substring 0 2) source#0)
        let size_b#0: bytes = tmp%0#0
        let tmp%1#0: uint64 = (btoi size_b#0)
        let array_length#0: uint64 = tmp%1#0
        let tmp%2#0: bytes = ((extract 2 0) source#0)
        let tmp%3#0: bytes = _puya_lib.arc4.static_array_replace_dynamic_element(tmp%2#0, new_item#0, index#0, array_length#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%3#0)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let tmp%1#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let original_offset#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let tmp%4#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let next_item_offset#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (len array_head_and_tail#0)
        let end_of_tail#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let tmp%7#0: uint64 = (- tmp%6#0 1u)
        let is_before_end#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let end_offset#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (- end_offset#0 original_offset#0)
        let original_item_length#0: uint64 = tmp%9#0
        let tmp%10#0: uint64 = (len new_item#0)
        let new_item_length#0: uint64 = tmp%10#0
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let tmp%14#0: bytes = (concat tmp%12#0 tmp%13#0)
        let new_head_and_tail#0: bytes = tmp%14#0
        let tmp%15#0: uint64 = (* array_length#0 2u)
        let tmp%16#0: uint64 = (+ index#0 1u)
        let tmp%17#0: uint64 = (* tmp%16#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%17#0
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tmp%18#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#0: uint64 = tmp%18#0
        let tmp%19#0: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#1: uint64 = tmp%19#0
        let tmp%20#0: uint64 = (- tail_offset#1 original_item_length#0)
        let tail_offset#2: uint64 = tmp%20#0
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tmp%22#0: bytes = ((extract 6 2) tmp%21#0)
        let tail_offset_bytes#0: bytes = tmp%22#0
        let tmp%23#0: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let new_head_and_tail#2: bytes = tmp%23#0
        goto block@3
    block@3: // for_footer_L273
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let offset_for_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let old_item_length#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let tmp%5#0: uint64 = (+ tmp%4#0 2u)
        let old_item_end#0: uint64 = tmp%5#0
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        return tmp%11#0

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tmp%3#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        let tail_offset#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* length#0 2u)
        let tmp%5#0: uint64 = (* start_at_index#0 2u)
        (assert 2u) // Step cannot be zero
        let head_offset#0: uint64 = tmp%5#0
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%4#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tmp%7#0: bytes = ((extract 6 2) tmp%6#0)
        let tail_offset_bytes#0: bytes = tmp%7#0
        let tmp%8#0: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let array_head_and_tail#2: bytes = tmp%8#0
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tmp%11#0: uint64 = (+ tail_offset#1 tmp%10#0)
        let tail_offset#2: uint64 = tmp%11#0
        let tmp%12#0: uint64 = (+ head_offset#1 2u)
        let head_offset#2: uint64 = tmp%12#0
        goto block@3
    block@3: // for_footer_L331
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine examples.box_storage.contract.get_box_value_plus_1(box: bytes) -> uint64:
    block@0: // L456
        let storage_value%0#0: bytes = box_read(box#0)
        let maybe_value_converted%0#0: uint64 = (btoi storage_value%0#0)
        let tmp%0#0: uint64 = (+ maybe_value_converted%0#0 1u)
        return tmp%0#0

subroutine examples.box_storage.contract.get_box_ref_length(ref: bytes) -> uint64:
    block@0: // L461
        let (value%0#0: uint64, check%0#0: bool) = (box_len ref#0)
        (assert check%0#0) // check BoxRef exists
        return value%0#0

subroutine examples.box_storage.contract.get_box_map_value_from_key_plus_1(box_map: bytes, key: uint64) -> string:
    block@0: // L466
        let materialized_values%0#0: uint64 = (+ key#0 1u)
        let encoded_value%0#0: bytes[8] = (itob materialized_values%0#0)
        let box_prefixed_key%0#0: bytes = (concat box_map#0 encoded_value%0#0)
        let storage_value%0#0: bytes = box_read(box_prefixed_key%0#0)
        return storage_value%0#0

subroutine examples.box_storage.contract.get_dynamic_arr_struct_byte_index(index: uint64) -> uint64:
    block@0: // L471
        let tmp%0#0: uint64 = (+ 8u 2u)
        let tmp%1#0: uint64 = (+ tmp%0#0 8u)
        let tmp%2#0: uint64 = (+ tmp%1#0 2u)
        let head#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (* index#0 8u)
        let tmp%4#0: uint64 = (+ 2u tmp%3#0)
        let dyn_arr_index#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (+ head#0 dyn_arr_index#0)
        return tmp%5#0

subroutine examples.box_storage.contract.get_dynamic_arr2_struct_byte_index(arr_size: uint64, arr2_index: uint64) -> uint64:
    block@0: // L478
        let tmp%0#0: uint64 = examples.box_storage.contract.get_dynamic_arr_struct_byte_index(arr_size#0)
        let head_and_dyn_arr#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (* arr2_index#0 8u)
        let tmp%2#0: uint64 = (+ 2u tmp%1#0)
        let dyn_arr2_index#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (+ head_and_dyn_arr#0 dyn_arr2_index#0)
        return tmp%3#0

subroutine examples.box_storage.contract.BoxContract.__puya_arc4_router__() -> bool:
    block@0: // L80
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@36
    block@1: // abi_routing_L80
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "set_boxes(uint64,byte[],string)void" => block@2, method "check_keys()void" => block@3, method "create_many_ints()void" => block@4, method "set_many_ints(uint64,uint64)void" => block@5, method "sum_many_ints()uint64" => block@6, method "delete_boxes()void" => block@7, method "indirect_extract_and_replace()void" => block@8, method "read_boxes()(uint64,byte[],string,uint64)" => block@9, method "boxes_exist()(bool,bool,bool,bool)" => block@10, method "create_dynamic_arr_struct()void" => block@11, method "delete_dynamic_arr_struct()void" => block@12, method "append_dynamic_arr_struct(uint64)uint64" => block@13, method "pop_dynamic_arr_struct(uint64)uint64" => block@14, method "set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void" => block@15, method "nested_write(uint64,uint64)void" => block@16, method "nested_read(uint64,uint64,uint64)uint64" => block@17, method "sum_dynamic_arr_struct()uint64" => block@18, method "create_dynamic_box()void" => block@19, method "delete_dynamic_box()void" => block@20, method "append_dynamic_box(uint64)uint64" => block@21, method "pop_dynamic_box(uint64)uint64" => block@22, method "sum_dynamic_box()uint64" => block@23, method "write_dynamic_box(uint64,uint64)void" => block@24, method "write_dynamic_arr_struct(uint64,uint64)void" => block@25, method "slice_box()void" => block@26, method "arc4_box()void" => block@27, method "test_box_ref()void" => block@28, method "box_map_test()void" => block@29, method "box_map_set(uint64,string)void" => block@30, method "box_map_get(uint64)string" => block@31, method "box_map_del(uint64)void" => block@32, method "box_map_exists(uint64)bool" => block@33, * => block@34}
    block@2: // set_boxes_route_L94
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        examples.box_storage.contract.BoxContract.set_boxes(tmp%7#0, reinterpret_Encoded(len+uint8[])%0#0, reinterpret_Encoded(len+utf8[])%0#0)
        return 1u
    block@3: // check_keys_route_L130
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.check_keys()
        return 1u
    block@4: // create_many_ints_route_L137
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.create_many_ints()
        return 1u
    block@5: // set_many_ints_route_L141
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (== tmp%16#0 NoOp)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        let tmp%19#0: bool = (!= tmp%18#0 0u)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%20#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%21#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        examples.box_storage.contract.BoxContract.set_many_ints(tmp%20#0, tmp%21#0)
        return 1u
    block@6: // sum_many_ints_route_L145
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (== tmp%22#0 NoOp)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%25#0) // can only call when not creating
        let tmp%26#0: uint64 = examples.box_storage.contract.BoxContract.sum_many_ints()
        let tmp%27#0: Encoded(uint64) = bytes_encode<uint64>(tmp%26#0)
        let tmp%28#0: bytes = (concat 0x151f7c75 tmp%27#0)
        (log tmp%28#0)
        return 1u
    block@7: // delete_boxes_route_L153
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (== tmp%29#0 NoOp)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.delete_boxes()
        return 1u
    block@8: // indirect_extract_and_replace_route_L166
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (== tmp%33#0 NoOp)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (!= tmp%35#0 0u)
        (assert tmp%36#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.indirect_extract_and_replace()
        return 1u
    block@9: // read_boxes_route_L172
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (== tmp%37#0 NoOp)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (!= tmp%39#0 0u)
        (assert tmp%40#0) // can only call when not creating
        let (tmp%41#0: uint64, tmp%42#0: bytes, tmp%43#0: Encoded(len+utf8[]), tmp%44#0: uint64) = examples.box_storage.contract.BoxContract.read_boxes()
        let tmp%45#0: Encoded(uint64,(len+uint8[]),(len+utf8[]),uint64) = bytes_encode<(uint64,(len+uint8[]),(len+utf8[]),uint64)>(tmp%41#0, tmp%42#0, tmp%43#0, tmp%44#0)
        let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
        (log tmp%46#0)
        return 1u
    block@10: // boxes_exist_route_L181
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (== tmp%47#0 NoOp)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (!= tmp%49#0 0u)
        (assert tmp%50#0) // can only call when not creating
        let (tmp%51#0: bool, tmp%52#0: bool, tmp%53#0: bool, tmp%54#0: bool) = examples.box_storage.contract.BoxContract.boxes_exist()
        let tmp%55#0: Encoded(bool1,bool1,bool1,bool1) = bytes_encode<(bool1,bool1,bool1,bool1)>(tmp%51#0, tmp%52#0, tmp%53#0, tmp%54#0)
        let tmp%56#0: bytes = (concat 0x151f7c75 tmp%55#0)
        (log tmp%56#0)
        return 1u
    block@11: // create_dynamic_arr_struct_route_L185
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (== tmp%57#0 NoOp)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        let tmp%60#0: bool = (!= tmp%59#0 0u)
        (assert tmp%60#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.create_dynamic_arr_struct()
        return 1u
    block@12: // delete_dynamic_arr_struct_route_L194
        let tmp%61#0: uint64 = (txn OnCompletion)
        let tmp%62#0: bool = (== tmp%61#0 NoOp)
        (assert tmp%62#0) // OnCompletion is not NoOp
        let tmp%63#0: uint64 = (txn ApplicationID)
        let tmp%64#0: bool = (!= tmp%63#0 0u)
        (assert tmp%64#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct()
        return 1u
    block@13: // append_dynamic_arr_struct_route_L198
        let tmp%65#0: uint64 = (txn OnCompletion)
        let tmp%66#0: bool = (== tmp%65#0 NoOp)
        (assert tmp%66#0) // OnCompletion is not NoOp
        let tmp%67#0: uint64 = (txn ApplicationID)
        let tmp%68#0: bool = (!= tmp%67#0 0u)
        (assert tmp%68#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%69#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%3#0)
        let tmp%70#0: uint64 = examples.box_storage.contract.BoxContract.append_dynamic_arr_struct(tmp%69#0)
        let tmp%71#0: Encoded(uint64) = bytes_encode<uint64>(tmp%70#0)
        let tmp%72#0: bytes = (concat 0x151f7c75 tmp%71#0)
        (log tmp%72#0)
        return 1u
    block@14: // pop_dynamic_arr_struct_route_L230
        let tmp%73#0: uint64 = (txn OnCompletion)
        let tmp%74#0: bool = (== tmp%73#0 NoOp)
        (assert tmp%74#0) // OnCompletion is not NoOp
        let tmp%75#0: uint64 = (txn ApplicationID)
        let tmp%76#0: bool = (!= tmp%75#0 0u)
        (assert tmp%76#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%77#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%4#0)
        let tmp%78#0: uint64 = examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct(tmp%77#0)
        let tmp%79#0: Encoded(uint64) = bytes_encode<uint64>(tmp%78#0)
        let tmp%80#0: bytes = (concat 0x151f7c75 tmp%79#0)
        (log tmp%80#0)
        return 1u
    block@15: // set_nested_struct_route_L252
        let tmp%81#0: uint64 = (txn OnCompletion)
        let tmp%82#0: bool = (== tmp%81#0 NoOp)
        (assert tmp%82#0) // OnCompletion is not NoOp
        let tmp%83#0: uint64 = (txn ApplicationID)
        let tmp%84#0: bool = (!= tmp%83#0 0u)
        (assert tmp%84#0) // can only call when not creating
        let reinterpret_Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)%0#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = (txna ApplicationArgs 1)
        examples.box_storage.contract.BoxContract.set_nested_struct(reinterpret_Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)%0#0)
        return 1u
    block@16: // nested_write_route_L266
        let tmp%85#0: uint64 = (txn OnCompletion)
        let tmp%86#0: bool = (== tmp%85#0 NoOp)
        (assert tmp%86#0) // OnCompletion is not NoOp
        let tmp%87#0: uint64 = (txn ApplicationID)
        let tmp%88#0: bool = (!= tmp%87#0 0u)
        (assert tmp%88#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%89#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%5#0)
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%90#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%6#0)
        examples.box_storage.contract.BoxContract.nested_write(tmp%89#0, tmp%90#0)
        return 1u
    block@17: // nested_read_route_L276
        let tmp%91#0: uint64 = (txn OnCompletion)
        let tmp%92#0: bool = (== tmp%91#0 NoOp)
        (assert tmp%92#0) // OnCompletion is not NoOp
        let tmp%93#0: uint64 = (txn ApplicationID)
        let tmp%94#0: bool = (!= tmp%93#0 0u)
        (assert tmp%94#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%7#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%95#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%7#0)
        let reinterpret_Encoded(uint64)%8#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%96#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%8#0)
        let reinterpret_Encoded(uint64)%9#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%97#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%9#0)
        let tmp%98#0: uint64 = examples.box_storage.contract.BoxContract.nested_read(tmp%95#0, tmp%96#0, tmp%97#0)
        let tmp%99#0: Encoded(uint64) = bytes_encode<uint64>(tmp%98#0)
        let tmp%100#0: bytes = (concat 0x151f7c75 tmp%99#0)
        (log tmp%100#0)
        return 1u
    block@18: // sum_dynamic_arr_struct_route_L288
        let tmp%101#0: uint64 = (txn OnCompletion)
        let tmp%102#0: bool = (== tmp%101#0 NoOp)
        (assert tmp%102#0) // OnCompletion is not NoOp
        let tmp%103#0: uint64 = (txn ApplicationID)
        let tmp%104#0: bool = (!= tmp%103#0 0u)
        (assert tmp%104#0) // can only call when not creating
        let tmp%105#0: uint64 = examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct()
        let tmp%106#0: Encoded(uint64) = bytes_encode<uint64>(tmp%105#0)
        let tmp%107#0: bytes = (concat 0x151f7c75 tmp%106#0)
        (log tmp%107#0)
        return 1u
    block@19: // create_dynamic_box_route_L299
        let tmp%108#0: uint64 = (txn OnCompletion)
        let tmp%109#0: bool = (== tmp%108#0 NoOp)
        (assert tmp%109#0) // OnCompletion is not NoOp
        let tmp%110#0: uint64 = (txn ApplicationID)
        let tmp%111#0: bool = (!= tmp%110#0 0u)
        (assert tmp%111#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.create_dynamic_box()
        return 1u
    block@20: // delete_dynamic_box_route_L303
        let tmp%112#0: uint64 = (txn OnCompletion)
        let tmp%113#0: bool = (== tmp%112#0 NoOp)
        (assert tmp%113#0) // OnCompletion is not NoOp
        let tmp%114#0: uint64 = (txn ApplicationID)
        let tmp%115#0: bool = (!= tmp%114#0 0u)
        (assert tmp%115#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.delete_dynamic_box()
        return 1u
    block@21: // append_dynamic_box_route_L307
        let tmp%116#0: uint64 = (txn OnCompletion)
        let tmp%117#0: bool = (== tmp%116#0 NoOp)
        (assert tmp%117#0) // OnCompletion is not NoOp
        let tmp%118#0: uint64 = (txn ApplicationID)
        let tmp%119#0: bool = (!= tmp%118#0 0u)
        (assert tmp%119#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%10#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%120#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%10#0)
        let tmp%121#0: uint64 = examples.box_storage.contract.BoxContract.append_dynamic_box(tmp%120#0)
        let tmp%122#0: Encoded(uint64) = bytes_encode<uint64>(tmp%121#0)
        let tmp%123#0: bytes = (concat 0x151f7c75 tmp%122#0)
        (log tmp%123#0)
        return 1u
    block@22: // pop_dynamic_box_route_L322
        let tmp%124#0: uint64 = (txn OnCompletion)
        let tmp%125#0: bool = (== tmp%124#0 NoOp)
        (assert tmp%125#0) // OnCompletion is not NoOp
        let tmp%126#0: uint64 = (txn ApplicationID)
        let tmp%127#0: bool = (!= tmp%126#0 0u)
        (assert tmp%127#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%11#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%128#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%11#0)
        let tmp%129#0: uint64 = examples.box_storage.contract.BoxContract.pop_dynamic_box(tmp%128#0)
        let tmp%130#0: Encoded(uint64) = bytes_encode<uint64>(tmp%129#0)
        let tmp%131#0: bytes = (concat 0x151f7c75 tmp%130#0)
        (log tmp%131#0)
        return 1u
    block@23: // sum_dynamic_box_route_L333
        let tmp%132#0: uint64 = (txn OnCompletion)
        let tmp%133#0: bool = (== tmp%132#0 NoOp)
        (assert tmp%133#0) // OnCompletion is not NoOp
        let tmp%134#0: uint64 = (txn ApplicationID)
        let tmp%135#0: bool = (!= tmp%134#0 0u)
        (assert tmp%135#0) // can only call when not creating
        let tmp%136#0: uint64 = examples.box_storage.contract.BoxContract.sum_dynamic_box()
        let tmp%137#0: Encoded(uint64) = bytes_encode<uint64>(tmp%136#0)
        let tmp%138#0: bytes = (concat 0x151f7c75 tmp%137#0)
        (log tmp%138#0)
        return 1u
    block@24: // write_dynamic_box_route_L340
        let tmp%139#0: uint64 = (txn OnCompletion)
        let tmp%140#0: bool = (== tmp%139#0 NoOp)
        (assert tmp%140#0) // OnCompletion is not NoOp
        let tmp%141#0: uint64 = (txn ApplicationID)
        let tmp%142#0: bool = (!= tmp%141#0 0u)
        (assert tmp%142#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%12#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%143#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%12#0)
        let reinterpret_Encoded(uint64)%13#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%144#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%13#0)
        examples.box_storage.contract.BoxContract.write_dynamic_box(tmp%143#0, tmp%144#0)
        return 1u
    block@25: // write_dynamic_arr_struct_route_L344
        let tmp%145#0: uint64 = (txn OnCompletion)
        let tmp%146#0: bool = (== tmp%145#0 NoOp)
        (assert tmp%146#0) // OnCompletion is not NoOp
        let tmp%147#0: uint64 = (txn ApplicationID)
        let tmp%148#0: bool = (!= tmp%147#0 0u)
        (assert tmp%148#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%14#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%149#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%14#0)
        let reinterpret_Encoded(uint64)%15#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%150#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%15#0)
        examples.box_storage.contract.BoxContract.write_dynamic_arr_struct(tmp%149#0, tmp%150#0)
        return 1u
    block@26: // slice_box_route_L348
        let tmp%151#0: uint64 = (txn OnCompletion)
        let tmp%152#0: bool = (== tmp%151#0 NoOp)
        (assert tmp%152#0) // OnCompletion is not NoOp
        let tmp%153#0: uint64 = (txn ApplicationID)
        let tmp%154#0: bool = (!= tmp%153#0 0u)
        (assert tmp%154#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.slice_box()
        return 1u
    block@27: // arc4_box_route_L357
        let tmp%155#0: uint64 = (txn OnCompletion)
        let tmp%156#0: bool = (== tmp%155#0 NoOp)
        (assert tmp%156#0) // OnCompletion is not NoOp
        let tmp%157#0: uint64 = (txn ApplicationID)
        let tmp%158#0: bool = (!= tmp%157#0 0u)
        (assert tmp%158#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.arc4_box()
        return 1u
    block@28: // test_box_ref_route_L367
        let tmp%159#0: uint64 = (txn OnCompletion)
        let tmp%160#0: bool = (== tmp%159#0 NoOp)
        (assert tmp%160#0) // OnCompletion is not NoOp
        let tmp%161#0: uint64 = (txn ApplicationID)
        let tmp%162#0: bool = (!= tmp%161#0 0u)
        (assert tmp%162#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.test_box_ref()
        return 1u
    block@29: // box_map_test_route_L415
        let tmp%163#0: uint64 = (txn OnCompletion)
        let tmp%164#0: bool = (== tmp%163#0 NoOp)
        (assert tmp%164#0) // OnCompletion is not NoOp
        let tmp%165#0: uint64 = (txn ApplicationID)
        let tmp%166#0: bool = (!= tmp%165#0 0u)
        (assert tmp%166#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.box_map_test()
        return 1u
    block@30: // box_map_set_route_L439
        let tmp%167#0: uint64 = (txn OnCompletion)
        let tmp%168#0: bool = (== tmp%167#0 NoOp)
        (assert tmp%168#0) // OnCompletion is not NoOp
        let tmp%169#0: uint64 = (txn ApplicationID)
        let tmp%170#0: bool = (!= tmp%169#0 0u)
        (assert tmp%170#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%16#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%171#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%16#0)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 2)
        let tmp%172#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%1#0)
        examples.box_storage.contract.BoxContract.box_map_set(tmp%171#0, tmp%172#0)
        return 1u
    block@31: // box_map_get_route_L443
        let tmp%173#0: uint64 = (txn OnCompletion)
        let tmp%174#0: bool = (== tmp%173#0 NoOp)
        (assert tmp%174#0) // OnCompletion is not NoOp
        let tmp%175#0: uint64 = (txn ApplicationID)
        let tmp%176#0: bool = (!= tmp%175#0 0u)
        (assert tmp%176#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%17#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%177#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%17#0)
        let tmp%178#0: string = examples.box_storage.contract.BoxContract.box_map_get(tmp%177#0)
        let tmp%179#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%178#0)
        let tmp%180#0: bytes = (concat 0x151f7c75 tmp%179#0)
        (log tmp%180#0)
        return 1u
    block@32: // box_map_del_route_L447
        let tmp%181#0: uint64 = (txn OnCompletion)
        let tmp%182#0: bool = (== tmp%181#0 NoOp)
        (assert tmp%182#0) // OnCompletion is not NoOp
        let tmp%183#0: uint64 = (txn ApplicationID)
        let tmp%184#0: bool = (!= tmp%183#0 0u)
        (assert tmp%184#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%18#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%185#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%18#0)
        examples.box_storage.contract.BoxContract.box_map_del(tmp%185#0)
        return 1u
    block@33: // box_map_exists_route_L451
        let tmp%186#0: uint64 = (txn OnCompletion)
        let tmp%187#0: bool = (== tmp%186#0 NoOp)
        (assert tmp%187#0) // OnCompletion is not NoOp
        let tmp%188#0: uint64 = (txn ApplicationID)
        let tmp%189#0: bool = (!= tmp%188#0 0u)
        (assert tmp%189#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%19#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%190#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%19#0)
        let tmp%191#0: bool = examples.box_storage.contract.BoxContract.box_map_exists(tmp%190#0)
        let tmp%192#0: Encoded(bool8) = bytes_encode<bool8>(tmp%191#0)
        let tmp%193#0: bytes = (concat 0x151f7c75 tmp%192#0)
        (log tmp%193#0)
        return 1u
    block@34: // switch_case_default_L80
        goto block@35
    block@35: // switch_case_next_L80
        goto block@40
    block@36: // bare_routing_L80
        let tmp%194#0: uint64 = (txn OnCompletion)
        switch tmp%194#0 {0u => block@37, * => block@38}
    block@37: // __algopy_default_create_L1
        let tmp%195#0: uint64 = (txn ApplicationID)
        let tmp%196#0: bool = (== tmp%195#0 0u)
        (assert tmp%196#0) // can only call when creating
        examples.box_storage.contract.BoxContract.__algopy_default_create()
        return 1u
    block@38: // switch_case_default_L80
        goto block@39
    block@39: // switch_case_next_L80
        goto block@40
    block@40: // after_if_else_L80
        return 0u

subroutine examples.box_storage.contract.BoxContract.__init__() -> void:
    block@0: // L81
        let tmp%0#0: bool = (> 4104u 4096u)
        (assert tmp%0#0) // expected ManyInts to exceed max bytes size
        return 

subroutine examples.box_storage.contract.BoxContract.set_boxes(a: uint64, b: Encoded(len+uint8[]), c: Encoded(len+utf8[])) -> void:
    block@0: // L94
        let encoded_value%0#0: bytes[8] = (itob a#0)
        box_write("box_a", encoded_value%0#0)
        box_write("b", b#0)
        box_write(0x424f585f43, c#0)
        let tmp%0#0: bytes = decode_bytes<bytes>(b#0)
        box_write("box_d", tmp%0#0)
        (box_create "box_large" 6160u)
        let storage_value%0#0: bytes = box_read("box_large")
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(42u)
        let updated_tuple%0#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = replace_value(storage_value%0#0, 4, encoded_value%1#0)
        box_write("box_large", updated_tuple%0#0)
        let tmp%1#0: uint64 = (* 1024u 4u)
        (box_replace "box_large" tmp%1#0 0x000000000000002a)
        let storage_value%1#0: bytes = box_read("b")
        let b_value#0: Encoded(len+uint8[]) = storage_value%1#0
        let storage_value%2#0: bytes = box_read("b")
        let tmp%2#0: uint64 = array_len(storage_value%2#0)
        let tmp%3#0: uint64 = array_len(b_value#0)
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0) // direct reference should match copy
        let storage_value%3#0: bytes = box_read("box_a")
        let maybe_value_converted%0#0: uint64 = (btoi storage_value%3#0)
        let tmp%5#0: uint64 = (+ maybe_value_converted%0#0 3u)
        let encoded_value%2#0: bytes[8] = (itob tmp%5#0)
        box_write("box_a", encoded_value%2#0)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "box_a")
        (assert check%0#0) // check self.box_a exists
        let tmp%6#0: bool = (== value%0#0 8u)
        (assert tmp%6#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "b")
        (assert check%1#0) // check self.box_b exists
        let tmp%7#0: uint64 = (len b#0)
        let tmp%8#0: bool = (== value%1#0 tmp%7#0)
        (assert tmp%8#0)
        let (value%2#0: uint64, check%2#0: bool) = (box_len 0x424f585f43)
        (assert check%2#0) // check self.box_c exists
        let tmp%9#0: uint64 = (len c#0)
        let tmp%10#0: bool = (== value%2#0 tmp%9#0)
        (assert tmp%10#0)
        let (value%3#0: uint64, check%3#0: bool) = (box_len "box_d")
        (assert check%3#0) // check self.box_d exists
        let tmp%11#0: bytes = decode_bytes<bytes>(b#0)
        let tmp%12#0: uint64 = (len tmp%11#0)
        let tmp%13#0: bool = (== value%3#0 tmp%12#0)
        (assert tmp%13#0)
        let tmp%14#0: bytes = (box_extract 0x424f585f43 0u 1u)
        let extract%0#0: bytes = (extract3 c#0 0u 1u)
        let tmp%15#0: bool = (== tmp%14#0 extract%0#0)
        (assert tmp%15#0)
        let (tmp%16#0: uint64, tmp%17#0: bool) = (box_len 0x424f585f43)
        let tmp%18#0: uint64 = (- tmp%16#0 1u)
        let tmp%19#0: bytes = (box_extract 0x424f585f43 tmp%18#0 1u)
        let tmp%20#0: uint64 = (len c#0)
        let tmp%21#0: uint64 = (- tmp%20#0 1u)
        let extract%1#0: bytes = (extract3 c#0 tmp%21#0 1u)
        let tmp%22#0: bool = (== tmp%19#0 extract%1#0)
        (assert tmp%22#0)
        let (tmp%23#0: uint64, tmp%24#0: bool) = (box_len 0x424f585f43)
        let tmp%25#0: bool = (< 1u tmp%23#0)
        let tmp%26#0: uint64 = (select tmp%23#0 1u tmp%25#0)
        let tmp%27#0: uint64 = (- tmp%23#0 tmp%26#0)
        let tmp%28#0: uint64 = (- tmp%27#0 0u)
        let tmp%29#0: bytes = (box_extract 0x424f585f43 0u tmp%28#0)
        let length%0#0: uint64 = (len c#0)
        let is_out_of_bounds%0#0: bool = (>= 1u length%0#0)
        let bounded_offset%0#0: uint64 = (select 1u length%0#0 is_out_of_bounds%0#0)
        let bounded_index%0#0: uint64 = (- length%0#0 bounded_offset%0#0)
        let tmp%30#0: bytes = (substring3 c#0 0u bounded_index%0#0)
        let tmp%31#0: bool = (== tmp%29#0 tmp%30#0)
        (assert tmp%31#0)
        let (tmp%32#0: uint64, tmp%33#0: bool) = (box_len 0x424f585f43)
        let tmp%34#0: bool = (< 2u tmp%32#0)
        let tmp%35#0: uint64 = (select tmp%32#0 2u tmp%34#0)
        let tmp%36#0: uint64 = (- tmp%35#0 0u)
        let tmp%37#0: bytes = (box_extract 0x424f585f43 0u tmp%36#0)
        let length%1#0: uint64 = (len c#0)
        let is_out_of_bounds%1#0: bool = (>= 2u length%1#0)
        let bounded_index%1#0: uint64 = (select 2u length%1#0 is_out_of_bounds%1#0)
        let tmp%38#0: bytes = (substring3 c#0 0u bounded_index%1#0)
        let tmp%39#0: bool = (== tmp%37#0 tmp%38#0)
        (assert tmp%39#0)
        let tmp%40#0: bytes = (box_extract "box_d" 0u 1u)
        let tmp%41#0: bytes = decode_bytes<bytes>(b#0)
        let extract%2#0: bytes = (extract3 tmp%41#0 0u 1u)
        let tmp%42#0: bool = (== tmp%40#0 extract%2#0)
        (assert tmp%42#0)
        let (tmp%43#0: uint64, tmp%44#0: bool) = (box_len "box_d")
        let tmp%45#0: uint64 = (- tmp%43#0 1u)
        let tmp%46#0: bytes = (box_extract "box_d" tmp%45#0 1u)
        let tmp%47#0: bytes = decode_bytes<bytes>(b#0)
        let tmp%48#0: uint64 = (len tmp%47#0)
        let tmp%49#0: uint64 = (- tmp%48#0 1u)
        let extract%3#0: bytes = (extract3 tmp%47#0 tmp%49#0 1u)
        let tmp%50#0: bool = (== tmp%46#0 extract%3#0)
        (assert tmp%50#0)
        let (tmp%51#0: uint64, tmp%52#0: bool) = (box_len "box_d")
        let tmp%53#0: bool = (< 1u tmp%51#0)
        let tmp%54#0: uint64 = (select tmp%51#0 1u tmp%53#0)
        let tmp%55#0: uint64 = (- tmp%51#0 tmp%54#0)
        let tmp%56#0: uint64 = (- tmp%55#0 0u)
        let tmp%57#0: bytes = (box_extract "box_d" 0u tmp%56#0)
        let tmp%58#0: bytes = decode_bytes<bytes>(b#0)
        let length%2#0: uint64 = (len tmp%58#0)
        let is_out_of_bounds%2#0: bool = (>= 1u length%2#0)
        let bounded_offset%1#0: uint64 = (select 1u length%2#0 is_out_of_bounds%2#0)
        let bounded_index%2#0: uint64 = (- length%2#0 bounded_offset%1#0)
        let tmp%59#0: bytes = (substring3 tmp%58#0 0u bounded_index%2#0)
        let tmp%60#0: bool = (== tmp%57#0 tmp%59#0)
        (assert tmp%60#0)
        let (tmp%61#0: uint64, tmp%62#0: bool) = (box_len "box_d")
        let tmp%63#0: bool = (< 5u tmp%61#0)
        let tmp%64#0: uint64 = (select tmp%61#0 5u tmp%63#0)
        let tmp%65#0: uint64 = (- tmp%64#0 0u)
        let tmp%66#0: bytes = (box_extract "box_d" 0u tmp%65#0)
        let tmp%67#0: bytes = decode_bytes<bytes>(b#0)
        let length%3#0: uint64 = (len tmp%67#0)
        let is_out_of_bounds%3#0: bool = (>= 5u length%3#0)
        let bounded_index%3#0: uint64 = (select 5u length%3#0 is_out_of_bounds%3#0)
        let tmp%68#0: bytes = (substring3 tmp%67#0 0u bounded_index%3#0)
        let tmp%69#0: bool = (== tmp%66#0 tmp%68#0)
        (assert tmp%69#0)
        let (tmp%70#0: uint64, tmp%71#0: bool) = (box_len "box_d")
        let tmp%72#0: bool = (< 2u tmp%70#0)
        let tmp%73#0: uint64 = (select tmp%70#0 2u tmp%72#0)
        let tmp%74#0: uint64 = (- tmp%73#0 0u)
        let tmp%75#0: bytes = (box_extract "box_d" 0u tmp%74#0)
        let tmp%76#0: bytes = decode_bytes<bytes>(b#0)
        let length%4#0: uint64 = (len tmp%76#0)
        let is_out_of_bounds%4#0: bool = (>= 2u length%4#0)
        let bounded_index%4#0: uint64 = (select 2u length%4#0 is_out_of_bounds%4#0)
        let tmp%77#0: bytes = (substring3 tmp%76#0 0u bounded_index%4#0)
        let tmp%78#0: bool = (== tmp%75#0 tmp%77#0)
        (assert tmp%78#0)
        let (value%4#0: uint64, check%4#0: bool) = (box_len "box_large")
        (assert check%4#0) // check self.box_large exists
        let tmp%79#0: bool = (== value%4#0 6160u)
        (assert tmp%79#0)
        return 

subroutine examples.box_storage.contract.BoxContract.check_keys() -> void:
    block@0: // L130
        let tmp%0#0: bool = (== "box_a" 0x626f785f61)
        (assert tmp%0#0) // box a key ok
        let tmp%1#0: bool = (== "b" 0x62)
        (assert tmp%1#0) // box b key ok
        let tmp%2#0: bool = (== 0x424f585f43 0x424f585f43)
        (assert tmp%2#0) // box c key ok
        let tmp%3#0: bool = (== "box_large" 0x626f785f6c61726765)
        (assert tmp%3#0) // box large key ok
        return 

subroutine examples.box_storage.contract.BoxContract.create_many_ints() -> void:
    block@0: // L137
        (box_create "many_ints" 4104u)
        return 

subroutine examples.box_storage.contract.BoxContract.set_many_ints(index: uint64, value: uint64) -> void:
    block@0: // L141
        let storage_value%0#0: bytes = box_read("many_ints")
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(value#0)
        let updated_array%0#0: Encoded(uint64[513]) = replace_value(storage_value%0#0, index#0, encoded_value%0#0)
        box_write("many_ints", updated_array%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.sum_many_ints() -> uint64:
    block@0: // L145
        _puya_lib.util.ensure_budget(10500u, 0u)
        let total#0: uint64 = 0u
        let storage_value%0#0: bytes = box_read("many_ints")
        let array_length%0#0: uint64 = array_len(storage_value%0#0)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L149
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L150
        let array_item%0#0: Encoded(uint64) = extract_value(storage_value%0#0, item_index_internal%0#1)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let val#0: uint64 = values%0#0
        let tmp%0#0: uint64 = (+ total#1 val#0)
        let total#2: uint64 = tmp%0#0
        goto block@3
    block@3: // for_footer_L149
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L149
        return total#1

subroutine examples.box_storage.contract.BoxContract.delete_boxes() -> void:
    block@0: // L153
        (box_del "box_a")
        (box_del "b")
        (box_del 0x424f585f43)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "box_a")
        let maybe_value_converted%0#0: uint64 = (btoi maybe_value%0#0)
        let state_get%0#0: uint64 = (select 42u maybe_value_converted%0#0 maybe_exists%0#0)
        let tmp%0#0: bool = (== state_get%0#0 42u)
        (assert tmp%0#0)
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x3432)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "b")
        let state_get%1#0: bytes = (select tmp%1#0 maybe_value%1#0 maybe_exists%1#0)
        let tmp%2#0: bytes = decode_bytes<bytes>(state_get%1#0)
        let tmp%3#0: bool = (== tmp%2#0 0x3432)
        (assert tmp%3#0)
        let tmp%4#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("42")
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get 0x424f585f43)
        let state_get%2#0: bytes = (select tmp%4#0 maybe_value%2#0 maybe_exists%2#0)
        let tmp%5#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("42")
        let tmp%6#0: bool = (== state_get%2#0 tmp%5#0)
        (assert tmp%6#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get "box_a")
        let maybe_value_converted%1#0: uint64 = (btoi maybe_value%3#0)
        let a#0: uint64 = maybe_value_converted%1#0
        let a_exists#0: bool = maybe_exists%3#0
        let tmp%7#0: bool = (! a_exists#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (== a#0 0u)
        (assert tmp%8#0)
        (box_del "box_large")
        return 

subroutine examples.box_storage.contract.BoxContract.indirect_extract_and_replace() -> void:
    block@0: // L166
        let storage_value%0#0: bytes = box_read("box_large")
        let large#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = storage_value%0#0
        let tuple_item%0#0: Encoded(uint64) = extract_value(large#0, 4)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#0: uint64 = (+ values%0#0 1u)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#0)
        let updated_tuple%0#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = replace_value(large#0, 4, encoded_value%0#0)
        let large#1: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = updated_tuple%0#0
        box_write("box_large", large#1)
        return 

subroutine examples.box_storage.contract.BoxContract.read_boxes() -> <uint64, bytes, Encoded(len+utf8[]), uint64>:
    block@0: // L172
        let tmp%0#0: uint64 = examples.box_storage.contract.get_box_value_plus_1("box_a")
        let tmp%1#0: uint64 = (- tmp%0#0 1u)
        let storage_value%0#0: bytes = box_read("b")
        let tmp%2#0: bytes = decode_bytes<bytes>(storage_value%0#0)
        let storage_value%1#0: bytes = box_read(0x424f585f43)
        let storage_value%2#0: bytes = box_read("box_large")
        let tuple_item%0#0: Encoded(uint64) = extract_value(storage_value%2#0, 4)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        return tmp%1#0 tmp%2#0 storage_value%1#0 values%0#0

subroutine examples.box_storage.contract.BoxContract.boxes_exist() -> <bool, bool, bool, bool>:
    block@0: // L181
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "box_a")
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "b")
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len 0x424f585f43)
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "box_large")
        return maybe_exists%0#0 maybe_exists%1#0 maybe_exists%2#0 maybe_exists%3#0

subroutine examples.box_storage.contract.BoxContract.create_dynamic_arr_struct() -> void:
    block@0: // L185
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>()
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: uint64 = (* tmp%1#0 2u)
        let encoded_array%1#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>()
        let tmp%3#0: Encoded(uint64,(len+uint64[]),uint64,(len+uint64[])) = bytes_encode<(uint64,(len+uint64[]),uint64,(len+uint64[]))>(tmp%0#0, encoded_array%0#0, tmp%2#0, encoded_array%1#0)
        box_write("dynamic_arr_struct", tmp%3#0)
        return 

subroutine examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct() -> void:
    block@0: // L194
        (box_del "dynamic_arr_struct")
        return 

subroutine examples.box_storage.contract.BoxContract.append_dynamic_arr_struct(times: uint64) -> uint64:
    block@0: // L198
        let storage_value%0#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%0#0: Encoded(uint64) = extract_value(storage_value%0#0, 2)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#0: bool = (== values%0#0 2u)
        (assert tmp%0#0) // expected 2
        let storage_value%1#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%1#0: Encoded(len+uint64[]) = extract_value(storage_value%1#0, 1)
        let tmp%1#0: uint64 = array_len(tuple_item%1#0)
        let arr_len#0: uint64 = tmp%1#0
        let storage_value%2#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%2#0: Encoded(len+uint64[]) = extract_value(storage_value%2#0, 3)
        let tmp%2#0: uint64 = array_len(tuple_item%2#0)
        let arr2_len#0: uint64 = tmp%2#0
        let tmp%3#0: uint64 = (+ arr_len#0 times#0)
        let tmp%4#0: uint64 = examples.box_storage.contract.get_dynamic_arr2_struct_byte_index(tmp%3#0, arr2_len#0)
        (box_resize "dynamic_arr_struct" tmp%4#0)
        let tmp%5#0: uint64 = examples.box_storage.contract.get_dynamic_arr_struct_byte_index(arr_len#0)
        let tmp%6#0: uint64 = (* times#0 8u)
        let tmp%7#0: bytes = (bzero tmp%6#0)
        (box_splice "dynamic_arr_struct" tmp%5#0 0u tmp%7#0)
        let box#0: bytes = "dynamic_arr_struct"
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L216
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr_len#1: uint64 = φ(arr_len#0 <- block@0, arr_len#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 times#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L217
        let storage_value%3#0: bytes = box_read(box#0)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(i#1)
        let updated_tuple%0#0: Encoded(uint64,uint16,uint64,uint16,(uint16,uint64[4095])) = replace_value(storage_value%3#0, 4, 1, arr_len#1, encoded_value%0#0)
        box_write(box#0, updated_tuple%0#0)
        let tmp%8#0: uint64 = (+ arr_len#1 1u)
        let arr_len#2: uint64 = tmp%8#0
        goto block@3
    block@3: // for_footer_L216
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L216
        let tmp%9#0: Encoded(uint16) = bytes_encode<uint16>(arr_len#1)
        let storage_value%4#0: bytes = box_read(box#0)
        let updated_tuple%1#0: Encoded(uint64,uint16,uint64,uint16,(uint16,uint64[4095])) = replace_value(storage_value%4#0, 4, 0, tmp%9#0)
        box_write(box#0, updated_tuple%1#0)
        let tmp%10#0: uint64 = examples.box_storage.contract.get_dynamic_arr2_struct_byte_index(arr_len#1, 0u)
        let tmp%11#0: uint64 = (- tmp%10#0 2u)
        let arr2_offset#0: uint64 = tmp%11#0
        let tmp%12#0: Encoded(uint16) = bytes_encode<uint16>(arr2_offset#0)
        let storage_value%5#0: bytes = box_read(box#0)
        let updated_tuple%2#0: Encoded(uint64,uint16,uint64,uint16,(uint16,uint64[4095])) = replace_value(storage_value%5#0, 3, tmp%12#0)
        box_write(box#0, updated_tuple%2#0)
        let storage_value%6#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%3#0: Encoded(len+uint64[]) = extract_value(storage_value%6#0, 1)
        let tmp%13#0: uint64 = array_len(tuple_item%3#0)
        let tmp%14#0: bool = (== tmp%13#0 arr_len#1)
        (assert tmp%14#0) // expected arr length to be correct
        let storage_value%7#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%4#0: Encoded(len+uint64[]) = extract_value(storage_value%7#0, 3)
        let tmp%15#0: uint64 = array_len(tuple_item%4#0)
        let tmp%16#0: bool = (== tmp%15#0 0u)
        (assert tmp%16#0) // expected arr2 length to be correct
        let storage_value%8#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%5#0: Encoded(len+uint64[]) = extract_value(storage_value%8#0, 1)
        let tmp%17#0: uint64 = array_len(tuple_item%5#0)
        return tmp%17#0

subroutine examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct(times: uint64) -> uint64:
    block@0: // L230
        let storage_value%0#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%0#0: Encoded(len+uint64[]) = extract_value(storage_value%0#0, 1)
        let tmp%0#0: uint64 = array_len(tuple_item%0#0)
        let tmp%1#0: uint64 = (- tmp%0#0 times#0)
        let arr_len#0: uint64 = tmp%1#0
        let storage_value%1#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%1#0: Encoded(len+uint64[]) = extract_value(storage_value%1#0, 3)
        let tmp%2#0: uint64 = array_len(tuple_item%1#0)
        let arr2_len#0: uint64 = tmp%2#0
        let box#0: bytes = "dynamic_arr_struct"
        let tmp%3#0: uint64 = examples.box_storage.contract.get_dynamic_arr2_struct_byte_index(arr_len#0, 0u)
        let tmp%4#0: uint64 = (- tmp%3#0 2u)
        let arr2_offset#0: uint64 = tmp%4#0
        let tmp%5#0: Encoded(uint16) = bytes_encode<uint16>(arr_len#0)
        let storage_value%2#0: bytes = box_read(box#0)
        let updated_tuple%0#0: Encoded(uint64,uint16,uint64,uint16,(uint16,uint64[4095])) = replace_value(storage_value%2#0, 4, 0, tmp%5#0)
        box_write(box#0, updated_tuple%0#0)
        let tmp%6#0: Encoded(uint16) = bytes_encode<uint16>(arr2_offset#0)
        let storage_value%3#0: bytes = box_read(box#0)
        let updated_tuple%1#0: Encoded(uint64,uint16,uint64,uint16,(uint16,uint64[4095])) = replace_value(storage_value%3#0, 3, tmp%6#0)
        box_write(box#0, updated_tuple%1#0)
        let tmp%7#0: uint64 = examples.box_storage.contract.get_dynamic_arr_struct_byte_index(arr_len#0)
        let index#0: uint64 = tmp%7#0
        let tmp%8#0: uint64 = (* times#0 8u)
        (box_splice box#0 index#0 tmp%8#0 0x)
        let tmp%9#0: uint64 = examples.box_storage.contract.get_dynamic_arr2_struct_byte_index(arr_len#0, arr2_len#0)
        let size#0: uint64 = tmp%9#0
        (box_resize "dynamic_arr_struct" size#0)
        let storage_value%4#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%2#0: Encoded(len+uint64[]) = extract_value(storage_value%4#0, 1)
        let tmp%10#0: uint64 = array_len(tuple_item%2#0)
        return tmp%10#0

subroutine examples.box_storage.contract.BoxContract.set_nested_struct(struct: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) -> void:
    block@0: // L252
        let box#0: bytes = "box"
        let tuple_item%0#0: Encoded(uint64) = extract_value(struct#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#0: bool = (!= values%0#0 0u)
        (assert tmp%0#0) // struct.a is truthy
        let tmp%1#0: bytes = (txna ApplicationArgs 1)
        let struct_bytes#0: bytes = tmp%1#0
        let tmp%2#0: uint64 = (len struct_bytes#0)
        let struct_size#0: uint64 = tmp%2#0
        let tail_offset#0: uint64 = 4098u
        let tmp%3#0: uint64 = (+ tail_offset#0 struct_size#0)
        (box_create box#0 tmp%3#0)
        let tmp%4#0: uint64 = (- tail_offset#0 2u)
        let tmp%5#0: Encoded(uint16) = bytes_encode<uint16>(tail_offset#0)
        (box_replace box#0 tmp%4#0 tmp%5#0)
        (box_replace box#0 tail_offset#0 struct_bytes#0)
        return 

subroutine examples.box_storage.contract.BoxContract.nested_write(index: uint64, value: uint64) -> void:
    block@0: // L266
        let box#0: bytes = "box"
        let storage_value%0#0: bytes = box_read(box#0)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(value#0)
        let updated_tuple%0#0: Encoded(uint8[4096],(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) = replace_value(storage_value%0#0, 1, 0, encoded_value%0#0)
        box_write(box#0, updated_tuple%0#0)
        let tmp%0#0: uint64 = (+ value#0 1u)
        let storage_value%1#0: bytes = box_read(box#0)
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#0)
        let updated_tuple%1#0: Encoded(uint8[4096],(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) = replace_value(storage_value%1#0, 1, 3, encoded_value%1#0)
        box_write(box#0, updated_tuple%1#0)
        let tmp%1#0: uint64 = (+ value#0 2u)
        let storage_value%2#0: bytes = box_read(box#0)
        let encoded_value%2#0: Encoded(uint64) = bytes_encode<uint64>(tmp%1#0)
        let updated_tuple%2#0: Encoded(uint8[4096],(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) = replace_value(storage_value%2#0, 1, 1, 1, index#0, index#0, encoded_value%2#0)
        box_write(box#0, updated_tuple%2#0)
        let tmp%2#0: uint64 = (+ value#0 3u)
        let storage_value%3#0: bytes = box_read(box#0)
        let encoded_value%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#0)
        let updated_tuple%3#0: Encoded(uint8[4096],(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) = replace_value(storage_value%3#0, 1, 1, 0, encoded_value%3#0)
        box_write(box#0, updated_tuple%3#0)
        let tmp%3#0: uint64 = (+ value#0 4u)
        let storage_value%4#0: bytes = box_read(box#0)
        let encoded_value%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%3#0)
        let updated_tuple%4#0: Encoded(uint8[4096],(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) = replace_value(storage_value%4#0, 1, 1, 2, encoded_value%4#0)
        box_write(box#0, updated_tuple%4#0)
        let tmp%4#0: uint64 = (+ value#0 5u)
        let storage_value%5#0: bytes = box_read(box#0)
        let encoded_value%5#0: Encoded(uint64) = bytes_encode<uint64>(tmp%4#0)
        let updated_tuple%5#0: Encoded(uint8[4096],(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) = replace_value(storage_value%5#0, 1, 2, index#0, 1, index#0, index#0, encoded_value%5#0)
        box_write(box#0, updated_tuple%5#0)
        return 

subroutine examples.box_storage.contract.BoxContract.nested_read(i1: uint64, i2: uint64, i3: uint64) -> uint64:
    block@0: // L276
        let box#0: bytes = "box"
        let storage_value%0#0: bytes = box_read(box#0)
        let tuple_item%0#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = extract_value(storage_value%0#0, 1)
        let tuple_item%1#0: Encoded(uint64) = extract_value(tuple_item%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let a#0: uint64 = values%0#0
        let storage_value%1#0: bytes = box_read(box#0)
        let tuple_item%2#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = extract_value(storage_value%1#0, 1)
        let tuple_item%3#0: Encoded(uint64) = extract_value(tuple_item%2#0, 3)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let b#0: uint64 = values%1#0
        let storage_value%2#0: bytes = box_read(box#0)
        let tuple_item%4#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = extract_value(storage_value%2#0, 1)
        let tuple_item%5#0: Encoded(uint64,(len+(len+uint64[])[]),uint64) = extract_value(tuple_item%4#0, 1)
        let tuple_item%6#0: Encoded(len+(len+uint64[])[]) = extract_value(tuple_item%5#0, 1)
        let array_item%0#0: Encoded(len+uint64[]) = extract_value(tuple_item%6#0, i1#0)
        let array_item%1#0: Encoded(uint64) = extract_value(array_item%0#0, i2#0)
        let values%2#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let arr_arr#0: uint64 = values%2#0
        let storage_value%3#0: bytes = box_read(box#0)
        let tuple_item%7#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = extract_value(storage_value%3#0, 1)
        let tuple_item%8#0: Encoded(uint64,(len+(len+uint64[])[]),uint64) = extract_value(tuple_item%7#0, 1)
        let tuple_item%9#0: Encoded(uint64) = extract_value(tuple_item%8#0, 0)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%9#0)
        let c#0: uint64 = values%3#0
        let storage_value%4#0: bytes = box_read(box#0)
        let tuple_item%10#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = extract_value(storage_value%4#0, 1)
        let tuple_item%11#0: Encoded(uint64,(len+(len+uint64[])[]),uint64) = extract_value(tuple_item%10#0, 1)
        let tuple_item%12#0: Encoded(uint64) = extract_value(tuple_item%11#0, 2)
        let values%4#0: uint64 = decode_bytes<uint64>(tuple_item%12#0)
        let d#0: uint64 = values%4#0
        let storage_value%5#0: bytes = box_read(box#0)
        let tuple_item%13#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = extract_value(storage_value%5#0, 1)
        let tuple_item%14#0: Encoded(len+(uint64,(len+(len+uint64[])[]),uint64)[]) = extract_value(tuple_item%13#0, 2)
        let array_item%2#0: Encoded(uint64,(len+(len+uint64[])[]),uint64) = extract_value(tuple_item%14#0, i1#0)
        let tuple_item%15#0: Encoded(len+(len+uint64[])[]) = extract_value(array_item%2#0, 1)
        let array_item%3#0: Encoded(len+uint64[]) = extract_value(tuple_item%15#0, i2#0)
        let array_item%4#0: Encoded(uint64) = extract_value(array_item%3#0, i3#0)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let woah_arr_arr#0: uint64 = values%5#0
        let tmp%0#0: uint64 = (+ a#0 b#0)
        let tmp%1#0: uint64 = (+ tmp%0#0 arr_arr#0)
        let tmp%2#0: uint64 = (+ tmp%1#0 c#0)
        let tmp%3#0: uint64 = (+ tmp%2#0 d#0)
        let tmp%4#0: uint64 = (+ tmp%3#0 woah_arr_arr#0)
        return tmp%4#0

subroutine examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct() -> uint64:
    block@0: // L288
        let storage_value%0#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%0#0: Encoded(uint64) = extract_value(storage_value%0#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#0: bool = (== values%0#0 1u)
        (assert tmp%0#0) // expected 1
        let storage_value%1#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%1#0: Encoded(uint64) = extract_value(storage_value%1#0, 2)
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tmp%1#0: bool = (== values%1#0 2u)
        (assert tmp%1#0) // expected 2
        let storage_value%2#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%2#0: Encoded(uint64) = extract_value(storage_value%2#0, 0)
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let storage_value%3#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%3#0: Encoded(uint64) = extract_value(storage_value%3#0, 2)
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let tmp%2#0: uint64 = (+ values%2#0 values%3#0)
        let total#0: uint64 = tmp%2#0
        let storage_value%4#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%4#0: Encoded(len+uint64[]) = extract_value(storage_value%4#0, 1)
        let array_length%0#0: uint64 = array_len(tuple_item%4#0)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L293
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L294
        let array_item%0#0: Encoded(uint64) = extract_value(tuple_item%4#0, item_index_internal%0#1)
        let values%4#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let val#0: uint64 = values%4#0
        let tmp%3#0: uint64 = (+ total#1 val#0)
        let total#2: uint64 = tmp%3#0
        goto block@3
    block@3: // for_footer_L293
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L293
        let storage_value%5#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%5#0: Encoded(len+uint64[]) = extract_value(storage_value%5#0, 3)
        let array_length%1#0: uint64 = array_len(tuple_item%5#0)
        let item_index_internal%1#0: uint64 = 0u
        let reverse_index_internal%1#0: uint64 = array_length%1#0
        goto block@5
    block@5: // for_header_L295
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@4, item_index_internal%1#2 <- block@7)
        let total#3: uint64 = φ(total#1 <- block@4, total#4 <- block@7)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%1#0)
        goto continue_looping%1#0 ? block@6 : block@8
    block@6: // for_body_L296
        let array_item%1#0: Encoded(uint64) = extract_value(tuple_item%5#0, item_index_internal%1#1)
        let values%5#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let val#1: uint64 = values%5#0
        let tmp%4#0: uint64 = (+ total#3 val#1)
        let total#4: uint64 = tmp%4#0
        goto block@7
    block@7: // for_footer_L295
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@5
    block@8: // after_for_L295
        return total#3

subroutine examples.box_storage.contract.BoxContract.create_dynamic_box() -> void:
    block@0: // L299
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>()
        box_write("dynamic_box", encoded_array%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.delete_dynamic_box() -> void:
    block@0: // L303
        (box_del "dynamic_box")
        return 

subroutine examples.box_storage.contract.BoxContract.append_dynamic_box(times: uint64) -> uint64:
    block@0: // L307
        let box#0: bytes = "dynamic_box"
        let storage_value%0#0: bytes = box_read(box#0)
        let tuple_item%0#0: Encoded(uint16) = extract_value(storage_value%0#0, 0)
        let tmp%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let arr_len#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ arr_len#0 times#0)
        let tmp%2#0: uint64 = (* tmp%1#0 8u)
        let tmp%3#0: uint64 = (+ 2u tmp%2#0)
        (box_resize "dynamic_box" tmp%3#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L315
        let i#1: uint64 = φ(i#0 <- block@0, i#2 <- block@3)
        let arr_len#1: uint64 = φ(arr_len#0 <- block@0, arr_len#2 <- block@3)
        let continue_looping%0#0: bool = (< i#1 times#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L316
        let storage_value%1#0: bytes = box_read(box#0)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(i#1)
        let updated_tuple%0#0: Encoded(uint16,uint64[4095]) = replace_value(storage_value%1#0, 1, arr_len#1, encoded_value%0#0)
        box_write(box#0, updated_tuple%0#0)
        let tmp%4#0: uint64 = (+ arr_len#1 1u)
        let arr_len#2: uint64 = tmp%4#0
        goto block@3
    block@3: // for_footer_L315
        let i#2: uint64 = (+ i#1 1u)
        goto block@1
    block@4: // after_for_L315
        let tmp%5#0: Encoded(uint16) = bytes_encode<uint16>(arr_len#1)
        let storage_value%2#0: bytes = box_read(box#0)
        let updated_tuple%1#0: Encoded(uint16,uint64[4095]) = replace_value(storage_value%2#0, 0, tmp%5#0)
        box_write(box#0, updated_tuple%1#0)
        let storage_value%3#0: bytes = box_read("dynamic_box")
        let tmp%6#0: uint64 = array_len(storage_value%3#0)
        return tmp%6#0

subroutine examples.box_storage.contract.BoxContract.pop_dynamic_box(times: uint64) -> uint64:
    block@0: // L322
        let box#0: bytes = "dynamic_box"
        let storage_value%0#0: bytes = box_read(box#0)
        let tuple_item%0#0: Encoded(uint16) = extract_value(storage_value%0#0, 0)
        let tmp%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%1#0: uint64 = (- tmp%0#0 times#0)
        let arr_len#0: uint64 = tmp%1#0
        let tmp%2#0: Encoded(uint16) = bytes_encode<uint16>(arr_len#0)
        let storage_value%1#0: bytes = box_read(box#0)
        let updated_tuple%0#0: Encoded(uint16,uint64[4095]) = replace_value(storage_value%1#0, 0, tmp%2#0)
        box_write(box#0, updated_tuple%0#0)
        let tmp%3#0: uint64 = (* arr_len#0 8u)
        let tmp%4#0: uint64 = (+ 2u tmp%3#0)
        (box_resize "dynamic_box" tmp%4#0)
        let storage_value%2#0: bytes = box_read("dynamic_box")
        let tmp%5#0: uint64 = array_len(storage_value%2#0)
        return tmp%5#0

subroutine examples.box_storage.contract.BoxContract.sum_dynamic_box() -> uint64:
    block@0: // L333
        let total#0: uint64 = 0u
        let storage_value%0#0: bytes = box_read("dynamic_box")
        let array_length%0#0: uint64 = array_len(storage_value%0#0)
        let item_index_internal%0#0: uint64 = 0u
        let reverse_index_internal%0#0: uint64 = array_length%0#0
        goto block@1
    block@1: // for_header_L336
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L337
        let array_item%0#0: Encoded(uint64) = extract_value(storage_value%0#0, item_index_internal%0#1)
        let values%0#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let val#0: uint64 = values%0#0
        let tmp%0#0: uint64 = (+ total#1 val#0)
        let total#2: uint64 = tmp%0#0
        goto block@3
    block@3: // for_footer_L336
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L336
        return total#1

subroutine examples.box_storage.contract.BoxContract.write_dynamic_box(index: uint64, value: uint64) -> void:
    block@0: // L340
        let storage_value%0#0: bytes = box_read("dynamic_box")
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(value#0)
        let updated_array%0#0: Encoded(len+uint64[]) = replace_value(storage_value%0#0, index#0, encoded_value%0#0)
        box_write("dynamic_box", updated_array%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.write_dynamic_arr_struct(index: uint64, value: uint64) -> void:
    block@0: // L344
        let storage_value%0#0: bytes = box_read("dynamic_arr_struct")
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(value#0)
        let updated_tuple%0#0: Encoded(uint64,(len+uint64[]),uint64,(len+uint64[])) = replace_value(storage_value%0#0, 1, index#0, encoded_value%0#0)
        box_write("dynamic_arr_struct", updated_tuple%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.slice_box() -> void:
    block@0: // L348
        let box_0#0: bytes = "0"
        box_write(box_0#0, 0x54657374696e672074657374696e6720313233)
        let (tmp%0#0: uint64, tmp%1#0: bool) = (box_len box_0#0)
        let tmp%2#0: bool = (< 0u tmp%0#0)
        let tmp%3#0: uint64 = (select tmp%0#0 0u tmp%2#0)
        let tmp%4#0: bool = (< 7u tmp%0#0)
        let tmp%5#0: uint64 = (select tmp%0#0 7u tmp%4#0)
        let tmp%6#0: uint64 = (- tmp%5#0 tmp%3#0)
        let tmp%7#0: bytes = (box_extract box_0#0 tmp%3#0 tmp%6#0)
        let tmp%8#0: bool = (== tmp%7#0 0x54657374696e67)
        (assert tmp%8#0)
        let tmp%9#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Hello")
        box_write(0x424f585f43, tmp%9#0)
        let (tmp%10#0: uint64, tmp%11#0: bool) = (box_len 0x424f585f43)
        let tmp%12#0: bool = (< 2u tmp%10#0)
        let tmp%13#0: uint64 = (select tmp%10#0 2u tmp%12#0)
        let tmp%14#0: bool = (< 10u tmp%10#0)
        let tmp%15#0: uint64 = (select tmp%10#0 10u tmp%14#0)
        let tmp%16#0: uint64 = (- tmp%15#0 tmp%13#0)
        let tmp%17#0: bytes = (box_extract 0x424f585f43 tmp%13#0 tmp%16#0)
        let tmp%18#0: bool = (== tmp%17#0 0x48656c6c6f)
        (assert tmp%18#0)
        return 

subroutine examples.box_storage.contract.BoxContract.arc4_box() -> void:
    block@0: // L357
        let box_d#0: bytes = 0x64
        let encoded_array%0#0: Encoded(uint8[4]) = bytes_encode<uint8[4]>(0x00, 0x01, 0x02, 0x03)
        box_write(box_d#0, encoded_array%0#0)
        let storage_value%0#0: bytes = box_read(box_d#0)
        let array_item%0#0: Encoded(uint8) = extract_value(storage_value%0#0, 0u)
        let reinterpret_biguint%0#0: biguint = array_item%0#0
        let reinterpret_biguint%1#0: biguint = 0x00
        let tmp%0#0: bool = (b== reinterpret_biguint%0#0 reinterpret_biguint%1#0)
        (assert tmp%0#0)
        let storage_value%1#0: bytes = box_read(box_d#0)
        let array_item%1#0: Encoded(uint8) = extract_value(storage_value%1#0, 1u)
        let reinterpret_biguint%2#0: biguint = array_item%1#0
        let reinterpret_biguint%3#0: biguint = 0x01
        let tmp%1#0: bool = (b== reinterpret_biguint%2#0 reinterpret_biguint%3#0)
        (assert tmp%1#0)
        let storage_value%2#0: bytes = box_read(box_d#0)
        let array_item%2#0: Encoded(uint8) = extract_value(storage_value%2#0, 2u)
        let reinterpret_biguint%4#0: biguint = array_item%2#0
        let reinterpret_biguint%5#0: biguint = 0x02
        let tmp%2#0: bool = (b== reinterpret_biguint%4#0 reinterpret_biguint%5#0)
        (assert tmp%2#0)
        let storage_value%3#0: bytes = box_read(box_d#0)
        let array_item%3#0: Encoded(uint8) = extract_value(storage_value%3#0, 3u)
        let reinterpret_biguint%6#0: biguint = array_item%3#0
        let reinterpret_biguint%7#0: biguint = 0x03
        let tmp%3#0: bool = (b== reinterpret_biguint%6#0 reinterpret_biguint%7#0)
        (assert tmp%3#0)
        return 

subroutine examples.box_storage.contract.BoxContract.test_box_ref() -> void:
    block@0: // L367
        let box_ref#0: bytes = "blob"
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_ref#0)
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0) // no data
        let box_ref#1: bytes = 0x626c6f62
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len box_ref#1)
        let tmp%1#0: bool = (! maybe_exists%1#0)
        (assert tmp%1#0) // no data
        let box_ref#2: bytes = 0x626c6f62
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len box_ref#2)
        let tmp%2#0: bool = (! maybe_exists%2#0)
        (assert tmp%2#0) // no data
        let box_ref#3: bytes = "blob"
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len box_ref#3)
        let tmp%3#0: bool = (! maybe_exists%3#0)
        (assert tmp%3#0) // no data
        let tmp%4#0: bool = (box_create box_ref#3 32u)
        (assert tmp%4#0)
        let (_%4#0: uint64, maybe_exists%4#0: bool) = (box_len box_ref#3)
        (assert maybe_exists%4#0) // has data
        let tmp%5#0: account = (txn Sender)
        let sender_bytes#0: bytes = tmp%5#0
        let tmp%6#0: account = (global CurrentApplicationAddress)
        let app_address#0: bytes = tmp%6#0
        let value_3#0: bytes = 0x68656c6c6f
        (box_replace box_ref#3 0u sender_bytes#0)
        (box_resize box_ref#3 8000u)
        (box_splice box_ref#3 0u 0u app_address#0)
        (box_replace box_ref#3 64u value_3#0)
        let tmp%7#0: uint64 = (len value_3#0)
        let tmp%8#0: uint64 = (+ 64u tmp%7#0)
        let tmp%9#0: bytes = (box_extract box_ref#3 0u tmp%8#0)
        let prefix#0: bytes = tmp%9#0
        let tmp%10#0: bytes = (concat app_address#0 sender_bytes#0)
        let tmp%11#0: bytes = (concat tmp%10#0 value_3#0)
        let tmp%12#0: bool = (== prefix#0 tmp%11#0)
        (assert tmp%12#0)
        let tmp%13#0: bool = (box_del box_ref#3)
        (assert tmp%13#0)
        let tmp%14#0: bool = (== box_ref#3 0x626c6f62)
        (assert tmp%14#0)
        let (maybe_value%0#0: bytes, maybe_exists%5#0: bool) = (box_get box_ref#3)
        let value#0: bytes = maybe_value%0#0
        let exists#0: bool = maybe_exists%5#0
        let tmp%15#0: bool = (! exists#0)
        (assert tmp%15#0)
        let tmp%16#0: bool = (== value#0 0x)
        (assert tmp%16#0)
        let (maybe_value%1#0: bytes, maybe_exists%6#0: bool) = (box_get box_ref#3)
        let state_get%0#0: bytes = (select sender_bytes#0 maybe_value%1#0 maybe_exists%6#0)
        let tmp%17#0: bool = (== state_get%0#0 sender_bytes#0)
        (assert tmp%17#0)
        let tmp%18#0: bytes = (concat sender_bytes#0 app_address#0)
        (box_put box_ref#3 tmp%18#0)
        let (_%5#0: uint64, maybe_exists%7#0: bool) = (box_len box_ref#3)
        (assert maybe_exists%7#0) // Blob exists
        let (value%0#0: uint64, check%0#0: bool) = (box_len box_ref#3)
        (assert check%0#0) // check BoxRef exists
        let tmp%19#0: bool = (== value%0#0 64u)
        (assert tmp%19#0)
        let tmp%20#0: uint64 = examples.box_storage.contract.get_box_ref_length(box_ref#3)
        let tmp%21#0: bool = (== tmp%20#0 64u)
        (assert tmp%21#0)
        (box_create "box_ref" 32u)
        let (_%6#0: uint64, maybe_exists%8#0: bool) = (box_len "box_ref")
        (assert maybe_exists%8#0) // has data
        (box_del "box_ref")
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_test() -> void:
    block@0: // L415
        let key_0#0: uint64 = 0u
        let key_1#0: uint64 = 1u
        let value#0: string = "Hmmmmm"
        let encoded_value%0#0: bytes[8] = (itob key_0#0)
        let box_prefixed_key%0#0: bytes = (concat "" encoded_value%0#0)
        box_write(box_prefixed_key%0#0, value#0)
        let encoded_value%1#0: bytes[8] = (itob key_0#0)
        let box_prefixed_key%1#0: bytes = (concat "" encoded_value%1#0)
        let box_0#0: bytes = box_prefixed_key%1#0
        let encoded_value%2#0: bytes[8] = (itob key_0#0)
        let box_prefixed_key%2#0: bytes = (concat "" encoded_value%2#0)
        let (value%0#0: uint64, check%0#0: bool) = (box_len box_prefixed_key%2#0)
        (assert check%0#0) // check self.box_map entry exists
        let tmp%0#0: uint64 = (len value#0)
        let tmp%1#0: bool = (== value%0#0 tmp%0#0)
        (assert tmp%1#0)
        let encoded_value%3#0: bytes[8] = (itob key_0#0)
        let box_prefixed_key%3#0: bytes = (concat "" encoded_value%3#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len box_prefixed_key%3#0)
        (assert check%1#0) // check self.box_map entry exists
        let (value%2#0: uint64, check%2#0: bool) = (box_len box_0#0)
        (assert check%2#0) // check Box exists
        let tmp%2#0: bool = (== value%1#0 value%2#0)
        (assert tmp%2#0)
        let encoded_value%4#0: bytes[8] = (itob key_0#0)
        let box_prefixed_key%4#0: bytes = (concat "" encoded_value%4#0)
        let (value%3#0: uint64, check%3#0: bool) = (box_len box_prefixed_key%4#0)
        (assert check%3#0) // check self.box_map entry exists
        let tmp%3#0: uint64 = (len value#0)
        let tmp%4#0: bool = (== value%3#0 tmp%3#0)
        (assert tmp%4#0)
        let encoded_value%5#0: bytes[8] = (itob key_1#0)
        let box_prefixed_key%5#0: bytes = (concat "" encoded_value%5#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%5#0)
        let state_get%0#0: bytes = (select "default" maybe_value%0#0 maybe_exists%0#0)
        let tmp%5#0: bool = (== state_get%0#0 "default")
        (assert tmp%5#0)
        let encoded_value%6#0: bytes[8] = (itob key_1#0)
        let box_prefixed_key%6#0: bytes = (concat "" encoded_value%6#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get box_prefixed_key%6#0)
        let value#1: string = maybe_value%1#0
        let exists#0: bool = maybe_exists%1#0
        let tmp%6#0: bool = (! exists#0)
        (assert tmp%6#0)
        let encoded_value%7#0: bytes[8] = (itob key_0#0)
        let box_prefixed_key%7#0: bytes = (concat "" encoded_value%7#0)
        let (_%0#0: uint64, maybe_exists%2#0: bool) = (box_len box_prefixed_key%7#0)
        (assert maybe_exists%2#0)
        let tmp%7#0: bool = (== "" 0x)
        (assert tmp%7#0)
        let tmp_box_map#0: bytes = 0x
        let encoded_value%8#0: bytes[8] = (itob key_1#0)
        let box_prefixed_key%8#0: bytes = (concat tmp_box_map#0 encoded_value%8#0)
        box_write(box_prefixed_key%8#0, "hello")
        let tmp%8#0: string = examples.box_storage.contract.get_box_map_value_from_key_plus_1(tmp_box_map#0, 0u)
        let tmp%9#0: bool = (== tmp%8#0 "hello")
        (assert tmp%9#0)
        let encoded_value%9#0: bytes[8] = (itob key_1#0)
        let box_prefixed_key%9#0: bytes = (concat tmp_box_map#0 encoded_value%9#0)
        (box_del box_prefixed_key%9#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_set(key: uint64, value: string) -> void:
    block@0: // L439
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = (concat "" encoded_value%0#0)
        box_write(box_prefixed_key%0#0, value#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_get(key: uint64) -> string:
    block@0: // L443
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = (concat "" encoded_value%0#0)
        let storage_value%0#0: bytes = box_read(box_prefixed_key%0#0)
        return storage_value%0#0

subroutine examples.box_storage.contract.BoxContract.box_map_del(key: uint64) -> void:
    block@0: // L447
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = (concat "" encoded_value%0#0)
        (box_del box_prefixed_key%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_exists(key: uint64) -> bool:
    block@0: // L451
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = (concat "" encoded_value%0#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        return maybe_exists%0#0

subroutine examples.box_storage.contract.BoxContract.__algopy_default_create() -> void:
    block@0: // L1
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__()
        return tmp%0#0