main examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@18
    block@4: // abi_routing_L31
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "set_boxes(uint64,byte[],string)void" => block@5, method "check_keys()void" => block@6, method "delete_boxes()void" => block@7, method "read_boxes()(uint64,byte[],string,uint64)" => block@8, method "boxes_exist()(bool,bool,bool,bool)" => block@9, method "slice_box()void" => block@10, method "arc4_box()void" => block@11, method "test_box_ref()void" => block@12, method "box_map_test()void" => block@13, method "box_map_set(uint64,string)void" => block@14, method "box_map_get(uint64)string" => block@15, method "box_map_del(uint64)void" => block@16, method "box_map_exists(uint64)bool" => block@17, * => block@20}
    block@5: // set_boxes_route_L41
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_bytes[8]%0#0)
        let tmp%8#0: bytes = (txna ApplicationArgs 2)
        let tmp%9#0: bytes = (txna ApplicationArgs 3)
        examples.box_storage.contract.BoxContract.set_boxes(tmp%7#0, tmp%8#0, tmp%9#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@21
    block@6: // check_keys_route_L79
        let tmp%10#0: uint64 = (txn OnCompletion)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // OnCompletion is not NoOp
        let tmp%12#0: uint64 = (txn ApplicationID)
        (assert tmp%12#0) // can only call when not creating
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@21
    block@7: // delete_boxes_route_L86
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        (assert tmp%16#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.delete_boxes()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@21
    block@8: // read_boxes_route_L99
        let tmp%18#0: uint64 = (txn OnCompletion)
        let tmp%19#0: bool = (! tmp%18#0)
        (assert tmp%19#0) // OnCompletion is not NoOp
        let tmp%20#0: uint64 = (txn ApplicationID)
        (assert tmp%20#0) // can only call when not creating
        let (elements_to_encode%0#0: uint64, elements_to_encode%1#0: bytes, elements_to_encode%2#0: bytes, elements_to_encode%3#0: uint64) = examples.box_storage.contract.BoxContract.read_boxes()
        let val_as_bytes%0#0: bytes[8] = (itob elements_to_encode%0#0)
        let length%0#0: uint64 = (len elements_to_encode%1#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 elements_to_encode%1#0)
        let val_as_bytes%1#0: bytes[8] = (itob elements_to_encode%3#0)
        let encoded_tuple_buffer%2#0: bytes = (concat val_as_bytes%0#0 0x0014)
        let data_length%0#0: uint64 = (len encoded_value%0#0)
        let current_tail_offset%1#0: uint64 = (+ 20u data_length%0#0)
        let as_bytes%2#0: bytes[8] = (itob current_tail_offset%1#0)
        let offset_as_uint16%1#0: bytes = ((extract 6 2) as_bytes%2#0)
        let encoded_tuple_buffer%3#0: bytes = (concat encoded_tuple_buffer%2#0 offset_as_uint16%1#0)
        let encoded_tuple_buffer%4#0: bytes = (concat encoded_tuple_buffer%3#0 val_as_bytes%1#0)
        let encoded_tuple_buffer%5#0: bytes = (concat encoded_tuple_buffer%4#0 encoded_value%0#0)
        let encoded_tuple_buffer%6#0: bytes = (concat encoded_tuple_buffer%5#0 elements_to_encode%2#0)
        let tmp%22#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%6#0)
        (log tmp%22#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@21
    block@9: // boxes_exist_route_L112
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (! tmp%23#0)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        (assert tmp%25#0) // can only call when not creating
        let (elements_to_encode%4#0: bool, elements_to_encode%5#0: bool, elements_to_encode%6#0: bool, elements_to_encode%7#0: bool) = examples.box_storage.contract.BoxContract.boxes_exist()
        let encoded_bool%0#0: bytes[1] = (setbit 0x00 0u elements_to_encode%4#0)
        let encoded_bool%1#0: bytes[1] = (setbit 0x00 0u elements_to_encode%5#0)
        let encoded_bool%2#0: bytes[1] = (setbit 0x00 0u elements_to_encode%6#0)
        let encoded_bool%3#0: bytes[1] = (setbit 0x00 0u elements_to_encode%7#0)
        let is_true%0#0: uint64 = (getbit encoded_bool%1#0 0u)
        let encoded_tuple_buffer%9#0: bytes = (setbit encoded_bool%0#0 1u is_true%0#0)
        let is_true%1#0: uint64 = (getbit encoded_bool%2#0 0u)
        let encoded_tuple_buffer%10#0: bytes = (setbit encoded_tuple_buffer%9#0 2u is_true%1#0)
        let is_true%2#0: uint64 = (getbit encoded_bool%3#0 0u)
        let encoded_tuple_buffer%11#0: bytes = (setbit encoded_tuple_buffer%10#0 3u is_true%2#0)
        let tmp%27#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%11#0)
        (log tmp%27#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#4: bool = 1u
        goto block@21
    block@10: // slice_box_route_L116
        let tmp%28#0: uint64 = (txn OnCompletion)
        let tmp%29#0: bool = (! tmp%28#0)
        (assert tmp%29#0) // OnCompletion is not NoOp
        let tmp%30#0: uint64 = (txn ApplicationID)
        (assert tmp%30#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.slice_box()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#5: bool = 1u
        goto block@21
    block@11: // arc4_box_route_L125
        let tmp%32#0: uint64 = (txn OnCompletion)
        let tmp%33#0: bool = (! tmp%32#0)
        (assert tmp%33#0) // OnCompletion is not NoOp
        let tmp%34#0: uint64 = (txn ApplicationID)
        (assert tmp%34#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.arc4_box()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#6: bool = 1u
        goto block@21
    block@12: // test_box_ref_route_L135
        let tmp%36#0: uint64 = (txn OnCompletion)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // OnCompletion is not NoOp
        let tmp%38#0: uint64 = (txn ApplicationID)
        (assert tmp%38#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.test_box_ref()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#7: bool = 1u
        goto block@21
    block@13: // box_map_test_route_L183
        let tmp%40#0: uint64 = (txn OnCompletion)
        let tmp%41#0: bool = (! tmp%40#0)
        (assert tmp%41#0) // OnCompletion is not NoOp
        let tmp%42#0: uint64 = (txn ApplicationID)
        (assert tmp%42#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.box_map_test()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#8: bool = 1u
        goto block@21
    block@14: // box_map_set_route_L204
        let tmp%44#0: uint64 = (txn OnCompletion)
        let tmp%45#0: bool = (! tmp%44#0)
        (assert tmp%45#0) // OnCompletion is not NoOp
        let tmp%46#0: uint64 = (txn ApplicationID)
        (assert tmp%46#0) // can only call when not creating
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%48#0: uint64 = (btoi reinterpret_bytes[8]%1#0)
        let tmp%49#0: bytes = (txna ApplicationArgs 2)
        let tmp%50#0: bytes = ((extract 2 0) tmp%49#0)
        examples.box_storage.contract.BoxContract.box_map_set(tmp%48#0, tmp%50#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#9: bool = 1u
        goto block@21
    block@15: // box_map_get_route_L208
        let tmp%51#0: uint64 = (txn OnCompletion)
        let tmp%52#0: bool = (! tmp%51#0)
        (assert tmp%52#0) // OnCompletion is not NoOp
        let tmp%53#0: uint64 = (txn ApplicationID)
        (assert tmp%53#0) // can only call when not creating
        let reinterpret_bytes[8]%2#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%55#0: uint64 = (btoi reinterpret_bytes[8]%2#0)
        let to_encode%0#0: bytes = examples.box_storage.contract.BoxContract.box_map_get(tmp%55#0)
        let length%1#0: uint64 = (len to_encode%0#0)
        let as_bytes%3#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%3#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 to_encode%0#0)
        let tmp%56#0: bytes = (concat 0x151f7c75 encoded_value%1#0)
        (log tmp%56#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#10: bool = 1u
        goto block@21
    block@16: // box_map_del_route_L212
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (! tmp%57#0)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        (assert tmp%59#0) // can only call when not creating
        let reinterpret_bytes[8]%3#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%61#0: uint64 = (btoi reinterpret_bytes[8]%3#0)
        examples.box_storage.contract.BoxContract.box_map_del(tmp%61#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#11: bool = 1u
        goto block@21
    block@17: // box_map_exists_route_L216
        let tmp%62#0: uint64 = (txn OnCompletion)
        let tmp%63#0: bool = (! tmp%62#0)
        (assert tmp%63#0) // OnCompletion is not NoOp
        let tmp%64#0: uint64 = (txn ApplicationID)
        (assert tmp%64#0) // can only call when not creating
        let reinterpret_bytes[8]%4#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%66#0: uint64 = (btoi reinterpret_bytes[8]%4#0)
        let to_encode%1#0: bool = examples.box_storage.contract.BoxContract.box_map_exists(tmp%66#0)
        let encoded_bool%4#0: bytes[1] = (setbit 0x00 0u to_encode%1#0)
        let tmp%67#0: bytes = (concat 0x151f7c75 encoded_bool%4#0)
        (log tmp%67#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#12: bool = 1u
        goto block@21
    block@18: // bare_routing_L31
        let tmp%68#0: uint64 = (txn OnCompletion)
        goto tmp%68#0 ? block@20 : block@19
    block@19: // __algopy_default_create_L1
        let tmp%69#0: uint64 = (txn ApplicationID)
        let tmp%70#0: bool = (! tmp%69#0)
        (assert tmp%70#0) // can only call when creating
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#13: bool = 1u
        goto block@21
    block@20: // after_if_else_L31
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#14: bool = 0u
        goto block@21
    block@21: // after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router___L1
        let tmp%0#1: bool = φ(examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0 <- block@5, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#1 <- block@6, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#2 <- block@7, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#3 <- block@8, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#4 <- block@9, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#5 <- block@10, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#6 <- block@11, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#7 <- block@12, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#8 <- block@13, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#9 <- block@14, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#10 <- block@15, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#11 <- block@16, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#12 <- block@17, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#13 <- block@19, examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#14 <- block@20)
        return tmp%0#1

subroutine examples.box_storage.contract.BoxContract.set_boxes(a: uint64, b: bytes, c: bytes) -> void:
    block@0: // L41
        let encoded_value%0#0: bytes[8] = (itob a#0)
        (box_put "box_a" encoded_value%0#0)
        (box_del "b")
        (box_put "b" b#0)
        (box_del 0x424f585f43)
        (box_put 0x424f585f43 c#0)
        let materialized_values%0#0: bytes = ((extract 2 0) b#0)
        (box_del "box_d")
        (box_put "box_d" materialized_values%0#0)
        (box_create "box_large" 6152u)
        (box_replace "box_large" 4096u 0x000000000000002a)
        let (b_value#0: bytes, maybe_exists%0#0: bool) = (box_get "b")
        (assert maybe_exists%0#0) // check self.box_b exists
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "b")
        (assert maybe_exists%1#0) // check self.box_b exists
        let tmp%1#0: uint64 = (extract_uint16 maybe_value%1#0 0u)
        let tmp%2#0: uint64 = (extract_uint16 b_value#0 0u)
        let tmp%3#0: bool = (== tmp%1#0 tmp%2#0)
        (assert tmp%3#0) // direct reference should match copy
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get "box_a")
        (assert maybe_exists%2#0) // check self.box_a exists
        let maybe_value_converted%0#0: uint64 = (btoi maybe_value%2#0)
        let materialized_values%1#0: uint64 = (+ maybe_value_converted%0#0 3u)
        let encoded_value%1#0: bytes[8] = (itob materialized_values%1#0)
        (box_put "box_a" encoded_value%1#0)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "box_a")
        (assert check%0#0) // check self.box_a exists
        let tmp%4#0: bool = (== value%0#0 8u)
        (assert tmp%4#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "b")
        (assert check%1#0) // check self.box_b exists
        let tmp%5#0: uint64 = (len b#0)
        let tmp%6#0: bool = (== value%1#0 tmp%5#0)
        (assert tmp%6#0)
        let (value%2#0: uint64, check%2#0: bool) = (box_len 0x424f585f43)
        (assert check%2#0) // check self.box_c exists
        let tmp%7#0: uint64 = (len c#0)
        let tmp%8#0: bool = (== value%2#0 tmp%7#0)
        (assert tmp%8#0)
        let (value%3#0: uint64, check%3#0: bool) = (box_len "box_d")
        (assert check%3#0) // check self.box_d exists
        let tmp%10#0: uint64 = (len materialized_values%0#0)
        let tmp%11#0: bool = (== value%3#0 tmp%10#0)
        (assert tmp%11#0)
        let tmp%12#0: bytes = (box_extract 0x424f585f43 0u 1u)
        let tmp%13#0: bytes = ((extract 0 1) c#0)
        let tmp%14#0: bool = (== tmp%12#0 tmp%13#0)
        (assert tmp%14#0)
        let (tmp%15#0: uint64, tmp%16#0: bool) = (box_len 0x424f585f43)
        let tmp%17#0: uint64 = (- tmp%15#0 1u)
        let tmp%18#0: bytes = (box_extract 0x424f585f43 tmp%17#0 1u)
        let tmp%20#0: uint64 = (- tmp%7#0 1u)
        let tmp%21#0: bytes = (extract3 c#0 tmp%20#0 1u)
        let tmp%22#0: bool = (== tmp%18#0 tmp%21#0)
        (assert tmp%22#0)
        let (tmp%23#0: uint64, tmp%24#0: bool) = (box_len 0x424f585f43)
        let tmp%25#0: bool = (< 1u tmp%23#0)
        let tmp%26#0: uint64 = (select tmp%23#0 1u tmp%25#0)
        let tmp%27#0: uint64 = (- tmp%23#0 tmp%26#0)
        let tmp%29#0: bytes = (box_extract 0x424f585f43 0u tmp%27#0)
        let is_out_of_bounds%0#0: bool = (>= 1u tmp%7#0)
        let bounded_offset%0#0: uint64 = (select 1u tmp%7#0 is_out_of_bounds%0#0)
        let bounded_index%0#0: uint64 = (- tmp%7#0 bounded_offset%0#0)
        let tmp%30#0: bytes = (substring3 c#0 0u bounded_index%0#0)
        let tmp%31#0: bool = (== tmp%29#0 tmp%30#0)
        (assert tmp%31#0)
        let (tmp%32#0: uint64, tmp%33#0: bool) = (box_len 0x424f585f43)
        let tmp%34#0: bool = (< 2u tmp%32#0)
        let tmp%35#0: uint64 = (select tmp%32#0 2u tmp%34#0)
        let tmp%37#0: bytes = (box_extract 0x424f585f43 0u tmp%35#0)
        let is_out_of_bounds%1#0: bool = (>= 2u tmp%7#0)
        let bounded_index%1#0: uint64 = (select 2u tmp%7#0 is_out_of_bounds%1#0)
        let tmp%38#0: bytes = (substring3 c#0 0u bounded_index%1#0)
        let tmp%39#0: bool = (== tmp%37#0 tmp%38#0)
        (assert tmp%39#0)
        let tmp%40#0: bytes = (box_extract "box_d" 0u 1u)
        let tmp%42#0: bytes = ((extract 2 1) b#0)
        let tmp%43#0: bool = (== tmp%40#0 tmp%42#0)
        (assert tmp%43#0)
        let (tmp%44#0: uint64, tmp%45#0: bool) = (box_len "box_d")
        let tmp%46#0: uint64 = (- tmp%44#0 1u)
        let tmp%47#0: bytes = (box_extract "box_d" tmp%46#0 1u)
        let tmp%50#0: uint64 = (- tmp%10#0 1u)
        let tmp%51#0: bytes = (extract3 materialized_values%0#0 tmp%50#0 1u)
        let tmp%52#0: bool = (== tmp%47#0 tmp%51#0)
        (assert tmp%52#0)
        let (tmp%53#0: uint64, tmp%54#0: bool) = (box_len "box_d")
        let tmp%55#0: bool = (< 1u tmp%53#0)
        let tmp%56#0: uint64 = (select tmp%53#0 1u tmp%55#0)
        let tmp%57#0: uint64 = (- tmp%53#0 tmp%56#0)
        let tmp%59#0: bytes = (box_extract "box_d" 0u tmp%57#0)
        let is_out_of_bounds%2#0: bool = (>= 1u tmp%10#0)
        let bounded_offset%1#0: uint64 = (select 1u tmp%10#0 is_out_of_bounds%2#0)
        let bounded_index%2#0: uint64 = (- tmp%10#0 bounded_offset%1#0)
        let tmp%61#0: bytes = (substring3 materialized_values%0#0 0u bounded_index%2#0)
        let tmp%62#0: bool = (== tmp%59#0 tmp%61#0)
        (assert tmp%62#0)
        let (tmp%63#0: uint64, tmp%64#0: bool) = (box_len "box_d")
        let tmp%65#0: bool = (< 5u tmp%63#0)
        let tmp%66#0: uint64 = (select tmp%63#0 5u tmp%65#0)
        let tmp%68#0: bytes = (box_extract "box_d" 0u tmp%66#0)
        let is_out_of_bounds%3#0: bool = (>= 5u tmp%10#0)
        let bounded_index%3#0: uint64 = (select 5u tmp%10#0 is_out_of_bounds%3#0)
        let tmp%70#0: bytes = (substring3 materialized_values%0#0 0u bounded_index%3#0)
        let tmp%71#0: bool = (== tmp%68#0 tmp%70#0)
        (assert tmp%71#0)
        let (tmp%72#0: uint64, tmp%73#0: bool) = (box_len "box_d")
        let tmp%74#0: bool = (< 2u tmp%72#0)
        let tmp%75#0: uint64 = (select tmp%72#0 2u tmp%74#0)
        let tmp%77#0: bytes = (box_extract "box_d" 0u tmp%75#0)
        let is_out_of_bounds%4#0: bool = (>= 2u tmp%10#0)
        let bounded_index%4#0: uint64 = (select 2u tmp%10#0 is_out_of_bounds%4#0)
        let tmp%79#0: bytes = (substring3 materialized_values%0#0 0u bounded_index%4#0)
        let tmp%80#0: bool = (== tmp%77#0 tmp%79#0)
        (assert tmp%80#0)
        let (value%4#0: uint64, check%4#0: bool) = (box_len "box_large")
        (assert check%4#0) // check self.box_large exists
        let tmp%81#0: bool = (== value%4#0 6152u)
        (assert tmp%81#0)
        return 

subroutine examples.box_storage.contract.BoxContract.delete_boxes() -> void:
    block@0: // L86
        (box_del "box_a")
        (box_del "b")
        (box_del 0x424f585f43)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "box_a")
        let maybe_value_converted%0#0: uint64 = (btoi maybe_value%0#0)
        let state_get%0#0: uint64 = (select 42u maybe_value_converted%0#0 maybe_exists%0#0)
        let tmp%0#0: bool = (== state_get%0#0 42u)
        (assert tmp%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "b")
        let state_get%1#0: bytes = (select 0x00023432 maybe_value%1#0 maybe_exists%1#0)
        let tmp%1#0: bytes = ((extract 2 0) state_get%1#0)
        let tmp%2#0: bool = (== tmp%1#0 0x3432)
        (assert tmp%2#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get 0x424f585f43)
        let state_get%2#0: bytes = (select 0x00023432 maybe_value%2#0 maybe_exists%2#0)
        let tmp%3#0: bool = (== state_get%2#0 0x00023432)
        (assert tmp%3#0)
        let (maybe_value%3#0: bytes, a_exists#0: bool) = (box_get "box_a")
        let a#0: uint64 = (btoi maybe_value%3#0)
        let tmp%4#0: bool = (! a_exists#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (! a#0)
        (assert tmp%5#0)
        (box_del "box_large")
        return 

subroutine examples.box_storage.contract.BoxContract.read_boxes() -> <uint64, bytes, bytes, uint64>:
    block@0: // L99
        let large_e#0: bytes[8] = (box_extract "box_large" 4096u 8u)
        let (maybe_value%0#1: bytes, maybe_exists%0#1: bool) = (box_get "box_a")
        (assert maybe_exists%0#1) // check Box exists
        let maybe_value_converted%0#0: uint64 = (btoi maybe_value%0#1)
        let tmp%0#1: uint64 = (+ maybe_value_converted%0#0 1u)
        let tmp%2#0: uint64 = (- tmp%0#1 1u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "b")
        (assert maybe_exists%0#0) // check self.box_b exists
        let tmp%3#0: bytes = ((extract 2 0) maybe_value%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get 0x424f585f43)
        (assert maybe_exists%1#0) // check self.box_c exists
        let tmp%4#0: uint64 = (btoi large_e#0)
        return tmp%2#0 tmp%3#0 maybe_value%1#0 tmp%4#0

subroutine examples.box_storage.contract.BoxContract.boxes_exist() -> <bool, bool, bool, bool>:
    block@0: // L112
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "box_a")
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "b")
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len 0x424f585f43)
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "box_large")
        return maybe_exists%0#0 maybe_exists%1#0 maybe_exists%2#0 maybe_exists%3#0

subroutine examples.box_storage.contract.BoxContract.slice_box() -> void:
    block@0: // L116
        (box_del "0")
        (box_put "0" 0x54657374696e672074657374696e6720313233)
        let (tmp%0#0: uint64, tmp%1#0: bool) = (box_len "0")
        let tmp%3#0: uint64 = (select tmp%0#0 0u tmp%0#0)
        let tmp%4#0: bool = (< 7u tmp%0#0)
        let tmp%5#0: uint64 = (select tmp%0#0 7u tmp%4#0)
        let tmp%6#0: uint64 = (- tmp%5#0 tmp%3#0)
        let tmp%7#0: bytes = (box_extract "0" tmp%3#0 tmp%6#0)
        let tmp%8#0: bool = (== tmp%7#0 0x54657374696e67)
        (assert tmp%8#0)
        (box_del 0x424f585f43)
        (box_put 0x424f585f43 0x000548656c6c6f)
        let (tmp%9#0: uint64, tmp%10#0: bool) = (box_len 0x424f585f43)
        let tmp%11#0: bool = (< 2u tmp%9#0)
        let tmp%12#0: uint64 = (select tmp%9#0 2u tmp%11#0)
        let tmp%13#0: bool = (< 10u tmp%9#0)
        let tmp%14#0: uint64 = (select tmp%9#0 10u tmp%13#0)
        let tmp%15#0: uint64 = (- tmp%14#0 tmp%12#0)
        let tmp%16#0: bytes = (box_extract 0x424f585f43 tmp%12#0 tmp%15#0)
        let tmp%17#0: bool = (== tmp%16#0 0x48656c6c6f)
        (assert tmp%17#0)
        return 

subroutine examples.box_storage.contract.BoxContract.arc4_box() -> void:
    block@0: // L125
        (box_put 0x64 0x00010203)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get 0x64)
        (assert maybe_exists%0#0) // check Box exists
        let reinterpret_biguint%0#0: biguint = ((extract 0 1) maybe_value%0#0) // on error: Index access is out of bounds
        let tmp%0#0: bool = (b== reinterpret_biguint%0#0 0x00)
        (assert tmp%0#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get 0x64)
        (assert maybe_exists%1#0) // check Box exists
        let reinterpret_biguint%2#0: biguint = ((extract 1 1) maybe_value%1#0) // on error: Index access is out of bounds
        let tmp%1#0: bool = (b== reinterpret_biguint%2#0 0x01)
        (assert tmp%1#0)
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get 0x64)
        (assert maybe_exists%2#0) // check Box exists
        let reinterpret_biguint%4#0: biguint = ((extract 2 1) maybe_value%2#0) // on error: Index access is out of bounds
        let tmp%2#0: bool = (b== reinterpret_biguint%4#0 0x02)
        (assert tmp%2#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get 0x64)
        (assert maybe_exists%3#0) // check Box exists
        let reinterpret_biguint%6#0: biguint = ((extract 3 1) maybe_value%3#0) // on error: Index access is out of bounds
        let tmp%3#0: bool = (b== reinterpret_biguint%6#0 0x03)
        (assert tmp%3#0)
        return 

subroutine examples.box_storage.contract.BoxContract.test_box_ref() -> void:
    block@0: // L135
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "blob")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0) // no data
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len 0x626c6f62)
        let tmp%1#0: bool = (! maybe_exists%1#0)
        (assert tmp%1#0) // no data
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len 0x626c6f62)
        let tmp%2#0: bool = (! maybe_exists%2#0)
        (assert tmp%2#0) // no data
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "blob")
        let tmp%3#0: bool = (! maybe_exists%3#0)
        (assert tmp%3#0) // no data
        let tmp%4#0: bool = (box_create "blob" 32u)
        (assert tmp%4#0)
        let (_%4#0: uint64, maybe_exists%4#0: bool) = (box_len "blob")
        (assert maybe_exists%4#0) // has data
        let sender_bytes#0: bytes = (txn Sender)
        let app_address#0: bytes = (global CurrentApplicationAddress)
        (box_replace "blob" 0u sender_bytes#0)
        (box_resize "blob" 8000u)
        (box_splice "blob" 0u 0u app_address#0)
        (box_replace "blob" 64u 0x68656c6c6f)
        let prefix#0: bytes = (box_extract "blob" 0u 69u)
        let tmp%7#0: bytes = (concat app_address#0 sender_bytes#0)
        let tmp%8#0: bytes = (concat tmp%7#0 0x68656c6c6f)
        let tmp%9#0: bool = (== prefix#0 tmp%8#0)
        (assert tmp%9#0)
        let tmp%10#0: bool = (box_del "blob")
        (assert tmp%10#0)
        let (value#0: bytes, exists#0: bool) = (box_get "blob")
        let tmp%12#0: bool = (! exists#0)
        (assert tmp%12#0)
        let tmp%13#0: bool = (== value#0 0x)
        (assert tmp%13#0)
        let (maybe_value%1#0: bytes, maybe_exists%6#0: bool) = (box_get "blob")
        let state_get%0#0: bytes = (select sender_bytes#0 maybe_value%1#0 maybe_exists%6#0)
        let tmp%14#0: bool = (== state_get%0#0 sender_bytes#0)
        (assert tmp%14#0)
        let tmp%15#0: bytes = (concat sender_bytes#0 app_address#0)
        (box_put "blob" tmp%15#0)
        let (_%5#0: uint64, maybe_exists%7#0: bool) = (box_len "blob")
        (assert maybe_exists%7#0) // Blob exists
        let (value%0#0: uint64, check%0#0: bool) = (box_len "blob")
        (assert check%0#0) // check BoxRef exists
        let tmp%16#0: bool = (== value%0#0 64u)
        (assert tmp%16#0)
        let (value%0#1: uint64, check%0#1: bool) = (box_len "blob")
        (assert check%0#1) // check BoxRef exists
        let tmp%18#0: bool = (== value%0#1 64u)
        (assert tmp%18#0)
        (box_create "box_ref" 32u)
        let (_%6#0: uint64, maybe_exists%8#0: bool) = (box_len "box_ref")
        (assert maybe_exists%8#0) // has data
        (box_del "box_ref")
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_test() -> void:
    block@0: // L183
        let encoded_value%0#0: bytes[8] = (itob 0u)
        (box_del encoded_value%0#0)
        (box_put encoded_value%0#0 "Hmmmmm")
        let (value%0#0: uint64, check%0#0: bool) = (box_len encoded_value%0#0)
        (assert check%0#0) // check self.box_map entry exists
        let tmp%1#0: bool = (== value%0#0 6u)
        (assert tmp%1#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len encoded_value%0#0)
        (assert check%1#0) // check self.box_map entry exists
        let tmp%3#0: bool = (== value%1#0 6u)
        (assert tmp%3#0)
        let encoded_value%3#0: bytes[8] = (itob 1u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get encoded_value%3#0)
        let state_get%0#0: bytes = (select "default" maybe_value%0#0 maybe_exists%0#0)
        let tmp%4#0: bool = (== state_get%0#0 "default")
        (assert tmp%4#0)
        let (value#1: bytes, exists#0: bool) = (box_get encoded_value%3#0)
        let tmp%5#0: bool = (! exists#0)
        (assert tmp%5#0)
        let (_%0#0: uint64, maybe_exists%2#0: bool) = (box_len encoded_value%0#0)
        (assert maybe_exists%2#0)
        (box_del encoded_value%3#0)
        (box_put encoded_value%3#0 "hello")
        let (maybe_value%0#1: bytes, maybe_exists%0#1: bool) = (box_get encoded_value%3#0)
        (assert maybe_exists%0#1) // check BoxMap entry exists
        let tmp%8#0: bool = (== maybe_value%0#1 "hello")
        (assert tmp%8#0)
        (box_del encoded_value%3#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_set(key: uint64, value: bytes) -> void:
    block@0: // L204
        let encoded_value%0#0: bytes[8] = (itob key#0)
        (box_del encoded_value%0#0)
        (box_put encoded_value%0#0 value#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_get(key: uint64) -> bytes:
    block@0: // L208
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get encoded_value%0#0)
        (assert maybe_exists%0#0) // check self.box_map entry exists
        return maybe_value%0#0

subroutine examples.box_storage.contract.BoxContract.box_map_del(key: uint64) -> void:
    block@0: // L212
        let encoded_value%0#0: bytes[8] = (itob key#0)
        (box_del encoded_value%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_exists(key: uint64) -> bool:
    block@0: // L216
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len encoded_value%0#0)
        return maybe_exists%0#0