main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        let tmp%0#2: bool = 1u
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#1: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@4 : block@44
    block@4: // abi_routing_L79
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%4#0 ? block@5 : block@43
    block@5: // call_NoOp_L79
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "set_boxes(uint64,byte[],string)void" => block@6, method "check_keys()void" => block@7, method "create_many_ints()void" => block@8, method "set_many_ints(uint64,uint64)void" => block@9, method "sum_many_ints()uint64" => block@10, method "delete_boxes()void" => block@11, method "indirect_extract_and_replace()void" => block@12, method "read_boxes()(uint64,byte[],string,uint64)" => block@13, method "boxes_exist()(bool,bool,bool,bool)" => block@14, method "create_dynamic_arr_struct()void" => block@15, method "delete_dynamic_arr_struct()void" => block@16, method "append_dynamic_arr_struct(uint64)uint64" => block@17, method "pop_dynamic_arr_struct(uint64)uint64" => block@18, method "set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void" => block@19, method "nested_write(uint64,uint64)void" => block@20, method "nested_read(uint64,uint64,uint64)uint64" => block@21, method "sum_dynamic_arr_struct()uint64" => block@22, method "create_bools()void" => block@23, method "set_bool(uint64,bool)void" => block@24, method "sum_bools(uint64)uint64" => block@25, method "create_dynamic_box()void" => block@26, method "delete_dynamic_box()void" => block@27, method "append_dynamic_box(uint64)uint64" => block@28, method "pop_dynamic_box(uint64)uint64" => block@29, method "sum_dynamic_box()uint64" => block@30, method "write_dynamic_box(uint64,uint64)void" => block@31, method "write_dynamic_arr_struct(uint64,uint64)void" => block@32, method "slice_box()void" => block@33, method "arc4_box()void" => block@34, method "test_box_ref()void" => block@35, method "box_map_test()void" => block@36, method "box_map_set(uint64,string)void" => block@37, method "box_map_get(uint64)string" => block@38, method "box_map_del(uint64)void" => block@39, method "box_map_exists(uint64)bool" => block@40, * => block@43}
    block@6: // set_boxes_route_L94
        examples.box_storage.contract.BoxContract.set_boxes[routing]()
        goto block@43
    block@7: // check_keys_route_L130
        examples.box_storage.contract.BoxContract.check_keys[routing]()
        goto block@43
    block@8: // create_many_ints_route_L137
        examples.box_storage.contract.BoxContract.create_many_ints[routing]()
        goto block@43
    block@9: // set_many_ints_route_L141
        examples.box_storage.contract.BoxContract.set_many_ints[routing]()
        goto block@43
    block@10: // sum_many_ints_route_L145
        examples.box_storage.contract.BoxContract.sum_many_ints[routing]()
        goto block@43
    block@11: // delete_boxes_route_L153
        examples.box_storage.contract.BoxContract.delete_boxes[routing]()
        goto block@43
    block@12: // indirect_extract_and_replace_route_L166
        examples.box_storage.contract.BoxContract.indirect_extract_and_replace[routing]()
        goto block@43
    block@13: // read_boxes_route_L172
        examples.box_storage.contract.BoxContract.read_boxes[routing]()
        goto block@43
    block@14: // boxes_exist_route_L181
        examples.box_storage.contract.BoxContract.boxes_exist[routing]()
        goto block@43
    block@15: // create_dynamic_arr_struct_route_L185
        examples.box_storage.contract.BoxContract.create_dynamic_arr_struct[routing]()
        goto block@43
    block@16: // delete_dynamic_arr_struct_route_L194
        examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct[routing]()
        goto block@43
    block@17: // append_dynamic_arr_struct_route_L198
        examples.box_storage.contract.BoxContract.append_dynamic_arr_struct[routing]()
        goto block@43
    block@18: // pop_dynamic_arr_struct_route_L230
        examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct[routing]()
        goto block@43
    block@19: // set_nested_struct_route_L252
        examples.box_storage.contract.BoxContract.set_nested_struct[routing]()
        goto block@43
    block@20: // nested_write_route_L266
        examples.box_storage.contract.BoxContract.nested_write[routing]()
        goto block@43
    block@21: // nested_read_route_L276
        examples.box_storage.contract.BoxContract.nested_read[routing]()
        goto block@43
    block@22: // sum_dynamic_arr_struct_route_L288
        examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct[routing]()
        goto block@43
    block@23: // create_bools_route_L299
        examples.box_storage.contract.BoxContract.create_bools[routing]()
        goto block@43
    block@24: // set_bool_route_L303
        examples.box_storage.contract.BoxContract.set_bool[routing]()
        goto block@43
    block@25: // sum_bools_route_L307
        examples.box_storage.contract.BoxContract.sum_bools[routing]()
        goto block@43
    block@26: // create_dynamic_box_route_L317
        examples.box_storage.contract.BoxContract.create_dynamic_box[routing]()
        goto block@43
    block@27: // delete_dynamic_box_route_L321
        examples.box_storage.contract.BoxContract.delete_dynamic_box[routing]()
        goto block@43
    block@28: // append_dynamic_box_route_L325
        examples.box_storage.contract.BoxContract.append_dynamic_box[routing]()
        goto block@43
    block@29: // pop_dynamic_box_route_L340
        examples.box_storage.contract.BoxContract.pop_dynamic_box[routing]()
        goto block@43
    block@30: // sum_dynamic_box_route_L351
        examples.box_storage.contract.BoxContract.sum_dynamic_box[routing]()
        goto block@43
    block@31: // write_dynamic_box_route_L358
        examples.box_storage.contract.BoxContract.write_dynamic_box[routing]()
        goto block@43
    block@32: // write_dynamic_arr_struct_route_L362
        examples.box_storage.contract.BoxContract.write_dynamic_arr_struct[routing]()
        goto block@43
    block@33: // slice_box_route_L366
        examples.box_storage.contract.BoxContract.slice_box[routing]()
        goto block@43
    block@34: // arc4_box_route_L375
        examples.box_storage.contract.BoxContract.arc4_box[routing]()
        goto block@43
    block@35: // test_box_ref_route_L385
        examples.box_storage.contract.BoxContract.test_box_ref[routing]()
        goto block@43
    block@36: // box_map_test_route_L433
        examples.box_storage.contract.BoxContract.box_map_test[routing]()
        goto block@43
    block@37: // box_map_set_route_L457
        examples.box_storage.contract.BoxContract.box_map_set[routing]()
        goto block@43
    block@38: // box_map_get_route_L461
        examples.box_storage.contract.BoxContract.box_map_get[routing]()
        goto block@43
    block@39: // box_map_del_route_L465
        examples.box_storage.contract.BoxContract.box_map_del[routing]()
        goto block@43
    block@40: // box_map_exists_route_L469
        examples.box_storage.contract.BoxContract.box_map_exists[routing]()
        goto block@43
    block@43: // after_if_else_L79
        fail
    block@44: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        examples.box_storage.contract.BoxContract.__algopy_default_create()
        exit 1u

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let required_budget_with_buffer#0: uint64 = (+ required_budget#0 10u)
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@6
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        goto_nth [block@3, block@4][fee_source#0] else goto block@5
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@5
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@5
    block@5: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@6: // after_while_L20
        return 

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L227
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%11#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L251
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let tmp%3#1: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#1)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L282
        let head_offset#0: uint64 = φ(tmp%3#1 <- block@0, value_internal%0#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L283
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#0)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@2
    block@5: // after_for_L282
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L264
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let tmp%3#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%3#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L282
        let head_offset#0: uint64 = φ(tmp%3#0 <- block@0, value_internal%0#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L283
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#0)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L282
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L291
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let tmp%1#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 tmp%1#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L342
        let head_offset#0: uint64 = φ(tmp%1#0 <- block@0, value_internal%0#2 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L343
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#0 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@2
    block@5: // after_for_L342
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L320
        let tmp%0#0: uint64 = (* length#0 2u)
        let tmp%1#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L342
        let head_offset#0: uint64 = φ(tmp%1#0 <- block@0, value_internal%0#2 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#0 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L343
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#0 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let value_internal%0#2: uint64 = (+ head_offset#0 2u)
        goto block@1
    block@4: // after_for_L342
        return array_head_and_tail#1

subroutine examples.box_storage.contract.get_box_value_plus_1(box: bytes) -> uint64:
    block@0: // L474
        let storage_value%0#0: bytes = box_read(box#0)
        let maybe_value_converted%0#0: uint64 = (btoi storage_value%0#0)
        let tmp%0#0: uint64 = (+ maybe_value_converted%0#0 1u)
        return tmp%0#0

subroutine examples.box_storage.contract.get_box_ref_length(ref: bytes) -> uint64:
    block@0: // L479
        let (value%0#0: uint64, check%0#0: bool) = (box_len ref#0)
        (assert check%0#0) // check Box exists
        return value%0#0

subroutine examples.box_storage.contract.get_box_map_value_from_key_plus_1(box_map: bytes, key: uint64) -> string:
    block@0: // L484
        let materialized_values%0#0: uint64 = (+ key#0 1u)
        let encoded_value%0#0: bytes[8] = (itob materialized_values%0#0)
        let box_prefixed_key%0#0: bytes = (concat box_map#0 encoded_value%0#0)
        let storage_value%0#0: bytes = box_read(box_prefixed_key%0#0)
        return storage_value%0#0

subroutine examples.box_storage.contract.get_dynamic_arr_struct_byte_index(index: uint64) -> uint64:
    block@0: // L489
        let tmp%0#0: uint64 = 10u
        let tmp%1#0: uint64 = 18u
        let head#0: uint64 = 20u
        let tmp%3#0: uint64 = (* index#0 8u)
        let dyn_arr_index#0: uint64 = (+ 2u tmp%3#0)
        let tmp%5#0: uint64 = (+ tmp%3#0 22u)
        return tmp%5#0

subroutine examples.box_storage.contract.get_dynamic_arr2_struct_byte_index(arr_size: uint64, arr2_index: uint64) -> uint64:
    block@0: // L496
        let tmp%3#1: uint64 = (* arr_size#0 8u)
        let head_and_dyn_arr#0: uint64 = (+ tmp%3#1 22u)
        let tmp%1#0: uint64 = (* arr2_index#0 8u)
        let dyn_arr2_index#0: uint64 = (+ 2u tmp%1#0)
        let tmp%3#0: uint64 = (+ head_and_dyn_arr#0 dyn_arr2_index#0)
        return tmp%3#0

subroutine examples.box_storage.contract.BoxContract.set_boxes[routing]() -> void:
    block@0: // L94
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let a#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let b#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let length%0#0: uint64 = array_len(b#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%1#0: uint64 = (len b#0)
        let eq%1#0: bool = (== len%1#0 add%0#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let c#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        let length%1#0: uint64 = array_len(c#0)
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%2#0: uint64 = (len c#0)
        let eq%2#0: bool = (== len%2#0 add%1#0)
        (assert eq%2#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let encoded_value%0#0: bytes[8] = (itob a#0)
        box_write("box_a", encoded_value%0#0)
        box_write("b", b#0)
        box_write(0x424f585f43, c#0)
        let tmp%0#1: bytes = decode_bytes<bytes>(b#0)
        box_write("box_d", tmp%0#1)
        (box_create "box_large" 6160u)
        let storage_value%0#0: bytes = box_read("box_large")
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(42u)
        let updated_tuple%0#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = replace_value(storage_value%0#0, 4, encoded_value%1#0)
        let box%offset%0#0: uint64 = (+ 0u 4096u)
        (box_replace "box_large" box%offset%0#0 encoded_value%1#0)
        let tmp%1#1: uint64 = 4096u
        (box_replace "box_large" 4096u 0x000000000000002a)
        let b_value#0: Encoded(len+uint8[]) = box_read("b")
        let storage_value%2#0: bytes = box_read("b")
        let box%box_extract%0#0: bytes = (box_extract "b" 0u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%2#1: uint64 = box%array_length%0#0
        let box%box_extract%1#0: bytes = (box_extract "b" 0u 2u)
        let box%array_length%1#0: uint64 = (btoi box%box_extract%1#0)
        let tmp%3#1: uint64 = box%array_length%1#0
        let tmp%4#0: bool = (== tmp%2#1 tmp%3#1)
        (assert tmp%4#0) // direct reference should match copy
        let storage_value%3#0: bytes = box_read("box_a")
        let maybe_value_converted%0#0: uint64 = (btoi storage_value%3#0)
        let tmp%5#0: uint64 = (+ maybe_value_converted%0#0 3u)
        let encoded_value%2#0: bytes[8] = (itob tmp%5#0)
        box_write("box_a", encoded_value%2#0)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "box_a")
        (assert check%0#0) // check self.box_a exists
        let tmp%6#0: bool = (== value%0#0 8u)
        (assert tmp%6#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "b")
        let tmp%8#0: bool = (== value%1#0 len%1#0)
        (assert tmp%8#0)
        let (value%2#0: uint64, check%2#0: bool) = (box_len 0x424f585f43)
        (assert check%2#0) // check self.box_c exists
        let tmp%10#0: bool = (== value%2#0 len%2#0)
        (assert tmp%10#0)
        let (value%3#0: uint64, check%3#0: bool) = (box_len "box_d")
        (assert check%3#0) // check self.box_d exists
        let tmp%12#0: uint64 = (len tmp%0#1)
        let tmp%13#0: bool = (== value%3#0 tmp%12#0)
        (assert tmp%13#0)
        let tmp%14#0: bytes = (box_extract 0x424f585f43 0u 1u)
        let extract%0#0: bytes = ((extract 0 1) c#0)
        let tmp%15#0: bool = (== tmp%14#0 extract%0#0)
        (assert tmp%15#0)
        let (tmp%16#0: uint64, tmp%17#0: bool) = (box_len 0x424f585f43)
        let tmp%18#0: uint64 = (- tmp%16#0 1u)
        let tmp%19#0: bytes = (box_extract 0x424f585f43 tmp%18#0 1u)
        let tmp%21#0: uint64 = (- len%2#0 1u)
        let extract%1#0: bytes = (extract3 c#0 tmp%21#0 1u)
        let tmp%22#0: bool = (== tmp%19#0 extract%1#0)
        (assert tmp%22#0)
        let (tmp%23#0: uint64, tmp%24#0: bool) = (box_len 0x424f585f43)
        let tmp%25#0: bool = (< 1u tmp%23#0)
        let tmp%26#0: uint64 = (select tmp%23#0 1u tmp%25#0)
        let tmp%27#0: uint64 = (- tmp%23#0 tmp%26#0)
        let tmp%29#0: bytes = (box_extract 0x424f585f43 0u tmp%27#0)
        let is_out_of_bounds%0#0: bool = (>= 1u len%2#0)
        let bounded_offset%0#0: uint64 = (select 1u len%2#0 is_out_of_bounds%0#0)
        let bounded_index%0#0: uint64 = (- len%2#0 bounded_offset%0#0)
        let tmp%30#0: bytes = (substring3 c#0 0u bounded_index%0#0)
        let tmp%31#0: bool = (== tmp%29#0 tmp%30#0)
        (assert tmp%31#0)
        let (tmp%32#0: uint64, tmp%33#0: bool) = (box_len 0x424f585f43)
        let tmp%34#0: bool = (< 2u tmp%32#0)
        let tmp%35#0: uint64 = (select tmp%32#0 2u tmp%34#0)
        let tmp%37#0: bytes = (box_extract 0x424f585f43 0u tmp%35#0)
        let is_out_of_bounds%1#0: bool = (>= 2u len%2#0)
        let bounded_index%1#0: uint64 = (select 2u len%2#0 is_out_of_bounds%1#0)
        let tmp%38#0: bytes = (substring3 c#0 0u bounded_index%1#0)
        let tmp%39#0: bool = (== tmp%37#0 tmp%38#0)
        (assert tmp%39#0)
        let tmp%40#0: bytes = (box_extract "box_d" 0u 1u)
        let extract%2#0: bytes = ((extract 0 1) tmp%0#1)
        let tmp%42#0: bool = (== tmp%40#0 extract%2#0)
        (assert tmp%42#0)
        let (tmp%43#0: uint64, tmp%44#0: bool) = (box_len "box_d")
        let tmp%45#0: uint64 = (- tmp%43#0 1u)
        let tmp%46#0: bytes = (box_extract "box_d" tmp%45#0 1u)
        let tmp%49#0: uint64 = (- tmp%12#0 1u)
        let extract%3#0: bytes = (extract3 tmp%0#1 tmp%49#0 1u)
        let tmp%50#0: bool = (== tmp%46#0 extract%3#0)
        (assert tmp%50#0)
        let (tmp%51#0: uint64, tmp%52#0: bool) = (box_len "box_d")
        let tmp%53#0: bool = (< 1u tmp%51#0)
        let tmp%54#0: uint64 = (select tmp%51#0 1u tmp%53#0)
        let tmp%55#0: uint64 = (- tmp%51#0 tmp%54#0)
        let tmp%57#0: bytes = (box_extract "box_d" 0u tmp%55#0)
        let is_out_of_bounds%2#0: bool = (>= 1u tmp%12#0)
        let bounded_offset%1#0: uint64 = (select 1u tmp%12#0 is_out_of_bounds%2#0)
        let bounded_index%2#0: uint64 = (- tmp%12#0 bounded_offset%1#0)
        let tmp%59#0: bytes = (substring3 tmp%0#1 0u bounded_index%2#0)
        let tmp%60#0: bool = (== tmp%57#0 tmp%59#0)
        (assert tmp%60#0)
        let (tmp%61#0: uint64, tmp%62#0: bool) = (box_len "box_d")
        let tmp%63#0: bool = (< 5u tmp%61#0)
        let tmp%64#0: uint64 = (select tmp%61#0 5u tmp%63#0)
        let tmp%66#0: bytes = (box_extract "box_d" 0u tmp%64#0)
        let is_out_of_bounds%3#0: bool = (>= 5u tmp%12#0)
        let bounded_index%3#0: uint64 = (select 5u tmp%12#0 is_out_of_bounds%3#0)
        let tmp%68#0: bytes = (substring3 tmp%0#1 0u bounded_index%3#0)
        let tmp%69#0: bool = (== tmp%66#0 tmp%68#0)
        (assert tmp%69#0)
        let (tmp%70#0: uint64, tmp%71#0: bool) = (box_len "box_d")
        let tmp%72#0: bool = (< 2u tmp%70#0)
        let tmp%73#0: uint64 = (select tmp%70#0 2u tmp%72#0)
        let tmp%75#0: bytes = (box_extract "box_d" 0u tmp%73#0)
        let is_out_of_bounds%4#0: bool = (>= 2u tmp%12#0)
        let bounded_index%4#0: uint64 = (select 2u tmp%12#0 is_out_of_bounds%4#0)
        let tmp%77#0: bytes = (substring3 tmp%0#1 0u bounded_index%4#0)
        let tmp%78#0: bool = (== tmp%75#0 tmp%77#0)
        (assert tmp%78#0)
        let (value%4#0: uint64, check%4#0: bool) = (box_len "box_large")
        let tmp%79#0: bool = (== value%4#0 6160u)
        (assert tmp%79#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.check_keys[routing]() -> void:
    block@0: // L130
        let tmp%0#0: bool = 1u
        let tmp%1#0: bool = 1u
        let tmp%2#0: bool = 1u
        let tmp%3#0: bool = 1u
        exit 1u

subroutine examples.box_storage.contract.BoxContract.create_many_ints[routing]() -> void:
    block@0: // L137
        (box_create "many_ints" 4104u)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.set_many_ints[routing]() -> void:
    block@0: // L141
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let index#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let value#0: uint64 = decode_bytes<uint64>(tmp%2#0)
        let storage_value%0#0: bytes = box_read("many_ints")
        let encoded_value%0#0: Encoded(uint64) = tmp%2#0
        let updated_array%0#0: Encoded(uint64[513]) = replace_value(storage_value%0#0, index#0, encoded_value%0#0)
        let box%element_offset%0#0: uint64 = (* index#0 8u)
        let box%offset%0#0: uint64 = (+ 0u box%element_offset%0#0)
        (box_replace "many_ints" box%offset%0#0 encoded_value%0#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.sum_many_ints[routing]() -> void:
    block@0: // L145
        _puya_lib.util.ensure_budget(10500u, 0u)
        let total#0: uint64 = 0u
        let storage_value%0#0: bytes = box_read("many_ints")
        let array_length%0#0: uint64 = array_len(storage_value%0#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L149
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L150
        let box%element_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let box%offset%0#0: uint64 = (+ 0u box%element_offset%0#0)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "many_ints" box%offset%0#0 8u)
        let array_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let val#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let total#2: uint64 = (+ total#1 val#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@5: // after_for_L149
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(total#1)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.delete_boxes[routing]() -> void:
    block@0: // L153
        (box_del "box_a")
        (box_del "b")
        (box_del 0x424f585f43)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "box_a")
        let maybe_value_converted%0#0: uint64 = (btoi maybe_value%0#0)
        let state_get%0#0: uint64 = (select 42u maybe_value_converted%0#0 maybe_exists%0#0)
        let tmp%0#0: bool = (== state_get%0#0 42u)
        (assert tmp%0#0)
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x3432)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "b")
        let state_get%1#0: bytes = (select tmp%1#0 maybe_value%1#0 maybe_exists%1#0)
        let tmp%2#0: bytes = decode_bytes<bytes>(state_get%1#0)
        let tmp%3#0: bool = (== tmp%2#0 0x3432)
        (assert tmp%3#0)
        let tmp%4#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("42")
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get 0x424f585f43)
        let state_get%2#0: bytes = (select tmp%4#0 maybe_value%2#0 maybe_exists%2#0)
        let tmp%6#0: bool = (== state_get%2#0 tmp%4#0)
        (assert tmp%6#0)
        let (maybe_value%3#0: bytes, a_exists#0: bool) = (box_get "box_a")
        let a#0: uint64 = (btoi maybe_value%3#0)
        let tmp%7#0: bool = (! a_exists#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (! a#0)
        (assert tmp%8#0)
        (box_del "box_large")
        exit 1u

subroutine examples.box_storage.contract.BoxContract.indirect_extract_and_replace[routing]() -> void:
    block@0: // L166
        let large#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = box_read("box_large")
        let box%offset%0#0: uint64 = (+ 0u 4096u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "box_large" box%offset%0#0 8u)
        let tuple_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#0: uint64 = (+ values%0#0 1u)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#0)
        let large#1: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = replace_value(large#0, 4, encoded_value%0#0)
        let box%offset%1#0: uint64 = (+ 0u 4096u)
        (box_replace "box_large" box%offset%1#0 encoded_value%0#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.read_boxes[routing]() -> void:
    block@0: // L172
        let tmp%0#1: uint64 = examples.box_storage.contract.get_box_value_plus_1("box_a")
        let tmp%1#1: uint64 = (- tmp%0#1 1u)
        let storage_value%0#0: bytes = box_read("b")
        let tmp%2#1: bytes = decode_bytes<bytes>(storage_value%0#0)
        let storage_value%1#0: bytes = box_read(0x424f585f43)
        let storage_value%2#0: bytes = box_read("box_large")
        let box%offset%0#0: uint64 = (+ 0u 4096u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "box_large" box%offset%0#0 8u)
        let tuple_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%4#0: Encoded(uint64,(len+uint8[]),(len+utf8[]),uint64) = bytes_encode<(uint64,(len+uint8[]),(len+utf8[]),uint64)>(tmp%1#1, tmp%2#1, storage_value%1#0, values%0#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.boxes_exist[routing]() -> void:
    block@0: // L181
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "box_a")
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "b")
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len 0x424f585f43)
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "box_large")
        let tmp%4#0: Encoded(bool1,bool1,bool1,bool1) = bytes_encode<(bool1,bool1,bool1,bool1)>(maybe_exists%0#0, maybe_exists%1#0, maybe_exists%2#0, maybe_exists%3#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.create_dynamic_arr_struct[routing]() -> void:
    block@0: // L185
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>()
        let tmp%1#0: uint64 = (txn NumAppArgs)
        let tmp%2#0: uint64 = (* tmp%1#0 2u)
        let tmp%3#0: Encoded(uint64,(len+uint64[]),uint64,(len+uint64[])) = bytes_encode<(uint64,(len+uint64[]),uint64,(len+uint64[]))>(tmp%0#0, encoded_array%0#0, tmp%2#0, encoded_array%0#0)
        box_write("dynamic_arr_struct", tmp%3#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct[routing]() -> void:
    block@0: // L194
        (box_del "dynamic_arr_struct")
        exit 1u

subroutine examples.box_storage.contract.BoxContract.append_dynamic_arr_struct[routing]() -> void:
    block@0: // L198
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let times#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let storage_value%0#0: bytes = box_read("dynamic_arr_struct")
        let box%offset%0#0: uint64 = (+ 0u 10u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" box%offset%0#0 8u)
        let tuple_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#1: bool = (== values%0#0 2u)
        (assert tmp%0#1) // expected 2
        let storage_value%1#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%1#0: Encoded(len+uint64[]) = extract_value(storage_value%1#0, 1)
        let box%offset%1#0: uint64 = (+ 0u 20u)
        let box%box_extract%1#0: bytes = (box_extract "dynamic_arr_struct" box%offset%1#0 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%1#0)
        let arr_len#0: uint64 = box%array_length%0#0
        let storage_value%2#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%2#0: Encoded(len+uint64[]) = extract_value(storage_value%2#0, 3)
        let box%add%0#0: uint64 = (+ 0u 18u)
        let box%box_extract%2#0: bytes = (box_extract "dynamic_arr_struct" box%add%0#0 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%2#0)
        let box%offset%2#0: uint64 = (+ 0u box%btoi%0#0)
        let box%box_extract%3#0: bytes = (box_extract "dynamic_arr_struct" box%offset%2#0 2u)
        let box%array_length%1#0: uint64 = (btoi box%box_extract%3#0)
        let arr2_len#0: uint64 = box%array_length%1#0
        let tmp%3#1: uint64 = (+ arr_len#0 times#0)
        let tmp%4#1: uint64 = examples.box_storage.contract.get_dynamic_arr2_struct_byte_index(tmp%3#1, arr2_len#0)
        (box_resize "dynamic_arr_struct" tmp%4#1)
        let tmp%5#0: uint64 = examples.box_storage.contract.get_dynamic_arr_struct_byte_index(arr_len#0)
        let tmp%6#0: uint64 = (* times#0 8u)
        let tmp%7#0: bytes = (bzero tmp%6#0)
        (box_splice "dynamic_arr_struct" tmp%5#0 0u tmp%7#0)
        let value_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L216
        let i#0: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let arr_len#1: uint64 = φ(arr_len#0 <- block@0, arr_len#2 <- block@3)
        let continue_looping%0#0: bool = (< i#0 times#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L217
        let storage_value%3#0: bytes = box_read("dynamic_arr_struct")
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(i#0)
        let updated_tuple%0#0: Encoded(uint64,uint16,uint64,uint16,(uint16,uint64[4095])) = replace_value(storage_value%3#0, 4, 1, arr_len#1, encoded_value%0#0)
        let box%offset%3#0: uint64 = (+ 0u 20u)
        let box%offset%4#0: uint64 = (+ box%offset%3#0 2u)
        let box%element_offset%0#0: uint64 = (* arr_len#1 8u)
        let box%offset%5#0: uint64 = (+ box%offset%4#0 box%element_offset%0#0)
        (box_replace "dynamic_arr_struct" box%offset%5#0 encoded_value%0#0)
        let arr_len#2: uint64 = (+ arr_len#1 1u)
        let value_internal%0#2: uint64 = (+ i#0 1u)
        goto block@2
    block@5: // after_for_L216
        let tmp%9#0: Encoded(uint16) = bytes_encode<uint16>(arr_len#1)
        let storage_value%4#0: bytes = box_read("dynamic_arr_struct")
        let updated_tuple%1#0: Encoded(uint64,uint16,uint64,uint16,(uint16,uint64[4095])) = replace_value(storage_value%4#0, 4, 0, tmp%9#0)
        let box%offset%6#0: uint64 = (+ 0u 20u)
        let box%offset%7#0: uint64 = (+ box%offset%6#0 0u)
        (box_replace "dynamic_arr_struct" box%offset%7#0 tmp%9#0)
        let tmp%10#0: uint64 = examples.box_storage.contract.get_dynamic_arr2_struct_byte_index(arr_len#1, 0u)
        let arr2_offset#0: uint64 = (- tmp%10#0 2u)
        let tmp%12#0: Encoded(uint16) = bytes_encode<uint16>(arr2_offset#0)
        let storage_value%5#0: bytes = box_read("dynamic_arr_struct")
        let updated_tuple%2#0: Encoded(uint64,uint16,uint64,uint16,(uint16,uint64[4095])) = replace_value(storage_value%5#0, 3, tmp%12#0)
        let box%offset%8#0: uint64 = (+ 0u 18u)
        (box_replace "dynamic_arr_struct" box%offset%8#0 tmp%12#0)
        let storage_value%6#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%3#0: Encoded(len+uint64[]) = extract_value(storage_value%6#0, 1)
        let box%offset%9#0: uint64 = (+ 0u 20u)
        let box%box_extract%4#0: bytes = (box_extract "dynamic_arr_struct" box%offset%9#0 2u)
        let box%array_length%2#0: uint64 = (btoi box%box_extract%4#0)
        let tmp%13#0: uint64 = box%array_length%2#0
        let tmp%14#0: bool = (== tmp%13#0 arr_len#1)
        (assert tmp%14#0) // expected arr length to be correct
        let storage_value%7#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%4#0: Encoded(len+uint64[]) = extract_value(storage_value%7#0, 3)
        let box%add%1#0: uint64 = (+ 0u 18u)
        let box%box_extract%5#0: bytes = (box_extract "dynamic_arr_struct" box%add%1#0 2u)
        let box%btoi%1#0: uint64 = (btoi box%box_extract%5#0)
        let box%offset%10#0: uint64 = (+ 0u box%btoi%1#0)
        let box%box_extract%6#0: bytes = (box_extract "dynamic_arr_struct" box%offset%10#0 2u)
        let box%array_length%3#0: uint64 = (btoi box%box_extract%6#0)
        let tmp%15#0: uint64 = box%array_length%3#0
        let tmp%16#0: bool = (! tmp%15#0)
        (assert tmp%16#0) // expected arr2 length to be correct
        let storage_value%8#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%5#0: Encoded(len+uint64[]) = extract_value(storage_value%8#0, 1)
        let box%offset%11#0: uint64 = (+ 0u 20u)
        let box%box_extract%7#0: bytes = (box_extract "dynamic_arr_struct" box%offset%11#0 2u)
        let box%array_length%4#0: uint64 = (btoi box%box_extract%7#0)
        let tmp%17#0: uint64 = box%array_length%4#0
        let tmp%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%17#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct[routing]() -> void:
    block@0: // L230
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let times#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let storage_value%0#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%0#0: Encoded(len+uint64[]) = extract_value(storage_value%0#0, 1)
        let box%offset%0#0: uint64 = (+ 0u 20u)
        let box%box_extract%0#0: bytes = (box_extract "dynamic_arr_struct" box%offset%0#0 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%0#0)
        let tmp%0#1: uint64 = box%array_length%0#0
        let arr_len#0: uint64 = (- tmp%0#1 times#0)
        let storage_value%1#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%1#0: Encoded(len+uint64[]) = extract_value(storage_value%1#0, 3)
        let box%add%0#0: uint64 = (+ 0u 18u)
        let box%box_extract%1#0: bytes = (box_extract "dynamic_arr_struct" box%add%0#0 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%1#0)
        let box%offset%1#0: uint64 = (+ 0u box%btoi%0#0)
        let box%box_extract%2#0: bytes = (box_extract "dynamic_arr_struct" box%offset%1#0 2u)
        let box%array_length%1#0: uint64 = (btoi box%box_extract%2#0)
        let arr2_len#0: uint64 = box%array_length%1#0
        let tmp%3#1: uint64 = examples.box_storage.contract.get_dynamic_arr2_struct_byte_index(arr_len#0, 0u)
        let arr2_offset#0: uint64 = (- tmp%3#1 2u)
        let tmp%5#0: Encoded(uint16) = bytes_encode<uint16>(arr_len#0)
        let storage_value%2#0: bytes = box_read("dynamic_arr_struct")
        let updated_tuple%0#0: Encoded(uint64,uint16,uint64,uint16,(uint16,uint64[4095])) = replace_value(storage_value%2#0, 4, 0, tmp%5#0)
        let box%offset%2#0: uint64 = (+ 0u 20u)
        let box%offset%3#0: uint64 = (+ box%offset%2#0 0u)
        (box_replace "dynamic_arr_struct" box%offset%3#0 tmp%5#0)
        let tmp%6#0: Encoded(uint16) = bytes_encode<uint16>(arr2_offset#0)
        let storage_value%3#0: bytes = box_read("dynamic_arr_struct")
        let updated_tuple%1#0: Encoded(uint64,uint16,uint64,uint16,(uint16,uint64[4095])) = replace_value(storage_value%3#0, 3, tmp%6#0)
        let box%offset%4#0: uint64 = (+ 0u 18u)
        (box_replace "dynamic_arr_struct" box%offset%4#0 tmp%6#0)
        let index#0: uint64 = examples.box_storage.contract.get_dynamic_arr_struct_byte_index(arr_len#0)
        let tmp%8#0: uint64 = (* times#0 8u)
        (box_splice "dynamic_arr_struct" index#0 tmp%8#0 0x)
        let size#0: uint64 = examples.box_storage.contract.get_dynamic_arr2_struct_byte_index(arr_len#0, arr2_len#0)
        (box_resize "dynamic_arr_struct" size#0)
        let storage_value%4#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%2#0: Encoded(len+uint64[]) = extract_value(storage_value%4#0, 1)
        let box%offset%5#0: uint64 = (+ 0u 20u)
        let box%box_extract%3#0: bytes = (box_extract "dynamic_arr_struct" box%offset%5#0 2u)
        let box%array_length%2#0: uint64 = (btoi box%box_extract%3#0)
        let tmp%10#0: uint64 = box%array_length%2#0
        let tmp%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%10#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.set_nested_struct[routing]() -> void:
    block@0: // L252
        let struct#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = (txna ApplicationArgs 1)
        let extract_uint16%0#0: uint64 = (extract_uint16 struct#0 8u) // on error: invalid tuple encoding
        let eq%0#0: bool = (== extract_uint16%0#0 20u)
        (assert eq%0#0) // invalid tail pointer at index 1 of (uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)
        let tmp%1#0: Encoded(uint64,(len+(len+uint64[])[]),uint64) = extract_value(struct#0, 1)
        let extract_uint16%1#0: uint64 = (extract_uint16 tmp%1#0 8u) // on error: invalid tuple encoding
        let eq%1#0: bool = (== extract_uint16%1#0 18u)
        (assert eq%1#0) // invalid tail pointer at index 1 of (uint64,(len+(len+uint64[])[]),uint64)
        let tmp%2#0: Encoded(len+(len+uint64[])[]) = extract_value(struct#0, 1, 1)
        let length%0#0: uint64 = array_len(tmp%2#0)
        let num_bytes%0#0: uint64 = (* length%0#0 2u)
        let total_length%0#0: uint64 = (len tmp%2#0)
        let array_data%0#0: bytes = ((extract 2 0) tmp%2#0)
        let index%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L252
        let index%0#1: uint64 = φ(index%0#0 <- block@0, index%0#2 <- block@2)
        let num_bytes%0#1: uint64 = φ(num_bytes%0#0 <- block@0, num_bytes%0#2 <- block@2)
        let continue_looping%0#0: bool = (< index%0#1 length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L252
        let head_offset_bytes%0#0: uint64 = (* index%0#1 2u)
        let item_offset%0#0: uint64 = (extract_uint16 array_data%0#0 head_offset_bytes%0#0) // on error: invalid array encoding
        let offset_is_correct%0#0: bool = (== item_offset%0#0 num_bytes%0#1)
        (assert offset_is_correct%0#0) // invalid tail pointer for (len+(len+uint64[])[])
        let tmp%3#0: Encoded(len+uint64[]) = extract_value(struct#0, 1, 1, index%0#1)
        let length%1#0: uint64 = array_len(tmp%3#0)
        let mul%0#0: uint64 = (* length%1#0 8u)
        let add%0#0: uint64 = (+ mul%0#0 2u)
        let num_bytes%0#2: uint64 = (+ num_bytes%0#1 add%0#0)
        let index%0#2: uint64 = (+ index%0#1 1u)
        goto block@1
    block@4: // after_for_L252
        let num_bytes%1#0: uint64 = (+ num_bytes%0#1 2u)
        let add%1#0: uint64 = (+ num_bytes%0#1 20u)
        let add%2#0: uint64 = (+ num_bytes%0#1 40u)
        let extract_uint16%2#0: uint64 = (extract_uint16 struct#0 10u) // on error: invalid tuple encoding
        let eq%2#0: bool = (== extract_uint16%2#0 add%2#0)
        (assert eq%2#0) // invalid tail pointer at index 2 of (uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)
        let tmp%4#0: Encoded(len+(uint64,(len+(len+uint64[])[]),uint64)[]) = extract_value(struct#0, 2)
        let length%2#0: uint64 = array_len(tmp%4#0)
        let num_bytes%2#0: uint64 = (* length%2#0 2u)
        let total_length%1#0: uint64 = (len tmp%4#0)
        let array_data%1#0: bytes = ((extract 2 0) tmp%4#0)
        let index%1#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L252
        let index%1#1: uint64 = φ(index%1#0 <- block@4, index%1#2 <- block@10)
        let num_bytes%2#1: uint64 = φ(num_bytes%2#0 <- block@4, num_bytes%2#3 <- block@10)
        let continue_looping%1#0: bool = (< index%1#1 length%2#0)
        goto continue_looping%1#0 ? block@6 : block@12
    block@6: // for_body_L252
        let head_offset_bytes%1#0: uint64 = (* index%1#1 2u)
        let item_offset%1#0: uint64 = (extract_uint16 array_data%1#0 head_offset_bytes%1#0) // on error: invalid array encoding
        let offset_is_correct%1#0: bool = (== item_offset%1#0 num_bytes%2#1)
        (assert offset_is_correct%1#0) // invalid tail pointer for (len+(uint64,(len+(len+uint64[])[]),uint64)[])
        let tmp%5#0: Encoded(uint64,(len+(len+uint64[])[]),uint64) = extract_value(struct#0, 2, index%1#1)
        let extract_uint16%3#0: uint64 = (extract_uint16 tmp%5#0 8u) // on error: invalid tuple encoding
        let eq%3#0: bool = (== extract_uint16%3#0 18u)
        (assert eq%3#0) // invalid tail pointer at index 1 of (uint64,(len+(len+uint64[])[]),uint64)
        let tmp%6#0: Encoded(len+(len+uint64[])[]) = extract_value(struct#0, 2, index%1#1, 1)
        let length%3#0: uint64 = array_len(tmp%6#0)
        let num_bytes%3#0: uint64 = (* length%3#0 2u)
        let total_length%2#0: uint64 = (len tmp%6#0)
        let array_data%2#0: bytes = ((extract 2 0) tmp%6#0)
        let index%2#0: uint64 = 0u
        goto block@7
    block@7: // for_header_L252
        let index%2#1: uint64 = φ(index%2#0 <- block@6, index%2#2 <- block@8)
        let num_bytes%3#1: uint64 = φ(num_bytes%3#0 <- block@6, num_bytes%3#2 <- block@8)
        let continue_looping%2#0: bool = (< index%2#1 length%3#0)
        goto continue_looping%2#0 ? block@8 : block@10
    block@8: // for_body_L252
        let head_offset_bytes%2#0: uint64 = (* index%2#1 2u)
        let item_offset%2#0: uint64 = (extract_uint16 array_data%2#0 head_offset_bytes%2#0) // on error: invalid array encoding
        let offset_is_correct%2#0: bool = (== item_offset%2#0 num_bytes%3#1)
        (assert offset_is_correct%2#0) // invalid tail pointer for (len+(len+uint64[])[])
        let tmp%7#0: Encoded(len+uint64[]) = extract_value(struct#0, 2, index%1#1, 1, index%2#1)
        let length%4#0: uint64 = array_len(tmp%7#0)
        let mul%1#0: uint64 = (* length%4#0 8u)
        let add%3#0: uint64 = (+ mul%1#0 2u)
        let num_bytes%3#2: uint64 = (+ num_bytes%3#1 add%3#0)
        let index%2#2: uint64 = (+ index%2#1 1u)
        goto block@7
    block@10: // after_for_L252
        let num_bytes%4#0: uint64 = (+ num_bytes%3#1 2u)
        let add%4#0: uint64 = (+ num_bytes%3#1 20u)
        let num_bytes%2#3: uint64 = (+ num_bytes%2#1 add%4#0)
        let index%1#2: uint64 = (+ index%1#1 1u)
        goto block@5
    block@12: // after_for_L252
        let num_bytes%5#0: uint64 = (+ num_bytes%2#1 2u)
        let add%5#0: uint64 = (+ add%2#0 num_bytes%5#0)
        let len%0#0: uint64 = (len struct#0)
        let eq%4#0: bool = (== len%0#0 add%5#0)
        (assert eq%4#0) // invalid number of bytes for examples.box_storage.contract.NestedStruct
        let tuple_item%0#0: Encoded(uint64) = extract_value(struct#0, 0)
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#1: bool = (!= values%0#0 0u)
        (assert values%0#0) // struct.a is truthy
        let struct_bytes#0: bytes = (txna ApplicationArgs 1)
        let struct_size#0: uint64 = (len struct_bytes#0)
        let tmp%3#1: uint64 = (+ 4098u struct_size#0)
        (box_create "box" tmp%3#1)
        let tmp%4#1: uint64 = 4096u
        let tmp%5#1: Encoded(uint16) = bytes_encode<uint16>(4098u)
        (box_replace "box" 4096u tmp%5#1)
        (box_replace "box" 4098u struct_bytes#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.nested_write[routing]() -> void:
    block@0: // L266
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let index#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let value#0: uint64 = decode_bytes<uint64>(tmp%2#0)
        let storage_value%0#0: bytes = box_read("box")
        let encoded_value%0#0: Encoded(uint64) = tmp%2#0
        let updated_tuple%0#0: Encoded(uint8[4096],(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) = replace_value(storage_value%0#0, 1, 0, encoded_value%0#0)
        let box%offset%0#0: uint64 = (+ 0u 4098u)
        let box%offset%1#0: uint64 = (+ box%offset%0#0 0u)
        (box_replace "box" box%offset%1#0 encoded_value%0#0)
        let tmp%0#1: uint64 = (+ value#0 1u)
        let storage_value%1#0: bytes = box_read("box")
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#1)
        let updated_tuple%1#0: Encoded(uint8[4096],(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) = replace_value(storage_value%1#0, 1, 3, encoded_value%1#0)
        let box%offset%2#0: uint64 = (+ 0u 4098u)
        let box%offset%3#0: uint64 = (+ box%offset%2#0 12u)
        (box_replace "box" box%offset%3#0 encoded_value%1#0)
        let tmp%1#1: uint64 = (+ value#0 2u)
        let storage_value%2#0: bytes = box_read("box")
        let encoded_value%2#0: Encoded(uint64) = bytes_encode<uint64>(tmp%1#1)
        let updated_tuple%2#0: Encoded(uint8[4096],(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) = replace_value(storage_value%2#0, 1, 1, 1, index#0, index#0, encoded_value%2#0)
        let box%offset%4#0: uint64 = (+ 0u 4098u)
        let box%offset%5#0: uint64 = (+ box%offset%4#0 20u)
        let box%offset%6#0: uint64 = (+ box%offset%5#0 18u)
        let box%box_extract%0#0: bytes = (box_extract "box" box%offset%6#0 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%0#0)
        let box%index_ok%0#0: bool = (< index#0 box%btoi%0#0)
        (assert box%index_ok%0#0) // index out of bounds
        let box%add%0#0: uint64 = (+ box%offset%6#0 2u)
        let box%mul%0#0: uint64 = (* 2u index#0)
        let box%add%1#0: uint64 = (+ box%add%0#0 box%mul%0#0)
        let box%box_extract%1#0: bytes = (box_extract "box" box%add%1#0 2u)
        let box%btoi%1#0: uint64 = (btoi box%box_extract%1#0)
        let box%offset%7#0: uint64 = (+ box%add%0#0 box%btoi%1#0)
        let box%box_extract%2#0: bytes = (box_extract "box" box%offset%7#0 2u)
        let box%btoi%2#0: uint64 = (btoi box%box_extract%2#0)
        let box%index_ok%1#0: bool = (< index#0 box%btoi%2#0)
        (assert box%index_ok%1#0) // index out of bounds
        let box%add%2#0: uint64 = (+ box%offset%7#0 2u)
        let box%element_offset%0#0: uint64 = (* index#0 8u)
        let box%offset%8#0: uint64 = (+ box%add%2#0 box%element_offset%0#0)
        (box_replace "box" box%offset%8#0 encoded_value%2#0)
        let tmp%2#1: uint64 = (+ value#0 3u)
        let storage_value%3#0: bytes = box_read("box")
        let encoded_value%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#1)
        let updated_tuple%3#0: Encoded(uint8[4096],(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) = replace_value(storage_value%3#0, 1, 1, 0, encoded_value%3#0)
        let box%offset%9#0: uint64 = (+ 0u 4098u)
        let box%offset%10#0: uint64 = (+ box%offset%9#0 20u)
        let box%offset%11#0: uint64 = (+ box%offset%10#0 0u)
        (box_replace "box" box%offset%11#0 encoded_value%3#0)
        let tmp%3#1: uint64 = (+ value#0 4u)
        let storage_value%4#0: bytes = box_read("box")
        let encoded_value%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%3#1)
        let updated_tuple%4#0: Encoded(uint8[4096],(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) = replace_value(storage_value%4#0, 1, 1, 2, encoded_value%4#0)
        let box%offset%12#0: uint64 = (+ 0u 4098u)
        let box%offset%13#0: uint64 = (+ box%offset%12#0 20u)
        let box%offset%14#0: uint64 = (+ box%offset%13#0 10u)
        (box_replace "box" box%offset%14#0 encoded_value%4#0)
        let tmp%4#0: uint64 = (+ value#0 5u)
        let storage_value%5#0: bytes = box_read("box")
        let encoded_value%5#0: Encoded(uint64) = bytes_encode<uint64>(tmp%4#0)
        let updated_tuple%5#0: Encoded(uint8[4096],(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64)) = replace_value(storage_value%5#0, 1, 2, index#0, 1, index#0, index#0, encoded_value%5#0)
        let box%offset%15#0: uint64 = (+ 0u 4098u)
        let box%add%3#0: uint64 = (+ box%offset%15#0 10u)
        let box%box_extract%3#0: bytes = (box_extract "box" box%add%3#0 2u)
        let box%btoi%3#0: uint64 = (btoi box%box_extract%3#0)
        let box%offset%16#0: uint64 = (+ box%offset%15#0 box%btoi%3#0)
        let box%box_extract%4#0: bytes = (box_extract "box" box%offset%16#0 2u)
        let box%btoi%4#0: uint64 = (btoi box%box_extract%4#0)
        let box%index_ok%2#0: bool = (< index#0 box%btoi%4#0)
        (assert box%index_ok%2#0) // index out of bounds
        let box%add%4#0: uint64 = (+ box%offset%16#0 2u)
        let box%mul%1#0: uint64 = (* 2u index#0)
        let box%add%5#0: uint64 = (+ box%add%4#0 box%mul%1#0)
        let box%box_extract%5#0: bytes = (box_extract "box" box%add%5#0 2u)
        let box%btoi%5#0: uint64 = (btoi box%box_extract%5#0)
        let box%offset%17#0: uint64 = (+ box%add%4#0 box%btoi%5#0)
        let box%offset%18#0: uint64 = (+ box%offset%17#0 18u)
        let box%box_extract%6#0: bytes = (box_extract "box" box%offset%18#0 2u)
        let box%btoi%6#0: uint64 = (btoi box%box_extract%6#0)
        let box%index_ok%3#0: bool = (< index#0 box%btoi%6#0)
        (assert box%index_ok%3#0) // index out of bounds
        let box%add%6#0: uint64 = (+ box%offset%18#0 2u)
        let box%mul%2#0: uint64 = (* 2u index#0)
        let box%add%7#0: uint64 = (+ box%add%6#0 box%mul%2#0)
        let box%box_extract%7#0: bytes = (box_extract "box" box%add%7#0 2u)
        let box%btoi%7#0: uint64 = (btoi box%box_extract%7#0)
        let box%offset%19#0: uint64 = (+ box%add%6#0 box%btoi%7#0)
        let box%box_extract%8#0: bytes = (box_extract "box" box%offset%19#0 2u)
        let box%btoi%8#0: uint64 = (btoi box%box_extract%8#0)
        let box%index_ok%4#0: bool = (< index#0 box%btoi%8#0)
        (assert box%index_ok%4#0) // index out of bounds
        let box%add%8#0: uint64 = (+ box%offset%19#0 2u)
        let box%element_offset%1#0: uint64 = (* index#0 8u)
        let box%offset%20#0: uint64 = (+ box%add%8#0 box%element_offset%1#0)
        (box_replace "box" box%offset%20#0 encoded_value%5#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.nested_read[routing]() -> void:
    block@0: // L276
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let i1#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let i2#0: uint64 = decode_bytes<uint64>(tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for arc4.uint64
        let i3#0: uint64 = decode_bytes<uint64>(tmp%4#0)
        let storage_value%0#0: bytes = box_read("box")
        let tuple_item%0#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = extract_value(storage_value%0#0, 1)
        let box%offset%0#0: uint64 = (+ 0u 4098u)
        let box%offset%1#0: uint64 = (+ box%offset%0#0 0u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "box" box%offset%1#0 8u)
        let tuple_item%1#0: Encoded(uint64) = box%box_extract%0#0
        let a#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let storage_value%1#0: bytes = box_read("box")
        let tuple_item%2#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = extract_value(storage_value%1#0, 1)
        let box%offset%2#0: uint64 = (+ 0u 4098u)
        let box%offset%3#0: uint64 = (+ box%offset%2#0 12u)
        let box%box_extract%1#0: Encoded(uint64) = (box_extract "box" box%offset%3#0 8u)
        let tuple_item%3#0: Encoded(uint64) = box%box_extract%1#0
        let b#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let storage_value%2#0: bytes = box_read("box")
        let tuple_item%4#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = extract_value(storage_value%2#0, 1)
        let tuple_item%5#0: Encoded(uint64,(len+(len+uint64[])[]),uint64) = extract_value(storage_value%2#0, 1, 1)
        let tuple_item%6#0: Encoded(len+(len+uint64[])[]) = extract_value(storage_value%2#0, 1, 1, 1)
        let array_item%0#0: Encoded(len+uint64[]) = extract_value(storage_value%2#0, 1, 1, 1, i1#0)
        let box%offset%4#0: uint64 = (+ 0u 4098u)
        let box%offset%5#0: uint64 = (+ box%offset%4#0 20u)
        let box%offset%6#0: uint64 = (+ box%offset%5#0 18u)
        let box%box_extract%2#0: bytes = (box_extract "box" box%offset%6#0 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%2#0)
        let box%index_ok%0#0: bool = (< i1#0 box%btoi%0#0)
        (assert box%index_ok%0#0) // index out of bounds
        let box%add%0#0: uint64 = (+ box%offset%6#0 2u)
        let box%mul%0#0: uint64 = (* 2u i1#0)
        let box%add%1#0: uint64 = (+ box%add%0#0 box%mul%0#0)
        let box%box_extract%3#0: bytes = (box_extract "box" box%add%1#0 2u)
        let box%btoi%1#0: uint64 = (btoi box%box_extract%3#0)
        let box%offset%7#0: uint64 = (+ box%add%0#0 box%btoi%1#0)
        let box%box_extract%4#0: bytes = (box_extract "box" box%offset%7#0 2u)
        let box%btoi%2#0: uint64 = (btoi box%box_extract%4#0)
        let box%index_ok%1#0: bool = (< i2#0 box%btoi%2#0)
        (assert box%index_ok%1#0) // index out of bounds
        let box%add%2#0: uint64 = (+ box%offset%7#0 2u)
        let box%element_offset%0#0: uint64 = (* i2#0 8u)
        let box%offset%8#0: uint64 = (+ box%add%2#0 box%element_offset%0#0)
        let box%box_extract%5#0: Encoded(uint64) = (box_extract "box" box%offset%8#0 8u)
        let array_item%1#0: Encoded(uint64) = box%box_extract%5#0
        let arr_arr#0: uint64 = decode_bytes<uint64>(array_item%1#0)
        let storage_value%3#0: bytes = box_read("box")
        let tuple_item%7#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = extract_value(storage_value%3#0, 1)
        let tuple_item%8#0: Encoded(uint64,(len+(len+uint64[])[]),uint64) = extract_value(storage_value%3#0, 1, 1)
        let box%offset%9#0: uint64 = (+ 0u 4098u)
        let box%offset%10#0: uint64 = (+ box%offset%9#0 20u)
        let box%offset%11#0: uint64 = (+ box%offset%10#0 0u)
        let box%box_extract%6#0: Encoded(uint64) = (box_extract "box" box%offset%11#0 8u)
        let tuple_item%9#0: Encoded(uint64) = box%box_extract%6#0
        let c#0: uint64 = decode_bytes<uint64>(tuple_item%9#0)
        let storage_value%4#0: bytes = box_read("box")
        let tuple_item%10#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = extract_value(storage_value%4#0, 1)
        let tuple_item%11#0: Encoded(uint64,(len+(len+uint64[])[]),uint64) = extract_value(storage_value%4#0, 1, 1)
        let box%offset%12#0: uint64 = (+ 0u 4098u)
        let box%offset%13#0: uint64 = (+ box%offset%12#0 20u)
        let box%offset%14#0: uint64 = (+ box%offset%13#0 10u)
        let box%box_extract%7#0: Encoded(uint64) = (box_extract "box" box%offset%14#0 8u)
        let tuple_item%12#0: Encoded(uint64) = box%box_extract%7#0
        let d#0: uint64 = decode_bytes<uint64>(tuple_item%12#0)
        let storage_value%5#0: bytes = box_read("box")
        let tuple_item%13#0: Encoded(uint64,(uint64,(len+(len+uint64[])[]),uint64),(len+(uint64,(len+(len+uint64[])[]),uint64)[]),uint64) = extract_value(storage_value%5#0, 1)
        let tuple_item%14#0: Encoded(len+(uint64,(len+(len+uint64[])[]),uint64)[]) = extract_value(storage_value%5#0, 1, 2)
        let array_item%2#0: Encoded(uint64,(len+(len+uint64[])[]),uint64) = extract_value(storage_value%5#0, 1, 2, i1#0)
        let tuple_item%15#0: Encoded(len+(len+uint64[])[]) = extract_value(storage_value%5#0, 1, 2, i1#0, 1)
        let array_item%3#0: Encoded(len+uint64[]) = extract_value(storage_value%5#0, 1, 2, i1#0, 1, i2#0)
        let box%offset%15#0: uint64 = (+ 0u 4098u)
        let box%add%3#0: uint64 = (+ box%offset%15#0 10u)
        let box%box_extract%8#0: bytes = (box_extract "box" box%add%3#0 2u)
        let box%btoi%3#0: uint64 = (btoi box%box_extract%8#0)
        let box%offset%16#0: uint64 = (+ box%offset%15#0 box%btoi%3#0)
        let box%box_extract%9#0: bytes = (box_extract "box" box%offset%16#0 2u)
        let box%btoi%4#0: uint64 = (btoi box%box_extract%9#0)
        let box%index_ok%2#0: bool = (< i1#0 box%btoi%4#0)
        (assert box%index_ok%2#0) // index out of bounds
        let box%add%4#0: uint64 = (+ box%offset%16#0 2u)
        let box%mul%1#0: uint64 = (* 2u i1#0)
        let box%add%5#0: uint64 = (+ box%add%4#0 box%mul%1#0)
        let box%box_extract%10#0: bytes = (box_extract "box" box%add%5#0 2u)
        let box%btoi%5#0: uint64 = (btoi box%box_extract%10#0)
        let box%offset%17#0: uint64 = (+ box%add%4#0 box%btoi%5#0)
        let box%offset%18#0: uint64 = (+ box%offset%17#0 18u)
        let box%box_extract%11#0: bytes = (box_extract "box" box%offset%18#0 2u)
        let box%btoi%6#0: uint64 = (btoi box%box_extract%11#0)
        let box%index_ok%3#0: bool = (< i2#0 box%btoi%6#0)
        (assert box%index_ok%3#0) // index out of bounds
        let box%add%6#0: uint64 = (+ box%offset%18#0 2u)
        let box%mul%2#0: uint64 = (* 2u i2#0)
        let box%add%7#0: uint64 = (+ box%add%6#0 box%mul%2#0)
        let box%box_extract%12#0: bytes = (box_extract "box" box%add%7#0 2u)
        let box%btoi%7#0: uint64 = (btoi box%box_extract%12#0)
        let box%offset%19#0: uint64 = (+ box%add%6#0 box%btoi%7#0)
        let box%box_extract%13#0: bytes = (box_extract "box" box%offset%19#0 2u)
        let box%btoi%8#0: uint64 = (btoi box%box_extract%13#0)
        let box%index_ok%4#0: bool = (< i3#0 box%btoi%8#0)
        (assert box%index_ok%4#0) // index out of bounds
        let box%add%8#0: uint64 = (+ box%offset%19#0 2u)
        let box%element_offset%1#0: uint64 = (* i3#0 8u)
        let box%offset%20#0: uint64 = (+ box%add%8#0 box%element_offset%1#0)
        let box%box_extract%14#0: Encoded(uint64) = (box_extract "box" box%offset%20#0 8u)
        let array_item%4#0: Encoded(uint64) = box%box_extract%14#0
        let woah_arr_arr#0: uint64 = decode_bytes<uint64>(array_item%4#0)
        let tmp%0#1: uint64 = (+ a#0 b#0)
        let tmp%1#1: uint64 = (+ tmp%0#1 arr_arr#0)
        let tmp%2#1: uint64 = (+ tmp%1#1 c#0)
        let tmp%3#1: uint64 = (+ tmp%2#1 d#0)
        let tmp%4#1: uint64 = (+ tmp%3#1 woah_arr_arr#0)
        let tmp%7#0: Encoded(uint64) = bytes_encode<uint64>(tmp%4#1)
        let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
        (log tmp%8#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct[routing]() -> void:
    block@0: // L288
        let storage_value%0#0: bytes = box_read("dynamic_arr_struct")
        let box%offset%0#0: uint64 = (+ 0u 0u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" box%offset%0#0 8u)
        let tuple_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#1: bool = (== values%0#0 1u)
        (assert tmp%0#1) // expected 1
        let storage_value%1#0: bytes = box_read("dynamic_arr_struct")
        let box%offset%1#0: uint64 = (+ 0u 10u)
        let box%box_extract%1#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" box%offset%1#0 8u)
        let tuple_item%1#0: Encoded(uint64) = box%box_extract%1#0
        let values%1#0: uint64 = decode_bytes<uint64>(tuple_item%1#0)
        let tmp%1#1: bool = (== values%1#0 2u)
        (assert tmp%1#1) // expected 2
        let storage_value%2#0: bytes = box_read("dynamic_arr_struct")
        let box%offset%2#0: uint64 = (+ 0u 0u)
        let box%box_extract%2#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" box%offset%2#0 8u)
        let tuple_item%2#0: Encoded(uint64) = box%box_extract%2#0
        let values%2#0: uint64 = decode_bytes<uint64>(tuple_item%2#0)
        let storage_value%3#0: bytes = box_read("dynamic_arr_struct")
        let box%offset%3#0: uint64 = (+ 0u 10u)
        let box%box_extract%3#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" box%offset%3#0 8u)
        let tuple_item%3#0: Encoded(uint64) = box%box_extract%3#0
        let values%3#0: uint64 = decode_bytes<uint64>(tuple_item%3#0)
        let total#0: uint64 = (+ values%2#0 values%3#0)
        let storage_value%4#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%4#0: Encoded(len+uint64[]) = extract_value(storage_value%4#0, 1)
        let box%offset%4#0: uint64 = (+ 0u 20u)
        let box%box_extract%4#0: bytes = (box_extract "dynamic_arr_struct" box%offset%4#0 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%4#0)
        let array_length%0#0: uint64 = box%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L293
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L294
        let box%offset%5#0: uint64 = (+ 0u 20u)
        let box%box_extract%5#0: bytes = (box_extract "dynamic_arr_struct" box%offset%5#0 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%5#0)
        let box%index_ok%0#0: bool = (< item_index_internal%0#1 box%btoi%0#0)
        (assert box%index_ok%0#0) // index out of bounds
        let box%add%0#0: uint64 = (+ box%offset%5#0 2u)
        let box%element_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let box%offset%6#0: uint64 = (+ box%add%0#0 box%element_offset%0#0)
        let box%box_extract%6#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" box%offset%6#0 8u)
        let array_item%0#0: Encoded(uint64) = box%box_extract%6#0
        let val#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let total#2: uint64 = (+ total#1 val#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@5: // after_for_L293
        let storage_value%5#0: bytes = box_read("dynamic_arr_struct")
        let tuple_item%5#0: Encoded(len+uint64[]) = extract_value(storage_value%5#0, 3)
        let box%add%1#0: uint64 = (+ 0u 18u)
        let box%box_extract%7#0: bytes = (box_extract "dynamic_arr_struct" box%add%1#0 2u)
        let box%btoi%1#0: uint64 = (btoi box%box_extract%7#0)
        let box%offset%7#0: uint64 = (+ 0u box%btoi%1#0)
        let box%box_extract%8#0: bytes = (box_extract "dynamic_arr_struct" box%offset%7#0 2u)
        let box%array_length%1#0: uint64 = (btoi box%box_extract%8#0)
        let array_length%1#0: uint64 = box%array_length%1#0
        let item_index_internal%1#0: uint64 = 0u
        goto block@6
    block@6: // for_header_L295
        let item_index_internal%1#1: uint64 = φ(item_index_internal%1#0 <- block@5, item_index_internal%1#2 <- block@7)
        let total#3: uint64 = φ(total#1 <- block@5, total#4 <- block@7)
        let continue_looping%1#0: bool = (< item_index_internal%1#1 array_length%1#0)
        goto continue_looping%1#0 ? block@7 : block@9
    block@7: // for_body_L296
        let box%add%2#0: uint64 = (+ 0u 18u)
        let box%box_extract%9#0: bytes = (box_extract "dynamic_arr_struct" box%add%2#0 2u)
        let box%btoi%2#0: uint64 = (btoi box%box_extract%9#0)
        let box%offset%8#0: uint64 = (+ 0u box%btoi%2#0)
        let box%add%3#0: uint64 = (+ box%offset%8#0 2u)
        let box%element_offset%1#0: uint64 = (* item_index_internal%1#1 8u)
        let box%offset%9#0: uint64 = (+ box%add%3#0 box%element_offset%1#0)
        let box%box_extract%10#0: Encoded(uint64) = (box_extract "dynamic_arr_struct" box%offset%9#0 8u)
        let array_item%1#0: Encoded(uint64) = box%box_extract%10#0
        let val#1: uint64 = decode_bytes<uint64>(array_item%1#0)
        let total#4: uint64 = (+ total#3 val#1)
        let item_index_internal%1#2: uint64 = (+ item_index_internal%1#1 1u)
        goto block@6
    block@9: // after_for_L295
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(total#3)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.create_bools[routing]() -> void:
    block@0: // L299
        (box_create "too_many_bools" 4125u)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.set_bool[routing]() -> void:
    block@0: // L303
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let index#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 1u)
        (assert eq%1#0) // invalid number of bytes for arc4.bool
        let value#0: bool = decode_bytes<bool>(tmp%2#0)
        let storage_value%0#0: bytes = box_read("too_many_bools")
        let encoded_value%0#0: Encoded(bool1) = bytes_encode<bool1>(value#0)
        let updated_array%0#0: Encoded(bool1[33000]) = replace_value(storage_value%0#0, index#0, encoded_value%0#0)
        let box%element_byte_offset%0#0: uint64 = (/ index#0 8u)
        let box%byte_containing_bit_offset%0#0: uint64 = (+ 0u box%element_byte_offset%0#0)
        let box%element_bit_offset%0#0: uint64 = (% index#0 8u)
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "too_many_bools" box%byte_containing_bit_offset%0#0 1u)
        let box%tmp%0#0: Encoded(bool1[8]) = replace_value(box%box_extract%0#0, box%element_bit_offset%0#0, encoded_value%0#0)
        (box_replace "too_many_bools" box%byte_containing_bit_offset%0#0 box%tmp%0#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.sum_bools[routing]() -> void:
    block@0: // L307
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let stop_at_total#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let total#0: uint64 = 0u
        let storage_value%0#0: bytes = box_read("too_many_bools")
        let array_length%0#0: uint64 = array_len(storage_value%0#0)
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L310
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@7)
        let total#1: uint64 = φ(total#0 <- block@0, total#3 <- block@7)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@9
    block@3: // for_body_L311
        let box%element_byte_offset%0#0: uint64 = (/ item_index_internal%0#1 8u)
        let box%byte_containing_bit_offset%0#0: uint64 = (+ 0u box%element_byte_offset%0#0)
        let box%element_bit_offset%0#0: uint64 = (% item_index_internal%0#1 8u)
        let box%box_extract%0#0: Encoded(bool1[8]) = (box_extract "too_many_bools" box%byte_containing_bit_offset%0#0 1u)
        let array_item%0#0: bool = extract_value(box%box_extract%0#0, box%element_bit_offset%0#0)
        let value#0: bool = decode_bytes<bool>(array_item%0#0)
        goto value#0 ? block@4 : block@5
    block@4: // if_body_L312
        let total#2: uint64 = (+ total#1 1u)
        goto block@5
    block@5: // after_if_else_L311
        let total#3: uint64 = φ(total#1 <- block@3, total#2 <- block@4)
        let tmp%1#1: bool = (== total#3 stop_at_total#0)
        goto tmp%1#1 ? block@6 : block@7
    block@6: // if_body_L314
        goto block@9
    block@7: // after_if_else_L313
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@9: // after_for_L310
        let total#4: uint64 = φ(total#1 <- block@2, total#3 <- block@6)
        let tmp%3#0: Encoded(uint64) = bytes_encode<uint64>(total#4)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.create_dynamic_box[routing]() -> void:
    block@0: // L317
        let encoded_array%0#0: Encoded(len+uint64[]) = bytes_encode<(len+uint64[])>()
        box_write("dynamic_box", encoded_array%0#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.delete_dynamic_box[routing]() -> void:
    block@0: // L321
        (box_del "dynamic_box")
        exit 1u

subroutine examples.box_storage.contract.BoxContract.append_dynamic_box[routing]() -> void:
    block@0: // L325
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let times#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let storage_value%0#0: bytes = box_read("dynamic_box")
        let box%offset%0#0: uint64 = (+ 0u 0u)
        let box%box_extract%0#0: Encoded(uint16) = (box_extract "dynamic_box" box%offset%0#0 2u)
        let tuple_item%0#0: Encoded(uint16) = box%box_extract%0#0
        let arr_len#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%1#1: uint64 = (+ arr_len#0 times#0)
        let tmp%2#1: uint64 = (* tmp%1#1 8u)
        let tmp%3#1: uint64 = (+ 2u tmp%2#1)
        (box_resize "dynamic_box" tmp%3#1)
        let value_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L333
        let i#0: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3)
        let arr_len#1: uint64 = φ(arr_len#0 <- block@0, arr_len#2 <- block@3)
        let continue_looping%0#0: bool = (< i#0 times#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L334
        let storage_value%1#0: bytes = box_read("dynamic_box")
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(i#0)
        let updated_tuple%0#0: Encoded(uint16,uint64[4095]) = replace_value(storage_value%1#0, 1, arr_len#1, encoded_value%0#0)
        let box%offset%1#0: uint64 = (+ 0u 2u)
        let box%element_offset%0#0: uint64 = (* arr_len#1 8u)
        let box%offset%2#0: uint64 = (+ box%offset%1#0 box%element_offset%0#0)
        (box_replace "dynamic_box" box%offset%2#0 encoded_value%0#0)
        let arr_len#2: uint64 = (+ arr_len#1 1u)
        let value_internal%0#2: uint64 = (+ i#0 1u)
        goto block@2
    block@5: // after_for_L333
        let tmp%5#0: Encoded(uint16) = bytes_encode<uint16>(arr_len#1)
        let storage_value%2#0: bytes = box_read("dynamic_box")
        let updated_tuple%1#0: Encoded(uint16,uint64[4095]) = replace_value(storage_value%2#0, 0, tmp%5#0)
        let box%offset%3#0: uint64 = (+ 0u 0u)
        (box_replace "dynamic_box" box%offset%3#0 tmp%5#0)
        let storage_value%3#0: bytes = box_read("dynamic_box")
        let box%box_extract%1#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%1#0)
        let tmp%6#0: uint64 = box%array_length%0#0
        let tmp%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%6#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.pop_dynamic_box[routing]() -> void:
    block@0: // L340
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let times#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let storage_value%0#0: bytes = box_read("dynamic_box")
        let box%offset%0#0: uint64 = (+ 0u 0u)
        let box%box_extract%0#0: Encoded(uint16) = (box_extract "dynamic_box" box%offset%0#0 2u)
        let tuple_item%0#0: Encoded(uint16) = box%box_extract%0#0
        let tmp%0#1: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let arr_len#0: uint64 = (- tmp%0#1 times#0)
        let tmp%2#1: Encoded(uint16) = bytes_encode<uint16>(arr_len#0)
        let storage_value%1#0: bytes = box_read("dynamic_box")
        let updated_tuple%0#0: Encoded(uint16,uint64[4095]) = replace_value(storage_value%1#0, 0, tmp%2#1)
        let box%offset%1#0: uint64 = (+ 0u 0u)
        (box_replace "dynamic_box" box%offset%1#0 tmp%2#1)
        let tmp%3#1: uint64 = (* arr_len#0 8u)
        let tmp%4#1: uint64 = (+ 2u tmp%3#1)
        (box_resize "dynamic_box" tmp%4#1)
        let storage_value%2#0: bytes = box_read("dynamic_box")
        let box%box_extract%1#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%1#0)
        let tmp%5#0: uint64 = box%array_length%0#0
        let tmp%3#0: Encoded(uint64) = bytes_encode<uint64>(tmp%5#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.sum_dynamic_box[routing]() -> void:
    block@0: // L351
        let total#0: uint64 = 0u
        let storage_value%0#0: bytes = box_read("dynamic_box")
        let box%box_extract%0#0: bytes = (box_extract "dynamic_box" 0u 2u)
        let box%array_length%0#0: uint64 = (btoi box%box_extract%0#0)
        let array_length%0#0: uint64 = box%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@2
    block@2: // for_header_L354
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@0, item_index_internal%0#2 <- block@3)
        let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@3)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 array_length%0#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L355
        let box%add%0#0: uint64 = (+ 0u 2u)
        let box%element_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let box%offset%0#0: uint64 = (+ box%add%0#0 box%element_offset%0#0)
        let box%box_extract%1#0: Encoded(uint64) = (box_extract "dynamic_box" box%offset%0#0 8u)
        let array_item%0#0: Encoded(uint64) = box%box_extract%1#0
        let val#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let total#2: uint64 = (+ total#1 val#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@2
    block@5: // after_for_L354
        let tmp%1#0: Encoded(uint64) = bytes_encode<uint64>(total#1)
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.write_dynamic_box[routing]() -> void:
    block@0: // L358
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let index#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let value#0: uint64 = decode_bytes<uint64>(tmp%2#0)
        let storage_value%0#0: bytes = box_read("dynamic_box")
        let encoded_value%0#0: Encoded(uint64) = tmp%2#0
        let updated_array%0#0: Encoded(len+uint64[]) = replace_value(storage_value%0#0, index#0, encoded_value%0#0)
        let box%add%0#0: uint64 = (+ 0u 2u)
        let box%element_offset%0#0: uint64 = (* index#0 8u)
        let box%offset%0#0: uint64 = (+ box%add%0#0 box%element_offset%0#0)
        (box_replace "dynamic_box" box%offset%0#0 encoded_value%0#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.write_dynamic_arr_struct[routing]() -> void:
    block@0: // L362
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let index#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for arc4.uint64
        let value#0: uint64 = decode_bytes<uint64>(tmp%2#0)
        let storage_value%0#0: bytes = box_read("dynamic_arr_struct")
        let encoded_value%0#0: Encoded(uint64) = tmp%2#0
        let updated_tuple%0#0: Encoded(uint64,(len+uint64[]),uint64,(len+uint64[])) = replace_value(storage_value%0#0, 1, index#0, encoded_value%0#0)
        let box%offset%0#0: uint64 = (+ 0u 20u)
        let box%box_extract%0#0: bytes = (box_extract "dynamic_arr_struct" box%offset%0#0 2u)
        let box%btoi%0#0: uint64 = (btoi box%box_extract%0#0)
        let box%index_ok%0#0: bool = (< index#0 box%btoi%0#0)
        (assert box%index_ok%0#0) // index out of bounds
        let box%add%0#0: uint64 = (+ box%offset%0#0 2u)
        let box%element_offset%0#0: uint64 = (* index#0 8u)
        let box%offset%1#0: uint64 = (+ box%add%0#0 box%element_offset%0#0)
        (box_replace "dynamic_arr_struct" box%offset%1#0 encoded_value%0#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.slice_box[routing]() -> void:
    block@0: // L366
        box_write("0", 0x54657374696e672074657374696e6720313233)
        let (tmp%0#0: uint64, tmp%1#0: bool) = (box_len "0")
        let tmp%2#0: bool = (< 0u tmp%0#0)
        let tmp%3#0: uint64 = (select tmp%0#0 0u tmp%0#0)
        let tmp%4#0: bool = (< 7u tmp%0#0)
        let tmp%5#0: uint64 = (select tmp%0#0 7u tmp%4#0)
        let tmp%6#0: uint64 = (- tmp%5#0 tmp%3#0)
        let tmp%7#0: bytes = (box_extract "0" tmp%3#0 tmp%6#0)
        let tmp%8#0: bool = (== tmp%7#0 0x54657374696e67)
        (assert tmp%8#0)
        let tmp%9#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Hello")
        box_write(0x424f585f43, tmp%9#0)
        let (tmp%10#0: uint64, tmp%11#0: bool) = (box_len 0x424f585f43)
        let tmp%12#0: bool = (< 2u tmp%10#0)
        let tmp%13#0: uint64 = (select tmp%10#0 2u tmp%12#0)
        let tmp%14#0: bool = (< 10u tmp%10#0)
        let tmp%15#0: uint64 = (select tmp%10#0 10u tmp%14#0)
        let tmp%16#0: uint64 = (- tmp%15#0 tmp%13#0)
        let tmp%17#0: bytes = (box_extract 0x424f585f43 tmp%13#0 tmp%16#0)
        let tmp%18#0: bool = (== tmp%17#0 0x48656c6c6f)
        (assert tmp%18#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.arc4_box[routing]() -> void:
    block@0: // L375
        let encoded_array%0#0: Encoded(uint8[4]) = bytes_encode<uint8[4]>(0x00, 0x01, 0x02, 0x03)
        box_write(0x64, encoded_array%0#0)
        let storage_value%0#0: bytes = box_read(0x64)
        let array_item%0#0: Encoded(uint8) = extract_value(storage_value%0#0, 0u)
        let tmp%0#0: bool = (b== array_item%0#0 0x00)
        (assert tmp%0#0)
        let storage_value%1#0: bytes = box_read(0x64)
        let array_item%1#0: Encoded(uint8) = extract_value(storage_value%1#0, 1u)
        let tmp%1#0: bool = (b== array_item%1#0 0x01)
        (assert tmp%1#0)
        let storage_value%2#0: bytes = box_read(0x64)
        let array_item%2#0: Encoded(uint8) = extract_value(storage_value%2#0, 2u)
        let tmp%2#0: bool = (b== array_item%2#0 0x02)
        (assert tmp%2#0)
        let storage_value%3#0: bytes = box_read(0x64)
        let array_item%3#0: Encoded(uint8) = extract_value(storage_value%3#0, 3u)
        let tmp%3#0: bool = (b== array_item%3#0 0x03)
        (assert tmp%3#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.test_box_ref[routing]() -> void:
    block@0: // L385
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "blob")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0) // no data
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len 0x626c6f62)
        let tmp%1#0: bool = (! maybe_exists%1#0)
        (assert tmp%1#0) // no data
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len 0x626c6f62)
        let tmp%2#0: bool = (! maybe_exists%2#0)
        (assert tmp%2#0) // no data
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "blob")
        let tmp%3#0: bool = (! maybe_exists%3#0)
        (assert tmp%3#0) // no data
        let tmp%4#0: bool = (box_create "blob" 32u)
        (assert tmp%4#0)
        let (_%4#0: uint64, maybe_exists%4#0: bool) = (box_len "blob")
        let sender_bytes#0: bytes = (txn Sender)
        let app_address#0: bytes = (global CurrentApplicationAddress)
        (box_replace "blob" 0u sender_bytes#0)
        (box_resize "blob" 8000u)
        (box_splice "blob" 0u 0u app_address#0)
        (box_replace "blob" 64u 0x68656c6c6f)
        let tmp%7#0: uint64 = 5u
        let tmp%8#0: uint64 = 69u
        let prefix#0: bytes = (box_extract "blob" 0u 69u)
        let tmp%10#0: bytes = (concat app_address#0 sender_bytes#0)
        let tmp%11#0: bytes = (concat tmp%10#0 0x68656c6c6f)
        let tmp%12#0: bool = (== prefix#0 tmp%11#0)
        (assert tmp%12#0)
        (box_del "blob")
        let tmp%13#0: bool = 1u
        let (value#0: bytes, exists#0: bool) = (box_get "blob")
        let tmp%14#0: bool = (! exists#0)
        (assert tmp%14#0)
        let tmp%15#0: bool = (== value#0 0x)
        (assert tmp%15#0)
        let (maybe_value%1#0: bytes, maybe_exists%6#0: bool) = (box_get "blob")
        let state_get%0#0: bytes = (select sender_bytes#0 maybe_value%1#0 maybe_exists%6#0)
        let tmp%16#0: bool = (== state_get%0#0 sender_bytes#0)
        (assert tmp%16#0)
        let tmp%17#0: bytes = (concat sender_bytes#0 app_address#0)
        box_write("blob", tmp%17#0)
        let (_%5#0: uint64, maybe_exists%7#0: bool) = (box_len "blob")
        (assert maybe_exists%7#0) // Blob exists
        let (value%0#0: uint64, check%0#0: bool) = (box_len "blob")
        let tmp%18#0: bool = (== value%0#0 64u)
        (assert tmp%18#0)
        let tmp%19#0: uint64 = examples.box_storage.contract.get_box_ref_length("blob")
        let tmp%20#0: bool = (== tmp%19#0 64u)
        (assert tmp%20#0)
        (box_create "box_ref" 32u)
        let (_%6#0: uint64, maybe_exists%8#0: bool) = (box_len "box_ref")
        (box_del "box_ref")
        exit 1u

subroutine examples.box_storage.contract.BoxContract.box_map_test[routing]() -> void:
    block@0: // L433
        let box_0#0: bytes = (itob 0u)
        box_write(box_0#0, "Hmmmmm")
        let (value%0#0: uint64, check%0#0: bool) = (box_len box_0#0)
        (assert check%0#0) // check self.box_map entry exists
        let tmp%0#0: uint64 = 6u
        let tmp%1#0: bool = (== value%0#0 6u)
        (assert tmp%1#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len box_0#0)
        let (value%2#0: uint64, check%2#0: bool) = (box_len box_0#0)
        let tmp%2#0: bool = (== value%1#0 value%2#0)
        (assert tmp%2#0)
        let (value%3#0: uint64, check%3#0: bool) = (box_len box_0#0)
        let tmp%3#0: uint64 = 6u
        let tmp%4#0: bool = (== value%3#0 6u)
        (assert tmp%4#0)
        let encoded_value%5#0: bytes[8] = (itob 1u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get encoded_value%5#0)
        let state_get%0#0: bytes = (select "default" maybe_value%0#0 maybe_exists%0#0)
        let tmp%5#0: bool = (== state_get%0#0 "default")
        (assert tmp%5#0)
        let (value#1: uint64, exists#0: bool) = (box_len encoded_value%5#0)
        let tmp%6#0: bool = (! exists#0)
        (assert tmp%6#0)
        let (_%0#0: uint64, maybe_exists%2#0: bool) = (box_len box_0#0)
        let tmp%7#0: bool = 1u
        box_write(encoded_value%5#0, "hello")
        let tmp%8#0: string = examples.box_storage.contract.get_box_map_value_from_key_plus_1(0x, 0u)
        let tmp%9#0: bool = (== tmp%8#0 "hello")
        (assert tmp%9#0)
        (box_del encoded_value%5#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.box_map_set[routing]() -> void:
    block@0: // L457
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let key#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let length%0#0: uint64 = array_len(tmp%2#0)
        let mul%0#0: uint64 = length%0#0
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%0#0)
        (assert eq%1#0) // invalid number of bytes for arc4.dynamic_array<arc4.uint8>
        let value#0: string = decode_bytes<string>(tmp%2#0)
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = encoded_value%0#0
        box_write(encoded_value%0#0, value#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.box_map_get[routing]() -> void:
    block@0: // L461
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let key#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = encoded_value%0#0
        let storage_value%0#0: bytes = box_read(encoded_value%0#0)
        let tmp%3#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(storage_value%0#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.box_map_del[routing]() -> void:
    block@0: // L465
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let key#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = encoded_value%0#0
        (box_del encoded_value%0#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.box_map_exists[routing]() -> void:
    block@0: // L469
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for arc4.uint64
        let key#0: uint64 = decode_bytes<uint64>(tmp%0#0)
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = encoded_value%0#0
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len encoded_value%0#0)
        let tmp%3#0: Encoded(bool8) = bytes_encode<bool8>(maybe_exists%0#0)
        let tmp%4#0: bytes = (concat 0x151f7c75 tmp%3#0)
        (log tmp%4#0)
        exit 1u

subroutine examples.box_storage.contract.BoxContract.__algopy_default_create() -> void:
    block@0: // L1
        return 