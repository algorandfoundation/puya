main examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        let tmp%0#2: bool = 1u
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__()
        return tmp%0#1

subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head(array: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L221
        let size_b#0: bytes = ((substring 0 2) array#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) array#0)
        let tmp%0#1: bool = (< index#0 array_length#0)
        (assert tmp%0#1) // Index out of bounds
        let tmp%1#1: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%1#1)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#1: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#1 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%11#0: bytes = _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(tmp%10#0, array_length#0, index#0)
        let tmp%4#0: bytes = (concat size_b#0 tmp%11#0)
        return tmp%4#0

subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
    block@0: // L244
        let size_b#0: bytes = ((substring 0 2) source#0)
        let array_length#0: uint64 = (btoi size_b#0)
        let array_head_and_tail#0: bytes = ((extract 2 0) source#0)
        let tmp%0#1: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#1)
        let tmp%2#1: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#1 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@2
    block@2: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L273
        let tmp%4#0: bytes = (concat size_b#0 new_head_and_tail#1)
        return tmp%4#0

subroutine _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L256
        let tmp%0#0: uint64 = (* index#0 2u)
        let original_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 tmp%0#0)
        let tmp%2#0: uint64 = (+ index#0 1u)
        let head_offset#0: uint64 = (* tmp%2#0 2u)
        let next_item_offset#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let end_of_tail#0: uint64 = (len array_head_and_tail#0)
        let tmp%6#0: uint64 = (- array_length#0 index#0)
        let is_before_end#0: uint64 = (- tmp%6#0 1u)
        let end_offset#0: uint64 = (select end_of_tail#0 next_item_offset#0 is_before_end#0)
        let original_item_length#0: uint64 = (- end_offset#0 original_offset#0)
        let new_item_length#0: uint64 = (len new_item#0)
        let tmp%11#0: bytes = (substring3 array_head_and_tail#0 0u original_offset#0)
        let tmp%12#0: bytes = (concat tmp%11#0 new_item#0)
        let tmp%13#0: bytes = (substring3 array_head_and_tail#0 end_offset#0 end_of_tail#0)
        let new_head_and_tail#0: bytes = (concat tmp%12#0 tmp%13#0)
        let tmp%15#0: uint64 = (* array_length#0 2u)
        goto block@1
    block@1: // for_header_L273
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@2)
        let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%15#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L274
        let tail_offset#0: uint64 = (extract_uint16 new_head_and_tail#1 head_offset#1)
        let tail_offset#1: uint64 = (+ tail_offset#0 new_item_length#0)
        let tail_offset#2: uint64 = (- tail_offset#1 original_item_length#0)
        let tmp%21#0: bytes = (itob tail_offset#2)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%21#0)
        let new_head_and_tail#2: bytes = (replace3 new_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let head_offset#2: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L273
        return new_head_and_tail#1

subroutine _puya_lib.arc4.static_array_replace_byte_length_head(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
    block@0: // L282
        let tmp%0#0: bool = (< index#0 array_length#0)
        (assert tmp%0#0) // Index out of bounds
        let head_offset#0: uint64 = (* index#0 2u)
        let offset_for_index#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let old_item_length#0: uint64 = (extract_uint16 array_head_and_tail#0 offset_for_index#0)
        let tmp%4#0: uint64 = (+ offset_for_index#0 old_item_length#0)
        let old_item_end#0: uint64 = (+ tmp%4#0 2u)
        let tmp%6#0: bytes = (substring3 array_head_and_tail#0 0u offset_for_index#0)
        let tmp%7#0: bytes = (concat tmp%6#0 new_item#0)
        let tmp%8#0: uint64 = (len array_head_and_tail#0)
        let tmp%9#0: bytes = (substring3 array_head_and_tail#0 old_item_end#0 tmp%8#0)
        let array_head_and_tail#1: bytes = (concat tmp%7#0 tmp%9#0)
        let tmp%0#1: uint64 = (* array_length#0 2u)
        let tmp%2#1: uint64 = (extract_uint16 array_head_and_tail#1 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#1 tmp%2#1 index#0)
        goto block@2
    block@2: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3)
        let array_head_and_tail#2: bytes = φ(array_head_and_tail#1 <- block@0, array_head_and_tail#3 <- block@3)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#1)
        goto continue_looping%0#0 ? block@3 : block@5
    block@3: // for_body_L332
        let tmp%6#1: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#1)
        let array_head_and_tail#3: bytes = (replace3 array_head_and_tail#2 head_offset#1 tail_offset_bytes#0)
        let tmp%9#1: uint64 = (extract_uint16 array_head_and_tail#3 tail_offset#1)
        let tmp%10#1: uint64 = (+ tmp%9#1 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#1)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@2
    block@5: // after_for_L331
        return array_head_and_tail#2

subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head(array_head_and_tail: bytes, length: uint64, start_at_index: uint64) -> bytes:
    block@0: // L310
        let tmp%0#0: uint64 = (* length#0 2u)
        let head_offset#0: uint64 = (* start_at_index#0 2u)
        let tmp%2#0: uint64 = (extract_uint16 array_head_and_tail#0 head_offset#0)
        let tail_offset#0: uint64 = (select tmp%0#0 tmp%2#0 start_at_index#0)
        goto block@1
    block@1: // for_header_L331
        let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@2)
        let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@2)
        let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@2)
        let continue_looping%0#0: bool = (< head_offset#1 tmp%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L332
        let tmp%6#0: bytes = (itob tail_offset#1)
        let tail_offset_bytes#0: bytes = ((extract 6 2) tmp%6#0)
        let array_head_and_tail#2: bytes = (replace3 array_head_and_tail#1 head_offset#1 tail_offset_bytes#0)
        let tmp%9#0: uint64 = (extract_uint16 array_head_and_tail#2 tail_offset#1)
        let tmp%10#0: uint64 = (+ tmp%9#0 2u)
        let tail_offset#2: uint64 = (+ tail_offset#1 tmp%10#0)
        let head_offset#3: uint64 = (+ head_offset#1 2u)
        goto block@1
    block@4: // after_for_L331
        return array_head_and_tail#1

subroutine examples.box_storage.contract.BoxContract.__puya_arc4_router__() -> bool:
    block@0: // L37
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%0#0 ? block@1 : block@21
    block@1: // abi_routing_L37
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "set_boxes(uint64,byte[],string)void" => block@2, method "check_keys()void" => block@3, method "create_many_ints()void" => block@4, method "set_many_ints(uint64,uint64)void" => block@5, method "sum_many_ints()uint64" => block@6, method "delete_boxes()void" => block@7, method "indirect_extract_and_replace()void" => block@8, method "read_boxes()(uint64,byte[],string,uint64)" => block@9, method "boxes_exist()(bool,bool,bool,bool)" => block@10, method "slice_box()void" => block@11, method "arc4_box()void" => block@12, method "test_box_ref()void" => block@13, method "box_map_test()void" => block@14, method "box_map_set(uint64,string)void" => block@15, method "box_map_get(uint64)string" => block@16, method "box_map_del(uint64)void" => block@17, method "box_map_exists(uint64)bool" => block@18, * => block@25}
    block@2: // set_boxes_route_L49
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        examples.box_storage.contract.BoxContract.set_boxes(tmp%7#0, reinterpret_Encoded(len+uint8[])%0#0, reinterpret_Encoded(len+utf8[])%0#0)
        return 1u
    block@3: // check_keys_route_L85
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%10#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.check_keys()
        return 1u
    block@4: // create_many_ints_route_L92
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (! tmp%12#0)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%14#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.create_many_ints()
        return 1u
    block@5: // set_many_ints_route_L96
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (! tmp%16#0)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        let tmp%19#0: bool = (!= tmp%18#0 0u)
        (assert tmp%18#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%20#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%21#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%2#0)
        examples.box_storage.contract.BoxContract.set_many_ints(tmp%20#0, tmp%21#0)
        return 1u
    block@6: // sum_many_ints_route_L100
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (! tmp%22#0)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%24#0) // can only call when not creating
        let tmp%26#0: uint64 = examples.box_storage.contract.BoxContract.sum_many_ints()
        let tmp%27#0: Encoded(uint64) = bytes_encode<uint64>(tmp%26#0)
        let tmp%28#0: bytes = (concat 0x151f7c75 tmp%27#0)
        (log tmp%28#0)
        return 1u
    block@7: // delete_boxes_route_L108
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (! tmp%29#0)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%31#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.delete_boxes()
        return 1u
    block@8: // indirect_extract_and_replace_route_L121
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (! tmp%33#0)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (!= tmp%35#0 0u)
        (assert tmp%35#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.indirect_extract_and_replace()
        return 1u
    block@9: // read_boxes_route_L127
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (! tmp%37#0)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (!= tmp%39#0 0u)
        (assert tmp%39#0) // can only call when not creating
        let (tmp%41#0: uint64, tmp%42#0: bytes, tmp%43#0: Encoded(len+utf8[]), tmp%44#0: uint64) = examples.box_storage.contract.BoxContract.read_boxes()
        let tmp%45#0: Encoded(uint64,(len+uint8[]),(len+utf8[]),uint64) = bytes_encode<(uint64,(len+uint8[]),(len+utf8[]),uint64)>(tmp%41#0, tmp%42#0, tmp%43#0, tmp%44#0)
        let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
        (log tmp%46#0)
        return 1u
    block@10: // boxes_exist_route_L136
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (! tmp%47#0)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (!= tmp%49#0 0u)
        (assert tmp%49#0) // can only call when not creating
        let (tmp%51#0: bool, tmp%52#0: bool, tmp%53#0: bool, tmp%54#0: bool) = examples.box_storage.contract.BoxContract.boxes_exist()
        let tmp%55#0: Encoded(bool1,bool1,bool1,bool1) = bytes_encode<(bool1,bool1,bool1,bool1)>(tmp%51#0, tmp%52#0, tmp%53#0, tmp%54#0)
        let tmp%56#0: bytes = (concat 0x151f7c75 tmp%55#0)
        (log tmp%56#0)
        return 1u
    block@11: // slice_box_route_L140
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (! tmp%57#0)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        let tmp%60#0: bool = (!= tmp%59#0 0u)
        (assert tmp%59#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.slice_box()
        return 1u
    block@12: // arc4_box_route_L149
        let tmp%61#0: uint64 = (txn OnCompletion)
        let tmp%62#0: bool = (! tmp%61#0)
        (assert tmp%62#0) // OnCompletion is not NoOp
        let tmp%63#0: uint64 = (txn ApplicationID)
        let tmp%64#0: bool = (!= tmp%63#0 0u)
        (assert tmp%63#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.arc4_box()
        return 1u
    block@13: // test_box_ref_route_L159
        let tmp%65#0: uint64 = (txn OnCompletion)
        let tmp%66#0: bool = (! tmp%65#0)
        (assert tmp%66#0) // OnCompletion is not NoOp
        let tmp%67#0: uint64 = (txn ApplicationID)
        let tmp%68#0: bool = (!= tmp%67#0 0u)
        (assert tmp%67#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.test_box_ref()
        return 1u
    block@14: // box_map_test_route_L207
        let tmp%69#0: uint64 = (txn OnCompletion)
        let tmp%70#0: bool = (! tmp%69#0)
        (assert tmp%70#0) // OnCompletion is not NoOp
        let tmp%71#0: uint64 = (txn ApplicationID)
        let tmp%72#0: bool = (!= tmp%71#0 0u)
        (assert tmp%71#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.box_map_test()
        return 1u
    block@15: // box_map_set_route_L231
        let tmp%73#0: uint64 = (txn OnCompletion)
        let tmp%74#0: bool = (! tmp%73#0)
        (assert tmp%74#0) // OnCompletion is not NoOp
        let tmp%75#0: uint64 = (txn ApplicationID)
        let tmp%76#0: bool = (!= tmp%75#0 0u)
        (assert tmp%75#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%77#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%3#0)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 2)
        let tmp%78#0: string = decode_bytes<string>(reinterpret_Encoded(len+utf8[])%1#0)
        examples.box_storage.contract.BoxContract.box_map_set(tmp%77#0, tmp%78#0)
        return 1u
    block@16: // box_map_get_route_L235
        let tmp%79#0: uint64 = (txn OnCompletion)
        let tmp%80#0: bool = (! tmp%79#0)
        (assert tmp%80#0) // OnCompletion is not NoOp
        let tmp%81#0: uint64 = (txn ApplicationID)
        let tmp%82#0: bool = (!= tmp%81#0 0u)
        (assert tmp%81#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%83#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%4#0)
        let tmp%84#0: string = examples.box_storage.contract.BoxContract.box_map_get(tmp%83#0)
        let tmp%85#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>(tmp%84#0)
        let tmp%86#0: bytes = (concat 0x151f7c75 tmp%85#0)
        (log tmp%86#0)
        return 1u
    block@17: // box_map_del_route_L239
        let tmp%87#0: uint64 = (txn OnCompletion)
        let tmp%88#0: bool = (! tmp%87#0)
        (assert tmp%88#0) // OnCompletion is not NoOp
        let tmp%89#0: uint64 = (txn ApplicationID)
        let tmp%90#0: bool = (!= tmp%89#0 0u)
        (assert tmp%89#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%91#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%5#0)
        examples.box_storage.contract.BoxContract.box_map_del(tmp%91#0)
        return 1u
    block@18: // box_map_exists_route_L243
        let tmp%92#0: uint64 = (txn OnCompletion)
        let tmp%93#0: bool = (! tmp%92#0)
        (assert tmp%93#0) // OnCompletion is not NoOp
        let tmp%94#0: uint64 = (txn ApplicationID)
        let tmp%95#0: bool = (!= tmp%94#0 0u)
        (assert tmp%94#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%96#0: uint64 = decode_bytes<uint64>(reinterpret_Encoded(uint64)%6#0)
        let tmp%97#0: bool = examples.box_storage.contract.BoxContract.box_map_exists(tmp%96#0)
        let tmp%98#0: Encoded(bool8) = bytes_encode<bool8>(tmp%97#0)
        let tmp%99#0: bytes = (concat 0x151f7c75 tmp%98#0)
        (log tmp%99#0)
        return 1u
    block@21: // bare_routing_L37
        let tmp%100#0: uint64 = (txn OnCompletion)
        goto tmp%100#0 ? block@25 : block@22
    block@22: // __algopy_default_create_L1
        let tmp%101#0: uint64 = (txn ApplicationID)
        let tmp%102#0: bool = (! tmp%101#0)
        (assert tmp%102#0) // can only call when creating
        return 1u
    block@25: // after_if_else_L37
        return 0u

subroutine examples.box_storage.contract.BoxContract.set_boxes(a: uint64, b: Encoded(len+uint8[]), c: Encoded(len+utf8[])) -> void:
    block@0: // L49
        let encoded_value%0#0: bytes[8] = (itob a#0)
        box_write("box_a", encoded_value%0#0)
        (box_del "b")
        box_write("b", b#0)
        (box_del 0x424f585f43)
        box_write(0x424f585f43, c#0)
        let tmp%0#0: bytes = decode_bytes<bytes>(b#0)
        (box_del "box_d")
        box_write("box_d", tmp%0#0)
        (box_create "box_large" 6160u)
        let storage_value%0#0: bytes = box_read("box_large")
        let encoded_value%1#0: Encoded(uint64) = bytes_encode<uint64>(42u)
        let updated_tuple%0#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = replace_value(storage_value%0#0, 4, encoded_value%1#0)
        let box%offset%0#0: uint64 = (+ 0u 4096u)
        (box_replace "box_large" box%offset%0#0 encoded_value%1#0)
        let tmp%1#0: uint64 = 4096u
        (box_replace "box_large" 4096u 0x000000000000002a)
        let b_value#0: Encoded(len+uint8[]) = box_read("b")
        let storage_value%2#0: bytes = b_value#0
        let array_length%0#0: uint64 = (extract_uint16 storage_value%2#0 0u)
        let array_length%1#0: uint64 = (extract_uint16 b_value#0 0u)
        let tmp%2#0: bool = (== array_length%0#0 array_length%1#0)
        (assert tmp%2#0) // direct reference should match copy
        let storage_value%3#0: bytes = box_read("box_a")
        let maybe_value_converted%0#0: uint64 = (btoi storage_value%3#0)
        let tmp%3#0: uint64 = (+ maybe_value_converted%0#0 3u)
        let encoded_value%2#0: bytes[8] = (itob tmp%3#0)
        box_write("box_a", encoded_value%2#0)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "box_a")
        (assert check%0#0) // check self.box_a exists
        let tmp%4#0: bool = (== value%0#0 8u)
        (assert tmp%4#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "b")
        (assert check%1#0) // check self.box_b exists
        let tmp%5#0: uint64 = (len b#0)
        let tmp%6#0: bool = (== value%1#0 tmp%5#0)
        (assert tmp%6#0)
        let (value%2#0: uint64, check%2#0: bool) = (box_len 0x424f585f43)
        (assert check%2#0) // check self.box_c exists
        let tmp%7#0: uint64 = (len c#0)
        let tmp%8#0: bool = (== value%2#0 tmp%7#0)
        (assert tmp%8#0)
        let (value%3#0: uint64, check%3#0: bool) = (box_len "box_d")
        (assert check%3#0) // check self.box_d exists
        let tmp%10#0: uint64 = (len tmp%0#0)
        let tmp%11#0: bool = (== value%3#0 tmp%10#0)
        (assert tmp%11#0)
        let tmp%12#0: bytes = (box_extract 0x424f585f43 0u 1u)
        let extract%0#0: bytes = ((extract 0 1) c#0)
        let tmp%13#0: bool = (== tmp%12#0 extract%0#0)
        (assert tmp%13#0)
        let (tmp%14#0: uint64, tmp%15#0: bool) = (box_len 0x424f585f43)
        let tmp%16#0: uint64 = (- tmp%14#0 1u)
        let tmp%17#0: bytes = (box_extract 0x424f585f43 tmp%16#0 1u)
        let tmp%19#0: uint64 = (- tmp%7#0 1u)
        let extract%1#0: bytes = (extract3 c#0 tmp%19#0 1u)
        let tmp%20#0: bool = (== tmp%17#0 extract%1#0)
        (assert tmp%20#0)
        let (tmp%21#0: uint64, tmp%22#0: bool) = (box_len 0x424f585f43)
        let tmp%23#0: bool = (< 1u tmp%21#0)
        let tmp%24#0: uint64 = (select tmp%21#0 1u tmp%23#0)
        let tmp%25#0: uint64 = (- tmp%21#0 tmp%24#0)
        let tmp%27#0: bytes = (box_extract 0x424f585f43 0u tmp%25#0)
        let is_out_of_bounds%0#0: bool = (>= 1u tmp%7#0)
        let bounded_offset%0#0: uint64 = (select 1u tmp%7#0 is_out_of_bounds%0#0)
        let bounded_index%0#0: uint64 = (- tmp%7#0 bounded_offset%0#0)
        let tmp%28#0: bytes = (substring3 c#0 0u bounded_index%0#0)
        let tmp%29#0: bool = (== tmp%27#0 tmp%28#0)
        (assert tmp%29#0)
        let (tmp%30#0: uint64, tmp%31#0: bool) = (box_len 0x424f585f43)
        let tmp%32#0: bool = (< 2u tmp%30#0)
        let tmp%33#0: uint64 = (select tmp%30#0 2u tmp%32#0)
        let tmp%35#0: bytes = (box_extract 0x424f585f43 0u tmp%33#0)
        let is_out_of_bounds%1#0: bool = (>= 2u tmp%7#0)
        let bounded_index%1#0: uint64 = (select 2u tmp%7#0 is_out_of_bounds%1#0)
        let tmp%36#0: bytes = (substring3 c#0 0u bounded_index%1#0)
        let tmp%37#0: bool = (== tmp%35#0 tmp%36#0)
        (assert tmp%37#0)
        let tmp%38#0: bytes = (box_extract "box_d" 0u 1u)
        let extract%2#0: bytes = ((extract 0 1) tmp%0#0)
        let tmp%40#0: bool = (== tmp%38#0 extract%2#0)
        (assert tmp%40#0)
        let (tmp%41#0: uint64, tmp%42#0: bool) = (box_len "box_d")
        let tmp%43#0: uint64 = (- tmp%41#0 1u)
        let tmp%44#0: bytes = (box_extract "box_d" tmp%43#0 1u)
        let tmp%47#0: uint64 = (- tmp%10#0 1u)
        let extract%3#0: bytes = (extract3 tmp%0#0 tmp%47#0 1u)
        let tmp%48#0: bool = (== tmp%44#0 extract%3#0)
        (assert tmp%48#0)
        let (tmp%49#0: uint64, tmp%50#0: bool) = (box_len "box_d")
        let tmp%51#0: bool = (< 1u tmp%49#0)
        let tmp%52#0: uint64 = (select tmp%49#0 1u tmp%51#0)
        let tmp%53#0: uint64 = (- tmp%49#0 tmp%52#0)
        let tmp%55#0: bytes = (box_extract "box_d" 0u tmp%53#0)
        let is_out_of_bounds%2#0: bool = (>= 1u tmp%10#0)
        let bounded_offset%1#0: uint64 = (select 1u tmp%10#0 is_out_of_bounds%2#0)
        let bounded_index%2#0: uint64 = (- tmp%10#0 bounded_offset%1#0)
        let tmp%57#0: bytes = (substring3 tmp%0#0 0u bounded_index%2#0)
        let tmp%58#0: bool = (== tmp%55#0 tmp%57#0)
        (assert tmp%58#0)
        let (tmp%59#0: uint64, tmp%60#0: bool) = (box_len "box_d")
        let tmp%61#0: bool = (< 5u tmp%59#0)
        let tmp%62#0: uint64 = (select tmp%59#0 5u tmp%61#0)
        let tmp%64#0: bytes = (box_extract "box_d" 0u tmp%62#0)
        let is_out_of_bounds%3#0: bool = (>= 5u tmp%10#0)
        let bounded_index%3#0: uint64 = (select 5u tmp%10#0 is_out_of_bounds%3#0)
        let tmp%66#0: bytes = (substring3 tmp%0#0 0u bounded_index%3#0)
        let tmp%67#0: bool = (== tmp%64#0 tmp%66#0)
        (assert tmp%67#0)
        let (tmp%68#0: uint64, tmp%69#0: bool) = (box_len "box_d")
        let tmp%70#0: bool = (< 2u tmp%68#0)
        let tmp%71#0: uint64 = (select tmp%68#0 2u tmp%70#0)
        let tmp%73#0: bytes = (box_extract "box_d" 0u tmp%71#0)
        let is_out_of_bounds%4#0: bool = (>= 2u tmp%10#0)
        let bounded_index%4#0: uint64 = (select 2u tmp%10#0 is_out_of_bounds%4#0)
        let tmp%75#0: bytes = (substring3 tmp%0#0 0u bounded_index%4#0)
        let tmp%76#0: bool = (== tmp%73#0 tmp%75#0)
        (assert tmp%76#0)
        let (value%4#0: uint64, check%4#0: bool) = (box_len "box_large")
        let tmp%77#0: bool = (== value%4#0 6160u)
        (assert tmp%77#0)
        return 

subroutine examples.box_storage.contract.BoxContract.check_keys() -> void:
    block@0: // L85
        let tmp%0#0: bool = 1u
        let tmp%1#0: bool = 1u
        let tmp%2#0: bool = 1u
        let tmp%3#0: bool = 1u
        return 

subroutine examples.box_storage.contract.BoxContract.create_many_ints() -> void:
    block@0: // L92
        (box_create "many_ints" 4104u)
        return 

subroutine examples.box_storage.contract.BoxContract.set_many_ints(index: uint64, value: uint64) -> void:
    block@0: // L96
        let storage_value%0#0: bytes = box_read("many_ints")
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(value#0)
        let updated_array%0#0: Encoded(uint64[513]) = replace_value(storage_value%0#0, index#0, encoded_value%0#0)
        let box%element_offset%0#0: uint64 = (* index#0 8u)
        let box%offset%0#0: uint64 = (+ 0u box%element_offset%0#0)
        (box_replace "many_ints" box%offset%0#0 encoded_value%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.sum_many_ints() -> uint64:
    block@0: // L100
        let required_budget_with_buffer#0: uint64 = 10510u
        goto block@6
    block@6: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> 10510u tmp%1#0)
        goto tmp%2#0 ? block@7 : block@11
    block@7: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        ((itxn_field Fee) 0u)
        goto block@10
    block@10: // switch_case_next_L26
        itxn_submit
        goto block@6
    block@11: // after_while_L20
        let total#0: uint64 = 0u
        let storage_value%0#0: bytes = box_read("many_ints")
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L104
        let item_index_internal%0#1: uint64 = φ(item_index_internal%0#0 <- block@11, item_index_internal%0#2 <- block@2)
        let total#1: uint64 = φ(total#0 <- block@11, total#2 <- block@2)
        let continue_looping%0#0: bool = (< item_index_internal%0#1 513u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L105
        let box%element_offset%0#0: uint64 = (* item_index_internal%0#1 8u)
        let box%offset%0#0: uint64 = (+ 0u box%element_offset%0#0)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "many_ints" box%offset%0#0 8u)
        let array_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let val#0: uint64 = decode_bytes<uint64>(array_item%0#0)
        let total#2: uint64 = (+ total#1 val#0)
        let item_index_internal%0#2: uint64 = (+ item_index_internal%0#1 1u)
        goto block@1
    block@4: // after_for_L104
        return total#1

subroutine examples.box_storage.contract.BoxContract.delete_boxes() -> void:
    block@0: // L108
        (box_del "box_a")
        (box_del "b")
        (box_del 0x424f585f43)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "box_a")
        let maybe_value_converted%0#0: uint64 = (btoi maybe_value%0#0)
        let state_get%0#0: uint64 = (select 42u maybe_value_converted%0#0 maybe_exists%0#0)
        let tmp%0#0: bool = (== state_get%0#0 42u)
        (assert tmp%0#0)
        let tmp%1#0: Encoded(len+uint8[]) = bytes_encode<(len+uint8[])>(0x3432)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "b")
        let state_get%1#0: bytes = (select tmp%1#0 maybe_value%1#0 maybe_exists%1#0)
        let tmp%2#0: bytes = decode_bytes<bytes>(state_get%1#0)
        let tmp%3#0: bool = (== tmp%2#0 0x3432)
        (assert tmp%3#0)
        let tmp%4#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("42")
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get 0x424f585f43)
        let state_get%2#0: bytes = (select tmp%4#0 maybe_value%2#0 maybe_exists%2#0)
        let tmp%6#0: bool = (== state_get%2#0 tmp%4#0)
        (assert tmp%6#0)
        let (maybe_value%3#0: bytes, a_exists#0: bool) = (maybe_value%0#0, maybe_exists%0#0)
        let a#0: uint64 = (btoi maybe_value%3#0)
        let tmp%7#0: bool = (! a_exists#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (! a#0)
        (assert tmp%8#0)
        (box_del "box_large")
        return 

subroutine examples.box_storage.contract.BoxContract.indirect_extract_and_replace() -> void:
    block@0: // L121
        let large#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = box_read("box_large")
        let box%offset%0#0: uint64 = (+ 0u 4096u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "box_large" box%offset%0#0 8u)
        let tuple_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        let tmp%0#0: uint64 = (+ values%0#0 1u)
        let encoded_value%0#0: Encoded(uint64) = bytes_encode<uint64>(tmp%0#0)
        let large#1: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = replace_value(large#0, 4, encoded_value%0#0)
        let box%offset%1#0: uint64 = (+ 0u 4096u)
        (box_replace "box_large" box%offset%1#0 encoded_value%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.read_boxes() -> <uint64, bytes, Encoded(len+utf8[]), uint64>:
    block@0: // L127
        let storage_value%0#1: bytes = box_read("box_a")
        let maybe_value_converted%0#0: uint64 = (btoi storage_value%0#1)
        let tmp%0#1: uint64 = (+ maybe_value_converted%0#0 1u)
        let tmp%1#0: uint64 = (- tmp%0#1 1u)
        let storage_value%0#0: bytes = box_read("b")
        let tmp%2#0: bytes = decode_bytes<bytes>(storage_value%0#0)
        let storage_value%1#0: bytes = box_read(0x424f585f43)
        let storage_value%2#0: bytes = box_read("box_large")
        let box%offset%0#0: uint64 = (+ 0u 4096u)
        let box%box_extract%0#0: Encoded(uint64) = (box_extract "box_large" box%offset%0#0 8u)
        let tuple_item%0#0: Encoded(uint64) = box%box_extract%0#0
        let values%0#0: uint64 = decode_bytes<uint64>(tuple_item%0#0)
        return tmp%1#0 tmp%2#0 storage_value%1#0 values%0#0

subroutine examples.box_storage.contract.BoxContract.boxes_exist() -> <bool, bool, bool, bool>:
    block@0: // L136
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "box_a")
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "b")
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len 0x424f585f43)
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "box_large")
        return maybe_exists%0#0 maybe_exists%1#0 maybe_exists%2#0 maybe_exists%3#0

subroutine examples.box_storage.contract.BoxContract.slice_box() -> void:
    block@0: // L140
        (box_del "0")
        box_write("0", 0x54657374696e672074657374696e6720313233)
        let (tmp%0#0: uint64, tmp%1#0: bool) = (box_len "0")
        let tmp%2#0: bool = (< 0u tmp%0#0)
        let tmp%3#0: uint64 = (select tmp%0#0 0u tmp%0#0)
        let tmp%4#0: bool = (< 7u tmp%0#0)
        let tmp%5#0: uint64 = (select tmp%0#0 7u tmp%4#0)
        let tmp%6#0: uint64 = (- tmp%5#0 tmp%3#0)
        let tmp%7#0: bytes = (box_extract "0" tmp%3#0 tmp%6#0)
        let tmp%8#0: bool = (== tmp%7#0 0x54657374696e67)
        (assert tmp%8#0)
        let tmp%9#0: Encoded(len+utf8[]) = bytes_encode<(len+utf8[])>("Hello")
        (box_del 0x424f585f43)
        box_write(0x424f585f43, tmp%9#0)
        let (tmp%10#0: uint64, tmp%11#0: bool) = (box_len 0x424f585f43)
        let tmp%12#0: bool = (< 2u tmp%10#0)
        let tmp%13#0: uint64 = (select tmp%10#0 2u tmp%12#0)
        let tmp%14#0: bool = (< 10u tmp%10#0)
        let tmp%15#0: uint64 = (select tmp%10#0 10u tmp%14#0)
        let tmp%16#0: uint64 = (- tmp%15#0 tmp%13#0)
        let tmp%17#0: bytes = (box_extract 0x424f585f43 tmp%13#0 tmp%16#0)
        let tmp%18#0: bool = (== tmp%17#0 0x48656c6c6f)
        (assert tmp%18#0)
        return 

subroutine examples.box_storage.contract.BoxContract.arc4_box() -> void:
    block@0: // L149
        let encoded_array%0#0: Encoded(uint8[4]) = bytes_encode<uint8[4]>(0x00, 0x01, 0x02, 0x03)
        box_write(0x64, encoded_array%0#0)
        let storage_value%0#0: bytes = box_read(0x64)
        let array_item%0#0: Encoded(uint8) = extract_value(storage_value%0#0, 0u)
        let values%0#0: Encoded(uint8) = decode_bytes<Encoded(uint8)>(array_item%0#0)
        let tmp%0#0: bool = (b== values%0#0 0x00)
        (assert tmp%0#0)
        let storage_value%1#0: bytes = box_read(0x64)
        let array_item%1#0: Encoded(uint8) = extract_value(storage_value%1#0, 1u)
        let values%1#0: Encoded(uint8) = decode_bytes<Encoded(uint8)>(array_item%1#0)
        let tmp%1#0: bool = (b== values%1#0 0x01)
        (assert tmp%1#0)
        let storage_value%2#0: bytes = box_read(0x64)
        let array_item%2#0: Encoded(uint8) = extract_value(storage_value%2#0, 2u)
        let values%2#0: Encoded(uint8) = decode_bytes<Encoded(uint8)>(array_item%2#0)
        let tmp%2#0: bool = (b== values%2#0 0x02)
        (assert tmp%2#0)
        let storage_value%3#0: bytes = box_read(0x64)
        let array_item%3#0: Encoded(uint8) = extract_value(storage_value%3#0, 3u)
        let values%3#0: Encoded(uint8) = decode_bytes<Encoded(uint8)>(array_item%3#0)
        let tmp%3#0: bool = (b== values%3#0 0x03)
        (assert tmp%3#0)
        return 

subroutine examples.box_storage.contract.BoxContract.test_box_ref() -> void:
    block@0: // L159
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "blob")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0) // no data
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len 0x626c6f62)
        let tmp%1#0: bool = (! maybe_exists%1#0)
        (assert tmp%1#0) // no data
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len 0x626c6f62)
        let tmp%2#0: bool = (! maybe_exists%2#0)
        (assert tmp%2#0) // no data
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "blob")
        let tmp%3#0: bool = (! maybe_exists%3#0)
        (assert tmp%3#0) // no data
        let tmp%4#0: bool = (box_create "blob" 32u)
        (assert tmp%4#0)
        let (_%4#0: uint64, maybe_exists%4#0: bool) = (box_len "blob")
        let sender_bytes#0: bytes = (txn Sender)
        let app_address#0: bytes = (global CurrentApplicationAddress)
        (box_replace "blob" 0u sender_bytes#0)
        (box_resize "blob" 8000u)
        (box_splice "blob" 0u 0u app_address#0)
        (box_replace "blob" 64u 0x68656c6c6f)
        let tmp%7#0: uint64 = 5u
        let tmp%8#0: uint64 = 69u
        let prefix#0: bytes = (box_extract "blob" 0u 69u)
        let tmp%10#0: bytes = (concat app_address#0 sender_bytes#0)
        let tmp%11#0: bytes = (concat tmp%10#0 0x68656c6c6f)
        let tmp%12#0: bool = (== prefix#0 tmp%11#0)
        (assert tmp%12#0)
        let tmp%13#0: bool = (box_del "blob")
        (assert tmp%13#0)
        let tmp%14#0: bool = 1u
        let (value#0: bytes, exists#0: bool) = (box_get "blob")
        let tmp%15#0: bool = (! exists#0)
        (assert tmp%15#0)
        let tmp%16#0: bool = (== value#0 0x)
        (assert tmp%16#0)
        let (maybe_value%1#0: bytes, maybe_exists%6#0: bool) = (value#0, exists#0)
        let state_get%0#0: bytes = (select sender_bytes#0 maybe_value%1#0 maybe_exists%6#0)
        let tmp%17#0: bool = (== state_get%0#0 sender_bytes#0)
        (assert tmp%17#0)
        let tmp%18#0: bytes = (concat sender_bytes#0 app_address#0)
        (box_put "blob" tmp%18#0)
        let (_%5#0: uint64, maybe_exists%7#0: bool) = (box_len "blob")
        let (value%0#0: uint64, check%0#0: bool) = (box_len "blob")
        let tmp%19#0: bool = (== value%0#0 64u)
        (assert tmp%19#0)
        let (value%0#1: uint64, check%0#1: bool) = (box_len "blob")
        let tmp%21#0: bool = (== value%0#1 64u)
        (assert tmp%21#0)
        (box_create "box_ref" 32u)
        let (_%6#0: uint64, maybe_exists%8#0: bool) = (box_len "box_ref")
        (box_del "box_ref")
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_test() -> void:
    block@0: // L207
        let box_0#0: bytes = (itob 0u)
        (box_del box_0#0)
        box_write(box_0#0, "Hmmmmm")
        let (value%0#0: uint64, check%0#0: bool) = (box_len box_0#0)
        (assert check%0#0) // check self.box_map entry exists
        let tmp%0#0: uint64 = 6u
        let tmp%1#0: bool = (== value%0#0 6u)
        (assert tmp%1#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len box_0#0)
        let (value%2#0: uint64, check%2#0: bool) = (box_len box_0#0)
        let tmp%2#0: bool = (== value%1#0 value%2#0)
        (assert tmp%2#0)
        let (value%3#0: uint64, check%3#0: bool) = (box_len box_0#0)
        let tmp%3#0: uint64 = 6u
        let tmp%4#0: bool = (== value%3#0 6u)
        (assert tmp%4#0)
        let encoded_value%5#0: bytes[8] = (itob 1u)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get encoded_value%5#0)
        let state_get%0#0: bytes = (select "default" maybe_value%0#0 maybe_exists%0#0)
        let tmp%5#0: bool = (== state_get%0#0 "default")
        (assert tmp%5#0)
        let (value#1: uint64, exists#0: bool) = (box_len encoded_value%5#0)
        let tmp%6#0: bool = (! exists#0)
        (assert tmp%6#0)
        let (_%0#0: uint64, maybe_exists%2#0: bool) = (box_len box_0#0)
        let tmp%7#0: bool = 1u
        (box_del encoded_value%5#0)
        box_write(encoded_value%5#0, "hello")
        let materialized_values%0#0: uint64 = 1u
        let storage_value%0#0: bytes = box_read(encoded_value%5#0)
        let tmp%9#0: bool = (== storage_value%0#0 "hello")
        (assert tmp%9#0)
        (box_del encoded_value%5#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_set(key: uint64, value: string) -> void:
    block@0: // L231
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = encoded_value%0#0
        (box_del encoded_value%0#0)
        box_write(encoded_value%0#0, value#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_get(key: uint64) -> string:
    block@0: // L235
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = encoded_value%0#0
        let storage_value%0#0: bytes = box_read(encoded_value%0#0)
        return storage_value%0#0

subroutine examples.box_storage.contract.BoxContract.box_map_del(key: uint64) -> void:
    block@0: // L239
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = encoded_value%0#0
        (box_del encoded_value%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_exists(key: uint64) -> bool:
    block@0: // L243
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = encoded_value%0#0
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len encoded_value%0#0)
        return maybe_exists%0#0