{
    "name": "BoxContract",
    "structs": {
        "DynamicArrayInAStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "arr",
                "type": "uint64[]"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "arr2",
                "type": "uint64[]"
            }
        ],
        "InnerStruct": [
            {
                "name": "c",
                "type": "uint64"
            },
            {
                "name": "arr_arr",
                "type": "uint64[][]"
            },
            {
                "name": "d",
                "type": "uint64"
            }
        ],
        "LargeStruct": [
            {
                "name": "a",
                "type": "byte[1024]"
            },
            {
                "name": "b",
                "type": "byte[1024]"
            },
            {
                "name": "c",
                "type": "byte[1024]"
            },
            {
                "name": "d",
                "type": "byte[1024]"
            },
            {
                "name": "e",
                "type": "uint64"
            },
            {
                "name": "f",
                "type": "byte[1024]"
            },
            {
                "name": "g",
                "type": "byte[1024]"
            },
            {
                "name": "h",
                "type": "uint64"
            }
        ],
        "NestedStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "inner",
                "type": "InnerStruct"
            },
            {
                "name": "woah",
                "type": "(uint64,uint64[][],uint64)[]"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "set_boxes",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "string",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_keys",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_many_ints",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_many_ints",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_many_ints",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_boxes",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "indirect_extract_and_replace",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_boxes",
            "args": [],
            "returns": {
                "type": "(uint64,byte[],string,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxes_exist",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_dynamic_arr_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_dynamic_arr_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "append_dynamic_arr_struct",
            "args": [
                {
                    "type": "uint64",
                    "name": "times"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pop_dynamic_arr_struct",
            "args": [
                {
                    "type": "uint64",
                    "name": "times"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_nested_struct",
            "args": [
                {
                    "type": "(uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64)",
                    "struct": "NestedStruct",
                    "name": "struct"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_write",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_read",
            "args": [
                {
                    "type": "uint64",
                    "name": "i1"
                },
                {
                    "type": "uint64",
                    "name": "i2"
                },
                {
                    "type": "uint64",
                    "name": "i3"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_dynamic_arr_struct",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_bools",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_bool",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "bool",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_bools",
            "args": [
                {
                    "type": "uint64",
                    "name": "stop_at_total"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_dynamic_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_dynamic_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "append_dynamic_box",
            "args": [
                {
                    "type": "uint64",
                    "name": "times"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pop_dynamic_box",
            "args": [
                {
                    "type": "uint64",
                    "name": "times"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_dynamic_box",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "write_dynamic_box",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "write_dynamic_arr_struct",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "slice_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_box_ref",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_set",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                },
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_get",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_del",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_exists",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "box_a": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Ym94X2E="
                },
                "box_b": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "Yg=="
                },
                "box_c": {
                    "keyType": "AVMBytes",
                    "valueType": "string",
                    "key": "Qk9YX0M="
                },
                "box_d": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94X2Q="
                },
                "box_ref": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94X3JlZg=="
                },
                "box_large": {
                    "keyType": "AVMString",
                    "valueType": "LargeStruct",
                    "key": "Ym94X2xhcmdl"
                },
                "many_ints": {
                    "keyType": "AVMString",
                    "valueType": "uint64[513]",
                    "key": "bWFueV9pbnRz"
                },
                "dynamic_box": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "ZHluYW1pY19ib3g="
                },
                "dynamic_arr_struct": {
                    "keyType": "AVMString",
                    "valueType": "DynamicArrayInAStruct",
                    "key": "ZHluYW1pY19hcnJfc3RydWN0"
                },
                "too_many_bools": {
                    "keyType": "AVMString",
                    "valueType": "bool[33000]",
                    "key": "dG9vX21hbnlfYm9vbHM="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map": {
                    "keyType": "uint64",
                    "valueType": "AVMString",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        412,
                        440,
                        456,
                        485,
                        507,
                        519,
                        531,
                        550,
                        562,
                        582,
                        602,
                        620,
                        642,
                        664,
                        676,
                        688,
                        710,
                        731,
                        747,
                        765,
                        795,
                        815,
                        830,
                        852,
                        874,
                        886,
                        898,
                        935,
                        988,
                        1000,
                        1012,
                        1030,
                        1050,
                        1066,
                        1075
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1102
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        415,
                        443,
                        459,
                        488,
                        510,
                        522,
                        534,
                        553,
                        565,
                        585,
                        605,
                        623,
                        645,
                        667,
                        679,
                        691,
                        713,
                        734,
                        750,
                        768,
                        798,
                        818,
                        833,
                        855,
                        877,
                        889,
                        901,
                        938,
                        991,
                        1003,
                        1015,
                        1033,
                        1053,
                        1069,
                        1078
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1676
                    ],
                    "errorMessage": "check Box exists"
                },
                {
                    "pc": [
                        1180
                    ],
                    "errorMessage": "check self.box_a exists"
                },
                {
                    "pc": [
                        1685
                    ],
                    "errorMessage": "check self.box_b exists"
                },
                {
                    "pc": [
                        1208,
                        1691
                    ],
                    "errorMessage": "check self.box_c exists"
                },
                {
                    "pc": [
                        3204
                    ],
                    "errorMessage": "check self.box_map entry exists"
                },
                {
                    "pc": [
                        1549
                    ],
                    "errorMessage": "check self.many_ints exists"
                },
                {
                    "pc": [
                        2610
                    ],
                    "errorMessage": "check self.too_many_bools exists"
                },
                {
                    "pc": [
                        2442
                    ],
                    "errorMessage": "expected 1"
                },
                {
                    "pc": [
                        1760,
                        2452
                    ],
                    "errorMessage": "expected 2"
                },
                {
                    "pc": [
                        1907
                    ],
                    "errorMessage": "expected arr length to be correct"
                },
                {
                    "pc": [
                        1920
                    ],
                    "errorMessage": "expected arr2 length to be correct"
                },
                {
                    "pc": [
                        2588
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        2097,
                        2124,
                        2191,
                        2216,
                        2238,
                        2276,
                        2303,
                        2349,
                        2374,
                        2399,
                        2481,
                        2888
                    ],
                    "errorMessage": "index out of bounds"
                },
                {
                    "pc": [
                        3032
                    ],
                    "errorMessage": "no data"
                },
                {
                    "pc": [
                        1863,
                        1887,
                        1969,
                        1985,
                        2755,
                        2790
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        2030
                    ],
                    "errorMessage": "struct.a is truthy"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}