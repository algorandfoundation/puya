{
    "name": "BoxContract",
    "structs": {},
    "methods": [
        {
            "name": "set_boxes",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "string",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_keys",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_boxes",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_boxes",
            "args": [],
            "returns": {
                "type": "(uint64,byte[],string)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxes_exist",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "slice_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_box_ref",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_set",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                },
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_get",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_del",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_exists",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "box_a": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Ym94X2E="
                },
                "box_b": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "Yg=="
                },
                "box_c": {
                    "keyType": "AVMBytes",
                    "valueType": "string",
                    "key": "Qk9YX0M="
                },
                "box_d": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94X2Q="
                },
                "box_ref": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94X3JlZg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map": {
                    "keyType": "AVMUint64",
                    "valueType": "AVMString",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1240
                    ],
                    "errorMessage": "Blob exists"
                },
                {
                    "pc": [
                        187,
                        209,
                        218,
                        230,
                        281,
                        331,
                        343,
                        355,
                        367,
                        379,
                        401,
                        430,
                        446
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        478
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        190,
                        212,
                        221,
                        233,
                        284,
                        334,
                        346,
                        358,
                        370,
                        382,
                        404,
                        433,
                        449
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        924,
                        1087,
                        1098,
                        1110,
                        1122
                    ],
                    "errorMessage": "check Box exists"
                },
                {
                    "pc": [
                        1370
                    ],
                    "errorMessage": "check BoxMap entry exists"
                },
                {
                    "pc": [
                        1243,
                        1279
                    ],
                    "errorMessage": "check BoxRef exists"
                },
                {
                    "pc": [
                        540,
                        550
                    ],
                    "errorMessage": "check self.box_a exists"
                },
                {
                    "pc": [
                        523,
                        527,
                        558,
                        907
                    ],
                    "errorMessage": "check self.box_b exists"
                },
                {
                    "pc": [
                        566,
                        913
                    ],
                    "errorMessage": "check self.box_c exists"
                },
                {
                    "pc": [
                        577
                    ],
                    "errorMessage": "check self.box_d exists"
                },
                {
                    "pc": [
                        1301,
                        1308,
                        1392
                    ],
                    "errorMessage": "check self.box_map entry exists"
                },
                {
                    "pc": [
                        534
                    ],
                    "errorMessage": "direct reference should match copy"
                },
                {
                    "pc": [
                        1168,
                        1267
                    ],
                    "errorMessage": "has data"
                },
                {
                    "pc": [
                        1140,
                        1146,
                        1152,
                        1158
                    ],
                    "errorMessage": "no data"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpleGFtcGxlcy5ib3hfc3RvcmFnZS5jb250cmFjdC5Cb3hDb250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiAEAQACBSYNBUJPWF9DBGJsb2IFYm94X2QFYm94X2EBYgEAAWQEFR98dQEwBWhlbGxvBAACNDIHYm94X3JlZgdkZWZhdWx0iAABQ4oAATEbQQGCgg0EfTcpbgQzMl09BNVmxjIE+9qboATlo+1SBATvSXEEI+yzLATu91gWBLUykToEwp8WaQSciIwJBOb2hQYEjuLDZDYaAI4NAAIAGAAhAC0AYACSAJ4AqgC2AMIA2AD1AQUjiTEZFEQxGEQ2GgEXNhoCNhoDiAEXIokxGRREMRhEIokxGRREMRhEiAJdIokxGRREMRhEiAKSTwIWSwIVFlcGAk8DUEyAAgAMUEsBFYEMCBZXBgJQTFBMUCcHTFCwIokxGRREMRhEiAKAJwUjTwRUJwUjTwRUJwUjTwRUTCNTTwIiTwJUTCNTJExUJwdMULAiiTEZFEQxGESIAl8iiTEZFEQxGESIAtIiiTEZFEQxGESIAwIiiTEZFEQxGESIA4siiTEZFEQxGEQ2GgEXNhoCVwIAiAPQIokxGRREMRhENhoBF4gDzUkVFlcGAkxQJwdMULAiiTEZFEQxGEQ2GgEXiAO5IokxGRREMRhENhoBF4gDsicFI08CVCcHTFCwIokxGUAABjEYFEQiiSOJigMAi/0WK0y/JwS8SCcEi/6/KLxIKIv/v4v+VwIAKrxIKksBvycEvkQnBL5EI1lMI1kSRCu+TBdMRIEDCBYrTL8rvUSBCBJEJwS9RIv+FRJEKL1Ei/8VTEsBEkQqvURLAhVMSwESRCgjIrqL/1cAARJEKL1IIgkoTCK6SwIiCYv/TCJYEkQovUgiSwEMSwEiTwJNCSgjTwK6IksDDyJLBE8CTUsDTAmL/yNPAlISRCi9SCRLAQwkTE0oI08CuiRLAw8kTwRPAk2L/yNPAlISRCojIrpLAlcAARJEKr1IIgkqTCK6SwEiCUsDTCJYEkQqvUgiSwEMSwEiTwJNCSojTwK6IksCDyJLA08CTUsCTAlLAyNPAlISRCq9SCVLAQwlTE0qI08CuiVLAg8lSwNPAk1LAyNPAlISRCq9SCRLAQwkTE0qI08CuiRLAg8kTwNPAk1PAiNPAlISRImKAAArvEgnBLxIKLxIK75MF4EqTE8CTYEqEkQnBL4nCk4CTVcCAIACNDISRCi+JwpOAk0nChJEK75MF0wURBREiYoAAyuIAA0iCScEvkRXAgAovkSJigEBi/++TBdMRCIIiYoAAyu9RQEnBL1FASi9RQGJigAAJwi8SCcIgBNUZXN0aW5nIHRlc3RpbmcgMTIzvycIvUhJI0sCTYEHSwIMTwKBB08CTUsBCScITgK6gAdUZXN0aW5nEkQovEgogAcABUhlbGxvvyi9SCRLAQxLASRPAk2BCksCDE8CgQpPAk1LAQkoTgK6gAVIZWxsbxJEiYoAACcGgAQAAQIDvycGvkRXAAEnBahEJwa+RFcBAYABAahEJwa+RFcCAYABAqhEJwa+RFcDAYABA6hEiYoAACm9RQEURCm9RQEURCm9RQEURCm9RQEURCmBILlEKb1FAUQxADIKKSNLA7spgcA+0ykjSUsD0imBQCcJuykjgUW6SwFLA1AnCVASRCm8RCm+FESAABJEKb5LA04CTUsCEkRQKUy/Kb1FAUQpvUSBQBJEKYgAFYFAEkQnC4EguUgnC71FAUQnC7xIiYoBAYv/vUSJigAAIxZJvEhJgAZIbW1tbW2/Sb1EgQYSREm9RIEGEkQiFkm+JwxOAk0nDBJESb5FARRETL1FAURJvEhJJwm/gAAjiAAHJwkSRLxIiYoCAYv/IggWi/5MUL5EiYoCAIv+Fkm8SIv/v4mKAQGL/xa+RImKAQCL/xa8SImKAQGL/xa9RQGJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}