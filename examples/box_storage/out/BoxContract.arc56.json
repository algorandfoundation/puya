{
    "name": "BoxContract",
    "structs": {
        "DynamicArrayInAStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "arr",
                "type": "uint64[]"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "arr2",
                "type": "uint64[]"
            }
        ],
        "InnerStruct": [
            {
                "name": "c",
                "type": "uint64"
            },
            {
                "name": "arr_arr",
                "type": "uint64[][]"
            },
            {
                "name": "d",
                "type": "uint64"
            }
        ],
        "LargeStruct": [
            {
                "name": "a",
                "type": "byte[1024]"
            },
            {
                "name": "b",
                "type": "byte[1024]"
            },
            {
                "name": "c",
                "type": "byte[1024]"
            },
            {
                "name": "d",
                "type": "byte[1024]"
            },
            {
                "name": "e",
                "type": "uint64"
            },
            {
                "name": "f",
                "type": "byte[1024]"
            },
            {
                "name": "g",
                "type": "byte[1024]"
            },
            {
                "name": "h",
                "type": "uint64"
            }
        ],
        "NestedStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "inner",
                "type": "InnerStruct"
            },
            {
                "name": "woah",
                "type": "(uint64,uint64[][],uint64)[]"
            },
            {
                "name": "b",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "set_boxes",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "string",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_keys",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_many_ints",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_many_ints",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_many_ints",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_boxes",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "indirect_extract_and_replace",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_boxes",
            "args": [],
            "returns": {
                "type": "(uint64,byte[],string,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxes_exist",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_dynamic_arr_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_dynamic_arr_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "append_dynamic_arr_struct",
            "args": [
                {
                    "type": "uint64",
                    "name": "times"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pop_dynamic_arr_struct",
            "args": [
                {
                    "type": "uint64",
                    "name": "times"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_nested_struct",
            "args": [
                {
                    "type": "(uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64)",
                    "struct": "NestedStruct",
                    "name": "struct"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_write",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_read",
            "args": [
                {
                    "type": "uint64",
                    "name": "i1"
                },
                {
                    "type": "uint64",
                    "name": "i2"
                },
                {
                    "type": "uint64",
                    "name": "i3"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_dynamic_arr_struct",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_bools",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_bool",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "bool",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_bools",
            "args": [
                {
                    "type": "uint64",
                    "name": "stop_at_total"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_dynamic_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_dynamic_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "append_dynamic_box",
            "args": [
                {
                    "type": "uint64",
                    "name": "times"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pop_dynamic_box",
            "args": [
                {
                    "type": "uint64",
                    "name": "times"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_dynamic_box",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "write_dynamic_box",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "write_dynamic_arr_struct",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "slice_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_box_ref",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_set",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                },
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_get",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_del",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_exists",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "box_a": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Ym94X2E="
                },
                "box_b": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "Yg=="
                },
                "box_c": {
                    "keyType": "AVMBytes",
                    "valueType": "string",
                    "key": "Qk9YX0M="
                },
                "box_d": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94X2Q="
                },
                "box_ref": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94X3JlZg=="
                },
                "box_large": {
                    "keyType": "AVMString",
                    "valueType": "LargeStruct",
                    "key": "Ym94X2xhcmdl"
                },
                "many_ints": {
                    "keyType": "AVMString",
                    "valueType": "uint64[513]",
                    "key": "bWFueV9pbnRz"
                },
                "dynamic_box": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "ZHluYW1pY19ib3g="
                },
                "dynamic_arr_struct": {
                    "keyType": "AVMString",
                    "valueType": "DynamicArrayInAStruct",
                    "key": "ZHluYW1pY19hcnJfc3RydWN0"
                },
                "too_many_bools": {
                    "keyType": "AVMString",
                    "valueType": "bool[33000]",
                    "key": "dG9vX21hbnlfYm9vbHM="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map": {
                    "keyType": "uint64",
                    "valueType": "AVMString",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        160
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        460
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        1044
                    ],
                    "errorMessage": "check Box exists"
                },
                {
                    "pc": [
                        543
                    ],
                    "errorMessage": "check self.box_a exists"
                },
                {
                    "pc": [
                        1053
                    ],
                    "errorMessage": "check self.box_b exists"
                },
                {
                    "pc": [
                        571,
                        1059
                    ],
                    "errorMessage": "check self.box_c exists"
                },
                {
                    "pc": [
                        2717
                    ],
                    "errorMessage": "check self.box_map entry exists"
                },
                {
                    "pc": [
                        911
                    ],
                    "errorMessage": "check self.many_ints exists"
                },
                {
                    "pc": [
                        2090
                    ],
                    "errorMessage": "check self.too_many_bools exists"
                },
                {
                    "pc": [
                        1910
                    ],
                    "errorMessage": "expected 1"
                },
                {
                    "pc": [
                        1202,
                        1920
                    ],
                    "errorMessage": "expected 2"
                },
                {
                    "pc": [
                        1348
                    ],
                    "errorMessage": "expected arr length to be correct"
                },
                {
                    "pc": [
                        1361
                    ],
                    "errorMessage": "expected arr2 length to be correct"
                },
                {
                    "pc": [
                        2066
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        1551,
                        1578,
                        1645,
                        1670,
                        1692,
                        1740,
                        1767,
                        1813,
                        1838,
                        1863,
                        1948,
                        2393
                    ],
                    "errorMessage": "index out of bounds"
                },
                {
                    "pc": [
                        2538
                    ],
                    "errorMessage": "no data"
                },
                {
                    "pc": [
                        1304,
                        1328,
                        1416,
                        1432,
                        2242,
                        2282
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        1482
                    ],
                    "errorMessage": "struct.a is truthy"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}