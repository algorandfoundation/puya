{
    "name": "BoxContract",
    "structs": {
        "DynamicArrayInAStruct": [
            {
                "name": "a",
                "type": "uint64"
            },
            {
                "name": "arr",
                "type": "uint64[]"
            },
            {
                "name": "b",
                "type": "uint64"
            },
            {
                "name": "arr2",
                "type": "uint64[]"
            }
        ],
        "LargeStruct": [
            {
                "name": "a",
                "type": "byte[1024]"
            },
            {
                "name": "b",
                "type": "byte[1024]"
            },
            {
                "name": "c",
                "type": "byte[1024]"
            },
            {
                "name": "d",
                "type": "byte[1024]"
            },
            {
                "name": "e",
                "type": "uint64"
            },
            {
                "name": "f",
                "type": "byte[1024]"
            },
            {
                "name": "g",
                "type": "byte[1024]"
            },
            {
                "name": "h",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "set_boxes",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "string",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_keys",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_many_ints",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_many_ints",
            "args": [
                {
                    "type": "uint64",
                    "name": "index"
                },
                {
                    "type": "uint64",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_many_ints",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_boxes",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "indirect_extract_and_replace",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_boxes",
            "args": [],
            "returns": {
                "type": "(uint64,byte[],string,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxes_exist",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_dynamic_arr_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_dynamic_arr_struct",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "append_dynamic_arr_struct",
            "args": [
                {
                    "type": "uint64",
                    "name": "times"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pop_dynamic_arr_struct",
            "args": [
                {
                    "type": "uint64",
                    "name": "times"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "nested_read",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_dynamic_arr_struct",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_dynamic_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_dynamic_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "append_dynamic_box",
            "args": [
                {
                    "type": "uint64",
                    "name": "times"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pop_dynamic_box",
            "args": [
                {
                    "type": "uint64",
                    "name": "times"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sum_dynamic_box",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "slice_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_box_ref",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_set",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                },
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_get",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_del",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_exists",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "box_a": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Ym94X2E="
                },
                "box_b": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "Yg=="
                },
                "box_c": {
                    "keyType": "AVMBytes",
                    "valueType": "string",
                    "key": "Qk9YX0M="
                },
                "box_d": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94X2Q="
                },
                "box_ref": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94X3JlZg=="
                },
                "box_large": {
                    "keyType": "AVMString",
                    "valueType": "LargeStruct",
                    "key": "Ym94X2xhcmdl"
                },
                "many_ints": {
                    "keyType": "AVMString",
                    "valueType": "uint64[513]",
                    "key": "bWFueV9pbnRz"
                },
                "dynamic_box": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "ZHluYW1pY19ib3g="
                },
                "dynamic_arr_struct": {
                    "keyType": "AVMString",
                    "valueType": "DynamicArrayInAStruct",
                    "key": "ZHluYW1pY19hcnJfc3RydWN0"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map": {
                    "keyType": "uint64",
                    "valueType": "AVMString",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        345,
                        373,
                        389,
                        418,
                        440,
                        452,
                        464,
                        476,
                        488,
                        506,
                        528,
                        550,
                        562,
                        574,
                        592,
                        610,
                        632,
                        654,
                        666,
                        678,
                        715,
                        768,
                        780,
                        792,
                        810,
                        830,
                        842,
                        851
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        878
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        348,
                        376,
                        392,
                        421,
                        443,
                        455,
                        467,
                        479,
                        491,
                        509,
                        531,
                        553,
                        565,
                        577,
                        595,
                        613,
                        635,
                        657,
                        669,
                        681,
                        718,
                        771,
                        783,
                        795,
                        813,
                        833,
                        845,
                        854
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1460
                    ],
                    "errorMessage": "check Box exists"
                },
                {
                    "pc": [
                        956
                    ],
                    "errorMessage": "check self.box_a exists"
                },
                {
                    "pc": [
                        1469
                    ],
                    "errorMessage": "check self.box_b exists"
                },
                {
                    "pc": [
                        984,
                        1475
                    ],
                    "errorMessage": "check self.box_c exists"
                },
                {
                    "pc": [
                        2569
                    ],
                    "errorMessage": "check self.box_map entry exists"
                },
                {
                    "pc": [
                        1333
                    ],
                    "errorMessage": "check self.many_ints exists"
                },
                {
                    "pc": [
                        1952
                    ],
                    "errorMessage": "expected 1"
                },
                {
                    "pc": [
                        1548,
                        1962
                    ],
                    "errorMessage": "expected 2"
                },
                {
                    "pc": [
                        1695
                    ],
                    "errorMessage": "expected arr length to be correct"
                },
                {
                    "pc": [
                        1708
                    ],
                    "errorMessage": "expected arr2 length to be correct"
                },
                {
                    "pc": [
                        1828,
                        1844,
                        1878,
                        1898,
                        1914,
                        1991
                    ],
                    "errorMessage": "index out of bounds"
                },
                {
                    "pc": [
                        2397
                    ],
                    "errorMessage": "no data"
                },
                {
                    "pc": [
                        1651,
                        1675,
                        1757,
                        1773,
                        2156,
                        2191
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAQIACIAgJhISZHluYW1pY19hcnJfc3RydWN0BUJPWF9DA2JveAtkeW5hbWljX2JveAQVH3x1BGJsb2IJYm94X2xhcmdlBWJveF9hBWJveF9kAWIJbWFueV9pbnRzATAEAAI0MgVoZWxsbwIAFAMGgQEHYm94X3JlZgdkZWZhdWx0MRtBAt2CHAR9NyluBDMyXT0EAZlAjQR3IFnKBAEmPfYE1WbGMgT6vLiFBKYXSBIE8T3ZNwRatg8uBPB6AGQEePmvPwRcu53MBBuroYEEDSK0QQRBQnzRBCoUH2wEfoQ3RAQlYAtXBCnqWV0EBO9JcQQj7LMsBO73WBYEtTKROgTCnxZpBJyIjAkE5vaFBgSO4sNkNhoAjhwB/AHzAecB0wHBAbUBqQF0AU8BQwE3ASEBCwD5AOcA2wDPALkAowCRAIUAeQBtAGEASwAuAB4AAiRDMRkURDEYRDYaAReICLCAAQAkTwJUJwRMULAiQzEZFEQxGEQ2GgEXiAiLIkMxGRREMRhENhoBF4gIckkVFlcGAkxQJwRMULAiQzEZFEQxGEQ2GgEXNhoCVwIAiAhCIkMxGRREMRhEiAgEIkMxGRREMRhEiAeMIkMxGRREMRhEiAd1IkMxGRREMRhEiAbtIkMxGRREMRhEiAa2FicETFCwIkMxGRREMRhENhoBF4gGeBYnBExQsCJDMRkURDEYRDYaAReIBhAWJwRMULAiQzEZFEQxGESIBfoiQzEZFEQxGESIBeQiQzEZFEQxGESIBU0WJwRMULAiQzEZFEQxGESIBLwWJwRMULAiQzEZFEQxGEQ2GgEXiARDFicETFCwIkMxGRREMRhENhoBF4gDfhYnBExQsCJDMRkURDEYRIgDaCJDMRkURDEYRIgDPyJDMRkURDEYRIgDH4ABACRPBVQiTwRUI08DVIEDTwJUJwRMULAiQzEZFEQxGESIAt9PAxZLAxUWVwYCTwRQTCcOUEsBFYEUCBZXBgJQTwIWUExQTFAnBExQsCJDMRkURDEYRIgCmCJDMRkURDEYRIgCSyJDMRkURDEYRIgB5xYnBExQsCJDMRkURDEYRDYaARc2GgIXiAG8IkMxGRREMRhEiAGoIkMxGRREMRhEIkMxGRREMRhENhoBFzYaAjYaA4gADSJDMRlA/ekxGBREIkOKAwCL/RYnB0y/Jwm8SCcJi/6/KbxIKYv/v4v+VwIAJwi8SCcISwG/JwaBkDC5SIEqFicGIQRPArsnBiEEgAgAAAAAAAAAKrsnB75EF4EDCBYnB0y/Jwe9SCUSRCcJvUiL/hUSRCm9RIv/FUoSRCcIvUhLAxVKEkQpJCK6i/9XAAESREsDIgkpTCK6SwMiCYv/TCJYEkQiSwQMSwQiTwJNSwRMCSkkTwK6IksEDyJLBU8CTUsETAmL/yRPAlISRCNLBAxPBCNPAk0pJE8CuiNLBA8jTwVPAk2L/yRPAlISRCcIJCK6i/5XAgESREsBIgknCEwiuksBIglLBEwiWBJEIksCDEsCIk8CTUsCTAknCCRPAroiSwIPIksDTwJNSwJMCUsEJE8CUhJEgQVLAgxLAoEFTwJNJwgkTwK6gQVLAg+BBUsDTwJNSwQkTwJSEkQjSwIMTwIjTwJNJwgkTwK6I0sCDyNPA08CTU8CJE8CUhJEJwa9SIGQMBJEiScKgYgguUiJigIAi/8Wi/4lCycKTE8Cu4mKAAGAAEmBjlIyDA1BABixgQayEIEFshknD7IeJw+yHySyAbNC/98kjAEnCr1FAUQkjACLAIGBBAxBABeLAEklCycKTCW6F4sBCIwBIgiMAEL/4IsBjACJJwe8SCcJvEgpvEgnB75MF4EqSwFLA02BKhJEJwm+JwxOAk1XAgCAAjQyEkQpvicMTgJNJwwSREwURBREJwa8SIknBiEEJboXIggWJwYhBE8Cu4knB75EFyIIIgknCb5EVwIAKb5EJwYhBCW6F4knB71FAScJvUUBKb1FAScGvUUBiTEbSSMLTBYnDlBMFlCABgAWAAAAAFAovEgoTL+JKLxIiYoBASiBCiW6FyMSRCiBFCO6F0kogRIjuhcoTCO6F0sBi/8IJQuBFghMJQsjCAgoTNMlC4EWCIv/JQuvKE8CJE8D0iSLAYv/DEEAHosBSRaLAElOAiULgRYIKExPArsiCIwAIgiMAUL/2osASRZJk4EQDkRXBgIogRRPArtJJQuBGAgjCRZJk4EQDkRXBgIogRJPArsogRQjuhdJTwISRCiBEiO6FyhMI7oXFESMAImKAQEogRQjuheL/wkogRIjuhcoTCO6F0sBJQtJgRYITIEYCCMJTwMWSZOBEA5EVwYCKIEUTwK7FkmTgRAORFcGAiiBEk8Cu4v/JQsoSwJPAoAA0kwlCyMICChM0yiBFCO6F4kqJCW6FyqBDCW6FyqBJiO6F0QqgSgjuheBJggqSwEjuhdEIwgqTCW6FyqBFCW6FyqBHiW6FyqBCiO6FypLASO6FyINREmBBAgqTCO6FwiBEggqSwEjuhdESSMIKkwjuhcIKksBI7oXRCMIKkwluhdPBU8FCE8ECE8DCE8CCAiJigABgABJKCQluhdJIhJEKIEKJboXSSMSRAgogRQjuhckiwSLAwxBACQogRQjuheLBElPAgxESSULgRYIKEwluheLAgiMAiIIjARC/9QogRIjuhcoTCO6F4wAJIwBiwGLAAxBACEogRIjuheLAUlOAiULIwgIKEwluheLAgiMAiIIjAFC/9eLAowAiSu8SCuAAgAAv4krvEiJigEBKyQjuhdJi/8IJQsjCCtM0ySLAYv/DEEAHYsBSRaLAElOAiULIwgrTE8CuyIIjAAiCIwBQv/biwAWSZOBEA5EVwYCKyRPArsrJCO6F4wAiYoBASskI7oXi/8JSRZJk4EQDkRXBgIrJE8CuyULIwgrTNMrJCO6F4mKAAEkKyQjuhckiwKLAQxBABiLAkklCyMIK0wluheLAAiMACIIjAJC/+CJJwu8SCcLgBNUZXN0aW5nIHRlc3RpbmcgMTIzvycLvUhJJEsCTYEHSwIMTwKBB08CTUsBCScLTgK6gAdUZXN0aW5nEkQpvEgpgAcABUhlbGxvvym9SCNLAQxLASNPAk2BCksCDE8CgQpPAk1LAQkpTgK6gAVIZWxsbxJEiYICAWQEAAECA7+JJwW9RQEURCcFgSC5RDEAMgonBSRLA7snBYHAPtMnBSRJSwPSJwWBQCcNuycFJIFFuksBSwNQJw1QEkQnBbxEJwW+SRRESwGAABJESwNOAk1LAhJEUCcFTL8nBb1IgUASRCcQgSC5SCcQvEiJJBZJvEhJgAZIbW1tbW2/vUiBBhJEIhZJvicRTgJNJxESREm9RQEUREm8SEknDb+8SImKAgCL/hZJvEiL/7+JigEBi/8WvkSJigEAi/8WvEiJigEBi/8WvUUBiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}