{
    "name": "BoxContract",
    "structs": {},
    "methods": [
        {
            "name": "set_boxes",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "string",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_keys",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_boxes",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "read_boxes",
            "args": [],
            "returns": {
                "type": "(uint64,byte[],string)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "boxes_exist",
            "args": [],
            "returns": {
                "type": "(bool,bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "slice_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "arc4_box",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_box_ref",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_test",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_set",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                },
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_get",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_del",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "box_map_exists",
            "args": [
                {
                    "type": "uint64",
                    "name": "key"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "box_a": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Ym94X2E="
                },
                "box_b": {
                    "keyType": "AVMString",
                    "valueType": "byte[]",
                    "key": "Yg=="
                },
                "box_c": {
                    "keyType": "AVMBytes",
                    "valueType": "string",
                    "key": "Qk9YX0M="
                },
                "box_d": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94X2Q="
                },
                "box_ref": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Ym94X3JlZg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "box_map": {
                    "keyType": "AVMUint64",
                    "valueType": "AVMString",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1204
                    ],
                    "errorMessage": "Blob exists"
                },
                {
                    "pc": [
                        1055,
                        1066,
                        1078,
                        1090
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        180,
                        207,
                        223,
                        252,
                        274,
                        286,
                        298,
                        310,
                        322,
                        372,
                        423,
                        435,
                        444
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        471
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        183,
                        210,
                        226,
                        255,
                        277,
                        289,
                        301,
                        313,
                        325,
                        375,
                        426,
                        438,
                        447
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        888,
                        1054,
                        1065,
                        1077,
                        1089
                    ],
                    "errorMessage": "check Box exists"
                },
                {
                    "pc": [
                        1298
                    ],
                    "errorMessage": "check BoxMap entry exists"
                },
                {
                    "pc": [
                        1207,
                        1214
                    ],
                    "errorMessage": "check BoxRef exists"
                },
                {
                    "pc": [
                        531,
                        541
                    ],
                    "errorMessage": "check self.box_a exists"
                },
                {
                    "pc": [
                        514,
                        518,
                        549,
                        896
                    ],
                    "errorMessage": "check self.box_b exists"
                },
                {
                    "pc": [
                        557,
                        902
                    ],
                    "errorMessage": "check self.box_c exists"
                },
                {
                    "pc": [
                        568
                    ],
                    "errorMessage": "check self.box_d exists"
                },
                {
                    "pc": [
                        1253,
                        1260,
                        1326
                    ],
                    "errorMessage": "check self.box_map entry exists"
                },
                {
                    "pc": [
                        525
                    ],
                    "errorMessage": "direct reference should match copy"
                },
                {
                    "pc": [
                        1132,
                        1230
                    ],
                    "errorMessage": "has data"
                },
                {
                    "pc": [
                        1104,
                        1110,
                        1116,
                        1122
                    ],
                    "errorMessage": "no data"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQACBSYNBUJPWF9DBGJsb2IFYm94X2QFYm94X2EBYgEAAWQEFR98dQEwBWhlbGxvBAACNDIHYm94X3JlZgdkZWZhdWx0MRtBAYKCDQR9NyluBDMyXT0E1WbGMgT72pugBOWj7VIEBO9JcQQj7LMsBO73WBYEtTKROgTCnxZpBJyIjAkE5vaFBgSO4sNkNhoAjg0BCgEBAPUAwgCQAIQAeABsAGAASgAtAB0AAiNDMRkURDEYRDYaAReIBHonBSNPAlQnB0xQsCJDMRkURDEYRDYaAReIBFYiQzEZFEQxGEQ2GgEXiAQ9SRUWVwYCTFAnB0xQsCJDMRkURDEYRDYaARc2GgJXAgCIBA0iQzEZFEQxGESIA7siQzEZFEQxGESIAyYiQzEZFEQxGESIAuEiQzEZFEQxGESIAlkiQzEZFEQxGESIAj8nBSNPBFQnBSNPBFQnBSNPBFRMI1NPAiJPAlRMI1MkTFQnB0xQsCJDMRkURDEYRIgB+E8CFksCFRZXBgJPA1BMgAIADFBLARWBDAgWVwYCUExQTFAnB0xQsCJDMRkURDEYRIgBhyJDMRkURDEYRCJDMRkURDEYRDYaARc2GgI2GgOIAA0iQzEZQP7bMRgURCJDigMAi/0WK0y/JwS8SCcEi/6/KLxIKIv/v4v+VwIAKrxIKksBvycEvkQnBL5EI1lMI1kSRCu+TBdMRIEDCBYrTL8rvUSBCBJEJwS9RIv+FRJEKL1Ei/8VTEsBEkQqvURLAhVMSwESRCgjIrqL/1cAARJEKL1IIgkoTCK6SwIiCYv/TCJYEkQovUgiSwEMSwEiTwJNCSgjTwK6IksDDyJLBE8CTUsDTAmL/yNPAlISRCi9SCRLAQwkTE0oI08CuiRLAw8kTwRPAk2L/yNPAlISRCojIrpLAlcAARJEKr1IIgkqTCK6SwEiCUsDTCJYEkQqvUgiSwEMSwEiTwJNCSojTwK6IksCDyJLA08CTUsCTAlLAyNPAlISRCq9SCVLAQwlTE0qI08CuiVLAg8lSwNPAk1LAyNPAlISRCq9SCRLAQwkTE0qI08CuiRLAg8kTwNPAk1PAiNPAlISRIkrvEgnBLxIKLxIK75MF4EqTE8CTYEqEkQnBL4nCk4CTVcCAIACNDISRCi+JwpOAk0nChJEK75MF0wURBREiSu+TBdMRCIIIgknBL5EVwIAKL5EiSu9RQEnBL1FASi9RQGJJwi8SCcIgBNUZXN0aW5nIHRlc3RpbmcgMTIzvycIvUhJI0sCTYEHSwIMTwKBB08CTUsBCScITgK6gAdUZXN0aW5nEkQovEgogAcABUhlbGxvvyi9SCRLAQxLASRPAk2BCksCDE8CgQpPAk1LAQkoTgK6gAVIZWxsbxJEiScGgAQAAQIDvycGvkRXAAEnBahEJwa+RFcBAYABAahEJwa+RFcCAYABAqhEJwa+RFcDAYABA6hEiSm9RQEURCm9RQEURCm9RQEURCm9RQEURCmBILlEKb1FAUQxADIKKSNLA7spgcA+0ykjSUsD0imBQCcJuykjgUW6SwFLA1AnCVASRCm8RCm+FESAABJEKb5LA04CTUsCEkRQKUy/Kb1FAUQpvUSBQBJEKb1EgUASRCcLgSC5SCcLvUUBRCcLvEiJIxZJvEhJgAZIbW1tbW2/Sb1EgQYSREm9RIEGEkQiFkm+JwxOAk0nDBJESb5FARRETL1FAURJvEhJJwm/Sb5EJwkSRLxIiYoCAIv+Fkm8SIv/v4mKAQGL/xa+RImKAQCL/xa8SImKAQGL/xa9RQGJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}