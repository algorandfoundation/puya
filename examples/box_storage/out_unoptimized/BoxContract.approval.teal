#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 2 8 4096 4098 32762 33000 32760
    bytecblock 0x "dynamic_arr_struct" "box" 0x626c6f62 0x424f585f43 "dynamic_box" 0x151f7c75 "box_d" 0x626f785f6c61726765 0x626f785f61 0x62 0x3432 0x64 0x68656c6c6f 0x00 "many_ints" "too_many_bools" "0" 0x48656c6c6f "box_ref" "Hmmmmm" 0x068101 "default"
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_call___init__@1

main_call___init__@1:
    callsub __init__
    b main_after_if_else@2

main_after_if_else@2:
    b main_block@3

main_block@3:
    // box_storage/contract.py:79
    // class BoxContract(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main___algopy_default_create@44
    b main_abi_routing@4

main_abi_routing@4:
    // box_storage/contract.py:79
    // class BoxContract(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz main_create_NoOp@42
    b main_call_NoOp@5

main_call_NoOp@5:
    // box_storage/contract.py:79
    // class BoxContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x7d37296e // method "set_boxes(uint64,byte[],string)void"
    pushbytes 0x33325d3d // method "check_keys()void"
    pushbytes 0x0199408d // method "create_many_ints()void"
    pushbytes 0x772059ca // method "set_many_ints(uint64,uint64)void"
    pushbytes 0x01263df6 // method "sum_many_ints()uint64"
    pushbytes 0xd566c632 // method "delete_boxes()void"
    pushbytes 0xfabcb885 // method "indirect_extract_and_replace()void"
    pushbytes 0xa6174812 // method "read_boxes()(uint64,byte[],string,uint64)"
    pushbytes 0xf13dd937 // method "boxes_exist()(bool,bool,bool,bool)"
    pushbytes 0x5ab60f2e // method "create_dynamic_arr_struct()void"
    pushbytes 0xf07a0064 // method "delete_dynamic_arr_struct()void"
    pushbytes 0x78f9af3f // method "append_dynamic_arr_struct(uint64)uint64"
    pushbytes 0x5cbb9dcc // method "pop_dynamic_arr_struct(uint64)uint64"
    pushbytes 0x996497ae // method "set_nested_struct((uint64,(uint64,uint64[][],uint64),(uint64,uint64[][],uint64)[],uint64))void"
    pushbytes 0x6cec72ff // method "nested_write(uint64,uint64)void"
    pushbytes 0x6f9d1075 // method "nested_read(uint64,uint64,uint64)uint64"
    pushbytes 0x0d22b441 // method "sum_dynamic_arr_struct()uint64"
    pushbytes 0x59ef3760 // method "create_bools()void"
    pushbytes 0xaa666b96 // method "set_bool(uint64,bool)void"
    pushbytes 0xdfbdd636 // method "sum_bools(uint64)uint64"
    pushbytes 0x41427cd1 // method "create_dynamic_box()void"
    pushbytes 0x2a141f6c // method "delete_dynamic_box()void"
    pushbytes 0x7e843744 // method "append_dynamic_box(uint64)uint64"
    pushbytes 0x25600b57 // method "pop_dynamic_box(uint64)uint64"
    pushbytes 0x29ea595d // method "sum_dynamic_box()uint64"
    pushbytes 0x11453152 // method "write_dynamic_box(uint64,uint64)void"
    pushbytes 0xced1221e // method "write_dynamic_arr_struct(uint64,uint64)void"
    pushbytes 0x04ef4971 // method "slice_box()void"
    pushbytes 0x23ecb32c // method "arc4_box()void"
    pushbytes 0xeef75816 // method "test_box_ref()void"
    pushbytes 0xb532913a // method "box_map_test()void"
    pushbytes 0xc29f1669 // method "box_map_set(uint64,string)void"
    pushbytes 0x9c888c09 // method "box_map_get(uint64)string"
    pushbytes 0xe6f68506 // method "box_map_del(uint64)void"
    pushbytes 0x8ee2c364 // method "box_map_exists(uint64)bool"
    uncover 35
    match main_set_boxes_route@6 main_check_keys_route@7 main_create_many_ints_route@8 main_set_many_ints_route@9 main_sum_many_ints_route@10 main_delete_boxes_route@11 main_indirect_extract_and_replace_route@12 main_read_boxes_route@13 main_boxes_exist_route@14 main_create_dynamic_arr_struct_route@15 main_delete_dynamic_arr_struct_route@16 main_append_dynamic_arr_struct_route@17 main_pop_dynamic_arr_struct_route@18 main_set_nested_struct_route@19 main_nested_write_route@20 main_nested_read_route@21 main_sum_dynamic_arr_struct_route@22 main_create_bools_route@23 main_set_bool_route@24 main_sum_bools_route@25 main_create_dynamic_box_route@26 main_delete_dynamic_box_route@27 main_append_dynamic_box_route@28 main_pop_dynamic_box_route@29 main_sum_dynamic_box_route@30 main_write_dynamic_box_route@31 main_write_dynamic_arr_struct_route@32 main_slice_box_route@33 main_arc4_box_route@34 main_test_box_ref_route@35 main_box_map_test_route@36 main_box_map_set_route@37 main_box_map_get_route@38 main_box_map_del_route@39 main_box_map_exists_route@40
    b main_switch_case_next@41

main_switch_case_next@41:
    b main_after_if_else@43

main_after_if_else@43:
    b main_after_if_else@45

main_after_if_else@45:
    // box_storage/contract.py:79
    // class BoxContract(arc4.ARC4Contract):
    err

main_box_map_exists_route@40:
    // box_storage/contract.py:469
    // @arc4.abimethod
    callsub box_map_exists
    b main_switch_case_next@41

main_box_map_del_route@39:
    // box_storage/contract.py:465
    // @arc4.abimethod
    callsub box_map_del
    b main_switch_case_next@41

main_box_map_get_route@38:
    // box_storage/contract.py:461
    // @arc4.abimethod
    callsub box_map_get
    b main_switch_case_next@41

main_box_map_set_route@37:
    // box_storage/contract.py:457
    // @arc4.abimethod
    callsub box_map_set
    b main_switch_case_next@41

main_box_map_test_route@36:
    // box_storage/contract.py:433
    // @arc4.abimethod
    callsub box_map_test
    b main_switch_case_next@41

main_test_box_ref_route@35:
    // box_storage/contract.py:385
    // @arc4.abimethod
    callsub test_box_ref
    b main_switch_case_next@41

main_arc4_box_route@34:
    // box_storage/contract.py:375
    // @arc4.abimethod
    callsub arc4_box
    b main_switch_case_next@41

main_slice_box_route@33:
    // box_storage/contract.py:366
    // @arc4.abimethod
    callsub slice_box
    b main_switch_case_next@41

main_write_dynamic_arr_struct_route@32:
    // box_storage/contract.py:362
    // @arc4.abimethod
    callsub write_dynamic_arr_struct
    b main_switch_case_next@41

main_write_dynamic_box_route@31:
    // box_storage/contract.py:358
    // @arc4.abimethod
    callsub write_dynamic_box
    b main_switch_case_next@41

main_sum_dynamic_box_route@30:
    // box_storage/contract.py:351
    // @arc4.abimethod
    callsub sum_dynamic_box
    b main_switch_case_next@41

main_pop_dynamic_box_route@29:
    // box_storage/contract.py:340
    // @arc4.abimethod
    callsub pop_dynamic_box
    b main_switch_case_next@41

main_append_dynamic_box_route@28:
    // box_storage/contract.py:325
    // @arc4.abimethod
    callsub append_dynamic_box
    b main_switch_case_next@41

main_delete_dynamic_box_route@27:
    // box_storage/contract.py:321
    // @arc4.abimethod
    callsub delete_dynamic_box
    b main_switch_case_next@41

main_create_dynamic_box_route@26:
    // box_storage/contract.py:317
    // @arc4.abimethod
    callsub create_dynamic_box
    b main_switch_case_next@41

main_sum_bools_route@25:
    // box_storage/contract.py:307
    // @arc4.abimethod()
    callsub sum_bools
    b main_switch_case_next@41

main_set_bool_route@24:
    // box_storage/contract.py:303
    // @arc4.abimethod
    callsub set_bool
    b main_switch_case_next@41

main_create_bools_route@23:
    // box_storage/contract.py:299
    // @arc4.abimethod
    callsub create_bools
    b main_switch_case_next@41

main_sum_dynamic_arr_struct_route@22:
    // box_storage/contract.py:288
    // @arc4.abimethod
    callsub sum_dynamic_arr_struct
    b main_switch_case_next@41

main_nested_read_route@21:
    // box_storage/contract.py:276
    // @arc4.abimethod()
    callsub nested_read
    b main_switch_case_next@41

main_nested_write_route@20:
    // box_storage/contract.py:266
    // @arc4.abimethod()
    callsub nested_write
    b main_switch_case_next@41

main_set_nested_struct_route@19:
    // box_storage/contract.py:252
    // @arc4.abimethod()
    callsub set_nested_struct
    b main_switch_case_next@41

main_pop_dynamic_arr_struct_route@18:
    // box_storage/contract.py:230
    // @arc4.abimethod
    callsub pop_dynamic_arr_struct
    b main_switch_case_next@41

main_append_dynamic_arr_struct_route@17:
    // box_storage/contract.py:198
    // @arc4.abimethod
    callsub append_dynamic_arr_struct
    b main_switch_case_next@41

main_delete_dynamic_arr_struct_route@16:
    // box_storage/contract.py:194
    // @arc4.abimethod
    callsub delete_dynamic_arr_struct
    b main_switch_case_next@41

main_create_dynamic_arr_struct_route@15:
    // box_storage/contract.py:185
    // @arc4.abimethod
    callsub create_dynamic_arr_struct
    b main_switch_case_next@41

main_boxes_exist_route@14:
    // box_storage/contract.py:181
    // @arc4.abimethod
    callsub boxes_exist
    b main_switch_case_next@41

main_read_boxes_route@13:
    // box_storage/contract.py:172
    // @arc4.abimethod
    callsub read_boxes
    b main_switch_case_next@41

main_indirect_extract_and_replace_route@12:
    // box_storage/contract.py:166
    // @arc4.abimethod()
    callsub indirect_extract_and_replace
    b main_switch_case_next@41

main_delete_boxes_route@11:
    // box_storage/contract.py:153
    // @arc4.abimethod
    callsub delete_boxes
    b main_switch_case_next@41

main_sum_many_ints_route@10:
    // box_storage/contract.py:145
    // @arc4.abimethod()
    callsub sum_many_ints
    b main_switch_case_next@41

main_set_many_ints_route@9:
    // box_storage/contract.py:141
    // @arc4.abimethod()
    callsub set_many_ints
    b main_switch_case_next@41

main_create_many_ints_route@8:
    // box_storage/contract.py:137
    // @arc4.abimethod()
    callsub create_many_ints
    b main_switch_case_next@41

main_check_keys_route@7:
    // box_storage/contract.py:130
    // @arc4.abimethod
    callsub check_keys
    b main_switch_case_next@41

main_set_boxes_route@6:
    // box_storage/contract.py:94
    // @arc4.abimethod
    callsub set_boxes
    b main_switch_case_next@41

main_create_NoOp@42:
    b main_after_if_else@43

main___algopy_default_create@44:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b main_block@47

main_block@47:
    b main_after_inlined_examples.box_storage.contract.BoxContract.__algopy_default_create@48

main_after_inlined_examples.box_storage.contract.BoxContract.__algopy_default_create@48:
    intc_1 // 1
    return


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    b ensure_budget_block@0

ensure_budget_block@0:
    frame_dig -2
    pushint 10 // 10
    +
    b ensure_budget_while_top@1

ensure_budget_while_top@1:
    global OpcodeBudget
    frame_dig 0
    <
    bz ensure_budget_after_while@6
    b ensure_budget_while_body@2

ensure_budget_while_body@2:
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 21 // 0x068101
    itxn_field ApprovalProgram
    bytec 21 // 0x068101
    itxn_field ClearStateProgram
    intc_0 // 0
    intc_1 // 1
    frame_dig -1
    match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4
    b ensure_budget_switch_case_next@5

ensure_budget_switch_case_next@5:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_switch_case_0@3:
    intc_0 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_after_while@6:
    retsub


// _puya_lib.arc4.dynamic_array_replace_dynamic_element(source: bytes, new_item: bytes, index: uint64) -> bytes:
dynamic_array_replace_dynamic_element:
    proto 3 1
    b dynamic_array_replace_dynamic_element_block@0

dynamic_array_replace_dynamic_element_block@0:
    frame_dig -3
    substring 0 2
    dup
    btoi
    frame_dig -3
    extract 2 0
    frame_dig -2
    frame_dig -1
    uncover 3
    callsub static_array_replace_dynamic_element
    concat
    retsub


// _puya_lib.arc4.static_array_replace_dynamic_element(array_head_and_tail: bytes, new_item: bytes, index: uint64, array_length: uint64) -> bytes:
static_array_replace_dynamic_element:
    proto 4 1
    b static_array_replace_dynamic_element_block@0

static_array_replace_dynamic_element_block@0:
    frame_dig -2
    intc_2 // 2
    *
    frame_dig -4
    uncover 1
    extract_uint16
    frame_dig -2
    intc_1 // 1
    +
    intc_2 // 2
    *
    frame_dig -4
    uncover 1
    extract_uint16
    frame_dig -4
    len
    frame_dig -1
    frame_dig -2
    -
    intc_1 // 1
    -
    dig 1
    uncover 3
    uncover 2
    select
    dup
    dig 3
    -
    cover 3
    frame_dig -3
    len
    cover 3
    frame_dig -4
    intc_0 // 0
    uncover 4
    substring3
    frame_dig -3
    concat
    frame_dig -4
    uncover 2
    uncover 3
    substring3
    concat
    frame_dig -1
    intc_2 // 2
    *
    frame_dig -2
    intc_1 // 1
    +
    intc_2 // 2
    *
    intc_2 // 2
    assert // Step cannot be zero
    b static_array_replace_dynamic_element_for_header@1

static_array_replace_dynamic_element_for_header@1:
    frame_dig 4
    frame_dig 3
    <
    bz static_array_replace_dynamic_element_after_for@4
    b static_array_replace_dynamic_element_for_body@2

static_array_replace_dynamic_element_for_body@2:
    frame_dig 4
    frame_dig 2
    dup
    cover 2
    dig 1
    extract_uint16
    frame_dig 1
    +
    frame_dig 0
    -
    itob
    extract 6 2
    uncover 2
    uncover 2
    uncover 2
    replace3
    frame_bury 2
    b static_array_replace_dynamic_element_for_footer@3

static_array_replace_dynamic_element_for_footer@3:
    frame_dig 4
    intc_2 // 2
    +
    frame_bury 4
    b static_array_replace_dynamic_element_for_header@1

static_array_replace_dynamic_element_after_for@4:
    frame_dig 2
    frame_bury 0
    retsub


// examples.box_storage.contract.get_box_value_plus_1(box: bytes) -> uint64:
get_box_value_plus_1:
    // box_storage/contract.py:474-475
    // @subroutine
    // def get_box_value_plus_1(box: Box[UInt64]) -> UInt64:
    proto 1 1
    b get_box_value_plus_1_block@0

get_box_value_plus_1_block@0:
    // box_storage/contract.py:476
    // return box.value + 1
    frame_dig -1
    box_get
    assert // check Box exists
    btoi
    intc_1 // 1
    +
    retsub


// examples.box_storage.contract.get_box_ref_length(ref: bytes) -> uint64:
get_box_ref_length:
    // box_storage/contract.py:479-480
    // @subroutine
    // def get_box_ref_length(ref: Box[Bytes]) -> UInt64:
    proto 1 1
    b get_box_ref_length_block@0

get_box_ref_length_block@0:
    // box_storage/contract.py:481
    // return ref.length
    frame_dig -1
    box_len
    assert // check Box exists
    retsub


// examples.box_storage.contract.get_box_map_value_from_key_plus_1(box_map: bytes, key: uint64) -> bytes:
get_box_map_value_from_key_plus_1:
    // box_storage/contract.py:484-485
    // @subroutine
    // def get_box_map_value_from_key_plus_1(box_map: BoxMap[UInt64, String], key: UInt64) -> String:
    proto 2 1
    b get_box_map_value_from_key_plus_1_block@0

get_box_map_value_from_key_plus_1_block@0:
    // box_storage/contract.py:486
    // return box_map[key + 1]
    frame_dig -1
    intc_1 // 1
    +
    itob
    frame_dig -2
    uncover 1
    concat
    box_get
    assert // check BoxMap entry exists
    retsub


// examples.box_storage.contract.BoxContract.set_boxes[routing]() -> void:
set_boxes:
    b set_boxes_block@0

set_boxes_block@0:
    // box_storage/contract.py:94
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    uncover 2
    uncover 2
    uncover 2
    callsub examples.box_storage.contract.BoxContract.set_boxes
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.check_keys[routing]() -> void:
check_keys:
    b check_keys_block@0

check_keys_block@0:
    // box_storage/contract.py:130
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.check_keys
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.create_many_ints[routing]() -> void:
create_many_ints:
    b create_many_ints_block@0

create_many_ints_block@0:
    // box_storage/contract.py:137
    // @arc4.abimethod()
    callsub examples.box_storage.contract.BoxContract.create_many_ints
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.set_many_ints[routing]() -> void:
set_many_ints:
    b set_many_ints_block@0

set_many_ints_block@0:
    // box_storage/contract.py:141
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    callsub examples.box_storage.contract.BoxContract.set_many_ints
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.sum_many_ints[routing]() -> void:
sum_many_ints:
    b sum_many_ints_block@0

sum_many_ints_block@0:
    // box_storage/contract.py:145
    // @arc4.abimethod()
    callsub examples.box_storage.contract.BoxContract.sum_many_ints
    itob
    bytec 6 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.delete_boxes[routing]() -> void:
delete_boxes:
    b delete_boxes_block@0

delete_boxes_block@0:
    // box_storage/contract.py:153
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.delete_boxes
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.indirect_extract_and_replace[routing]() -> void:
indirect_extract_and_replace:
    b indirect_extract_and_replace_block@0

indirect_extract_and_replace_block@0:
    // box_storage/contract.py:166
    // @arc4.abimethod()
    callsub examples.box_storage.contract.BoxContract.indirect_extract_and_replace
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.read_boxes[routing]() -> void:
read_boxes:
    b read_boxes_block@0

read_boxes_block@0:
    // box_storage/contract.py:172
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.read_boxes
    cover 3
    cover 3
    cover 1
    itob
    bytec_0 // 0x
    uncover 1
    concat
    cover 1
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    pushint 20 // 20
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    cover 1
    dup
    len
    pushint 20 // 20
    +
    itob
    extract 6 2
    uncover 2
    uncover 1
    concat
    uncover 2
    itob
    concat
    uncover 1
    concat
    uncover 1
    concat
    bytec 6 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.boxes_exist[routing]() -> void:
boxes_exist:
    b boxes_exist_block@0

boxes_exist_block@0:
    // box_storage/contract.py:181
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.boxes_exist
    cover 3
    cover 2
    cover 1
    bytec 14 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    intc_1 // 1
    uncover 2
    setbit
    intc_2 // 2
    uncover 2
    setbit
    pushint 3 // 3
    uncover 2
    setbit
    bytec_0 // 0x
    uncover 1
    concat
    bytec 6 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.create_dynamic_arr_struct[routing]() -> void:
create_dynamic_arr_struct:
    b create_dynamic_arr_struct_block@0

create_dynamic_arr_struct_block@0:
    // box_storage/contract.py:185
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.create_dynamic_arr_struct
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct[routing]() -> void:
delete_dynamic_arr_struct:
    b delete_dynamic_arr_struct_block@0

delete_dynamic_arr_struct_block@0:
    // box_storage/contract.py:194
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.append_dynamic_arr_struct[routing]() -> void:
append_dynamic_arr_struct:
    b append_dynamic_arr_struct_block@0

append_dynamic_arr_struct_block@0:
    // box_storage/contract.py:198
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    callsub examples.box_storage.contract.BoxContract.append_dynamic_arr_struct
    itob
    bytec 6 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct[routing]() -> void:
pop_dynamic_arr_struct:
    b pop_dynamic_arr_struct_block@0

pop_dynamic_arr_struct_block@0:
    // box_storage/contract.py:230
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    callsub examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct
    itob
    bytec 6 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.set_nested_struct[routing]() -> void:
set_nested_struct:
    b set_nested_struct_block@0

set_nested_struct_block@0:
    // box_storage/contract.py:252
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub examples.box_storage.contract.BoxContract.set_nested_struct
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.nested_write[routing]() -> void:
nested_write:
    b nested_write_block@0

nested_write_block@0:
    // box_storage/contract.py:266
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    callsub examples.box_storage.contract.BoxContract.nested_write
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.nested_read[routing]() -> void:
nested_read:
    b nested_read_block@0

nested_read_block@0:
    // box_storage/contract.py:276
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    uncover 2
    uncover 2
    uncover 2
    callsub examples.box_storage.contract.BoxContract.nested_read
    itob
    bytec 6 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct[routing]() -> void:
sum_dynamic_arr_struct:
    b sum_dynamic_arr_struct_block@0

sum_dynamic_arr_struct_block@0:
    // box_storage/contract.py:288
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct
    itob
    bytec 6 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.create_bools[routing]() -> void:
create_bools:
    b create_bools_block@0

create_bools_block@0:
    // box_storage/contract.py:299
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.create_bools
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.set_bool[routing]() -> void:
set_bool:
    b set_bool_block@0

set_bool_block@0:
    // box_storage/contract.py:303
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    intc_0 // 0
    getbit
    callsub examples.box_storage.contract.BoxContract.set_bool
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.sum_bools[routing]() -> void:
sum_bools:
    b sum_bools_block@0

sum_bools_block@0:
    // box_storage/contract.py:307
    // @arc4.abimethod()
    txna ApplicationArgs 1
    btoi
    callsub examples.box_storage.contract.BoxContract.sum_bools
    itob
    bytec 6 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.create_dynamic_box[routing]() -> void:
create_dynamic_box:
    b create_dynamic_box_block@0

create_dynamic_box_block@0:
    // box_storage/contract.py:317
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.create_dynamic_box
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.delete_dynamic_box[routing]() -> void:
delete_dynamic_box:
    b delete_dynamic_box_block@0

delete_dynamic_box_block@0:
    // box_storage/contract.py:321
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.delete_dynamic_box
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.append_dynamic_box[routing]() -> void:
append_dynamic_box:
    b append_dynamic_box_block@0

append_dynamic_box_block@0:
    // box_storage/contract.py:325
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    callsub examples.box_storage.contract.BoxContract.append_dynamic_box
    itob
    bytec 6 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.pop_dynamic_box[routing]() -> void:
pop_dynamic_box:
    b pop_dynamic_box_block@0

pop_dynamic_box_block@0:
    // box_storage/contract.py:340
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    callsub examples.box_storage.contract.BoxContract.pop_dynamic_box
    itob
    bytec 6 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.sum_dynamic_box[routing]() -> void:
sum_dynamic_box:
    b sum_dynamic_box_block@0

sum_dynamic_box_block@0:
    // box_storage/contract.py:351
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.sum_dynamic_box
    itob
    bytec 6 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.write_dynamic_box[routing]() -> void:
write_dynamic_box:
    b write_dynamic_box_block@0

write_dynamic_box_block@0:
    // box_storage/contract.py:358
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    callsub examples.box_storage.contract.BoxContract.write_dynamic_box
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.write_dynamic_arr_struct[routing]() -> void:
write_dynamic_arr_struct:
    b write_dynamic_arr_struct_block@0

write_dynamic_arr_struct_block@0:
    // box_storage/contract.py:362
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    callsub examples.box_storage.contract.BoxContract.write_dynamic_arr_struct
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.slice_box[routing]() -> void:
slice_box:
    b slice_box_block@0

slice_box_block@0:
    // box_storage/contract.py:366
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.slice_box
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.arc4_box[routing]() -> void:
arc4_box:
    b arc4_box_block@0

arc4_box_block@0:
    // box_storage/contract.py:375
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.arc4_box
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.test_box_ref[routing]() -> void:
test_box_ref:
    b test_box_ref_block@0

test_box_ref_block@0:
    // box_storage/contract.py:385
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.test_box_ref
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.box_map_test[routing]() -> void:
box_map_test:
    b box_map_test_block@0

box_map_test_block@0:
    // box_storage/contract.py:433
    // @arc4.abimethod
    callsub examples.box_storage.contract.BoxContract.box_map_test
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.box_map_set[routing]() -> void:
box_map_set:
    b box_map_set_block@0

box_map_set_block@0:
    // box_storage/contract.py:457
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    extract 2 0
    callsub examples.box_storage.contract.BoxContract.box_map_set
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.box_map_get[routing]() -> void:
box_map_get:
    b box_map_get_block@0

box_map_get_block@0:
    // box_storage/contract.py:461
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    callsub examples.box_storage.contract.BoxContract.box_map_get
    dup
    len
    itob
    extract 6 2
    uncover 1
    concat
    bytec 6 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.box_map_del[routing]() -> void:
box_map_del:
    b box_map_del_block@0

box_map_del_block@0:
    // box_storage/contract.py:465
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    callsub examples.box_storage.contract.BoxContract.box_map_del
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.box_map_exists[routing]() -> void:
box_map_exists:
    b box_map_exists_block@0

box_map_exists_block@0:
    // box_storage/contract.py:469
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    callsub examples.box_storage.contract.BoxContract.box_map_exists
    bytec 14 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec 6 // 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// examples.box_storage.contract.BoxContract.__init__() -> void:
__init__:
    b __init___block@0

__init___block@0:
    // box_storage/contract.py:89
    // assert size_of(ManyInts) > 4096, "expected ManyInts to exceed max bytes size"
    pushint 4104 // 4104
    intc 4 // 4096
    >
    assert // expected ManyInts to exceed max bytes size
    retsub


// examples.box_storage.contract.BoxContract.set_boxes(a: uint64, b: bytes, c: bytes) -> void:
examples.box_storage.contract.BoxContract.set_boxes:
    // box_storage/contract.py:94-95
    // @arc4.abimethod
    // def set_boxes(self, a: UInt64, b: arc4.DynamicBytes, c: arc4.String) -> None:
    proto 3 0
    b examples.box_storage.contract.BoxContract.set_boxes_block@0

examples.box_storage.contract.BoxContract.set_boxes_block@0:
    // box_storage/contract.py:96
    // self.box_a.value = a
    frame_dig -3
    itob
    bytec 9 // "box_a"
    uncover 1
    box_put
    // box_storage/contract.py:97
    // self.box_b.value = b.copy()
    bytec 10 // "b"
    box_del
    pop
    bytec 10 // "b"
    frame_dig -2
    box_put
    // box_storage/contract.py:98
    // self.box_c.value = c
    bytec 4 // 0x424f585f43
    box_del
    pop
    bytec 4 // 0x424f585f43
    frame_dig -1
    box_put
    // box_storage/contract.py:99
    // self.box_d.value = b.native
    frame_dig -2
    extract 2 0
    bytec 7 // "box_d"
    box_del
    pop
    bytec 7 // "box_d"
    uncover 1
    box_put
    // box_storage/contract.py:100
    // self.box_large.create()
    bytec 8 // "box_large"
    pushint 6160 // 6160
    box_create
    pop
    // box_storage/contract.py:101
    // self.box_large.value.e = UInt64(42)
    bytec 8 // "box_large"
    box_get
    assert // check self.box_large exists
    pushint 42 // 42
    itob
    uncover 1
    intc 4 // 4096
    uncover 2
    replace3
    bytec 8 // "box_large"
    uncover 1
    box_put
    // box_storage/contract.py:102
    // self.box_large.replace(size_of(Bytes1024) * 4, arc4.UInt64(42).bytes)
    pushint 1024 // 1024
    pushint 4 // 4
    *
    bytec 8 // "box_large"
    uncover 1
    pushbytes 0x000000000000002a
    box_replace
    // box_storage/contract.py:104
    // b_value = self.box_b.value.copy()
    bytec 10 // "b"
    box_get
    assert // check self.box_b exists
    // box_storage/contract.py:105
    // assert self.box_b.value.length == b_value.length, "direct reference should match copy"
    bytec 10 // "b"
    box_get
    assert // check self.box_b exists
    intc_0 // 0
    extract_uint16
    uncover 1
    intc_0 // 0
    extract_uint16
    ==
    assert // direct reference should match copy
    // box_storage/contract.py:107
    // self.box_a.value += 3
    bytec 9 // "box_a"
    box_get
    assert // check self.box_a exists
    btoi
    pushint 3 // 3
    +
    itob
    bytec 9 // "box_a"
    uncover 1
    box_put
    // box_storage/contract.py:109-110
    // # test .length
    // assert self.box_a.length == 8
    bytec 9 // "box_a"
    box_len
    assert // check self.box_a exists
    intc_3 // 8
    ==
    assert
    // box_storage/contract.py:111
    // assert self.box_b.length == b.bytes.length
    bytec 10 // "b"
    box_len
    assert // check self.box_b exists
    frame_dig -2
    len
    ==
    assert
    // box_storage/contract.py:112
    // assert self.box_c.length == c.bytes.length
    bytec 4 // 0x424f585f43
    box_len
    assert // check self.box_c exists
    frame_dig -1
    len
    ==
    assert
    // box_storage/contract.py:113
    // assert self.box_d.length == b.native.length
    bytec 7 // "box_d"
    box_len
    assert // check self.box_d exists
    frame_dig -2
    extract 2 0
    len
    ==
    assert
    // box_storage/contract.py:115-116
    // # test .value.bytes
    // assert self.box_c.value.bytes[0] == c.bytes[0]
    bytec 4 // 0x424f585f43
    intc_0 // 0
    intc_1 // 1
    box_extract
    frame_dig -1
    intc_0 // 0
    intc_1 // 1
    extract3
    ==
    assert
    // box_storage/contract.py:117
    // assert self.box_c.value.bytes[-1] == c.bytes[-1]
    bytec 4 // 0x424f585f43
    box_len
    cover 1
    intc_1 // 1
    -
    bytec 4 // 0x424f585f43
    uncover 1
    intc_1 // 1
    box_extract
    frame_dig -1
    len
    intc_1 // 1
    -
    frame_dig -1
    uncover 1
    intc_1 // 1
    extract3
    ==
    assert
    // box_storage/contract.py:118
    // assert self.box_c.value.bytes[:-1] == c.bytes[:-1]
    bytec 4 // 0x424f585f43
    box_len
    cover 1
    intc_1 // 1
    dig 1
    <
    cover 1
    dup
    intc_1 // 1
    uncover 3
    select
    -
    intc_0 // 0
    -
    bytec 4 // 0x424f585f43
    intc_0 // 0
    uncover 2
    box_extract
    frame_dig -1
    len
    intc_1 // 1
    dig 1
    >=
    intc_1 // 1
    dig 2
    uncover 2
    select
    -
    frame_dig -1
    intc_0 // 0
    uncover 2
    substring3
    ==
    assert
    // box_storage/contract.py:119
    // assert self.box_c.value.bytes[:2] == c.bytes[:2]
    bytec 4 // 0x424f585f43
    box_len
    cover 1
    intc_2 // 2
    dig 1
    <
    cover 1
    intc_2 // 2
    uncover 2
    select
    intc_0 // 0
    -
    bytec 4 // 0x424f585f43
    intc_0 // 0
    uncover 2
    box_extract
    frame_dig -1
    len
    intc_2 // 2
    dig 1
    >=
    intc_2 // 2
    uncover 2
    uncover 2
    select
    frame_dig -1
    intc_0 // 0
    uncover 2
    substring3
    ==
    assert
    // box_storage/contract.py:121-122
    // # test .value with Bytes type
    // assert self.box_d.value[0] == b.native[0]
    bytec 7 // "box_d"
    intc_0 // 0
    intc_1 // 1
    box_extract
    frame_dig -2
    extract 2 0
    intc_0 // 0
    intc_1 // 1
    extract3
    ==
    assert
    // box_storage/contract.py:123
    // assert self.box_d.value[-1] == b.native[-1]
    bytec 7 // "box_d"
    box_len
    cover 1
    intc_1 // 1
    -
    bytec 7 // "box_d"
    uncover 1
    intc_1 // 1
    box_extract
    frame_dig -2
    extract 2 0
    dup
    len
    intc_1 // 1
    -
    intc_1 // 1
    extract3
    ==
    assert
    // box_storage/contract.py:124
    // assert self.box_d.value[:-1] == b.native[:-1]
    bytec 7 // "box_d"
    box_len
    cover 1
    intc_1 // 1
    dig 1
    <
    cover 1
    dup
    intc_1 // 1
    uncover 3
    select
    -
    intc_0 // 0
    -
    bytec 7 // "box_d"
    intc_0 // 0
    uncover 2
    box_extract
    frame_dig -2
    extract 2 0
    dup
    len
    intc_1 // 1
    dig 1
    >=
    intc_1 // 1
    dig 2
    uncover 2
    select
    -
    uncover 1
    intc_0 // 0
    uncover 2
    substring3
    ==
    assert
    // box_storage/contract.py:125
    // assert self.box_d.value[:5] == b.native[:5]
    bytec 7 // "box_d"
    box_len
    cover 1
    pushint 5 // 5
    dig 1
    <
    cover 1
    pushint 5 // 5
    uncover 2
    select
    intc_0 // 0
    -
    bytec 7 // "box_d"
    intc_0 // 0
    uncover 2
    box_extract
    frame_dig -2
    extract 2 0
    dup
    len
    pushint 5 // 5
    dig 1
    >=
    pushint 5 // 5
    uncover 2
    uncover 2
    select
    uncover 1
    intc_0 // 0
    uncover 2
    substring3
    ==
    assert
    // box_storage/contract.py:126
    // assert self.box_d.value[: UInt64(2)] == b.native[: UInt64(2)]
    bytec 7 // "box_d"
    box_len
    cover 1
    intc_2 // 2
    dig 1
    <
    cover 1
    intc_2 // 2
    uncover 2
    select
    intc_0 // 0
    -
    bytec 7 // "box_d"
    intc_0 // 0
    uncover 2
    box_extract
    frame_dig -2
    extract 2 0
    dup
    len
    intc_2 // 2
    dig 1
    >=
    intc_2 // 2
    uncover 2
    uncover 2
    select
    uncover 1
    intc_0 // 0
    uncover 2
    substring3
    ==
    assert
    // box_storage/contract.py:128
    // assert self.box_large.length == size_of(LargeStruct)
    bytec 8 // "box_large"
    box_len
    assert // check self.box_large exists
    pushint 6160 // 6160
    ==
    assert
    retsub


// examples.box_storage.contract.BoxContract.check_keys() -> void:
examples.box_storage.contract.BoxContract.check_keys:
    b examples.box_storage.contract.BoxContract.check_keys_block@0

examples.box_storage.contract.BoxContract.check_keys_block@0:
    // box_storage/contract.py:132
    // assert self.box_a.key == b"box_a", "box a key ok"
    bytec 9 // "box_a"
    bytec 9 // 0x626f785f61
    ==
    assert // box a key ok
    // box_storage/contract.py:133
    // assert self.box_b.key == b"b", "box b key ok"
    bytec 10 // "b"
    bytec 10 // 0x62
    ==
    assert // box b key ok
    // box_storage/contract.py:134
    // assert self.box_c.key == b"BOX_C", "box c key ok"
    bytec 4 // 0x424f585f43
    bytec 4 // 0x424f585f43
    ==
    assert // box c key ok
    // box_storage/contract.py:135
    // assert self.box_large.key == b"box_large", "box large key ok"
    bytec 8 // "box_large"
    bytec 8 // 0x626f785f6c61726765
    ==
    assert // box large key ok
    retsub


// examples.box_storage.contract.BoxContract.create_many_ints() -> void:
examples.box_storage.contract.BoxContract.create_many_ints:
    b examples.box_storage.contract.BoxContract.create_many_ints_block@0

examples.box_storage.contract.BoxContract.create_many_ints_block@0:
    // box_storage/contract.py:139
    // self.many_ints.create()
    bytec 15 // "many_ints"
    pushint 4104 // 4104
    box_create
    pop
    retsub


// examples.box_storage.contract.BoxContract.set_many_ints(index: uint64, value: uint64) -> void:
examples.box_storage.contract.BoxContract.set_many_ints:
    // box_storage/contract.py:141-142
    // @arc4.abimethod()
    // def set_many_ints(self, index: UInt64, value: UInt64) -> None:
    proto 2 0
    b examples.box_storage.contract.BoxContract.set_many_ints_block@0

examples.box_storage.contract.BoxContract.set_many_ints_block@0:
    // box_storage/contract.py:143
    // self.many_ints.value[index] = value
    bytec 15 // "many_ints"
    box_get
    assert // check self.many_ints exists
    frame_dig -1
    itob
    frame_dig -2
    intc_3 // 8
    *
    uncover 2
    uncover 1
    uncover 2
    replace3 // on error: index access is out of bounds
    bytec 15 // "many_ints"
    uncover 1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.sum_many_ints() -> uint64:
examples.box_storage.contract.BoxContract.sum_many_ints:
    // box_storage/contract.py:145-146
    // @arc4.abimethod()
    // def sum_many_ints(self) -> UInt64:
    proto 0 1
    b examples.box_storage.contract.BoxContract.sum_many_ints_block@0

examples.box_storage.contract.BoxContract.sum_many_ints_block@0:
    // box_storage/contract.py:147
    // ensure_budget(10_500)
    pushint 10500 // 10500
    intc_0 // 0
    callsub ensure_budget
    // box_storage/contract.py:148
    // total = UInt64(0)
    intc_0 // 0
    // box_storage/contract.py:149
    // for val in self.many_ints.value:
    bytec 15 // "many_ints"
    box_get
    assert // check self.many_ints exists
    intc_0 // 0
    b examples.box_storage.contract.BoxContract.sum_many_ints_for_header@1

examples.box_storage.contract.BoxContract.sum_many_ints_for_header@1:
    // box_storage/contract.py:149
    // for val in self.many_ints.value:
    frame_dig 2
    pushint 513 // 513
    <
    bz examples.box_storage.contract.BoxContract.sum_many_ints_after_for@4
    b examples.box_storage.contract.BoxContract.sum_many_ints_for_body@2

examples.box_storage.contract.BoxContract.sum_many_ints_for_body@2:
    // box_storage/contract.py:149
    // for val in self.many_ints.value:
    frame_dig 2
    intc_3 // 8
    *
    frame_dig 1
    uncover 1
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    // box_storage/contract.py:150
    // total = total + val
    frame_dig 0
    +
    frame_bury 0
    b examples.box_storage.contract.BoxContract.sum_many_ints_for_footer@3

examples.box_storage.contract.BoxContract.sum_many_ints_for_footer@3:
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b examples.box_storage.contract.BoxContract.sum_many_ints_for_header@1

examples.box_storage.contract.BoxContract.sum_many_ints_after_for@4:
    // box_storage/contract.py:151
    // return total
    retsub


// examples.box_storage.contract.BoxContract.delete_boxes() -> void:
examples.box_storage.contract.BoxContract.delete_boxes:
    b examples.box_storage.contract.BoxContract.delete_boxes_block@0

examples.box_storage.contract.BoxContract.delete_boxes_block@0:
    // box_storage/contract.py:155
    // del self.box_a.value
    bytec 9 // "box_a"
    box_del
    pop
    // box_storage/contract.py:156
    // del self.box_b.value
    bytec 10 // "b"
    box_del
    pop
    // box_storage/contract.py:157
    // del self.box_c.value
    bytec 4 // 0x424f585f43
    box_del
    pop
    // box_storage/contract.py:158
    // assert self.box_a.get(default=UInt64(42)) == 42
    bytec 9 // "box_a"
    box_get
    cover 1
    btoi
    pushint 42 // 42
    uncover 1
    uncover 2
    select
    pushint 42 // 42
    ==
    assert
    // box_storage/contract.py:159
    // assert self.box_b.get(default=arc4.DynamicBytes(b"42")).native == b"42"
    bytec 11 // 0x3432
    len
    itob
    extract 6 2
    bytec 11 // 0x3432
    concat
    bytec 10 // "b"
    box_get
    cover 1
    uncover 2
    uncover 1
    uncover 2
    select
    extract 2 0
    bytec 11 // 0x3432
    ==
    assert
    // box_storage/contract.py:160
    // assert self.box_c.get(default=arc4.String("42")) == "42"
    bytec 11 // "42"
    len
    itob
    extract 6 2
    bytec 11 // "42"
    concat
    bytec 4 // 0x424f585f43
    box_get
    cover 1
    uncover 2
    uncover 1
    uncover 2
    select
    bytec 11 // "42"
    len
    itob
    extract 6 2
    bytec 11 // "42"
    concat
    ==
    assert
    // box_storage/contract.py:161
    // a, a_exists = self.box_a.maybe()
    bytec 9 // "box_a"
    box_get
    cover 1
    btoi
    cover 1
    // box_storage/contract.py:162
    // assert not a_exists
    !
    assert
    // box_storage/contract.py:163
    // assert a == 0
    intc_0 // 0
    ==
    assert
    // box_storage/contract.py:164
    // del self.box_large.value
    bytec 8 // "box_large"
    box_del
    pop
    retsub


// examples.box_storage.contract.BoxContract.indirect_extract_and_replace() -> void:
examples.box_storage.contract.BoxContract.indirect_extract_and_replace:
    b examples.box_storage.contract.BoxContract.indirect_extract_and_replace_block@0

examples.box_storage.contract.BoxContract.indirect_extract_and_replace_block@0:
    // box_storage/contract.py:168
    // large = self.box_large.value.copy()
    bytec 8 // "box_large"
    box_get
    assert // check self.box_large exists
    // box_storage/contract.py:169
    // large.e += 1
    dup
    intc 4 // 4096
    intc_3 // 8
    extract3
    btoi
    intc_1 // 1
    +
    itob
    uncover 1
    intc 4 // 4096
    uncover 2
    replace3
    // box_storage/contract.py:170
    // self.box_large.value = large.copy()
    bytec 8 // "box_large"
    uncover 1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.read_boxes() -> uint64, bytes, bytes, uint64:
examples.box_storage.contract.BoxContract.read_boxes:
    b examples.box_storage.contract.BoxContract.read_boxes_block@0

examples.box_storage.contract.BoxContract.read_boxes_block@0:
    // box_storage/contract.py:175
    // get_box_value_plus_1(self.box_a) - 1,
    bytec 9 // "box_a"
    callsub get_box_value_plus_1
    intc_1 // 1
    -
    // box_storage/contract.py:176
    // self.box_b.value.native,
    bytec 10 // "b"
    box_get
    assert // check self.box_b exists
    extract 2 0
    // box_storage/contract.py:177
    // self.box_c.value,
    bytec 4 // 0x424f585f43
    box_get
    assert // check self.box_c exists
    // box_storage/contract.py:178
    // self.box_large.value.e,
    bytec 8 // "box_large"
    box_get
    assert // check self.box_large exists
    intc 4 // 4096
    intc_3 // 8
    extract3
    btoi
    // box_storage/contract.py:174-179
    // return (
    //     get_box_value_plus_1(self.box_a) - 1,
    //     self.box_b.value.native,
    //     self.box_c.value,
    //     self.box_large.value.e,
    // )
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    retsub


// examples.box_storage.contract.BoxContract.boxes_exist() -> uint64, uint64, uint64, uint64:
examples.box_storage.contract.BoxContract.boxes_exist:
    // box_storage/contract.py:181-182
    // @arc4.abimethod
    // def boxes_exist(self) -> tuple[bool, bool, bool, bool]:
    proto 0 4
    b examples.box_storage.contract.BoxContract.boxes_exist_block@0

examples.box_storage.contract.BoxContract.boxes_exist_block@0:
    // box_storage/contract.py:183
    // return bool(self.box_a), bool(self.box_b), bool(self.box_c), bool(self.box_large)
    bytec 9 // "box_a"
    box_len
    bytec 10 // "b"
    box_len
    cover 1
    cover 2
    bytec 4 // 0x424f585f43
    box_len
    cover 1
    cover 3
    bytec 8 // "box_large"
    box_len
    cover 1
    cover 4
    uncover 3
    uncover 3
    uncover 3
    uncover 3
    uncover 7
    uncover 7
    uncover 7
    uncover 7
    retsub


// examples.box_storage.contract.BoxContract.create_dynamic_arr_struct() -> void:
examples.box_storage.contract.BoxContract.create_dynamic_arr_struct:
    b examples.box_storage.contract.BoxContract.create_dynamic_arr_struct_block@0

examples.box_storage.contract.BoxContract.create_dynamic_arr_struct_block@0:
    // box_storage/contract.py:188
    // a=Txn.num_app_args,
    txn NumAppArgs
    // box_storage/contract.py:189
    // arr=Array[UInt64](),
    intc_0 // 0
    itob
    extract 6 2
    cover 1
    // box_storage/contract.py:190
    // b=Txn.num_app_args * 2,
    txn NumAppArgs
    intc_2 // 2
    *
    cover 2
    // box_storage/contract.py:191
    // arr2=Array[UInt64](),
    intc_0 // 0
    itob
    extract 6 2
    cover 3
    // box_storage/contract.py:187-192
    // self.dynamic_arr_struct.value = DynamicArrayInAStruct(
    //     a=Txn.num_app_args,
    //     arr=Array[UInt64](),
    //     b=Txn.num_app_args * 2,
    //     arr2=Array[UInt64](),
    // )
    itob
    bytec_0 // 0x
    uncover 1
    concat
    pushint 20 // 20
    itob
    extract 6 2
    concat
    dig 1
    len
    pushint 20 // 20
    +
    uncover 3
    itob
    uncover 2
    uncover 1
    concat
    uncover 1
    itob
    extract 6 2
    concat
    uncover 1
    concat
    uncover 1
    concat
    // box_storage/contract.py:187
    // self.dynamic_arr_struct.value = DynamicArrayInAStruct(
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:187-192
    // self.dynamic_arr_struct.value = DynamicArrayInAStruct(
    //     a=Txn.num_app_args,
    //     arr=Array[UInt64](),
    //     b=Txn.num_app_args * 2,
    //     arr2=Array[UInt64](),
    // )
    box_del
    pop
    // box_storage/contract.py:187
    // self.dynamic_arr_struct.value = DynamicArrayInAStruct(
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:187-192
    // self.dynamic_arr_struct.value = DynamicArrayInAStruct(
    //     a=Txn.num_app_args,
    //     arr=Array[UInt64](),
    //     b=Txn.num_app_args * 2,
    //     arr2=Array[UInt64](),
    // )
    uncover 1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct() -> void:
examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct:
    b examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct_block@0

examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct_block@0:
    // box_storage/contract.py:196
    // del self.dynamic_arr_struct.value
    bytec_1 // "dynamic_arr_struct"
    box_del
    pop
    retsub


// examples.box_storage.contract.BoxContract.append_dynamic_arr_struct(times: uint64) -> uint64:
examples.box_storage.contract.BoxContract.append_dynamic_arr_struct:
    // box_storage/contract.py:198-199
    // @arc4.abimethod
    // def append_dynamic_arr_struct(self, times: UInt64) -> UInt64:
    proto 1 1
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_block@0

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_block@0:
    // box_storage/contract.py:200-202
    // # TODO: support append using high level array operations, instead of
    // #       relying on struct layout tricks with FixedArrayInAStruct
    // assert self.dynamic_arr_struct.value.b == 2, "expected 2"
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    pushint 10 // 10
    intc_3 // 8
    extract3
    btoi
    intc_2 // 2
    ==
    assert // expected 2
    // box_storage/contract.py:203
    // arr_len = self.dynamic_arr_struct.value.arr.length
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    pushint 18 // 18
    extract_uint16
    uncover 1
    uncover 2
    uncover 2
    substring3
    intc_0 // 0
    extract_uint16
    dup
    // box_storage/contract.py:204
    // arr2_len = self.dynamic_arr_struct.value.arr2.length
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    dup
    pushint 18 // 18
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    intc_0 // 0
    extract_uint16
    // box_storage/contract.py:208
    // get_dynamic_arr2_struct_byte_index(arr_len + times, arr2_len)
    uncover 1
    frame_dig -1
    +
    cover 1
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_block@9

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_block@9:
    // box_storage/contract.py:498
    // head_and_dyn_arr = get_dynamic_arr_struct_byte_index(arr_size)
    frame_dig 7
    frame_bury 0
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_block@10

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_block@10:
    // box_storage/contract.py:491
    // head = size_of(UInt64) + size_of(arc4.UInt16) + size_of(UInt64) + size_of(arc4.UInt16)
    intc_3 // 8
    intc_2 // 2
    +
    intc_3 // 8
    +
    intc_2 // 2
    +
    // box_storage/contract.py:492
    // dyn_arr_index = size_of(arc4.UInt16) + index * size_of(UInt64)
    frame_dig 0
    intc_3 // 8
    *
    intc_2 // 2
    +
    // box_storage/contract.py:493
    // return head + dyn_arr_index
    +
    frame_bury 1
    // box_storage/contract.py:498
    // head_and_dyn_arr = get_dynamic_arr_struct_byte_index(arr_size)
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@11

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@11:
    // box_storage/contract.py:498
    // head_and_dyn_arr = get_dynamic_arr_struct_byte_index(arr_size)
    frame_dig 1
    // box_storage/contract.py:499
    // dyn_arr2_index = size_of(arc4.UInt16) + arr2_index * size_of(UInt64)
    frame_dig 8
    intc_3 // 8
    *
    intc_2 // 2
    +
    // box_storage/contract.py:500
    // return head_and_dyn_arr + dyn_arr2_index
    +
    frame_bury 3
    // box_storage/contract.py:208
    // get_dynamic_arr2_struct_byte_index(arr_len + times, arr2_len)
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr2_struct_byte_index@12

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr2_struct_byte_index@12:
    // box_storage/contract.py:206-207
    // # expand box
    // self.dynamic_arr_struct.resize(
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:206-209
    // # expand box
    // self.dynamic_arr_struct.resize(
    //     get_dynamic_arr2_struct_byte_index(arr_len + times, arr2_len)
    // )
    frame_dig 3
    box_resize
    // box_storage/contract.py:212
    // get_dynamic_arr_struct_byte_index(arr_len), 0, op.bzero(times * size_of(UInt64))
    frame_dig 6
    frame_bury 0
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_block@13

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_block@13:
    // box_storage/contract.py:491
    // head = size_of(UInt64) + size_of(arc4.UInt16) + size_of(UInt64) + size_of(arc4.UInt16)
    intc_3 // 8
    intc_2 // 2
    +
    intc_3 // 8
    +
    intc_2 // 2
    +
    // box_storage/contract.py:492
    // dyn_arr_index = size_of(arc4.UInt16) + index * size_of(UInt64)
    frame_dig 0
    intc_3 // 8
    *
    intc_2 // 2
    +
    // box_storage/contract.py:493
    // return head + dyn_arr_index
    +
    frame_bury 4
    // box_storage/contract.py:212
    // get_dynamic_arr_struct_byte_index(arr_len), 0, op.bzero(times * size_of(UInt64))
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@14

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@14:
    // box_storage/contract.py:212
    // get_dynamic_arr_struct_byte_index(arr_len), 0, op.bzero(times * size_of(UInt64))
    frame_dig -1
    intc_3 // 8
    *
    bzero
    // box_storage/contract.py:210-211
    // # splice in zero bytes so existing data is in correct location
    // self.dynamic_arr_struct.splice(
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:210-213
    // # splice in zero bytes so existing data is in correct location
    // self.dynamic_arr_struct.splice(
    //     get_dynamic_arr_struct_byte_index(arr_len), 0, op.bzero(times * size_of(UInt64))
    // )
    frame_dig 4
    // box_storage/contract.py:212
    // get_dynamic_arr_struct_byte_index(arr_len), 0, op.bzero(times * size_of(UInt64))
    intc_0 // 0
    // box_storage/contract.py:210-213
    // # splice in zero bytes so existing data is in correct location
    // self.dynamic_arr_struct.splice(
    //     get_dynamic_arr_struct_byte_index(arr_len), 0, op.bzero(times * size_of(UInt64))
    // )
    uncover 3
    box_splice
    // box_storage/contract.py:216
    // for i in urange(times):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    frame_bury 5
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_for_header@1

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_for_header@1:
    // box_storage/contract.py:216
    // for i in urange(times):
    frame_dig 5
    frame_dig -1
    <
    bz examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_after_for@4
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_for_body@2

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_for_body@2:
    // box_storage/contract.py:216
    // for i in urange(times):
    frame_dig 5
    // box_storage/contract.py:214-215
    // # update using a box typed as a FixedArray
    // box = Box(FixedArrayInAStruct, key=self.dynamic_arr_struct.key)
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:217
    // box.value.arr.arr[arr_len] = i
    box_get
    assert // check Box exists
    uncover 1
    itob
    cover 1
    dup
    pushint 20 // 20
    intc 6 // 32762
    extract3
    dup
    intc_2 // 2
    intc 8 // 32760
    extract3
    frame_dig 6
    dup
    cover 5
    intc_3 // 8
    *
    uncover 4
    replace3 // on error: index access is out of bounds
    uncover 1
    intc_2 // 2
    uncover 2
    replace3
    uncover 1
    pushint 20 // 20
    uncover 2
    replace3
    // box_storage/contract.py:214-215
    // # update using a box typed as a FixedArray
    // box = Box(FixedArrayInAStruct, key=self.dynamic_arr_struct.key)
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:217
    // box.value.arr.arr[arr_len] = i
    uncover 1
    box_put
    // box_storage/contract.py:218
    // arr_len += 1
    intc_1 // 1
    +
    frame_bury 6
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_for_footer@3

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_for_footer@3:
    // box_storage/contract.py:216
    // for i in urange(times):
    frame_dig 5
    intc_1 // 1
    +
    frame_bury 5
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_for_header@1

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_after_for@4:
    // box_storage/contract.py:219
    // box.value.arr.length = arc4.UInt16(arr_len)
    frame_dig 6
    dup
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    pushint 6 // 6
    intc_2 // 2
    extract3
    // box_storage/contract.py:214-215
    // # update using a box typed as a FixedArray
    // box = Box(FixedArrayInAStruct, key=self.dynamic_arr_struct.key)
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:219
    // box.value.arr.length = arc4.UInt16(arr_len)
    box_get
    assert // check Box exists
    dup
    pushint 20 // 20
    intc 6 // 32762
    extract3
    intc_0 // 0
    uncover 3
    replace3
    uncover 1
    pushint 20 // 20
    uncover 2
    replace3
    // box_storage/contract.py:214-215
    // # update using a box typed as a FixedArray
    // box = Box(FixedArrayInAStruct, key=self.dynamic_arr_struct.key)
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:219
    // box.value.arr.length = arc4.UInt16(arr_len)
    uncover 1
    box_put
    // box_storage/contract.py:220-221
    // # when calculating arr2_offset need to sub 2 from 0th index to account for length bytes
    // arr2_offset = get_dynamic_arr2_struct_byte_index(arr_len, UInt64(0)) - 2
    frame_bury 7
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_block@5

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_block@5:
    // box_storage/contract.py:498
    // head_and_dyn_arr = get_dynamic_arr_struct_byte_index(arr_size)
    frame_dig 7
    frame_bury 0
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_block@6

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_block@6:
    // box_storage/contract.py:491
    // head = size_of(UInt64) + size_of(arc4.UInt16) + size_of(UInt64) + size_of(arc4.UInt16)
    intc_3 // 8
    intc_2 // 2
    +
    intc_3 // 8
    +
    intc_2 // 2
    +
    // box_storage/contract.py:492
    // dyn_arr_index = size_of(arc4.UInt16) + index * size_of(UInt64)
    frame_dig 0
    intc_3 // 8
    *
    intc_2 // 2
    +
    // box_storage/contract.py:493
    // return head + dyn_arr_index
    +
    frame_bury 1
    // box_storage/contract.py:498
    // head_and_dyn_arr = get_dynamic_arr_struct_byte_index(arr_size)
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@7

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@7:
    // box_storage/contract.py:498
    // head_and_dyn_arr = get_dynamic_arr_struct_byte_index(arr_size)
    frame_dig 1
    // box_storage/contract.py:220-221
    // # when calculating arr2_offset need to sub 2 from 0th index to account for length bytes
    // arr2_offset = get_dynamic_arr2_struct_byte_index(arr_len, UInt64(0)) - 2
    intc_0 // 0
    // box_storage/contract.py:499
    // dyn_arr2_index = size_of(arc4.UInt16) + arr2_index * size_of(UInt64)
    intc_3 // 8
    *
    intc_2 // 2
    +
    // box_storage/contract.py:500
    // return head_and_dyn_arr + dyn_arr2_index
    +
    frame_bury 2
    // box_storage/contract.py:220-221
    // # when calculating arr2_offset need to sub 2 from 0th index to account for length bytes
    // arr2_offset = get_dynamic_arr2_struct_byte_index(arr_len, UInt64(0)) - 2
    b examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr2_struct_byte_index@8

examples.box_storage.contract.BoxContract.append_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr2_struct_byte_index@8:
    // box_storage/contract.py:220-221
    // # when calculating arr2_offset need to sub 2 from 0th index to account for length bytes
    // arr2_offset = get_dynamic_arr2_struct_byte_index(arr_len, UInt64(0)) - 2
    frame_dig 2
    intc_2 // 2
    -
    // box_storage/contract.py:222
    // box.value.arr2_offset = arc4.UInt16(arr2_offset)
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    pushint 6 // 6
    intc_2 // 2
    extract3
    // box_storage/contract.py:214-215
    // # update using a box typed as a FixedArray
    // box = Box(FixedArrayInAStruct, key=self.dynamic_arr_struct.key)
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:222
    // box.value.arr2_offset = arc4.UInt16(arr2_offset)
    box_get
    assert // check Box exists
    pushint 18 // 18
    uncover 2
    replace3
    // box_storage/contract.py:214-215
    // # update using a box typed as a FixedArray
    // box = Box(FixedArrayInAStruct, key=self.dynamic_arr_struct.key)
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:222
    // box.value.arr2_offset = arc4.UInt16(arr2_offset)
    uncover 1
    box_put
    // box_storage/contract.py:225
    // self.dynamic_arr_struct.value.arr.length == arr_len
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    pushint 18 // 18
    extract_uint16
    uncover 1
    uncover 2
    uncover 2
    substring3
    intc_0 // 0
    extract_uint16
    frame_dig 6
    ==
    // box_storage/contract.py:224-226
    // assert (
    //     self.dynamic_arr_struct.value.arr.length == arr_len
    // ), "expected arr length to be correct"
    assert // expected arr length to be correct
    // box_storage/contract.py:227
    // assert self.dynamic_arr_struct.value.arr2.length == 0, "expected arr2 length to be correct"
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    dup
    pushint 18 // 18
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    ==
    assert // expected arr2 length to be correct
    // box_storage/contract.py:228
    // return self.dynamic_arr_struct.value.arr.length
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    pushint 18 // 18
    extract_uint16
    uncover 1
    uncover 2
    uncover 2
    substring3
    intc_0 // 0
    extract_uint16
    frame_bury 0
    retsub


// examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct(times: uint64) -> uint64:
examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct:
    // box_storage/contract.py:230-231
    // @arc4.abimethod
    // def pop_dynamic_arr_struct(self, times: UInt64) -> UInt64:
    proto 1 1
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    bytec_0 // ""
    b examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_block@0

examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_block@0:
    // box_storage/contract.py:235
    // arr_len = self.dynamic_arr_struct.value.arr.length - times
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    pushint 18 // 18
    extract_uint16
    uncover 1
    uncover 2
    uncover 2
    substring3
    intc_0 // 0
    extract_uint16
    frame_dig -1
    -
    dup
    // box_storage/contract.py:236
    // arr2_len = self.dynamic_arr_struct.value.arr2.length
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    dup
    pushint 18 // 18
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    intc_0 // 0
    extract_uint16
    cover 1
    // box_storage/contract.py:239
    // arr2_offset = get_dynamic_arr2_struct_byte_index(arr_len, UInt64(0)) - 2
    b examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_block@1

examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_block@1:
    // box_storage/contract.py:498
    // head_and_dyn_arr = get_dynamic_arr_struct_byte_index(arr_size)
    frame_dig 8
    frame_bury 1
    b examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_block@2

examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_block@2:
    // box_storage/contract.py:491
    // head = size_of(UInt64) + size_of(arc4.UInt16) + size_of(UInt64) + size_of(arc4.UInt16)
    intc_3 // 8
    intc_2 // 2
    +
    intc_3 // 8
    +
    intc_2 // 2
    +
    // box_storage/contract.py:492
    // dyn_arr_index = size_of(arc4.UInt16) + index * size_of(UInt64)
    frame_dig 1
    intc_3 // 8
    *
    intc_2 // 2
    +
    // box_storage/contract.py:493
    // return head + dyn_arr_index
    +
    frame_bury 2
    // box_storage/contract.py:498
    // head_and_dyn_arr = get_dynamic_arr_struct_byte_index(arr_size)
    b examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@3

examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@3:
    // box_storage/contract.py:498
    // head_and_dyn_arr = get_dynamic_arr_struct_byte_index(arr_size)
    frame_dig 2
    // box_storage/contract.py:239
    // arr2_offset = get_dynamic_arr2_struct_byte_index(arr_len, UInt64(0)) - 2
    intc_0 // 0
    // box_storage/contract.py:499
    // dyn_arr2_index = size_of(arc4.UInt16) + arr2_index * size_of(UInt64)
    intc_3 // 8
    *
    intc_2 // 2
    +
    // box_storage/contract.py:500
    // return head_and_dyn_arr + dyn_arr2_index
    +
    frame_bury 3
    // box_storage/contract.py:239
    // arr2_offset = get_dynamic_arr2_struct_byte_index(arr_len, UInt64(0)) - 2
    b examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr2_struct_byte_index@4

examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr2_struct_byte_index@4:
    // box_storage/contract.py:239
    // arr2_offset = get_dynamic_arr2_struct_byte_index(arr_len, UInt64(0)) - 2
    frame_dig 3
    intc_2 // 2
    -
    // box_storage/contract.py:240
    // box.value.arr.length = arc4.UInt16(arr_len)
    frame_dig 6
    dup
    cover 2
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    pushint 6 // 6
    intc_2 // 2
    extract3
    // box_storage/contract.py:237-238
    // # resize array
    // box = Box(FixedArrayInAStruct, key=self.dynamic_arr_struct.key)
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:240
    // box.value.arr.length = arc4.UInt16(arr_len)
    box_get
    assert // check Box exists
    dup
    pushint 20 // 20
    intc 6 // 32762
    extract3
    intc_0 // 0
    uncover 3
    replace3
    uncover 1
    pushint 20 // 20
    uncover 2
    replace3
    // box_storage/contract.py:237-238
    // # resize array
    // box = Box(FixedArrayInAStruct, key=self.dynamic_arr_struct.key)
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:240
    // box.value.arr.length = arc4.UInt16(arr_len)
    uncover 1
    box_put
    // box_storage/contract.py:241
    // box.value.arr2_offset = arc4.UInt16(arr2_offset)
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    pushint 6 // 6
    intc_2 // 2
    extract3
    // box_storage/contract.py:237-238
    // # resize array
    // box = Box(FixedArrayInAStruct, key=self.dynamic_arr_struct.key)
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:241
    // box.value.arr2_offset = arc4.UInt16(arr2_offset)
    box_get
    assert // check Box exists
    pushint 18 // 18
    uncover 2
    replace3
    // box_storage/contract.py:237-238
    // # resize array
    // box = Box(FixedArrayInAStruct, key=self.dynamic_arr_struct.key)
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:241
    // box.value.arr2_offset = arc4.UInt16(arr2_offset)
    uncover 1
    box_put
    // box_storage/contract.py:242
    // index = get_dynamic_arr_struct_byte_index(arr_len)
    frame_bury 1
    b examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_block@5

examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_block@5:
    // box_storage/contract.py:491
    // head = size_of(UInt64) + size_of(arc4.UInt16) + size_of(UInt64) + size_of(arc4.UInt16)
    intc_3 // 8
    intc_2 // 2
    +
    intc_3 // 8
    +
    intc_2 // 2
    +
    // box_storage/contract.py:492
    // dyn_arr_index = size_of(arc4.UInt16) + index * size_of(UInt64)
    frame_dig 1
    intc_3 // 8
    *
    intc_2 // 2
    +
    // box_storage/contract.py:493
    // return head + dyn_arr_index
    +
    frame_bury 4
    // box_storage/contract.py:242
    // index = get_dynamic_arr_struct_byte_index(arr_len)
    b examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@6

examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@6:
    // box_storage/contract.py:242
    // index = get_dynamic_arr_struct_byte_index(arr_len)
    frame_dig 4
    // box_storage/contract.py:243
    // box.splice(index, times * size_of(UInt64), b"")
    frame_dig -1
    intc_3 // 8
    *
    // box_storage/contract.py:237-238
    // # resize array
    // box = Box(FixedArrayInAStruct, key=self.dynamic_arr_struct.key)
    bytec_1 // "dynamic_arr_struct"
    // box_storage/contract.py:243
    // box.splice(index, times * size_of(UInt64), b"")
    uncover 2
    uncover 2
    bytec_0 // 0x
    box_splice
    // box_storage/contract.py:244-247
    // # truncate box
    // # Note: this is currently the same as index, but could be different if there
    // #       were multiple dynamic arrays
    // size = get_dynamic_arr2_struct_byte_index(arr_len, arr2_len)
    frame_dig 6
    frame_bury 8
    frame_dig 7
    frame_bury 0
    b examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_block@7

examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_block@7:
    // box_storage/contract.py:498
    // head_and_dyn_arr = get_dynamic_arr_struct_byte_index(arr_size)
    frame_dig 8
    frame_bury 1
    b examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_block@8

examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_block@8:
    // box_storage/contract.py:491
    // head = size_of(UInt64) + size_of(arc4.UInt16) + size_of(UInt64) + size_of(arc4.UInt16)
    intc_3 // 8
    intc_2 // 2
    +
    intc_3 // 8
    +
    intc_2 // 2
    +
    // box_storage/contract.py:492
    // dyn_arr_index = size_of(arc4.UInt16) + index * size_of(UInt64)
    frame_dig 1
    intc_3 // 8
    *
    intc_2 // 2
    +
    // box_storage/contract.py:493
    // return head + dyn_arr_index
    +
    frame_bury 2
    // box_storage/contract.py:498
    // head_and_dyn_arr = get_dynamic_arr_struct_byte_index(arr_size)
    b examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@9

examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@9:
    // box_storage/contract.py:498
    // head_and_dyn_arr = get_dynamic_arr_struct_byte_index(arr_size)
    frame_dig 2
    // box_storage/contract.py:499
    // dyn_arr2_index = size_of(arc4.UInt16) + arr2_index * size_of(UInt64)
    frame_dig 0
    intc_3 // 8
    *
    intc_2 // 2
    +
    // box_storage/contract.py:500
    // return head_and_dyn_arr + dyn_arr2_index
    +
    frame_bury 5
    // box_storage/contract.py:244-247
    // # truncate box
    // # Note: this is currently the same as index, but could be different if there
    // #       were multiple dynamic arrays
    // size = get_dynamic_arr2_struct_byte_index(arr_len, arr2_len)
    b examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr2_struct_byte_index@10

examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr2_struct_byte_index@10:
    // box_storage/contract.py:244-247
    // # truncate box
    // # Note: this is currently the same as index, but could be different if there
    // #       were multiple dynamic arrays
    // size = get_dynamic_arr2_struct_byte_index(arr_len, arr2_len)
    frame_dig 5
    // box_storage/contract.py:248
    // self.dynamic_arr_struct.resize(size)
    bytec_1 // "dynamic_arr_struct"
    uncover 1
    box_resize
    // box_storage/contract.py:250
    // return self.dynamic_arr_struct.value.arr.length
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    pushint 18 // 18
    extract_uint16
    uncover 1
    uncover 2
    uncover 2
    substring3
    intc_0 // 0
    extract_uint16
    frame_bury 0
    retsub


// examples.box_storage.contract.BoxContract.set_nested_struct(struct: bytes) -> void:
examples.box_storage.contract.BoxContract.set_nested_struct:
    // box_storage/contract.py:252-253
    // @arc4.abimethod()
    // def set_nested_struct(self, struct: NestedStruct) -> None:
    proto 1 0
    b examples.box_storage.contract.BoxContract.set_nested_struct_block@0

examples.box_storage.contract.BoxContract.set_nested_struct_block@0:
    // box_storage/contract.py:255
    // assert struct.a, "struct.a is truthy"
    frame_dig -1
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    intc_0 // 0
    !=
    assert // struct.a is truthy
    // box_storage/contract.py:256
    // struct_bytes = Txn.application_args(1)
    txna ApplicationArgs 1
    // box_storage/contract.py:257
    // struct_size = struct_bytes.length
    dup
    len
    // box_storage/contract.py:258
    // tail_offset = UInt64(4096 + 2)
    intc 5 // 4098
    // box_storage/contract.py:259-260
    // # initialize box to zero
    // box.create(size=tail_offset + struct_size)
    +
    // box_storage/contract.py:254
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:259-260
    // # initialize box to zero
    // box.create(size=tail_offset + struct_size)
    uncover 1
    box_create
    pop
    // box_storage/contract.py:258
    // tail_offset = UInt64(4096 + 2)
    intc 5 // 4098
    // box_storage/contract.py:261-262
    // # set correct offset for dynamic portion
    // box.replace(tail_offset - 2, arc4.UInt16(tail_offset).bytes)
    intc_2 // 2
    -
    // box_storage/contract.py:258
    // tail_offset = UInt64(4096 + 2)
    intc 5 // 4098
    // box_storage/contract.py:261-262
    // # set correct offset for dynamic portion
    // box.replace(tail_offset - 2, arc4.UInt16(tail_offset).bytes)
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    pushint 6 // 6
    intc_2 // 2
    extract3
    // box_storage/contract.py:254
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:261-262
    // # set correct offset for dynamic portion
    // box.replace(tail_offset - 2, arc4.UInt16(tail_offset).bytes)
    uncover 2
    uncover 2
    box_replace
    // box_storage/contract.py:254
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:258
    // tail_offset = UInt64(4096 + 2)
    intc 5 // 4098
    // box_storage/contract.py:263-264
    // # set dynamic data
    // box.replace(tail_offset, struct_bytes)
    uncover 2
    box_replace
    retsub


// examples.box_storage.contract.BoxContract.nested_write(index: uint64, value: uint64) -> void:
examples.box_storage.contract.BoxContract.nested_write:
    // box_storage/contract.py:266-267
    // @arc4.abimethod()
    // def nested_write(self, index: UInt64, value: UInt64) -> None:
    proto 2 0
    b examples.box_storage.contract.BoxContract.nested_write_block@0

examples.box_storage.contract.BoxContract.nested_write_block@0:
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:269
    // box.value.nested.a = value
    box_get
    assert // check Box exists
    frame_dig -1
    itob
    cover 1
    dup
    intc 4 // 4096
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    intc_0 // 0
    uncover 3
    replace3
    cover 1
    dup
    intc 4 // 4096
    extract_uint16
    uncover 1
    intc_0 // 0
    uncover 2
    extract3
    uncover 1
    concat
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:269
    // box.value.nested.a = value
    box_del
    pop
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:269
    // box.value.nested.a = value
    uncover 1
    box_put
    // box_storage/contract.py:270
    // box.value.nested.b = value + 1
    frame_dig -1
    intc_1 // 1
    +
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:270
    // box.value.nested.b = value + 1
    box_get
    assert // check Box exists
    uncover 1
    itob
    cover 1
    dup
    intc 4 // 4096
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    pushint 12 // 12
    uncover 3
    replace3
    cover 1
    dup
    intc 4 // 4096
    extract_uint16
    uncover 1
    intc_0 // 0
    uncover 2
    extract3
    uncover 1
    concat
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:270
    // box.value.nested.b = value + 1
    box_del
    pop
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:270
    // box.value.nested.b = value + 1
    uncover 1
    box_put
    // box_storage/contract.py:271
    // box.value.nested.inner.arr_arr[index][index] = value + 2
    frame_dig -1
    intc_2 // 2
    +
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:271
    // box.value.nested.inner.arr_arr[index][index] = value + 2
    box_get
    assert // check Box exists
    uncover 1
    itob
    cover 1
    dup
    intc 4 // 4096
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_0 // 0
    extract_uint16
    frame_dig -2
    >
    assert // index access is out of bounds
    frame_dig -2
    intc_2 // 2
    *
    dig 2
    uncover 1
    extract_uint16
    dig 2
    dig 1
    extract_uint16
    intc_3 // 8
    *
    intc_2 // 2
    +
    uncover 3
    uncover 2
    uncover 2
    extract3
    frame_dig -2
    intc_3 // 8
    *
    intc_2 // 2
    +
    uncover 6
    replace3 // on error: index access is out of bounds
    dig 1
    intc_0 // 0
    extract_uint16
    frame_dig -2
    >
    assert // index access is out of bounds
    frame_dig -2
    callsub dynamic_array_replace_dynamic_element
    dig 1
    intc_3 // 8
    extract_uint16
    uncover 2
    intc_0 // 0
    uncover 2
    extract3
    uncover 1
    concat
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    intc_0 // 0
    dig 2
    extract3
    dig 2
    concat
    cover 1
    dig 3
    pushint 10 // 10
    extract_uint16
    cover 1
    dig 4
    len
    cover 1
    dig 5
    dig 3
    uncover 3
    substring3
    uncover 3
    uncover 1
    concat
    cover 4
    -
    uncover 1
    len
    uncover 2
    pushint 10 // 10
    extract_uint16
    +
    uncover 1
    -
    itob
    extract 6 2
    uncover 1
    pushint 10 // 10
    uncover 2
    replace3
    dig 1
    intc 4 // 4096
    extract_uint16
    uncover 2
    intc_0 // 0
    uncover 2
    extract3
    uncover 1
    concat
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:271
    // box.value.nested.inner.arr_arr[index][index] = value + 2
    box_del
    pop
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:271
    // box.value.nested.inner.arr_arr[index][index] = value + 2
    uncover 1
    box_put
    // box_storage/contract.py:272
    // box.value.nested.inner.c = value + 3
    frame_dig -1
    pushint 3 // 3
    +
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:272
    // box.value.nested.inner.c = value + 3
    box_get
    assert // check Box exists
    uncover 1
    itob
    cover 1
    dup
    intc 4 // 4096
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    intc_0 // 0
    uncover 4
    replace3
    cover 1
    dup
    intc_3 // 8
    extract_uint16
    dig 1
    intc_0 // 0
    dig 2
    extract3
    dig 3
    concat
    cover 1
    dig 2
    pushint 10 // 10
    extract_uint16
    cover 1
    dig 3
    len
    cover 1
    dig 4
    dig 3
    uncover 3
    substring3
    uncover 3
    uncover 1
    concat
    cover 4
    -
    uncover 2
    len
    uncover 2
    pushint 10 // 10
    extract_uint16
    +
    uncover 1
    -
    itob
    extract 6 2
    uncover 1
    pushint 10 // 10
    uncover 2
    replace3
    dig 1
    intc 4 // 4096
    extract_uint16
    uncover 2
    intc_0 // 0
    uncover 2
    extract3
    uncover 1
    concat
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:272
    // box.value.nested.inner.c = value + 3
    box_del
    pop
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:272
    // box.value.nested.inner.c = value + 3
    uncover 1
    box_put
    // box_storage/contract.py:273
    // box.value.nested.inner.d = value + 4
    frame_dig -1
    pushint 4 // 4
    +
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:273
    // box.value.nested.inner.d = value + 4
    box_get
    assert // check Box exists
    uncover 1
    itob
    cover 1
    dup
    intc 4 // 4096
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    pushint 10 // 10
    uncover 4
    replace3
    cover 1
    dup
    intc_3 // 8
    extract_uint16
    dig 1
    intc_0 // 0
    dig 2
    extract3
    dig 3
    concat
    cover 1
    dig 2
    pushint 10 // 10
    extract_uint16
    cover 1
    dig 3
    len
    cover 1
    dig 4
    dig 3
    uncover 3
    substring3
    uncover 3
    uncover 1
    concat
    cover 4
    -
    uncover 2
    len
    uncover 2
    pushint 10 // 10
    extract_uint16
    +
    uncover 1
    -
    itob
    extract 6 2
    uncover 1
    pushint 10 // 10
    uncover 2
    replace3
    dig 1
    intc 4 // 4096
    extract_uint16
    uncover 2
    intc_0 // 0
    uncover 2
    extract3
    uncover 1
    concat
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:273
    // box.value.nested.inner.d = value + 4
    box_del
    pop
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:273
    // box.value.nested.inner.d = value + 4
    uncover 1
    box_put
    // box_storage/contract.py:274
    // box.value.nested.woah[index].arr_arr[index][index] = value + 5
    frame_dig -1
    pushint 5 // 5
    +
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:274
    // box.value.nested.woah[index].arr_arr[index][index] = value + 5
    box_get
    assert // check Box exists
    uncover 1
    itob
    cover 1
    dup
    intc 4 // 4096
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    dup
    pushint 10 // 10
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_0 // 0
    extract_uint16
    cover 1
    frame_dig -2
    intc_2 // 2
    *
    dig 3
    uncover 1
    extract_uint16
    cover 2
    frame_dig -2
    intc_1 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 4
    len
    cover 2
    intc_2 // 2
    *
    dig 5
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 3
    uncover 3
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    dup
    uncover 3
    uncover 3
    substring3
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    dup
    intc_0 // 0
    extract_uint16
    frame_dig -2
    >
    assert // index access is out of bounds
    frame_dig -2
    intc_2 // 2
    *
    dig 2
    uncover 1
    extract_uint16
    dig 2
    dig 1
    extract_uint16
    intc_3 // 8
    *
    intc_2 // 2
    +
    uncover 3
    uncover 2
    uncover 2
    extract3
    frame_dig -2
    intc_3 // 8
    *
    intc_2 // 2
    +
    uncover 7
    replace3 // on error: index access is out of bounds
    dig 1
    intc_0 // 0
    extract_uint16
    frame_dig -2
    >
    assert // index access is out of bounds
    frame_dig -2
    callsub dynamic_array_replace_dynamic_element
    dig 1
    intc_3 // 8
    extract_uint16
    uncover 2
    intc_0 // 0
    uncover 2
    extract3
    uncover 1
    concat
    dig 1
    intc_0 // 0
    extract_uint16
    frame_dig -2
    >
    assert // index access is out of bounds
    frame_dig -2
    callsub dynamic_array_replace_dynamic_element
    dig 1
    pushint 10 // 10
    extract_uint16
    uncover 2
    intc_0 // 0
    uncover 2
    extract3
    uncover 1
    concat
    dig 1
    intc 4 // 4096
    extract_uint16
    uncover 2
    intc_0 // 0
    uncover 2
    extract3
    uncover 1
    concat
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:274
    // box.value.nested.woah[index].arr_arr[index][index] = value + 5
    box_del
    pop
    // box_storage/contract.py:268
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:274
    // box.value.nested.woah[index].arr_arr[index][index] = value + 5
    uncover 1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.nested_read(i1: uint64, i2: uint64, i3: uint64) -> uint64:
examples.box_storage.contract.BoxContract.nested_read:
    // box_storage/contract.py:276-277
    // @arc4.abimethod()
    // def nested_read(self, i1: UInt64, i2: UInt64, i3: UInt64) -> UInt64:
    proto 3 1
    b examples.box_storage.contract.BoxContract.nested_read_block@0

examples.box_storage.contract.BoxContract.nested_read_block@0:
    // box_storage/contract.py:278
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:279
    // a = box.value.nested.a
    box_get
    assert // check Box exists
    dup
    intc 4 // 4096
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    // box_storage/contract.py:278
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:280
    // b = box.value.nested.b
    box_get
    assert // check Box exists
    dup
    intc 4 // 4096
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    pushint 12 // 12
    intc_3 // 8
    extract3
    btoi
    // box_storage/contract.py:278
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:281
    // arr_arr = box.value.nested.inner.arr_arr[i1][i2]
    box_get
    assert // check Box exists
    dup
    intc 4 // 4096
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    uncover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    intc_0 // 0
    extract_uint16
    frame_dig -3
    >
    assert // index access is out of bounds
    frame_dig -3
    intc_2 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    dup2
    extract_uint16
    intc_3 // 8
    *
    intc_2 // 2
    +
    uncover 2
    uncover 2
    uncover 2
    extract3
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    frame_dig -2
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    // box_storage/contract.py:278
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:282
    // c = box.value.nested.inner.c
    box_get
    assert // check Box exists
    dup
    intc 4 // 4096
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    uncover 1
    uncover 2
    uncover 2
    substring3
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    // box_storage/contract.py:278
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:283
    // d = box.value.nested.inner.d
    box_get
    assert // check Box exists
    dup
    intc 4 // 4096
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    pushint 10 // 10
    extract_uint16
    uncover 1
    uncover 2
    uncover 2
    substring3
    pushint 10 // 10
    intc_3 // 8
    extract3
    btoi
    // box_storage/contract.py:278
    // box = Box(LargeNestedStruct, key="box")
    bytec_2 // "box"
    // box_storage/contract.py:284
    // woah_arr_arr = box.value.nested.woah[i1].arr_arr[i2][i3]
    box_get
    assert // check Box exists
    dup
    intc 4 // 4096
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    pushint 10 // 10
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    intc_0 // 0
    extract_uint16
    cover 1
    frame_dig -3
    intc_2 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    cover 2
    frame_dig -3
    intc_1 // 1
    +
    uncover 2
    dig 1
    - // on error: index access is out of bounds
    cover 2
    dig 1
    len
    cover 2
    intc_2 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    uncover 2
    uncover 1
    uncover 3
    select
    uncover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    len
    cover 1
    dup
    intc_2 // 2
    uncover 3
    substring3
    cover 1
    intc_0 // 0
    extract_uint16
    frame_dig -2
    >
    assert // index access is out of bounds
    frame_dig -2
    intc_2 // 2
    *
    dig 1
    uncover 1
    extract_uint16
    dup2
    extract_uint16
    intc_3 // 8
    *
    intc_2 // 2
    +
    uncover 2
    uncover 2
    uncover 2
    extract3
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    frame_dig -1
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    // box_storage/contract.py:286
    // return a + b + arr_arr + c + d + woah_arr_arr
    uncover 5
    uncover 5
    +
    uncover 4
    +
    uncover 3
    +
    uncover 2
    +
    +
    retsub


// examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct() -> uint64:
examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct:
    // box_storage/contract.py:288-289
    // @arc4.abimethod
    // def sum_dynamic_arr_struct(self) -> UInt64:
    proto 0 1
    intc_0 // 0
    bytec_0 // ""
    bytec_0 // ""
    b examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_block@0

examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_block@0:
    // box_storage/contract.py:290
    // assert self.dynamic_arr_struct.value.a == 1, "expected 1"
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    intc_1 // 1
    ==
    assert // expected 1
    // box_storage/contract.py:291
    // assert self.dynamic_arr_struct.value.b == 2, "expected 2"
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    pushint 10 // 10
    intc_3 // 8
    extract3
    btoi
    intc_2 // 2
    ==
    assert // expected 2
    // box_storage/contract.py:292
    // total = self.dynamic_arr_struct.value.a + self.dynamic_arr_struct.value.b
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    intc_0 // 0
    intc_3 // 8
    extract3
    btoi
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    pushint 10 // 10
    intc_3 // 8
    extract3
    btoi
    +
    // box_storage/contract.py:293
    // for val in self.dynamic_arr_struct.value.arr:
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    pushint 18 // 18
    extract_uint16
    uncover 1
    uncover 2
    uncover 2
    substring3
    dup
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    b examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_header@1

examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_header@1:
    // box_storage/contract.py:293
    // for val in self.dynamic_arr_struct.value.arr:
    frame_dig 6
    frame_dig 5
    <
    bz examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_after_for@4
    b examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_body@2

examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_body@2:
    // box_storage/contract.py:293
    // for val in self.dynamic_arr_struct.value.arr:
    frame_dig 4
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    frame_dig 6
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    // box_storage/contract.py:294
    // total += val
    frame_dig 3
    +
    frame_bury 3
    b examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_footer@3

examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_footer@3:
    frame_dig 6
    intc_1 // 1
    +
    frame_bury 6
    b examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_header@1

examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_after_for@4:
    // box_storage/contract.py:295
    // for val in self.dynamic_arr_struct.value.arr2:
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    dup
    pushint 18 // 18
    extract_uint16
    cover 1
    dup
    len
    cover 1
    uncover 2
    uncover 2
    substring3
    dup
    frame_bury 0
    intc_0 // 0
    extract_uint16
    frame_bury 1
    intc_0 // 0
    frame_bury 2
    b examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_header@5

examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_header@5:
    // box_storage/contract.py:295
    // for val in self.dynamic_arr_struct.value.arr2:
    frame_dig 2
    frame_dig 1
    <
    bz examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_after_for@8
    b examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_body@6

examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_body@6:
    // box_storage/contract.py:295
    // for val in self.dynamic_arr_struct.value.arr2:
    frame_dig 0
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    frame_dig 2
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    // box_storage/contract.py:296
    // total += val
    frame_dig 3
    +
    frame_bury 3
    b examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_footer@7

examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_footer@7:
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_for_header@5

examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct_after_for@8:
    // box_storage/contract.py:297
    // return total
    frame_dig 3
    frame_bury 0
    retsub


// examples.box_storage.contract.BoxContract.create_bools() -> void:
examples.box_storage.contract.BoxContract.create_bools:
    b examples.box_storage.contract.BoxContract.create_bools_block@0

examples.box_storage.contract.BoxContract.create_bools_block@0:
    // box_storage/contract.py:301
    // self.too_many_bools.create()
    bytec 16 // "too_many_bools"
    pushint 4125 // 4125
    box_create
    pop
    retsub


// examples.box_storage.contract.BoxContract.set_bool(index: uint64, value: uint64) -> void:
examples.box_storage.contract.BoxContract.set_bool:
    // box_storage/contract.py:303-304
    // @arc4.abimethod
    // def set_bool(self, index: UInt64, value: bool) -> None:
    proto 2 0
    b examples.box_storage.contract.BoxContract.set_bool_block@0

examples.box_storage.contract.BoxContract.set_bool_block@0:
    // box_storage/contract.py:305
    // self.too_many_bools.value[index] = value
    bytec 16 // "too_many_bools"
    box_get
    assert // check self.too_many_bools exists
    frame_dig -1
    frame_dig -2
    intc 7 // 33000
    <
    assert // index access is out of bounds
    frame_dig -2
    intc 7 // 33000
    <
    assert // index access is out of bounds
    uncover 1
    frame_dig -2
    uncover 2
    setbit
    bytec 16 // "too_many_bools"
    uncover 1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.sum_bools(stop_at_total: uint64) -> uint64:
examples.box_storage.contract.BoxContract.sum_bools:
    // box_storage/contract.py:307-308
    // @arc4.abimethod()
    // def sum_bools(self, stop_at_total: UInt64) -> UInt64:
    proto 1 1
    bytec_0 // ""
    b examples.box_storage.contract.BoxContract.sum_bools_block@0

examples.box_storage.contract.BoxContract.sum_bools_block@0:
    // box_storage/contract.py:309
    // total = UInt64()
    intc_0 // 0
    // box_storage/contract.py:310
    // for value in self.too_many_bools.value:
    bytec 16 // "too_many_bools"
    box_get
    assert // check self.too_many_bools exists
    intc_0 // 0
    b examples.box_storage.contract.BoxContract.sum_bools_for_header@1

examples.box_storage.contract.BoxContract.sum_bools_for_header@1:
    // box_storage/contract.py:310
    // for value in self.too_many_bools.value:
    frame_dig 3
    intc 7 // 33000
    <
    frame_dig 1
    frame_bury 0
    bz examples.box_storage.contract.BoxContract.sum_bools_after_for@8
    b examples.box_storage.contract.BoxContract.sum_bools_for_body@2

examples.box_storage.contract.BoxContract.sum_bools_for_body@2:
    // box_storage/contract.py:310
    // for value in self.too_many_bools.value:
    frame_dig 2
    frame_dig 3
    getbit
    frame_dig 1
    frame_bury 0
    // box_storage/contract.py:311
    // if value:
    bz examples.box_storage.contract.BoxContract.sum_bools_after_if_else@4
    b examples.box_storage.contract.BoxContract.sum_bools_if_body@3

examples.box_storage.contract.BoxContract.sum_bools_if_body@3:
    // box_storage/contract.py:312
    // total += 1
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 0
    b examples.box_storage.contract.BoxContract.sum_bools_after_if_else@4

examples.box_storage.contract.BoxContract.sum_bools_after_if_else@4:
    // box_storage/contract.py:313
    // if total == stop_at_total:
    frame_dig 0
    frame_dig -1
    ==
    bz examples.box_storage.contract.BoxContract.sum_bools_after_if_else@6
    b examples.box_storage.contract.BoxContract.sum_bools_if_body@5

examples.box_storage.contract.BoxContract.sum_bools_if_body@5:
    // box_storage/contract.py:314
    // break
    b examples.box_storage.contract.BoxContract.sum_bools_after_for@8

examples.box_storage.contract.BoxContract.sum_bools_after_for@8:
    // box_storage/contract.py:315
    // return total
    retsub

examples.box_storage.contract.BoxContract.sum_bools_after_if_else@6:
    b examples.box_storage.contract.BoxContract.sum_bools_for_footer@7

examples.box_storage.contract.BoxContract.sum_bools_for_footer@7:
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    frame_dig 0
    frame_bury 1
    b examples.box_storage.contract.BoxContract.sum_bools_for_header@1


// examples.box_storage.contract.BoxContract.create_dynamic_box() -> void:
examples.box_storage.contract.BoxContract.create_dynamic_box:
    b examples.box_storage.contract.BoxContract.create_dynamic_box_block@0

examples.box_storage.contract.BoxContract.create_dynamic_box_block@0:
    // box_storage/contract.py:319
    // self.dynamic_box.value = Array[UInt64]()
    intc_0 // 0
    itob
    extract 6 2
    bytec 5 // "dynamic_box"
    box_del
    pop
    bytec 5 // "dynamic_box"
    uncover 1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.delete_dynamic_box() -> void:
examples.box_storage.contract.BoxContract.delete_dynamic_box:
    b examples.box_storage.contract.BoxContract.delete_dynamic_box_block@0

examples.box_storage.contract.BoxContract.delete_dynamic_box_block@0:
    // box_storage/contract.py:323
    // del self.dynamic_box.value
    bytec 5 // "dynamic_box"
    box_del
    pop
    retsub


// examples.box_storage.contract.BoxContract.append_dynamic_box(times: uint64) -> uint64:
examples.box_storage.contract.BoxContract.append_dynamic_box:
    // box_storage/contract.py:325-326
    // @arc4.abimethod
    // def append_dynamic_box(self, times: UInt64) -> UInt64:
    proto 1 1
    b examples.box_storage.contract.BoxContract.append_dynamic_box_block@0

examples.box_storage.contract.BoxContract.append_dynamic_box_block@0:
    // box_storage/contract.py:329
    // box = Box(FixedArrayUInt64, key=self.dynamic_box.key)
    bytec 5 // "dynamic_box"
    // box_storage/contract.py:330
    // arr_len = box.value.length.as_uint64()
    box_get
    assert // check Box exists
    intc_0 // 0
    intc_2 // 2
    extract3
    btoi
    dup
    // box_storage/contract.py:332
    // self.dynamic_box.resize(2 + (arr_len + times) * 8)
    frame_dig -1
    +
    intc_3 // 8
    *
    intc_2 // 2
    +
    bytec 5 // "dynamic_box"
    uncover 1
    box_resize
    // box_storage/contract.py:333
    // for i in urange(times):
    intc_1 // 1
    assert // Step cannot be zero
    intc_0 // 0
    b examples.box_storage.contract.BoxContract.append_dynamic_box_for_header@1

examples.box_storage.contract.BoxContract.append_dynamic_box_for_header@1:
    // box_storage/contract.py:333
    // for i in urange(times):
    frame_dig 1
    frame_dig -1
    <
    bz examples.box_storage.contract.BoxContract.append_dynamic_box_after_for@4
    b examples.box_storage.contract.BoxContract.append_dynamic_box_for_body@2

examples.box_storage.contract.BoxContract.append_dynamic_box_for_body@2:
    // box_storage/contract.py:333
    // for i in urange(times):
    frame_dig 1
    // box_storage/contract.py:329
    // box = Box(FixedArrayUInt64, key=self.dynamic_box.key)
    bytec 5 // "dynamic_box"
    // box_storage/contract.py:334
    // box.value.arr[arr_len] = i
    box_get
    assert // check Box exists
    uncover 1
    itob
    cover 1
    dup
    intc_2 // 2
    intc 8 // 32760
    extract3
    frame_dig 0
    dup
    cover 4
    intc_3 // 8
    *
    uncover 3
    replace3 // on error: index access is out of bounds
    uncover 1
    intc_2 // 2
    uncover 2
    replace3
    // box_storage/contract.py:329
    // box = Box(FixedArrayUInt64, key=self.dynamic_box.key)
    bytec 5 // "dynamic_box"
    // box_storage/contract.py:334
    // box.value.arr[arr_len] = i
    uncover 1
    box_put
    // box_storage/contract.py:335
    // arr_len += 1
    intc_1 // 1
    +
    frame_bury 0
    b examples.box_storage.contract.BoxContract.append_dynamic_box_for_footer@3

examples.box_storage.contract.BoxContract.append_dynamic_box_for_footer@3:
    // box_storage/contract.py:333
    // for i in urange(times):
    frame_dig 1
    intc_1 // 1
    +
    frame_bury 1
    b examples.box_storage.contract.BoxContract.append_dynamic_box_for_header@1

examples.box_storage.contract.BoxContract.append_dynamic_box_after_for@4:
    // box_storage/contract.py:337
    // box.value.length = arc4.UInt16(arr_len)
    frame_dig 0
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    pushint 6 // 6
    intc_2 // 2
    extract3
    // box_storage/contract.py:329
    // box = Box(FixedArrayUInt64, key=self.dynamic_box.key)
    bytec 5 // "dynamic_box"
    // box_storage/contract.py:337
    // box.value.length = arc4.UInt16(arr_len)
    box_get
    assert // check Box exists
    intc_0 // 0
    uncover 2
    replace3
    // box_storage/contract.py:329
    // box = Box(FixedArrayUInt64, key=self.dynamic_box.key)
    bytec 5 // "dynamic_box"
    // box_storage/contract.py:337
    // box.value.length = arc4.UInt16(arr_len)
    uncover 1
    box_put
    // box_storage/contract.py:338
    // return self.dynamic_box.value.length
    bytec 5 // "dynamic_box"
    box_get
    assert // check self.dynamic_box exists
    intc_0 // 0
    extract_uint16
    frame_bury 0
    retsub


// examples.box_storage.contract.BoxContract.pop_dynamic_box(times: uint64) -> uint64:
examples.box_storage.contract.BoxContract.pop_dynamic_box:
    // box_storage/contract.py:340-341
    // @arc4.abimethod
    // def pop_dynamic_box(self, times: UInt64) -> UInt64:
    proto 1 1
    b examples.box_storage.contract.BoxContract.pop_dynamic_box_block@0

examples.box_storage.contract.BoxContract.pop_dynamic_box_block@0:
    // box_storage/contract.py:344
    // box = Box(FixedArrayUInt64, key=self.dynamic_box.key)
    bytec 5 // "dynamic_box"
    // box_storage/contract.py:345
    // arr_len = box.value.length.as_uint64() - times
    box_get
    assert // check Box exists
    intc_0 // 0
    intc_2 // 2
    extract3
    btoi
    frame_dig -1
    -
    // box_storage/contract.py:346
    // box.value.length = arc4.UInt16(arr_len)
    dup
    itob
    dup
    bitlen
    pushint 16 // 16
    <=
    assert // overflow
    pushint 6 // 6
    intc_2 // 2
    extract3
    // box_storage/contract.py:344
    // box = Box(FixedArrayUInt64, key=self.dynamic_box.key)
    bytec 5 // "dynamic_box"
    // box_storage/contract.py:346
    // box.value.length = arc4.UInt16(arr_len)
    box_get
    assert // check Box exists
    intc_0 // 0
    uncover 2
    replace3
    // box_storage/contract.py:344
    // box = Box(FixedArrayUInt64, key=self.dynamic_box.key)
    bytec 5 // "dynamic_box"
    // box_storage/contract.py:346
    // box.value.length = arc4.UInt16(arr_len)
    uncover 1
    box_put
    // box_storage/contract.py:347
    // self.dynamic_box.resize(2 + arr_len * 8)
    intc_3 // 8
    *
    intc_2 // 2
    +
    bytec 5 // "dynamic_box"
    uncover 1
    box_resize
    // box_storage/contract.py:349
    // return self.dynamic_box.value.length
    bytec 5 // "dynamic_box"
    box_get
    assert // check self.dynamic_box exists
    intc_0 // 0
    extract_uint16
    retsub


// examples.box_storage.contract.BoxContract.sum_dynamic_box() -> uint64:
examples.box_storage.contract.BoxContract.sum_dynamic_box:
    // box_storage/contract.py:351-352
    // @arc4.abimethod
    // def sum_dynamic_box(self) -> UInt64:
    proto 0 1
    b examples.box_storage.contract.BoxContract.sum_dynamic_box_block@0

examples.box_storage.contract.BoxContract.sum_dynamic_box_block@0:
    // box_storage/contract.py:353
    // total = UInt64()
    intc_0 // 0
    // box_storage/contract.py:354
    // for val in self.dynamic_box.value:
    bytec 5 // "dynamic_box"
    box_get
    assert // check self.dynamic_box exists
    dup
    intc_0 // 0
    extract_uint16
    intc_0 // 0
    b examples.box_storage.contract.BoxContract.sum_dynamic_box_for_header@1

examples.box_storage.contract.BoxContract.sum_dynamic_box_for_header@1:
    // box_storage/contract.py:354
    // for val in self.dynamic_box.value:
    frame_dig 3
    frame_dig 2
    <
    bz examples.box_storage.contract.BoxContract.sum_dynamic_box_after_for@4
    b examples.box_storage.contract.BoxContract.sum_dynamic_box_for_body@2

examples.box_storage.contract.BoxContract.sum_dynamic_box_for_body@2:
    // box_storage/contract.py:354
    // for val in self.dynamic_box.value:
    frame_dig 1
    dup
    len
    cover 1
    intc_2 // 2
    uncover 2
    substring3
    frame_dig 3
    intc_3 // 8
    *
    intc_3 // 8
    extract3 // on error: index access is out of bounds
    btoi
    // box_storage/contract.py:355
    // total += val
    frame_dig 0
    +
    frame_bury 0
    b examples.box_storage.contract.BoxContract.sum_dynamic_box_for_footer@3

examples.box_storage.contract.BoxContract.sum_dynamic_box_for_footer@3:
    frame_dig 3
    intc_1 // 1
    +
    frame_bury 3
    b examples.box_storage.contract.BoxContract.sum_dynamic_box_for_header@1

examples.box_storage.contract.BoxContract.sum_dynamic_box_after_for@4:
    // box_storage/contract.py:356
    // return total
    retsub


// examples.box_storage.contract.BoxContract.write_dynamic_box(index: uint64, value: uint64) -> void:
examples.box_storage.contract.BoxContract.write_dynamic_box:
    // box_storage/contract.py:358-359
    // @arc4.abimethod
    // def write_dynamic_box(self, index: UInt64, value: UInt64) -> None:
    proto 2 0
    b examples.box_storage.contract.BoxContract.write_dynamic_box_block@0

examples.box_storage.contract.BoxContract.write_dynamic_box_block@0:
    // box_storage/contract.py:360
    // self.dynamic_box.value[index] = value
    bytec 5 // "dynamic_box"
    box_get
    assert // check self.dynamic_box exists
    frame_dig -1
    itob
    frame_dig -2
    intc_3 // 8
    *
    intc_2 // 2
    +
    uncover 2
    uncover 1
    uncover 2
    replace3 // on error: index access is out of bounds
    bytec 5 // "dynamic_box"
    box_del
    pop
    bytec 5 // "dynamic_box"
    uncover 1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.write_dynamic_arr_struct(index: uint64, value: uint64) -> void:
examples.box_storage.contract.BoxContract.write_dynamic_arr_struct:
    // box_storage/contract.py:362-363
    // @arc4.abimethod
    // def write_dynamic_arr_struct(self, index: UInt64, value: UInt64) -> None:
    proto 2 0
    b examples.box_storage.contract.BoxContract.write_dynamic_arr_struct_block@0

examples.box_storage.contract.BoxContract.write_dynamic_arr_struct_block@0:
    // box_storage/contract.py:364
    // self.dynamic_arr_struct.value.arr[index] = value
    bytec_1 // "dynamic_arr_struct"
    box_get
    assert // check self.dynamic_arr_struct exists
    frame_dig -1
    itob
    cover 1
    dup
    intc_3 // 8
    extract_uint16
    cover 1
    dup
    pushint 18 // 18
    extract_uint16
    dig 1
    uncover 3
    uncover 2
    substring3
    frame_dig -2
    intc_3 // 8
    *
    intc_2 // 2
    +
    uncover 3
    replace3 // on error: index access is out of bounds
    dig 1
    intc_3 // 8
    extract_uint16
    dig 2
    intc_0 // 0
    dig 2
    extract3
    dig 2
    concat
    cover 1
    dig 3
    pushint 18 // 18
    extract_uint16
    cover 1
    dig 4
    len
    cover 1
    dig 5
    dig 3
    uncover 3
    substring3
    uncover 3
    uncover 1
    concat
    cover 4
    -
    uncover 1
    len
    uncover 2
    pushint 18 // 18
    extract_uint16
    +
    uncover 1
    -
    itob
    extract 6 2
    uncover 1
    pushint 18 // 18
    uncover 2
    replace3
    bytec_1 // "dynamic_arr_struct"
    box_del
    pop
    bytec_1 // "dynamic_arr_struct"
    uncover 1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.slice_box() -> void:
examples.box_storage.contract.BoxContract.slice_box:
    // box_storage/contract.py:366-367
    // @arc4.abimethod
    // def slice_box(self) -> None:
    proto 0 0
    b examples.box_storage.contract.BoxContract.slice_box_block@0

examples.box_storage.contract.BoxContract.slice_box_block@0:
    // box_storage/contract.py:368
    // box_0 = Box(Bytes, key=String("0"))
    bytec 17 // "0"
    // box_storage/contract.py:369
    // box_0.value = Bytes(b"Testing testing 123")
    box_del
    pop
    // box_storage/contract.py:368
    // box_0 = Box(Bytes, key=String("0"))
    bytec 17 // "0"
    // box_storage/contract.py:369
    // box_0.value = Bytes(b"Testing testing 123")
    pushbytes 0x54657374696e672074657374696e6720313233
    box_put
    // box_storage/contract.py:368
    // box_0 = Box(Bytes, key=String("0"))
    bytec 17 // "0"
    // box_storage/contract.py:370
    // assert box_0.value[0:7] == b"Testing"
    box_len
    cover 1
    intc_0 // 0
    dig 1
    <
    cover 1
    dup
    intc_0 // 0
    uncover 3
    select
    cover 1
    pushint 7 // 7
    dig 1
    <
    cover 1
    pushint 7 // 7
    uncover 2
    select
    dig 1
    -
    // box_storage/contract.py:368
    // box_0 = Box(Bytes, key=String("0"))
    bytec 17 // "0"
    // box_storage/contract.py:370
    // assert box_0.value[0:7] == b"Testing"
    uncover 2
    uncover 2
    box_extract
    pushbytes 0x54657374696e67
    ==
    assert
    // box_storage/contract.py:372
    // self.box_c.value = arc4.String("Hello")
    bytec 18 // "Hello"
    len
    itob
    extract 6 2
    bytec 18 // "Hello"
    concat
    bytec 4 // 0x424f585f43
    box_del
    pop
    bytec 4 // 0x424f585f43
    uncover 1
    box_put
    // box_storage/contract.py:373
    // assert self.box_c.value.bytes[2:10] == b"Hello"
    bytec 4 // 0x424f585f43
    box_len
    cover 1
    intc_2 // 2
    dig 1
    <
    cover 1
    dup
    intc_2 // 2
    uncover 3
    select
    cover 1
    pushint 10 // 10
    dig 1
    <
    cover 1
    pushint 10 // 10
    uncover 2
    select
    dig 1
    -
    bytec 4 // 0x424f585f43
    uncover 2
    uncover 2
    box_extract
    bytec 18 // 0x48656c6c6f
    ==
    assert
    retsub


// examples.box_storage.contract.BoxContract.arc4_box() -> void:
examples.box_storage.contract.BoxContract.arc4_box:
    b examples.box_storage.contract.BoxContract.arc4_box_block@0

examples.box_storage.contract.BoxContract.arc4_box_block@0:
    // box_storage/contract.py:378
    // box_d.value = StaticInts(arc4.UInt8(0), arc4.UInt8(1), arc4.UInt8(2), arc4.UInt8(3))
    bytec_0 // 0x
    bytec 14 // 0x00
    concat
    pushbytes 0x01
    concat
    pushbytes 0x02
    concat
    pushbytes 0x03
    concat
    // box_storage/contract.py:377
    // box_d = Box(StaticInts, key=Bytes(b"d"))
    bytec 12 // 0x64
    // box_storage/contract.py:378
    // box_d.value = StaticInts(arc4.UInt8(0), arc4.UInt8(1), arc4.UInt8(2), arc4.UInt8(3))
    uncover 1
    box_put
    // box_storage/contract.py:377
    // box_d = Box(StaticInts, key=Bytes(b"d"))
    bytec 12 // 0x64
    // box_storage/contract.py:380
    // assert box_d.value[0] == 0
    box_get
    assert // check Box exists
    intc_0 // 0
    intc_1 // 1
    *
    intc_1 // 1
    extract3 // on error: index access is out of bounds
    bytec 14 // 0x00
    b==
    assert
    // box_storage/contract.py:377
    // box_d = Box(StaticInts, key=Bytes(b"d"))
    bytec 12 // 0x64
    // box_storage/contract.py:381
    // assert box_d.value[1] == 1
    box_get
    assert // check Box exists
    intc_1 // 1
    intc_1 // 1
    *
    intc_1 // 1
    extract3 // on error: index access is out of bounds
    pushbytes 0x01
    b==
    assert
    // box_storage/contract.py:377
    // box_d = Box(StaticInts, key=Bytes(b"d"))
    bytec 12 // 0x64
    // box_storage/contract.py:382
    // assert box_d.value[2] == 2
    box_get
    assert // check Box exists
    intc_2 // 2
    intc_1 // 1
    *
    intc_1 // 1
    extract3 // on error: index access is out of bounds
    pushbytes 0x02
    b==
    assert
    // box_storage/contract.py:377
    // box_d = Box(StaticInts, key=Bytes(b"d"))
    bytec 12 // 0x64
    // box_storage/contract.py:383
    // assert box_d.value[3] == 3
    box_get
    assert // check Box exists
    pushint 3 // 3
    intc_1 // 1
    *
    intc_1 // 1
    extract3 // on error: index access is out of bounds
    pushbytes 0x03
    b==
    assert
    retsub


// examples.box_storage.contract.BoxContract.test_box_ref() -> void:
examples.box_storage.contract.BoxContract.test_box_ref:
    // box_storage/contract.py:385-386
    // @arc4.abimethod
    // def test_box_ref(self) -> None:
    proto 0 0
    b examples.box_storage.contract.BoxContract.test_box_ref_block@0

examples.box_storage.contract.BoxContract.test_box_ref_block@0:
    // box_storage/contract.py:387-388
    // # init ref, with valid key types
    // box_ref = Box(Bytes, key="blob")
    bytec_3 // "blob"
    // box_storage/contract.py:389
    // assert not box_ref, "no data"
    box_len
    !
    assert // no data
    // box_storage/contract.py:390
    // box_ref = Box(Bytes, key=b"blob")
    bytec_3 // 0x626c6f62
    // box_storage/contract.py:391
    // assert not box_ref, "no data"
    box_len
    !
    assert // no data
    // box_storage/contract.py:392
    // box_ref = Box(Bytes, key=Bytes(b"blob"))
    bytec_3 // 0x626c6f62
    // box_storage/contract.py:393
    // assert not box_ref, "no data"
    box_len
    !
    assert // no data
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:395
    // assert not box_ref, "no data"
    box_len
    !
    assert // no data
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:397-398
    // # create
    // assert box_ref.create(size=UInt64(32))
    pushint 32 // 32
    box_create
    assert
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:399
    // assert box_ref, "has data"
    box_len
    assert // has data
    // box_storage/contract.py:401-402
    // # manipulate data
    // sender_bytes = Txn.sender.bytes
    txn Sender
    // box_storage/contract.py:403
    // app_address = Global.current_application_address.bytes
    global CurrentApplicationAddress
    cover 1
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:405
    // box_ref.replace(0, sender_bytes)
    intc_0 // 0
    dig 2
    box_replace
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:406
    // box_ref.resize(8000)
    pushint 8000 // 8000
    box_resize
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:407
    // box_ref.splice(0, 0, app_address)
    intc_0 // 0
    intc_0 // 0
    dig 4
    box_splice
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:408
    // box_ref.replace(64, value_3)
    pushint 64 // 64
    // box_storage/contract.py:404
    // value_3 = Bytes(b"hello")
    bytec 13 // 0x68656c6c6f
    // box_storage/contract.py:408
    // box_ref.replace(64, value_3)
    box_replace
    // box_storage/contract.py:404
    // value_3 = Bytes(b"hello")
    bytec 13 // 0x68656c6c6f
    // box_storage/contract.py:409
    // prefix = box_ref.extract(0, 32 * 2 + value_3.length)
    len
    pushint 64 // 64
    +
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:409
    // prefix = box_ref.extract(0, 32 * 2 + value_3.length)
    intc_0 // 0
    uncover 2
    box_extract
    // box_storage/contract.py:410
    // assert prefix == app_address + sender_bytes + value_3
    dig 2
    dig 2
    concat
    // box_storage/contract.py:404
    // value_3 = Bytes(b"hello")
    bytec 13 // 0x68656c6c6f
    // box_storage/contract.py:410
    // assert prefix == app_address + sender_bytes + value_3
    concat
    ==
    assert
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:412-413
    // # delete
    // del box_ref.value
    box_del
    pop
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:414
    // assert box_ref.key == b"blob"
    bytec_3 // 0x626c6f62
    ==
    assert
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:416-417
    // # query
    // value, exists = box_ref.maybe()
    box_get
    // box_storage/contract.py:418
    // assert not exists
    !
    assert
    // box_storage/contract.py:419
    // assert value == b""
    bytec_0 // 0x
    ==
    assert
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:420
    // assert box_ref.get(default=sender_bytes) == sender_bytes
    box_get
    cover 1
    dig 2
    uncover 1
    uncover 2
    select
    dig 1
    ==
    assert
    // box_storage/contract.py:422-423
    // # update
    // box_ref.value = sender_bytes + app_address
    uncover 1
    concat
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:422-423
    // # update
    // box_ref.value = sender_bytes + app_address
    box_del
    pop
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:422-423
    // # update
    // box_ref.value = sender_bytes + app_address
    uncover 1
    box_put
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:424
    // assert box_ref, "Blob exists"
    box_len
    assert // Blob exists
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:425
    // assert box_ref.length == 64
    box_len
    assert // check Box exists
    pushint 64 // 64
    ==
    assert
    // box_storage/contract.py:394
    // box_ref = Box(Bytes, key=String("blob"))
    bytec_3 // "blob"
    // box_storage/contract.py:426
    // assert get_box_ref_length(box_ref) == 64
    callsub get_box_ref_length
    pushint 64 // 64
    ==
    assert
    // box_storage/contract.py:428-429
    // # instance box ref
    // self.box_ref.create(size=UInt64(32))
    bytec 19 // "box_ref"
    pushint 32 // 32
    box_create
    pop
    // box_storage/contract.py:430
    // assert self.box_ref, "has data"
    bytec 19 // "box_ref"
    box_len
    assert // has data
    // box_storage/contract.py:431
    // del self.box_ref.value
    bytec 19 // "box_ref"
    box_del
    pop
    retsub


// examples.box_storage.contract.BoxContract.box_map_test() -> void:
examples.box_storage.contract.BoxContract.box_map_test:
    // box_storage/contract.py:433-434
    // @arc4.abimethod
    // def box_map_test(self) -> None:
    proto 0 0
    b examples.box_storage.contract.BoxContract.box_map_test_block@0

examples.box_storage.contract.BoxContract.box_map_test_block@0:
    // box_storage/contract.py:435
    // key_0 = UInt64(0)
    intc_0 // 0
    // box_storage/contract.py:438
    // self.box_map[key_0] = value
    itob
    bytec_0 // ""
    uncover 1
    concat
    dup
    box_del
    pop
    // box_storage/contract.py:437
    // value = String("Hmmmmm")
    bytec 20 // "Hmmmmm"
    // box_storage/contract.py:438
    // self.box_map[key_0] = value
    box_put
    // box_storage/contract.py:435
    // key_0 = UInt64(0)
    intc_0 // 0
    // box_storage/contract.py:439
    // box_0 = self.box_map.box(key_0)
    itob
    bytec_0 // ""
    uncover 1
    concat
    // box_storage/contract.py:435
    // key_0 = UInt64(0)
    intc_0 // 0
    // box_storage/contract.py:441
    // assert self.box_map[key_0].bytes.length == value.bytes.length
    itob
    bytec_0 // ""
    uncover 1
    concat
    box_len
    assert // check self.box_map entry exists
    // box_storage/contract.py:437
    // value = String("Hmmmmm")
    bytec 20 // "Hmmmmm"
    // box_storage/contract.py:441
    // assert self.box_map[key_0].bytes.length == value.bytes.length
    len
    ==
    assert
    // box_storage/contract.py:435
    // key_0 = UInt64(0)
    intc_0 // 0
    // box_storage/contract.py:442
    // assert self.box_map[key_0].bytes.length == box_0.length
    itob
    bytec_0 // ""
    uncover 1
    concat
    box_len
    assert // check self.box_map entry exists
    uncover 1
    box_len
    assert // check Box exists
    ==
    assert
    // box_storage/contract.py:435
    // key_0 = UInt64(0)
    intc_0 // 0
    // box_storage/contract.py:443
    // assert self.box_map.length(key_0) == value.bytes.length
    itob
    bytec_0 // ""
    uncover 1
    concat
    box_len
    assert // check self.box_map entry exists
    // box_storage/contract.py:437
    // value = String("Hmmmmm")
    bytec 20 // "Hmmmmm"
    // box_storage/contract.py:443
    // assert self.box_map.length(key_0) == value.bytes.length
    len
    ==
    assert
    // box_storage/contract.py:436
    // key_1 = UInt64(1)
    intc_1 // 1
    // box_storage/contract.py:445
    // assert self.box_map.get(key_1, default=String("default")) == String("default")
    itob
    bytec_0 // ""
    uncover 1
    concat
    box_get
    cover 1
    bytec 22 // "default"
    uncover 1
    uncover 2
    select
    bytec 22 // "default"
    ==
    assert
    // box_storage/contract.py:436
    // key_1 = UInt64(1)
    intc_1 // 1
    // box_storage/contract.py:446
    // value, exists = self.box_map.maybe(key_1)
    itob
    bytec_0 // ""
    uncover 1
    concat
    box_get
    // box_storage/contract.py:447
    // assert not exists
    !
    assert
    // box_storage/contract.py:435
    // key_0 = UInt64(0)
    intc_0 // 0
    // box_storage/contract.py:448
    // assert key_0 in self.box_map
    itob
    bytec_0 // ""
    uncover 1
    concat
    box_len
    assert
    // box_storage/contract.py:449
    // assert self.box_map.key_prefix == b""
    bytec_0 // ""
    bytec_0 // 0x
    ==
    assert
    // box_storage/contract.py:436
    // key_1 = UInt64(1)
    intc_1 // 1
    // box_storage/contract.py:453
    // tmp_box_map[key_1] = String("hello")
    itob
    // box_storage/contract.py:451-452
    // # test box map not assigned to the class and passed to subroutine
    // tmp_box_map = BoxMap(UInt64, String, key_prefix=Bytes())
    bytec_0 // 0x
    // box_storage/contract.py:453
    // tmp_box_map[key_1] = String("hello")
    uncover 1
    concat
    dup
    box_del
    pop
    bytec 13 // "hello"
    box_put
    // box_storage/contract.py:451-452
    // # test box map not assigned to the class and passed to subroutine
    // tmp_box_map = BoxMap(UInt64, String, key_prefix=Bytes())
    bytec_0 // 0x
    // box_storage/contract.py:454
    // assert get_box_map_value_from_key_plus_1(tmp_box_map, UInt64(0)) == "hello"
    intc_0 // 0
    callsub get_box_map_value_from_key_plus_1
    bytec 13 // "hello"
    ==
    assert
    // box_storage/contract.py:436
    // key_1 = UInt64(1)
    intc_1 // 1
    // box_storage/contract.py:455
    // del tmp_box_map[key_1]
    itob
    // box_storage/contract.py:451-452
    // # test box map not assigned to the class and passed to subroutine
    // tmp_box_map = BoxMap(UInt64, String, key_prefix=Bytes())
    bytec_0 // 0x
    // box_storage/contract.py:455
    // del tmp_box_map[key_1]
    uncover 1
    concat
    box_del
    pop
    retsub


// examples.box_storage.contract.BoxContract.box_map_set(key: uint64, value: bytes) -> void:
examples.box_storage.contract.BoxContract.box_map_set:
    // box_storage/contract.py:457-458
    // @arc4.abimethod
    // def box_map_set(self, key: UInt64, value: String) -> None:
    proto 2 0
    b examples.box_storage.contract.BoxContract.box_map_set_block@0

examples.box_storage.contract.BoxContract.box_map_set_block@0:
    // box_storage/contract.py:459
    // self.box_map[key] = value
    frame_dig -2
    itob
    bytec_0 // ""
    uncover 1
    concat
    dup
    box_del
    pop
    frame_dig -1
    box_put
    retsub


// examples.box_storage.contract.BoxContract.box_map_get(key: uint64) -> bytes:
examples.box_storage.contract.BoxContract.box_map_get:
    // box_storage/contract.py:461-462
    // @arc4.abimethod
    // def box_map_get(self, key: UInt64) -> String:
    proto 1 1
    b examples.box_storage.contract.BoxContract.box_map_get_block@0

examples.box_storage.contract.BoxContract.box_map_get_block@0:
    // box_storage/contract.py:463
    // return self.box_map[key]
    frame_dig -1
    itob
    bytec_0 // ""
    uncover 1
    concat
    box_get
    assert // check self.box_map entry exists
    retsub


// examples.box_storage.contract.BoxContract.box_map_del(key: uint64) -> void:
examples.box_storage.contract.BoxContract.box_map_del:
    // box_storage/contract.py:465-466
    // @arc4.abimethod
    // def box_map_del(self, key: UInt64) -> None:
    proto 1 0
    b examples.box_storage.contract.BoxContract.box_map_del_block@0

examples.box_storage.contract.BoxContract.box_map_del_block@0:
    // box_storage/contract.py:467
    // del self.box_map[key]
    frame_dig -1
    itob
    bytec_0 // ""
    uncover 1
    concat
    box_del
    pop
    retsub


// examples.box_storage.contract.BoxContract.box_map_exists(key: uint64) -> uint64:
examples.box_storage.contract.BoxContract.box_map_exists:
    // box_storage/contract.py:469-470
    // @arc4.abimethod
    // def box_map_exists(self, key: UInt64) -> bool:
    proto 1 1
    b examples.box_storage.contract.BoxContract.box_map_exists_block@0

examples.box_storage.contract.BoxContract.box_map_exists_block@0:
    // box_storage/contract.py:471
    // return key in self.box_map
    frame_dig -1
    itob
    bytec_0 // ""
    uncover 1
    concat
    box_len
    uncover 1
    retsub
