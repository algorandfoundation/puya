main examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        examples.box_storage.contract.BoxContract.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@7
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@6
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@6
    block@5: // switch_case_default_L26
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@7: // after_while_L20
        return 

subroutine examples.box_storage.contract.get_box_value_plus_1(box: bytes) -> uint64:
    block@0: // L297
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box#0)
        (assert aggregate%box_get%1#0) // check Box exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let maybe_value_converted%0#0: uint64 = (btoi storage_value%0#0)
        let tmp%0#0: uint64 = (+ maybe_value_converted%0#0 1u)
        return tmp%0#0

subroutine examples.box_storage.contract.get_box_ref_length(ref: bytes) -> uint64:
    block@0: // L302
        let (value%0#0: uint64, check%0#0: bool) = (box_len ref#0)
        (assert check%0#0) // check BoxRef exists
        return value%0#0

subroutine examples.box_storage.contract.get_box_map_value_from_key_plus_1(box_map: bytes, key: uint64) -> string:
    block@0: // L307
        let materialized_values%0#0: uint64 = (+ key#0 1u)
        let encoded_value%0#0: bytes[8] = (itob materialized_values%0#0)
        let box_prefixed_key%0#0: bytes = (concat box_map#0 encoded_value%0#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check BoxMap entry exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        return storage_value%0#0

subroutine examples.box_storage.contract.BoxContract.__init__() -> void:
    block@0: // L45
        let tmp%0#0: bool = (> 4104u 4096u)
        (assert tmp%0#0) // expected ManyInts to exceed max bytes size
        return 

subroutine examples.box_storage.contract.BoxContract.set_boxes(a: uint64, b: Encoded(len+uint8[]), c: Encoded(len+utf8[])) -> void:
    block@0: // L57
        let encoded_value%0#0: bytes[8] = (itob a#0)
        (box_put "box_a" encoded_value%0#0)
        (box_del "b")
        (box_put "b" b#0)
        (box_del 0x424f585f43)
        (box_put 0x424f585f43 c#0)
        let tmp%0#0: bytes = ((extract 2 0) b#0)
        (box_del "box_d")
        (box_put "box_d" tmp%0#0)
        (box_create "box_large" 6160u)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "box_large")
        (assert aggregate%box_get%1#0) // check self.box_large exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob 42u)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%updated_data%0#0: bytes = (replace3 storage_value%0#0 4096u encoded_value%1#0)
        let updated_tuple%0#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = aggregate%updated_data%0#0
        (box_put "box_large" updated_tuple%0#0)
        let tmp%1#0: uint64 = (* 1024u 4u)
        (box_replace "box_large" tmp%1#0 0x000000000000002a)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "b")
        (assert aggregate%box_get%3#0) // check self.box_b exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let b_value#0: Encoded(len+uint8[]) = storage_value%1#0
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "b")
        (assert aggregate%box_get%5#0) // check self.box_b exists
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 storage_value%2#0 0u)
        let tmp%2#0: uint64 = aggregate%array_length%0#0
        let aggregate%array_length%1#0: uint64 = (extract_uint16 b_value#0 0u)
        let tmp%3#0: uint64 = aggregate%array_length%1#0
        let tmp%4#0: bool = (== tmp%2#0 tmp%3#0)
        (assert tmp%4#0) // direct reference should match copy
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get "box_a")
        (assert aggregate%box_get%7#0) // check self.box_a exists
        let storage_value%3#0: bytes = aggregate%box_get%6#0
        let maybe_value_converted%0#0: uint64 = (btoi storage_value%3#0)
        let tmp%5#0: uint64 = (+ maybe_value_converted%0#0 3u)
        let encoded_value%2#0: bytes[8] = (itob tmp%5#0)
        (box_put "box_a" encoded_value%2#0)
        let (value%0#0: uint64, check%0#0: bool) = (box_len "box_a")
        (assert check%0#0) // check self.box_a exists
        let tmp%6#0: bool = (== value%0#0 8u)
        (assert tmp%6#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len "b")
        (assert check%1#0) // check self.box_b exists
        let tmp%7#0: uint64 = (len b#0)
        let tmp%8#0: bool = (== value%1#0 tmp%7#0)
        (assert tmp%8#0)
        let (value%2#0: uint64, check%2#0: bool) = (box_len 0x424f585f43)
        (assert check%2#0) // check self.box_c exists
        let tmp%9#0: uint64 = (len c#0)
        let tmp%10#0: bool = (== value%2#0 tmp%9#0)
        (assert tmp%10#0)
        let (value%3#0: uint64, check%3#0: bool) = (box_len "box_d")
        (assert check%3#0) // check self.box_d exists
        let tmp%11#0: bytes = ((extract 2 0) b#0)
        let tmp%12#0: uint64 = (len tmp%11#0)
        let tmp%13#0: bool = (== value%3#0 tmp%12#0)
        (assert tmp%13#0)
        let tmp%14#0: bytes = (box_extract 0x424f585f43 0u 1u)
        let extract%0#0: bytes = (extract3 c#0 0u 1u)
        let tmp%15#0: bool = (== tmp%14#0 extract%0#0)
        (assert tmp%15#0)
        let (tmp%16#0: uint64, tmp%17#0: bool) = (box_len 0x424f585f43)
        let tmp%18#0: uint64 = (- tmp%16#0 1u)
        let tmp%19#0: bytes = (box_extract 0x424f585f43 tmp%18#0 1u)
        let tmp%20#0: uint64 = (len c#0)
        let tmp%21#0: uint64 = (- tmp%20#0 1u)
        let extract%1#0: bytes = (extract3 c#0 tmp%21#0 1u)
        let tmp%22#0: bool = (== tmp%19#0 extract%1#0)
        (assert tmp%22#0)
        let (tmp%23#0: uint64, tmp%24#0: bool) = (box_len 0x424f585f43)
        let tmp%25#0: bool = (< 1u tmp%23#0)
        let tmp%26#0: uint64 = (select tmp%23#0 1u tmp%25#0)
        let tmp%27#0: uint64 = (- tmp%23#0 tmp%26#0)
        let tmp%28#0: uint64 = (- tmp%27#0 0u)
        let tmp%29#0: bytes = (box_extract 0x424f585f43 0u tmp%28#0)
        let length%0#0: uint64 = (len c#0)
        let is_out_of_bounds%0#0: bool = (>= 1u length%0#0)
        let bounded_offset%0#0: uint64 = (select 1u length%0#0 is_out_of_bounds%0#0)
        let bounded_index%0#0: uint64 = (- length%0#0 bounded_offset%0#0)
        let tmp%30#0: bytes = (substring3 c#0 0u bounded_index%0#0)
        let tmp%31#0: bool = (== tmp%29#0 tmp%30#0)
        (assert tmp%31#0)
        let (tmp%32#0: uint64, tmp%33#0: bool) = (box_len 0x424f585f43)
        let tmp%34#0: bool = (< 2u tmp%32#0)
        let tmp%35#0: uint64 = (select tmp%32#0 2u tmp%34#0)
        let tmp%36#0: uint64 = (- tmp%35#0 0u)
        let tmp%37#0: bytes = (box_extract 0x424f585f43 0u tmp%36#0)
        let length%1#0: uint64 = (len c#0)
        let is_out_of_bounds%1#0: bool = (>= 2u length%1#0)
        let bounded_index%1#0: uint64 = (select 2u length%1#0 is_out_of_bounds%1#0)
        let tmp%38#0: bytes = (substring3 c#0 0u bounded_index%1#0)
        let tmp%39#0: bool = (== tmp%37#0 tmp%38#0)
        (assert tmp%39#0)
        let tmp%40#0: bytes = (box_extract "box_d" 0u 1u)
        let tmp%41#0: bytes = ((extract 2 0) b#0)
        let extract%2#0: bytes = (extract3 tmp%41#0 0u 1u)
        let tmp%42#0: bool = (== tmp%40#0 extract%2#0)
        (assert tmp%42#0)
        let (tmp%43#0: uint64, tmp%44#0: bool) = (box_len "box_d")
        let tmp%45#0: uint64 = (- tmp%43#0 1u)
        let tmp%46#0: bytes = (box_extract "box_d" tmp%45#0 1u)
        let tmp%47#0: bytes = ((extract 2 0) b#0)
        let tmp%48#0: uint64 = (len tmp%47#0)
        let tmp%49#0: uint64 = (- tmp%48#0 1u)
        let extract%3#0: bytes = (extract3 tmp%47#0 tmp%49#0 1u)
        let tmp%50#0: bool = (== tmp%46#0 extract%3#0)
        (assert tmp%50#0)
        let (tmp%51#0: uint64, tmp%52#0: bool) = (box_len "box_d")
        let tmp%53#0: bool = (< 1u tmp%51#0)
        let tmp%54#0: uint64 = (select tmp%51#0 1u tmp%53#0)
        let tmp%55#0: uint64 = (- tmp%51#0 tmp%54#0)
        let tmp%56#0: uint64 = (- tmp%55#0 0u)
        let tmp%57#0: bytes = (box_extract "box_d" 0u tmp%56#0)
        let tmp%58#0: bytes = ((extract 2 0) b#0)
        let length%2#0: uint64 = (len tmp%58#0)
        let is_out_of_bounds%2#0: bool = (>= 1u length%2#0)
        let bounded_offset%1#0: uint64 = (select 1u length%2#0 is_out_of_bounds%2#0)
        let bounded_index%2#0: uint64 = (- length%2#0 bounded_offset%1#0)
        let tmp%59#0: bytes = (substring3 tmp%58#0 0u bounded_index%2#0)
        let tmp%60#0: bool = (== tmp%57#0 tmp%59#0)
        (assert tmp%60#0)
        let (tmp%61#0: uint64, tmp%62#0: bool) = (box_len "box_d")
        let tmp%63#0: bool = (< 5u tmp%61#0)
        let tmp%64#0: uint64 = (select tmp%61#0 5u tmp%63#0)
        let tmp%65#0: uint64 = (- tmp%64#0 0u)
        let tmp%66#0: bytes = (box_extract "box_d" 0u tmp%65#0)
        let tmp%67#0: bytes = ((extract 2 0) b#0)
        let length%3#0: uint64 = (len tmp%67#0)
        let is_out_of_bounds%3#0: bool = (>= 5u length%3#0)
        let bounded_index%3#0: uint64 = (select 5u length%3#0 is_out_of_bounds%3#0)
        let tmp%68#0: bytes = (substring3 tmp%67#0 0u bounded_index%3#0)
        let tmp%69#0: bool = (== tmp%66#0 tmp%68#0)
        (assert tmp%69#0)
        let (tmp%70#0: uint64, tmp%71#0: bool) = (box_len "box_d")
        let tmp%72#0: bool = (< 2u tmp%70#0)
        let tmp%73#0: uint64 = (select tmp%70#0 2u tmp%72#0)
        let tmp%74#0: uint64 = (- tmp%73#0 0u)
        let tmp%75#0: bytes = (box_extract "box_d" 0u tmp%74#0)
        let tmp%76#0: bytes = ((extract 2 0) b#0)
        let length%4#0: uint64 = (len tmp%76#0)
        let is_out_of_bounds%4#0: bool = (>= 2u length%4#0)
        let bounded_index%4#0: uint64 = (select 2u length%4#0 is_out_of_bounds%4#0)
        let tmp%77#0: bytes = (substring3 tmp%76#0 0u bounded_index%4#0)
        let tmp%78#0: bool = (== tmp%75#0 tmp%77#0)
        (assert tmp%78#0)
        let (value%4#0: uint64, check%4#0: bool) = (box_len "box_large")
        (assert check%4#0) // check self.box_large exists
        let tmp%79#0: bool = (== value%4#0 6160u)
        (assert tmp%79#0)
        return 

subroutine examples.box_storage.contract.BoxContract.check_keys() -> void:
    block@0: // L93
        let tmp%0#0: bool = (== "box_a" 0x626f785f61)
        (assert tmp%0#0) // box a key ok
        let tmp%1#0: bool = (== "b" 0x62)
        (assert tmp%1#0) // box b key ok
        let tmp%2#0: bool = (== 0x424f585f43 0x424f585f43)
        (assert tmp%2#0) // box c key ok
        let tmp%3#0: bool = (== "box_large" 0x626f785f6c61726765)
        (assert tmp%3#0) // box large key ok
        return 

subroutine examples.box_storage.contract.BoxContract.create_many_ints() -> void:
    block@0: // L100
        (box_create "many_ints" 4104u)
        return 

subroutine examples.box_storage.contract.BoxContract.set_many_ints(index: uint64, value: uint64) -> void:
    block@0: // L104
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "many_ints")
        (assert aggregate%box_get%1#0) // check self.many_ints exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob value#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%write_offset%0#0: uint64 = (* index#0 8u)
        let aggregate%updated_array%0#0: bytes = (replace3 storage_value%0#0 aggregate%write_offset%0#0 encoded_value%0#0)
        let updated_array%0#0: Encoded(uint64[513]) = aggregate%updated_array%0#0
        (box_put "many_ints" updated_array%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.sum_many_ints() -> uint64:
    block@0: // L108
        _puya_lib.util.ensure_budget(10500u, 0u)
        let total#0: uint64 = 0u
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "many_ints")
        (assert aggregate%box_get%1#0) // check self.many_ints exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L112
        let continue_looping%0#0: bool = (< item_index_internal%0#0 513u)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L113
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#0 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 storage_value%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let val#0: uint64 = values%0#0
        let tmp%0#0: uint64 = (+ total#0 val#0)
        let total#0: uint64 = tmp%0#0
        goto block@3
    block@3: // for_footer_L112
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L112
        return total#0

subroutine examples.box_storage.contract.BoxContract.delete_boxes() -> void:
    block@0: // L116
        (box_del "box_a")
        (box_del "b")
        (box_del 0x424f585f43)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get "box_a")
        let maybe_value_converted%0#0: uint64 = (btoi maybe_value%0#0)
        let state_get%0#0: uint64 = (select 42u maybe_value_converted%0#0 maybe_exists%0#0)
        let tmp%0#0: bool = (== state_get%0#0 42u)
        (assert tmp%0#0)
        let aggregate%length%0#0: uint64 = (len 0x3432)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 0x3432)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get "b")
        let state_get%1#0: bytes = (select tmp%1#0 maybe_value%1#0 maybe_exists%1#0)
        let tmp%2#0: bytes = ((extract 2 0) state_get%1#0)
        let tmp%3#0: bool = (== tmp%2#0 0x3432)
        (assert tmp%3#0)
        let aggregate%length%1#0: uint64 = (len "42")
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 "42")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%4#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let (maybe_value%2#0: bytes, maybe_exists%2#0: bool) = (box_get 0x424f585f43)
        let state_get%2#0: bytes = (select tmp%4#0 maybe_value%2#0 maybe_exists%2#0)
        let aggregate%length%2#0: uint64 = (len "42")
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%length%2#0)
        let aggregate%length_uint16%2#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%encoded_value%2#0: bytes = (concat aggregate%length_uint16%2#0 "42")
        let aggregate%as_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = aggregate%encoded_value%2#0
        let tmp%5#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%1#0
        let tmp%6#0: bool = (== state_get%2#0 tmp%5#0)
        (assert tmp%6#0)
        let (maybe_value%3#0: bytes, maybe_exists%3#0: bool) = (box_get "box_a")
        let maybe_value_converted%1#0: uint64 = (btoi maybe_value%3#0)
        let a#0: uint64 = maybe_value_converted%1#0
        let a_exists#0: bool = maybe_exists%3#0
        let tmp%7#0: bool = (! a_exists#0)
        (assert tmp%7#0)
        let tmp%8#0: bool = (== a#0 0u)
        (assert tmp%8#0)
        (box_del "box_large")
        return 

subroutine examples.box_storage.contract.BoxContract.indirect_extract_and_replace() -> void:
    block@0: // L129
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "box_large")
        (assert aggregate%box_get%1#0) // check self.box_large exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let large#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = storage_value%0#0
        let aggregate%extract%0#0: bytes = (extract3 large#0 4096u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        let tmp%0#0: uint64 = (+ values%0#0 1u)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%updated_data%0#0: bytes = (replace3 large#0 4096u encoded_value%0#0)
        let updated_tuple%0#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = aggregate%updated_data%0#0
        let large#0: Encoded(uint8[1024],uint8[1024],uint8[1024],uint8[1024],uint64,uint8[1024],uint8[1024],uint64) = updated_tuple%0#0
        (box_put "box_large" large#0)
        return 

subroutine examples.box_storage.contract.BoxContract.read_boxes() -> <uint64, bytes, Encoded(len+utf8[]), uint64>:
    block@0: // L135
        let tmp%0#0: uint64 = examples.box_storage.contract.get_box_value_plus_1("box_a")
        let tmp%1#0: uint64 = (- tmp%0#0 1u)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "b")
        (assert aggregate%box_get%1#0) // check self.box_b exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let tmp%2#0: bytes = ((extract 2 0) storage_value%0#0)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get 0x424f585f43)
        (assert aggregate%box_get%3#0) // check self.box_c exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "box_large")
        (assert aggregate%box_get%5#0) // check self.box_large exists
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%2#0 4096u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let values%0#0: uint64 = (btoi tuple_item%0#0)
        return tmp%1#0 tmp%2#0 storage_value%1#0 values%0#0

subroutine examples.box_storage.contract.BoxContract.boxes_exist() -> <bool, bool, bool, bool>:
    block@0: // L144
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "box_a")
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len "b")
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len 0x424f585f43)
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "box_large")
        return maybe_exists%0#0 maybe_exists%1#0 maybe_exists%2#0 maybe_exists%3#0

subroutine examples.box_storage.contract.BoxContract.create_dynamic_box() -> void:
    block@0: // L148
        let aggregate%as_bytes%0#0: bytes[8] = (itob 0u)
        let aggregate%len_u16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%as_Encoded(len+uint64[])%0#0: Encoded(len+uint64[]) = aggregate%len_u16%0#0
        let encoded_array%0#0: Encoded(len+uint64[]) = aggregate%as_Encoded(len+uint64[])%0#0
        (box_del "dynamic_box")
        (box_put "dynamic_box" encoded_array%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.delete_dynamic_box() -> void:
    block@0: // L152
        (box_del "dynamic_box")
        return 

subroutine examples.box_storage.contract.BoxContract.append_dynamic_box(times: uint64) -> uint64:
    block@0: // L156
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "dynamic_box")
        (assert aggregate%box_get%1#0) // check Box exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 2u)
        let tuple_item%0#0: Encoded(uint16) = aggregate%extract%0#0
        let values%0#0: Encoded(uint16) = tuple_item%0#0
        let tmp%0#0: uint64 = (btoi values%0#0)
        let arr_len#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ arr_len#0 times#0)
        let tmp%2#0: uint64 = (* tmp%1#0 8u)
        let tmp%3#0: uint64 = (+ 2u tmp%2#0)
        (box_resize "dynamic_box" tmp%3#0)
        (assert 1u) // Step cannot be zero
        let i#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L164
        let continue_looping%0#0: bool = (< i#0 times#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L165
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "dynamic_box")
        (assert aggregate%box_get%3#0) // check Box exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob i#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let encoded_value%0#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%extract%1#0: bytes = (extract3 storage_value%1#0 2u 32760u)
        let aggregate%write_offset%0#0: uint64 = (* arr_len#0 8u)
        let aggregate%updated_array%0#0: bytes = (replace3 aggregate%extract%1#0 aggregate%write_offset%0#0 encoded_value%0#0)
        let aggregate%updated_data%0#0: bytes = (replace3 storage_value%1#0 2u aggregate%updated_array%0#0)
        let updated_tuple%0#0: Encoded(uint16,uint64[4095]) = aggregate%updated_data%0#0
        (box_put "dynamic_box" updated_tuple%0#0)
        let tmp%4#0: uint64 = (+ arr_len#0 1u)
        let arr_len#0: uint64 = tmp%4#0
        goto block@3
    block@3: // for_footer_L164
        let i#0: uint64 = (+ i#0 1u)
        goto block@1
    block@4: // after_for_L164
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob arr_len#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%1#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 16u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint16%0#0: bytes = (extract3 aggregate%val_as_bytes%1#0 6u 2u)
        let aggregate%as_Encoded(uint16)%0#0: Encoded(uint16) = aggregate%uint16%0#0
        let tmp%5#0: Encoded(uint16) = aggregate%as_Encoded(uint16)%0#0
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "dynamic_box")
        (assert aggregate%box_get%5#0) // check Box exists
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let encoded_value%1#0: Encoded(uint16) = tmp%5#0
        let aggregate%updated_data%1#0: bytes = (replace3 storage_value%2#0 0u encoded_value%1#0)
        let updated_tuple%1#0: Encoded(uint16,uint64[4095]) = aggregate%updated_data%1#0
        (box_put "dynamic_box" updated_tuple%1#0)
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get "dynamic_box")
        (assert aggregate%box_get%7#0) // check self.dynamic_box exists
        let storage_value%3#0: bytes = aggregate%box_get%6#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 storage_value%3#0 0u)
        let tmp%6#0: uint64 = aggregate%array_length%0#0
        return tmp%6#0

subroutine examples.box_storage.contract.BoxContract.pop_dynamic_box(times: uint64) -> uint64:
    block@0: // L171
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "dynamic_box")
        (assert aggregate%box_get%1#0) // check Box exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%extract%0#0: bytes = (extract3 storage_value%0#0 0u 2u)
        let tuple_item%0#0: Encoded(uint16) = aggregate%extract%0#0
        let values%0#0: Encoded(uint16) = tuple_item%0#0
        let tmp%0#0: uint64 = (btoi values%0#0)
        let tmp%1#0: uint64 = (- tmp%0#0 times#0)
        let arr_len#0: uint64 = tmp%1#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob arr_len#0)
        let aggregate%bitlen%0#0: uint64 = (bitlen aggregate%val_as_bytes%0#0)
        let aggregate%no_overflow%0#0: bool = (<= aggregate%bitlen%0#0 16u)
        (assert aggregate%no_overflow%0#0) // overflow
        let aggregate%uint16%0#0: bytes = (extract3 aggregate%val_as_bytes%0#0 6u 2u)
        let aggregate%as_Encoded(uint16)%0#0: Encoded(uint16) = aggregate%uint16%0#0
        let tmp%2#0: Encoded(uint16) = aggregate%as_Encoded(uint16)%0#0
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get "dynamic_box")
        (assert aggregate%box_get%3#0) // check Box exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let encoded_value%0#0: Encoded(uint16) = tmp%2#0
        let aggregate%updated_data%0#0: bytes = (replace3 storage_value%1#0 0u encoded_value%0#0)
        let updated_tuple%0#0: Encoded(uint16,uint64[4095]) = aggregate%updated_data%0#0
        (box_put "dynamic_box" updated_tuple%0#0)
        let tmp%3#0: uint64 = (* arr_len#0 8u)
        let tmp%4#0: uint64 = (+ 2u tmp%3#0)
        (box_resize "dynamic_box" tmp%4#0)
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get "dynamic_box")
        (assert aggregate%box_get%5#0) // check self.dynamic_box exists
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 storage_value%2#0 0u)
        let tmp%5#0: uint64 = aggregate%array_length%0#0
        return tmp%5#0

subroutine examples.box_storage.contract.BoxContract.sum_dynamic_box() -> uint64:
    block@0: // L182
        let total#0: uint64 = 0u
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get "dynamic_box")
        (assert aggregate%box_get%1#0) // check self.dynamic_box exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%array_length%0#0: uint64 = (extract_uint16 storage_value%0#0 0u)
        let array_length%0#0: uint64 = aggregate%array_length%0#0
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L185
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L186
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) storage_value%0#0)
        let aggregate%bytes_offset%0#0: uint64 = (* item_index_internal%0#0 8u)
        let aggregate%encoded_element%0#0: bytes = (extract3 aggregate%array_trimmed%0#0 aggregate%bytes_offset%0#0 8u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint64) = aggregate%encoded_element%0#0
        let values%0#0: uint64 = (btoi array_item%0#0)
        let val#0: uint64 = values%0#0
        let tmp%0#0: uint64 = (+ total#0 val#0)
        let total#0: uint64 = tmp%0#0
        goto block@3
    block@3: // for_footer_L185
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L185
        return total#0

subroutine examples.box_storage.contract.BoxContract.slice_box() -> void:
    block@0: // L189
        (box_del "0")
        (box_put "0" 0x54657374696e672074657374696e6720313233)
        let (tmp%0#0: uint64, tmp%1#0: bool) = (box_len "0")
        let tmp%2#0: bool = (< 0u tmp%0#0)
        let tmp%3#0: uint64 = (select tmp%0#0 0u tmp%2#0)
        let tmp%4#0: bool = (< 7u tmp%0#0)
        let tmp%5#0: uint64 = (select tmp%0#0 7u tmp%4#0)
        let tmp%6#0: uint64 = (- tmp%5#0 tmp%3#0)
        let tmp%7#0: bytes = (box_extract "0" tmp%3#0 tmp%6#0)
        let tmp%8#0: bool = (== tmp%7#0 0x54657374696e67)
        (assert tmp%8#0)
        let aggregate%length%0#0: uint64 = (len "Hello")
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 "Hello")
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%0#0
        let tmp%9#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        (box_del 0x424f585f43)
        (box_put 0x424f585f43 tmp%9#0)
        let (tmp%10#0: uint64, tmp%11#0: bool) = (box_len 0x424f585f43)
        let tmp%12#0: bool = (< 2u tmp%10#0)
        let tmp%13#0: uint64 = (select tmp%10#0 2u tmp%12#0)
        let tmp%14#0: bool = (< 10u tmp%10#0)
        let tmp%15#0: uint64 = (select tmp%10#0 10u tmp%14#0)
        let tmp%16#0: uint64 = (- tmp%15#0 tmp%13#0)
        let tmp%17#0: bytes = (box_extract 0x424f585f43 tmp%13#0 tmp%16#0)
        let tmp%18#0: bool = (== tmp%17#0 0x48656c6c6f)
        (assert tmp%18#0)
        return 

subroutine examples.box_storage.contract.BoxContract.arc4_box() -> void:
    block@0: // L198
        let aggregate%head%0#0: bytes = (concat 0x 0x00)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 0x01)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 0x02)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 0x03)
        let aggregate%as_Encoded(uint8[4])%0#0: Encoded(uint8[4]) = aggregate%head%3#0
        let encoded_array%0#0: Encoded(uint8[4]) = aggregate%as_Encoded(uint8[4])%0#0
        (box_put 0x64 encoded_array%0#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get 0x64)
        (assert aggregate%box_get%1#0) // check Box exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        let aggregate%bytes_offset%0#0: uint64 = (* 0u 1u)
        let aggregate%encoded_element%0#0: bytes = (extract3 storage_value%0#0 aggregate%bytes_offset%0#0 1u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8) = aggregate%encoded_element%0#0
        let values%0#0: Encoded(uint8) = array_item%0#0
        let reinterpret_biguint%0#0: biguint = values%0#0
        let tmp%0#0: bool = (b== reinterpret_biguint%0#0 0x00)
        (assert tmp%0#0)
        let (aggregate%box_get%2#0: bytes, aggregate%box_get%3#0: bool) = (box_get 0x64)
        (assert aggregate%box_get%3#0) // check Box exists
        let storage_value%1#0: bytes = aggregate%box_get%2#0
        let aggregate%bytes_offset%1#0: uint64 = (* 1u 1u)
        let aggregate%encoded_element%1#0: bytes = (extract3 storage_value%1#0 aggregate%bytes_offset%1#0 1u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint8) = aggregate%encoded_element%1#0
        let values%1#0: Encoded(uint8) = array_item%1#0
        let reinterpret_biguint%2#0: biguint = values%1#0
        let tmp%1#0: bool = (b== reinterpret_biguint%2#0 0x01)
        (assert tmp%1#0)
        let (aggregate%box_get%4#0: bytes, aggregate%box_get%5#0: bool) = (box_get 0x64)
        (assert aggregate%box_get%5#0) // check Box exists
        let storage_value%2#0: bytes = aggregate%box_get%4#0
        let aggregate%bytes_offset%2#0: uint64 = (* 2u 1u)
        let aggregate%encoded_element%2#0: bytes = (extract3 storage_value%2#0 aggregate%bytes_offset%2#0 1u) // on error: index access is out of bounds
        let array_item%2#0: Encoded(uint8) = aggregate%encoded_element%2#0
        let values%2#0: Encoded(uint8) = array_item%2#0
        let reinterpret_biguint%4#0: biguint = values%2#0
        let tmp%2#0: bool = (b== reinterpret_biguint%4#0 0x02)
        (assert tmp%2#0)
        let (aggregate%box_get%6#0: bytes, aggregate%box_get%7#0: bool) = (box_get 0x64)
        (assert aggregate%box_get%7#0) // check Box exists
        let storage_value%3#0: bytes = aggregate%box_get%6#0
        let aggregate%bytes_offset%3#0: uint64 = (* 3u 1u)
        let aggregate%encoded_element%3#0: bytes = (extract3 storage_value%3#0 aggregate%bytes_offset%3#0 1u) // on error: index access is out of bounds
        let array_item%3#0: Encoded(uint8) = aggregate%encoded_element%3#0
        let values%3#0: Encoded(uint8) = array_item%3#0
        let reinterpret_biguint%6#0: biguint = values%3#0
        let tmp%3#0: bool = (b== reinterpret_biguint%6#0 0x03)
        (assert tmp%3#0)
        return 

subroutine examples.box_storage.contract.BoxContract.test_box_ref() -> void:
    block@0: // L208
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len "blob")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0) // no data
        let (_%1#0: uint64, maybe_exists%1#0: bool) = (box_len 0x626c6f62)
        let tmp%1#0: bool = (! maybe_exists%1#0)
        (assert tmp%1#0) // no data
        let (_%2#0: uint64, maybe_exists%2#0: bool) = (box_len 0x626c6f62)
        let tmp%2#0: bool = (! maybe_exists%2#0)
        (assert tmp%2#0) // no data
        let (_%3#0: uint64, maybe_exists%3#0: bool) = (box_len "blob")
        let tmp%3#0: bool = (! maybe_exists%3#0)
        (assert tmp%3#0) // no data
        let tmp%4#0: bool = (box_create "blob" 32u)
        (assert tmp%4#0)
        let (_%4#0: uint64, maybe_exists%4#0: bool) = (box_len "blob")
        (assert maybe_exists%4#0) // has data
        let tmp%5#0: account = (txn Sender)
        let sender_bytes#0: bytes = tmp%5#0
        let tmp%6#0: account = (global CurrentApplicationAddress)
        let app_address#0: bytes = tmp%6#0
        (box_replace "blob" 0u sender_bytes#0)
        (box_resize "blob" 8000u)
        (box_splice "blob" 0u 0u app_address#0)
        (box_replace "blob" 64u 0x68656c6c6f)
        let tmp%7#0: uint64 = (len 0x68656c6c6f)
        let tmp%8#0: uint64 = (+ 64u tmp%7#0)
        let tmp%9#0: bytes = (box_extract "blob" 0u tmp%8#0)
        let prefix#0: bytes = tmp%9#0
        let tmp%10#0: bytes = (concat app_address#0 sender_bytes#0)
        let tmp%11#0: bytes = (concat tmp%10#0 0x68656c6c6f)
        let tmp%12#0: bool = (== prefix#0 tmp%11#0)
        (assert tmp%12#0)
        let tmp%13#0: bool = (box_del "blob")
        (assert tmp%13#0)
        let tmp%14#0: bool = (== "blob" 0x626c6f62)
        (assert tmp%14#0)
        let (maybe_value%0#0: bytes, maybe_exists%5#0: bool) = (box_get "blob")
        let value#0: bytes = maybe_value%0#0
        let exists#0: bool = maybe_exists%5#0
        let tmp%15#0: bool = (! exists#0)
        (assert tmp%15#0)
        let tmp%16#0: bool = (== value#0 0x)
        (assert tmp%16#0)
        let (maybe_value%1#0: bytes, maybe_exists%6#0: bool) = (box_get "blob")
        let state_get%0#0: bytes = (select sender_bytes#0 maybe_value%1#0 maybe_exists%6#0)
        let tmp%17#0: bool = (== state_get%0#0 sender_bytes#0)
        (assert tmp%17#0)
        let tmp%18#0: bytes = (concat sender_bytes#0 app_address#0)
        (box_put "blob" tmp%18#0)
        let (_%5#0: uint64, maybe_exists%7#0: bool) = (box_len "blob")
        (assert maybe_exists%7#0) // Blob exists
        let (value%0#0: uint64, check%0#0: bool) = (box_len "blob")
        (assert check%0#0) // check BoxRef exists
        let tmp%19#0: bool = (== value%0#0 64u)
        (assert tmp%19#0)
        let tmp%20#0: uint64 = examples.box_storage.contract.get_box_ref_length("blob")
        let tmp%21#0: bool = (== tmp%20#0 64u)
        (assert tmp%21#0)
        (box_create "box_ref" 32u)
        let (_%6#0: uint64, maybe_exists%8#0: bool) = (box_len "box_ref")
        (assert maybe_exists%8#0) // has data
        (box_del "box_ref")
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_test() -> void:
    block@0: // L256
        let encoded_value%0#0: bytes[8] = (itob 0u)
        let box_prefixed_key%0#0: bytes = (concat "" encoded_value%0#0)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 "Hmmmmm")
        let encoded_value%1#0: bytes[8] = (itob 0u)
        let box_prefixed_key%1#0: bytes = (concat "" encoded_value%1#0)
        let box_0#0: bytes = box_prefixed_key%1#0
        let encoded_value%2#0: bytes[8] = (itob 0u)
        let box_prefixed_key%2#0: bytes = (concat "" encoded_value%2#0)
        let (value%0#0: uint64, check%0#0: bool) = (box_len box_prefixed_key%2#0)
        (assert check%0#0) // check self.box_map entry exists
        let tmp%0#0: uint64 = (len "Hmmmmm")
        let tmp%1#0: bool = (== value%0#0 tmp%0#0)
        (assert tmp%1#0)
        let encoded_value%3#0: bytes[8] = (itob 0u)
        let box_prefixed_key%3#0: bytes = (concat "" encoded_value%3#0)
        let (value%1#0: uint64, check%1#0: bool) = (box_len box_prefixed_key%3#0)
        (assert check%1#0) // check self.box_map entry exists
        let (value%2#0: uint64, check%2#0: bool) = (box_len box_0#0)
        (assert check%2#0) // check Box exists
        let tmp%2#0: bool = (== value%1#0 value%2#0)
        (assert tmp%2#0)
        let encoded_value%4#0: bytes[8] = (itob 0u)
        let box_prefixed_key%4#0: bytes = (concat "" encoded_value%4#0)
        let (value%3#0: uint64, check%3#0: bool) = (box_len box_prefixed_key%4#0)
        (assert check%3#0) // check self.box_map entry exists
        let tmp%3#0: uint64 = (len "Hmmmmm")
        let tmp%4#0: bool = (== value%3#0 tmp%3#0)
        (assert tmp%4#0)
        let encoded_value%5#0: bytes[8] = (itob 1u)
        let box_prefixed_key%5#0: bytes = (concat "" encoded_value%5#0)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (box_get box_prefixed_key%5#0)
        let state_get%0#0: bytes = (select "default" maybe_value%0#0 maybe_exists%0#0)
        let tmp%5#0: bool = (== state_get%0#0 "default")
        (assert tmp%5#0)
        let encoded_value%6#0: bytes[8] = (itob 1u)
        let box_prefixed_key%6#0: bytes = (concat "" encoded_value%6#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (box_get box_prefixed_key%6#0)
        let exists#0: bool = maybe_exists%1#0
        let tmp%6#0: bool = (! exists#0)
        (assert tmp%6#0)
        let encoded_value%7#0: bytes[8] = (itob 0u)
        let box_prefixed_key%7#0: bytes = (concat "" encoded_value%7#0)
        let (_%0#0: uint64, maybe_exists%2#0: bool) = (box_len box_prefixed_key%7#0)
        (assert maybe_exists%2#0)
        let tmp%7#0: bool = (== "" 0x)
        (assert tmp%7#0)
        let encoded_value%8#0: bytes[8] = (itob 1u)
        let box_prefixed_key%8#0: bytes = (concat 0x encoded_value%8#0)
        (box_del box_prefixed_key%8#0)
        (box_put box_prefixed_key%8#0 "hello")
        let tmp%8#0: string = examples.box_storage.contract.get_box_map_value_from_key_plus_1(0x, 0u)
        let tmp%9#0: bool = (== tmp%8#0 "hello")
        (assert tmp%9#0)
        let encoded_value%9#0: bytes[8] = (itob 1u)
        let box_prefixed_key%9#0: bytes = (concat 0x encoded_value%9#0)
        (box_del box_prefixed_key%9#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_set(key: uint64, value: string) -> void:
    block@0: // L280
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = (concat "" encoded_value%0#0)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 value#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_get(key: uint64) -> string:
    block@0: // L284
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = (concat "" encoded_value%0#0)
        let (aggregate%box_get%0#0: bytes, aggregate%box_get%1#0: bool) = (box_get box_prefixed_key%0#0)
        (assert aggregate%box_get%1#0) // check self.box_map entry exists
        let storage_value%0#0: bytes = aggregate%box_get%0#0
        return storage_value%0#0

subroutine examples.box_storage.contract.BoxContract.box_map_del(key: uint64) -> void:
    block@0: // L288
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = (concat "" encoded_value%0#0)
        (box_del box_prefixed_key%0#0)
        return 

subroutine examples.box_storage.contract.BoxContract.box_map_exists(key: uint64) -> bool:
    block@0: // L292
        let encoded_value%0#0: bytes[8] = (itob key#0)
        let box_prefixed_key%0#0: bytes = (concat "" encoded_value%0#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        return maybe_exists%0#0

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L44
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@27
    block@2: // abi_routing_L44
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "set_boxes(uint64,byte[],string)void" => block@3, method "check_keys()void" => block@4, method "create_many_ints()void" => block@5, method "set_many_ints(uint64,uint64)void" => block@6, method "sum_many_ints()uint64" => block@7, method "delete_boxes()void" => block@8, method "indirect_extract_and_replace()void" => block@9, method "read_boxes()(uint64,byte[],string,uint64)" => block@10, method "boxes_exist()(bool,bool,bool,bool)" => block@11, method "create_dynamic_box()void" => block@12, method "delete_dynamic_box()void" => block@13, method "append_dynamic_box(uint64)uint64" => block@14, method "pop_dynamic_box(uint64)uint64" => block@15, method "sum_dynamic_box()uint64" => block@16, method "slice_box()void" => block@17, method "arc4_box()void" => block@18, method "test_box_ref()void" => block@19, method "box_map_test()void" => block@20, method "box_map_set(uint64,string)void" => block@21, method "box_map_get(uint64)string" => block@22, method "box_map_del(uint64)void" => block@23, method "box_map_exists(uint64)bool" => block@24, * => block@25}
    block@3: // set_boxes_route_L57
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        examples.box_storage.contract.BoxContract.set_boxes(tmp%7#0, reinterpret_Encoded(len+uint8[])%0#0, reinterpret_Encoded(len+utf8[])%0#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@4: // check_keys_route_L93
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (== tmp%8#0 NoOp)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (!= tmp%10#0 0u)
        (assert tmp%11#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.check_keys()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@5: // create_many_ints_route_L100
        let tmp%12#0: uint64 = (txn OnCompletion)
        let tmp%13#0: bool = (== tmp%12#0 NoOp)
        (assert tmp%13#0) // OnCompletion is not NoOp
        let tmp%14#0: uint64 = (txn ApplicationID)
        let tmp%15#0: bool = (!= tmp%14#0 0u)
        (assert tmp%15#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.create_many_ints()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@6: // set_many_ints_route_L104
        let tmp%16#0: uint64 = (txn OnCompletion)
        let tmp%17#0: bool = (== tmp%16#0 NoOp)
        (assert tmp%17#0) // OnCompletion is not NoOp
        let tmp%18#0: uint64 = (txn ApplicationID)
        let tmp%19#0: bool = (!= tmp%18#0 0u)
        (assert tmp%19#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%20#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%21#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        examples.box_storage.contract.BoxContract.set_many_ints(tmp%20#0, tmp%21#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@7: // sum_many_ints_route_L108
        let tmp%22#0: uint64 = (txn OnCompletion)
        let tmp%23#0: bool = (== tmp%22#0 NoOp)
        (assert tmp%23#0) // OnCompletion is not NoOp
        let tmp%24#0: uint64 = (txn ApplicationID)
        let tmp%25#0: bool = (!= tmp%24#0 0u)
        (assert tmp%25#0) // can only call when not creating
        let tmp%26#0: uint64 = examples.box_storage.contract.BoxContract.sum_many_ints()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%26#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%27#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%28#0: bytes = (concat 0x151f7c75 tmp%27#0)
        (log tmp%28#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@8: // delete_boxes_route_L116
        let tmp%29#0: uint64 = (txn OnCompletion)
        let tmp%30#0: bool = (== tmp%29#0 NoOp)
        (assert tmp%30#0) // OnCompletion is not NoOp
        let tmp%31#0: uint64 = (txn ApplicationID)
        let tmp%32#0: bool = (!= tmp%31#0 0u)
        (assert tmp%32#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.delete_boxes()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@9: // indirect_extract_and_replace_route_L129
        let tmp%33#0: uint64 = (txn OnCompletion)
        let tmp%34#0: bool = (== tmp%33#0 NoOp)
        (assert tmp%34#0) // OnCompletion is not NoOp
        let tmp%35#0: uint64 = (txn ApplicationID)
        let tmp%36#0: bool = (!= tmp%35#0 0u)
        (assert tmp%36#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.indirect_extract_and_replace()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@10: // read_boxes_route_L135
        let tmp%37#0: uint64 = (txn OnCompletion)
        let tmp%38#0: bool = (== tmp%37#0 NoOp)
        (assert tmp%38#0) // OnCompletion is not NoOp
        let tmp%39#0: uint64 = (txn ApplicationID)
        let tmp%40#0: bool = (!= tmp%39#0 0u)
        (assert tmp%40#0) // can only call when not creating
        let (tmp%41#0: uint64, tmp%42#0: bytes, tmp%43#0: Encoded(len+utf8[]), tmp%44#0: uint64) = examples.box_storage.contract.BoxContract.read_boxes()
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%41#0)
        let aggregate%as_Encoded(uint64)%1#0: Encoded(uint64) = aggregate%val_as_bytes%1#0
        let aggregate%head%0#0: bytes = (concat 0x aggregate%as_Encoded(uint64)%1#0)
        let aggregate%length%0#0: uint64 = (len tmp%42#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 tmp%42#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let aggregate%as_bytes%1#0: bytes[8] = (itob 20u)
        let aggregate%offset_as_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%head%1#0: bytes = (concat aggregate%head%0#0 aggregate%offset_as_uint16%0#0)
        let aggregate%data_length%0#0: uint64 = (len aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%current_tail_offset%0#0: uint64 = (+ 20u aggregate%data_length%0#0)
        let aggregate%as_bytes%2#0: bytes[8] = (itob aggregate%current_tail_offset%0#0)
        let aggregate%offset_as_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%2#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%offset_as_uint16%1#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob tmp%44#0)
        let aggregate%as_Encoded(uint64)%2#0: Encoded(uint64) = aggregate%val_as_bytes%2#0
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%as_Encoded(uint64)%2#0)
        let aggregate%concat%0#0: bytes = (concat aggregate%head%3#0 aggregate%as_Encoded(len+uint8[])%0#0)
        let aggregate%concat%1#0: bytes = (concat aggregate%concat%0#0 tmp%43#0)
        let aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]),uint64)%0#0: Encoded(uint64,(len+uint8[]),(len+utf8[]),uint64) = aggregate%concat%1#0
        let tmp%45#0: Encoded(uint64,(len+uint8[]),(len+utf8[]),uint64) = aggregate%as_Encoded(uint64,(len+uint8[]),(len+utf8[]),uint64)%0#0
        let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
        (log tmp%46#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@11: // boxes_exist_route_L144
        let tmp%47#0: uint64 = (txn OnCompletion)
        let tmp%48#0: bool = (== tmp%47#0 NoOp)
        (assert tmp%48#0) // OnCompletion is not NoOp
        let tmp%49#0: uint64 = (txn ApplicationID)
        let tmp%50#0: bool = (!= tmp%49#0 0u)
        (assert tmp%50#0) // can only call when not creating
        let (tmp%51#0: bool, tmp%52#0: bool, tmp%53#0: bool, tmp%54#0: bool) = examples.box_storage.contract.BoxContract.boxes_exist()
        let aggregate%encoded_bool%0#0: bytes[1] = (setbit 0x00 0u tmp%51#0)
        let aggregate%set_bit%0#0: bytes[1] = (setbit aggregate%encoded_bool%0#0 1u tmp%52#0)
        let aggregate%set_bit%1#0: bytes[1] = (setbit aggregate%set_bit%0#0 2u tmp%53#0)
        let aggregate%set_bit%2#0: bytes[1] = (setbit aggregate%set_bit%1#0 3u tmp%54#0)
        let aggregate%head%4#0: bytes = (concat 0x aggregate%set_bit%2#0)
        let aggregate%as_Encoded(bool1,bool1,bool1,bool1)%0#0: Encoded(bool1,bool1,bool1,bool1) = aggregate%head%4#0
        let tmp%55#0: Encoded(bool1,bool1,bool1,bool1) = aggregate%as_Encoded(bool1,bool1,bool1,bool1)%0#0
        let tmp%56#0: bytes = (concat 0x151f7c75 tmp%55#0)
        (log tmp%56#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@12: // create_dynamic_box_route_L148
        let tmp%57#0: uint64 = (txn OnCompletion)
        let tmp%58#0: bool = (== tmp%57#0 NoOp)
        (assert tmp%58#0) // OnCompletion is not NoOp
        let tmp%59#0: uint64 = (txn ApplicationID)
        let tmp%60#0: bool = (!= tmp%59#0 0u)
        (assert tmp%60#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.create_dynamic_box()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@13: // delete_dynamic_box_route_L152
        let tmp%61#0: uint64 = (txn OnCompletion)
        let tmp%62#0: bool = (== tmp%61#0 NoOp)
        (assert tmp%62#0) // OnCompletion is not NoOp
        let tmp%63#0: uint64 = (txn ApplicationID)
        let tmp%64#0: bool = (!= tmp%63#0 0u)
        (assert tmp%64#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.delete_dynamic_box()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@14: // append_dynamic_box_route_L156
        let tmp%65#0: uint64 = (txn OnCompletion)
        let tmp%66#0: bool = (== tmp%65#0 NoOp)
        (assert tmp%66#0) // OnCompletion is not NoOp
        let tmp%67#0: uint64 = (txn ApplicationID)
        let tmp%68#0: bool = (!= tmp%67#0 0u)
        (assert tmp%68#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%3#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%69#0: uint64 = (btoi reinterpret_Encoded(uint64)%3#0)
        let tmp%70#0: uint64 = examples.box_storage.contract.BoxContract.append_dynamic_box(tmp%69#0)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%70#0)
        let aggregate%as_Encoded(uint64)%3#0: Encoded(uint64) = aggregate%val_as_bytes%3#0
        let tmp%71#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%3#0
        let tmp%72#0: bytes = (concat 0x151f7c75 tmp%71#0)
        (log tmp%72#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@15: // pop_dynamic_box_route_L171
        let tmp%73#0: uint64 = (txn OnCompletion)
        let tmp%74#0: bool = (== tmp%73#0 NoOp)
        (assert tmp%74#0) // OnCompletion is not NoOp
        let tmp%75#0: uint64 = (txn ApplicationID)
        let tmp%76#0: bool = (!= tmp%75#0 0u)
        (assert tmp%76#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%4#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%77#0: uint64 = (btoi reinterpret_Encoded(uint64)%4#0)
        let tmp%78#0: uint64 = examples.box_storage.contract.BoxContract.pop_dynamic_box(tmp%77#0)
        let aggregate%val_as_bytes%4#0: bytes[8] = (itob tmp%78#0)
        let aggregate%as_Encoded(uint64)%4#0: Encoded(uint64) = aggregate%val_as_bytes%4#0
        let tmp%79#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%4#0
        let tmp%80#0: bytes = (concat 0x151f7c75 tmp%79#0)
        (log tmp%80#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@16: // sum_dynamic_box_route_L182
        let tmp%81#0: uint64 = (txn OnCompletion)
        let tmp%82#0: bool = (== tmp%81#0 NoOp)
        (assert tmp%82#0) // OnCompletion is not NoOp
        let tmp%83#0: uint64 = (txn ApplicationID)
        let tmp%84#0: bool = (!= tmp%83#0 0u)
        (assert tmp%84#0) // can only call when not creating
        let tmp%85#0: uint64 = examples.box_storage.contract.BoxContract.sum_dynamic_box()
        let aggregate%val_as_bytes%5#0: bytes[8] = (itob tmp%85#0)
        let aggregate%as_Encoded(uint64)%5#0: Encoded(uint64) = aggregate%val_as_bytes%5#0
        let tmp%86#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%5#0
        let tmp%87#0: bytes = (concat 0x151f7c75 tmp%86#0)
        (log tmp%87#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@17: // slice_box_route_L189
        let tmp%88#0: uint64 = (txn OnCompletion)
        let tmp%89#0: bool = (== tmp%88#0 NoOp)
        (assert tmp%89#0) // OnCompletion is not NoOp
        let tmp%90#0: uint64 = (txn ApplicationID)
        let tmp%91#0: bool = (!= tmp%90#0 0u)
        (assert tmp%91#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.slice_box()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@18: // arc4_box_route_L198
        let tmp%92#0: uint64 = (txn OnCompletion)
        let tmp%93#0: bool = (== tmp%92#0 NoOp)
        (assert tmp%93#0) // OnCompletion is not NoOp
        let tmp%94#0: uint64 = (txn ApplicationID)
        let tmp%95#0: bool = (!= tmp%94#0 0u)
        (assert tmp%95#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.arc4_box()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@19: // test_box_ref_route_L208
        let tmp%96#0: uint64 = (txn OnCompletion)
        let tmp%97#0: bool = (== tmp%96#0 NoOp)
        (assert tmp%97#0) // OnCompletion is not NoOp
        let tmp%98#0: uint64 = (txn ApplicationID)
        let tmp%99#0: bool = (!= tmp%98#0 0u)
        (assert tmp%99#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.test_box_ref()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@20: // box_map_test_route_L256
        let tmp%100#0: uint64 = (txn OnCompletion)
        let tmp%101#0: bool = (== tmp%100#0 NoOp)
        (assert tmp%101#0) // OnCompletion is not NoOp
        let tmp%102#0: uint64 = (txn ApplicationID)
        let tmp%103#0: bool = (!= tmp%102#0 0u)
        (assert tmp%103#0) // can only call when not creating
        examples.box_storage.contract.BoxContract.box_map_test()
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@21: // box_map_set_route_L280
        let tmp%104#0: uint64 = (txn OnCompletion)
        let tmp%105#0: bool = (== tmp%104#0 NoOp)
        (assert tmp%105#0) // OnCompletion is not NoOp
        let tmp%106#0: uint64 = (txn ApplicationID)
        let tmp%107#0: bool = (!= tmp%106#0 0u)
        (assert tmp%107#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%5#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%108#0: uint64 = (btoi reinterpret_Encoded(uint64)%5#0)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 2)
        let tmp%109#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        examples.box_storage.contract.BoxContract.box_map_set(tmp%108#0, tmp%109#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@22: // box_map_get_route_L284
        let tmp%110#0: uint64 = (txn OnCompletion)
        let tmp%111#0: bool = (== tmp%110#0 NoOp)
        (assert tmp%111#0) // OnCompletion is not NoOp
        let tmp%112#0: uint64 = (txn ApplicationID)
        let tmp%113#0: bool = (!= tmp%112#0 0u)
        (assert tmp%113#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%6#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%114#0: uint64 = (btoi reinterpret_Encoded(uint64)%6#0)
        let tmp%115#0: string = examples.box_storage.contract.BoxContract.box_map_get(tmp%114#0)
        let aggregate%length%1#0: uint64 = (len tmp%115#0)
        let aggregate%as_bytes%3#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%3#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 tmp%115#0)
        let aggregate%as_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = aggregate%encoded_value%1#0
        let tmp%116#0: Encoded(len+utf8[]) = aggregate%as_Encoded(len+utf8[])%0#0
        let tmp%117#0: bytes = (concat 0x151f7c75 tmp%116#0)
        (log tmp%117#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@23: // box_map_del_route_L288
        let tmp%118#0: uint64 = (txn OnCompletion)
        let tmp%119#0: bool = (== tmp%118#0 NoOp)
        (assert tmp%119#0) // OnCompletion is not NoOp
        let tmp%120#0: uint64 = (txn ApplicationID)
        let tmp%121#0: bool = (!= tmp%120#0 0u)
        (assert tmp%121#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%7#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%122#0: uint64 = (btoi reinterpret_Encoded(uint64)%7#0)
        examples.box_storage.contract.BoxContract.box_map_del(tmp%122#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@24: // box_map_exists_route_L292
        let tmp%123#0: uint64 = (txn OnCompletion)
        let tmp%124#0: bool = (== tmp%123#0 NoOp)
        (assert tmp%124#0) // OnCompletion is not NoOp
        let tmp%125#0: uint64 = (txn ApplicationID)
        let tmp%126#0: bool = (!= tmp%125#0 0u)
        (assert tmp%126#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%8#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%127#0: uint64 = (btoi reinterpret_Encoded(uint64)%8#0)
        let tmp%128#0: bool = examples.box_storage.contract.BoxContract.box_map_exists(tmp%127#0)
        let aggregate%encoded_bool%1#0: bytes[1] = (setbit 0x00 0u tmp%128#0)
        let aggregate%as_Encoded(bool8)%0#0: Encoded(bool8) = aggregate%encoded_bool%1#0
        let tmp%129#0: Encoded(bool8) = aggregate%as_Encoded(bool8)%0#0
        let tmp%130#0: bytes = (concat 0x151f7c75 tmp%129#0)
        (log tmp%130#0)
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@25: // switch_case_default_L44
        goto block@26
    block@26: // switch_case_next_L44
        goto block@33
    block@27: // bare_routing_L44
        let tmp%131#0: uint64 = (txn OnCompletion)
        switch tmp%131#0 {0u => block@28, * => block@31}
    block@28: // __algopy_default_create_L1
        let tmp%132#0: uint64 = (txn ApplicationID)
        let tmp%133#0: bool = (== tmp%132#0 0u)
        (assert tmp%133#0) // can only call when creating
        goto block@29
    block@29: // L1
        goto block@30
    block@30: // after_inlined_examples.box_storage.contract.BoxContract.__algopy_default_create_L1
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@31: // switch_case_default_L44
        goto block@32
    block@32: // switch_case_next_L44
        goto block@33
    block@33: // after_if_else_L44
        let examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = examples.box_storage.contract.BoxContract.__puya_arc4_router__%0#0
        goto block@34
    block@34: // after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router___L1
        return tmp%0#0