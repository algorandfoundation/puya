{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8NA;;;AAEW;;AAAA;AAAA;AAAA;AAAY;AAAZ;AAAP;AAGJ;;;AAEW;;AAAA;AAAA;AAAP;AAGJ;;;AAEmB;;AAAM;AAAN;AAAA;AAAR;;AAAA;AAAA;AAAA;AAAA;AAAP;;AAlMJ;;;AAEQ;;AAAA;AAAA;;AAAA;AAAA;AACmB;;AAAnB;;AAAA;;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;;AAAA;AACmB;;AAAA;;;AAAnB;AAAA;;AAAA;AAAA;AAAA;AACA;;AAAA;;;AAAA;;AAG2B;;;AAAqB;;AAArB;AAA3B;;AAAA;AAAmD;;;;;;;;;;AAAnD;AAEU;;AAAA;AAAA;AACH;;AAAA;AAAA;AAAA;AAAA;AAA2B;AAAA;AAAA;AAA3B;AAAP;AAEA;;AAAA;AAAA;AAAA;AAAoB;;AAApB;AAAA;AAAA;;AAAA;AAAA;AAGO;;AAAA;AAAA;AAAqB;;AAArB;AAAP;AACO;;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAP;AACO;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAP;AACO;AAAA;AAAA;AAAqB;;AAAA;;;AAAA;AAArB;AAAP;AAGO;AAAuB;AAAvB;AAAA;AAA6B;;AAAA;;;AAA7B;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAA9B;AAAP;AACO;AAAA;AAAA;AAAwB;AAAxB;;AAAA;AAAA;AAAA;AAAwB;AAAxB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA+B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA/B;AAAP;AACO;AAAA;AAAA;AAAwB;AAAxB;;AAAA;AAAA;AAAwB;AAAxB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA8B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA9B;AAAP;AAGO;AAAiB;AAAjB;AAAA;AAAuB;;AAAA;;;AAAA;;;AAAvB;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAxB;AAAP;AACO;AAAA;AAAA;AAAkB;AAAlB;;AAAA;AAAA;AAAA;AAAkB;AAAlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAyB;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAzB;AAAP;AACO;AAAA;AAAA;AAAkB;AAAlB;;AAAA;AAAA;AAAkB;AAAlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAwB;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAxB;AAAP;AACO;AAAA;AAAA;AAAmB;AAAnB;;AAAA;AAAA;AAAmB;AAAnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAiC;;AAAA;;;AAAA;AAAA;AAAW;AAAX;;AAAA;AAAW;AAAX;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AAAP;AAEO;;AAAA;AAAA;AAAyB;;;AAAzB;AAAP;;AAIO;;AAAkB;AAAlB;AAAP;AACO;;AAAkB;AAAlB;AAAP;AACO;AAAkB;AAAlB;AAAP;AACO;;AAAsB;AAAtB;AAAP;;AAII;;AAAJ;;AACI;;AAAJ;;AACI;AAAJ;;AACO;;AAAA;AAAA;AAAA;AAAuB;;AAAvB;AAAA;;AAAA;AAAsC;;AAAtC;AAAP;AAC8B;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAvB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAA2D;;AAA3D;AAAP;AACO;AAAA;AAAA;AAAuB;;AAAvB;AAAA;;AAAA;AAA6C;;AAA7C;AAAP;AACc;;AAAA;AAAA;AAAA;AAAd;AACO;AAAP;AACY;AAAL;AAAP;AACI;;AAAJ;;;AAOuD;;;AAAqB;;AAArB;AAD5B;;AACjB;AAAqE;;AAA9C;AAER;;AAArB;;;AAAmC;AAAnC;AACA;;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;;AAAA;AAJJ;;AAAA;;AAAA;;AAAA;;AAAA;AASY;;AAAL;AAAA;;AAAuB;;AAAL;AAAA;;AAAuB;AAAL;AAAA;;AAAuB;;AAAL;AAAA;;AAA7D;;AAAA;;AAAA;;AAAA;;AAAA;AAIuB;;AACvB;;AADuB;;AACT;;;;;;;;;;;;;;;;;;;;;AAAd;AADuB;;AAEhB;AAAA;AAAY;AAAZ;;AAAA;AAAA;AAAA;AAAY;AAAZ;;AAAA;AAAA;AAAc;;AAAd;;AAAA;AAAA;AAAc;;AAAd;;AAAA;AAAA;;AAAA;AAFgB;;AAEhB;;AAAA;;AAAA;AAAoB;;;;;;;;;AAApB;AAAP;AAEA;AAAA;;AAAA;AAAmB;;;;;;;;;AAAnB;AACO;AAAA;AAAA;AAAuB;AAAvB;;AAAA;AAAA;AAAA;AAAuB;AAAvB;;AAAA;AAAA;AAAyB;;AAAzB;;AAAA;AAAA;AAAyB;;AAAzB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAgC;;;;;;;AAAhC;AAAP;;AAKc;AAAW;;AAAX;AAA0B;;;AAA1B;AAAyC;;;AAAzC;AAAwD;;;AAAxD;AAAA;AAAA;AAAA;AADc;;AAC5B;AAAA;AAD4B;;AAGrB;AAAA;AAAY;AAAZ;AAAA;AAAA;AAAA;AAAkB;;AAAlB;AAAP;AAH4B;;AAIrB;AAAA;AAAY;AAAZ;AAAA;AAAA;AAAA;AAAkB;;;AAAlB;AAAP;AAJ4B;;AAKrB;AAAA;AAAY;AAAZ;AAAA;AAAA;AAAA;AAAkB;;;AAAlB;AAAP;AAL4B;;AAMrB;AAAA;AAAY;;AAAZ;AAAA;AAAA;AAAA;AAAkB;;;AAAlB;AAAP;;AAKqB;AACd;AAAA;;AAAA;AAAP;AACqB;AACd;AAAA;;AAAA;AAAP;AACqB;AACd;AAAA;;AAAA;AAAP;AACqB;AACd;AAAA;;AAAA;AAAP;AADqB;AAIM;;AAApB;AAAP;AAJqB;AAKd;AAAA;;AAAP;AAGe;;AACD;;AAAd;AATqB;AAWL;AAAhB;;AAAA;AAXqB;AAYN;;;AAAf;AAZqB;AAaN;AAAG;AAAlB;;AAAA;AAbqB;AAcL;;AAJN;;AAIV;AAJU;;AAK2B;AAAT;;AAAA;AAfP;AAeI;AAAzB;;AAAS;AACQ;;AAAA;;AAAA;AANP;;AAMO;AAAV;AAAP;AAhBqB;AAmBd;AAAP;AAnBqB;AAoBC;AAAf;AAAP;AApBqB;AAuBL;AACT;AAAP;AACgB;AAAT;AAAP;AAzBqB;AA0Bd;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAGY;AAAA;AA7BS;AA6BrB;AAAA;AA7BqB;AA8Bd;AAAA;;AAAP;AA9BqB;AA+Bd;AAAA;AAAkB;;AAAlB;AAAP;AA/BqB;AAgCd;;;AAA+B;;AAA/B;AAAP;AAGA;;AAAyB;;AAAzB;;AACO;;AAAA;AAAA;;AAAP;AACA;;AAAA;;;AAIQ;AAGK;AAAb;AAAA;AAAA;AAAA;AAAA;;AADQ;;AACR;AAHQ;AAIiB;AAAjB;AAAA;AAAA;AAJA;AAMY;AAAb;AAAA;AAAA;AAAA;AAAA;AAJC;;AAImC;AAApC;AAAP;AANQ;AAOY;AAAb;AAAA;AAAA;AAAA;AAAA;AAAoC;AAAA;AAAA;AAApC;AAAP;AAPQ;AAQmB;AAApB;AAAA;AAAA;AAAA;AAAA;AANC;;AAM6B;AAA9B;AAAP;AAPQ;AASgB;AAAjB;AAAA;AAAA;AAAA;AAAA;AAAgC;;AAAhC;AAAA;;AAAA;AAAsD;;AAAtD;AAAP;AATQ;AAU2B;AAAnB;AAAA;AAAA;AAAA;AAAA;;AACT;AAAP;AAZQ;AAaD;AAAS;AAAT;AAAA;AAAA;AAAA;;AAAP;AACO;AAA2B;AAA3B;AAAP;AAbQ;AAiBI;AADoC;AAChD;AAAA;AAAA;AAAA;;AAAqB;;AAArB;AADgD;AAEM;AAA/C;;;AAA6D;;AAA7D;AAAP;AAlBQ;AAmBQ;AAHgC;AAG5C;AAAA;AAAJ;;;AAER;;;AAEqB;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAER;;;AAE4B;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEyB;;AAAA;AAAb;AAAA;AAAA;AAAJ;;;AAER;;;AAEe;;AAAA;AAAO;AAAP;AAAA;AAAA;AAAA;;AAAP;AA7LR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA2LK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA3LL;;;AAAA;AA2LK;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAvLL;;;AAAA;AAuLK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAnLL;;;AAAA;AAmLK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA/KL;;;AAAA;AAAA;;;AAAA;;;AA+KK;;;AAAA;;;;AAxBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAhDA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAVA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAbA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAbA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AArCA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAVL;;;AAAA;AAAA;;;AAAA;;;AAUK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AAVL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 5"
    },
    "7": {
      "op": "bytecblock 0x 0x424f585f43 0x626c6f62 \"box_d\" \"box_a\" \"b\" \"box_large\" 0x00 0x64 0x68656c6c6f \"0\" 0x151f7c75 0x3432 \"box_ref\" \"Hmmmmm\" 0x00023432 \"default\""
    },
    "93": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "95": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "98": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "examples.box_storage.contract.BoxContract.__init__",
      "op": "callsub __init__"
    },
    "101": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "104": {
      "op": "return",
      "stack_out": []
    },
    "105": {
      "subroutine": "examples.box_storage.contract.get_box_value_plus_1",
      "params": {
        "box#0": "bytes"
      },
      "block": "get_box_value_plus_1",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "108": {
      "block": "get_box_value_plus_1_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "110": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "111": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "112": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "113": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "1"
      ]
    },
    "114": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "115": {
      "retsub": true,
      "op": "retsub"
    },
    "116": {
      "subroutine": "examples.box_storage.contract.get_box_ref_length",
      "params": {
        "ref#0": "bytes"
      },
      "block": "get_box_ref_length",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "119": {
      "block": "get_box_ref_length_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "ref#0 (copy)"
      ],
      "stack_out": [
        "ref#0 (copy)"
      ]
    },
    "121": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "122": {
      "error": "check BoxRef exists",
      "op": "assert // check BoxRef exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "123": {
      "retsub": true,
      "op": "retsub"
    },
    "124": {
      "subroutine": "examples.box_storage.contract.get_box_map_value_from_key_plus_1",
      "params": {
        "box_map#0": "bytes",
        "key#0": "uint64"
      },
      "block": "get_box_map_value_from_key_plus_1",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "127": {
      "block": "get_box_map_value_from_key_plus_1_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "129": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)",
        "1"
      ]
    },
    "130": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "131": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "132": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_map#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_map#0 (copy)"
      ]
    },
    "134": {
      "op": "swap",
      "stack_out": [
        "box_map#0 (copy)",
        "encoded_value%0#0"
      ]
    },
    "135": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "136": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "137": {
      "error": "check BoxMap entry exists",
      "op": "assert // check BoxMap entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "138": {
      "retsub": true,
      "op": "retsub"
    },
    "139": {
      "subroutine": "examples.box_storage.contract.BoxContract.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "140": {
      "subroutine": "examples.box_storage.contract.BoxContract.set_boxes",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes"
      },
      "block": "set_boxes",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "143": {
      "block": "set_boxes_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "145": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "146": {
      "op": "bytec 4 // \"box_a\"",
      "defined_out": [
        "\"box_a\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_a\""
      ]
    },
    "148": {
      "op": "swap",
      "stack_out": [
        "\"box_a\"",
        "encoded_value%0#0"
      ]
    },
    "149": {
      "op": "box_put",
      "stack_out": []
    },
    "150": {
      "op": "frame_dig -2",
      "defined_out": [
        "copy%0#0"
      ],
      "stack_out": [
        "copy%0#0"
      ]
    },
    "152": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "copy%0#0"
      ],
      "stack_out": [
        "copy%0#0",
        "\"b\""
      ]
    },
    "154": {
      "op": "box_del",
      "defined_out": [
        "copy%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "copy%0#0",
        "{box_del}"
      ]
    },
    "155": {
      "op": "pop",
      "stack_out": [
        "copy%0#0"
      ]
    },
    "156": {
      "op": "bytec 5 // \"b\"",
      "stack_out": [
        "copy%0#0",
        "\"b\""
      ]
    },
    "158": {
      "op": "swap",
      "stack_out": [
        "\"b\"",
        "copy%0#0"
      ]
    },
    "159": {
      "op": "box_put",
      "stack_out": []
    },
    "160": {
      "op": "bytec_1 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "161": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "162": {
      "op": "pop",
      "stack_out": []
    },
    "163": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "164": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x424f585f43",
        "c#0 (copy)"
      ],
      "stack_out": [
        "0x424f585f43",
        "c#0 (copy)"
      ]
    },
    "166": {
      "op": "box_put",
      "stack_out": []
    },
    "167": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "169": {
      "op": "extract 2 0",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "172": {
      "op": "bytec_3 // \"box_d\"",
      "defined_out": [
        "\"box_d\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0",
        "\"box_d\""
      ]
    },
    "173": {
      "op": "box_del",
      "stack_out": [
        "materialized_values%0#0",
        "{box_del}"
      ]
    },
    "174": {
      "op": "pop",
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "175": {
      "op": "bytec_3 // \"box_d\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"box_d\""
      ]
    },
    "176": {
      "op": "swap",
      "stack_out": [
        "\"box_d\"",
        "materialized_values%0#0"
      ]
    },
    "177": {
      "op": "box_put",
      "stack_out": []
    },
    "178": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "180": {
      "op": "pushint 6152 // 6152",
      "defined_out": [
        "\"box_large\"",
        "6152"
      ],
      "stack_out": [
        "\"box_large\"",
        "6152"
      ]
    },
    "183": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "184": {
      "op": "pop",
      "stack_out": []
    },
    "185": {
      "op": "pushint 1024 // 1024",
      "defined_out": [
        "1024"
      ],
      "stack_out": [
        "1024"
      ]
    },
    "188": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "1024",
        "4"
      ],
      "stack_out": [
        "1024",
        "4"
      ]
    },
    "190": {
      "op": "*",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "191": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "tmp%0#0",
        "\"box_large\""
      ]
    },
    "193": {
      "op": "swap",
      "stack_out": [
        "\"box_large\"",
        "tmp%0#0"
      ]
    },
    "194": {
      "op": "pushbytes 0x000000000000002a",
      "defined_out": [
        "\"box_large\"",
        "0x000000000000002a",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"box_large\"",
        "tmp%0#0",
        "0x000000000000002a"
      ]
    },
    "204": {
      "op": "box_replace",
      "stack_out": []
    },
    "205": {
      "op": "bytec 5 // \"b\"",
      "stack_out": [
        "\"b\""
      ]
    },
    "207": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "208": {
      "error": "check self.box_b exists",
      "op": "assert // check self.box_b exists",
      "defined_out": [
        "b_value#0"
      ],
      "stack_out": [
        "b_value#0"
      ]
    },
    "209": {
      "op": "bytec 5 // \"b\"",
      "stack_out": [
        "b_value#0",
        "\"b\""
      ]
    },
    "211": {
      "op": "box_get",
      "defined_out": [
        "b_value#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "b_value#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "212": {
      "error": "check self.box_b exists",
      "op": "assert // check self.box_b exists",
      "stack_out": [
        "b_value#0",
        "maybe_value%1#0"
      ]
    },
    "213": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "b_value#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "b_value#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "214": {
      "op": "extract_uint16",
      "defined_out": [
        "b_value#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "b_value#0",
        "tmp%1#0"
      ]
    },
    "215": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "b_value#0"
      ]
    },
    "216": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "b_value#0",
        "0"
      ]
    },
    "217": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "218": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "219": {
      "error": "direct reference should match copy",
      "op": "assert // direct reference should match copy",
      "stack_out": []
    },
    "220": {
      "op": "bytec 4 // \"box_a\"",
      "stack_out": [
        "\"box_a\""
      ]
    },
    "222": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "223": {
      "error": "check self.box_a exists",
      "op": "assert // check self.box_a exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "224": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "225": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "3"
      ]
    },
    "227": {
      "op": "+",
      "defined_out": [
        "materialized_values%1#0"
      ],
      "stack_out": [
        "materialized_values%1#0"
      ]
    },
    "228": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "229": {
      "op": "bytec 4 // \"box_a\"",
      "stack_out": [
        "encoded_value%1#0",
        "\"box_a\""
      ]
    },
    "231": {
      "op": "swap",
      "stack_out": [
        "\"box_a\"",
        "encoded_value%1#0"
      ]
    },
    "232": {
      "op": "box_put",
      "stack_out": []
    },
    "233": {
      "op": "bytec 4 // \"box_a\"",
      "stack_out": [
        "\"box_a\""
      ]
    },
    "235": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "236": {
      "error": "check self.box_a exists",
      "op": "assert // check self.box_a exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "237": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "8"
      ]
    },
    "239": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "240": {
      "op": "assert",
      "stack_out": []
    },
    "241": {
      "op": "bytec 5 // \"b\"",
      "stack_out": [
        "\"b\""
      ]
    },
    "243": {
      "op": "box_len",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "check%1#0"
      ]
    },
    "244": {
      "error": "check self.box_b exists",
      "op": "assert // check self.box_b exists",
      "stack_out": [
        "value%1#0"
      ]
    },
    "245": {
      "op": "frame_dig -2",
      "stack_out": [
        "value%1#0",
        "b#0 (copy)"
      ]
    },
    "247": {
      "op": "len",
      "defined_out": [
        "tmp%5#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "tmp%5#0"
      ]
    },
    "248": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "249": {
      "op": "assert",
      "stack_out": []
    },
    "250": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "251": {
      "op": "box_len",
      "defined_out": [
        "check%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "check%2#0"
      ]
    },
    "252": {
      "error": "check self.box_c exists",
      "op": "assert // check self.box_c exists",
      "stack_out": [
        "value%2#0"
      ]
    },
    "253": {
      "op": "frame_dig -1",
      "stack_out": [
        "value%2#0",
        "c#0 (copy)"
      ]
    },
    "255": {
      "op": "len",
      "defined_out": [
        "tmp%7#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "tmp%7#0"
      ]
    },
    "256": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "257": {
      "op": "assert",
      "stack_out": []
    },
    "258": {
      "op": "bytec_3 // \"box_d\"",
      "stack_out": [
        "\"box_d\""
      ]
    },
    "259": {
      "op": "box_len",
      "defined_out": [
        "check%3#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "check%3#0"
      ]
    },
    "260": {
      "error": "check self.box_d exists",
      "op": "assert // check self.box_d exists",
      "stack_out": [
        "value%3#0"
      ]
    },
    "261": {
      "op": "frame_dig -2",
      "stack_out": [
        "value%3#0",
        "b#0 (copy)"
      ]
    },
    "263": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%9#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "tmp%9#0"
      ]
    },
    "266": {
      "op": "len",
      "defined_out": [
        "tmp%10#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "tmp%10#0"
      ]
    },
    "267": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "268": {
      "op": "assert",
      "stack_out": []
    },
    "269": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "270": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x424f585f43",
        "0"
      ]
    },
    "271": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "0x424f585f43",
        "1"
      ],
      "stack_out": [
        "0x424f585f43",
        "0",
        "1"
      ]
    },
    "272": {
      "op": "box_extract",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "273": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "c#0 (copy)"
      ]
    },
    "275": {
      "op": "extract 0 1",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "278": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "279": {
      "op": "assert",
      "stack_out": []
    },
    "280": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "281": {
      "op": "box_len",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "282": {
      "op": "pop",
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "283": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%15#0",
        "1"
      ]
    },
    "284": {
      "op": "-",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "285": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "tmp%17#0",
        "0x424f585f43"
      ]
    },
    "286": {
      "op": "swap",
      "stack_out": [
        "0x424f585f43",
        "tmp%17#0"
      ]
    },
    "287": {
      "op": "intc_1 // 1",
      "stack_out": [
        "0x424f585f43",
        "tmp%17#0",
        "1"
      ]
    },
    "288": {
      "op": "box_extract",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "289": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%18#0",
        "c#0 (copy)"
      ]
    },
    "291": {
      "op": "len",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "292": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0",
        "1"
      ]
    },
    "293": {
      "op": "-",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0"
      ]
    },
    "294": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "c#0 (copy)"
      ]
    },
    "296": {
      "op": "swap",
      "stack_out": [
        "tmp%18#0",
        "c#0 (copy)",
        "tmp%20#0"
      ]
    },
    "297": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%18#0",
        "c#0 (copy)",
        "tmp%20#0",
        "1"
      ]
    },
    "298": {
      "op": "extract3",
      "defined_out": [
        "tmp%18#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%21#0"
      ]
    },
    "299": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "300": {
      "op": "assert",
      "stack_out": []
    },
    "301": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "302": {
      "op": "box_len",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "303": {
      "op": "pop",
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "304": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%23#0",
        "1"
      ]
    },
    "305": {
      "op": "dig 1",
      "defined_out": [
        "1",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ],
      "stack_out": [
        "tmp%23#0",
        "1",
        "tmp%23#0 (copy)"
      ]
    },
    "307": {
      "op": "<",
      "defined_out": [
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "308": {
      "op": "swap",
      "stack_out": [
        "tmp%25#0",
        "tmp%23#0"
      ]
    },
    "309": {
      "op": "dup",
      "stack_out": [
        "tmp%25#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ]
    },
    "310": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%25#0",
        "tmp%23#0",
        "tmp%23#0 (copy)",
        "1"
      ]
    },
    "311": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%23#0",
        "tmp%23#0 (copy)",
        "1",
        "tmp%25#0"
      ]
    },
    "313": {
      "op": "select",
      "defined_out": [
        "tmp%23#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%26#0"
      ]
    },
    "314": {
      "op": "-",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "315": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%27#0",
        "0"
      ]
    },
    "316": {
      "op": "-",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "317": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "tmp%28#0",
        "0x424f585f43"
      ]
    },
    "318": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%28#0",
        "0x424f585f43",
        "0"
      ]
    },
    "319": {
      "op": "uncover 2",
      "stack_out": [
        "0x424f585f43",
        "0",
        "tmp%28#0"
      ]
    },
    "321": {
      "op": "box_extract",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "322": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%29#0",
        "c#0 (copy)"
      ]
    },
    "324": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "length%0#0"
      ]
    },
    "325": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "1"
      ]
    },
    "326": {
      "op": "dig 1",
      "defined_out": [
        "1",
        "length%0#0",
        "length%0#0 (copy)",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "1",
        "length%0#0 (copy)"
      ]
    },
    "328": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "length%0#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "329": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "is_out_of_bounds%0#0",
        "1"
      ]
    },
    "330": {
      "op": "dig 2",
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "is_out_of_bounds%0#0",
        "1",
        "length%0#0 (copy)"
      ]
    },
    "332": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "1",
        "length%0#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "334": {
      "op": "select",
      "defined_out": [
        "bounded_offset%0#0",
        "length%0#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "bounded_offset%0#0"
      ]
    },
    "335": {
      "op": "-",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "bounded_index%0#0"
      ]
    },
    "336": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%29#0",
        "bounded_index%0#0",
        "c#0 (copy)"
      ]
    },
    "338": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%29#0",
        "bounded_index%0#0",
        "c#0 (copy)",
        "0"
      ]
    },
    "339": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%29#0",
        "c#0 (copy)",
        "0",
        "bounded_index%0#0"
      ]
    },
    "341": {
      "op": "substring3",
      "defined_out": [
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "342": {
      "op": "==",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "343": {
      "op": "assert",
      "stack_out": []
    },
    "344": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "345": {
      "op": "box_len",
      "defined_out": [
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "346": {
      "op": "pop",
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "347": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "2"
      ]
    },
    "348": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "tmp%32#0",
        "tmp%32#0 (copy)"
      ],
      "stack_out": [
        "tmp%32#0",
        "2",
        "tmp%32#0 (copy)"
      ]
    },
    "350": {
      "op": "<",
      "defined_out": [
        "tmp%32#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "tmp%34#0"
      ]
    },
    "351": {
      "op": "swap",
      "stack_out": [
        "tmp%34#0",
        "tmp%32#0"
      ]
    },
    "352": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%34#0",
        "tmp%32#0",
        "2"
      ]
    },
    "353": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%32#0",
        "2",
        "tmp%34#0"
      ]
    },
    "355": {
      "op": "select",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "356": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%35#0",
        "0"
      ]
    },
    "357": {
      "op": "-",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "358": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "tmp%36#0",
        "0x424f585f43"
      ]
    },
    "359": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%36#0",
        "0x424f585f43",
        "0"
      ]
    },
    "360": {
      "op": "uncover 2",
      "stack_out": [
        "0x424f585f43",
        "0",
        "tmp%36#0"
      ]
    },
    "362": {
      "op": "box_extract",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "363": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%37#0",
        "c#0 (copy)"
      ]
    },
    "365": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "length%1#0"
      ]
    },
    "366": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%37#0",
        "length%1#0",
        "2"
      ]
    },
    "367": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "length%1#0",
        "length%1#0 (copy)",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "length%1#0",
        "2",
        "length%1#0 (copy)"
      ]
    },
    "369": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%1#0",
        "length%1#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "length%1#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "370": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%37#0",
        "length%1#0",
        "is_out_of_bounds%1#0",
        "2"
      ]
    },
    "371": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%37#0",
        "is_out_of_bounds%1#0",
        "2",
        "length%1#0"
      ]
    },
    "373": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%37#0",
        "2",
        "length%1#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "375": {
      "op": "select",
      "defined_out": [
        "bounded_index%1#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "bounded_index%1#0"
      ]
    },
    "376": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%37#0",
        "bounded_index%1#0",
        "c#0 (copy)"
      ]
    },
    "378": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%37#0",
        "bounded_index%1#0",
        "c#0 (copy)",
        "0"
      ]
    },
    "379": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%37#0",
        "c#0 (copy)",
        "0",
        "bounded_index%1#0"
      ]
    },
    "381": {
      "op": "substring3",
      "defined_out": [
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "382": {
      "op": "==",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "383": {
      "op": "assert",
      "stack_out": []
    },
    "384": {
      "op": "bytec_3 // \"box_d\"",
      "stack_out": [
        "\"box_d\""
      ]
    },
    "385": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"box_d\"",
        "0"
      ]
    },
    "386": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"box_d\"",
        "0",
        "1"
      ]
    },
    "387": {
      "op": "box_extract",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "388": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%40#0",
        "b#0 (copy)"
      ]
    },
    "390": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "393": {
      "op": "extract 0 1",
      "defined_out": [
        "tmp%40#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%42#0"
      ]
    },
    "396": {
      "op": "==",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "397": {
      "op": "assert",
      "stack_out": []
    },
    "398": {
      "op": "bytec_3 // \"box_d\"",
      "stack_out": [
        "\"box_d\""
      ]
    },
    "399": {
      "op": "box_len",
      "defined_out": [
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "tmp%45#0"
      ]
    },
    "400": {
      "op": "pop",
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "401": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%44#0",
        "1"
      ]
    },
    "402": {
      "op": "-",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "403": {
      "op": "bytec_3 // \"box_d\"",
      "stack_out": [
        "tmp%46#0",
        "\"box_d\""
      ]
    },
    "404": {
      "op": "swap",
      "stack_out": [
        "\"box_d\"",
        "tmp%46#0"
      ]
    },
    "405": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"box_d\"",
        "tmp%46#0",
        "1"
      ]
    },
    "406": {
      "op": "box_extract",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "407": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%47#0",
        "b#0 (copy)"
      ]
    },
    "409": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "412": {
      "op": "dup",
      "defined_out": [
        "tmp%47#0",
        "tmp%48#0",
        "tmp%48#0 (copy)"
      ],
      "stack_out": [
        "tmp%47#0",
        "tmp%48#0",
        "tmp%48#0 (copy)"
      ]
    },
    "413": {
      "op": "len",
      "defined_out": [
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "414": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%47#0",
        "tmp%48#0",
        "tmp%49#0",
        "1"
      ]
    },
    "415": {
      "op": "-",
      "defined_out": [
        "tmp%47#0",
        "tmp%48#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "tmp%48#0",
        "tmp%50#0"
      ]
    },
    "416": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%47#0",
        "tmp%48#0",
        "tmp%50#0",
        "1"
      ]
    },
    "417": {
      "op": "extract3",
      "defined_out": [
        "tmp%47#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "tmp%51#0"
      ]
    },
    "418": {
      "op": "==",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "419": {
      "op": "assert",
      "stack_out": []
    },
    "420": {
      "op": "bytec_3 // \"box_d\"",
      "stack_out": [
        "\"box_d\""
      ]
    },
    "421": {
      "op": "box_len",
      "defined_out": [
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "tmp%54#0"
      ]
    },
    "422": {
      "op": "pop",
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "423": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%53#0",
        "1"
      ]
    },
    "424": {
      "op": "dig 1",
      "defined_out": [
        "1",
        "tmp%53#0",
        "tmp%53#0 (copy)"
      ],
      "stack_out": [
        "tmp%53#0",
        "1",
        "tmp%53#0 (copy)"
      ]
    },
    "426": {
      "op": "<",
      "defined_out": [
        "tmp%53#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "tmp%55#0"
      ]
    },
    "427": {
      "op": "swap",
      "stack_out": [
        "tmp%55#0",
        "tmp%53#0"
      ]
    },
    "428": {
      "op": "dup",
      "stack_out": [
        "tmp%55#0",
        "tmp%53#0",
        "tmp%53#0 (copy)"
      ]
    },
    "429": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%55#0",
        "tmp%53#0",
        "tmp%53#0 (copy)",
        "1"
      ]
    },
    "430": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%53#0",
        "tmp%53#0 (copy)",
        "1",
        "tmp%55#0"
      ]
    },
    "432": {
      "op": "select",
      "defined_out": [
        "tmp%53#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "tmp%56#0"
      ]
    },
    "433": {
      "op": "-",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "434": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%57#0",
        "0"
      ]
    },
    "435": {
      "op": "-",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "436": {
      "op": "bytec_3 // \"box_d\"",
      "stack_out": [
        "tmp%58#0",
        "\"box_d\""
      ]
    },
    "437": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%58#0",
        "\"box_d\"",
        "0"
      ]
    },
    "438": {
      "op": "uncover 2",
      "stack_out": [
        "\"box_d\"",
        "0",
        "tmp%58#0"
      ]
    },
    "440": {
      "op": "box_extract",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "441": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%59#0",
        "b#0 (copy)"
      ]
    },
    "443": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%59#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0"
      ]
    },
    "446": {
      "op": "dup",
      "defined_out": [
        "tmp%59#0",
        "tmp%60#0",
        "tmp%60#0 (copy)"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0",
        "tmp%60#0 (copy)"
      ]
    },
    "447": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "tmp%59#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0",
        "length%2#0"
      ]
    },
    "448": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0",
        "length%2#0",
        "1"
      ]
    },
    "449": {
      "op": "dig 1",
      "defined_out": [
        "1",
        "length%2#0",
        "length%2#0 (copy)",
        "tmp%59#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0",
        "length%2#0",
        "1",
        "length%2#0 (copy)"
      ]
    },
    "451": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%2#0",
        "length%2#0",
        "tmp%59#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0",
        "length%2#0",
        "is_out_of_bounds%2#0"
      ]
    },
    "452": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0",
        "length%2#0",
        "is_out_of_bounds%2#0",
        "1"
      ]
    },
    "453": {
      "op": "dig 2",
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0",
        "length%2#0",
        "is_out_of_bounds%2#0",
        "1",
        "length%2#0 (copy)"
      ]
    },
    "455": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0",
        "length%2#0",
        "1",
        "length%2#0 (copy)",
        "is_out_of_bounds%2#0"
      ]
    },
    "457": {
      "op": "select",
      "defined_out": [
        "bounded_offset%1#0",
        "length%2#0",
        "tmp%59#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0",
        "length%2#0",
        "bounded_offset%1#0"
      ]
    },
    "458": {
      "op": "-",
      "defined_out": [
        "bounded_index%2#0",
        "tmp%59#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0",
        "bounded_index%2#0"
      ]
    },
    "459": {
      "op": "swap",
      "stack_out": [
        "tmp%59#0",
        "bounded_index%2#0",
        "tmp%60#0"
      ]
    },
    "460": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%59#0",
        "bounded_index%2#0",
        "tmp%60#0",
        "0"
      ]
    },
    "461": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0",
        "0",
        "bounded_index%2#0"
      ]
    },
    "463": {
      "op": "substring3",
      "defined_out": [
        "tmp%59#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%61#0"
      ]
    },
    "464": {
      "op": "==",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "465": {
      "op": "assert",
      "stack_out": []
    },
    "466": {
      "op": "bytec_3 // \"box_d\"",
      "stack_out": [
        "\"box_d\""
      ]
    },
    "467": {
      "op": "box_len",
      "defined_out": [
        "tmp%63#0",
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "tmp%64#0"
      ]
    },
    "468": {
      "op": "pop",
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "469": {
      "op": "intc_3 // 5",
      "defined_out": [
        "5",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "5"
      ]
    },
    "470": {
      "op": "dig 1",
      "defined_out": [
        "5",
        "tmp%63#0",
        "tmp%63#0 (copy)"
      ],
      "stack_out": [
        "tmp%63#0",
        "5",
        "tmp%63#0 (copy)"
      ]
    },
    "472": {
      "op": "<",
      "defined_out": [
        "tmp%63#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "tmp%65#0"
      ]
    },
    "473": {
      "op": "swap",
      "stack_out": [
        "tmp%65#0",
        "tmp%63#0"
      ]
    },
    "474": {
      "op": "intc_3 // 5",
      "stack_out": [
        "tmp%65#0",
        "tmp%63#0",
        "5"
      ]
    },
    "475": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%63#0",
        "5",
        "tmp%65#0"
      ]
    },
    "477": {
      "op": "select",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%66#0",
        "0"
      ]
    },
    "479": {
      "op": "-",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "480": {
      "op": "bytec_3 // \"box_d\"",
      "stack_out": [
        "tmp%67#0",
        "\"box_d\""
      ]
    },
    "481": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%67#0",
        "\"box_d\"",
        "0"
      ]
    },
    "482": {
      "op": "uncover 2",
      "stack_out": [
        "\"box_d\"",
        "0",
        "tmp%67#0"
      ]
    },
    "484": {
      "op": "box_extract",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "485": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%68#0",
        "b#0 (copy)"
      ]
    },
    "487": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%68#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0"
      ]
    },
    "490": {
      "op": "dup",
      "defined_out": [
        "tmp%68#0",
        "tmp%69#0",
        "tmp%69#0 (copy)"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0",
        "tmp%69#0 (copy)"
      ]
    },
    "491": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "tmp%68#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0",
        "length%3#0"
      ]
    },
    "492": {
      "op": "intc_3 // 5",
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0",
        "length%3#0",
        "5"
      ]
    },
    "493": {
      "op": "dig 1",
      "defined_out": [
        "5",
        "length%3#0",
        "length%3#0 (copy)",
        "tmp%68#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0",
        "length%3#0",
        "5",
        "length%3#0 (copy)"
      ]
    },
    "495": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%3#0",
        "length%3#0",
        "tmp%68#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0",
        "length%3#0",
        "is_out_of_bounds%3#0"
      ]
    },
    "496": {
      "op": "intc_3 // 5",
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0",
        "length%3#0",
        "is_out_of_bounds%3#0",
        "5"
      ]
    },
    "497": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0",
        "is_out_of_bounds%3#0",
        "5",
        "length%3#0"
      ]
    },
    "499": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0",
        "5",
        "length%3#0",
        "is_out_of_bounds%3#0"
      ]
    },
    "501": {
      "op": "select",
      "defined_out": [
        "bounded_index%3#0",
        "tmp%68#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0",
        "bounded_index%3#0"
      ]
    },
    "502": {
      "op": "swap",
      "stack_out": [
        "tmp%68#0",
        "bounded_index%3#0",
        "tmp%69#0"
      ]
    },
    "503": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%68#0",
        "bounded_index%3#0",
        "tmp%69#0",
        "0"
      ]
    },
    "504": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0",
        "0",
        "bounded_index%3#0"
      ]
    },
    "506": {
      "op": "substring3",
      "defined_out": [
        "tmp%68#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%70#0"
      ]
    },
    "507": {
      "op": "==",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "508": {
      "op": "assert",
      "stack_out": []
    },
    "509": {
      "op": "bytec_3 // \"box_d\"",
      "stack_out": [
        "\"box_d\""
      ]
    },
    "510": {
      "op": "box_len",
      "defined_out": [
        "tmp%72#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "tmp%73#0"
      ]
    },
    "511": {
      "op": "pop",
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "512": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%72#0",
        "2"
      ]
    },
    "513": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "tmp%72#0",
        "tmp%72#0 (copy)"
      ],
      "stack_out": [
        "tmp%72#0",
        "2",
        "tmp%72#0 (copy)"
      ]
    },
    "515": {
      "op": "<",
      "defined_out": [
        "tmp%72#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "tmp%74#0"
      ]
    },
    "516": {
      "op": "swap",
      "stack_out": [
        "tmp%74#0",
        "tmp%72#0"
      ]
    },
    "517": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%74#0",
        "tmp%72#0",
        "2"
      ]
    },
    "518": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%72#0",
        "2",
        "tmp%74#0"
      ]
    },
    "520": {
      "op": "select",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "521": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%75#0",
        "0"
      ]
    },
    "522": {
      "op": "-",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "523": {
      "op": "bytec_3 // \"box_d\"",
      "stack_out": [
        "tmp%76#0",
        "\"box_d\""
      ]
    },
    "524": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%76#0",
        "\"box_d\"",
        "0"
      ]
    },
    "525": {
      "op": "uncover 2",
      "stack_out": [
        "\"box_d\"",
        "0",
        "tmp%76#0"
      ]
    },
    "527": {
      "op": "box_extract",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "528": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%77#0",
        "b#0 (copy)"
      ]
    },
    "530": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%77#0",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "tmp%78#0"
      ]
    },
    "533": {
      "op": "dup",
      "defined_out": [
        "tmp%77#0",
        "tmp%78#0",
        "tmp%78#0 (copy)"
      ],
      "stack_out": [
        "tmp%77#0",
        "tmp%78#0",
        "tmp%78#0 (copy)"
      ]
    },
    "534": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "tmp%77#0",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "tmp%78#0",
        "length%4#0"
      ]
    },
    "535": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%77#0",
        "tmp%78#0",
        "length%4#0",
        "2"
      ]
    },
    "536": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "length%4#0",
        "length%4#0 (copy)",
        "tmp%77#0",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "tmp%78#0",
        "length%4#0",
        "2",
        "length%4#0 (copy)"
      ]
    },
    "538": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%4#0",
        "length%4#0",
        "tmp%77#0",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "tmp%78#0",
        "length%4#0",
        "is_out_of_bounds%4#0"
      ]
    },
    "539": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%77#0",
        "tmp%78#0",
        "length%4#0",
        "is_out_of_bounds%4#0",
        "2"
      ]
    },
    "540": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%77#0",
        "tmp%78#0",
        "is_out_of_bounds%4#0",
        "2",
        "length%4#0"
      ]
    },
    "542": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%77#0",
        "tmp%78#0",
        "2",
        "length%4#0",
        "is_out_of_bounds%4#0"
      ]
    },
    "544": {
      "op": "select",
      "defined_out": [
        "bounded_index%4#0",
        "tmp%77#0",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "tmp%78#0",
        "bounded_index%4#0"
      ]
    },
    "545": {
      "op": "swap",
      "stack_out": [
        "tmp%77#0",
        "bounded_index%4#0",
        "tmp%78#0"
      ]
    },
    "546": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%77#0",
        "bounded_index%4#0",
        "tmp%78#0",
        "0"
      ]
    },
    "547": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%77#0",
        "tmp%78#0",
        "0",
        "bounded_index%4#0"
      ]
    },
    "549": {
      "op": "substring3",
      "defined_out": [
        "tmp%77#0",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "tmp%79#0"
      ]
    },
    "550": {
      "op": "==",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "551": {
      "op": "assert",
      "stack_out": []
    },
    "552": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "\"box_large\""
      ]
    },
    "554": {
      "op": "box_len",
      "defined_out": [
        "check%4#0",
        "value%4#0"
      ],
      "stack_out": [
        "value%4#0",
        "check%4#0"
      ]
    },
    "555": {
      "error": "check self.box_large exists",
      "op": "assert // check self.box_large exists",
      "stack_out": [
        "value%4#0"
      ]
    },
    "556": {
      "op": "pushint 6152 // 6152",
      "stack_out": [
        "value%4#0",
        "6152"
      ]
    },
    "559": {
      "op": "==",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "560": {
      "op": "assert",
      "stack_out": []
    },
    "561": {
      "retsub": true,
      "op": "retsub"
    },
    "562": {
      "subroutine": "examples.box_storage.contract.BoxContract.check_keys",
      "params": {},
      "block": "check_keys_block@0",
      "stack_in": [],
      "op": "bytec 4 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "564": {
      "op": "dup",
      "defined_out": [
        "\"box_a\"",
        "0x626f785f61"
      ],
      "stack_out": [
        "\"box_a\"",
        "0x626f785f61"
      ]
    },
    "565": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "566": {
      "error": "box a key ok",
      "op": "assert // box a key ok",
      "stack_out": []
    },
    "567": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "569": {
      "op": "dup",
      "defined_out": [
        "\"b\"",
        "0x62"
      ],
      "stack_out": [
        "\"b\"",
        "0x62"
      ]
    },
    "570": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "571": {
      "error": "box b key ok",
      "op": "assert // box b key ok",
      "stack_out": []
    },
    "572": {
      "op": "bytec_1 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "573": {
      "op": "dup",
      "stack_out": [
        "0x424f585f43",
        "0x424f585f43"
      ]
    },
    "574": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "575": {
      "error": "box c key ok",
      "op": "assert // box c key ok",
      "stack_out": []
    },
    "576": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "578": {
      "op": "dup",
      "defined_out": [
        "\"box_large\"",
        "0x626f785f6c61726765"
      ],
      "stack_out": [
        "\"box_large\"",
        "0x626f785f6c61726765"
      ]
    },
    "579": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "580": {
      "error": "box large key ok",
      "op": "assert // box large key ok",
      "stack_out": []
    },
    "581": {
      "retsub": true,
      "op": "retsub"
    },
    "582": {
      "subroutine": "examples.box_storage.contract.BoxContract.delete_boxes",
      "params": {},
      "block": "delete_boxes_block@0",
      "stack_in": [],
      "op": "bytec 4 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "584": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "585": {
      "op": "pop",
      "stack_out": []
    },
    "586": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "588": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "589": {
      "op": "pop",
      "stack_out": []
    },
    "590": {
      "op": "bytec_1 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "591": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "592": {
      "op": "pop",
      "stack_out": []
    },
    "593": {
      "op": "bytec 4 // \"box_a\"",
      "stack_out": [
        "\"box_a\""
      ]
    },
    "595": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "596": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "597": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "598": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "42"
      ]
    },
    "600": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "42",
        "maybe_value_converted%0#0"
      ]
    },
    "601": {
      "op": "uncover 2",
      "stack_out": [
        "42",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "603": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "604": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "state_get%0#0",
        "42"
      ]
    },
    "606": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "607": {
      "op": "assert",
      "stack_out": []
    },
    "608": {
      "op": "bytec 12 // 0x3432",
      "defined_out": [
        "0x3432"
      ],
      "stack_out": [
        "0x3432"
      ]
    },
    "610": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "611": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0"
      ],
      "stack_out": [
        "as_bytes%0#0"
      ]
    },
    "612": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0"
      ],
      "stack_out": [
        "length_uint16%0#0"
      ]
    },
    "615": {
      "op": "bytec 12 // 0x3432",
      "stack_out": [
        "length_uint16%0#0",
        "0x3432"
      ]
    },
    "617": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "618": {
      "op": "bytec 5 // \"b\"",
      "stack_out": [
        "encoded_value%0#0",
        "\"b\""
      ]
    },
    "620": {
      "op": "box_get",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "621": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "622": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "encoded_value%0#0"
      ]
    },
    "624": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "encoded_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "625": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "627": {
      "op": "select",
      "defined_out": [
        "state_get%1#0"
      ],
      "stack_out": [
        "state_get%1#0"
      ]
    },
    "628": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "631": {
      "op": "bytec 12 // 0x3432",
      "stack_out": [
        "tmp%1#0",
        "0x3432"
      ]
    },
    "633": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "634": {
      "op": "assert",
      "stack_out": []
    },
    "635": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "636": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "637": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "638": {
      "op": "bytec 15 // 0x00023432",
      "defined_out": [
        "0x00023432",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "0x00023432"
      ]
    },
    "640": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%2#0",
        "0x00023432",
        "maybe_value%2#0"
      ]
    },
    "641": {
      "op": "uncover 2",
      "stack_out": [
        "0x00023432",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "643": {
      "op": "select",
      "defined_out": [
        "state_get%2#0"
      ],
      "stack_out": [
        "state_get%2#0"
      ]
    },
    "644": {
      "op": "bytec 15 // 0x00023432",
      "stack_out": [
        "state_get%2#0",
        "0x00023432"
      ]
    },
    "646": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "647": {
      "op": "assert",
      "stack_out": []
    },
    "648": {
      "op": "bytec 4 // \"box_a\"",
      "stack_out": [
        "\"box_a\""
      ]
    },
    "650": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "651": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "652": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "653": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "a_exists#0"
      ],
      "stack_out": [
        "a#0",
        "a_exists#0"
      ]
    },
    "654": {
      "op": "!",
      "defined_out": [
        "a#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%4#0"
      ]
    },
    "655": {
      "op": "assert",
      "stack_out": [
        "a#0"
      ]
    },
    "656": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "0"
      ]
    },
    "657": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "658": {
      "op": "assert",
      "stack_out": []
    },
    "659": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "661": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "662": {
      "op": "pop",
      "stack_out": []
    },
    "663": {
      "retsub": true,
      "op": "retsub"
    },
    "664": {
      "subroutine": "examples.box_storage.contract.BoxContract.read_boxes",
      "params": {},
      "block": "read_boxes_block@0",
      "stack_in": [],
      "op": "pushint 1024 // 1024",
      "defined_out": [
        "1024"
      ],
      "stack_out": [
        "1024"
      ]
    },
    "667": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "1024",
        "4"
      ],
      "stack_out": [
        "1024",
        "4"
      ]
    },
    "669": {
      "op": "*",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "670": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_large\""
      ]
    },
    "672": {
      "op": "swap",
      "stack_out": [
        "\"box_large\"",
        "tmp%0#0"
      ]
    },
    "673": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "\"box_large\"",
        "8",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"box_large\"",
        "tmp%0#0",
        "8"
      ]
    },
    "675": {
      "op": "box_extract",
      "defined_out": [
        "large_e#0"
      ],
      "stack_out": [
        "large_e#0"
      ]
    },
    "676": {
      "op": "bytec 4 // \"box_a\"",
      "defined_out": [
        "\"box_a\"",
        "large_e#0"
      ],
      "stack_out": [
        "large_e#0",
        "\"box_a\""
      ]
    },
    "678": {
      "callsub": "examples.box_storage.contract.get_box_value_plus_1",
      "op": "callsub get_box_value_plus_1",
      "defined_out": [
        "large_e#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%1#0"
      ]
    },
    "681": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "large_e#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%1#0",
        "1"
      ]
    },
    "682": {
      "op": "-",
      "defined_out": [
        "large_e#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%2#0"
      ]
    },
    "683": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "large_e#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%2#0",
        "\"b\""
      ]
    },
    "685": {
      "op": "box_get",
      "defined_out": [
        "large_e#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "686": {
      "error": "check self.box_b exists",
      "op": "assert // check self.box_b exists",
      "stack_out": [
        "large_e#0",
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "687": {
      "op": "extract 2 0",
      "defined_out": [
        "large_e#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "690": {
      "op": "bytec_1 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "large_e#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%2#0",
        "tmp%3#0",
        "0x424f585f43"
      ]
    },
    "691": {
      "op": "box_get",
      "defined_out": [
        "large_e#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "large_e#0",
        "tmp%2#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "692": {
      "error": "check self.box_c exists",
      "op": "assert // check self.box_c exists",
      "stack_out": [
        "large_e#0",
        "tmp%2#0",
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "693": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "large_e#0"
      ]
    },
    "695": {
      "op": "btoi",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ]
    },
    "696": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "tmp%4#0",
        "tmp%2#0"
      ]
    },
    "698": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%1#0",
        "tmp%4#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "700": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "tmp%2#0",
        "tmp%3#0",
        "maybe_value%1#0"
      ]
    },
    "702": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ]
    },
    "704": {
      "retsub": true,
      "op": "retsub"
    },
    "705": {
      "subroutine": "examples.box_storage.contract.BoxContract.boxes_exist",
      "params": {},
      "block": "boxes_exist_block@0",
      "stack_in": [],
      "op": "bytec 4 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "707": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "708": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "710": {
      "op": "bytec 5 // \"b\"",
      "defined_out": [
        "\"b\"",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "\"b\""
      ]
    },
    "712": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "713": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ]
    },
    "715": {
      "op": "bytec_1 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "0x424f585f43"
      ]
    },
    "716": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "_%2#0",
        "maybe_exists%2#0"
      ]
    },
    "717": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ]
    },
    "719": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "\"box_large\""
      ]
    },
    "721": {
      "op": "box_len",
      "defined_out": [
        "_%3#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "_%3#0",
        "maybe_exists%3#0"
      ]
    },
    "722": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ]
    },
    "724": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0",
        "maybe_exists%0#0"
      ]
    },
    "726": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_exists%3#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ]
    },
    "728": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ]
    },
    "730": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ]
    },
    "732": {
      "retsub": true,
      "op": "retsub"
    },
    "733": {
      "subroutine": "examples.box_storage.contract.BoxContract.slice_box",
      "params": {},
      "block": "slice_box_block@0",
      "stack_in": [],
      "op": "bytec 10 // \"0\"",
      "defined_out": [
        "\"0\""
      ],
      "stack_out": [
        "\"0\""
      ]
    },
    "735": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "736": {
      "op": "pop",
      "stack_out": []
    },
    "737": {
      "op": "bytec 10 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "739": {
      "op": "pushbytes 0x54657374696e672074657374696e6720313233",
      "defined_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ],
      "stack_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ]
    },
    "760": {
      "op": "box_put",
      "stack_out": []
    },
    "761": {
      "op": "bytec 10 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "763": {
      "op": "box_len",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "764": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "765": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "766": {
      "op": "dig 1",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "tmp%0#0 (copy)"
      ]
    },
    "768": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "769": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "770": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "771": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "772": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "tmp%2#0"
      ]
    },
    "774": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "775": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "776": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "7"
      ]
    },
    "778": {
      "op": "dig 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "7",
        "tmp%0#0 (copy)"
      ]
    },
    "780": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "781": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "782": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "7"
      ]
    },
    "784": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "7",
        "tmp%4#0"
      ]
    },
    "786": {
      "op": "select",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "787": {
      "op": "dig 1",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%3#0 (copy)"
      ]
    },
    "789": {
      "op": "-",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "790": {
      "op": "bytec 10 // \"0\"",
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "\"0\""
      ]
    },
    "792": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%6#0",
        "\"0\"",
        "tmp%3#0"
      ]
    },
    "794": {
      "op": "uncover 2",
      "stack_out": [
        "\"0\"",
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "796": {
      "op": "box_extract",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "797": {
      "op": "pushbytes 0x54657374696e67",
      "defined_out": [
        "0x54657374696e67",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x54657374696e67"
      ]
    },
    "806": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "807": {
      "op": "assert",
      "stack_out": []
    },
    "808": {
      "op": "bytec_1 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "809": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "810": {
      "op": "pop",
      "stack_out": []
    },
    "811": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "812": {
      "op": "pushbytes 0x000548656c6c6f",
      "defined_out": [
        "0x000548656c6c6f",
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43",
        "0x000548656c6c6f"
      ]
    },
    "821": {
      "op": "box_put",
      "stack_out": []
    },
    "822": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "823": {
      "op": "box_len",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "824": {
      "op": "pop",
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "825": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "2"
      ]
    },
    "826": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "tmp%9#0",
        "2",
        "tmp%9#0 (copy)"
      ]
    },
    "828": {
      "op": "<",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "829": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "tmp%9#0"
      ]
    },
    "830": {
      "op": "dup",
      "stack_out": [
        "tmp%11#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "831": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%11#0",
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "2"
      ]
    },
    "832": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "2",
        "tmp%11#0"
      ]
    },
    "834": {
      "op": "select",
      "defined_out": [
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0"
      ]
    },
    "835": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "tmp%9#0"
      ]
    },
    "836": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%9#0",
        "10"
      ]
    },
    "838": {
      "op": "dig 1",
      "stack_out": [
        "tmp%12#0",
        "tmp%9#0",
        "10",
        "tmp%9#0 (copy)"
      ]
    },
    "840": {
      "op": "<",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%9#0",
        "tmp%13#0"
      ]
    },
    "841": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0"
      ]
    },
    "842": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0",
        "10"
      ]
    },
    "844": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%12#0",
        "tmp%9#0",
        "10",
        "tmp%13#0"
      ]
    },
    "846": {
      "op": "select",
      "defined_out": [
        "tmp%12#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "847": {
      "op": "dig 1",
      "defined_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%14#0",
        "tmp%12#0 (copy)"
      ]
    },
    "849": {
      "op": "-",
      "defined_out": [
        "tmp%12#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "850": {
      "op": "bytec_1 // 0x424f585f43",
      "stack_out": [
        "tmp%12#0",
        "tmp%15#0",
        "0x424f585f43"
      ]
    },
    "851": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%15#0",
        "0x424f585f43",
        "tmp%12#0"
      ]
    },
    "853": {
      "op": "uncover 2",
      "stack_out": [
        "0x424f585f43",
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "855": {
      "op": "box_extract",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "856": {
      "op": "pushbytes 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0x48656c6c6f"
      ]
    },
    "863": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "864": {
      "op": "assert",
      "stack_out": []
    },
    "865": {
      "retsub": true,
      "op": "retsub"
    },
    "866": {
      "subroutine": "examples.box_storage.contract.BoxContract.arc4_box",
      "params": {},
      "block": "arc4_box_block@0",
      "stack_in": [],
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "867": {
      "op": "bytec 7 // 0x00",
      "defined_out": [
        "0x",
        "0x00"
      ],
      "stack_out": [
        "0x",
        "0x00"
      ]
    },
    "869": {
      "op": "concat",
      "defined_out": [
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0"
      ]
    },
    "870": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "result%0#0"
      ],
      "stack_out": [
        "result%0#0",
        "0x01"
      ]
    },
    "873": {
      "op": "concat",
      "defined_out": [
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0"
      ]
    },
    "874": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "result%1#0"
      ],
      "stack_out": [
        "result%1#0",
        "0x02"
      ]
    },
    "877": {
      "op": "concat",
      "defined_out": [
        "result%2#0"
      ],
      "stack_out": [
        "result%2#0"
      ]
    },
    "878": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "0x03",
        "result%2#0"
      ],
      "stack_out": [
        "result%2#0",
        "0x03"
      ]
    },
    "881": {
      "op": "concat",
      "defined_out": [
        "result%3#0"
      ],
      "stack_out": [
        "result%3#0"
      ]
    },
    "882": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "result%3#0",
        "0x"
      ]
    },
    "883": {
      "op": "swap",
      "stack_out": [
        "0x",
        "result%3#0"
      ]
    },
    "884": {
      "op": "concat",
      "defined_out": [
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0"
      ]
    },
    "885": {
      "op": "bytec 8 // 0x64",
      "defined_out": [
        "0x64",
        "array_data%0#0"
      ],
      "stack_out": [
        "array_data%0#0",
        "0x64"
      ]
    },
    "887": {
      "op": "swap",
      "stack_out": [
        "0x64",
        "array_data%0#0"
      ]
    },
    "888": {
      "op": "box_put",
      "stack_out": []
    },
    "889": {
      "op": "bytec 8 // 0x64",
      "stack_out": [
        "0x64"
      ]
    },
    "891": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "892": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0"
      ]
    },
    "893": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "0"
      ]
    },
    "894": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "array_head_and_tail%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "0",
        "1"
      ]
    },
    "895": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "896": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "1"
      ]
    },
    "897": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "898": {
      "op": "bytec 7 // 0x00",
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x00"
      ]
    },
    "900": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "901": {
      "op": "assert",
      "stack_out": []
    },
    "902": {
      "op": "bytec 8 // 0x64",
      "stack_out": [
        "0x64"
      ]
    },
    "904": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "905": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "array_head_and_tail%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0"
      ]
    },
    "906": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%1#0",
        "1"
      ]
    },
    "907": {
      "op": "dup",
      "stack_out": [
        "array_head_and_tail%1#0",
        "1",
        "1"
      ]
    },
    "908": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ],
      "stack_out": [
        "array_head_and_tail%1#0",
        "item_offset%1#0"
      ]
    },
    "909": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%1#0",
        "item_offset%1#0",
        "1"
      ]
    },
    "910": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "911": {
      "op": "pushbytes 0x01",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "0x01"
      ]
    },
    "914": {
      "op": "b==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "915": {
      "op": "assert",
      "stack_out": []
    },
    "916": {
      "op": "bytec 8 // 0x64",
      "stack_out": [
        "0x64"
      ]
    },
    "918": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "919": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "array_head_and_tail%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%2#0"
      ]
    },
    "920": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%2#0",
        "2"
      ]
    },
    "921": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%2#0",
        "2",
        "1"
      ]
    },
    "922": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ],
      "stack_out": [
        "array_head_and_tail%2#0",
        "item_offset%2#0"
      ]
    },
    "923": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%2#0",
        "item_offset%2#0",
        "1"
      ]
    },
    "924": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "reinterpret_biguint%4#0"
      ]
    },
    "925": {
      "op": "pushbytes 0x02",
      "stack_out": [
        "reinterpret_biguint%4#0",
        "0x02"
      ]
    },
    "928": {
      "op": "b==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "929": {
      "op": "assert",
      "stack_out": []
    },
    "930": {
      "op": "bytec 8 // 0x64",
      "stack_out": [
        "0x64"
      ]
    },
    "932": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "933": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "array_head_and_tail%3#0"
      ],
      "stack_out": [
        "array_head_and_tail%3#0"
      ]
    },
    "934": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "array_head_and_tail%3#0"
      ],
      "stack_out": [
        "array_head_and_tail%3#0",
        "3"
      ]
    },
    "936": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%3#0",
        "3",
        "1"
      ]
    },
    "937": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%3#0",
        "item_offset%3#0"
      ],
      "stack_out": [
        "array_head_and_tail%3#0",
        "item_offset%3#0"
      ]
    },
    "938": {
      "op": "intc_1 // 1",
      "stack_out": [
        "array_head_and_tail%3#0",
        "item_offset%3#0",
        "1"
      ]
    },
    "939": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "reinterpret_biguint%6#0"
      ]
    },
    "940": {
      "op": "pushbytes 0x03",
      "stack_out": [
        "reinterpret_biguint%6#0",
        "0x03"
      ]
    },
    "943": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "944": {
      "op": "assert",
      "stack_out": []
    },
    "945": {
      "retsub": true,
      "op": "retsub"
    },
    "946": {
      "subroutine": "examples.box_storage.contract.BoxContract.test_box_ref",
      "params": {},
      "block": "test_box_ref_block@0",
      "stack_in": [],
      "op": "bytec_2 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "947": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "948": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "950": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "951": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "952": {
      "op": "bytec_2 // 0x626c6f62",
      "defined_out": [
        "0x626c6f62"
      ],
      "stack_out": [
        "0x626c6f62"
      ]
    },
    "953": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "954": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "956": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "957": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "958": {
      "op": "bytec_2 // 0x626c6f62",
      "stack_out": [
        "0x626c6f62"
      ]
    },
    "959": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "_%2#0",
        "maybe_exists%2#0"
      ]
    },
    "960": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "962": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "963": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "964": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "965": {
      "op": "box_len",
      "defined_out": [
        "_%3#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "_%3#0",
        "maybe_exists%3#0"
      ]
    },
    "966": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%3#0"
      ]
    },
    "968": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "969": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "970": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "971": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "973": {
      "op": "box_create",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "974": {
      "op": "assert",
      "stack_out": []
    },
    "975": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "976": {
      "op": "box_len",
      "defined_out": [
        "_%4#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "_%4#0",
        "maybe_exists%4#0"
      ]
    },
    "977": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%4#0"
      ]
    },
    "979": {
      "error": "has data",
      "op": "assert // has data",
      "stack_out": []
    },
    "980": {
      "op": "txn Sender",
      "defined_out": [
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0"
      ]
    },
    "982": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "984": {
      "op": "swap",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "985": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "986": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0"
      ]
    },
    "987": {
      "op": "dig 2",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0",
        "sender_bytes#0 (copy)"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0",
        "sender_bytes#0 (copy)"
      ]
    },
    "989": {
      "op": "box_replace",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "990": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "991": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"blob\"",
        "8000",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "8000"
      ]
    },
    "994": {
      "op": "box_resize",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "995": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "996": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0"
      ]
    },
    "997": {
      "op": "dup",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0",
        "0"
      ]
    },
    "998": {
      "op": "dig 4",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "app_address#0 (copy)",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0",
        "0",
        "app_address#0 (copy)"
      ]
    },
    "1000": {
      "op": "box_splice",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "1001": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "1002": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "\"blob\"",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "64"
      ]
    },
    "1004": {
      "op": "bytec 9 // 0x68656c6c6f",
      "defined_out": [
        "\"blob\"",
        "0x68656c6c6f",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "64",
        "0x68656c6c6f"
      ]
    },
    "1006": {
      "op": "box_replace",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "1007": {
      "op": "bytec 9 // 0x68656c6c6f",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "0x68656c6c6f"
      ]
    },
    "1009": {
      "op": "len",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%5#0"
      ]
    },
    "1010": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%5#0",
        "64"
      ]
    },
    "1012": {
      "op": "+",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%6#0"
      ]
    },
    "1013": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%6#0",
        "\"blob\""
      ]
    },
    "1014": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%6#0",
        "\"blob\"",
        "0"
      ]
    },
    "1015": {
      "op": "uncover 2",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0",
        "tmp%6#0"
      ]
    },
    "1017": {
      "op": "box_extract",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "prefix#0"
      ]
    },
    "1018": {
      "op": "dig 2",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "prefix#0",
        "app_address#0 (copy)"
      ]
    },
    "1020": {
      "op": "dig 2",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "prefix#0",
        "app_address#0 (copy)",
        "sender_bytes#0 (copy)"
      ]
    },
    "1022": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "prefix#0",
        "tmp%7#0"
      ]
    },
    "1023": {
      "op": "bytec 9 // 0x68656c6c6f",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "prefix#0",
        "tmp%7#0",
        "0x68656c6c6f"
      ]
    },
    "1025": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "prefix#0",
        "tmp%8#0"
      ]
    },
    "1026": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%9#0"
      ]
    },
    "1027": {
      "op": "assert",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "1028": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "1029": {
      "op": "box_del",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%10#0"
      ]
    },
    "1030": {
      "op": "assert",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "1031": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "1032": {
      "op": "dup",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0x626c6f62"
      ]
    },
    "1033": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%11#0"
      ]
    },
    "1034": {
      "op": "assert",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "1035": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "1036": {
      "op": "box_get",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "value#0",
        "exists#0"
      ]
    },
    "1037": {
      "op": "!",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%12#0",
        "value#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "value#0",
        "tmp%12#0"
      ]
    },
    "1038": {
      "op": "assert",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "value#0"
      ]
    },
    "1039": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "app_address#0",
        "sender_bytes#0",
        "value#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "value#0",
        "0x"
      ]
    },
    "1040": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%13#0"
      ]
    },
    "1041": {
      "op": "assert",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "1042": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "1043": {
      "op": "box_get",
      "defined_out": [
        "app_address#0",
        "maybe_exists%6#0",
        "maybe_value%1#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "maybe_value%1#0",
        "maybe_exists%6#0"
      ]
    },
    "1044": {
      "op": "swap",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "maybe_exists%6#0",
        "maybe_value%1#0"
      ]
    },
    "1045": {
      "op": "dig 2",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "maybe_exists%6#0",
        "maybe_value%1#0",
        "sender_bytes#0 (copy)"
      ]
    },
    "1047": {
      "op": "swap",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "maybe_exists%6#0",
        "sender_bytes#0 (copy)",
        "maybe_value%1#0"
      ]
    },
    "1048": {
      "op": "uncover 2",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "sender_bytes#0 (copy)",
        "maybe_value%1#0",
        "maybe_exists%6#0"
      ]
    },
    "1050": {
      "op": "select",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "state_get%0#0"
      ]
    },
    "1051": {
      "op": "dig 1",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "state_get%0#0",
        "sender_bytes#0 (copy)"
      ]
    },
    "1053": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%14#0"
      ]
    },
    "1054": {
      "op": "assert",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "1055": {
      "op": "swap",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "1056": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1057": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "tmp%15#0",
        "\"blob\""
      ]
    },
    "1058": {
      "op": "swap",
      "stack_out": [
        "\"blob\"",
        "tmp%15#0"
      ]
    },
    "1059": {
      "op": "box_put",
      "stack_out": []
    },
    "1060": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1061": {
      "op": "box_len",
      "defined_out": [
        "_%5#0",
        "maybe_exists%7#0"
      ],
      "stack_out": [
        "_%5#0",
        "maybe_exists%7#0"
      ]
    },
    "1062": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%7#0"
      ]
    },
    "1064": {
      "error": "Blob exists",
      "op": "assert // Blob exists",
      "stack_out": []
    },
    "1065": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1066": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1067": {
      "error": "check BoxRef exists",
      "op": "assert // check BoxRef exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1068": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "value%0#0",
        "64"
      ]
    },
    "1070": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1071": {
      "op": "assert",
      "stack_out": []
    },
    "1072": {
      "op": "bytec_2 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1073": {
      "callsub": "examples.box_storage.contract.get_box_ref_length",
      "op": "callsub get_box_ref_length",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1076": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "tmp%17#0",
        "64"
      ]
    },
    "1078": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1079": {
      "op": "assert",
      "stack_out": []
    },
    "1080": {
      "op": "bytec 13 // \"box_ref\"",
      "defined_out": [
        "\"box_ref\""
      ],
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "1082": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "\"box_ref\"",
        "32"
      ]
    },
    "1084": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "1085": {
      "op": "pop",
      "stack_out": []
    },
    "1086": {
      "op": "bytec 13 // \"box_ref\"",
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "1088": {
      "op": "box_len",
      "defined_out": [
        "_%6#0",
        "maybe_exists%8#0"
      ],
      "stack_out": [
        "_%6#0",
        "maybe_exists%8#0"
      ]
    },
    "1089": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%8#0"
      ]
    },
    "1091": {
      "error": "has data",
      "op": "assert // has data",
      "stack_out": []
    },
    "1092": {
      "op": "bytec 13 // \"box_ref\"",
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "1094": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1095": {
      "op": "pop",
      "stack_out": []
    },
    "1096": {
      "retsub": true,
      "op": "retsub"
    },
    "1097": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_test",
      "params": {},
      "block": "box_map_test_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1098": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1099": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"\""
      ]
    },
    "1100": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%0#0"
      ]
    },
    "1101": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1102": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1103": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "1104": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1105": {
      "op": "bytec 14 // \"Hmmmmm\"",
      "defined_out": [
        "\"Hmmmmm\"",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "\"Hmmmmm\""
      ]
    },
    "1107": {
      "op": "box_put",
      "stack_out": []
    },
    "1108": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1109": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "1110": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "encoded_value%1#0",
        "\"\""
      ]
    },
    "1111": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%1#0"
      ]
    },
    "1112": {
      "op": "concat",
      "defined_out": [
        "box_0#0"
      ],
      "stack_out": [
        "box_0#0"
      ]
    },
    "1113": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_0#0",
        "0"
      ]
    },
    "1114": {
      "op": "itob",
      "defined_out": [
        "box_0#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "box_0#0",
        "encoded_value%2#0"
      ]
    },
    "1115": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "box_0#0",
        "encoded_value%2#0",
        "\"\""
      ]
    },
    "1116": {
      "op": "swap",
      "stack_out": [
        "box_0#0",
        "\"\"",
        "encoded_value%2#0"
      ]
    },
    "1117": {
      "op": "concat",
      "defined_out": [
        "box_0#0",
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "box_0#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1118": {
      "op": "box_len",
      "defined_out": [
        "box_0#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "box_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "1119": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "box_0#0",
        "value%0#0"
      ]
    },
    "1120": {
      "op": "bytec 14 // \"Hmmmmm\"",
      "stack_out": [
        "box_0#0",
        "value%0#0",
        "\"Hmmmmm\""
      ]
    },
    "1122": {
      "op": "len",
      "defined_out": [
        "box_0#0",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "box_0#0",
        "value%0#0",
        "tmp%0#0"
      ]
    },
    "1123": {
      "op": "==",
      "defined_out": [
        "box_0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_0#0",
        "tmp%1#0"
      ]
    },
    "1124": {
      "op": "assert",
      "stack_out": [
        "box_0#0"
      ]
    },
    "1125": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_0#0",
        "0"
      ]
    },
    "1126": {
      "op": "itob",
      "defined_out": [
        "box_0#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "box_0#0",
        "encoded_value%3#0"
      ]
    },
    "1127": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "box_0#0",
        "encoded_value%3#0",
        "\"\""
      ]
    },
    "1128": {
      "op": "swap",
      "stack_out": [
        "box_0#0",
        "\"\"",
        "encoded_value%3#0"
      ]
    },
    "1129": {
      "op": "concat",
      "defined_out": [
        "box_0#0",
        "box_prefixed_key%3#0"
      ],
      "stack_out": [
        "box_0#0",
        "box_prefixed_key%3#0"
      ]
    },
    "1130": {
      "op": "box_len",
      "defined_out": [
        "box_0#0",
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "box_0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "1131": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "box_0#0",
        "value%1#0"
      ]
    },
    "1132": {
      "op": "swap",
      "stack_out": [
        "value%1#0",
        "box_0#0"
      ]
    },
    "1133": {
      "op": "box_len",
      "defined_out": [
        "check%2#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%1#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "1134": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "stack_out": [
        "value%1#0",
        "value%2#0"
      ]
    },
    "1135": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1136": {
      "op": "assert",
      "stack_out": []
    },
    "1137": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1138": {
      "op": "itob",
      "defined_out": [
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0"
      ]
    },
    "1139": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "encoded_value%4#0",
        "\"\""
      ]
    },
    "1140": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%4#0"
      ]
    },
    "1141": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0"
      ]
    },
    "1142": {
      "op": "box_len",
      "defined_out": [
        "check%3#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "check%3#0"
      ]
    },
    "1143": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "value%3#0"
      ]
    },
    "1144": {
      "op": "bytec 14 // \"Hmmmmm\"",
      "stack_out": [
        "value%3#0",
        "\"Hmmmmm\""
      ]
    },
    "1146": {
      "op": "len",
      "defined_out": [
        "tmp%3#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "tmp%3#0"
      ]
    },
    "1147": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1148": {
      "op": "assert",
      "stack_out": []
    },
    "1149": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1150": {
      "op": "itob",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "1151": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "encoded_value%5#0",
        "\"\""
      ]
    },
    "1152": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%5#0"
      ]
    },
    "1153": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%5#0"
      ]
    },
    "1154": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1155": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1156": {
      "op": "bytec 16 // \"default\"",
      "defined_out": [
        "\"default\"",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "\"default\""
      ]
    },
    "1158": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "\"default\"",
        "maybe_value%0#0"
      ]
    },
    "1159": {
      "op": "uncover 2",
      "stack_out": [
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1161": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "1162": {
      "op": "bytec 16 // \"default\"",
      "stack_out": [
        "state_get%0#0",
        "\"default\""
      ]
    },
    "1164": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1165": {
      "op": "assert",
      "stack_out": []
    },
    "1166": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1167": {
      "op": "itob",
      "defined_out": [
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0"
      ]
    },
    "1168": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "encoded_value%6#0",
        "\"\""
      ]
    },
    "1169": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%6#0"
      ]
    },
    "1170": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%6#0"
      ],
      "stack_out": [
        "box_prefixed_key%6#0"
      ]
    },
    "1171": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1172": {
      "op": "bury 1",
      "defined_out": [
        "exists#0"
      ],
      "stack_out": [
        "exists#0"
      ]
    },
    "1174": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1175": {
      "op": "assert",
      "stack_out": []
    },
    "1176": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1177": {
      "op": "itob",
      "defined_out": [
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0"
      ]
    },
    "1178": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "encoded_value%7#0",
        "\"\""
      ]
    },
    "1179": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%7#0"
      ]
    },
    "1180": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%7#0"
      ],
      "stack_out": [
        "box_prefixed_key%7#0"
      ]
    },
    "1181": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%2#0"
      ]
    },
    "1182": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "1184": {
      "op": "assert",
      "stack_out": []
    },
    "1185": {
      "op": "bytec_0 // \"\"",
      "stack_out": [
        "\"\""
      ]
    },
    "1186": {
      "op": "dup",
      "defined_out": [
        "\"\"",
        "0x"
      ],
      "stack_out": [
        "\"\"",
        "0x"
      ]
    },
    "1187": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1188": {
      "op": "assert",
      "stack_out": []
    },
    "1189": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1190": {
      "op": "itob",
      "defined_out": [
        "encoded_value%8#0"
      ],
      "stack_out": [
        "encoded_value%8#0"
      ]
    },
    "1191": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_value%8#0",
        "0x"
      ]
    },
    "1192": {
      "op": "swap",
      "stack_out": [
        "0x",
        "encoded_value%8#0"
      ]
    },
    "1193": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%8#0"
      ],
      "stack_out": [
        "box_prefixed_key%8#0"
      ]
    },
    "1194": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%8#0",
        "box_prefixed_key%8#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%8#0",
        "box_prefixed_key%8#0 (copy)"
      ]
    },
    "1195": {
      "op": "box_del",
      "stack_out": [
        "box_prefixed_key%8#0",
        "{box_del}"
      ]
    },
    "1196": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%8#0"
      ]
    },
    "1197": {
      "op": "bytec 9 // \"hello\"",
      "defined_out": [
        "\"hello\"",
        "box_prefixed_key%8#0"
      ],
      "stack_out": [
        "box_prefixed_key%8#0",
        "\"hello\""
      ]
    },
    "1199": {
      "op": "box_put",
      "stack_out": []
    },
    "1200": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "0x"
      ]
    },
    "1201": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x",
        "0"
      ]
    },
    "1202": {
      "callsub": "examples.box_storage.contract.get_box_map_value_from_key_plus_1",
      "op": "callsub get_box_map_value_from_key_plus_1",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1205": {
      "op": "bytec 9 // \"hello\"",
      "stack_out": [
        "tmp%8#0",
        "\"hello\""
      ]
    },
    "1207": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1208": {
      "op": "assert",
      "stack_out": []
    },
    "1209": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1210": {
      "op": "itob",
      "defined_out": [
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0"
      ]
    },
    "1211": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "encoded_value%9#0",
        "0x"
      ]
    },
    "1212": {
      "op": "swap",
      "stack_out": [
        "0x",
        "encoded_value%9#0"
      ]
    },
    "1213": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%9#0"
      ]
    },
    "1214": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1215": {
      "op": "pop",
      "stack_out": []
    },
    "1216": {
      "retsub": true,
      "op": "retsub"
    },
    "1217": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_set",
      "params": {
        "key#0": "uint64",
        "value#0": "bytes"
      },
      "block": "box_map_set",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1220": {
      "block": "box_map_set_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1222": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1223": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"\""
      ]
    },
    "1224": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%0#0"
      ]
    },
    "1225": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1226": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1227": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "1228": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1229": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "value#0 (copy)"
      ]
    },
    "1231": {
      "op": "box_put",
      "stack_out": []
    },
    "1232": {
      "retsub": true,
      "op": "retsub"
    },
    "1233": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_get",
      "params": {
        "key#0": "uint64"
      },
      "block": "box_map_get",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1236": {
      "block": "box_map_get_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1238": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1239": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"\""
      ]
    },
    "1240": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%0#0"
      ]
    },
    "1241": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1242": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1243": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1244": {
      "retsub": true,
      "op": "retsub"
    },
    "1245": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_del",
      "params": {
        "key#0": "uint64"
      },
      "block": "box_map_del",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1248": {
      "block": "box_map_del_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1250": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1251": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"\""
      ]
    },
    "1252": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%0#0"
      ]
    },
    "1253": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1254": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1255": {
      "op": "pop",
      "stack_out": []
    },
    "1256": {
      "retsub": true,
      "op": "retsub"
    },
    "1257": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_exists",
      "params": {
        "key#0": "uint64"
      },
      "block": "box_map_exists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1260": {
      "block": "box_map_exists_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "1262": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1263": {
      "op": "bytec_0 // \"\"",
      "defined_out": [
        "\"\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"\""
      ]
    },
    "1264": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%0#0"
      ]
    },
    "1265": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1266": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1267": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1269": {
      "retsub": true,
      "op": "retsub"
    },
    "1270": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "1272": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "1273": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1274": {
      "op": "bz approval_program_bare_routing@18",
      "stack_out": []
    },
    "1277": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1280": {
      "op": "pushbytes 0x7d37296e // method \"set_boxes(uint64,byte[],string)void\"",
      "defined_out": [
        "Method(set_boxes(uint64,byte[],string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)"
      ]
    },
    "1286": {
      "op": "pushbytes 0x33325d3d // method \"check_keys()void\"",
      "defined_out": [
        "Method(check_keys()void)",
        "Method(set_boxes(uint64,byte[],string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)"
      ]
    },
    "1292": {
      "op": "pushbytes 0xd566c632 // method \"delete_boxes()void\"",
      "defined_out": [
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(set_boxes(uint64,byte[],string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)"
      ]
    },
    "1298": {
      "op": "pushbytes 0xa6174812 // method \"read_boxes()(uint64,byte[],string,uint64)\"",
      "defined_out": [
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))"
      ]
    },
    "1304": {
      "op": "pushbytes 0xf13dd937 // method \"boxes_exist()(bool,bool,bool,bool)\"",
      "defined_out": [
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))"
      ]
    },
    "1310": {
      "op": "pushbytes 0x04ef4971 // method \"slice_box()void\"",
      "defined_out": [
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(slice_box()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(slice_box()void)"
      ]
    },
    "1316": {
      "op": "pushbytes 0x23ecb32c // method \"arc4_box()void\"",
      "defined_out": [
        "Method(arc4_box()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(slice_box()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(slice_box()void)",
        "Method(arc4_box()void)"
      ]
    },
    "1322": {
      "op": "pushbytes 0xeef75816 // method \"test_box_ref()void\"",
      "defined_out": [
        "Method(arc4_box()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(slice_box()void)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)"
      ]
    },
    "1328": {
      "op": "pushbytes 0xb532913a // method \"box_map_test()void\"",
      "defined_out": [
        "Method(arc4_box()void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(slice_box()void)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)"
      ]
    },
    "1334": {
      "op": "pushbytes 0xc29f1669 // method \"box_map_set(uint64,string)void\"",
      "defined_out": [
        "Method(arc4_box()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(slice_box()void)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)"
      ]
    },
    "1340": {
      "op": "pushbytes 0x9c888c09 // method \"box_map_get(uint64)string\"",
      "defined_out": [
        "Method(arc4_box()void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(slice_box()void)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)"
      ]
    },
    "1346": {
      "op": "pushbytes 0xe6f68506 // method \"box_map_del(uint64)void\"",
      "defined_out": [
        "Method(arc4_box()void)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(slice_box()void)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)"
      ]
    },
    "1352": {
      "op": "pushbytes 0x8ee2c364 // method \"box_map_exists(uint64)bool\"",
      "defined_out": [
        "Method(arc4_box()void)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(slice_box()void)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)"
      ]
    },
    "1358": {
      "op": "uncover 13",
      "stack_out": [
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(delete_boxes()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "tmp%2#0"
      ]
    },
    "1360": {
      "op": "match approval_program_set_boxes_route@3 approval_program_check_keys_route@4 approval_program_delete_boxes_route@5 approval_program_read_boxes_route@6 approval_program_boxes_exist_route@7 approval_program_slice_box_route@8 approval_program_arc4_box_route@9 approval_program_test_box_ref_route@10 approval_program_box_map_test_route@11 approval_program_box_map_set_route@12 approval_program_box_map_get_route@13 approval_program_box_map_del_route@14 approval_program_box_map_exists_route@15",
      "stack_out": []
    },
    "1388": {
      "block": "approval_program_after_if_else@24",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1389": {
      "block": "approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "1390": {
      "block": "approval_program_box_map_exists_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1392": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "NoOp"
      ]
    },
    "1393": {
      "op": "==",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1394": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1395": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1397": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0",
        "0"
      ]
    },
    "1398": {
      "op": "!=",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1399": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1400": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1403": {
      "op": "btoi",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "1404": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_exists",
      "op": "callsub box_map_exists",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1407": {
      "op": "bytec 7 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "1409": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "1410": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "1412": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0"
      ]
    },
    "1413": {
      "op": "bytec 11 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0",
        "0x151f7c75"
      ]
    },
    "1415": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ]
    },
    "1416": {
      "op": "concat",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "1417": {
      "op": "log",
      "stack_out": []
    },
    "1418": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1419": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    },
    "1422": {
      "block": "approval_program_box_map_del_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1424": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "NoOp"
      ]
    },
    "1425": {
      "op": "==",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1426": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1427": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "1429": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "0"
      ]
    },
    "1430": {
      "op": "!=",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1431": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1432": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1435": {
      "op": "btoi",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "1436": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_del",
      "op": "callsub box_map_del",
      "stack_out": []
    },
    "1439": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1440": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    },
    "1443": {
      "block": "approval_program_box_map_get_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "1445": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "NoOp"
      ]
    },
    "1446": {
      "op": "==",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "1447": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1448": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "1450": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "0"
      ]
    },
    "1451": {
      "op": "!=",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "1452": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1453": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1456": {
      "op": "btoi",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1457": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_get",
      "op": "callsub box_map_get",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1460": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "1461": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%1#0"
      ]
    },
    "1462": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%3#0"
      ]
    },
    "1463": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%1#0"
      ]
    },
    "1466": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%0#0"
      ]
    },
    "1467": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "1468": {
      "op": "bytec 11 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "1470": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "1471": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1472": {
      "op": "log",
      "stack_out": []
    },
    "1473": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1474": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    },
    "1477": {
      "block": "approval_program_box_map_set_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1479": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0",
        "NoOp"
      ]
    },
    "1480": {
      "op": "==",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1481": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1482": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1484": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "0"
      ]
    },
    "1485": {
      "op": "!=",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "1486": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1487": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1490": {
      "op": "btoi",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "1491": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "1494": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%48#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "tmp%50#0"
      ]
    },
    "1497": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_set",
      "op": "callsub box_map_set",
      "stack_out": []
    },
    "1500": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1501": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    },
    "1504": {
      "block": "approval_program_box_map_test_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1506": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "NoOp"
      ]
    },
    "1507": {
      "op": "==",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1508": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1509": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1511": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "0"
      ]
    },
    "1512": {
      "op": "!=",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1513": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1514": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_test",
      "op": "callsub box_map_test"
    },
    "1517": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1518": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    },
    "1521": {
      "block": "approval_program_test_box_ref_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1523": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "NoOp"
      ]
    },
    "1524": {
      "op": "==",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1525": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1526": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1528": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "0"
      ]
    },
    "1529": {
      "op": "!=",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1530": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1531": {
      "callsub": "examples.box_storage.contract.BoxContract.test_box_ref",
      "op": "callsub test_box_ref"
    },
    "1534": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1535": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    },
    "1538": {
      "block": "approval_program_arc4_box_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1540": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "NoOp"
      ]
    },
    "1541": {
      "op": "==",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1542": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1543": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1545": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0"
      ]
    },
    "1546": {
      "op": "!=",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "1547": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1548": {
      "callsub": "examples.box_storage.contract.BoxContract.arc4_box",
      "op": "callsub arc4_box"
    },
    "1551": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1552": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    },
    "1555": {
      "block": "approval_program_slice_box_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1557": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "NoOp"
      ]
    },
    "1558": {
      "op": "==",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "1559": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1560": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1562": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "0"
      ]
    },
    "1563": {
      "op": "!=",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1564": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1565": {
      "callsub": "examples.box_storage.contract.BoxContract.slice_box",
      "op": "callsub slice_box"
    },
    "1568": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1569": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    },
    "1572": {
      "block": "approval_program_boxes_exist_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1574": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "NoOp"
      ]
    },
    "1575": {
      "op": "==",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1576": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1577": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1579": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0"
      ]
    },
    "1580": {
      "op": "!=",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1581": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1582": {
      "callsub": "examples.box_storage.contract.BoxContract.boxes_exist",
      "op": "callsub boxes_exist",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "1585": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ]
    },
    "1587": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%6#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "1589": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0"
      ]
    },
    "1590": {
      "op": "bytec 7 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "0x00"
      ]
    },
    "1592": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "elements_to_encode%4#0",
        "0x00",
        "0"
      ]
    },
    "1593": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "0x00",
        "0",
        "elements_to_encode%4#0"
      ]
    },
    "1595": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "encoded_bool%0#0"
      ]
    },
    "1596": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_bool%0#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0"
      ]
    },
    "1598": {
      "op": "bytec 7 // 0x00",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_bool%0#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "0x00"
      ]
    },
    "1600": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_bool%0#0",
        "elements_to_encode%6#0",
        "elements_to_encode%5#0",
        "0x00",
        "0"
      ]
    },
    "1601": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_bool%0#0",
        "elements_to_encode%6#0",
        "0x00",
        "0",
        "elements_to_encode%5#0"
      ]
    },
    "1603": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_bool%0#0",
        "elements_to_encode%6#0",
        "encoded_bool%1#0"
      ]
    },
    "1604": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "elements_to_encode%6#0"
      ]
    },
    "1605": {
      "op": "bytec 7 // 0x00",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "elements_to_encode%6#0",
        "0x00"
      ]
    },
    "1607": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "elements_to_encode%6#0",
        "0x00",
        "0"
      ]
    },
    "1608": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0",
        "elements_to_encode%6#0"
      ]
    },
    "1610": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%7#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0"
      ]
    },
    "1611": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "1613": {
      "op": "bytec 7 // 0x00",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00"
      ]
    },
    "1615": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%7#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0"
      ]
    },
    "1616": {
      "op": "uncover 5",
      "stack_out": [
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x00",
        "0",
        "elements_to_encode%7#0"
      ]
    },
    "1618": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%3#0"
      ]
    },
    "1619": {
      "op": "cover 3",
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0"
      ]
    },
    "1621": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "0x"
      ]
    },
    "1622": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%1#0",
        "0x",
        "encoded_bool%0#0"
      ]
    },
    "1624": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_tuple_buffer%8#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1625": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_tuple_buffer%8#0",
        "encoded_bool%1#0"
      ]
    },
    "1626": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_tuple_buffer%8#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "1627": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_tuple_buffer%8#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_tuple_buffer%8#0",
        "is_true%0#0"
      ]
    },
    "1628": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "is_true%0#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1629": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_tuple_buffer%8#0",
        "is_true%0#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "is_true%0#0",
        "encoded_tuple_buffer%8#0",
        "1"
      ]
    },
    "1630": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_tuple_buffer%8#0",
        "1",
        "is_true%0#0"
      ]
    },
    "1632": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0",
        "encoded_bool%3#0",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_bool%2#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1633": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_tuple_buffer%9#0",
        "encoded_bool%2#0"
      ]
    },
    "1634": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_tuple_buffer%9#0",
        "encoded_bool%2#0",
        "0"
      ]
    },
    "1635": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%3#0",
        "encoded_tuple_buffer%9#0",
        "is_true%1#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_tuple_buffer%9#0",
        "is_true%1#0"
      ]
    },
    "1636": {
      "op": "swap",
      "stack_out": [
        "encoded_bool%3#0",
        "is_true%1#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1637": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "encoded_bool%3#0",
        "encoded_tuple_buffer%9#0",
        "is_true%1#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "is_true%1#0",
        "encoded_tuple_buffer%9#0",
        "2"
      ]
    },
    "1638": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_tuple_buffer%9#0",
        "2",
        "is_true%1#0"
      ]
    },
    "1640": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1641": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_bool%3#0"
      ]
    },
    "1642": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_bool%3#0",
        "0"
      ]
    },
    "1643": {
      "op": "getbit",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "is_true%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "is_true%2#0"
      ]
    },
    "1644": {
      "op": "swap",
      "stack_out": [
        "is_true%2#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1645": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "encoded_tuple_buffer%10#0",
        "is_true%2#0"
      ],
      "stack_out": [
        "is_true%2#0",
        "encoded_tuple_buffer%10#0",
        "3"
      ]
    },
    "1647": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "3",
        "is_true%2#0"
      ]
    },
    "1649": {
      "op": "setbit",
      "defined_out": [
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0"
      ]
    },
    "1650": {
      "op": "bytec 11 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "0x151f7c75"
      ]
    },
    "1652": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "1653": {
      "op": "concat",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1654": {
      "op": "log",
      "stack_out": []
    },
    "1655": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1656": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    },
    "1659": {
      "block": "approval_program_read_boxes_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1661": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "NoOp"
      ]
    },
    "1662": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1663": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1664": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1666": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "1667": {
      "op": "!=",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1668": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1669": {
      "callsub": "examples.box_storage.contract.BoxContract.read_boxes",
      "op": "callsub read_boxes",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "1672": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "1674": {
      "op": "cover 3",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "1676": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%1#0",
        "elements_to_encode%0#0"
      ]
    },
    "1677": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1678": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "1679": {
      "op": "dup",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)"
      ]
    },
    "1680": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0",
        "elements_to_encode%1#0",
        "length%0#0"
      ]
    },
    "1681": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0",
        "elements_to_encode%1#0",
        "as_bytes%0#0"
      ]
    },
    "1682": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0",
        "elements_to_encode%1#0",
        "length_uint16%0#0"
      ]
    },
    "1685": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0",
        "length_uint16%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "1686": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0"
      ]
    },
    "1687": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1688": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%2#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "elements_to_encode%3#0"
      ]
    },
    "1690": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1691": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1693": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "elements_to_encode%2#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "0x"
      ]
    },
    "1694": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "0x",
        "val_as_bytes%0#0"
      ]
    },
    "1695": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0"
      ]
    },
    "1696": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "20"
      ]
    },
    "1698": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "as_bytes%1#0"
      ]
    },
    "1699": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%1#0",
        "encoded_value%0#0",
        "offset_as_uint16%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%1#0",
        "offset_as_uint16%0#0"
      ]
    },
    "1702": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1703": {
      "op": "dig 1",
      "defined_out": [
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1705": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0"
      ]
    },
    "1706": {
      "op": "pushint 20 // 20",
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0",
        "20"
      ]
    },
    "1708": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "1709": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "as_bytes%2#0"
      ]
    },
    "1710": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "1713": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1714": {
      "op": "uncover 2",
      "stack_out": [
        "elements_to_encode%2#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "1716": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1717": {
      "op": "swap",
      "stack_out": [
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ]
    },
    "1718": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1719": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "elements_to_encode%2#0"
      ]
    },
    "1720": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1721": {
      "op": "bytec 11 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "0x151f7c75"
      ]
    },
    "1723": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1724": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1725": {
      "op": "log",
      "stack_out": []
    },
    "1726": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1727": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    },
    "1730": {
      "block": "approval_program_delete_boxes_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1732": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "NoOp"
      ]
    },
    "1733": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1734": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1735": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1737": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0"
      ]
    },
    "1738": {
      "op": "!=",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1739": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1740": {
      "callsub": "examples.box_storage.contract.BoxContract.delete_boxes",
      "op": "callsub delete_boxes"
    },
    "1743": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1744": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    },
    "1747": {
      "block": "approval_program_check_keys_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1749": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "NoOp"
      ]
    },
    "1750": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1751": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1752": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1754": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "0"
      ]
    },
    "1755": {
      "op": "!=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1756": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1757": {
      "callsub": "examples.box_storage.contract.BoxContract.check_keys",
      "op": "callsub check_keys"
    },
    "1760": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1761": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    },
    "1764": {
      "block": "approval_program_set_boxes_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1766": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "1767": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1768": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1769": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1771": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1772": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1773": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1774": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1777": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1778": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1781": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1784": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%7#0"
      ]
    },
    "1786": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%9#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1788": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1790": {
      "callsub": "examples.box_storage.contract.BoxContract.set_boxes",
      "op": "callsub set_boxes",
      "stack_out": []
    },
    "1793": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1794": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    },
    "1797": {
      "block": "approval_program_bare_routing@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "1799": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "0"
      ]
    },
    "1800": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%68#0"
      ]
    },
    "1801": {
      "op": "match approval_program___algopy_default_create@19",
      "stack_out": []
    },
    "1805": {
      "block": "approval_program_switch_case_next@23",
      "stack_in": [],
      "op": "b approval_program_after_if_else@24"
    },
    "1808": {
      "block": "approval_program___algopy_default_create@19",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "1810": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "0"
      ]
    },
    "1811": {
      "op": "==",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "1812": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1813": {
      "block": "approval_program_after_inlined_examples.box_storage.contract.BoxContract.__algopy_default_create@21",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1814": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@25"
    }
  }
}