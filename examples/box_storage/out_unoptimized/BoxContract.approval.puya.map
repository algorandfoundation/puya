{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2XA;;;AAEW;;AAAA;AAAA;AAAA;AAAY;AAAZ;AAAP;AAGJ;;;AAEW;;AAAA;AAAA;AAAP;AAGJ;;;AAEmB;;AAAM;AAAN;AAAA;AAAR;;AAAA;AAAA;AAAA;AAAA;AAAP;AApUW;;;AAAoB;;AAApB;AAAP;;AAIR;;;AAEQ;;AAAA;AAAA;;AAAA;AAAA;AACA;;AAAA;;AAAA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AAAA;;AAAA;AACmB;;AAAA;;;AAAnB;;AAAA;;AAAA;;AAAA;AAAA;AACA;;AAAA;;;AAAA;;AACA;;AAAA;AAAA;AAAyB;;AAAzB;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAC2B;;;AAAqB;;AAArB;AAA3B;;AAAA;AAAmD;;;;;;;;;;AAAnD;AAEU;;AAAA;AAAA;AACH;;AAAA;AAAA;AAAA;AAAA;AAA2B;AAAA;AAAA;AAA3B;AAAP;AAEA;;AAAA;AAAA;AAAA;AAAoB;;AAApB;AAAA;AAAA;;AAAA;AAAA;AAGO;;AAAA;AAAA;AAAqB;AAArB;AAAP;AACO;;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAP;AACO;AAAA;AAAA;AAAqB;;AAAA;AAArB;AAAP;AACO;;AAAA;AAAA;AAAqB;;AAAA;;;AAAA;AAArB;AAAP;AAGO;AAAuB;AAAvB;AAAA;AAA6B;;AAAQ;AAAR;AAAA;AAA7B;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAA9B;AAAP;AACO;AAAA;AAAA;AAAwB;AAAxB;;AAAA;AAAA;AAAA;AAAwB;AAAxB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA+B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA/B;AAAP;AACO;AAAA;AAAA;AAAwB;AAAxB;;AAAA;AAAA;AAAwB;AAAxB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA8B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA9B;AAAP;AAGO;;AAAiB;AAAjB;AAAA;AAAuB;;AAAA;;;AAAS;AAAT;AAAA;AAAvB;AAAP;AACO;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAwB;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAxB;AAAP;AACO;;AAAA;AAAA;AAAkB;AAAlB;;AAAA;AAAA;AAAA;AAAkB;AAAlB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAyB;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAzB;AAAP;AACO;;AAAA;AAAA;AAAkB;;AAAlB;;AAAA;AAAA;AAAkB;;AAAlB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAwB;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAxB;AAAP;AACO;;AAAA;AAAA;AAAmB;AAAnB;;AAAA;AAAA;AAAmB;AAAnB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAiC;;AAAA;;;AAAA;AAAA;AAAW;AAAX;;AAAA;AAAW;AAAX;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAjC;AAAP;AAEO;;AAAA;AAAA;AAAyB;;;AAAzB;AAAP;;AAIO;;AAAkB;AAAlB;AAAP;AACO;;AAAkB;AAAlB;AAAP;AACO;AAAkB;AAAlB;AAAP;AACO;;AAAsB;AAAtB;AAAP;;AAIA;;AAAA;;;AAAA;;;AAER;;;AAEQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAER;;;AAEsB;;;AAAd;AAAA;;;AACQ;AACG;;AAAA;AAAA;;AAAnB;;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACoB;;AAAA;AAAR;;;;;;;;;;;AACJ;AAII;;AAAJ;;AACI;;AAAJ;;AACI;AAAJ;;AACO;;AAAA;AAAA;AAAA;AAAuB;;AAAvB;AAAA;;AAAA;AAAsC;;AAAtC;AAAP;AAC8B;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAvB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAA2D;;AAA3D;AAAP;AAC8B;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAvB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAA6C;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAA7C;AAAP;AACc;;AAAA;AAAA;AAAA;AAAd;AACO;AAAP;AACY;AAAL;AAAP;AACI;;AAAJ;;;AAIQ;;AAAA;AAAA;AACR;AAAA;;AAAA;AAAA;AAAA;AAAW;AAAX;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACA;;AAAA;AAAA;;AAKyB;;AAArB;;;AAAmC;AAAnC;AACA;;AAAA;AAAA;AAAA;;;AACA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAJJ;;AAAA;;AAAA;;AAAA;;AAAA;AASY;;AAAL;AAAA;;AAAuB;;AAAL;AAAA;;AAAuB;AAAL;AAAA;;AAAuB;;AAAL;AAAA;;AAA7D;;AAAA;;AAAA;;AAAA;;AAAA;AAKM;;AACE;AAAA;AAAA;;;AAAA;AACF;;AAAmB;AAAnB;AAAA;AAH0B;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA;;AAAA;AAAA;AAAA;;AAQI;AAAJ;;;AAER;;;;AAGe;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AACmC;AACzB;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAV;AAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAKqE;;AAAA;AAmNlE;AAAkB;AAAlB;AAAyC;AAAzC;AACgC;AAAQ;AAAR;AAAvB;AAAA;AACT;AArNH;AAAA;AAAA;AACO;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AAGsC;;AA+MnC;AAAkB;AAAlB;AAAyC;AAAzC;AACgC;AAAQ;AAAR;AAAvB;AAAA;AACT;AAjNyD;;AAAQ;AAAR;AAAT;AADnD;AAAA;;AACgD;AADhD;;AAAA;AAGO;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AACS;AAAjB;AAAiB;AAAL;;AAAK;;AAAA;;AAAA;AAAjB;;;AAd2C;AAe/B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAf+B;AAe/B;AAAA;AACW;AAAX;AAAA;;AAFK;;AAAA;AAAA;AAAA;;;;;AAIc;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAlBY;AAkBnC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAlBmC;AAkBnC;AAAA;AACO;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AADJ;AAGO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAP;;AAAA;AAER;;;AAI2C;AACzB;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAV;;AAEuB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAHY;AAGnC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAHmC;AAGnC;AAAA;AA0LG;AAAkB;AAAlB;AAAyC;AAAzC;AACgC;AAAQ;AAAR;AAAvB;AAAA;AACT;AA1LmB;;AAAQ;AAAR;AALa;AAKnC;;AAAA;;AAA+C;AAA/C;AAIyC;;AAoLtC;AAAkB;AAAlB;AAAyC;AAAzC;AACgC;AAAQ;AAAR;AAAvB;AAAA;AACT;AArLH;AAAA;AAAA;AAEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAP;AAAA;AAER;;;AAEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AACO;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAmC;AAAnC;AAAP;AACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAlC;AACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAnB;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACY;;AAAA;AAAA;;;;;;;;;;;AACJ;AAIyB;AAAA;AAAA;;;AAAzB;;AAAA;;AAAA;;AAAA;AAAA;;AAII;;AAAJ;;;AAER;;;AAIwC;;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAV;AAEiC;;AAAA;AAAmB;AAApB;AAAJ;AAAA;AAA5B;;AAAA;AAAA;AACS;AAAjB;AAAiB;AAAA;;AAAA;;AAAA;AAAjB;;;AAJwC;;AAK5B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAL4B;;AAK5B;AAAA;AACW;AAAX;AAAA;;AAFK;;AAAA;AAAA;AAAA;;;;;AAIU;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AARa;;AAQhC;AAAA;AAAA;AAAA;;AAAA;AARgC;;AAQhC;AAAA;AACO;;AAAA;AAAA;AAAA;AAAA;AAAP;;AAAA;AAER;;;AAIwC;;AACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACS;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFa;;AAEhC;AAAA;AAAA;AAAA;;AAAA;AAFgC;;AAEhC;AAAA;AAC0C;AAAV;AAAJ;AAAA;AAA5B;;AAAA;AAAA;AAEO;;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEgB;AACG;;AAAA;AAAA;AAAA;AAAnB;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACY;;AAAA;AAAA;;;;;;;;;;;AACJ;AAIuB;;AACvB;;AADuB;;AACT;;;;;;;;;;;;;;;;;;;;;AAAd;AADuB;;AAEhB;AAAA;AAAY;AAAZ;;AAAA;AAAA;AAAA;AAAY;AAAZ;;AAAA;AAAA;AAAc;;AAAd;;AAAA;AAAA;AAAc;;AAAd;;AAAA;AAAA;;AAAA;AAFgB;;AAEhB;;AAAA;;AAAA;AAAoB;;;;;;;;;AAApB;AAAP;AAEmB;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAnB;AAAA;;AAAA;AAAA;AAAA;AACO;AAAA;AAAA;AAAuB;AAAvB;;AAAA;AAAA;AAAA;AAAuB;AAAvB;;AAAA;AAAA;AAAyB;;AAAzB;;AAAA;AAAA;AAAyB;;AAAzB;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAgC;;AAAhC;AAAP;;AAKc;AAAW;;AAAX;AAA0B;;;AAA1B;AAAyC;;;AAAzC;AAAwD;;;AAAxD;AADc;;AAC5B;AAAA;AAD4B;;AAGrB;AAAA;AAAY;AAAZ;AAAA;AAAA;AAAA;AAAkB;;AAAlB;AAAP;AAH4B;;AAIrB;AAAA;AAAY;AAAZ;AAAA;AAAA;AAAA;AAAkB;;;AAAlB;AAAP;AAJ4B;;AAKrB;AAAA;AAAY;AAAZ;AAAA;AAAA;AAAA;AAAkB;;;AAAlB;AAAP;AAL4B;;AAMrB;AAAA;AAAY;;AAAZ;AAAA;AAAA;AAAA;AAAkB;;;AAAlB;AAAP;;AAKqB;AACd;AAAA;;AAAA;AAAP;AACqB;AACd;AAAA;;AAAA;AAAP;AACqB;AACd;AAAA;;AAAA;AAAP;AACqB;AACd;AAAA;;AAAA;AAAP;AADqB;AAIM;;AAApB;AAAP;AAJqB;AAKd;AAAA;;AAAP;AAGe;;AACD;;AAAd;AATqB;AAWL;AAAhB;;AAAA;AAXqB;AAYN;;;AAAf;AAZqB;AAaN;AAAG;AAAlB;;AAAA;AAbqB;AAcL;;AAJN;;AAIV;AAJU;;AAK2B;AAAT;;AAAA;AAfP;AAeI;AAAhB;;AAAA;AACQ;;AAAA;;AAAA;AANP;;AAMO;AAAV;AAAP;AAhBqB;AAmBd;AAAP;AAnBqB;AAoBC;AAAf;AAAP;AApBqB;AAuBL;AACT;AAAP;AACgB;AAAT;AAAP;AAzBqB;AA0Bd;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAGY;AAAA;AA7BS;AA6BrB;AAAA;AA7BqB;AA8Bd;AAAA;;AAAP;AA9BqB;AA+Bd;AAAA;AAAkB;;AAAlB;AAAP;AA/BqB;AAgCd;;;AAA+B;;AAA/B;AAAP;AAGA;;AAAyB;;AAAzB;;AACO;;AAAA;AAAA;;AAAP;AACA;;AAAA;;;AAIQ;AAGK;AAAb;AAAA;AAAA;AAAA;AAAA;;AADQ;;AACR;AAHQ;AAIiB;AAAjB;AAAA;AAAA;AAJA;AAMY;AAAb;AAAA;AAAA;AAAA;AAAA;AAJC;;AAImC;AAApC;AAAP;AANQ;AAOY;AAAb;AAAA;AAAA;AAAA;AAAA;AAAoC;AAAA;AAAA;AAApC;AAAP;AAPQ;AAQmB;AAApB;AAAA;AAAA;AAAA;AAAA;AANC;;AAM6B;AAA9B;AAAP;AAPQ;AASgB;AAAjB;AAAA;AAAA;AAAA;AAAA;AAAgC;;AAAhC;AAAA;;AAAA;AAAsD;;AAAtD;AAAP;AATQ;AAU2B;AAAnB;AAAA;AAAA;AAAA;AAAA;;AACT;AAAP;AAZQ;AAaD;AAAS;AAAT;AAAA;AAAA;AAAA;;AAAP;AACO;AAA2B;AAA3B;AAAP;AAbQ;AAiBI;AADoC;AAChD;AAAA;AAAA;AAAA;;AAAqB;;AAArB;AADgD;AAEM;AAA/C;;;AAA6D;;AAA7D;AAAP;AAlBQ;AAmBQ;AAHgC;AAG5C;AAAA;AAAJ;;;AAER;;;AAEqB;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAER;;;AAE4B;;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;AAEyB;;AAAA;AAAb;AAAA;AAAA;AAAJ;;;AAER;;;AAEe;;AAAA;AAAO;AAAP;AAAA;AAAA;AAAA;;AAAP;AA/TR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA6TK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA7TL;;;AAAA;AA6TK;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAzTL;;;AAAA;AAyTK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AArTL;;;AAAA;AAqTK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjTL;;;AAAA;AAAA;;;AAAA;;;AAiTK;;;AAAA;;;;AAxBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAhDA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAVA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAXA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AApML;;;AAAA;AAoMK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAfA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AArLL;;;AAAA;AAqLK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAlBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlJL;;;AAAA;AAkJK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AA7BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AArHL;;;AAAA;AAqHK;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AARA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AATA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAbA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AARA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA7DL;;;AAAA;AAAA;;;AAAA;AA6DK;;;AAAA;;;;AAJA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AApCA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAdL;;;AAAA;AAAA;;;AAAA;;;AAcK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AAdL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.box_storage.contract.BoxContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 2 4096 32762 32760"
    },
    "15": {
      "op": "bytecblock \"dynamic_arr_struct\" 0x 0x424f585f43 0x626c6f62 \"dynamic_box\" \"box_d\" \"box_large\" 0x151f7c75 \"box_a\" \"b\" 0x3432 0x64 0x68656c6c6f \"many_ints\" \"0\" 0x00 0x48656c6c6f \"box_ref\" \"Hmmmmm\" 0x068101 \"default\""
    },
    "147": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "149": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "152": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "examples.box_storage.contract.BoxContract.__init__",
      "op": "callsub __init__"
    },
    "155": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "158": {
      "op": "return",
      "stack_out": []
    },
    "159": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "162": {
      "block": "ensure_budget_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "164": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "166": {
      "op": "+",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "167": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global OpcodeBudget",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "169": {
      "op": "frame_dig 0",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0",
        "required_budget_with_buffer#0"
      ]
    },
    "171": {
      "op": "<",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "172": {
      "op": "bz ensure_budget_after_while@7",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "175": {
      "block": "ensure_budget_while_body@2",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_begin"
    },
    "176": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "appl"
      ]
    },
    "178": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "180": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "DeleteApplication"
      ]
    },
    "182": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "184": {
      "op": "bytec 19 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "186": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "188": {
      "op": "bytec 19 // 0x068101",
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "190": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "192": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "193": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0",
        "1"
      ]
    },
    "194": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "1",
        "fee_source#0 (copy)"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0",
        "1",
        "fee_source#0 (copy)"
      ]
    },
    "196": {
      "op": "match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "202": {
      "block": "ensure_budget_switch_case_next@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "203": {
      "op": "b ensure_budget_while_top@1"
    },
    "206": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%3#0"
      ]
    },
    "208": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "210": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "213": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "214": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "216": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "219": {
      "block": "ensure_budget_after_while@7",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "220": {
      "subroutine": "examples.box_storage.contract.get_box_value_plus_1",
      "params": {
        "box#0": "bytes"
      },
      "block": "get_box_value_plus_1",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "223": {
      "block": "get_box_value_plus_1_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "box#0 (copy)"
      ],
      "stack_out": [
        "box#0 (copy)"
      ]
    },
    "225": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "226": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "227": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "228": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "1"
      ]
    },
    "229": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "230": {
      "retsub": true,
      "op": "retsub"
    },
    "231": {
      "subroutine": "examples.box_storage.contract.get_box_ref_length",
      "params": {
        "ref#0": "bytes"
      },
      "block": "get_box_ref_length",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "234": {
      "block": "get_box_ref_length_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "ref#0 (copy)"
      ],
      "stack_out": [
        "ref#0 (copy)"
      ]
    },
    "236": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "237": {
      "error": "check BoxRef exists",
      "op": "assert // check BoxRef exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "238": {
      "retsub": true,
      "op": "retsub"
    },
    "239": {
      "subroutine": "examples.box_storage.contract.get_box_map_value_from_key_plus_1",
      "params": {
        "box_map#0": "bytes",
        "key#0": "uint64"
      },
      "block": "get_box_map_value_from_key_plus_1",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "242": {
      "block": "get_box_map_value_from_key_plus_1_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "244": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)",
        "1"
      ]
    },
    "245": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "246": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "247": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_map#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "box_map#0 (copy)"
      ]
    },
    "249": {
      "op": "swap",
      "stack_out": [
        "box_map#0 (copy)",
        "encoded_value%0#0"
      ]
    },
    "250": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "251": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "252": {
      "error": "check BoxMap entry exists",
      "op": "assert // check BoxMap entry exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "253": {
      "retsub": true,
      "op": "retsub"
    },
    "254": {
      "subroutine": "examples.box_storage.contract.BoxContract.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "op": "pushint 4104 // 4104",
      "defined_out": [
        "4104"
      ],
      "stack_out": [
        "4104"
      ]
    },
    "257": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "4096",
        "4104"
      ],
      "stack_out": [
        "4104",
        "4096"
      ]
    },
    "259": {
      "op": ">",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "260": {
      "error": "expected ManyInts to exceed max bytes size",
      "op": "assert // expected ManyInts to exceed max bytes size",
      "stack_out": []
    },
    "261": {
      "retsub": true,
      "op": "retsub"
    },
    "262": {
      "subroutine": "examples.box_storage.contract.BoxContract.set_boxes",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "bytes"
      },
      "block": "set_boxes",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "265": {
      "block": "set_boxes_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "267": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "268": {
      "op": "bytec 8 // \"box_a\"",
      "defined_out": [
        "\"box_a\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"box_a\""
      ]
    },
    "270": {
      "op": "swap",
      "stack_out": [
        "\"box_a\"",
        "encoded_value%0#0"
      ]
    },
    "271": {
      "op": "box_put",
      "stack_out": []
    },
    "272": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "274": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "275": {
      "op": "pop",
      "stack_out": []
    },
    "276": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "\"b\""
      ]
    },
    "278": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"b\"",
        "b#0 (copy)"
      ],
      "stack_out": [
        "\"b\"",
        "b#0 (copy)"
      ]
    },
    "280": {
      "op": "box_put",
      "stack_out": []
    },
    "281": {
      "op": "bytec_2 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "282": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "283": {
      "op": "pop",
      "stack_out": []
    },
    "284": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "285": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x424f585f43",
        "c#0 (copy)"
      ],
      "stack_out": [
        "0x424f585f43",
        "c#0 (copy)"
      ]
    },
    "287": {
      "op": "box_put",
      "stack_out": []
    },
    "288": {
      "op": "frame_dig -2",
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "290": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "293": {
      "op": "bytec 5 // \"box_d\"",
      "defined_out": [
        "\"box_d\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"box_d\""
      ]
    },
    "295": {
      "op": "box_del",
      "stack_out": [
        "tmp%0#0",
        "{box_del}"
      ]
    },
    "296": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "297": {
      "op": "bytec 5 // \"box_d\"",
      "stack_out": [
        "tmp%0#0",
        "\"box_d\""
      ]
    },
    "299": {
      "op": "swap",
      "stack_out": [
        "\"box_d\"",
        "tmp%0#0"
      ]
    },
    "300": {
      "op": "box_put",
      "stack_out": []
    },
    "301": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "303": {
      "op": "pushint 6160 // 6160",
      "defined_out": [
        "\"box_large\"",
        "6160"
      ],
      "stack_out": [
        "\"box_large\"",
        "6160"
      ]
    },
    "306": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "307": {
      "op": "pop",
      "stack_out": []
    },
    "308": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "\"box_large\""
      ]
    },
    "310": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "311": {
      "error": "check self.box_large exists",
      "op": "assert // check self.box_large exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "312": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "42"
      ]
    },
    "314": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "315": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "storage_value%0#0"
      ]
    },
    "316": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "4096",
        "encoded_value%1#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "storage_value%0#0",
        "4096"
      ]
    },
    "318": {
      "op": "uncover 2",
      "stack_out": [
        "storage_value%0#0",
        "4096",
        "encoded_value%1#0"
      ]
    },
    "320": {
      "op": "replace3",
      "defined_out": [
        "updated_tuple%0#0"
      ],
      "stack_out": [
        "updated_tuple%0#0"
      ]
    },
    "321": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "updated_tuple%0#0",
        "\"box_large\""
      ]
    },
    "323": {
      "op": "swap",
      "stack_out": [
        "\"box_large\"",
        "updated_tuple%0#0"
      ]
    },
    "324": {
      "op": "box_put",
      "stack_out": []
    },
    "325": {
      "op": "pushint 1024 // 1024",
      "defined_out": [
        "1024"
      ],
      "stack_out": [
        "1024"
      ]
    },
    "328": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "1024",
        "4"
      ],
      "stack_out": [
        "1024",
        "4"
      ]
    },
    "330": {
      "op": "*",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "331": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "tmp%1#0",
        "\"box_large\""
      ]
    },
    "333": {
      "op": "swap",
      "stack_out": [
        "\"box_large\"",
        "tmp%1#0"
      ]
    },
    "334": {
      "op": "pushbytes 0x000000000000002a",
      "defined_out": [
        "\"box_large\"",
        "0x000000000000002a",
        "tmp%1#0"
      ],
      "stack_out": [
        "\"box_large\"",
        "tmp%1#0",
        "0x000000000000002a"
      ]
    },
    "344": {
      "op": "box_replace",
      "stack_out": []
    },
    "345": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "\"b\""
      ]
    },
    "347": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ],
      "stack_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "348": {
      "error": "check self.box_b exists",
      "op": "assert // check self.box_b exists",
      "defined_out": [
        "b_value#0"
      ],
      "stack_out": [
        "b_value#0"
      ]
    },
    "349": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "b_value#0",
        "\"b\""
      ]
    },
    "351": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0",
        "b_value#0"
      ],
      "stack_out": [
        "b_value#0",
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "352": {
      "error": "check self.box_b exists",
      "op": "assert // check self.box_b exists",
      "defined_out": [
        "b_value#0",
        "storage_value%2#0"
      ],
      "stack_out": [
        "b_value#0",
        "storage_value%2#0"
      ]
    },
    "353": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "b_value#0",
        "storage_value%2#0"
      ],
      "stack_out": [
        "b_value#0",
        "storage_value%2#0",
        "0"
      ]
    },
    "354": {
      "op": "extract_uint16",
      "defined_out": [
        "b_value#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "b_value#0",
        "tmp%2#0"
      ]
    },
    "355": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "b_value#0"
      ]
    },
    "356": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "b_value#0",
        "0"
      ]
    },
    "357": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "358": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "359": {
      "error": "direct reference should match copy",
      "op": "assert // direct reference should match copy",
      "stack_out": []
    },
    "360": {
      "op": "bytec 8 // \"box_a\"",
      "stack_out": [
        "\"box_a\""
      ]
    },
    "362": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%6#0",
        "aggregate%box_get%7#0"
      ],
      "stack_out": [
        "aggregate%box_get%6#0",
        "aggregate%box_get%7#0"
      ]
    },
    "363": {
      "error": "check self.box_a exists",
      "op": "assert // check self.box_a exists",
      "defined_out": [
        "storage_value%3#0"
      ],
      "stack_out": [
        "storage_value%3#0"
      ]
    },
    "364": {
      "op": "btoi",
      "defined_out": [
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "365": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "3"
      ]
    },
    "367": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "368": {
      "op": "itob",
      "defined_out": [
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0"
      ]
    },
    "369": {
      "op": "bytec 8 // \"box_a\"",
      "stack_out": [
        "encoded_value%2#0",
        "\"box_a\""
      ]
    },
    "371": {
      "op": "swap",
      "stack_out": [
        "\"box_a\"",
        "encoded_value%2#0"
      ]
    },
    "372": {
      "op": "box_put",
      "stack_out": []
    },
    "373": {
      "op": "bytec 8 // \"box_a\"",
      "stack_out": [
        "\"box_a\""
      ]
    },
    "375": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "376": {
      "error": "check self.box_a exists",
      "op": "assert // check self.box_a exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "377": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "8"
      ]
    },
    "378": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "379": {
      "op": "assert",
      "stack_out": []
    },
    "380": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "\"b\""
      ]
    },
    "382": {
      "op": "box_len",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "check%1#0"
      ]
    },
    "383": {
      "error": "check self.box_b exists",
      "op": "assert // check self.box_b exists",
      "stack_out": [
        "value%1#0"
      ]
    },
    "384": {
      "op": "frame_dig -2",
      "stack_out": [
        "value%1#0",
        "b#0 (copy)"
      ]
    },
    "386": {
      "op": "len",
      "defined_out": [
        "tmp%7#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "tmp%7#0"
      ]
    },
    "387": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "388": {
      "op": "assert",
      "stack_out": []
    },
    "389": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "390": {
      "op": "box_len",
      "defined_out": [
        "check%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "check%2#0"
      ]
    },
    "391": {
      "error": "check self.box_c exists",
      "op": "assert // check self.box_c exists",
      "stack_out": [
        "value%2#0"
      ]
    },
    "392": {
      "op": "frame_dig -1",
      "stack_out": [
        "value%2#0",
        "c#0 (copy)"
      ]
    },
    "394": {
      "op": "len",
      "defined_out": [
        "tmp%9#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "tmp%9#0"
      ]
    },
    "395": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "396": {
      "op": "assert",
      "stack_out": []
    },
    "397": {
      "op": "bytec 5 // \"box_d\"",
      "stack_out": [
        "\"box_d\""
      ]
    },
    "399": {
      "op": "box_len",
      "defined_out": [
        "check%3#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "check%3#0"
      ]
    },
    "400": {
      "error": "check self.box_d exists",
      "op": "assert // check self.box_d exists",
      "stack_out": [
        "value%3#0"
      ]
    },
    "401": {
      "op": "frame_dig -2",
      "stack_out": [
        "value%3#0",
        "b#0 (copy)"
      ]
    },
    "403": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%11#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "tmp%11#0"
      ]
    },
    "406": {
      "op": "len",
      "defined_out": [
        "tmp%12#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "tmp%12#0"
      ]
    },
    "407": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "408": {
      "op": "assert",
      "stack_out": []
    },
    "409": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "410": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x424f585f43",
        "0"
      ]
    },
    "411": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "0x424f585f43",
        "1"
      ],
      "stack_out": [
        "0x424f585f43",
        "0",
        "1"
      ]
    },
    "412": {
      "op": "box_extract",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "413": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%14#0",
        "c#0 (copy)"
      ]
    },
    "415": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%14#0",
        "c#0 (copy)",
        "0"
      ]
    },
    "416": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%14#0",
        "c#0 (copy)",
        "0",
        "1"
      ]
    },
    "417": {
      "op": "extract3",
      "defined_out": [
        "extract%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "extract%0#0"
      ]
    },
    "418": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "419": {
      "op": "assert",
      "stack_out": []
    },
    "420": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "421": {
      "op": "box_len",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "422": {
      "op": "pop",
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "423": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%16#0",
        "1"
      ]
    },
    "424": {
      "op": "-",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "425": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "tmp%18#0",
        "0x424f585f43"
      ]
    },
    "426": {
      "op": "swap",
      "stack_out": [
        "0x424f585f43",
        "tmp%18#0"
      ]
    },
    "427": {
      "op": "intc_1 // 1",
      "stack_out": [
        "0x424f585f43",
        "tmp%18#0",
        "1"
      ]
    },
    "428": {
      "op": "box_extract",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "429": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%19#0",
        "c#0 (copy)"
      ]
    },
    "431": {
      "op": "len",
      "defined_out": [
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "432": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%19#0",
        "tmp%20#0",
        "1"
      ]
    },
    "433": {
      "op": "-",
      "defined_out": [
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "434": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%19#0",
        "tmp%21#0",
        "c#0 (copy)"
      ]
    },
    "436": {
      "op": "swap",
      "stack_out": [
        "tmp%19#0",
        "c#0 (copy)",
        "tmp%21#0"
      ]
    },
    "437": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%19#0",
        "c#0 (copy)",
        "tmp%21#0",
        "1"
      ]
    },
    "438": {
      "op": "extract3",
      "defined_out": [
        "extract%1#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "extract%1#0"
      ]
    },
    "439": {
      "op": "==",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "440": {
      "op": "assert",
      "stack_out": []
    },
    "441": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "442": {
      "op": "box_len",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "443": {
      "op": "pop",
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "444": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%23#0",
        "1"
      ]
    },
    "445": {
      "op": "dig 1",
      "defined_out": [
        "1",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ],
      "stack_out": [
        "tmp%23#0",
        "1",
        "tmp%23#0 (copy)"
      ]
    },
    "447": {
      "op": "<",
      "defined_out": [
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "448": {
      "op": "swap",
      "stack_out": [
        "tmp%25#0",
        "tmp%23#0"
      ]
    },
    "449": {
      "op": "dup",
      "stack_out": [
        "tmp%25#0",
        "tmp%23#0",
        "tmp%23#0 (copy)"
      ]
    },
    "450": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%25#0",
        "tmp%23#0",
        "tmp%23#0 (copy)",
        "1"
      ]
    },
    "451": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%23#0",
        "tmp%23#0 (copy)",
        "1",
        "tmp%25#0"
      ]
    },
    "453": {
      "op": "select",
      "defined_out": [
        "tmp%23#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%26#0"
      ]
    },
    "454": {
      "op": "-",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "455": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%27#0",
        "0"
      ]
    },
    "456": {
      "op": "-",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "457": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "tmp%28#0",
        "0x424f585f43"
      ]
    },
    "458": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%28#0",
        "0x424f585f43",
        "0"
      ]
    },
    "459": {
      "op": "uncover 2",
      "stack_out": [
        "0x424f585f43",
        "0",
        "tmp%28#0"
      ]
    },
    "461": {
      "op": "box_extract",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "462": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%29#0",
        "c#0 (copy)"
      ]
    },
    "464": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "length%0#0"
      ]
    },
    "465": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "1"
      ]
    },
    "466": {
      "op": "dig 1",
      "defined_out": [
        "1",
        "length%0#0",
        "length%0#0 (copy)",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "1",
        "length%0#0 (copy)"
      ]
    },
    "468": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "length%0#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "469": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "is_out_of_bounds%0#0",
        "1"
      ]
    },
    "470": {
      "op": "dig 2",
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "is_out_of_bounds%0#0",
        "1",
        "length%0#0 (copy)"
      ]
    },
    "472": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "1",
        "length%0#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "474": {
      "op": "select",
      "defined_out": [
        "bounded_offset%0#0",
        "length%0#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "length%0#0",
        "bounded_offset%0#0"
      ]
    },
    "475": {
      "op": "-",
      "defined_out": [
        "bounded_index%0#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "bounded_index%0#0"
      ]
    },
    "476": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%29#0",
        "bounded_index%0#0",
        "c#0 (copy)"
      ]
    },
    "478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%29#0",
        "bounded_index%0#0",
        "c#0 (copy)",
        "0"
      ]
    },
    "479": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%29#0",
        "c#0 (copy)",
        "0",
        "bounded_index%0#0"
      ]
    },
    "481": {
      "op": "substring3",
      "defined_out": [
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "482": {
      "op": "==",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "483": {
      "op": "assert",
      "stack_out": []
    },
    "484": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "485": {
      "op": "box_len",
      "defined_out": [
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "486": {
      "op": "pop",
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "487": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "2"
      ]
    },
    "488": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "tmp%32#0",
        "tmp%32#0 (copy)"
      ],
      "stack_out": [
        "tmp%32#0",
        "2",
        "tmp%32#0 (copy)"
      ]
    },
    "490": {
      "op": "<",
      "defined_out": [
        "tmp%32#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "tmp%34#0"
      ]
    },
    "491": {
      "op": "swap",
      "stack_out": [
        "tmp%34#0",
        "tmp%32#0"
      ]
    },
    "492": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%34#0",
        "tmp%32#0",
        "2"
      ]
    },
    "493": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%32#0",
        "2",
        "tmp%34#0"
      ]
    },
    "495": {
      "op": "select",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "496": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%35#0",
        "0"
      ]
    },
    "497": {
      "op": "-",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "498": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "tmp%36#0",
        "0x424f585f43"
      ]
    },
    "499": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%36#0",
        "0x424f585f43",
        "0"
      ]
    },
    "500": {
      "op": "uncover 2",
      "stack_out": [
        "0x424f585f43",
        "0",
        "tmp%36#0"
      ]
    },
    "502": {
      "op": "box_extract",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "503": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%37#0",
        "c#0 (copy)"
      ]
    },
    "505": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "length%1#0"
      ]
    },
    "506": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%37#0",
        "length%1#0",
        "2"
      ]
    },
    "507": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "length%1#0",
        "length%1#0 (copy)",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "length%1#0",
        "2",
        "length%1#0 (copy)"
      ]
    },
    "509": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%1#0",
        "length%1#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "length%1#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "510": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%37#0",
        "length%1#0",
        "is_out_of_bounds%1#0",
        "2"
      ]
    },
    "511": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%37#0",
        "is_out_of_bounds%1#0",
        "2",
        "length%1#0"
      ]
    },
    "513": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%37#0",
        "2",
        "length%1#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "515": {
      "op": "select",
      "defined_out": [
        "bounded_index%1#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "bounded_index%1#0"
      ]
    },
    "516": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%37#0",
        "bounded_index%1#0",
        "c#0 (copy)"
      ]
    },
    "518": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%37#0",
        "bounded_index%1#0",
        "c#0 (copy)",
        "0"
      ]
    },
    "519": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%37#0",
        "c#0 (copy)",
        "0",
        "bounded_index%1#0"
      ]
    },
    "521": {
      "op": "substring3",
      "defined_out": [
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "522": {
      "op": "==",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "523": {
      "op": "assert",
      "stack_out": []
    },
    "524": {
      "op": "bytec 5 // \"box_d\"",
      "stack_out": [
        "\"box_d\""
      ]
    },
    "526": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"box_d\"",
        "0"
      ]
    },
    "527": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"box_d\"",
        "0",
        "1"
      ]
    },
    "528": {
      "op": "box_extract",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "529": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%40#0",
        "b#0 (copy)"
      ]
    },
    "531": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "534": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%40#0",
        "tmp%41#0",
        "0"
      ]
    },
    "535": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%40#0",
        "tmp%41#0",
        "0",
        "1"
      ]
    },
    "536": {
      "op": "extract3",
      "defined_out": [
        "extract%2#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0",
        "extract%2#0"
      ]
    },
    "537": {
      "op": "==",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "538": {
      "op": "assert",
      "stack_out": []
    },
    "539": {
      "op": "bytec 5 // \"box_d\"",
      "stack_out": [
        "\"box_d\""
      ]
    },
    "541": {
      "op": "box_len",
      "defined_out": [
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "542": {
      "op": "pop",
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "543": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%43#0",
        "1"
      ]
    },
    "544": {
      "op": "-",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "545": {
      "op": "bytec 5 // \"box_d\"",
      "stack_out": [
        "tmp%45#0",
        "\"box_d\""
      ]
    },
    "547": {
      "op": "swap",
      "stack_out": [
        "\"box_d\"",
        "tmp%45#0"
      ]
    },
    "548": {
      "op": "intc_1 // 1",
      "stack_out": [
        "\"box_d\"",
        "tmp%45#0",
        "1"
      ]
    },
    "549": {
      "op": "box_extract",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "550": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%46#0",
        "b#0 (copy)"
      ]
    },
    "552": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "555": {
      "op": "dup",
      "defined_out": [
        "tmp%46#0",
        "tmp%47#0",
        "tmp%47#0 (copy)"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "tmp%47#0 (copy)"
      ]
    },
    "556": {
      "op": "len",
      "defined_out": [
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "557": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "tmp%48#0",
        "1"
      ]
    },
    "558": {
      "op": "-",
      "defined_out": [
        "tmp%46#0",
        "tmp%47#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "tmp%49#0"
      ]
    },
    "559": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0",
        "tmp%49#0",
        "1"
      ]
    },
    "560": {
      "op": "extract3",
      "defined_out": [
        "extract%3#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "extract%3#0"
      ]
    },
    "561": {
      "op": "==",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "562": {
      "op": "assert",
      "stack_out": []
    },
    "563": {
      "op": "bytec 5 // \"box_d\"",
      "stack_out": [
        "\"box_d\""
      ]
    },
    "565": {
      "op": "box_len",
      "defined_out": [
        "tmp%51#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%52#0"
      ]
    },
    "566": {
      "op": "pop",
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "567": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%51#0",
        "1"
      ]
    },
    "568": {
      "op": "dig 1",
      "defined_out": [
        "1",
        "tmp%51#0",
        "tmp%51#0 (copy)"
      ],
      "stack_out": [
        "tmp%51#0",
        "1",
        "tmp%51#0 (copy)"
      ]
    },
    "570": {
      "op": "<",
      "defined_out": [
        "tmp%51#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%53#0"
      ]
    },
    "571": {
      "op": "swap",
      "stack_out": [
        "tmp%53#0",
        "tmp%51#0"
      ]
    },
    "572": {
      "op": "dup",
      "stack_out": [
        "tmp%53#0",
        "tmp%51#0",
        "tmp%51#0 (copy)"
      ]
    },
    "573": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%53#0",
        "tmp%51#0",
        "tmp%51#0 (copy)",
        "1"
      ]
    },
    "574": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%51#0",
        "tmp%51#0 (copy)",
        "1",
        "tmp%53#0"
      ]
    },
    "576": {
      "op": "select",
      "defined_out": [
        "tmp%51#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%54#0"
      ]
    },
    "577": {
      "op": "-",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "578": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%55#0",
        "0"
      ]
    },
    "579": {
      "op": "-",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "580": {
      "op": "bytec 5 // \"box_d\"",
      "stack_out": [
        "tmp%56#0",
        "\"box_d\""
      ]
    },
    "582": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%56#0",
        "\"box_d\"",
        "0"
      ]
    },
    "583": {
      "op": "uncover 2",
      "stack_out": [
        "\"box_d\"",
        "0",
        "tmp%56#0"
      ]
    },
    "585": {
      "op": "box_extract",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "586": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%57#0",
        "b#0 (copy)"
      ]
    },
    "588": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0"
      ]
    },
    "591": {
      "op": "dup",
      "defined_out": [
        "tmp%57#0",
        "tmp%58#0",
        "tmp%58#0 (copy)"
      ],
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0",
        "tmp%58#0 (copy)"
      ]
    },
    "592": {
      "op": "len",
      "defined_out": [
        "length%2#0",
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0",
        "length%2#0"
      ]
    },
    "593": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0",
        "length%2#0",
        "1"
      ]
    },
    "594": {
      "op": "dig 1",
      "defined_out": [
        "1",
        "length%2#0",
        "length%2#0 (copy)",
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0",
        "length%2#0",
        "1",
        "length%2#0 (copy)"
      ]
    },
    "596": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%2#0",
        "length%2#0",
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0",
        "length%2#0",
        "is_out_of_bounds%2#0"
      ]
    },
    "597": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0",
        "length%2#0",
        "is_out_of_bounds%2#0",
        "1"
      ]
    },
    "598": {
      "op": "dig 2",
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0",
        "length%2#0",
        "is_out_of_bounds%2#0",
        "1",
        "length%2#0 (copy)"
      ]
    },
    "600": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0",
        "length%2#0",
        "1",
        "length%2#0 (copy)",
        "is_out_of_bounds%2#0"
      ]
    },
    "602": {
      "op": "select",
      "defined_out": [
        "bounded_offset%1#0",
        "length%2#0",
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0",
        "length%2#0",
        "bounded_offset%1#0"
      ]
    },
    "603": {
      "op": "-",
      "defined_out": [
        "bounded_index%2#0",
        "tmp%57#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0",
        "bounded_index%2#0"
      ]
    },
    "604": {
      "op": "swap",
      "stack_out": [
        "tmp%57#0",
        "bounded_index%2#0",
        "tmp%58#0"
      ]
    },
    "605": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%57#0",
        "bounded_index%2#0",
        "tmp%58#0",
        "0"
      ]
    },
    "606": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%57#0",
        "tmp%58#0",
        "0",
        "bounded_index%2#0"
      ]
    },
    "608": {
      "op": "substring3",
      "defined_out": [
        "tmp%57#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "tmp%59#0"
      ]
    },
    "609": {
      "op": "==",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "610": {
      "op": "assert",
      "stack_out": []
    },
    "611": {
      "op": "bytec 5 // \"box_d\"",
      "stack_out": [
        "\"box_d\""
      ]
    },
    "613": {
      "op": "box_len",
      "defined_out": [
        "tmp%61#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "tmp%62#0"
      ]
    },
    "614": {
      "op": "pop",
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "615": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "5"
      ]
    },
    "617": {
      "op": "dig 1",
      "defined_out": [
        "5",
        "tmp%61#0",
        "tmp%61#0 (copy)"
      ],
      "stack_out": [
        "tmp%61#0",
        "5",
        "tmp%61#0 (copy)"
      ]
    },
    "619": {
      "op": "<",
      "defined_out": [
        "tmp%61#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "tmp%63#0"
      ]
    },
    "620": {
      "op": "swap",
      "stack_out": [
        "tmp%63#0",
        "tmp%61#0"
      ]
    },
    "621": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%63#0",
        "tmp%61#0",
        "5"
      ]
    },
    "623": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%61#0",
        "5",
        "tmp%63#0"
      ]
    },
    "625": {
      "op": "select",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "626": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%64#0",
        "0"
      ]
    },
    "627": {
      "op": "-",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "628": {
      "op": "bytec 5 // \"box_d\"",
      "stack_out": [
        "tmp%65#0",
        "\"box_d\""
      ]
    },
    "630": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%65#0",
        "\"box_d\"",
        "0"
      ]
    },
    "631": {
      "op": "uncover 2",
      "stack_out": [
        "\"box_d\"",
        "0",
        "tmp%65#0"
      ]
    },
    "633": {
      "op": "box_extract",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "634": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%66#0",
        "b#0 (copy)"
      ]
    },
    "636": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0"
      ]
    },
    "639": {
      "op": "dup",
      "defined_out": [
        "tmp%66#0",
        "tmp%67#0",
        "tmp%67#0 (copy)"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "tmp%67#0 (copy)"
      ]
    },
    "640": {
      "op": "len",
      "defined_out": [
        "length%3#0",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "length%3#0"
      ]
    },
    "641": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "length%3#0",
        "5"
      ]
    },
    "643": {
      "op": "dig 1",
      "defined_out": [
        "5",
        "length%3#0",
        "length%3#0 (copy)",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "length%3#0",
        "5",
        "length%3#0 (copy)"
      ]
    },
    "645": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%3#0",
        "length%3#0",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "length%3#0",
        "is_out_of_bounds%3#0"
      ]
    },
    "646": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "length%3#0",
        "is_out_of_bounds%3#0",
        "5"
      ]
    },
    "648": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "is_out_of_bounds%3#0",
        "5",
        "length%3#0"
      ]
    },
    "650": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "5",
        "length%3#0",
        "is_out_of_bounds%3#0"
      ]
    },
    "652": {
      "op": "select",
      "defined_out": [
        "bounded_index%3#0",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "bounded_index%3#0"
      ]
    },
    "653": {
      "op": "swap",
      "stack_out": [
        "tmp%66#0",
        "bounded_index%3#0",
        "tmp%67#0"
      ]
    },
    "654": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%66#0",
        "bounded_index%3#0",
        "tmp%67#0",
        "0"
      ]
    },
    "655": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "0",
        "bounded_index%3#0"
      ]
    },
    "657": {
      "op": "substring3",
      "defined_out": [
        "tmp%66#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%68#0"
      ]
    },
    "658": {
      "op": "==",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "659": {
      "op": "assert",
      "stack_out": []
    },
    "660": {
      "op": "bytec 5 // \"box_d\"",
      "stack_out": [
        "\"box_d\""
      ]
    },
    "662": {
      "op": "box_len",
      "defined_out": [
        "tmp%70#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "tmp%71#0"
      ]
    },
    "663": {
      "op": "pop",
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "664": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%70#0",
        "2"
      ]
    },
    "665": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "tmp%70#0",
        "tmp%70#0 (copy)"
      ],
      "stack_out": [
        "tmp%70#0",
        "2",
        "tmp%70#0 (copy)"
      ]
    },
    "667": {
      "op": "<",
      "defined_out": [
        "tmp%70#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "tmp%72#0"
      ]
    },
    "668": {
      "op": "swap",
      "stack_out": [
        "tmp%72#0",
        "tmp%70#0"
      ]
    },
    "669": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%72#0",
        "tmp%70#0",
        "2"
      ]
    },
    "670": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%70#0",
        "2",
        "tmp%72#0"
      ]
    },
    "672": {
      "op": "select",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "673": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%73#0",
        "0"
      ]
    },
    "674": {
      "op": "-",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "675": {
      "op": "bytec 5 // \"box_d\"",
      "stack_out": [
        "tmp%74#0",
        "\"box_d\""
      ]
    },
    "677": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%74#0",
        "\"box_d\"",
        "0"
      ]
    },
    "678": {
      "op": "uncover 2",
      "stack_out": [
        "\"box_d\"",
        "0",
        "tmp%74#0"
      ]
    },
    "680": {
      "op": "box_extract",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "681": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%75#0",
        "b#0 (copy)"
      ]
    },
    "683": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%75#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0"
      ]
    },
    "686": {
      "op": "dup",
      "defined_out": [
        "tmp%75#0",
        "tmp%76#0",
        "tmp%76#0 (copy)"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "tmp%76#0 (copy)"
      ]
    },
    "687": {
      "op": "len",
      "defined_out": [
        "length%4#0",
        "tmp%75#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "length%4#0"
      ]
    },
    "688": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "length%4#0",
        "2"
      ]
    },
    "689": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "length%4#0",
        "length%4#0 (copy)",
        "tmp%75#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "length%4#0",
        "2",
        "length%4#0 (copy)"
      ]
    },
    "691": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%4#0",
        "length%4#0",
        "tmp%75#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "length%4#0",
        "is_out_of_bounds%4#0"
      ]
    },
    "692": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "length%4#0",
        "is_out_of_bounds%4#0",
        "2"
      ]
    },
    "693": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "is_out_of_bounds%4#0",
        "2",
        "length%4#0"
      ]
    },
    "695": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "2",
        "length%4#0",
        "is_out_of_bounds%4#0"
      ]
    },
    "697": {
      "op": "select",
      "defined_out": [
        "bounded_index%4#0",
        "tmp%75#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "bounded_index%4#0"
      ]
    },
    "698": {
      "op": "swap",
      "stack_out": [
        "tmp%75#0",
        "bounded_index%4#0",
        "tmp%76#0"
      ]
    },
    "699": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%75#0",
        "bounded_index%4#0",
        "tmp%76#0",
        "0"
      ]
    },
    "700": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "0",
        "bounded_index%4#0"
      ]
    },
    "702": {
      "op": "substring3",
      "defined_out": [
        "tmp%75#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%77#0"
      ]
    },
    "703": {
      "op": "==",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "704": {
      "op": "assert",
      "stack_out": []
    },
    "705": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "\"box_large\""
      ]
    },
    "707": {
      "op": "box_len",
      "defined_out": [
        "check%4#0",
        "value%4#0"
      ],
      "stack_out": [
        "value%4#0",
        "check%4#0"
      ]
    },
    "708": {
      "error": "check self.box_large exists",
      "op": "assert // check self.box_large exists",
      "stack_out": [
        "value%4#0"
      ]
    },
    "709": {
      "op": "pushint 6160 // 6160",
      "stack_out": [
        "value%4#0",
        "6160"
      ]
    },
    "712": {
      "op": "==",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "713": {
      "op": "assert",
      "stack_out": []
    },
    "714": {
      "retsub": true,
      "op": "retsub"
    },
    "715": {
      "subroutine": "examples.box_storage.contract.BoxContract.check_keys",
      "params": {},
      "block": "check_keys_block@0",
      "stack_in": [],
      "op": "bytec 8 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "717": {
      "op": "dup",
      "defined_out": [
        "\"box_a\"",
        "0x626f785f61"
      ],
      "stack_out": [
        "\"box_a\"",
        "0x626f785f61"
      ]
    },
    "718": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "719": {
      "error": "box a key ok",
      "op": "assert // box a key ok",
      "stack_out": []
    },
    "720": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "722": {
      "op": "dup",
      "defined_out": [
        "\"b\"",
        "0x62"
      ],
      "stack_out": [
        "\"b\"",
        "0x62"
      ]
    },
    "723": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "724": {
      "error": "box b key ok",
      "op": "assert // box b key ok",
      "stack_out": []
    },
    "725": {
      "op": "bytec_2 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "726": {
      "op": "dup",
      "stack_out": [
        "0x424f585f43",
        "0x424f585f43"
      ]
    },
    "727": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "728": {
      "error": "box c key ok",
      "op": "assert // box c key ok",
      "stack_out": []
    },
    "729": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "731": {
      "op": "dup",
      "defined_out": [
        "\"box_large\"",
        "0x626f785f6c61726765"
      ],
      "stack_out": [
        "\"box_large\"",
        "0x626f785f6c61726765"
      ]
    },
    "732": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "733": {
      "error": "box large key ok",
      "op": "assert // box large key ok",
      "stack_out": []
    },
    "734": {
      "retsub": true,
      "op": "retsub"
    },
    "735": {
      "subroutine": "examples.box_storage.contract.BoxContract.create_many_ints",
      "params": {},
      "block": "create_many_ints_block@0",
      "stack_in": [],
      "op": "bytec 13 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\""
      ],
      "stack_out": [
        "\"many_ints\""
      ]
    },
    "737": {
      "op": "pushint 4104 // 4104",
      "defined_out": [
        "\"many_ints\"",
        "4104"
      ],
      "stack_out": [
        "\"many_ints\"",
        "4104"
      ]
    },
    "740": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "741": {
      "op": "pop",
      "stack_out": []
    },
    "742": {
      "retsub": true,
      "op": "retsub"
    },
    "743": {
      "subroutine": "examples.box_storage.contract.BoxContract.set_many_ints",
      "params": {
        "index#0": "uint64",
        "value#0": "uint64"
      },
      "block": "set_many_ints",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "746": {
      "block": "set_many_ints_block@0",
      "stack_in": [],
      "op": "bytec 13 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\""
      ],
      "stack_out": [
        "\"many_ints\""
      ]
    },
    "748": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "749": {
      "error": "check self.many_ints exists",
      "op": "assert // check self.many_ints exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "750": {
      "op": "frame_dig -1",
      "defined_out": [
        "storage_value%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "storage_value%0#0",
        "value#0 (copy)"
      ]
    },
    "752": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "encoded_value%0#0"
      ]
    },
    "753": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_value%0#0",
        "index#0 (copy)",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "encoded_value%0#0",
        "index#0 (copy)"
      ]
    },
    "755": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "encoded_value%0#0",
        "index#0 (copy)",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "encoded_value%0#0",
        "index#0 (copy)",
        "8"
      ]
    },
    "756": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%0#0",
        "encoded_value%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "encoded_value%0#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "757": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "aggregate%write_offset%0#0",
        "storage_value%0#0"
      ]
    },
    "759": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "storage_value%0#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "760": {
      "op": "uncover 2",
      "stack_out": [
        "storage_value%0#0",
        "aggregate%write_offset%0#0",
        "encoded_value%0#0"
      ]
    },
    "762": {
      "op": "replace3",
      "defined_out": [
        "updated_array%0#0"
      ],
      "stack_out": [
        "updated_array%0#0"
      ]
    },
    "763": {
      "op": "bytec 13 // \"many_ints\"",
      "stack_out": [
        "updated_array%0#0",
        "\"many_ints\""
      ]
    },
    "765": {
      "op": "swap",
      "stack_out": [
        "\"many_ints\"",
        "updated_array%0#0"
      ]
    },
    "766": {
      "op": "box_put",
      "stack_out": []
    },
    "767": {
      "retsub": true,
      "op": "retsub"
    },
    "768": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_many_ints",
      "params": {},
      "block": "sum_many_ints",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "771": {
      "block": "sum_many_ints_block@0",
      "stack_in": [],
      "op": "pushint 10500 // 10500",
      "defined_out": [
        "10500"
      ],
      "stack_out": [
        "10500"
      ]
    },
    "774": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "10500"
      ],
      "stack_out": [
        "10500",
        "0"
      ]
    },
    "775": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "778": {
      "op": "intc_0 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "779": {
      "op": "bytec 13 // \"many_ints\"",
      "defined_out": [
        "\"many_ints\"",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "\"many_ints\""
      ]
    },
    "781": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "782": {
      "error": "check self.many_ints exists",
      "op": "assert // check self.many_ints exists",
      "defined_out": [
        "storage_value%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0"
      ]
    },
    "783": {
      "op": "intc_0 // 0",
      "defined_out": [
        "item_index_internal%0#0",
        "storage_value%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0"
      ]
    },
    "784": {
      "block": "sum_many_ints_for_header@1",
      "stack_in": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "786": {
      "op": "pushint 513 // 513",
      "defined_out": [
        "513",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "513"
      ]
    },
    "789": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "790": {
      "op": "bz sum_many_ints_after_for@4",
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0"
      ]
    },
    "793": {
      "block": "sum_many_ints_for_body@2",
      "stack_in": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "795": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "8"
      ]
    },
    "796": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "797": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "item_index_internal%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "aggregate%bytes_offset%0#0",
        "storage_value%0#0"
      ]
    },
    "799": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "storage_value%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "800": {
      "op": "intc_2 // 8",
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "storage_value%0#0",
        "aggregate%bytes_offset%0#0",
        "8"
      ]
    },
    "801": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%0#0",
        "item_index_internal%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "array_item%0#0"
      ]
    },
    "802": {
      "op": "btoi",
      "defined_out": [
        "item_index_internal%0#0",
        "storage_value%0#0",
        "val#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "val#0"
      ]
    },
    "803": {
      "op": "frame_dig 0",
      "defined_out": [
        "item_index_internal%0#0",
        "storage_value%0#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "val#0",
        "total#0"
      ]
    },
    "805": {
      "op": "+",
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "806": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_index_internal%0#0",
        "storage_value%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0"
      ]
    },
    "808": {
      "block": "sum_many_ints_for_footer@3",
      "stack_in": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "810": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "811": {
      "op": "+",
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "812": {
      "op": "frame_bury 2",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0"
      ]
    },
    "814": {
      "op": "b sum_many_ints_for_header@1"
    },
    "817": {
      "block": "sum_many_ints_after_for@4",
      "stack_in": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "818": {
      "subroutine": "examples.box_storage.contract.BoxContract.delete_boxes",
      "params": {},
      "block": "delete_boxes_block@0",
      "stack_in": [],
      "op": "bytec 8 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "820": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "821": {
      "op": "pop",
      "stack_out": []
    },
    "822": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "824": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "825": {
      "op": "pop",
      "stack_out": []
    },
    "826": {
      "op": "bytec_2 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43"
      ],
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "827": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "828": {
      "op": "pop",
      "stack_out": []
    },
    "829": {
      "op": "bytec 8 // \"box_a\"",
      "stack_out": [
        "\"box_a\""
      ]
    },
    "831": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "832": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "833": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "834": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "42"
      ]
    },
    "836": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "42",
        "maybe_value_converted%0#0"
      ]
    },
    "837": {
      "op": "uncover 2",
      "stack_out": [
        "42",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "839": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "840": {
      "op": "pushint 42 // 42",
      "stack_out": [
        "state_get%0#0",
        "42"
      ]
    },
    "842": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "843": {
      "op": "assert",
      "stack_out": []
    },
    "844": {
      "op": "bytec 10 // 0x3432",
      "defined_out": [
        "0x3432"
      ],
      "stack_out": [
        "0x3432"
      ]
    },
    "846": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "847": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "848": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "851": {
      "op": "bytec 10 // 0x3432",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "0x3432"
      ]
    },
    "853": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "854": {
      "op": "bytec 9 // \"b\"",
      "stack_out": [
        "tmp%1#0",
        "\"b\""
      ]
    },
    "856": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "857": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "858": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "860": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "861": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "863": {
      "op": "select",
      "defined_out": [
        "state_get%1#0"
      ],
      "stack_out": [
        "state_get%1#0"
      ]
    },
    "864": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "867": {
      "op": "bytec 10 // 0x3432",
      "stack_out": [
        "tmp%2#0",
        "0x3432"
      ]
    },
    "869": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "870": {
      "op": "assert",
      "stack_out": []
    },
    "871": {
      "op": "bytec 10 // \"42\"",
      "defined_out": [
        "\"42\""
      ],
      "stack_out": [
        "\"42\""
      ]
    },
    "873": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "aggregate%length%1#0"
      ]
    },
    "874": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%1#0"
      ]
    },
    "875": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%1#0"
      ]
    },
    "878": {
      "op": "bytec 10 // \"42\"",
      "stack_out": [
        "aggregate%length_uint16%1#0",
        "\"42\""
      ]
    },
    "880": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "881": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "tmp%4#0",
        "0x424f585f43"
      ]
    },
    "882": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "883": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "884": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ]
    },
    "886": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%2#0",
        "tmp%4#0",
        "maybe_value%2#0"
      ]
    },
    "887": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "889": {
      "op": "select",
      "defined_out": [
        "state_get%2#0"
      ],
      "stack_out": [
        "state_get%2#0"
      ]
    },
    "890": {
      "op": "bytec 10 // \"42\"",
      "stack_out": [
        "state_get%2#0",
        "\"42\""
      ]
    },
    "892": {
      "op": "len",
      "defined_out": [
        "aggregate%length%2#0",
        "state_get%2#0"
      ],
      "stack_out": [
        "state_get%2#0",
        "aggregate%length%2#0"
      ]
    },
    "893": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%2#0",
        "state_get%2#0"
      ],
      "stack_out": [
        "state_get%2#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "894": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%2#0",
        "state_get%2#0"
      ],
      "stack_out": [
        "state_get%2#0",
        "aggregate%length_uint16%2#0"
      ]
    },
    "897": {
      "op": "bytec 10 // \"42\"",
      "stack_out": [
        "state_get%2#0",
        "aggregate%length_uint16%2#0",
        "\"42\""
      ]
    },
    "899": {
      "op": "concat",
      "defined_out": [
        "state_get%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "state_get%2#0",
        "tmp%5#0"
      ]
    },
    "900": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "901": {
      "op": "assert",
      "stack_out": []
    },
    "902": {
      "op": "bytec 8 // \"box_a\"",
      "stack_out": [
        "\"box_a\""
      ]
    },
    "904": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "905": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "906": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%3#0",
        "a#0"
      ]
    },
    "907": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "a_exists#0"
      ],
      "stack_out": [
        "a#0",
        "a_exists#0"
      ]
    },
    "908": {
      "op": "!",
      "defined_out": [
        "a#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%7#0"
      ]
    },
    "909": {
      "op": "assert",
      "stack_out": [
        "a#0"
      ]
    },
    "910": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "0"
      ]
    },
    "911": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "912": {
      "op": "assert",
      "stack_out": []
    },
    "913": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "915": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "916": {
      "op": "pop",
      "stack_out": []
    },
    "917": {
      "retsub": true,
      "op": "retsub"
    },
    "918": {
      "subroutine": "examples.box_storage.contract.BoxContract.indirect_extract_and_replace",
      "params": {},
      "block": "indirect_extract_and_replace_block@0",
      "stack_in": [],
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\""
      ],
      "stack_out": [
        "\"box_large\""
      ]
    },
    "920": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "921": {
      "error": "check self.box_large exists",
      "op": "assert // check self.box_large exists",
      "defined_out": [
        "large#0"
      ],
      "stack_out": [
        "large#0"
      ]
    },
    "922": {
      "op": "dup",
      "defined_out": [
        "large#0",
        "large#0 (copy)"
      ],
      "stack_out": [
        "large#0",
        "large#0 (copy)"
      ]
    },
    "923": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "4096",
        "large#0",
        "large#0 (copy)"
      ],
      "stack_out": [
        "large#0",
        "large#0 (copy)",
        "4096"
      ]
    },
    "925": {
      "op": "intc_2 // 8",
      "defined_out": [
        "4096",
        "8",
        "large#0",
        "large#0 (copy)"
      ],
      "stack_out": [
        "large#0",
        "large#0 (copy)",
        "4096",
        "8"
      ]
    },
    "926": {
      "op": "extract3",
      "defined_out": [
        "large#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "large#0",
        "tuple_item%0#0"
      ]
    },
    "927": {
      "op": "btoi",
      "defined_out": [
        "large#0",
        "values%0#0"
      ],
      "stack_out": [
        "large#0",
        "values%0#0"
      ]
    },
    "928": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "large#0",
        "values%0#0"
      ],
      "stack_out": [
        "large#0",
        "values%0#0",
        "1"
      ]
    },
    "929": {
      "op": "+",
      "defined_out": [
        "large#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "large#0",
        "tmp%0#0"
      ]
    },
    "930": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "large#0"
      ],
      "stack_out": [
        "large#0",
        "encoded_value%0#0"
      ]
    },
    "931": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "large#0"
      ]
    },
    "932": {
      "op": "intc 4 // 4096",
      "stack_out": [
        "encoded_value%0#0",
        "large#0",
        "4096"
      ]
    },
    "934": {
      "op": "uncover 2",
      "stack_out": [
        "large#0",
        "4096",
        "encoded_value%0#0"
      ]
    },
    "936": {
      "op": "replace3",
      "stack_out": [
        "large#0"
      ]
    },
    "937": {
      "op": "bytec 6 // \"box_large\"",
      "stack_out": [
        "large#0",
        "\"box_large\""
      ]
    },
    "939": {
      "op": "swap",
      "stack_out": [
        "\"box_large\"",
        "large#0"
      ]
    },
    "940": {
      "op": "box_put",
      "stack_out": []
    },
    "941": {
      "retsub": true,
      "op": "retsub"
    },
    "942": {
      "subroutine": "examples.box_storage.contract.BoxContract.read_boxes",
      "params": {},
      "block": "read_boxes_block@0",
      "stack_in": [],
      "op": "bytec 8 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "944": {
      "callsub": "examples.box_storage.contract.get_box_value_plus_1",
      "op": "callsub get_box_value_plus_1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "947": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "948": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "949": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "\"b\""
      ]
    },
    "951": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "952": {
      "error": "check self.box_b exists",
      "op": "assert // check self.box_b exists",
      "defined_out": [
        "storage_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "storage_value%0#0"
      ]
    },
    "953": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "956": {
      "op": "bytec_2 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "0x424f585f43"
      ]
    },
    "957": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "958": {
      "error": "check self.box_c exists",
      "op": "assert // check self.box_c exists",
      "defined_out": [
        "storage_value%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "storage_value%1#0"
      ]
    },
    "959": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "storage_value%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "storage_value%1#0",
        "\"box_large\""
      ]
    },
    "961": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0",
        "storage_value%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "storage_value%1#0",
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "962": {
      "error": "check self.box_large exists",
      "op": "assert // check self.box_large exists",
      "defined_out": [
        "storage_value%1#0",
        "storage_value%2#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "storage_value%1#0",
        "storage_value%2#0"
      ]
    },
    "963": {
      "op": "intc 4 // 4096",
      "defined_out": [
        "4096",
        "storage_value%1#0",
        "storage_value%2#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "storage_value%1#0",
        "storage_value%2#0",
        "4096"
      ]
    },
    "965": {
      "op": "intc_2 // 8",
      "defined_out": [
        "4096",
        "8",
        "storage_value%1#0",
        "storage_value%2#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "storage_value%1#0",
        "storage_value%2#0",
        "4096",
        "8"
      ]
    },
    "966": {
      "op": "extract3",
      "defined_out": [
        "storage_value%1#0",
        "tmp%1#0",
        "tmp%2#0",
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "storage_value%1#0",
        "tuple_item%0#0"
      ]
    },
    "967": {
      "op": "btoi",
      "defined_out": [
        "storage_value%1#0",
        "tmp%1#0",
        "tmp%2#0",
        "values%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "storage_value%1#0",
        "values%0#0"
      ]
    },
    "968": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "storage_value%1#0",
        "values%0#0",
        "tmp%1#0"
      ]
    },
    "970": {
      "op": "uncover 3",
      "stack_out": [
        "storage_value%1#0",
        "values%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "972": {
      "op": "uncover 3",
      "stack_out": [
        "values%0#0",
        "tmp%1#0",
        "tmp%2#0",
        "storage_value%1#0"
      ]
    },
    "974": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "storage_value%1#0",
        "values%0#0"
      ]
    },
    "976": {
      "retsub": true,
      "op": "retsub"
    },
    "977": {
      "subroutine": "examples.box_storage.contract.BoxContract.boxes_exist",
      "params": {},
      "block": "boxes_exist_block@0",
      "stack_in": [],
      "op": "bytec 8 // \"box_a\"",
      "defined_out": [
        "\"box_a\""
      ],
      "stack_out": [
        "\"box_a\""
      ]
    },
    "979": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "980": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "982": {
      "op": "bytec 9 // \"b\"",
      "defined_out": [
        "\"b\"",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "\"b\""
      ]
    },
    "984": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "985": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ]
    },
    "987": {
      "op": "bytec_2 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "0x424f585f43"
      ]
    },
    "988": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "_%2#0",
        "maybe_exists%2#0"
      ]
    },
    "989": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ]
    },
    "991": {
      "op": "bytec 6 // \"box_large\"",
      "defined_out": [
        "\"box_large\"",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "\"box_large\""
      ]
    },
    "993": {
      "op": "box_len",
      "defined_out": [
        "_%3#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "_%3#0",
        "maybe_exists%3#0"
      ]
    },
    "994": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ]
    },
    "996": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0",
        "maybe_exists%0#0"
      ]
    },
    "998": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_exists%2#0",
        "maybe_exists%3#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1000": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_exists%3#0",
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0"
      ]
    },
    "1002": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_exists%1#0",
        "maybe_exists%2#0",
        "maybe_exists%3#0"
      ]
    },
    "1004": {
      "retsub": true,
      "op": "retsub"
    },
    "1005": {
      "subroutine": "examples.box_storage.contract.BoxContract.create_dynamic_arr_struct",
      "params": {},
      "block": "create_dynamic_arr_struct_block@0",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1007": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1008": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "1009": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_array%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "encoded_array%0#0"
      ]
    },
    "1012": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "tmp%0#0"
      ]
    },
    "1013": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "encoded_array%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1015": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "encoded_array%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%0#0",
        "tmp%1#0",
        "2"
      ]
    },
    "1016": {
      "op": "*",
      "defined_out": [
        "encoded_array%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1017": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "1018": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "encoded_array%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%2#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1019": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "encoded_array%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%2#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "1020": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "tmp%2#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "1021": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%2#0",
        "aggregate%head%0#0"
      ]
    },
    "1022": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%2#0",
        "aggregate%head%0#0",
        "18"
      ]
    },
    "1024": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%head%0#0",
        "encoded_array%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%2#0",
        "aggregate%head%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "1025": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0",
        "encoded_array%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%2#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "1028": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0",
        "encoded_array%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "tmp%2#0",
        "aggregate%head%1#0"
      ]
    },
    "1029": {
      "op": "swap",
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "tmp%2#0"
      ]
    },
    "1030": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%1#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "1031": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "aggregate%head%2#0"
      ]
    },
    "1032": {
      "op": "swap",
      "stack_out": [
        "aggregate%head%2#0",
        "encoded_array%0#0"
      ]
    },
    "1033": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1034": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1035": {
      "op": "box_del",
      "defined_out": [
        "tmp%3#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%3#0",
        "{box_del}"
      ]
    },
    "1036": {
      "op": "pop",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1037": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "tmp%3#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1038": {
      "op": "swap",
      "stack_out": [
        "\"dynamic_arr_struct\"",
        "tmp%3#0"
      ]
    },
    "1039": {
      "op": "box_put",
      "stack_out": []
    },
    "1040": {
      "retsub": true,
      "op": "retsub"
    },
    "1041": {
      "subroutine": "examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct",
      "params": {},
      "block": "delete_dynamic_arr_struct_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "\"dynamic_arr_struct\""
      ]
    },
    "1042": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1043": {
      "op": "pop",
      "stack_out": []
    },
    "1044": {
      "retsub": true,
      "op": "retsub"
    },
    "1045": {
      "subroutine": "examples.box_storage.contract.BoxContract.append_dynamic_arr_struct",
      "params": {
        "times#0": "uint64"
      },
      "block": "append_dynamic_arr_struct",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1048": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "i#0"
      ]
    },
    "1049": {
      "block": "append_dynamic_arr_struct_block@0",
      "stack_in": [
        "i#0"
      ],
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "i#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1050": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "i#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1051": {
      "error": "check self.dynamic_arr_struct exists",
      "op": "assert // check self.dynamic_arr_struct exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "i#0",
        "storage_value%0#0"
      ]
    },
    "1052": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "storage_value%0#0"
      ],
      "stack_out": [
        "i#0",
        "storage_value%0#0",
        "10"
      ]
    },
    "1054": {
      "op": "intc_2 // 8",
      "defined_out": [
        "10",
        "8",
        "storage_value%0#0"
      ],
      "stack_out": [
        "i#0",
        "storage_value%0#0",
        "10",
        "8"
      ]
    },
    "1055": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "i#0",
        "tuple_item%0#0"
      ]
    },
    "1056": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "i#0",
        "values%0#0"
      ]
    },
    "1057": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "values%0#0"
      ],
      "stack_out": [
        "i#0",
        "values%0#0",
        "2"
      ]
    },
    "1058": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "i#0",
        "tmp%0#0"
      ]
    },
    "1059": {
      "error": "expected 2",
      "op": "assert // expected 2",
      "stack_out": [
        "i#0"
      ]
    },
    "1060": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1061": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ],
      "stack_out": [
        "i#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "1062": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "storage_value%1#0"
      ],
      "stack_out": [
        "i#0",
        "storage_value%1#0"
      ]
    },
    "1063": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "storage_value%1#0"
      ],
      "stack_out": [
        "i#0",
        "storage_value%1#0",
        "18"
      ]
    },
    "1065": {
      "op": "intc 5 // 32762",
      "defined_out": [
        "18",
        "32762",
        "storage_value%1#0"
      ],
      "stack_out": [
        "i#0",
        "storage_value%1#0",
        "18",
        "32762"
      ]
    },
    "1067": {
      "op": "extract3",
      "defined_out": [
        "values%1#0"
      ],
      "stack_out": [
        "i#0",
        "values%1#0"
      ]
    },
    "1068": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "values%1#0"
      ],
      "stack_out": [
        "i#0",
        "values%1#0",
        "0"
      ]
    },
    "1069": {
      "op": "intc_3 // 2",
      "stack_out": [
        "i#0",
        "values%1#0",
        "0",
        "2"
      ]
    },
    "1070": {
      "op": "extract3",
      "defined_out": [
        "values%2#0"
      ],
      "stack_out": [
        "i#0",
        "values%2#0"
      ]
    },
    "1071": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0"
      ]
    },
    "1072": {
      "op": "dup",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0"
      ]
    },
    "1073": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1074": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0",
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "1075": {
      "error": "check self.dynamic_arr_struct exists",
      "op": "assert // check self.dynamic_arr_struct exists",
      "defined_out": [
        "arr_len#0",
        "storage_value%2#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%2#0"
      ]
    },
    "1076": {
      "op": "dup",
      "defined_out": [
        "arr_len#0",
        "storage_value%2#0",
        "storage_value%2#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%2#0",
        "storage_value%2#0 (copy)"
      ]
    },
    "1077": {
      "op": "intc_2 // 8",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%2#0",
        "storage_value%2#0 (copy)",
        "8"
      ]
    },
    "1078": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "arr_len#0",
        "storage_value%2#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%2#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1079": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%extract_uint16%0#0",
        "storage_value%2#0"
      ]
    },
    "1080": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%extract_uint16%0#0",
        "storage_value%2#0",
        "storage_value%2#0 (copy)"
      ]
    },
    "1081": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "arr_len#0",
        "storage_value%2#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%extract_uint16%0#0",
        "storage_value%2#0",
        "aggregate%len%0#0"
      ]
    },
    "1082": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%2#0"
      ]
    },
    "1083": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%len%0#0",
        "storage_value%2#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1085": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%2#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1087": {
      "op": "substring3",
      "defined_out": [
        "arr_len#0",
        "values%3#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "values%3#0"
      ]
    },
    "1088": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "values%3#0",
        "0"
      ]
    },
    "1089": {
      "op": "extract_uint16",
      "defined_out": [
        "arr_len#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "tmp%2#0"
      ]
    },
    "1090": {
      "op": "dig 1",
      "defined_out": [
        "arr_len#0",
        "arr_len#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "tmp%2#0",
        "arr_len#0 (copy)"
      ]
    },
    "1092": {
      "op": "==",
      "defined_out": [
        "arr_len#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "tmp%3#0"
      ]
    },
    "1093": {
      "error": "expected arr length to be correct",
      "op": "assert // expected arr length to be correct",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0"
      ]
    },
    "1094": {
      "op": "frame_dig -1",
      "defined_out": [
        "arr_len#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "times#0 (copy)"
      ]
    },
    "1096": {
      "op": "+",
      "defined_out": [
        "arr_len#0",
        "index#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "index#0"
      ]
    },
    "1097": {
      "block": "append_dynamic_arr_struct_block@5",
      "stack_in": [
        "i#0",
        "arr_len#0",
        "index#0"
      ],
      "op": "intc_2 // 8",
      "defined_out": [
        "8"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "index#0",
        "8"
      ]
    },
    "1098": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "8"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "index#0",
        "8",
        "2"
      ]
    },
    "1099": {
      "op": "+",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "index#0",
        "tmp%0#1"
      ]
    },
    "1100": {
      "op": "intc_2 // 8",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "index#0",
        "tmp%0#1",
        "8"
      ]
    },
    "1101": {
      "op": "+",
      "defined_out": [
        "head#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "index#0",
        "head#0"
      ]
    },
    "1102": {
      "op": "swap",
      "defined_out": [
        "head#0",
        "index#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "head#0",
        "index#0"
      ]
    },
    "1103": {
      "op": "intc_2 // 8",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "head#0",
        "index#0",
        "8"
      ]
    },
    "1104": {
      "op": "*",
      "defined_out": [
        "head#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "head#0",
        "tmp%2#0"
      ]
    },
    "1105": {
      "op": "intc_3 // 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "head#0",
        "tmp%2#0",
        "2"
      ]
    },
    "1106": {
      "op": "+",
      "defined_out": [
        "dyn_arr_index#0",
        "head#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "head#0",
        "dyn_arr_index#0"
      ]
    },
    "1107": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%5#0"
      ]
    },
    "1108": {
      "block": "append_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@6",
      "stack_in": [
        "i#0",
        "arr_len#0",
        "tmp%5#0"
      ],
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%5#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1109": {
      "op": "swap",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "tmp%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "tmp%5#0"
      ]
    },
    "1110": {
      "op": "box_resize",
      "stack_out": [
        "i#0",
        "arr_len#0"
      ]
    },
    "1111": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1112": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%6#0",
        "aggregate%box_get%7#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "aggregate%box_get%6#0",
        "aggregate%box_get%7#0"
      ]
    },
    "1113": {
      "error": "check self.dynamic_arr_struct exists",
      "op": "assert // check self.dynamic_arr_struct exists",
      "defined_out": [
        "storage_value%3#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%3#0"
      ]
    },
    "1114": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "storage_value%3#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%3#0",
        "10"
      ]
    },
    "1116": {
      "op": "intc_2 // 8",
      "defined_out": [
        "10",
        "8",
        "storage_value%3#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%3#0",
        "10",
        "8"
      ]
    },
    "1117": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%4#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tuple_item%4#0"
      ]
    },
    "1118": {
      "op": "btoi",
      "defined_out": [
        "values%4#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "values%4#0"
      ]
    },
    "1119": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "values%4#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "values%4#0",
        "2"
      ]
    },
    "1120": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%6#0"
      ]
    },
    "1121": {
      "error": "expected 2",
      "op": "assert // expected 2",
      "stack_out": [
        "i#0",
        "arr_len#0"
      ]
    },
    "1122": {
      "op": "frame_dig 1",
      "defined_out": [
        "index#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "index#0"
      ]
    },
    "1124": {
      "block": "append_dynamic_arr_struct_block@7",
      "stack_in": [
        "i#0",
        "arr_len#0",
        "index#0"
      ],
      "op": "intc_2 // 8",
      "defined_out": [
        "8"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "index#0",
        "8"
      ]
    },
    "1125": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "8"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "index#0",
        "8",
        "2"
      ]
    },
    "1126": {
      "op": "+",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "index#0",
        "tmp%0#1"
      ]
    },
    "1127": {
      "op": "intc_2 // 8",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "index#0",
        "tmp%0#1",
        "8"
      ]
    },
    "1128": {
      "op": "+",
      "defined_out": [
        "head#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "index#0",
        "head#0"
      ]
    },
    "1129": {
      "op": "swap",
      "defined_out": [
        "head#0",
        "index#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "head#0",
        "index#0"
      ]
    },
    "1130": {
      "op": "intc_2 // 8",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "head#0",
        "index#0",
        "8"
      ]
    },
    "1131": {
      "op": "*",
      "defined_out": [
        "head#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "head#0",
        "tmp%2#0"
      ]
    },
    "1132": {
      "op": "intc_3 // 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "head#0",
        "tmp%2#0",
        "2"
      ]
    },
    "1133": {
      "op": "+",
      "defined_out": [
        "dyn_arr_index#0",
        "head#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "head#0",
        "dyn_arr_index#0"
      ]
    },
    "1134": {
      "op": "+",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%7#0"
      ]
    },
    "1135": {
      "block": "append_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@8",
      "stack_in": [
        "i#0",
        "arr_len#0",
        "tmp%7#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "times#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%7#0",
        "times#0 (copy)"
      ]
    },
    "1137": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "times#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%7#0",
        "times#0 (copy)",
        "8"
      ]
    },
    "1138": {
      "op": "*",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1139": {
      "op": "bzero",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1140": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "tmp%9#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%7#0",
        "tmp%9#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1141": {
      "op": "uncover 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%9#0",
        "\"dynamic_arr_struct\"",
        "tmp%7#0"
      ]
    },
    "1143": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%9#0",
        "\"dynamic_arr_struct\"",
        "tmp%7#0",
        "0"
      ]
    },
    "1144": {
      "op": "uncover 3",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "tmp%7#0",
        "0",
        "tmp%9#0"
      ]
    },
    "1146": {
      "op": "box_splice",
      "stack_out": [
        "i#0",
        "arr_len#0"
      ]
    },
    "1147": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1148": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%8#0",
        "aggregate%box_get%9#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "aggregate%box_get%8#0",
        "aggregate%box_get%9#0"
      ]
    },
    "1149": {
      "error": "check self.dynamic_arr_struct exists",
      "op": "assert // check self.dynamic_arr_struct exists",
      "defined_out": [
        "storage_value%4#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%4#0"
      ]
    },
    "1150": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "storage_value%4#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%4#0",
        "10"
      ]
    },
    "1152": {
      "op": "intc_2 // 8",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%4#0",
        "10",
        "8"
      ]
    },
    "1153": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tuple_item%5#0"
      ]
    },
    "1154": {
      "op": "btoi",
      "defined_out": [
        "values%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "values%5#0"
      ]
    },
    "1155": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "values%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "values%5#0",
        "2"
      ]
    },
    "1156": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%10#0"
      ]
    },
    "1157": {
      "error": "expected 2",
      "op": "assert // expected 2",
      "stack_out": [
        "i#0",
        "arr_len#0"
      ]
    },
    "1158": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "1"
      ]
    },
    "1159": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "i#0",
        "arr_len#0"
      ]
    },
    "1160": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "1161": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0"
      ]
    },
    "1163": {
      "block": "append_dynamic_arr_struct_for_header@1",
      "stack_in": [
        "i#0",
        "arr_len#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "1165": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "i#0",
        "times#0 (copy)"
      ]
    },
    "1167": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "continue_looping%0#0"
      ]
    },
    "1168": {
      "op": "bz append_dynamic_arr_struct_after_for@4",
      "stack_out": [
        "i#0",
        "arr_len#0"
      ]
    },
    "1171": {
      "block": "append_dynamic_arr_struct_for_body@2",
      "stack_in": [
        "i#0",
        "arr_len#0"
      ],
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1172": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%10#0",
        "aggregate%box_get%11#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "aggregate%box_get%10#0",
        "aggregate%box_get%11#0"
      ]
    },
    "1173": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%5#0"
      ]
    },
    "1174": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%5#0",
        "i#0"
      ]
    },
    "1176": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "i#0",
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%5#0",
        "encoded_value%0#0"
      ]
    },
    "1177": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0"
      ]
    },
    "1178": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "i#0",
        "storage_value%5#0",
        "storage_value%5#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0",
        "storage_value%5#0 (copy)"
      ]
    },
    "1179": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "encoded_value%0#0",
        "i#0",
        "storage_value%5#0",
        "storage_value%5#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0",
        "storage_value%5#0 (copy)",
        "18"
      ]
    },
    "1181": {
      "op": "intc 5 // 32762",
      "defined_out": [
        "18",
        "32762",
        "encoded_value%0#0",
        "i#0",
        "storage_value%5#0",
        "storage_value%5#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0",
        "storage_value%5#0 (copy)",
        "18",
        "32762"
      ]
    },
    "1183": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%5#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0",
        "aggregate%extract%5#0"
      ]
    },
    "1184": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%extract%5#0 (copy)",
        "encoded_value%0#0",
        "i#0",
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract%5#0 (copy)"
      ]
    },
    "1185": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%extract%5#0",
        "aggregate%extract%5#0 (copy)",
        "encoded_value%0#0",
        "i#0",
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract%5#0 (copy)",
        "2"
      ]
    },
    "1186": {
      "op": "intc 6 // 32760",
      "defined_out": [
        "2",
        "32760",
        "aggregate%extract%5#0",
        "aggregate%extract%5#0 (copy)",
        "encoded_value%0#0",
        "i#0",
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract%5#0 (copy)",
        "2",
        "32760"
      ]
    },
    "1188": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%extract%6#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract%6#0"
      ]
    },
    "1189": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%extract%6#0",
        "arr_len#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract%6#0",
        "arr_len#0"
      ]
    },
    "1191": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%extract%6#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "encoded_value%0#0",
        "i#0",
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract%6#0",
        "arr_len#0 (copy)",
        "arr_len#0 (copy)"
      ]
    },
    "1192": {
      "op": "cover 5",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract%6#0",
        "arr_len#0 (copy)"
      ]
    },
    "1194": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%extract%5#0",
        "aggregate%extract%6#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "encoded_value%0#0",
        "i#0",
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract%6#0",
        "arr_len#0 (copy)",
        "8"
      ]
    },
    "1195": {
      "op": "*",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%extract%6#0",
        "aggregate%write_offset%0#0",
        "arr_len#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract%6#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "1196": {
      "op": "uncover 4",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%5#0",
        "aggregate%extract%5#0",
        "aggregate%extract%6#0",
        "aggregate%write_offset%0#0",
        "encoded_value%0#0"
      ]
    },
    "1198": {
      "op": "replace3",
      "defined_out": [
        "aggregate%extract%5#0",
        "aggregate%updated_array%0#0",
        "arr_len#0",
        "i#0",
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%5#0",
        "aggregate%extract%5#0",
        "aggregate%updated_array%0#0"
      ]
    },
    "1199": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%5#0",
        "aggregate%updated_array%0#0",
        "aggregate%extract%5#0"
      ]
    },
    "1200": {
      "op": "intc_3 // 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%5#0",
        "aggregate%updated_array%0#0",
        "aggregate%extract%5#0",
        "2"
      ]
    },
    "1201": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%5#0",
        "aggregate%extract%5#0",
        "2",
        "aggregate%updated_array%0#0"
      ]
    },
    "1203": {
      "op": "replace3",
      "defined_out": [
        "aggregate%updated_data%0#0",
        "arr_len#0",
        "i#0",
        "storage_value%5#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%5#0",
        "aggregate%updated_data%0#0"
      ]
    },
    "1204": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%updated_data%0#0",
        "storage_value%5#0"
      ]
    },
    "1205": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%updated_data%0#0",
        "storage_value%5#0",
        "18"
      ]
    },
    "1207": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%5#0",
        "18",
        "aggregate%updated_data%0#0"
      ]
    },
    "1209": {
      "op": "replace3",
      "defined_out": [
        "arr_len#0",
        "i#0",
        "updated_tuple%0#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "updated_tuple%0#0"
      ]
    },
    "1210": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "updated_tuple%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1211": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "updated_tuple%0#0"
      ]
    },
    "1212": {
      "op": "box_put",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0"
      ]
    },
    "1213": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "1"
      ]
    },
    "1214": {
      "op": "+",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0"
      ]
    },
    "1215": {
      "op": "frame_bury 1",
      "defined_out": [
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0"
      ]
    },
    "1217": {
      "block": "append_dynamic_arr_struct_for_footer@3",
      "stack_in": [
        "i#0",
        "arr_len#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "1219": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "i#0",
        "1"
      ]
    },
    "1220": {
      "op": "+",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "i#0"
      ]
    },
    "1221": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0"
      ]
    },
    "1223": {
      "op": "b append_dynamic_arr_struct_for_header@1"
    },
    "1226": {
      "block": "append_dynamic_arr_struct_after_for@4",
      "stack_in": [
        "i#0",
        "arr_len#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0"
      ]
    },
    "1228": {
      "op": "dup",
      "defined_out": [
        "arr_len#0",
        "arr_len#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "arr_len#0 (copy)"
      ]
    },
    "1229": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1230": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)",
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)"
      ]
    },
    "1231": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "1232": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%0#0",
        "16"
      ]
    },
    "1234": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "1235": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1236": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "6"
      ]
    },
    "1238": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "6",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%1#0",
        "6",
        "2"
      ]
    },
    "1239": {
      "op": "extract3",
      "defined_out": [
        "arr_len#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "tmp%12#0"
      ]
    },
    "1240": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "arr_len#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "tmp%12#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1241": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%12#0",
        "aggregate%box_get%13#0",
        "arr_len#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "tmp%12#0",
        "aggregate%box_get%12#0",
        "aggregate%box_get%13#0"
      ]
    },
    "1242": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%6#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%6#0"
      ]
    },
    "1243": {
      "op": "dup",
      "defined_out": [
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%6#0",
        "storage_value%6#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%6#0",
        "storage_value%6#0 (copy)"
      ]
    },
    "1244": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%6#0",
        "storage_value%6#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%6#0",
        "storage_value%6#0 (copy)",
        "18"
      ]
    },
    "1246": {
      "op": "intc 5 // 32762",
      "defined_out": [
        "18",
        "32762",
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%6#0",
        "storage_value%6#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%6#0",
        "storage_value%6#0 (copy)",
        "18",
        "32762"
      ]
    },
    "1248": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%7#0",
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%6#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%6#0",
        "aggregate%extract%7#0"
      ]
    },
    "1249": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%extract%7#0",
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%6#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%6#0",
        "aggregate%extract%7#0",
        "0"
      ]
    },
    "1250": {
      "op": "uncover 3",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%6#0",
        "aggregate%extract%7#0",
        "0",
        "encoded_value%1#0"
      ]
    },
    "1252": {
      "op": "replace3",
      "defined_out": [
        "aggregate%updated_data%2#0",
        "arr_len#0",
        "storage_value%6#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%6#0",
        "aggregate%updated_data%2#0"
      ]
    },
    "1253": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%updated_data%2#0",
        "storage_value%6#0"
      ]
    },
    "1254": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%updated_data%2#0",
        "storage_value%6#0",
        "18"
      ]
    },
    "1256": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%6#0",
        "18",
        "aggregate%updated_data%2#0"
      ]
    },
    "1258": {
      "op": "replace3",
      "defined_out": [
        "arr_len#0",
        "updated_tuple%1#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "updated_tuple%1#0"
      ]
    },
    "1259": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "updated_tuple%1#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1260": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "updated_tuple%1#0"
      ]
    },
    "1261": {
      "op": "box_put",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0"
      ]
    },
    "1262": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1263": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%14#0",
        "aggregate%box_get%15#0",
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%box_get%14#0",
        "aggregate%box_get%15#0"
      ]
    },
    "1264": {
      "error": "check self.dynamic_arr_struct exists",
      "op": "assert // check self.dynamic_arr_struct exists",
      "defined_out": [
        "arr_len#0",
        "storage_value%7#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%7#0"
      ]
    },
    "1265": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "arr_len#0",
        "storage_value%7#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%7#0",
        "10"
      ]
    },
    "1267": {
      "op": "intc_2 // 8",
      "defined_out": [
        "10",
        "8",
        "arr_len#0",
        "storage_value%7#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%7#0",
        "10",
        "8"
      ]
    },
    "1268": {
      "op": "extract3",
      "defined_out": [
        "arr_len#0",
        "tuple_item%6#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "tuple_item%6#0"
      ]
    },
    "1269": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0",
        "values%6#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "values%6#0"
      ]
    },
    "1270": {
      "op": "intc_3 // 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "values%6#0",
        "2"
      ]
    },
    "1271": {
      "op": "==",
      "defined_out": [
        "arr_len#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "tmp%13#0"
      ]
    },
    "1272": {
      "error": "expected 2",
      "op": "assert // expected 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0"
      ]
    },
    "1273": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1274": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%16#0",
        "aggregate%box_get%17#0",
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%box_get%16#0",
        "aggregate%box_get%17#0"
      ]
    },
    "1275": {
      "error": "check self.dynamic_arr_struct exists",
      "op": "assert // check self.dynamic_arr_struct exists",
      "defined_out": [
        "arr_len#0",
        "storage_value%8#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%8#0"
      ]
    },
    "1276": {
      "op": "dup",
      "defined_out": [
        "arr_len#0",
        "storage_value%8#0",
        "storage_value%8#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%8#0",
        "storage_value%8#0 (copy)"
      ]
    },
    "1277": {
      "op": "intc_2 // 8",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%8#0",
        "storage_value%8#0 (copy)",
        "8"
      ]
    },
    "1278": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "arr_len#0",
        "storage_value%8#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%8#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1279": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%extract_uint16%1#0",
        "storage_value%8#0"
      ]
    },
    "1280": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%extract_uint16%1#0",
        "storage_value%8#0",
        "storage_value%8#0 (copy)"
      ]
    },
    "1281": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0",
        "arr_len#0",
        "storage_value%8#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%extract_uint16%1#0",
        "storage_value%8#0",
        "aggregate%len%1#0"
      ]
    },
    "1282": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0",
        "storage_value%8#0"
      ]
    },
    "1283": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "aggregate%len%1#0",
        "storage_value%8#0",
        "aggregate%extract_uint16%1#0"
      ]
    },
    "1285": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "storage_value%8#0",
        "aggregate%extract_uint16%1#0",
        "aggregate%len%1#0"
      ]
    },
    "1287": {
      "op": "substring3",
      "defined_out": [
        "arr_len#0",
        "values%7#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "values%7#0"
      ]
    },
    "1288": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "values%7#0",
        "0"
      ]
    },
    "1289": {
      "op": "extract_uint16",
      "defined_out": [
        "arr_len#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "arr_len#0",
        "tmp%14#0"
      ]
    },
    "1290": {
      "op": "==",
      "defined_out": [
        "arr_len#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%15#0"
      ]
    },
    "1291": {
      "error": "expected arr length to be correct",
      "op": "assert // expected arr length to be correct",
      "stack_out": [
        "i#0",
        "arr_len#0"
      ]
    },
    "1292": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1293": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%18#0",
        "aggregate%box_get%19#0",
        "arr_len#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "aggregate%box_get%18#0",
        "aggregate%box_get%19#0"
      ]
    },
    "1294": {
      "error": "check self.dynamic_arr_struct exists",
      "op": "assert // check self.dynamic_arr_struct exists",
      "defined_out": [
        "arr_len#0",
        "storage_value%9#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%9#0"
      ]
    },
    "1295": {
      "op": "dup",
      "defined_out": [
        "arr_len#0",
        "storage_value%9#0",
        "storage_value%9#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%9#0",
        "storage_value%9#0 (copy)"
      ]
    },
    "1296": {
      "op": "intc_2 // 8",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%9#0",
        "storage_value%9#0 (copy)",
        "8"
      ]
    },
    "1297": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "arr_len#0",
        "storage_value%9#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%9#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "1298": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "aggregate%extract_uint16%2#0",
        "storage_value%9#0"
      ]
    },
    "1299": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "aggregate%extract_uint16%2#0",
        "storage_value%9#0",
        "storage_value%9#0 (copy)"
      ]
    },
    "1300": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%2#0",
        "aggregate%len%2#0",
        "arr_len#0",
        "storage_value%9#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "aggregate%extract_uint16%2#0",
        "storage_value%9#0",
        "aggregate%len%2#0"
      ]
    },
    "1301": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%2#0",
        "storage_value%9#0"
      ]
    },
    "1302": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "aggregate%len%2#0",
        "storage_value%9#0",
        "aggregate%extract_uint16%2#0"
      ]
    },
    "1304": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "storage_value%9#0",
        "aggregate%extract_uint16%2#0",
        "aggregate%len%2#0"
      ]
    },
    "1306": {
      "op": "substring3",
      "defined_out": [
        "arr_len#0",
        "values%8#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "values%8#0"
      ]
    },
    "1307": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "arr_len#0",
        "values%8#0",
        "0"
      ]
    },
    "1308": {
      "op": "extract_uint16",
      "defined_out": [
        "arr_len#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "i#0",
        "arr_len#0",
        "tmp%16#0"
      ]
    },
    "1309": {
      "op": "frame_bury 0"
    },
    "1311": {
      "retsub": true,
      "op": "retsub"
    },
    "1312": {
      "subroutine": "examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct",
      "params": {
        "times#0": "uint64"
      },
      "block": "pop_dynamic_arr_struct",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1315": {
      "block": "pop_dynamic_arr_struct_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "\"dynamic_arr_struct\""
      ]
    },
    "1316": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1317": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "1318": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "18"
      ]
    },
    "1320": {
      "op": "intc 5 // 32762",
      "defined_out": [
        "18",
        "32762",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "18",
        "32762"
      ]
    },
    "1322": {
      "op": "extract3",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "1323": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "0"
      ]
    },
    "1324": {
      "op": "intc_3 // 2",
      "defined_out": [
        "0",
        "2",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "0",
        "2"
      ]
    },
    "1325": {
      "op": "extract3",
      "defined_out": [
        "values%1#0"
      ],
      "stack_out": [
        "values%1#0"
      ]
    },
    "1326": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1327": {
      "op": "frame_dig -1",
      "defined_out": [
        "times#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "times#0 (copy)"
      ]
    },
    "1329": {
      "op": "-",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0"
      ]
    },
    "1330": {
      "op": "dupn 2",
      "defined_out": [
        "arr_len#0",
        "arr_len#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "arr_len#0 (copy)"
      ]
    },
    "1332": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1333": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "1334": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "1335": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "16"
      ]
    },
    "1337": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "1338": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1339": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "6"
      ]
    },
    "1341": {
      "op": "intc_3 // 2",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "6",
        "2"
      ]
    },
    "1342": {
      "op": "extract3",
      "defined_out": [
        "arr_len#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "tmp%2#0"
      ]
    },
    "1343": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "tmp%2#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1344": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "arr_len#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "tmp%2#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "1345": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0"
      ]
    },
    "1346": {
      "op": "dup",
      "defined_out": [
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)"
      ]
    },
    "1347": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "18"
      ]
    },
    "1349": {
      "op": "intc 5 // 32762",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "18",
        "32762"
      ]
    },
    "1351": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%2#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%2#0"
      ]
    },
    "1352": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%2#0",
        "0"
      ]
    },
    "1353": {
      "op": "uncover 3",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "storage_value%1#0",
        "aggregate%extract%2#0",
        "0",
        "encoded_value%0#0"
      ]
    },
    "1355": {
      "op": "replace3",
      "defined_out": [
        "aggregate%updated_data%0#0",
        "arr_len#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "storage_value%1#0",
        "aggregate%updated_data%0#0"
      ]
    },
    "1356": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "aggregate%updated_data%0#0",
        "storage_value%1#0"
      ]
    },
    "1357": {
      "op": "pushint 18 // 18",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "aggregate%updated_data%0#0",
        "storage_value%1#0",
        "18"
      ]
    },
    "1359": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "storage_value%1#0",
        "18",
        "aggregate%updated_data%0#0"
      ]
    },
    "1361": {
      "op": "replace3",
      "defined_out": [
        "arr_len#0",
        "updated_tuple%0#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "updated_tuple%0#0"
      ]
    },
    "1362": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "updated_tuple%0#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1363": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "updated_tuple%0#0"
      ]
    },
    "1364": {
      "op": "box_put",
      "defined_out": [
        "arr_len#0",
        "index#0"
      ],
      "stack_out": [
        "arr_len#0",
        "index#0"
      ]
    },
    "1365": {
      "block": "pop_dynamic_arr_struct_block@1",
      "stack_in": [
        "arr_len#0",
        "index#0"
      ],
      "op": "intc_2 // 8",
      "defined_out": [
        "8"
      ],
      "stack_out": [
        "arr_len#0",
        "index#0",
        "8"
      ]
    },
    "1366": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "8"
      ],
      "stack_out": [
        "arr_len#0",
        "index#0",
        "8",
        "2"
      ]
    },
    "1367": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "arr_len#0",
        "index#0",
        "tmp%0#0"
      ]
    },
    "1368": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_len#0",
        "index#0",
        "tmp%0#0",
        "8"
      ]
    },
    "1369": {
      "op": "+",
      "defined_out": [
        "head#0"
      ],
      "stack_out": [
        "arr_len#0",
        "index#0",
        "head#0"
      ]
    },
    "1370": {
      "op": "swap",
      "defined_out": [
        "head#0",
        "index#0"
      ],
      "stack_out": [
        "arr_len#0",
        "head#0",
        "index#0"
      ]
    },
    "1371": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_len#0",
        "head#0",
        "index#0",
        "8"
      ]
    },
    "1372": {
      "op": "*",
      "defined_out": [
        "head#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "arr_len#0",
        "head#0",
        "tmp%2#1"
      ]
    },
    "1373": {
      "op": "intc_3 // 2",
      "stack_out": [
        "arr_len#0",
        "head#0",
        "tmp%2#1",
        "2"
      ]
    },
    "1374": {
      "op": "+",
      "defined_out": [
        "dyn_arr_index#0",
        "head#0"
      ],
      "stack_out": [
        "arr_len#0",
        "head#0",
        "dyn_arr_index#0"
      ]
    },
    "1375": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%3#0"
      ]
    },
    "1376": {
      "block": "pop_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@2",
      "stack_in": [
        "arr_len#0",
        "tmp%3#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "times#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%3#0",
        "times#0 (copy)"
      ]
    },
    "1378": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "times#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%3#0",
        "times#0 (copy)",
        "8"
      ]
    },
    "1379": {
      "op": "*",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1380": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%3#0",
        "tmp%4#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1381": {
      "op": "uncover 2",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "index#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%4#0",
        "\"dynamic_arr_struct\"",
        "index#0"
      ]
    },
    "1383": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "index#0",
        "tmp%4#0"
      ]
    },
    "1385": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "0x",
        "index#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "index#0",
        "tmp%4#0",
        "0x"
      ]
    },
    "1386": {
      "op": "box_splice",
      "stack_out": [
        "arr_len#0"
      ]
    },
    "1387": {
      "op": "frame_dig 0",
      "defined_out": [
        "index#0"
      ],
      "stack_out": [
        "arr_len#0",
        "index#0"
      ]
    },
    "1389": {
      "block": "pop_dynamic_arr_struct_block@3",
      "stack_in": [
        "arr_len#0",
        "index#0"
      ],
      "op": "intc_2 // 8",
      "defined_out": [
        "8"
      ],
      "stack_out": [
        "arr_len#0",
        "index#0",
        "8"
      ]
    },
    "1390": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "8"
      ],
      "stack_out": [
        "arr_len#0",
        "index#0",
        "8",
        "2"
      ]
    },
    "1391": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "arr_len#0",
        "index#0",
        "tmp%0#0"
      ]
    },
    "1392": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_len#0",
        "index#0",
        "tmp%0#0",
        "8"
      ]
    },
    "1393": {
      "op": "+",
      "defined_out": [
        "head#0"
      ],
      "stack_out": [
        "arr_len#0",
        "index#0",
        "head#0"
      ]
    },
    "1394": {
      "op": "swap",
      "defined_out": [
        "head#0",
        "index#0"
      ],
      "stack_out": [
        "arr_len#0",
        "head#0",
        "index#0"
      ]
    },
    "1395": {
      "op": "intc_2 // 8",
      "stack_out": [
        "arr_len#0",
        "head#0",
        "index#0",
        "8"
      ]
    },
    "1396": {
      "op": "*",
      "defined_out": [
        "head#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "arr_len#0",
        "head#0",
        "tmp%2#1"
      ]
    },
    "1397": {
      "op": "intc_3 // 2",
      "stack_out": [
        "arr_len#0",
        "head#0",
        "tmp%2#1",
        "2"
      ]
    },
    "1398": {
      "op": "+",
      "defined_out": [
        "dyn_arr_index#0",
        "head#0"
      ],
      "stack_out": [
        "arr_len#0",
        "head#0",
        "dyn_arr_index#0"
      ]
    },
    "1399": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%5#0"
      ]
    },
    "1400": {
      "block": "pop_dynamic_arr_struct_after_inlined_examples.box_storage.contract.get_dynamic_arr_struct_byte_index@4",
      "stack_in": [
        "arr_len#0",
        "tmp%5#0"
      ],
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "tmp%5#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%5#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1401": {
      "op": "swap",
      "defined_out": [
        "\"dynamic_arr_struct\"",
        "size#0"
      ],
      "stack_out": [
        "arr_len#0",
        "\"dynamic_arr_struct\"",
        "size#0"
      ]
    },
    "1402": {
      "op": "box_resize",
      "stack_out": [
        "arr_len#0"
      ]
    },
    "1403": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "arr_len#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1404": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "1405": {
      "error": "check self.dynamic_arr_struct exists",
      "op": "assert // check self.dynamic_arr_struct exists",
      "defined_out": [
        "storage_value%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "storage_value%2#0"
      ]
    },
    "1406": {
      "op": "dup",
      "defined_out": [
        "storage_value%2#0",
        "storage_value%2#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "storage_value%2#0",
        "storage_value%2#0 (copy)"
      ]
    },
    "1407": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "storage_value%2#0",
        "storage_value%2#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "storage_value%2#0",
        "storage_value%2#0 (copy)",
        "8"
      ]
    },
    "1408": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "storage_value%2#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1409": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "aggregate%extract_uint16%0#0",
        "storage_value%2#0"
      ]
    },
    "1410": {
      "op": "dup",
      "stack_out": [
        "arr_len#0",
        "aggregate%extract_uint16%0#0",
        "storage_value%2#0",
        "storage_value%2#0 (copy)"
      ]
    },
    "1411": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%extract_uint16%0#0",
        "storage_value%2#0",
        "aggregate%len%0#0"
      ]
    },
    "1412": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%2#0"
      ]
    },
    "1413": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "aggregate%len%0#0",
        "storage_value%2#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1415": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "storage_value%2#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1417": {
      "op": "substring3",
      "defined_out": [
        "values%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "values%2#0"
      ]
    },
    "1418": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "values%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "values%2#0",
        "0"
      ]
    },
    "1419": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%6#0"
      ]
    },
    "1420": {
      "op": "swap"
    },
    "1421": {
      "retsub": true,
      "op": "retsub"
    },
    "1422": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct",
      "params": {},
      "block": "sum_dynamic_arr_struct",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1425": {
      "block": "sum_dynamic_arr_struct_block@0",
      "stack_in": [],
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "defined_out": [
        "\"dynamic_arr_struct\""
      ],
      "stack_out": [
        "\"dynamic_arr_struct\""
      ]
    },
    "1426": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1427": {
      "error": "check self.dynamic_arr_struct exists",
      "op": "assert // check self.dynamic_arr_struct exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "1428": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0"
      ]
    },
    "1429": {
      "op": "intc_2 // 8",
      "defined_out": [
        "0",
        "8",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0",
        "8"
      ]
    },
    "1430": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "1431": {
      "op": "btoi",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "1432": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0",
        "1"
      ]
    },
    "1433": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1434": {
      "error": "expected 1",
      "op": "assert // expected 1",
      "stack_out": []
    },
    "1435": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "\"dynamic_arr_struct\""
      ]
    },
    "1436": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ],
      "stack_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "1437": {
      "error": "check self.dynamic_arr_struct exists",
      "op": "assert // check self.dynamic_arr_struct exists",
      "defined_out": [
        "storage_value%1#0"
      ],
      "stack_out": [
        "storage_value%1#0"
      ]
    },
    "1438": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "storage_value%1#0"
      ],
      "stack_out": [
        "storage_value%1#0",
        "10"
      ]
    },
    "1440": {
      "op": "intc_2 // 8",
      "stack_out": [
        "storage_value%1#0",
        "10",
        "8"
      ]
    },
    "1441": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%1#0"
      ],
      "stack_out": [
        "tuple_item%1#0"
      ]
    },
    "1442": {
      "op": "btoi",
      "defined_out": [
        "values%1#0"
      ],
      "stack_out": [
        "values%1#0"
      ]
    },
    "1443": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "values%1#0"
      ],
      "stack_out": [
        "values%1#0",
        "2"
      ]
    },
    "1444": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1445": {
      "error": "expected 2",
      "op": "assert // expected 2",
      "stack_out": []
    },
    "1446": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "\"dynamic_arr_struct\""
      ]
    },
    "1447": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "1448": {
      "error": "check self.dynamic_arr_struct exists",
      "op": "assert // check self.dynamic_arr_struct exists",
      "defined_out": [
        "storage_value%2#0"
      ],
      "stack_out": [
        "storage_value%2#0"
      ]
    },
    "1449": {
      "op": "intc_0 // 0",
      "stack_out": [
        "storage_value%2#0",
        "0"
      ]
    },
    "1450": {
      "op": "intc_2 // 8",
      "stack_out": [
        "storage_value%2#0",
        "0",
        "8"
      ]
    },
    "1451": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%2#0"
      ],
      "stack_out": [
        "tuple_item%2#0"
      ]
    },
    "1452": {
      "op": "btoi",
      "defined_out": [
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0"
      ]
    },
    "1453": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "values%2#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1454": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%6#0",
        "aggregate%box_get%7#0",
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0",
        "aggregate%box_get%6#0",
        "aggregate%box_get%7#0"
      ]
    },
    "1455": {
      "error": "check self.dynamic_arr_struct exists",
      "op": "assert // check self.dynamic_arr_struct exists",
      "defined_out": [
        "storage_value%3#0",
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0",
        "storage_value%3#0"
      ]
    },
    "1456": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "values%2#0",
        "storage_value%3#0",
        "10"
      ]
    },
    "1458": {
      "op": "intc_2 // 8",
      "stack_out": [
        "values%2#0",
        "storage_value%3#0",
        "10",
        "8"
      ]
    },
    "1459": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%3#0",
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0",
        "tuple_item%3#0"
      ]
    },
    "1460": {
      "op": "btoi",
      "defined_out": [
        "values%2#0",
        "values%3#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%3#0"
      ]
    },
    "1461": {
      "op": "+",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "1462": {
      "op": "bytec_0 // \"dynamic_arr_struct\"",
      "stack_out": [
        "total#0",
        "\"dynamic_arr_struct\""
      ]
    },
    "1463": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%8#0",
        "aggregate%box_get%9#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%box_get%8#0",
        "aggregate%box_get%9#0"
      ]
    },
    "1464": {
      "error": "check self.dynamic_arr_struct exists",
      "op": "assert // check self.dynamic_arr_struct exists",
      "defined_out": [
        "storage_value%4#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%4#0"
      ]
    },
    "1465": {
      "op": "dup",
      "defined_out": [
        "storage_value%4#0",
        "storage_value%4#0 (copy)",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%4#0",
        "storage_value%4#0 (copy)"
      ]
    },
    "1466": {
      "op": "intc_2 // 8",
      "stack_out": [
        "total#0",
        "storage_value%4#0",
        "storage_value%4#0 (copy)",
        "8"
      ]
    },
    "1467": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "storage_value%4#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%4#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1468": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "aggregate%extract_uint16%0#0",
        "storage_value%4#0"
      ]
    },
    "1469": {
      "op": "dup",
      "stack_out": [
        "total#0",
        "aggregate%extract_uint16%0#0",
        "storage_value%4#0",
        "storage_value%4#0 (copy)"
      ]
    },
    "1470": {
      "op": "len",
      "defined_out": [
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%4#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%extract_uint16%0#0",
        "storage_value%4#0",
        "aggregate%len%0#0"
      ]
    },
    "1471": {
      "op": "swap",
      "stack_out": [
        "total#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0",
        "storage_value%4#0"
      ]
    },
    "1472": {
      "op": "uncover 2",
      "stack_out": [
        "total#0",
        "aggregate%len%0#0",
        "storage_value%4#0",
        "aggregate%extract_uint16%0#0"
      ]
    },
    "1474": {
      "op": "uncover 2",
      "stack_out": [
        "total#0",
        "storage_value%4#0",
        "aggregate%extract_uint16%0#0",
        "aggregate%len%0#0"
      ]
    },
    "1476": {
      "op": "substring3",
      "defined_out": [
        "total#0",
        "values%4#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0"
      ]
    },
    "1477": {
      "op": "dup",
      "defined_out": [
        "total#0",
        "values%4#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "values%4#0"
      ]
    },
    "1478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total#0",
        "values%4#0",
        "values%4#0",
        "0"
      ]
    },
    "1479": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0",
        "total#0",
        "values%4#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0"
      ]
    },
    "1480": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0",
        "values%4#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1481": {
      "block": "sum_dynamic_arr_struct_for_header@1",
      "stack_in": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1483": {
      "op": "frame_dig 2",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "1485": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "1486": {
      "op": "bz sum_dynamic_arr_struct_after_for@4",
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1489": {
      "block": "sum_dynamic_arr_struct_for_body@2",
      "stack_in": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "values%4#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "values%4#0"
      ]
    },
    "1491": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "values%4#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "1494": {
      "op": "frame_dig 3",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "values%4#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1496": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "values%4#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "8"
      ]
    },
    "1497": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "item_index_internal%0#0",
        "values%4#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1498": {
      "op": "intc_2 // 8",
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "8"
      ]
    },
    "1499": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%0#0",
        "item_index_internal%0#0",
        "values%4#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_item%0#0"
      ]
    },
    "1500": {
      "op": "btoi",
      "defined_out": [
        "item_index_internal%0#0",
        "val#0",
        "values%4#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "val#0"
      ]
    },
    "1501": {
      "op": "frame_dig 0",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0",
        "val#0",
        "values%4#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "val#0",
        "total#0"
      ]
    },
    "1503": {
      "op": "+",
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1504": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_index_internal%0#0",
        "total#0",
        "values%4#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1506": {
      "block": "sum_dynamic_arr_struct_for_footer@3",
      "stack_in": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1508": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "1509": {
      "op": "+",
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1510": {
      "op": "frame_bury 3",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1512": {
      "op": "b sum_dynamic_arr_struct_for_header@1"
    },
    "1515": {
      "block": "sum_dynamic_arr_struct_after_for@4",
      "stack_in": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "values%4#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1516": {
      "subroutine": "examples.box_storage.contract.BoxContract.create_dynamic_box",
      "params": {},
      "block": "create_dynamic_box_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1517": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "1518": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "1521": {
      "op": "bytec 4 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "\"dynamic_box\""
      ]
    },
    "1523": {
      "op": "box_del",
      "defined_out": [
        "encoded_array%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "{box_del}"
      ]
    },
    "1524": {
      "op": "pop",
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "1525": {
      "op": "bytec 4 // \"dynamic_box\"",
      "stack_out": [
        "encoded_array%0#0",
        "\"dynamic_box\""
      ]
    },
    "1527": {
      "op": "swap",
      "stack_out": [
        "\"dynamic_box\"",
        "encoded_array%0#0"
      ]
    },
    "1528": {
      "op": "box_put",
      "stack_out": []
    },
    "1529": {
      "retsub": true,
      "op": "retsub"
    },
    "1530": {
      "subroutine": "examples.box_storage.contract.BoxContract.delete_dynamic_box",
      "params": {},
      "block": "delete_dynamic_box_block@0",
      "stack_in": [],
      "op": "bytec 4 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "1532": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1533": {
      "op": "pop",
      "stack_out": []
    },
    "1534": {
      "retsub": true,
      "op": "retsub"
    },
    "1535": {
      "subroutine": "examples.box_storage.contract.BoxContract.append_dynamic_box",
      "params": {
        "times#0": "uint64"
      },
      "block": "append_dynamic_box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1538": {
      "block": "append_dynamic_box_block@0",
      "stack_in": [],
      "op": "bytec 4 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "1540": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1541": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "1542": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0"
      ]
    },
    "1543": {
      "op": "intc_3 // 2",
      "defined_out": [
        "0",
        "2",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0",
        "2"
      ]
    },
    "1544": {
      "op": "extract3",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "1545": {
      "op": "btoi",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0"
      ]
    },
    "1546": {
      "op": "dup",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0"
      ]
    },
    "1547": {
      "op": "frame_dig -1",
      "defined_out": [
        "arr_len#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0",
        "times#0 (copy)"
      ]
    },
    "1549": {
      "op": "+",
      "defined_out": [
        "arr_len#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%1#0"
      ]
    },
    "1550": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "arr_len#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%1#0",
        "8"
      ]
    },
    "1551": {
      "op": "*",
      "defined_out": [
        "arr_len#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%2#0"
      ]
    },
    "1552": {
      "op": "intc_3 // 2",
      "stack_out": [
        "arr_len#0",
        "tmp%2#0",
        "2"
      ]
    },
    "1553": {
      "op": "+",
      "defined_out": [
        "arr_len#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%3#0"
      ]
    },
    "1554": {
      "op": "bytec 4 // \"dynamic_box\"",
      "stack_out": [
        "arr_len#0",
        "tmp%3#0",
        "\"dynamic_box\""
      ]
    },
    "1556": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "\"dynamic_box\"",
        "tmp%3#0"
      ]
    },
    "1557": {
      "op": "box_resize",
      "stack_out": [
        "arr_len#0"
      ]
    },
    "1558": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "1"
      ]
    },
    "1559": {
      "error": "Step cannot be zero",
      "op": "assert // Step cannot be zero",
      "stack_out": [
        "arr_len#0"
      ]
    },
    "1560": {
      "op": "intc_0 // 0",
      "defined_out": [
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0"
      ]
    },
    "1561": {
      "block": "append_dynamic_box_for_header@1",
      "stack_in": [
        "arr_len#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "1563": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "times#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "times#0 (copy)"
      ]
    },
    "1565": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "1566": {
      "op": "bz append_dynamic_box_after_for@4",
      "stack_out": [
        "arr_len#0",
        "i#0"
      ]
    },
    "1569": {
      "block": "append_dynamic_box_for_body@2",
      "stack_in": [
        "arr_len#0",
        "i#0"
      ],
      "op": "bytec 4 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "\"dynamic_box\""
      ]
    },
    "1571": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "1572": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "storage_value%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "storage_value%1#0"
      ]
    },
    "1573": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "storage_value%1#0",
        "i#0"
      ]
    },
    "1575": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "storage_value%1#0",
        "encoded_value%0#0"
      ]
    },
    "1576": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0"
      ]
    },
    "1577": {
      "op": "dup",
      "defined_out": [
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)"
      ]
    },
    "1578": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "2"
      ]
    },
    "1579": {
      "op": "intc 6 // 32760",
      "defined_out": [
        "2",
        "32760",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "storage_value%1#0 (copy)",
        "2",
        "32760"
      ]
    },
    "1581": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0"
      ]
    },
    "1582": {
      "op": "frame_dig 0",
      "defined_out": [
        "aggregate%extract%1#0",
        "arr_len#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "arr_len#0"
      ]
    },
    "1584": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%1#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "arr_len#0 (copy)",
        "arr_len#0 (copy)"
      ]
    },
    "1585": {
      "op": "cover 4",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "arr_len#0 (copy)"
      ]
    },
    "1587": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%extract%1#0",
        "arr_len#0",
        "arr_len#0 (copy)",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "arr_len#0 (copy)",
        "8"
      ]
    },
    "1588": {
      "op": "*",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%write_offset%0#0",
        "arr_len#0",
        "encoded_value%0#0",
        "i#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "1589": {
      "op": "uncover 3",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "storage_value%1#0",
        "aggregate%extract%1#0",
        "aggregate%write_offset%0#0",
        "encoded_value%0#0"
      ]
    },
    "1591": {
      "op": "replace3",
      "defined_out": [
        "aggregate%updated_array%0#0",
        "arr_len#0",
        "i#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "storage_value%1#0",
        "aggregate%updated_array%0#0"
      ]
    },
    "1592": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%updated_array%0#0",
        "storage_value%1#0"
      ]
    },
    "1593": {
      "op": "intc_3 // 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "aggregate%updated_array%0#0",
        "storage_value%1#0",
        "2"
      ]
    },
    "1594": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "storage_value%1#0",
        "2",
        "aggregate%updated_array%0#0"
      ]
    },
    "1596": {
      "op": "replace3",
      "defined_out": [
        "arr_len#0",
        "i#0",
        "updated_tuple%0#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "updated_tuple%0#0"
      ]
    },
    "1597": {
      "op": "bytec 4 // \"dynamic_box\"",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "updated_tuple%0#0",
        "\"dynamic_box\""
      ]
    },
    "1599": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "\"dynamic_box\"",
        "updated_tuple%0#0"
      ]
    },
    "1600": {
      "op": "box_put",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "1601": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0",
        "1"
      ]
    },
    "1602": {
      "op": "+",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "1603": {
      "op": "frame_bury 0",
      "defined_out": [
        "arr_len#0",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0"
      ]
    },
    "1605": {
      "block": "append_dynamic_box_for_footer@3",
      "stack_in": [
        "arr_len#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "1607": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1608": {
      "op": "+",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "i#0"
      ]
    },
    "1609": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0"
      ]
    },
    "1611": {
      "op": "b append_dynamic_box_for_header@1"
    },
    "1614": {
      "block": "append_dynamic_box_after_for@4",
      "stack_in": [
        "arr_len#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "arr_len#0"
      ]
    },
    "1616": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1617": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%1#0 (copy)"
      ]
    },
    "1618": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "1619": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%bitlen%0#0",
        "16"
      ]
    },
    "1621": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "1622": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1623": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "6"
      ]
    },
    "1625": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "6",
        "aggregate%val_as_bytes%1#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%val_as_bytes%1#0",
        "6",
        "2"
      ]
    },
    "1626": {
      "op": "extract3",
      "defined_out": [
        "arr_len#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "tmp%5#0"
      ]
    },
    "1627": {
      "op": "bytec 4 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "arr_len#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "tmp%5#0",
        "\"dynamic_box\""
      ]
    },
    "1629": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0",
        "arr_len#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "tmp%5#0",
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "1630": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "encoded_value%1#0",
        "storage_value%2#0"
      ]
    },
    "1631": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "arr_len#0",
        "encoded_value%1#0",
        "storage_value%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "encoded_value%1#0",
        "storage_value%2#0",
        "0"
      ]
    },
    "1632": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "storage_value%2#0",
        "0",
        "encoded_value%1#0"
      ]
    },
    "1634": {
      "op": "replace3",
      "defined_out": [
        "arr_len#0",
        "updated_tuple%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "updated_tuple%1#0"
      ]
    },
    "1635": {
      "op": "bytec 4 // \"dynamic_box\"",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "updated_tuple%1#0",
        "\"dynamic_box\""
      ]
    },
    "1637": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "\"dynamic_box\"",
        "updated_tuple%1#0"
      ]
    },
    "1638": {
      "op": "box_put",
      "stack_out": [
        "arr_len#0",
        "i#0"
      ]
    },
    "1639": {
      "op": "bytec 4 // \"dynamic_box\"",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "\"dynamic_box\""
      ]
    },
    "1641": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%6#0",
        "aggregate%box_get%7#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "aggregate%box_get%6#0",
        "aggregate%box_get%7#0"
      ]
    },
    "1642": {
      "error": "check self.dynamic_box exists",
      "op": "assert // check self.dynamic_box exists",
      "defined_out": [
        "arr_len#0",
        "storage_value%3#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "storage_value%3#0"
      ]
    },
    "1643": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_len#0",
        "i#0",
        "storage_value%3#0",
        "0"
      ]
    },
    "1644": {
      "op": "extract_uint16",
      "defined_out": [
        "arr_len#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "arr_len#0",
        "i#0",
        "tmp%6#0"
      ]
    },
    "1645": {
      "op": "frame_bury 0"
    },
    "1647": {
      "retsub": true,
      "op": "retsub"
    },
    "1648": {
      "subroutine": "examples.box_storage.contract.BoxContract.pop_dynamic_box",
      "params": {
        "times#0": "uint64"
      },
      "block": "pop_dynamic_box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1651": {
      "block": "pop_dynamic_box_block@0",
      "stack_in": [],
      "op": "bytec 4 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\""
      ],
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "1653": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1654": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "1655": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0"
      ]
    },
    "1656": {
      "op": "intc_3 // 2",
      "defined_out": [
        "0",
        "2",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0",
        "2"
      ]
    },
    "1657": {
      "op": "extract3",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "1658": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1659": {
      "op": "frame_dig -1",
      "defined_out": [
        "times#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "times#0 (copy)"
      ]
    },
    "1661": {
      "op": "-",
      "defined_out": [
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0"
      ]
    },
    "1662": {
      "op": "dup",
      "defined_out": [
        "arr_len#0",
        "arr_len#0 (copy)"
      ],
      "stack_out": [
        "arr_len#0",
        "arr_len#0 (copy)"
      ]
    },
    "1663": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1664": {
      "op": "dup",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%0#0 (copy)"
      ]
    },
    "1665": {
      "op": "bitlen",
      "defined_out": [
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0"
      ]
    },
    "1666": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%bitlen%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%bitlen%0#0",
        "16"
      ]
    },
    "1668": {
      "op": "<=",
      "defined_out": [
        "aggregate%no_overflow%0#0",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%no_overflow%0#0"
      ]
    },
    "1669": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1670": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "aggregate%val_as_bytes%0#0",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "6"
      ]
    },
    "1672": {
      "op": "intc_3 // 2",
      "stack_out": [
        "arr_len#0",
        "aggregate%val_as_bytes%0#0",
        "6",
        "2"
      ]
    },
    "1673": {
      "op": "extract3",
      "defined_out": [
        "arr_len#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%2#0"
      ]
    },
    "1674": {
      "op": "bytec 4 // \"dynamic_box\"",
      "stack_out": [
        "arr_len#0",
        "tmp%2#0",
        "\"dynamic_box\""
      ]
    },
    "1676": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "arr_len#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "arr_len#0",
        "tmp%2#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "1677": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0"
      ]
    },
    "1678": {
      "op": "intc_0 // 0",
      "stack_out": [
        "arr_len#0",
        "encoded_value%0#0",
        "storage_value%1#0",
        "0"
      ]
    },
    "1679": {
      "op": "uncover 2",
      "stack_out": [
        "arr_len#0",
        "storage_value%1#0",
        "0",
        "encoded_value%0#0"
      ]
    },
    "1681": {
      "op": "replace3",
      "defined_out": [
        "arr_len#0",
        "updated_tuple%0#0"
      ],
      "stack_out": [
        "arr_len#0",
        "updated_tuple%0#0"
      ]
    },
    "1682": {
      "op": "bytec 4 // \"dynamic_box\"",
      "stack_out": [
        "arr_len#0",
        "updated_tuple%0#0",
        "\"dynamic_box\""
      ]
    },
    "1684": {
      "op": "swap",
      "stack_out": [
        "arr_len#0",
        "\"dynamic_box\"",
        "updated_tuple%0#0"
      ]
    },
    "1685": {
      "op": "box_put",
      "stack_out": [
        "arr_len#0"
      ]
    },
    "1686": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "arr_len#0"
      ],
      "stack_out": [
        "arr_len#0",
        "8"
      ]
    },
    "1687": {
      "op": "*",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1688": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%3#0",
        "2"
      ]
    },
    "1689": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1690": {
      "op": "bytec 4 // \"dynamic_box\"",
      "stack_out": [
        "tmp%4#0",
        "\"dynamic_box\""
      ]
    },
    "1692": {
      "op": "swap",
      "stack_out": [
        "\"dynamic_box\"",
        "tmp%4#0"
      ]
    },
    "1693": {
      "op": "box_resize",
      "stack_out": []
    },
    "1694": {
      "op": "bytec 4 // \"dynamic_box\"",
      "stack_out": [
        "\"dynamic_box\""
      ]
    },
    "1696": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "1697": {
      "error": "check self.dynamic_box exists",
      "op": "assert // check self.dynamic_box exists",
      "defined_out": [
        "storage_value%2#0"
      ],
      "stack_out": [
        "storage_value%2#0"
      ]
    },
    "1698": {
      "op": "intc_0 // 0",
      "stack_out": [
        "storage_value%2#0",
        "0"
      ]
    },
    "1699": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1700": {
      "retsub": true,
      "op": "retsub"
    },
    "1701": {
      "subroutine": "examples.box_storage.contract.BoxContract.sum_dynamic_box",
      "params": {},
      "block": "sum_dynamic_box",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1704": {
      "block": "sum_dynamic_box_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0"
      ]
    },
    "1705": {
      "op": "bytec 4 // \"dynamic_box\"",
      "defined_out": [
        "\"dynamic_box\"",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "\"dynamic_box\""
      ]
    },
    "1707": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1708": {
      "error": "check self.dynamic_box exists",
      "op": "assert // check self.dynamic_box exists",
      "defined_out": [
        "storage_value%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0"
      ]
    },
    "1709": {
      "op": "dup",
      "defined_out": [
        "storage_value%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "storage_value%0#0"
      ]
    },
    "1710": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "storage_value%0#0",
        "0"
      ]
    },
    "1711": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0",
        "storage_value%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0"
      ]
    },
    "1712": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "storage_value%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1713": {
      "block": "sum_dynamic_box_for_header@1",
      "stack_in": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1715": {
      "op": "frame_dig 2",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "1717": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "1718": {
      "op": "bz sum_dynamic_box_after_for@4",
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1721": {
      "block": "sum_dynamic_box_for_body@2",
      "stack_in": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "storage_value%0#0"
      ]
    },
    "1723": {
      "op": "extract 2 0",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0"
      ]
    },
    "1726": {
      "op": "frame_dig 3",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1728": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "item_index_internal%0#0",
        "8"
      ]
    },
    "1729": {
      "op": "*",
      "defined_out": [
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "item_index_internal%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1730": {
      "op": "intc_2 // 8",
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "aggregate%array_trimmed%0#0",
        "aggregate%bytes_offset%0#0",
        "8"
      ]
    },
    "1731": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "array_item%0#0",
        "item_index_internal%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_item%0#0"
      ]
    },
    "1732": {
      "op": "btoi",
      "defined_out": [
        "item_index_internal%0#0",
        "storage_value%0#0",
        "val#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "val#0"
      ]
    },
    "1733": {
      "op": "frame_dig 0",
      "defined_out": [
        "item_index_internal%0#0",
        "storage_value%0#0",
        "total#0",
        "val#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "val#0",
        "total#0"
      ]
    },
    "1735": {
      "op": "+",
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1736": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_index_internal%0#0",
        "storage_value%0#0",
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1738": {
      "block": "sum_dynamic_box_for_footer@3",
      "stack_in": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1740": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "1741": {
      "op": "+",
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1742": {
      "op": "frame_bury 3",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1744": {
      "op": "b sum_dynamic_box_for_header@1"
    },
    "1747": {
      "block": "sum_dynamic_box_after_for@4",
      "stack_in": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "total#0"
      ],
      "stack_out": [
        "total#0",
        "storage_value%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "total#0"
      ]
    },
    "1748": {
      "subroutine": "examples.box_storage.contract.BoxContract.slice_box",
      "params": {},
      "block": "slice_box_block@0",
      "stack_in": [],
      "op": "bytec 14 // \"0\"",
      "defined_out": [
        "\"0\""
      ],
      "stack_out": [
        "\"0\""
      ]
    },
    "1750": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1751": {
      "op": "pop",
      "stack_out": []
    },
    "1752": {
      "op": "bytec 14 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "1754": {
      "op": "pushbytes 0x54657374696e672074657374696e6720313233",
      "defined_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ],
      "stack_out": [
        "\"0\"",
        "0x54657374696e672074657374696e6720313233"
      ]
    },
    "1775": {
      "op": "box_put",
      "stack_out": []
    },
    "1776": {
      "op": "bytec 14 // \"0\"",
      "stack_out": [
        "\"0\""
      ]
    },
    "1778": {
      "op": "box_len",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1779": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1780": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1781": {
      "op": "dig 1",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "tmp%0#0 (copy)"
      ]
    },
    "1783": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1784": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "1785": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1786": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "1787": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0",
        "tmp%2#0"
      ]
    },
    "1789": {
      "op": "select",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1790": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0"
      ]
    },
    "1791": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "7"
      ]
    },
    "1793": {
      "op": "dig 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "7",
        "tmp%0#0 (copy)"
      ]
    },
    "1795": {
      "op": "<",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "1796": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0"
      ]
    },
    "1797": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0",
        "tmp%0#0",
        "7"
      ]
    },
    "1799": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%0#0",
        "7",
        "tmp%4#0"
      ]
    },
    "1801": {
      "op": "select",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1802": {
      "op": "dig 1",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1804": {
      "op": "-",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "1805": {
      "op": "bytec 14 // \"0\"",
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0",
        "\"0\""
      ]
    },
    "1807": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%6#0",
        "\"0\"",
        "tmp%3#0"
      ]
    },
    "1809": {
      "op": "uncover 2",
      "stack_out": [
        "\"0\"",
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "1811": {
      "op": "box_extract",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1812": {
      "op": "pushbytes 0x54657374696e67",
      "defined_out": [
        "0x54657374696e67",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0x54657374696e67"
      ]
    },
    "1821": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1822": {
      "op": "assert",
      "stack_out": []
    },
    "1823": {
      "op": "bytec 16 // \"Hello\"",
      "defined_out": [
        "\"Hello\""
      ],
      "stack_out": [
        "\"Hello\""
      ]
    },
    "1825": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "1826": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "1827": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "1830": {
      "op": "bytec 16 // \"Hello\"",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "\"Hello\""
      ]
    },
    "1832": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1833": {
      "op": "bytec_2 // 0x424f585f43",
      "defined_out": [
        "0x424f585f43",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0x424f585f43"
      ]
    },
    "1834": {
      "op": "box_del",
      "stack_out": [
        "tmp%9#0",
        "{box_del}"
      ]
    },
    "1835": {
      "op": "pop",
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1836": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "tmp%9#0",
        "0x424f585f43"
      ]
    },
    "1837": {
      "op": "swap",
      "stack_out": [
        "0x424f585f43",
        "tmp%9#0"
      ]
    },
    "1838": {
      "op": "box_put",
      "stack_out": []
    },
    "1839": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "0x424f585f43"
      ]
    },
    "1840": {
      "op": "box_len",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1841": {
      "op": "pop",
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1842": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "2"
      ]
    },
    "1843": {
      "op": "dig 1",
      "defined_out": [
        "2",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ],
      "stack_out": [
        "tmp%10#0",
        "2",
        "tmp%10#0 (copy)"
      ]
    },
    "1845": {
      "op": "<",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "1846": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "tmp%10#0"
      ]
    },
    "1847": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "1848": {
      "op": "intc_3 // 2",
      "stack_out": [
        "tmp%12#0",
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "2"
      ]
    },
    "1849": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "2",
        "tmp%12#0"
      ]
    },
    "1851": {
      "op": "select",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%13#0"
      ]
    },
    "1852": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "tmp%10#0"
      ]
    },
    "1853": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "tmp%10#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%10#0",
        "10"
      ]
    },
    "1855": {
      "op": "dig 1",
      "stack_out": [
        "tmp%13#0",
        "tmp%10#0",
        "10",
        "tmp%10#0 (copy)"
      ]
    },
    "1857": {
      "op": "<",
      "defined_out": [
        "tmp%10#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%10#0",
        "tmp%14#0"
      ]
    },
    "1858": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%10#0"
      ]
    },
    "1859": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0",
        "tmp%10#0",
        "10"
      ]
    },
    "1861": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%13#0",
        "tmp%10#0",
        "10",
        "tmp%14#0"
      ]
    },
    "1863": {
      "op": "select",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "1864": {
      "op": "dig 1",
      "defined_out": [
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%13#0 (copy)"
      ]
    },
    "1866": {
      "op": "-",
      "defined_out": [
        "tmp%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "1867": {
      "op": "bytec_2 // 0x424f585f43",
      "stack_out": [
        "tmp%13#0",
        "tmp%16#0",
        "0x424f585f43"
      ]
    },
    "1868": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%16#0",
        "0x424f585f43",
        "tmp%13#0"
      ]
    },
    "1870": {
      "op": "uncover 2",
      "stack_out": [
        "0x424f585f43",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "1872": {
      "op": "box_extract",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1873": {
      "op": "bytec 16 // 0x48656c6c6f",
      "defined_out": [
        "0x48656c6c6f",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0x48656c6c6f"
      ]
    },
    "1875": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1876": {
      "op": "assert",
      "stack_out": []
    },
    "1877": {
      "retsub": true,
      "op": "retsub"
    },
    "1878": {
      "subroutine": "examples.box_storage.contract.BoxContract.arc4_box",
      "params": {},
      "block": "arc4_box_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x"
      ],
      "stack_out": [
        "0x"
      ]
    },
    "1879": {
      "op": "bytec 15 // 0x00",
      "defined_out": [
        "0x",
        "0x00"
      ],
      "stack_out": [
        "0x",
        "0x00"
      ]
    },
    "1881": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "1882": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "0x01"
      ]
    },
    "1885": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "1886": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "0x02"
      ]
    },
    "1889": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0"
      ]
    },
    "1890": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "0x03",
        "aggregate%head%2#0"
      ],
      "stack_out": [
        "aggregate%head%2#0",
        "0x03"
      ]
    },
    "1893": {
      "op": "concat",
      "defined_out": [
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0"
      ]
    },
    "1894": {
      "op": "bytec 11 // 0x64",
      "defined_out": [
        "0x64",
        "encoded_array%0#0"
      ],
      "stack_out": [
        "encoded_array%0#0",
        "0x64"
      ]
    },
    "1896": {
      "op": "swap",
      "stack_out": [
        "0x64",
        "encoded_array%0#0"
      ]
    },
    "1897": {
      "op": "box_put",
      "stack_out": []
    },
    "1898": {
      "op": "bytec 11 // 0x64",
      "stack_out": [
        "0x64"
      ]
    },
    "1900": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1901": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "1902": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0"
      ]
    },
    "1903": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "1",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "0",
        "1"
      ]
    },
    "1904": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1905": {
      "op": "intc_1 // 1",
      "stack_out": [
        "storage_value%0#0",
        "aggregate%bytes_offset%0#0",
        "1"
      ]
    },
    "1906": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "1907": {
      "op": "bytec 15 // 0x00",
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x00"
      ]
    },
    "1909": {
      "op": "b==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1910": {
      "op": "assert",
      "stack_out": []
    },
    "1911": {
      "op": "bytec 11 // 0x64",
      "stack_out": [
        "0x64"
      ]
    },
    "1913": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ],
      "stack_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "1914": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "storage_value%1#0"
      ],
      "stack_out": [
        "storage_value%1#0"
      ]
    },
    "1915": {
      "op": "intc_1 // 1",
      "stack_out": [
        "storage_value%1#0",
        "1"
      ]
    },
    "1916": {
      "op": "dup",
      "stack_out": [
        "storage_value%1#0",
        "1",
        "1"
      ]
    },
    "1917": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%1#0",
        "storage_value%1#0"
      ],
      "stack_out": [
        "storage_value%1#0",
        "aggregate%bytes_offset%1#0"
      ]
    },
    "1918": {
      "op": "intc_1 // 1",
      "stack_out": [
        "storage_value%1#0",
        "aggregate%bytes_offset%1#0",
        "1"
      ]
    },
    "1919": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%2#0"
      ],
      "stack_out": [
        "reinterpret_biguint%2#0"
      ]
    },
    "1920": {
      "op": "pushbytes 0x01",
      "stack_out": [
        "reinterpret_biguint%2#0",
        "0x01"
      ]
    },
    "1923": {
      "op": "b==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1924": {
      "op": "assert",
      "stack_out": []
    },
    "1925": {
      "op": "bytec 11 // 0x64",
      "stack_out": [
        "0x64"
      ]
    },
    "1927": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ],
      "stack_out": [
        "aggregate%box_get%4#0",
        "aggregate%box_get%5#0"
      ]
    },
    "1928": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "storage_value%2#0"
      ],
      "stack_out": [
        "storage_value%2#0"
      ]
    },
    "1929": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "storage_value%2#0"
      ],
      "stack_out": [
        "storage_value%2#0",
        "2"
      ]
    },
    "1930": {
      "op": "intc_1 // 1",
      "stack_out": [
        "storage_value%2#0",
        "2",
        "1"
      ]
    },
    "1931": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%2#0",
        "storage_value%2#0"
      ],
      "stack_out": [
        "storage_value%2#0",
        "aggregate%bytes_offset%2#0"
      ]
    },
    "1932": {
      "op": "intc_1 // 1",
      "stack_out": [
        "storage_value%2#0",
        "aggregate%bytes_offset%2#0",
        "1"
      ]
    },
    "1933": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%4#0"
      ],
      "stack_out": [
        "reinterpret_biguint%4#0"
      ]
    },
    "1934": {
      "op": "pushbytes 0x02",
      "stack_out": [
        "reinterpret_biguint%4#0",
        "0x02"
      ]
    },
    "1937": {
      "op": "b==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1938": {
      "op": "assert",
      "stack_out": []
    },
    "1939": {
      "op": "bytec 11 // 0x64",
      "stack_out": [
        "0x64"
      ]
    },
    "1941": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%6#0",
        "aggregate%box_get%7#0"
      ],
      "stack_out": [
        "aggregate%box_get%6#0",
        "aggregate%box_get%7#0"
      ]
    },
    "1942": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "defined_out": [
        "storage_value%3#0"
      ],
      "stack_out": [
        "storage_value%3#0"
      ]
    },
    "1943": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "storage_value%3#0"
      ],
      "stack_out": [
        "storage_value%3#0",
        "3"
      ]
    },
    "1945": {
      "op": "intc_1 // 1",
      "stack_out": [
        "storage_value%3#0",
        "3",
        "1"
      ]
    },
    "1946": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%3#0",
        "storage_value%3#0"
      ],
      "stack_out": [
        "storage_value%3#0",
        "aggregate%bytes_offset%3#0"
      ]
    },
    "1947": {
      "op": "intc_1 // 1",
      "stack_out": [
        "storage_value%3#0",
        "aggregate%bytes_offset%3#0",
        "1"
      ]
    },
    "1948": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%6#0"
      ],
      "stack_out": [
        "reinterpret_biguint%6#0"
      ]
    },
    "1949": {
      "op": "pushbytes 0x03",
      "stack_out": [
        "reinterpret_biguint%6#0",
        "0x03"
      ]
    },
    "1952": {
      "op": "b==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1953": {
      "op": "assert",
      "stack_out": []
    },
    "1954": {
      "retsub": true,
      "op": "retsub"
    },
    "1955": {
      "subroutine": "examples.box_storage.contract.BoxContract.test_box_ref",
      "params": {},
      "block": "test_box_ref_block@0",
      "stack_in": [],
      "op": "bytec_3 // \"blob\"",
      "defined_out": [
        "\"blob\""
      ],
      "stack_out": [
        "\"blob\""
      ]
    },
    "1956": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1957": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1959": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1960": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "1961": {
      "op": "bytec_3 // 0x626c6f62",
      "defined_out": [
        "0x626c6f62"
      ],
      "stack_out": [
        "0x626c6f62"
      ]
    },
    "1962": {
      "op": "box_len",
      "defined_out": [
        "_%1#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "_%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1963": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "1965": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1966": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "1967": {
      "op": "bytec_3 // 0x626c6f62",
      "stack_out": [
        "0x626c6f62"
      ]
    },
    "1968": {
      "op": "box_len",
      "defined_out": [
        "_%2#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "_%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1969": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "1971": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1972": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "1973": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1974": {
      "op": "box_len",
      "defined_out": [
        "_%3#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "_%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1975": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%3#0"
      ]
    },
    "1977": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1978": {
      "error": "no data",
      "op": "assert // no data",
      "stack_out": []
    },
    "1979": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1980": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "\"blob\"",
        "32"
      ],
      "stack_out": [
        "\"blob\"",
        "32"
      ]
    },
    "1982": {
      "op": "box_create",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1983": {
      "op": "assert",
      "stack_out": []
    },
    "1984": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "1985": {
      "op": "box_len",
      "defined_out": [
        "_%4#0",
        "maybe_exists%4#0"
      ],
      "stack_out": [
        "_%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1986": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%4#0"
      ]
    },
    "1988": {
      "error": "has data",
      "op": "assert // has data",
      "stack_out": []
    },
    "1989": {
      "op": "txn Sender",
      "defined_out": [
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0"
      ]
    },
    "1991": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "1993": {
      "op": "swap",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "1994": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "1995": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0"
      ]
    },
    "1996": {
      "op": "dig 2",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "sender_bytes#0",
        "sender_bytes#0 (copy)"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0",
        "sender_bytes#0 (copy)"
      ]
    },
    "1998": {
      "op": "box_replace",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "1999": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "2000": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "\"blob\"",
        "8000",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "8000"
      ]
    },
    "2003": {
      "op": "box_resize",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "2004": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "2005": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0"
      ]
    },
    "2006": {
      "op": "dup",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0",
        "0"
      ]
    },
    "2007": {
      "op": "dig 4",
      "defined_out": [
        "\"blob\"",
        "0",
        "app_address#0",
        "app_address#0 (copy)",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0",
        "0",
        "app_address#0 (copy)"
      ]
    },
    "2009": {
      "op": "box_splice",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "2010": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "2011": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "\"blob\"",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "64"
      ]
    },
    "2013": {
      "op": "bytec 12 // 0x68656c6c6f",
      "defined_out": [
        "\"blob\"",
        "0x68656c6c6f",
        "64",
        "app_address#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "64",
        "0x68656c6c6f"
      ]
    },
    "2015": {
      "op": "box_replace",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "2016": {
      "op": "bytec 12 // 0x68656c6c6f",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "0x68656c6c6f"
      ]
    },
    "2018": {
      "op": "len",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%7#0"
      ]
    },
    "2019": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%7#0",
        "64"
      ]
    },
    "2021": {
      "op": "+",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%8#0"
      ]
    },
    "2022": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%8#0",
        "\"blob\""
      ]
    },
    "2023": {
      "op": "intc_0 // 0",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%8#0",
        "\"blob\"",
        "0"
      ]
    },
    "2024": {
      "op": "uncover 2",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0",
        "tmp%8#0"
      ]
    },
    "2026": {
      "op": "box_extract",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "prefix#0"
      ]
    },
    "2027": {
      "op": "dig 2",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "prefix#0",
        "app_address#0 (copy)"
      ]
    },
    "2029": {
      "op": "dig 2",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "prefix#0",
        "app_address#0 (copy)",
        "sender_bytes#0 (copy)"
      ]
    },
    "2031": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "prefix#0",
        "tmp%10#0"
      ]
    },
    "2032": {
      "op": "bytec 12 // 0x68656c6c6f",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "prefix#0",
        "tmp%10#0",
        "0x68656c6c6f"
      ]
    },
    "2034": {
      "op": "concat",
      "defined_out": [
        "app_address#0",
        "prefix#0",
        "sender_bytes#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "prefix#0",
        "tmp%11#0"
      ]
    },
    "2035": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%12#0"
      ]
    },
    "2036": {
      "op": "assert",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "2037": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "2038": {
      "op": "box_del",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%13#0"
      ]
    },
    "2039": {
      "op": "assert",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "2040": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "2041": {
      "op": "dup",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\"",
        "0x626c6f62"
      ]
    },
    "2042": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%14#0"
      ]
    },
    "2043": {
      "op": "assert",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "2044": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "2045": {
      "op": "box_get",
      "defined_out": [
        "app_address#0",
        "exists#0",
        "sender_bytes#0",
        "value#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "value#0",
        "exists#0"
      ]
    },
    "2046": {
      "op": "!",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%15#0",
        "value#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "value#0",
        "tmp%15#0"
      ]
    },
    "2047": {
      "op": "assert",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "value#0"
      ]
    },
    "2048": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "app_address#0",
        "sender_bytes#0",
        "value#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "value#0",
        "0x"
      ]
    },
    "2049": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%16#0"
      ]
    },
    "2050": {
      "op": "assert",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "2051": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "\"blob\""
      ]
    },
    "2052": {
      "op": "box_get",
      "defined_out": [
        "app_address#0",
        "maybe_exists%6#0",
        "maybe_value%1#0",
        "sender_bytes#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "maybe_value%1#0",
        "maybe_exists%6#0"
      ]
    },
    "2053": {
      "op": "swap",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "maybe_exists%6#0",
        "maybe_value%1#0"
      ]
    },
    "2054": {
      "op": "dig 2",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "maybe_exists%6#0",
        "maybe_value%1#0",
        "sender_bytes#0 (copy)"
      ]
    },
    "2056": {
      "op": "swap",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "maybe_exists%6#0",
        "sender_bytes#0 (copy)",
        "maybe_value%1#0"
      ]
    },
    "2057": {
      "op": "uncover 2",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "sender_bytes#0 (copy)",
        "maybe_value%1#0",
        "maybe_exists%6#0"
      ]
    },
    "2059": {
      "op": "select",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "state_get%0#0"
      ]
    },
    "2060": {
      "op": "dig 1",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "state_get%0#0",
        "sender_bytes#0 (copy)"
      ]
    },
    "2062": {
      "op": "==",
      "defined_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "app_address#0",
        "sender_bytes#0",
        "tmp%17#0"
      ]
    },
    "2063": {
      "op": "assert",
      "stack_out": [
        "app_address#0",
        "sender_bytes#0"
      ]
    },
    "2064": {
      "op": "swap",
      "stack_out": [
        "sender_bytes#0",
        "app_address#0"
      ]
    },
    "2065": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "2066": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "tmp%18#0",
        "\"blob\""
      ]
    },
    "2067": {
      "op": "swap",
      "stack_out": [
        "\"blob\"",
        "tmp%18#0"
      ]
    },
    "2068": {
      "op": "box_put",
      "stack_out": []
    },
    "2069": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "2070": {
      "op": "box_len",
      "defined_out": [
        "_%5#0",
        "maybe_exists%7#0"
      ],
      "stack_out": [
        "_%5#0",
        "maybe_exists%7#0"
      ]
    },
    "2071": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%7#0"
      ]
    },
    "2073": {
      "error": "Blob exists",
      "op": "assert // Blob exists",
      "stack_out": []
    },
    "2074": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "2075": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "2076": {
      "error": "check BoxRef exists",
      "op": "assert // check BoxRef exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "2077": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "value%0#0",
        "64"
      ]
    },
    "2079": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "2080": {
      "op": "assert",
      "stack_out": []
    },
    "2081": {
      "op": "bytec_3 // \"blob\"",
      "stack_out": [
        "\"blob\""
      ]
    },
    "2082": {
      "callsub": "examples.box_storage.contract.get_box_ref_length",
      "op": "callsub get_box_ref_length",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "2085": {
      "op": "pushint 64 // 64",
      "stack_out": [
        "tmp%20#0",
        "64"
      ]
    },
    "2087": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "2088": {
      "op": "assert",
      "stack_out": []
    },
    "2089": {
      "op": "bytec 17 // \"box_ref\"",
      "defined_out": [
        "\"box_ref\""
      ],
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "2091": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "\"box_ref\"",
        "32"
      ]
    },
    "2093": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "2094": {
      "op": "pop",
      "stack_out": []
    },
    "2095": {
      "op": "bytec 17 // \"box_ref\"",
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "2097": {
      "op": "box_len",
      "defined_out": [
        "_%6#0",
        "maybe_exists%8#0"
      ],
      "stack_out": [
        "_%6#0",
        "maybe_exists%8#0"
      ]
    },
    "2098": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%8#0"
      ]
    },
    "2100": {
      "error": "has data",
      "op": "assert // has data",
      "stack_out": []
    },
    "2101": {
      "op": "bytec 17 // \"box_ref\"",
      "stack_out": [
        "\"box_ref\""
      ]
    },
    "2103": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2104": {
      "op": "pop",
      "stack_out": []
    },
    "2105": {
      "retsub": true,
      "op": "retsub"
    },
    "2106": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_test",
      "params": {},
      "block": "box_map_test_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2107": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2108": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"\""
      ]
    },
    "2109": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%0#0"
      ]
    },
    "2110": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2111": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "2112": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "2113": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2114": {
      "op": "bytec 18 // \"Hmmmmm\"",
      "defined_out": [
        "\"Hmmmmm\"",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "\"Hmmmmm\""
      ]
    },
    "2116": {
      "op": "box_put",
      "stack_out": []
    },
    "2117": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2118": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "2119": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "encoded_value%1#0",
        "\"\""
      ]
    },
    "2120": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%1#0"
      ]
    },
    "2121": {
      "op": "concat",
      "defined_out": [
        "box_0#0"
      ],
      "stack_out": [
        "box_0#0"
      ]
    },
    "2122": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_0#0",
        "0"
      ]
    },
    "2123": {
      "op": "itob",
      "defined_out": [
        "box_0#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "box_0#0",
        "encoded_value%2#0"
      ]
    },
    "2124": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "box_0#0",
        "encoded_value%2#0",
        "\"\""
      ]
    },
    "2125": {
      "op": "swap",
      "stack_out": [
        "box_0#0",
        "\"\"",
        "encoded_value%2#0"
      ]
    },
    "2126": {
      "op": "concat",
      "defined_out": [
        "box_0#0",
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "box_0#0",
        "box_prefixed_key%2#0"
      ]
    },
    "2127": {
      "op": "box_len",
      "defined_out": [
        "box_0#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "box_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "2128": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "box_0#0",
        "value%0#0"
      ]
    },
    "2129": {
      "op": "bytec 18 // \"Hmmmmm\"",
      "stack_out": [
        "box_0#0",
        "value%0#0",
        "\"Hmmmmm\""
      ]
    },
    "2131": {
      "op": "len",
      "defined_out": [
        "box_0#0",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "box_0#0",
        "value%0#0",
        "tmp%0#0"
      ]
    },
    "2132": {
      "op": "==",
      "defined_out": [
        "box_0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_0#0",
        "tmp%1#0"
      ]
    },
    "2133": {
      "op": "assert",
      "stack_out": [
        "box_0#0"
      ]
    },
    "2134": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_0#0",
        "0"
      ]
    },
    "2135": {
      "op": "itob",
      "defined_out": [
        "box_0#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "box_0#0",
        "encoded_value%3#0"
      ]
    },
    "2136": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "box_0#0",
        "encoded_value%3#0",
        "\"\""
      ]
    },
    "2137": {
      "op": "swap",
      "stack_out": [
        "box_0#0",
        "\"\"",
        "encoded_value%3#0"
      ]
    },
    "2138": {
      "op": "concat",
      "defined_out": [
        "box_0#0",
        "box_prefixed_key%3#0"
      ],
      "stack_out": [
        "box_0#0",
        "box_prefixed_key%3#0"
      ]
    },
    "2139": {
      "op": "box_len",
      "defined_out": [
        "box_0#0",
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "box_0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "2140": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "box_0#0",
        "value%1#0"
      ]
    },
    "2141": {
      "op": "swap",
      "stack_out": [
        "value%1#0",
        "box_0#0"
      ]
    },
    "2142": {
      "op": "box_len",
      "defined_out": [
        "check%2#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%1#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "2143": {
      "error": "check Box exists",
      "op": "assert // check Box exists",
      "stack_out": [
        "value%1#0",
        "value%2#0"
      ]
    },
    "2144": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2145": {
      "op": "assert",
      "stack_out": []
    },
    "2146": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2147": {
      "op": "itob",
      "defined_out": [
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0"
      ]
    },
    "2148": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "encoded_value%4#0",
        "\"\""
      ]
    },
    "2149": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%4#0"
      ]
    },
    "2150": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%4#0"
      ]
    },
    "2151": {
      "op": "box_len",
      "defined_out": [
        "check%3#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "check%3#0"
      ]
    },
    "2152": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "stack_out": [
        "value%3#0"
      ]
    },
    "2153": {
      "op": "bytec 18 // \"Hmmmmm\"",
      "stack_out": [
        "value%3#0",
        "\"Hmmmmm\""
      ]
    },
    "2155": {
      "op": "len",
      "defined_out": [
        "tmp%3#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "tmp%3#0"
      ]
    },
    "2156": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2157": {
      "op": "assert",
      "stack_out": []
    },
    "2158": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "2159": {
      "op": "itob",
      "defined_out": [
        "encoded_value%5#0"
      ],
      "stack_out": [
        "encoded_value%5#0"
      ]
    },
    "2160": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "encoded_value%5#0",
        "\"\""
      ]
    },
    "2161": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%5#0"
      ]
    },
    "2162": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%5#0"
      ]
    },
    "2163": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2164": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "2165": {
      "op": "bytec 20 // \"default\"",
      "defined_out": [
        "\"default\"",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "\"default\""
      ]
    },
    "2167": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "\"default\"",
        "maybe_value%0#0"
      ]
    },
    "2168": {
      "op": "uncover 2",
      "stack_out": [
        "\"default\"",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2170": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "2171": {
      "op": "bytec 20 // \"default\"",
      "stack_out": [
        "state_get%0#0",
        "\"default\""
      ]
    },
    "2173": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "2174": {
      "op": "assert",
      "stack_out": []
    },
    "2175": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "2176": {
      "op": "itob",
      "defined_out": [
        "encoded_value%6#0"
      ],
      "stack_out": [
        "encoded_value%6#0"
      ]
    },
    "2177": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "encoded_value%6#0",
        "\"\""
      ]
    },
    "2178": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%6#0"
      ]
    },
    "2179": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%6#0"
      ],
      "stack_out": [
        "box_prefixed_key%6#0"
      ]
    },
    "2180": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2181": {
      "op": "bury 1",
      "defined_out": [
        "exists#0"
      ],
      "stack_out": [
        "exists#0"
      ]
    },
    "2183": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "2184": {
      "op": "assert",
      "stack_out": []
    },
    "2185": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2186": {
      "op": "itob",
      "defined_out": [
        "encoded_value%7#0"
      ],
      "stack_out": [
        "encoded_value%7#0"
      ]
    },
    "2187": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "encoded_value%7#0",
        "\"\""
      ]
    },
    "2188": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%7#0"
      ]
    },
    "2189": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%7#0"
      ],
      "stack_out": [
        "box_prefixed_key%7#0"
      ]
    },
    "2190": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%2#0"
      ]
    },
    "2191": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "2193": {
      "op": "assert",
      "stack_out": []
    },
    "2194": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "\"\""
      ]
    },
    "2195": {
      "op": "dup",
      "defined_out": [
        "\"\"",
        "0x"
      ],
      "stack_out": [
        "\"\"",
        "0x"
      ]
    },
    "2196": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "2197": {
      "op": "assert",
      "stack_out": []
    },
    "2198": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "2199": {
      "op": "itob",
      "defined_out": [
        "encoded_value%8#0"
      ],
      "stack_out": [
        "encoded_value%8#0"
      ]
    },
    "2200": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_value%8#0",
        "0x"
      ]
    },
    "2201": {
      "op": "swap",
      "stack_out": [
        "0x",
        "encoded_value%8#0"
      ]
    },
    "2202": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%8#0"
      ],
      "stack_out": [
        "box_prefixed_key%8#0"
      ]
    },
    "2203": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%8#0",
        "box_prefixed_key%8#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%8#0",
        "box_prefixed_key%8#0 (copy)"
      ]
    },
    "2204": {
      "op": "box_del",
      "stack_out": [
        "box_prefixed_key%8#0",
        "{box_del}"
      ]
    },
    "2205": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%8#0"
      ]
    },
    "2206": {
      "op": "bytec 12 // \"hello\"",
      "defined_out": [
        "\"hello\"",
        "box_prefixed_key%8#0"
      ],
      "stack_out": [
        "box_prefixed_key%8#0",
        "\"hello\""
      ]
    },
    "2208": {
      "op": "box_put",
      "stack_out": []
    },
    "2209": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "0x"
      ]
    },
    "2210": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0x",
        "0"
      ]
    },
    "2211": {
      "callsub": "examples.box_storage.contract.get_box_map_value_from_key_plus_1",
      "op": "callsub get_box_map_value_from_key_plus_1",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "2214": {
      "op": "bytec 12 // \"hello\"",
      "stack_out": [
        "tmp%8#0",
        "\"hello\""
      ]
    },
    "2216": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "2217": {
      "op": "assert",
      "stack_out": []
    },
    "2218": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "2219": {
      "op": "itob",
      "defined_out": [
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0"
      ]
    },
    "2220": {
      "op": "bytec_1 // 0x",
      "stack_out": [
        "encoded_value%9#0",
        "0x"
      ]
    },
    "2221": {
      "op": "swap",
      "stack_out": [
        "0x",
        "encoded_value%9#0"
      ]
    },
    "2222": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%9#0"
      ],
      "stack_out": [
        "box_prefixed_key%9#0"
      ]
    },
    "2223": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "2224": {
      "op": "pop",
      "stack_out": []
    },
    "2225": {
      "retsub": true,
      "op": "retsub"
    },
    "2226": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_set",
      "params": {
        "key#0": "uint64",
        "value#0": "bytes"
      },
      "block": "box_map_set",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2229": {
      "block": "box_map_set_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "2231": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2232": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"\""
      ]
    },
    "2233": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%0#0"
      ]
    },
    "2234": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2235": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "2236": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "2237": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2238": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "value#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "value#0 (copy)"
      ]
    },
    "2240": {
      "op": "box_put",
      "stack_out": []
    },
    "2241": {
      "retsub": true,
      "op": "retsub"
    },
    "2242": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_get",
      "params": {
        "key#0": "uint64"
      },
      "block": "box_map_get",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2245": {
      "block": "box_map_get_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "2247": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2248": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"\""
      ]
    },
    "2249": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%0#0"
      ]
    },
    "2250": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2251": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "2252": {
      "error": "check self.box_map entry exists",
      "op": "assert // check self.box_map entry exists",
      "defined_out": [
        "storage_value%0#0"
      ],
      "stack_out": [
        "storage_value%0#0"
      ]
    },
    "2253": {
      "retsub": true,
      "op": "retsub"
    },
    "2254": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_del",
      "params": {
        "key#0": "uint64"
      },
      "block": "box_map_del",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2257": {
      "block": "box_map_del_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "2259": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2260": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"\""
      ]
    },
    "2261": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%0#0"
      ]
    },
    "2262": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2263": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "2264": {
      "op": "pop",
      "stack_out": []
    },
    "2265": {
      "retsub": true,
      "op": "retsub"
    },
    "2266": {
      "subroutine": "examples.box_storage.contract.BoxContract.box_map_exists",
      "params": {
        "key#0": "uint64"
      },
      "block": "box_map_exists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2269": {
      "block": "box_map_exists_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0 (copy)"
      ]
    },
    "2271": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "2272": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"\""
      ]
    },
    "2273": {
      "op": "swap",
      "stack_out": [
        "\"\"",
        "encoded_value%0#0"
      ]
    },
    "2274": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "2275": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2276": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "2278": {
      "retsub": true,
      "op": "retsub"
    },
    "2279": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "2281": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "2282": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2283": {
      "op": "bz approval_program_bare_routing@32",
      "stack_out": []
    },
    "2286": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2289": {
      "op": "pushbytes 0x7d37296e // method \"set_boxes(uint64,byte[],string)void\"",
      "defined_out": [
        "Method(set_boxes(uint64,byte[],string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)"
      ]
    },
    "2295": {
      "op": "pushbytes 0x33325d3d // method \"check_keys()void\"",
      "defined_out": [
        "Method(check_keys()void)",
        "Method(set_boxes(uint64,byte[],string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)"
      ]
    },
    "2301": {
      "op": "pushbytes 0x0199408d // method \"create_many_ints()void\"",
      "defined_out": [
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_boxes(uint64,byte[],string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)"
      ]
    },
    "2307": {
      "op": "pushbytes 0x772059ca // method \"set_many_ints(uint64,uint64)void\"",
      "defined_out": [
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)"
      ]
    },
    "2313": {
      "op": "pushbytes 0x01263df6 // method \"sum_many_ints()uint64\"",
      "defined_out": [
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)"
      ]
    },
    "2319": {
      "op": "pushbytes 0xd566c632 // method \"delete_boxes()void\"",
      "defined_out": [
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)"
      ]
    },
    "2325": {
      "op": "pushbytes 0xfabcb885 // method \"indirect_extract_and_replace()void\"",
      "defined_out": [
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)"
      ]
    },
    "2331": {
      "op": "pushbytes 0xa6174812 // method \"read_boxes()(uint64,byte[],string,uint64)\"",
      "defined_out": [
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))"
      ]
    },
    "2337": {
      "op": "pushbytes 0xf13dd937 // method \"boxes_exist()(bool,bool,bool,bool)\"",
      "defined_out": [
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))"
      ]
    },
    "2343": {
      "op": "pushbytes 0x5ab60f2e // method \"create_dynamic_arr_struct()void\"",
      "defined_out": [
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)"
      ]
    },
    "2349": {
      "op": "pushbytes 0xf07a0064 // method \"delete_dynamic_arr_struct()void\"",
      "defined_out": [
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)"
      ]
    },
    "2355": {
      "op": "pushbytes 0x78f9af3f // method \"append_dynamic_arr_struct(uint64)uint64\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)"
      ]
    },
    "2361": {
      "op": "pushbytes 0x5cbb9dcc // method \"pop_dynamic_arr_struct(uint64)uint64\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)"
      ]
    },
    "2367": {
      "op": "pushbytes 0x0d22b441 // method \"sum_dynamic_arr_struct()uint64\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)"
      ]
    },
    "2373": {
      "op": "pushbytes 0x41427cd1 // method \"create_dynamic_box()void\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)"
      ]
    },
    "2379": {
      "op": "pushbytes 0x2a141f6c // method \"delete_dynamic_box()void\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)"
      ]
    },
    "2385": {
      "op": "pushbytes 0x7e843744 // method \"append_dynamic_box(uint64)uint64\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)"
      ]
    },
    "2391": {
      "op": "pushbytes 0x25600b57 // method \"pop_dynamic_box(uint64)uint64\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)"
      ]
    },
    "2397": {
      "op": "pushbytes 0x29ea595d // method \"sum_dynamic_box()uint64\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)"
      ]
    },
    "2403": {
      "op": "pushbytes 0x04ef4971 // method \"slice_box()void\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(slice_box()void)"
      ]
    },
    "2409": {
      "op": "pushbytes 0x23ecb32c // method \"arc4_box()void\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(arc4_box()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)"
      ]
    },
    "2415": {
      "op": "pushbytes 0xeef75816 // method \"test_box_ref()void\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(arc4_box()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)"
      ]
    },
    "2421": {
      "op": "pushbytes 0xb532913a // method \"box_map_test()void\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(arc4_box()void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)"
      ]
    },
    "2427": {
      "op": "pushbytes 0xc29f1669 // method \"box_map_set(uint64,string)void\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(arc4_box()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)"
      ]
    },
    "2433": {
      "op": "pushbytes 0x9c888c09 // method \"box_map_get(uint64)string\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(arc4_box()void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)"
      ]
    },
    "2439": {
      "op": "pushbytes 0xe6f68506 // method \"box_map_del(uint64)void\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(arc4_box()void)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)"
      ]
    },
    "2445": {
      "op": "pushbytes 0x8ee2c364 // method \"box_map_exists(uint64)bool\"",
      "defined_out": [
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(arc4_box()void)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_test()void)",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(check_keys()void)",
        "Method(create_dynamic_arr_struct()void)",
        "Method(create_dynamic_box()void)",
        "Method(create_many_ints()void)",
        "Method(delete_boxes()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(delete_dynamic_box()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(slice_box()void)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(sum_many_ints()uint64)",
        "Method(test_box_ref()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)"
      ]
    },
    "2451": {
      "op": "uncover 27",
      "stack_out": [
        "Method(set_boxes(uint64,byte[],string)void)",
        "Method(check_keys()void)",
        "Method(create_many_ints()void)",
        "Method(set_many_ints(uint64,uint64)void)",
        "Method(sum_many_ints()uint64)",
        "Method(delete_boxes()void)",
        "Method(indirect_extract_and_replace()void)",
        "Method(read_boxes()(uint64,byte[],string,uint64))",
        "Method(boxes_exist()(bool,bool,bool,bool))",
        "Method(create_dynamic_arr_struct()void)",
        "Method(delete_dynamic_arr_struct()void)",
        "Method(append_dynamic_arr_struct(uint64)uint64)",
        "Method(pop_dynamic_arr_struct(uint64)uint64)",
        "Method(sum_dynamic_arr_struct()uint64)",
        "Method(create_dynamic_box()void)",
        "Method(delete_dynamic_box()void)",
        "Method(append_dynamic_box(uint64)uint64)",
        "Method(pop_dynamic_box(uint64)uint64)",
        "Method(sum_dynamic_box()uint64)",
        "Method(slice_box()void)",
        "Method(arc4_box()void)",
        "Method(test_box_ref()void)",
        "Method(box_map_test()void)",
        "Method(box_map_set(uint64,string)void)",
        "Method(box_map_get(uint64)string)",
        "Method(box_map_del(uint64)void)",
        "Method(box_map_exists(uint64)bool)",
        "tmp%2#0"
      ]
    },
    "2453": {
      "op": "match approval_program_set_boxes_route@3 approval_program_check_keys_route@4 approval_program_create_many_ints_route@5 approval_program_set_many_ints_route@6 approval_program_sum_many_ints_route@7 approval_program_delete_boxes_route@8 approval_program_indirect_extract_and_replace_route@9 approval_program_read_boxes_route@10 approval_program_boxes_exist_route@11 approval_program_create_dynamic_arr_struct_route@12 approval_program_delete_dynamic_arr_struct_route@13 approval_program_append_dynamic_arr_struct_route@14 approval_program_pop_dynamic_arr_struct_route@15 approval_program_sum_dynamic_arr_struct_route@16 approval_program_create_dynamic_box_route@17 approval_program_delete_dynamic_box_route@18 approval_program_append_dynamic_box_route@19 approval_program_pop_dynamic_box_route@20 approval_program_sum_dynamic_box_route@21 approval_program_slice_box_route@22 approval_program_arc4_box_route@23 approval_program_test_box_ref_route@24 approval_program_box_map_test_route@25 approval_program_box_map_set_route@26 approval_program_box_map_get_route@27 approval_program_box_map_del_route@28 approval_program_box_map_exists_route@29",
      "stack_out": []
    },
    "2509": {
      "block": "approval_program_after_if_else@38",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2510": {
      "block": "approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "2511": {
      "block": "approval_program_box_map_exists_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "2513": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0",
        "NoOp"
      ]
    },
    "2514": {
      "op": "==",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "2515": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2516": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0"
      ]
    },
    "2518": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%156#0"
      ],
      "stack_out": [
        "tmp%156#0",
        "0"
      ]
    },
    "2519": {
      "op": "!=",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "2520": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2521": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "2524": {
      "op": "btoi",
      "defined_out": [
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%158#0"
      ]
    },
    "2525": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_exists",
      "op": "callsub box_map_exists",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "2528": {
      "op": "bytec 15 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0",
        "0x00"
      ]
    },
    "2530": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%159#0",
        "0x00",
        "0"
      ]
    },
    "2531": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%159#0"
      ]
    },
    "2533": {
      "op": "setbit",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "2534": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0",
        "0x151f7c75"
      ]
    },
    "2536": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%160#0"
      ]
    },
    "2537": {
      "op": "concat",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "2538": {
      "op": "log",
      "stack_out": []
    },
    "2539": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2540": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2543": {
      "block": "approval_program_box_map_del_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0"
      ]
    },
    "2545": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%149#0"
      ],
      "stack_out": [
        "tmp%149#0",
        "NoOp"
      ]
    },
    "2546": {
      "op": "==",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "2547": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2548": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0"
      ]
    },
    "2550": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%151#0",
        "0"
      ]
    },
    "2551": {
      "op": "!=",
      "defined_out": [
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%152#0"
      ]
    },
    "2552": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2553": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "2556": {
      "op": "btoi",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "2557": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_del",
      "op": "callsub box_map_del",
      "stack_out": []
    },
    "2560": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2561": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2564": {
      "block": "approval_program_box_map_get_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "2566": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0",
        "NoOp"
      ]
    },
    "2567": {
      "op": "==",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "2568": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2569": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "2571": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0",
        "0"
      ]
    },
    "2572": {
      "op": "!=",
      "defined_out": [
        "tmp%144#0"
      ],
      "stack_out": [
        "tmp%144#0"
      ]
    },
    "2573": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2574": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%8#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "2577": {
      "op": "btoi",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "2578": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_get",
      "op": "callsub box_map_get",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "2581": {
      "op": "dup",
      "defined_out": [
        "tmp%146#0",
        "tmp%146#0 (copy)"
      ],
      "stack_out": [
        "tmp%146#0",
        "tmp%146#0 (copy)"
      ]
    },
    "2582": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0",
        "aggregate%length%1#0"
      ]
    },
    "2583": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%3#0",
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0",
        "aggregate%as_bytes%3#0"
      ]
    },
    "2584": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "2587": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%1#0",
        "tmp%146#0"
      ]
    },
    "2588": {
      "op": "concat",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "2589": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0",
        "0x151f7c75"
      ]
    },
    "2591": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%147#0"
      ]
    },
    "2592": {
      "op": "concat",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "2593": {
      "op": "log",
      "stack_out": []
    },
    "2594": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2595": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2598": {
      "block": "approval_program_box_map_set_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "2600": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0",
        "NoOp"
      ]
    },
    "2601": {
      "op": "==",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "2602": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2603": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "2605": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0",
        "0"
      ]
    },
    "2606": {
      "op": "!=",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "2607": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2608": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "2611": {
      "op": "btoi",
      "defined_out": [
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0"
      ]
    },
    "2612": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%1#0",
        "tmp%139#0"
      ],
      "stack_out": [
        "tmp%139#0",
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "2615": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%139#0",
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%139#0",
        "tmp%140#0"
      ]
    },
    "2618": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_set",
      "op": "callsub box_map_set",
      "stack_out": []
    },
    "2621": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2622": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2625": {
      "block": "approval_program_box_map_test_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "2627": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0",
        "NoOp"
      ]
    },
    "2628": {
      "op": "==",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "2629": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2630": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "2632": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0",
        "0"
      ]
    },
    "2633": {
      "op": "!=",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "2634": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2635": {
      "callsub": "examples.box_storage.contract.BoxContract.box_map_test",
      "op": "callsub box_map_test"
    },
    "2638": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2639": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2642": {
      "block": "approval_program_test_box_ref_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "2644": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0",
        "NoOp"
      ]
    },
    "2645": {
      "op": "==",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "2646": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2647": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "2649": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0",
        "0"
      ]
    },
    "2650": {
      "op": "!=",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "2651": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2652": {
      "callsub": "examples.box_storage.contract.BoxContract.test_box_ref",
      "op": "callsub test_box_ref"
    },
    "2655": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2656": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2659": {
      "block": "approval_program_arc4_box_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "2661": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0",
        "NoOp"
      ]
    },
    "2662": {
      "op": "==",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "2663": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2664": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "2666": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0",
        "0"
      ]
    },
    "2667": {
      "op": "!=",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "2668": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2669": {
      "callsub": "examples.box_storage.contract.BoxContract.arc4_box",
      "op": "callsub arc4_box"
    },
    "2672": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2673": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2676": {
      "block": "approval_program_slice_box_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "2678": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0",
        "NoOp"
      ]
    },
    "2679": {
      "op": "==",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "2680": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2681": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "2683": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0",
        "0"
      ]
    },
    "2684": {
      "op": "!=",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "2685": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2686": {
      "callsub": "examples.box_storage.contract.BoxContract.slice_box",
      "op": "callsub slice_box"
    },
    "2689": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2690": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2693": {
      "block": "approval_program_sum_dynamic_box_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "2695": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0",
        "NoOp"
      ]
    },
    "2696": {
      "op": "==",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "2697": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2698": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "2700": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0",
        "0"
      ]
    },
    "2701": {
      "op": "!=",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "2702": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2703": {
      "callsub": "examples.box_storage.contract.BoxContract.sum_dynamic_box",
      "op": "callsub sum_dynamic_box",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "2706": {
      "op": "itob",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "2707": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0",
        "0x151f7c75"
      ]
    },
    "2709": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%117#0"
      ]
    },
    "2710": {
      "op": "concat",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "2711": {
      "op": "log",
      "stack_out": []
    },
    "2712": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2713": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2716": {
      "block": "approval_program_pop_dynamic_box_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "2718": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0",
        "NoOp"
      ]
    },
    "2719": {
      "op": "==",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "2720": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2721": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "2723": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0",
        "0"
      ]
    },
    "2724": {
      "op": "!=",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "2725": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2726": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "2729": {
      "op": "btoi",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "2730": {
      "callsub": "examples.box_storage.contract.BoxContract.pop_dynamic_box",
      "op": "callsub pop_dynamic_box",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "2733": {
      "op": "itob",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "2734": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0",
        "0x151f7c75"
      ]
    },
    "2736": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%110#0"
      ]
    },
    "2737": {
      "op": "concat",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "2738": {
      "op": "log",
      "stack_out": []
    },
    "2739": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2740": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2743": {
      "block": "approval_program_append_dynamic_box_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "2745": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0",
        "NoOp"
      ]
    },
    "2746": {
      "op": "==",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "2747": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2748": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "2750": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0",
        "0"
      ]
    },
    "2751": {
      "op": "!=",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "2752": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2753": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "2756": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "2757": {
      "callsub": "examples.box_storage.contract.BoxContract.append_dynamic_box",
      "op": "callsub append_dynamic_box",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "2760": {
      "op": "itob",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "2761": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0",
        "0x151f7c75"
      ]
    },
    "2763": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%102#0"
      ]
    },
    "2764": {
      "op": "concat",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "2765": {
      "op": "log",
      "stack_out": []
    },
    "2766": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2767": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2770": {
      "block": "approval_program_delete_dynamic_box_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "2772": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0",
        "NoOp"
      ]
    },
    "2773": {
      "op": "==",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "2774": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2775": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "2777": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "0"
      ]
    },
    "2778": {
      "op": "!=",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "2779": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2780": {
      "callsub": "examples.box_storage.contract.BoxContract.delete_dynamic_box",
      "op": "callsub delete_dynamic_box"
    },
    "2783": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2784": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2787": {
      "block": "approval_program_create_dynamic_box_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "2789": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0",
        "NoOp"
      ]
    },
    "2790": {
      "op": "==",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "2791": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2792": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "2794": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0",
        "0"
      ]
    },
    "2795": {
      "op": "!=",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "2796": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2797": {
      "callsub": "examples.box_storage.contract.BoxContract.create_dynamic_box",
      "op": "callsub create_dynamic_box"
    },
    "2800": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2801": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2804": {
      "block": "approval_program_sum_dynamic_arr_struct_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "2806": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "NoOp"
      ]
    },
    "2807": {
      "op": "==",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "2808": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2809": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "2811": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0",
        "0"
      ]
    },
    "2812": {
      "op": "!=",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "2813": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2814": {
      "callsub": "examples.box_storage.contract.BoxContract.sum_dynamic_arr_struct",
      "op": "callsub sum_dynamic_arr_struct",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "2817": {
      "op": "itob",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "2818": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0",
        "0x151f7c75"
      ]
    },
    "2820": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%86#0"
      ]
    },
    "2821": {
      "op": "concat",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "2822": {
      "op": "log",
      "stack_out": []
    },
    "2823": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2824": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2827": {
      "block": "approval_program_pop_dynamic_arr_struct_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "2829": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0",
        "NoOp"
      ]
    },
    "2830": {
      "op": "==",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "2831": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2832": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "2834": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "0"
      ]
    },
    "2835": {
      "op": "!=",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "2836": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2837": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "2840": {
      "op": "btoi",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "2841": {
      "callsub": "examples.box_storage.contract.BoxContract.pop_dynamic_arr_struct",
      "op": "callsub pop_dynamic_arr_struct",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "2844": {
      "op": "itob",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "2845": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0",
        "0x151f7c75"
      ]
    },
    "2847": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%79#0"
      ]
    },
    "2848": {
      "op": "concat",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "2849": {
      "op": "log",
      "stack_out": []
    },
    "2850": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2851": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2854": {
      "block": "approval_program_append_dynamic_arr_struct_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "2856": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "NoOp"
      ]
    },
    "2857": {
      "op": "==",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "2858": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2859": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "2861": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "0"
      ]
    },
    "2862": {
      "op": "!=",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "2863": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2864": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "2867": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "2868": {
      "callsub": "examples.box_storage.contract.BoxContract.append_dynamic_arr_struct",
      "op": "callsub append_dynamic_arr_struct",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "2871": {
      "op": "itob",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "2872": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0",
        "0x151f7c75"
      ]
    },
    "2874": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%71#0"
      ]
    },
    "2875": {
      "op": "concat",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "2876": {
      "op": "log",
      "stack_out": []
    },
    "2877": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2878": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2881": {
      "block": "approval_program_delete_dynamic_arr_struct_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "2883": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "NoOp"
      ]
    },
    "2884": {
      "op": "==",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "2885": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2886": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "2888": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "0"
      ]
    },
    "2889": {
      "op": "!=",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "2890": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2891": {
      "callsub": "examples.box_storage.contract.BoxContract.delete_dynamic_arr_struct",
      "op": "callsub delete_dynamic_arr_struct"
    },
    "2894": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2895": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2898": {
      "block": "approval_program_create_dynamic_arr_struct_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "2900": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "NoOp"
      ]
    },
    "2901": {
      "op": "==",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "2902": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2903": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "2905": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "0"
      ]
    },
    "2906": {
      "op": "!=",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "2907": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2908": {
      "callsub": "examples.box_storage.contract.BoxContract.create_dynamic_arr_struct",
      "op": "callsub create_dynamic_arr_struct"
    },
    "2911": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2912": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2915": {
      "block": "approval_program_boxes_exist_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "2917": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "NoOp"
      ]
    },
    "2918": {
      "op": "==",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "2919": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2920": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "2922": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "0"
      ]
    },
    "2923": {
      "op": "!=",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "2924": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2925": {
      "callsub": "examples.box_storage.contract.BoxContract.boxes_exist",
      "op": "callsub boxes_exist",
      "defined_out": [
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ]
    },
    "2928": {
      "op": "cover 3",
      "stack_out": [
        "tmp%54#0",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0"
      ]
    },
    "2930": {
      "op": "cover 2",
      "stack_out": [
        "tmp%54#0",
        "tmp%53#0",
        "tmp%51#0",
        "tmp%52#0"
      ]
    },
    "2932": {
      "op": "swap",
      "stack_out": [
        "tmp%54#0",
        "tmp%53#0",
        "tmp%52#0",
        "tmp%51#0"
      ]
    },
    "2933": {
      "op": "bytec 15 // 0x00",
      "defined_out": [
        "0x00",
        "tmp%51#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "tmp%53#0",
        "tmp%52#0",
        "tmp%51#0",
        "0x00"
      ]
    },
    "2935": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%54#0",
        "tmp%53#0",
        "tmp%52#0",
        "tmp%51#0",
        "0x00",
        "0"
      ]
    },
    "2936": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%54#0",
        "tmp%53#0",
        "tmp%52#0",
        "0x00",
        "0",
        "tmp%51#0"
      ]
    },
    "2938": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "tmp%53#0",
        "tmp%52#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "2939": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "aggregate%encoded_bool%0#0",
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "tmp%53#0",
        "tmp%52#0",
        "aggregate%encoded_bool%0#0",
        "1"
      ]
    },
    "2940": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%54#0",
        "tmp%53#0",
        "aggregate%encoded_bool%0#0",
        "1",
        "tmp%52#0"
      ]
    },
    "2942": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%0#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "tmp%53#0",
        "aggregate%set_bit%0#0"
      ]
    },
    "2943": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "aggregate%set_bit%0#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "tmp%53#0",
        "aggregate%set_bit%0#0",
        "2"
      ]
    },
    "2944": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%54#0",
        "aggregate%set_bit%0#0",
        "2",
        "tmp%53#0"
      ]
    },
    "2946": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%1#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "aggregate%set_bit%1#0"
      ]
    },
    "2947": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "aggregate%set_bit%1#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "aggregate%set_bit%1#0",
        "3"
      ]
    },
    "2949": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%set_bit%1#0",
        "3",
        "tmp%54#0"
      ]
    },
    "2951": {
      "op": "setbit",
      "defined_out": [
        "aggregate%set_bit%2#0"
      ],
      "stack_out": [
        "aggregate%set_bit%2#0"
      ]
    },
    "2952": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "aggregate%set_bit%2#0"
      ],
      "stack_out": [
        "aggregate%set_bit%2#0",
        "0x"
      ]
    },
    "2953": {
      "op": "swap",
      "stack_out": [
        "0x",
        "aggregate%set_bit%2#0"
      ]
    },
    "2954": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "2955": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "0x151f7c75"
      ]
    },
    "2957": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%55#0"
      ]
    },
    "2958": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "2959": {
      "op": "log",
      "stack_out": []
    },
    "2960": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2961": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "2964": {
      "block": "approval_program_read_boxes_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "2966": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "NoOp"
      ]
    },
    "2967": {
      "op": "==",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "2968": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "2969": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "2971": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "0"
      ]
    },
    "2972": {
      "op": "!=",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "2973": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "2974": {
      "callsub": "examples.box_storage.contract.BoxContract.read_boxes",
      "op": "callsub read_boxes",
      "defined_out": [
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "2977": {
      "op": "cover 3",
      "stack_out": [
        "tmp%44#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "2979": {
      "op": "cover 3",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "tmp%41#0",
        "tmp%42#0"
      ]
    },
    "2981": {
      "op": "swap",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "tmp%42#0",
        "tmp%41#0"
      ]
    },
    "2982": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "tmp%42#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "2983": {
      "op": "bytec_1 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%1#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "tmp%42#0",
        "aggregate%as_Encoded(uint64)%1#0",
        "0x"
      ]
    },
    "2984": {
      "op": "swap",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "tmp%42#0",
        "0x",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "2985": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "tmp%42#0",
        "aggregate%head%0#0"
      ]
    },
    "2986": {
      "op": "swap",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%0#0",
        "tmp%42#0"
      ]
    },
    "2987": {
      "op": "dup",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%42#0",
        "tmp%42#0 (copy)",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%0#0",
        "tmp%42#0",
        "tmp%42#0 (copy)"
      ]
    },
    "2988": {
      "op": "len",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%length%0#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%0#0",
        "tmp%42#0",
        "aggregate%length%0#0"
      ]
    },
    "2989": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "aggregate%head%0#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%0#0",
        "tmp%42#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "2990": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%head%0#0",
        "aggregate%length_uint16%0#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%0#0",
        "tmp%42#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "2993": {
      "op": "swap",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%0#0",
        "aggregate%length_uint16%0#0",
        "tmp%42#0"
      ]
    },
    "2994": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "2995": {
      "op": "pushint 20 // 20",
      "defined_out": [
        "20",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "20"
      ]
    },
    "2997": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0",
        "aggregate%head%0#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "2998": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "3001": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%0#0",
        "aggregate%head%0#0"
      ]
    },
    "3003": {
      "op": "swap",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%0#0",
        "aggregate%offset_as_uint16%0#0"
      ]
    },
    "3004": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0"
      ]
    },
    "3005": {
      "op": "swap",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "3006": {
      "op": "dup",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(len+uint8[])%0#0 (copy)"
      ]
    },
    "3007": {
      "op": "len",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0"
      ]
    },
    "3008": {
      "op": "pushint 20 // 20",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%data_length%0#0",
        "20"
      ]
    },
    "3010": {
      "op": "+",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%current_tail_offset%0#0"
      ]
    },
    "3011": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0",
        "aggregate%head%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_bytes%2#0"
      ]
    },
    "3012": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%head%1#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "3015": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%offset_as_uint16%1#0",
        "aggregate%head%1#0"
      ]
    },
    "3017": {
      "op": "swap",
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%1#0",
        "aggregate%offset_as_uint16%1#0"
      ]
    },
    "3018": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0"
      ]
    },
    "3019": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%43#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0",
        "tmp%44#0"
      ]
    },
    "3021": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%as_Encoded(uint64)%2#0",
        "aggregate%head%2#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%2#0",
        "aggregate%as_Encoded(uint64)%2#0"
      ]
    },
    "3022": {
      "op": "concat",
      "defined_out": [
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "aggregate%as_Encoded(len+uint8[])%0#0",
        "aggregate%head%3#0"
      ]
    },
    "3023": {
      "op": "swap",
      "stack_out": [
        "tmp%43#0",
        "aggregate%head%3#0",
        "aggregate%as_Encoded(len+uint8[])%0#0"
      ]
    },
    "3024": {
      "op": "concat",
      "defined_out": [
        "aggregate%concat%0#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "aggregate%concat%0#0"
      ]
    },
    "3025": {
      "op": "swap",
      "stack_out": [
        "aggregate%concat%0#0",
        "tmp%43#0"
      ]
    },
    "3026": {
      "op": "concat",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "3027": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "0x151f7c75"
      ]
    },
    "3029": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%45#0"
      ]
    },
    "3030": {
      "op": "concat",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "3031": {
      "op": "log",
      "stack_out": []
    },
    "3032": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3033": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "3036": {
      "block": "approval_program_indirect_extract_and_replace_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "3038": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "NoOp"
      ]
    },
    "3039": {
      "op": "==",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "3040": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "3041": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "3043": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "0"
      ]
    },
    "3044": {
      "op": "!=",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "3045": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "3046": {
      "callsub": "examples.box_storage.contract.BoxContract.indirect_extract_and_replace",
      "op": "callsub indirect_extract_and_replace"
    },
    "3049": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3050": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "3053": {
      "block": "approval_program_delete_boxes_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "3055": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "NoOp"
      ]
    },
    "3056": {
      "op": "==",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "3057": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "3058": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "3060": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "0"
      ]
    },
    "3061": {
      "op": "!=",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "3062": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "3063": {
      "callsub": "examples.box_storage.contract.BoxContract.delete_boxes",
      "op": "callsub delete_boxes"
    },
    "3066": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3067": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "3070": {
      "block": "approval_program_sum_many_ints_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "3072": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "NoOp"
      ]
    },
    "3073": {
      "op": "==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "3074": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "3075": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "3077": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0"
      ]
    },
    "3078": {
      "op": "!=",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "3079": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "3080": {
      "callsub": "examples.box_storage.contract.BoxContract.sum_many_ints",
      "op": "callsub sum_many_ints",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "3083": {
      "op": "itob",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "3084": {
      "op": "bytec 7 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0x151f7c75"
      ]
    },
    "3086": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%27#0"
      ]
    },
    "3087": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "3088": {
      "op": "log",
      "stack_out": []
    },
    "3089": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3090": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "3093": {
      "block": "approval_program_set_many_ints_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "3095": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "NoOp"
      ]
    },
    "3096": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "3097": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "3098": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "3100": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0"
      ]
    },
    "3101": {
      "op": "!=",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "3102": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "3103": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "3106": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "3107": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "3110": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "3111": {
      "callsub": "examples.box_storage.contract.BoxContract.set_many_ints",
      "op": "callsub set_many_ints",
      "stack_out": []
    },
    "3114": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3115": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "3118": {
      "block": "approval_program_create_many_ints_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "3120": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "NoOp"
      ]
    },
    "3121": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "3122": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "3123": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "3125": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "3126": {
      "op": "!=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "3127": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "3128": {
      "callsub": "examples.box_storage.contract.BoxContract.create_many_ints",
      "op": "callsub create_many_ints"
    },
    "3131": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3132": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "3135": {
      "block": "approval_program_check_keys_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "3137": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "3138": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "3139": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "3140": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "3142": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "3143": {
      "op": "!=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "3144": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "3145": {
      "callsub": "examples.box_storage.contract.BoxContract.check_keys",
      "op": "callsub check_keys"
    },
    "3148": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3149": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "3152": {
      "block": "approval_program_set_boxes_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "3154": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "3155": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "3156": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "3157": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "3159": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "3160": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "3161": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "3162": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "3165": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "3166": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "3169": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "3172": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%7#0"
      ]
    },
    "3174": {
      "op": "uncover 2",
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0",
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "3176": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "3178": {
      "callsub": "examples.box_storage.contract.BoxContract.set_boxes",
      "op": "callsub set_boxes",
      "stack_out": []
    },
    "3181": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3182": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    },
    "3185": {
      "block": "approval_program_bare_routing@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0"
      ]
    },
    "3187": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%162#0"
      ],
      "stack_out": [
        "tmp%162#0",
        "0"
      ]
    },
    "3188": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%162#0"
      ]
    },
    "3189": {
      "op": "match approval_program___algopy_default_create@33",
      "stack_out": []
    },
    "3193": {
      "block": "approval_program_switch_case_next@37",
      "stack_in": [],
      "op": "b approval_program_after_if_else@38"
    },
    "3196": {
      "block": "approval_program___algopy_default_create@33",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "3198": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0",
        "0"
      ]
    },
    "3199": {
      "op": "==",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "3200": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "3201": {
      "block": "approval_program_after_inlined_examples.box_storage.contract.BoxContract.__algopy_default_create@35",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "3202": {
      "op": "b approval_program_after_inlined_examples.box_storage.contract.BoxContract.__puya_arc4_router__@39"
    }
  }
}