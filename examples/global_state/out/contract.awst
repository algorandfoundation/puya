contract AppStateContract
{
  globals {
    ['global_int_simplified']: uint64
    ['global_bytes_simplified']: bytes
    ['global_bool_simplified']: bool
    ['global_int_full']: uint64
    ['global_int_no_default']: uint64
    ['global_bytes_full']: bytes
    ['global_bytes_no_default']: bytes
    ['global_bool_full']: bool
    ['global_bool_no_default']: bool
    ['global_asset']: asset
    ['global_application']: application
    ['global_account']: account
  }
  
  constructor()
  {
    this.global_int_full: uint64 = 55u
    this.global_int_simplified: uint64 = 33u
    this.global_bytes_full: bytes = 'Hello'
    this.global_bytes_simplified: bytes = 'Hello'
    this.global_bool_full: bool = false
    this.global_bool_simplified: bool = true
  }
  
  approval_program(): bool
  {
    assert(this.global_int_simplified == 33u)
    assert(STATE_EXISTS(this.global_int_full))
    assert(this.global_int_full == 55u)
    assert(!(STATE_EXISTS(this.global_int_no_default)))
    this.global_int_no_default: uint64 = 44u
    (i_value, i_exists): tuple<uint64,bool> = STATE_GET_EX(this.global_int_no_default)
    assert(i_exists)
    assert(i_value == 44u)
    assert(this.global_bytes_simplified == 'Hello')
    assert(STATE_EXISTS(this.global_bytes_full))
    assert(this.global_bytes_full == 'Hello')
    assert(STATE_GET(this.global_bytes_full, default='default') == 'Hello')
    assert(!(STATE_EXISTS(this.global_bytes_no_default)))
    this.global_bytes_no_default: bytes = 'World'
    (b_value, b_exists): tuple<bytes,bool> = STATE_GET_EX(this.global_bytes_no_default)
    assert(b_exists)
    assert(b_value == 'World')
    STATE_DELETE(this.global_bytes_no_default)
    (b_value, b_exists): tuple<bytes,bool> = STATE_GET_EX(this.global_bytes_no_default)
    assert(!(b_exists))
    assert(STATE_GET(this.global_bytes_no_default, default='default') == 'default')
    assert(STATE_EXISTS(this.global_bool_full))
    assert(!(STATE_EXISTS(this.global_bool_no_default)))
    this.global_bool_no_default: bool = true
    assert(!(this.global_bool_full))
    assert(this.global_bool_simplified)
    assert(this.global_bool_no_default)
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}