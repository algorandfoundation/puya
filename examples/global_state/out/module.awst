contract AppStateContract
{
  method_resolution_order: (
  )
  globals {
    ['global_int_full']: uint64
    ['global_int_simplified']: uint64
    ['global_int_no_default']: uint64
    ['global_bytes_full']: bytes
    ['global_bytes_simplified']: bytes
    ['global_bytes_no_default']: bytes
    ['global_bool_full']: bool
    ['global_bool_simplified']: bool
    ['global_bool_no_default']: bool
    ['global_asset']: asset
    ['global_application']: application
    ['global_account']: account
  }
  
  subroutine examples.global_state.contract.AppStateContract.approval_program(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    assert(GlobalState['global_int_simplified'] == 33u)
    assert(STATE_EXISTS(GlobalState['global_int_full']))
    assert(GlobalState['global_int_full'] == 55u)
    assert(!(STATE_EXISTS(GlobalState['global_int_no_default'])))
    GlobalState['global_int_no_default']: uint64 = 44u
    (i_value, i_exists): tuple<uint64,bool> = STATE_GET_EX(GlobalState['global_int_no_default'])
    assert(i_exists)
    assert(i_value == 44u)
    assert(examples.global_state.contract.read_global_uint64(hex<"676C6F62616C5F696E745F6E6F5F64656661756C74">) == 44u)
    assert(GlobalState['global_bytes_simplified'] == hex<"48656C6C6F">)
    assert(STATE_EXISTS(GlobalState['global_bytes_full']))
    assert(GlobalState['global_bytes_full'] == hex<"48656C6C6F">)
    assert(STATE_GET(GlobalState['global_bytes_full'], default=hex<"64656661756C74">) == hex<"48656C6C6F">)
    assert(!(STATE_EXISTS(GlobalState['global_bytes_no_default'])))
    GlobalState['global_bytes_no_default']: bytes = hex<"576F726C64">
    (b_value, b_exists): tuple<bytes,bool> = STATE_GET_EX(GlobalState['global_bytes_no_default'])
    assert(b_exists)
    assert(b_value == hex<"576F726C64">)
    assert(examples.global_state.contract.read_global_bytes('global_bytes_no_default') == hex<"576F726C64">)
    STATE_DELETE(GlobalState['global_bytes_no_default'])
    (b_value, b_exists): tuple<bytes,bool> = STATE_GET_EX(GlobalState['global_bytes_no_default'])
    assert(!(b_exists))
    assert(STATE_GET(GlobalState['global_bytes_no_default'], default=hex<"64656661756C74">) == hex<"64656661756C74">)
    assert(STATE_EXISTS(GlobalState['global_bool_full']))
    assert(!(STATE_EXISTS(GlobalState['global_bool_no_default'])))
    GlobalState['global_bool_no_default']: bool = true
    assert(!(GlobalState['global_bool_full']))
    assert(GlobalState['global_bool_simplified'])
    assert(GlobalState['global_bool_no_default'])
    assert(examples.global_state.contract.get_global_state_plus_1('global_int_no_default') == 45u)
    return true
  }
  
  subroutine examples.global_state.contract.AppStateContract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine examples.global_state.contract.AppStateContract.__init__(): void
  {
    GlobalState['global_int_full']: uint64 = 55u
    GlobalState['global_int_simplified']: uint64 = 33u
    GlobalState['global_bytes_full']: bytes = hex<"48656C6C6F">
    GlobalState['global_bytes_simplified']: bytes = hex<"48656C6C6F">
    GlobalState['global_bool_full']: bool = false
    GlobalState['global_bool_simplified']: bool = true
  }
  
  subroutine examples.global_state.contract.AppStateContract.approval_program(): bool
  {
    assert(GlobalState['global_int_simplified'] == 33u)
    assert(STATE_EXISTS(GlobalState['global_int_full']))
    assert(GlobalState['global_int_full'] == 55u)
    assert(!(STATE_EXISTS(GlobalState['global_int_no_default'])))
    GlobalState['global_int_no_default']: uint64 = 44u
    (i_value, i_exists): tuple<uint64,bool> = STATE_GET_EX(GlobalState['global_int_no_default'])
    assert(i_exists)
    assert(i_value == 44u)
    assert(examples.global_state.contract.read_global_uint64(hex<"676C6F62616C5F696E745F6E6F5F64656661756C74">) == 44u)
    assert(GlobalState['global_bytes_simplified'] == hex<"48656C6C6F">)
    assert(STATE_EXISTS(GlobalState['global_bytes_full']))
    assert(GlobalState['global_bytes_full'] == hex<"48656C6C6F">)
    assert(STATE_GET(GlobalState['global_bytes_full'], default=hex<"64656661756C74">) == hex<"48656C6C6F">)
    assert(!(STATE_EXISTS(GlobalState['global_bytes_no_default'])))
    GlobalState['global_bytes_no_default']: bytes = hex<"576F726C64">
    (b_value, b_exists): tuple<bytes,bool> = STATE_GET_EX(GlobalState['global_bytes_no_default'])
    assert(b_exists)
    assert(b_value == hex<"576F726C64">)
    assert(examples.global_state.contract.read_global_bytes('global_bytes_no_default') == hex<"576F726C64">)
    STATE_DELETE(GlobalState['global_bytes_no_default'])
    (b_value, b_exists): tuple<bytes,bool> = STATE_GET_EX(GlobalState['global_bytes_no_default'])
    assert(!(b_exists))
    assert(STATE_GET(GlobalState['global_bytes_no_default'], default=hex<"64656661756C74">) == hex<"64656661756C74">)
    assert(STATE_EXISTS(GlobalState['global_bool_full']))
    assert(!(STATE_EXISTS(GlobalState['global_bool_no_default'])))
    GlobalState['global_bool_no_default']: bool = true
    assert(!(GlobalState['global_bool_full']))
    assert(GlobalState['global_bool_simplified'])
    assert(GlobalState['global_bool_no_default'])
    assert(examples.global_state.contract.get_global_state_plus_1('global_int_no_default') == 45u)
    return true
  }
}

subroutine get_global_state_plus_1(state: state_key): uint64
{
  return GlobalState[state] + 1u
}

subroutine read_global_uint64(key: bytes): uint64
{
  return GlobalState[reinterpret_cast<state_key>(key)]
}

subroutine read_global_bytes(key: string): bytes
{
  return GlobalState[reinterpret_cast<state_key>(reinterpret_cast<bytes>(key))]
}