>> poetry run puyapy -O1 --output-ssa-ir --output-optimization-ir --output-final-ir --output-cssa-ir --output-post-ssa-ir --output-parallel-copies-ir --out-dir=out --debug-level=1 --log-level=debug amm
debug: Building AWST for __init__.py
debug: Building AWST for amm
debug: Building AWST for embedded puyapy lib at <puya>/puyapy_lib_bytes.py
debug: Building AWST for embedded puyapy lib at <puya>/puyapy.py
debug: Building AWST for amm/contract.py
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L52
debug: Terminated block@0: // L52
debug: Sealing block@0: // L271
debug: Terminated block@0: // L271
debug: Sealing block@0: // L58
debug: Terminated block@0: // L58
debug: Sealing block@0: // L277
debug: Terminated block@0: // L277
debug: Sealing block@0: // L294
debug: Terminated block@0: // L294
debug: Sealing block@0: // L367
debug: Terminated block@0: // L367
debug: Sealing block@0: // L96
debug: Terminated block@0: // L96
debug: Sealing block@0: // L260
debug: Terminated block@0: // L260
debug: Sealing block@0: // L302
debug: Terminated block@0: // L302
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Sealing block@0: // L310
debug: Terminated block@0: // L310
debug: Sealing block@0: // L333
debug: Terminated block@0: // L333
debug: Sealing block@None: // and_contd_L341
debug: Terminated block@1: // and_contd_L341
debug: Sealing block@None: // bool_true_L341
debug: Sealing block@None: // bool_false_L341
debug: Terminated block@2: // bool_true_L341
debug: Terminated block@3: // bool_false_L341
debug: Sealing block@4: // bool_merge_L341
debug: Created Phi assignment: let and_result%2#2: uint64 = undefined while trying to resolve 'and_result%2' in block@4: // bool_merge_L341
debug: Added and_result%2#0 to Phi node: let and_result%2#2: uint64 = φ(and_result%2#0 <- block@2) in block@2: // bool_true_L341
debug: Added and_result%2#1 to Phi node: let and_result%2#2: uint64 = φ(and_result%2#0 <- block@2, and_result%2#1 <- block@3) in block@3: // bool_false_L341
debug: Terminated block@4: // bool_merge_L341
debug: Sealing block@None: // if_body_L342
debug: Sealing block@None: // else_body_L342
debug: Created Phi assignment: let a_amount#1: uint64 = undefined while trying to resolve 'a_amount' in block@4: // bool_merge_L341
debug: Added a_amount#0 to Phi node: let a_amount#1: uint64 = φ(a_amount#0 <- block@2) in block@2: // bool_true_L341
debug: Created Phi assignment: let a_amount#2: uint64 = undefined while trying to resolve 'a_amount' in block@3: // bool_false_L341
debug: Added a_amount#0 to Phi node: let a_amount#2: uint64 = φ(a_amount#0 <- block@0) in block@0: // L333
debug: Added a_amount#0 to Phi node: let a_amount#2: uint64 = φ(a_amount#0 <- block@0, a_amount#0 <- block@1) in block@1: // and_contd_L341
debug: Replacing trivial Phi node: let a_amount#2: uint64 = φ(a_amount#0 <- block@0, a_amount#0 <- block@1) (a_amount#2) with a_amount#0
debug: Deleting Phi assignment: let a_amount#2: uint64 = φ(a_amount#0 <- block@0, a_amount#0 <- block@1)
debug: Replaced trivial Phi node: let a_amount#2: uint64 = φ(a_amount#0 <- block@0, a_amount#0 <- block@1) (a_amount#2) with a_amount#0 in current definition for 1 blocks
debug: Added a_amount#0 to Phi node: let a_amount#1: uint64 = φ(a_amount#0 <- block@2, a_amount#0 <- block@3) in block@3: // bool_false_L341
debug: Replacing trivial Phi node: let a_amount#1: uint64 = φ(a_amount#0 <- block@2, a_amount#0 <- block@3) (a_amount#1) with a_amount#0
debug: Deleting Phi assignment: let a_amount#1: uint64 = φ(a_amount#0 <- block@2, a_amount#0 <- block@3)
debug: Replaced trivial Phi node: let a_amount#1: uint64 = φ(a_amount#0 <- block@2, a_amount#0 <- block@3) (a_amount#1) with a_amount#0 in current definition for 1 blocks
debug: Created Phi assignment: let b_amount#1: uint64 = undefined while trying to resolve 'b_amount' in block@4: // bool_merge_L341
debug: Added b_amount#0 to Phi node: let b_amount#1: uint64 = φ(b_amount#0 <- block@2) in block@2: // bool_true_L341
debug: Created Phi assignment: let b_amount#2: uint64 = undefined while trying to resolve 'b_amount' in block@3: // bool_false_L341
debug: Added b_amount#0 to Phi node: let b_amount#2: uint64 = φ(b_amount#0 <- block@0) in block@0: // L333
debug: Added b_amount#0 to Phi node: let b_amount#2: uint64 = φ(b_amount#0 <- block@0, b_amount#0 <- block@1) in block@1: // and_contd_L341
debug: Replacing trivial Phi node: let b_amount#2: uint64 = φ(b_amount#0 <- block@0, b_amount#0 <- block@1) (b_amount#2) with b_amount#0
debug: Deleting Phi assignment: let b_amount#2: uint64 = φ(b_amount#0 <- block@0, b_amount#0 <- block@1)
debug: Replaced trivial Phi node: let b_amount#2: uint64 = φ(b_amount#0 <- block@0, b_amount#0 <- block@1) (b_amount#2) with b_amount#0 in current definition for 1 blocks
debug: Added b_amount#0 to Phi node: let b_amount#1: uint64 = φ(b_amount#0 <- block@2, b_amount#0 <- block@3) in block@3: // bool_false_L341
debug: Replacing trivial Phi node: let b_amount#1: uint64 = φ(b_amount#0 <- block@2, b_amount#0 <- block@3) (b_amount#1) with b_amount#0
debug: Deleting Phi assignment: let b_amount#1: uint64 = φ(b_amount#0 <- block@2, b_amount#0 <- block@3)
debug: Replaced trivial Phi node: let b_amount#1: uint64 = φ(b_amount#0 <- block@2, b_amount#0 <- block@3) (b_amount#1) with b_amount#0 in current definition for 1 blocks
debug: Terminated block@5: // if_body_L342
debug: Sealing block@6: // after_if_else_L342
debug: Created Phi assignment: let pool_balance#1: uint64 = undefined while trying to resolve 'pool_balance' in block@4: // bool_merge_L341
debug: Added pool_balance#0 to Phi node: let pool_balance#1: uint64 = φ(pool_balance#0 <- block@2) in block@2: // bool_true_L341
debug: Created Phi assignment: let pool_balance#2: uint64 = undefined while trying to resolve 'pool_balance' in block@3: // bool_false_L341
debug: Added pool_balance#0 to Phi node: let pool_balance#2: uint64 = φ(pool_balance#0 <- block@0) in block@0: // L333
debug: Added pool_balance#0 to Phi node: let pool_balance#2: uint64 = φ(pool_balance#0 <- block@0, pool_balance#0 <- block@1) in block@1: // and_contd_L341
debug: Replacing trivial Phi node: let pool_balance#2: uint64 = φ(pool_balance#0 <- block@0, pool_balance#0 <- block@1) (pool_balance#2) with pool_balance#0
debug: Deleting Phi assignment: let pool_balance#2: uint64 = φ(pool_balance#0 <- block@0, pool_balance#0 <- block@1)
debug: Replaced trivial Phi node: let pool_balance#2: uint64 = φ(pool_balance#0 <- block@0, pool_balance#0 <- block@1) (pool_balance#2) with pool_balance#0 in current definition for 1 blocks
debug: Added pool_balance#0 to Phi node: let pool_balance#1: uint64 = φ(pool_balance#0 <- block@2, pool_balance#0 <- block@3) in block@3: // bool_false_L341
debug: Replacing trivial Phi node: let pool_balance#1: uint64 = φ(pool_balance#0 <- block@2, pool_balance#0 <- block@3) (pool_balance#1) with pool_balance#0
debug: Deleting Phi assignment: let pool_balance#1: uint64 = φ(pool_balance#0 <- block@2, pool_balance#0 <- block@3)
debug: Replaced trivial Phi node: let pool_balance#1: uint64 = φ(pool_balance#0 <- block@2, pool_balance#0 <- block@3) (pool_balance#1) with pool_balance#0 in current definition for 1 blocks
debug: Created Phi assignment: let a_balance#1: uint64 = undefined while trying to resolve 'a_balance' in block@4: // bool_merge_L341
debug: Added a_balance#0 to Phi node: let a_balance#1: uint64 = φ(a_balance#0 <- block@2) in block@2: // bool_true_L341
debug: Created Phi assignment: let a_balance#2: uint64 = undefined while trying to resolve 'a_balance' in block@3: // bool_false_L341
debug: Added a_balance#0 to Phi node: let a_balance#2: uint64 = φ(a_balance#0 <- block@0) in block@0: // L333
debug: Added a_balance#0 to Phi node: let a_balance#2: uint64 = φ(a_balance#0 <- block@0, a_balance#0 <- block@1) in block@1: // and_contd_L341
debug: Replacing trivial Phi node: let a_balance#2: uint64 = φ(a_balance#0 <- block@0, a_balance#0 <- block@1) (a_balance#2) with a_balance#0
debug: Deleting Phi assignment: let a_balance#2: uint64 = φ(a_balance#0 <- block@0, a_balance#0 <- block@1)
debug: Replaced trivial Phi node: let a_balance#2: uint64 = φ(a_balance#0 <- block@0, a_balance#0 <- block@1) (a_balance#2) with a_balance#0 in current definition for 1 blocks
debug: Added a_balance#0 to Phi node: let a_balance#1: uint64 = φ(a_balance#0 <- block@2, a_balance#0 <- block@3) in block@3: // bool_false_L341
debug: Replacing trivial Phi node: let a_balance#1: uint64 = φ(a_balance#0 <- block@2, a_balance#0 <- block@3) (a_balance#1) with a_balance#0
debug: Deleting Phi assignment: let a_balance#1: uint64 = φ(a_balance#0 <- block@2, a_balance#0 <- block@3)
debug: Replaced trivial Phi node: let a_balance#1: uint64 = φ(a_balance#0 <- block@2, a_balance#0 <- block@3) (a_balance#1) with a_balance#0 in current definition for 1 blocks
debug: Created Phi assignment: let b_balance#1: uint64 = undefined while trying to resolve 'b_balance' in block@4: // bool_merge_L341
debug: Added b_balance#0 to Phi node: let b_balance#1: uint64 = φ(b_balance#0 <- block@2) in block@2: // bool_true_L341
debug: Created Phi assignment: let b_balance#2: uint64 = undefined while trying to resolve 'b_balance' in block@3: // bool_false_L341
debug: Added b_balance#0 to Phi node: let b_balance#2: uint64 = φ(b_balance#0 <- block@0) in block@0: // L333
debug: Added b_balance#0 to Phi node: let b_balance#2: uint64 = φ(b_balance#0 <- block@0, b_balance#0 <- block@1) in block@1: // and_contd_L341
debug: Replacing trivial Phi node: let b_balance#2: uint64 = φ(b_balance#0 <- block@0, b_balance#0 <- block@1) (b_balance#2) with b_balance#0
debug: Deleting Phi assignment: let b_balance#2: uint64 = φ(b_balance#0 <- block@0, b_balance#0 <- block@1)
debug: Replaced trivial Phi node: let b_balance#2: uint64 = φ(b_balance#0 <- block@0, b_balance#0 <- block@1) (b_balance#2) with b_balance#0 in current definition for 1 blocks
debug: Added b_balance#0 to Phi node: let b_balance#1: uint64 = φ(b_balance#0 <- block@2, b_balance#0 <- block@3) in block@3: // bool_false_L341
debug: Replacing trivial Phi node: let b_balance#1: uint64 = φ(b_balance#0 <- block@2, b_balance#0 <- block@3) (b_balance#1) with b_balance#0
debug: Deleting Phi assignment: let b_balance#1: uint64 = φ(b_balance#0 <- block@2, b_balance#0 <- block@3)
debug: Replaced trivial Phi node: let b_balance#1: uint64 = φ(b_balance#0 <- block@2, b_balance#0 <- block@3) (b_balance#1) with b_balance#0 in current definition for 1 blocks
debug: Terminated block@6: // after_if_else_L342
debug: Sealing block@None: // if_body_L347
debug: Sealing block@None: // else_body_L347
debug: Terminated block@7: // if_body_L347
debug: Terminated block@8: // else_body_L347
debug: Sealing block@None: // after_if_else_L347
debug: Sealing block@0: // L264
debug: Terminated block@0: // L264
debug: Sealing block@0: // L162
debug: Terminated block@0: // L162
debug: Sealing block@0: // L354
debug: Terminated block@0: // L354
debug: Sealing block@0: // L218
debug: Terminated block@0: // L218
debug: Sealing block@None: // switch_case_default_L239
debug: Sealing block@None: // switch_case_0_L241
debug: Sealing block@None: // switch_case_1_L245
debug: Terminated block@1: // switch_case_0_L241
debug: Terminated block@2: // switch_case_1_L245
debug: Terminated block@3: // switch_case_default_L239
debug: Sealing block@4: // switch_case_next_L239
debug: Created Phi assignment: let swap_xfer#1: uint64 = undefined while trying to resolve 'swap_xfer' in block@4: // switch_case_next_L239
debug: Added swap_xfer#0 to Phi node: let swap_xfer#1: uint64 = φ(swap_xfer#0 <- block@1) in block@1: // switch_case_0_L241
debug: Added swap_xfer#0 to Phi node: let swap_xfer#1: uint64 = φ(swap_xfer#0 <- block@1, swap_xfer#0 <- block@2) in block@2: // switch_case_1_L245
debug: Replacing trivial Phi node: let swap_xfer#1: uint64 = φ(swap_xfer#0 <- block@1, swap_xfer#0 <- block@2) (swap_xfer#1) with swap_xfer#0
debug: Deleting Phi assignment: let swap_xfer#1: uint64 = φ(swap_xfer#0 <- block@1, swap_xfer#0 <- block@2)
debug: Replaced trivial Phi node: let swap_xfer#1: uint64 = φ(swap_xfer#0 <- block@1, swap_xfer#0 <- block@2) (swap_xfer#1) with swap_xfer#0 in current definition for 1 blocks
debug: Created Phi assignment: let in_supply#2: uint64 = undefined while trying to resolve 'in_supply' in block@4: // switch_case_next_L239
debug: Added in_supply#0 to Phi node: let in_supply#2: uint64 = φ(in_supply#0 <- block@1) in block@1: // switch_case_0_L241
debug: Added in_supply#1 to Phi node: let in_supply#2: uint64 = φ(in_supply#0 <- block@1, in_supply#1 <- block@2) in block@2: // switch_case_1_L245
debug: Created Phi assignment: let out_supply#2: uint64 = undefined while trying to resolve 'out_supply' in block@4: // switch_case_next_L239
debug: Added out_supply#0 to Phi node: let out_supply#2: uint64 = φ(out_supply#0 <- block@1) in block@1: // switch_case_0_L241
debug: Added out_supply#1 to Phi node: let out_supply#2: uint64 = φ(out_supply#0 <- block@1, out_supply#1 <- block@2) in block@2: // switch_case_1_L245
debug: Created Phi assignment: let out_asset#2: uint64 = undefined while trying to resolve 'out_asset' in block@4: // switch_case_next_L239
debug: Added out_asset#0 to Phi node: let out_asset#2: uint64 = φ(out_asset#0 <- block@1) in block@1: // switch_case_0_L241
debug: Added out_asset#1 to Phi node: let out_asset#2: uint64 = φ(out_asset#0 <- block@1, out_asset#1 <- block@2) in block@2: // switch_case_1_L245
debug: Terminated block@4: // switch_case_next_L239
debug: Sealing block@0: // L360
debug: Terminated block@0: // L360
debug: Sealing block@0: // L48
debug: Terminated block@0: // L48
debug: Sealing block@0: // L32
debug: Terminated block@0: // L32
debug: Sealing block@0: // L31
debug: Terminated block@0: // L31
debug: Sealing block@None: // on_create_L32
debug: Terminated block@1: // on_create_L32
debug: Sealing block@2: // entrypoint_L32
debug: Terminated block@2: // entrypoint_L32
debug: Sealing block@None: // abi_routing_L31
debug: Sealing block@None: // bare_routing_L31
debug: Terminated block@3: // abi_routing_L31
debug: Sealing block@None: // switch_case_default_L31
debug: Sealing block@None: // set_governor_route_L51
debug: Sealing block@None: // bootstrap_route_L57
debug: Sealing block@None: // mint_route_L89
debug: Sealing block@None: // burn_route_L155
debug: Sealing block@None: // swap_route_L212
debug: Terminated block@4: // set_governor_route_L51
debug: Terminated block@5: // bootstrap_route_L57
debug: Terminated block@6: // mint_route_L89
debug: Terminated block@7: // burn_route_L155
debug: Terminated block@8: // swap_route_L212
debug: Terminated block@9: // switch_case_default_L31
debug: Sealing block@10: // switch_case_next_L31
debug: Terminated block@10: // switch_case_next_L31
debug: Terminated block@11: // bare_routing_L31
debug: Sealing block@None: // reject_bare_on_completion_L31
debug: Sealing block@None: // create_L48
debug: Terminated block@12: // create_L48
debug: Terminated block@13: // reject_bare_on_completion_L31
debug: Sealing block@None: // switch_case_next_L31
debug: Sealing block@14: // after_if_else_L31
debug: Terminated block@14: // after_if_else_L31
debug: Sealing block@0: // L31
debug: Terminated block@0: // L31
debug: Output IR to <git root>/examples/amm/out/contract_ConstantProductAMM.ssa.ir
info: Optimizing examples.amm.contract.ConstantProductAMM at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: awst_tmp%15#0, maybe_value%12#0
debug: Replacing {maybe_value%12#0} with awst_tmp%15#0 made 1 modifications
debug: Found equivalence set: tmp%17#0, maybe_value_did_exist%13#0
debug: Replacing {maybe_value_did_exist%13#0} with tmp%17#0 made 1 modifications
debug: Found equivalence set: awst_tmp%32#0, maybe_value%29#0
debug: Replacing {maybe_value%29#0} with awst_tmp%32#0 made 1 modifications
debug: Found equivalence set: tmp%34#0, maybe_value_did_exist%30#0
debug: Replacing {maybe_value_did_exist%30#0} with tmp%34#0 made 1 modifications
debug: Found equivalence set: awst_tmp%15#1, maybe_value%35#0
debug: Replacing {maybe_value%35#0} with awst_tmp%15#1 made 1 modifications
debug: Found equivalence set: tmp%39#0, maybe_value_did_exist%36#0
debug: Replacing {maybe_value_did_exist%36#0} with tmp%39#0 made 1 modifications
debug: Found equivalence set: awst_tmp%15#2, maybe_value%52#0
debug: Replacing {maybe_value%52#0} with awst_tmp%15#2 made 1 modifications
debug: Found equivalence set: tmp%56#0, maybe_value_did_exist%53#0
debug: Replacing {maybe_value_did_exist%53#0} with tmp%56#0 made 1 modifications
debug: Found equivalence set: awst_tmp%15#3, maybe_value%69#0
debug: Replacing {maybe_value%69#0} with awst_tmp%15#3 made 1 modifications
debug: Found equivalence set: tmp%73#0, maybe_value_did_exist%70#0
debug: Replacing {maybe_value_did_exist%70#0} with tmp%73#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Switch switch tmp%80#0 {0u => block@12, * => block@13} simplified to goto [block@12, ...block@13][tmp%80#0]
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@10: // switch_case_next_L31 with block@9: // switch_case_default_L31 in block@14: // after_if_else_L31
debug: Merged linear block@10: // switch_case_next_L31 into block@9: // switch_case_default_L31
debug: Merged linear block@14: // after_if_else_L31 into block@9: // switch_case_default_L31
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.set_governor
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._check_is_governor
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.bootstrap
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._create_pool_token
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._do_opt_in
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.do_asset_transfer
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.mint
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._check_bootstrapped
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._current_pool_balance
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._current_a_balance
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._current_b_balance
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.tokens_to_mint
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: and_result%2#2, is_initial_mint#0
debug: Replacing {and_result%2#2} with is_initial_mint#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._update_ratio
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.burn
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.tokens_to_burn
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.swap
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: app_global_get_ex_value%16#0, out_asset#0
debug: Replacing {app_global_get_ex_value%16#0} with out_asset#0 made 1 modifications
debug: Found equivalence set: app_global_get_ex_value%18#0, out_asset#1
debug: Replacing {app_global_get_ex_value%18#0} with out_asset#1 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.tokens_to_swap
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.create
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.__init__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/amm/out/contract_ConstantProductAMM.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: GotoNth goto [block@12, ...block@13][tmp%80#0] simplified to goto tmp%80#0 ? block@13 : block@12
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.set_governor
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._check_is_governor
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.bootstrap
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._create_pool_token
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._do_opt_in
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.do_asset_transfer
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.mint
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._check_bootstrapped
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._current_pool_balance
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._current_a_balance
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._current_b_balance
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.tokens_to_mint
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._update_ratio
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.burn
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.tokens_to_burn
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.swap
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.tokens_to_swap
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.create
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.__init__
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to <git root>/examples/amm/out/contract_ConstantProductAMM.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.set_governor
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._check_is_governor
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.bootstrap
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._create_pool_token
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._do_opt_in
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.do_asset_transfer
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.mint
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._check_bootstrapped
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._current_pool_balance
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._current_a_balance
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._current_b_balance
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.tokens_to_mint
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM._update_ratio
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.burn
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.tokens_to_burn
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.swap
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.tokens_to_swap
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.create
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.__init__
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine examples.amm.contract.ConstantProductAMM.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 3, ending loop
debug: Output IR to <git root>/examples/amm/out/contract_ConstantProductAMM.cssa.ir
debug: Removing Phis from examples.amm.contract.ConstantProductAMM.approval_program
debug: Removing Phis from examples.amm.contract.ConstantProductAMM.set_governor
debug: Removing Phis from examples.amm.contract.ConstantProductAMM._check_is_governor
debug: Removing Phis from examples.amm.contract.ConstantProductAMM.bootstrap
debug: Removing Phis from examples.amm.contract.ConstantProductAMM._create_pool_token
debug: Removing Phis from examples.amm.contract.ConstantProductAMM._do_opt_in
debug: Removing Phis from examples.amm.contract.do_asset_transfer
debug: Removing Phis from examples.amm.contract.ConstantProductAMM.mint
debug: Removing Phis from examples.amm.contract.ConstantProductAMM._check_bootstrapped
debug: Removing Phis from examples.amm.contract.ConstantProductAMM._current_pool_balance
debug: Removing Phis from examples.amm.contract.ConstantProductAMM._current_a_balance
debug: Removing Phis from examples.amm.contract.ConstantProductAMM._current_b_balance
debug: Removing Phis from examples.amm.contract.tokens_to_mint
debug: Removing Phis from examples.amm.contract.ConstantProductAMM._update_ratio
debug: Removing Phis from examples.amm.contract.ConstantProductAMM.burn
debug: Removing Phis from examples.amm.contract.tokens_to_burn
debug: Removing Phis from examples.amm.contract.ConstantProductAMM.swap
debug: Removing Phis from examples.amm.contract.tokens_to_swap
debug: Removing Phis from examples.amm.contract.ConstantProductAMM.create
debug: Removing Phis from examples.amm.contract.ConstantProductAMM.__init__
debug: Removing Phis from examples.amm.contract.ConstantProductAMM.clear_state_program
debug: Output IR to <git root>/examples/amm/out/contract_ConstantProductAMM.post_ssa.ir
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM.approval_program
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM.set_governor
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM._check_is_governor
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM.bootstrap
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM._create_pool_token
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM._do_opt_in
debug: Sequentializing parallel copies in examples.amm.contract.do_asset_transfer
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM.mint
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM._check_bootstrapped
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM._current_pool_balance
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM._current_a_balance
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM._current_b_balance
debug: Sequentializing parallel copies in examples.amm.contract.tokens_to_mint
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM._update_ratio
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM.burn
debug: Sequentializing parallel copies in examples.amm.contract.tokens_to_burn
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM.swap
debug: loc: {out_asset#5=None, out_supply#5=None, in_supply#5=None, out_asset#0=out_asset#0, out_supply#0=out_supply#0, in_supply#0=in_supply#0}
debug: pred: {out_asset#5=out_asset#0, out_supply#5=out_supply#0, in_supply#5=in_supply#0}
debug: ready: out_asset#5, out_supply#5, in_supply#5
debug: to_do: out_asset#5, out_supply#5, in_supply#5
debug: * avail in_supply#5
debug: * avail in_supply#0
debug: * avail out_supply#5
debug: * avail out_supply#0
debug: * avail out_asset#5
debug: * avail out_asset#0
debug: * to_do in_supply#5
debug: * to_do out_supply#5
debug: * to_do out_asset#5
debug: loc: {out_asset#5=None, out_supply#5=None, in_supply#5=None, out_asset#1=out_asset#1, out_supply#1=out_supply#1, in_supply#1=in_supply#1}
debug: pred: {out_asset#5=out_asset#1, out_supply#5=out_supply#1, in_supply#5=in_supply#1}
debug: ready: out_asset#5, out_supply#5, in_supply#5
debug: to_do: out_asset#5, out_supply#5, in_supply#5
debug: * avail in_supply#5
debug: * avail in_supply#1
debug: * avail out_supply#5
debug: * avail out_supply#1
debug: * avail out_asset#5
debug: * avail out_asset#1
debug: * to_do in_supply#5
debug: * to_do out_supply#5
debug: * to_do out_asset#5
debug: loc: {out_asset#2=None, out_supply#2=None, in_supply#2=None, out_asset#5=out_asset#5, out_supply#5=out_supply#5, in_supply#5=in_supply#5}
debug: pred: {out_asset#2=out_asset#5, out_supply#2=out_supply#5, in_supply#2=in_supply#5}
debug: ready: out_asset#2, out_supply#2, in_supply#2
debug: to_do: out_asset#2, out_supply#2, in_supply#2
debug: * avail in_supply#2
debug: * avail in_supply#5
debug: * avail out_supply#2
debug: * avail out_supply#5
debug: * avail out_asset#2
debug: * avail out_asset#5
debug: * to_do in_supply#2
debug: * to_do out_supply#2
debug: * to_do out_asset#2
debug: Sequentializing parallel copies in examples.amm.contract.tokens_to_swap
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM.create
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM.__init__
debug: Sequentializing parallel copies in examples.amm.contract.ConstantProductAMM.clear_state_program
debug: Output IR to <git root>/examples/amm/out/contract_ConstantProductAMM.parallel_copies.ir
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM.approval_program using strategy RootOperandGrouping
debug: Coalescing awst_tmp%15#0 with [awst_tmp%15#1, awst_tmp%15#2, awst_tmp%15#3]
debug: Coalescing resulted in 9 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM.set_governor using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM._check_is_governor using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM.bootstrap using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM._create_pool_token using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM._do_opt_in using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.do_asset_transfer using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM.mint using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM._check_bootstrapped using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM._current_pool_balance using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM._current_a_balance using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM._current_b_balance using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.tokens_to_mint using strategy RootOperandGrouping
debug: Coalescing and_result%2#0 with [and_result%2#1]
debug: Coalescing is_initial_mint#0 with [is_initial_mint#1]
debug: Coalescing resulted in 5 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM._update_ratio using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM.burn using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.tokens_to_burn using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM.swap using strategy RootOperandGrouping
debug: Coalescing in_supply#0 with [in_supply#5, in_supply#1, in_supply#2]
debug: Coalescing out_supply#0 with [out_supply#5, out_supply#1, out_supply#2]
debug: Coalescing out_asset#0 with [out_asset#5, out_asset#1, out_asset#2]
debug: Coalescing resulted in 21 replacement/s
debug: Coalescing local variables in examples.amm.contract.tokens_to_swap using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM.create using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM.__init__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in examples.amm.contract.ConstantProductAMM.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to <git root>/examples/amm/out/contract_ConstantProductAMM.final.ir
debug: Inserted main_block@0.ops[1]: 'store app_id%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load app_id%0#0' with 'load app_id%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[3]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_abi_routing@3.ops[1]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_abi_routing@3.ops[8]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_set_governor_route@4.ops[1]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_set_governor_route@4.ops[3]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_set_governor_route@4.ops[5]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_set_governor_route@4.ops[7]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_set_governor_route@4.ops[10]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_set_governor_route@4.ops[12]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_set_governor_route@4.ops[15]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_set_governor_route@4.ops[17]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_set_governor_route@4.ops[19]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced main_set_governor_route@4.ops[21]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted main_set_governor_route@4.ops[23]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced main_set_governor_route@4.ops[25]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[1]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[3]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[5]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[7]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[10]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[12]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[15]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[17]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[20]: 'store awst_tmp%15#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[22]: 'load awst_tmp%15#0' with 'load awst_tmp%15#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[24]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[26]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[29]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[31]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[34]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[36]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[38]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[40]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[44]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[46]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[48]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[50]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[61]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[63]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[57]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[60]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[52]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[56]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[42]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[56]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_bootstrap_route@5.ops[23]: 'store awst_tmp%15#0 to l-stack (copy)'
debug: Replaced main_bootstrap_route@5.ops[56]: 'load awst_tmp%15#0' with 'load awst_tmp%15#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[1]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[3]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[5]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[7]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[10]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[12]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[15]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[17]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[20]: 'store awst_tmp%32#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[22]: 'load awst_tmp%32#0' with 'load awst_tmp%32#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[24]: 'store tmp%33#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[26]: 'load tmp%33#0' with 'load tmp%33#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[29]: 'store tmp%34#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[31]: 'load tmp%34#0' with 'load tmp%34#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[34]: 'store tmp%37#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[36]: 'load tmp%37#0' with 'load tmp%37#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[39]: 'store awst_tmp%15#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[41]: 'load awst_tmp%15#0' with 'load awst_tmp%15#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[43]: 'store tmp%38#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[45]: 'load tmp%38#0' with 'load tmp%38#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[48]: 'store tmp%39#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[50]: 'load tmp%39#0' with 'load tmp%39#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[53]: 'store tmp%40#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[55]: 'load tmp%40#0' with 'load tmp%40#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[57]: 'store tmp%41#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[59]: 'load tmp%41#0' with 'load tmp%41#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[63]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[65]: 'load tmp%43#0' with 'load tmp%43#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[67]: 'store tmp%44#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[69]: 'load tmp%44#0' with 'load tmp%44#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[73]: 'store tmp%46#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[75]: 'load tmp%46#0' with 'load tmp%46#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[77]: 'store tmp%47#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[79]: 'load tmp%47#0' with 'load tmp%47#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[81]: 'store tmp%48#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[87]: 'load tmp%48#0' with 'load tmp%48#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[71]: 'store tmp%45#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[87]: 'load tmp%45#0' with 'load tmp%45#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[61]: 'store tmp%42#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[87]: 'load tmp%42#0' with 'load tmp%42#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[42]: 'store awst_tmp%15#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[87]: 'load awst_tmp%15#0' with 'load awst_tmp%15#0 from l-stack (no copy)'
debug: Inserted main_mint_route@6.ops[23]: 'store awst_tmp%32#0 to l-stack (copy)'
debug: Replaced main_mint_route@6.ops[87]: 'load awst_tmp%32#0' with 'load awst_tmp%32#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[1]: 'store tmp%49#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[3]: 'load tmp%49#0' with 'load tmp%49#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[5]: 'store tmp%50#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[7]: 'load tmp%50#0' with 'load tmp%50#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[10]: 'store tmp%51#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[12]: 'load tmp%51#0' with 'load tmp%51#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[15]: 'store tmp%54#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[17]: 'load tmp%54#0' with 'load tmp%54#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[20]: 'store awst_tmp%15#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[22]: 'load awst_tmp%15#0' with 'load awst_tmp%15#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[24]: 'store tmp%55#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[26]: 'load tmp%55#0' with 'load tmp%55#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[29]: 'store tmp%56#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[31]: 'load tmp%56#0' with 'load tmp%56#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[34]: 'store tmp%57#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[36]: 'load tmp%57#0' with 'load tmp%57#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[38]: 'store tmp%58#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[40]: 'load tmp%58#0' with 'load tmp%58#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[44]: 'store tmp%60#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[46]: 'load tmp%60#0' with 'load tmp%60#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[48]: 'store tmp%61#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[50]: 'load tmp%61#0' with 'load tmp%61#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[54]: 'store tmp%63#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[56]: 'load tmp%63#0' with 'load tmp%63#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[58]: 'store tmp%64#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[60]: 'load tmp%64#0' with 'load tmp%64#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[62]: 'store tmp%65#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[67]: 'load tmp%65#0' with 'load tmp%65#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[52]: 'store tmp%62#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[67]: 'load tmp%62#0' with 'load tmp%62#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[42]: 'store tmp%59#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[67]: 'load tmp%59#0' with 'load tmp%59#0 from l-stack (no copy)'
debug: Inserted main_burn_route@7.ops[23]: 'store awst_tmp%15#0 to l-stack (copy)'
debug: Replaced main_burn_route@7.ops[67]: 'load awst_tmp%15#0' with 'load awst_tmp%15#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[1]: 'store tmp%66#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[3]: 'load tmp%66#0' with 'load tmp%66#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[5]: 'store tmp%67#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[7]: 'load tmp%67#0' with 'load tmp%67#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[10]: 'store tmp%68#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[12]: 'load tmp%68#0' with 'load tmp%68#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[15]: 'store tmp%71#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[17]: 'load tmp%71#0' with 'load tmp%71#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[20]: 'store awst_tmp%15#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[22]: 'load awst_tmp%15#0' with 'load awst_tmp%15#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[24]: 'store tmp%72#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[26]: 'load tmp%72#0' with 'load tmp%72#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[29]: 'store tmp%73#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[31]: 'load tmp%73#0' with 'load tmp%73#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[34]: 'store tmp%74#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[36]: 'load tmp%74#0' with 'load tmp%74#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[38]: 'store tmp%75#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[40]: 'load tmp%75#0' with 'load tmp%75#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[44]: 'store tmp%77#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[46]: 'load tmp%77#0' with 'load tmp%77#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[48]: 'store tmp%78#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[50]: 'load tmp%78#0' with 'load tmp%78#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[52]: 'store tmp%79#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[56]: 'load tmp%79#0' with 'load tmp%79#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[42]: 'store tmp%76#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[56]: 'load tmp%76#0' with 'load tmp%76#0 from l-stack (no copy)'
debug: Inserted main_swap_route@8.ops[23]: 'store awst_tmp%15#0 to l-stack (copy)'
debug: Replaced main_swap_route@8.ops[56]: 'load awst_tmp%15#0' with 'load awst_tmp%15#0 from l-stack (no copy)'
debug: Inserted main_bare_routing@11.ops[1]: 'store tmp%80#0 to l-stack (copy)'
debug: Replaced main_bare_routing@11.ops[3]: 'load tmp%80#0' with 'load tmp%80#0 from l-stack (no copy)'
debug: Inserted main_create@12.ops[1]: 'store tmp%81#0 to l-stack (copy)'
debug: Replaced main_create@12.ops[3]: 'load tmp%81#0' with 'load tmp%81#0 from l-stack (no copy)'
debug: Inserted main_create@12.ops[5]: 'store tmp%82#0 to l-stack (copy)'
debug: Replaced main_create@12.ops[7]: 'load tmp%82#0' with 'load tmp%82#0 from l-stack (no copy)'
debug: Found 4 edge set/s for examples.amm.contract.ConstantProductAMM.approval_program
debug: Simplified uncover 2; uncover 2; uncover 2 to 
debug: Simplified uncover 4; uncover 4; uncover 4; uncover 4; uncover 4 to 
debug: Simplified uncover 3; uncover 3; uncover 3; uncover 3 to 
debug: Simplified uncover 2; uncover 2; uncover 2 to 
debug: Inserted _check_is_governor_block@0.ops[12]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced _check_is_governor_block@0.ops[14]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted _check_is_governor_block@0.ops[5]: 'store app_global_get_ex_did_exist%2#0 to l-stack (copy)'
debug: Replaced _check_is_governor_block@0.ops[8]: 'load app_global_get_ex_did_exist%2#0' with 'load app_global_get_ex_did_exist%2#0 from l-stack (no copy)'
debug: Inserted _check_is_governor_block@0.ops[7]: 'store app_global_get_ex_value%1#0 to l-stack (copy)'
debug: Replaced _check_is_governor_block@0.ops[12]: 'load app_global_get_ex_value%1#0' with 'load app_global_get_ex_value%1#0 from l-stack (no copy)'
debug: Inserted _check_is_governor_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced _check_is_governor_block@0.ops[12]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[9]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[11]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[15]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[17]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[20]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[22]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[32]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[34]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[38]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[40]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[43]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[45]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[50]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[52]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[92]: 'store val_as_bytes%18#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[94]: 'load val_as_bytes%18#0' with 'load val_as_bytes%18#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[3]: 'store app_global_get_ex_did_exist%1#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[6]: 'load app_global_get_ex_did_exist%1#0' with 'load app_global_get_ex_did_exist%1#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[29]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[32]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[63]: 'store new_state_value%11#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[66]: 'load new_state_value%11#0' with 'load new_state_value%11#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[71]: 'store app_global_get_ex_did_exist%13#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[74]: 'load app_global_get_ex_did_exist%13#0' with 'load app_global_get_ex_did_exist%13#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[81]: 'store app_global_get_ex_did_exist%15#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[84]: 'load app_global_get_ex_did_exist%15#0' with 'load app_global_get_ex_did_exist%15#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[91]: 'store app_global_get_ex_did_exist%17#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[94]: 'load app_global_get_ex_did_exist%17#0' with 'load app_global_get_ex_did_exist%17#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[5]: 'store app_global_get_ex_value%0#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[9]: 'load app_global_get_ex_value%0#0' with 'load app_global_get_ex_value%0#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[28]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[33]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[75]: 'store app_global_get_ex_value%12#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[79]: 'load app_global_get_ex_value%12#0' with 'load app_global_get_ex_value%12#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[86]: 'store app_global_get_ex_value%14#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[90]: 'load app_global_get_ex_value%14#0' with 'load app_global_get_ex_value%14#0 from l-stack (no copy)'
debug: Inserted bootstrap_block@0.ops[97]: 'store app_global_get_ex_value%16#0 to l-stack (copy)'
debug: Replaced bootstrap_block@0.ops[101]: 'load app_global_get_ex_value%16#0' with 'load app_global_get_ex_value%16#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[19]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[21]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[41]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[43]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[52]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[54]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[57]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[59]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[65]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[67]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[6]: 'store app_global_get_ex_did_exist%3#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[9]: 'load app_global_get_ex_did_exist%3#0' with 'load app_global_get_ex_did_exist%3#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[13]: 'store maybe_value_did_exist%1#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[16]: 'load maybe_value_did_exist%1#0' with 'load maybe_value_did_exist%1#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[30]: 'store app_global_get_ex_did_exist%9#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[33]: 'load app_global_get_ex_did_exist%9#0' with 'load app_global_get_ex_did_exist%9#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[37]: 'store maybe_value_did_exist%7#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[40]: 'load maybe_value_did_exist%7#0' with 'load maybe_value_did_exist%7#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[8]: 'store app_global_get_ex_value%2#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[12]: 'load app_global_get_ex_value%2#0' with 'load app_global_get_ex_value%2#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[33]: 'store app_global_get_ex_value%8#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[37]: 'load app_global_get_ex_value%8#0' with 'load app_global_get_ex_value%8#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[16]: 'store maybe_value%0#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[21]: 'load maybe_value%0#0' with 'load maybe_value%0#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[42]: 'store maybe_value%6#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[47]: 'load maybe_value%6#0' with 'load maybe_value%6#0 from l-stack (no copy)'
debug: Inserted _create_pool_token_block@0.ops[28]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced _create_pool_token_block@0.ops[47]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted _do_opt_in_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced _do_opt_in_block@0.ops[3]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[11]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[13]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[25]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[27]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[39]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[41]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[51]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[53]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[63]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[65]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[75]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[77]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[92]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[94]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[98]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[100]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[103]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[105]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[115]: 'store tmp%26#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[117]: 'load tmp%26#0' with 'load tmp%26#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[132]: 'store tmp%30#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[134]: 'load tmp%30#0' with 'load tmp%30#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[138]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[140]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[143]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[145]: 'load tmp%32#0' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[165]: 'store to_mint#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[167]: 'load to_mint#0' with 'load to_mint#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[170]: 'store tmp%38#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[172]: 'load tmp%38#0' with 'load tmp%38#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[4]: 'store app_global_get_ex_did_exist%1#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[7]: 'load app_global_get_ex_did_exist%1#0' with 'load app_global_get_ex_did_exist%1#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[19]: 'store app_global_get_ex_did_exist%4#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[22]: 'load app_global_get_ex_did_exist%4#0' with 'load app_global_get_ex_did_exist%4#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[34]: 'store app_global_get_ex_did_exist%7#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[37]: 'load app_global_get_ex_did_exist%7#0' with 'load app_global_get_ex_did_exist%7#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[50]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[53]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[63]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[66]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[76]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[79]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[91]: 'store app_global_get_ex_did_exist%20#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[94]: 'load app_global_get_ex_did_exist%20#0' with 'load app_global_get_ex_did_exist%20#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[118]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[121]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[133]: 'store app_global_get_ex_did_exist%29#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[136]: 'load app_global_get_ex_did_exist%29#0' with 'load app_global_get_ex_did_exist%29#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[188]: 'store app_global_get_ex_did_exist%41#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[191]: 'load app_global_get_ex_did_exist%41#0' with 'load app_global_get_ex_did_exist%41#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[48]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[53]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[62]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[67]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[76]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[81]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[119]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[124]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[6]: 'store app_global_get_ex_value%0#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[11]: 'load app_global_get_ex_value%0#0' with 'load app_global_get_ex_value%0#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[22]: 'store app_global_get_ex_value%3#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[27]: 'load app_global_get_ex_value%3#0' with 'load app_global_get_ex_value%3#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[38]: 'store app_global_get_ex_value%6#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[43]: 'load app_global_get_ex_value%6#0' with 'load app_global_get_ex_value%6#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[99]: 'store app_global_get_ex_value%19#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[104]: 'load app_global_get_ex_value%19#0' with 'load app_global_get_ex_value%19#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[143]: 'store app_global_get_ex_value%28#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[148]: 'load app_global_get_ex_value%28#0' with 'load app_global_get_ex_value%28#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[199]: 'store app_global_get_ex_value%40#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[204]: 'load app_global_get_ex_value%40#0' with 'load app_global_get_ex_value%40#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[176]: 'store tmp%37#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[182]: 'load tmp%37#0' with 'load tmp%37#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[173]: 'store tmp%36#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[182]: 'load tmp%36#0' with 'load tmp%36#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[93]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[104]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[138]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[149]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[197]: 'store tmp%39#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[208]: 'load tmp%39#0' with 'load tmp%39#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[172]: 'store tmp%35#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[184]: 'load tmp%35#0' with 'load tmp%35#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[170]: 'store tmp%34#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[184]: 'load tmp%34#0' with 'load tmp%34#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[168]: 'store tmp%33#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[184]: 'load tmp%33#0' with 'load tmp%33#0 from l-stack (no copy)'
debug: Inserted mint_block@0.ops[193]: 'store to_mint#0 to l-stack (copy)'
debug: Replaced mint_block@0.ops[214]: 'load to_mint#0' with 'load to_mint#0 from l-stack (no copy)'
debug: Simplified uncover 4; uncover 4; uncover 4; uncover 4; uncover 4 to 
debug: Inserted _check_bootstrapped_block@0.ops[3]: 'store app_global_get_ex_did_exist%1#0 to l-stack (copy)'
debug: Replaced _check_bootstrapped_block@0.ops[6]: 'load app_global_get_ex_did_exist%1#0' with 'load app_global_get_ex_did_exist%1#0 from l-stack (no copy)'
debug: Inserted _check_bootstrapped_block@0.ops[5]: 'store app_global_get_ex_value%0#0 to l-stack (copy)'
debug: Replaced _check_bootstrapped_block@0.ops[9]: 'load app_global_get_ex_value%0#0' with 'load app_global_get_ex_value%0#0 from l-stack (no copy)'
debug: Inserted _current_pool_balance_block@0.ops[5]: 'store app_global_get_ex_did_exist%4#0 to l-stack (copy)'
debug: Replaced _current_pool_balance_block@0.ops[8]: 'load app_global_get_ex_did_exist%4#0' with 'load app_global_get_ex_did_exist%4#0 from l-stack (no copy)'
debug: Inserted _current_pool_balance_block@0.ops[13]: 'store maybe_value_did_exist%1#0 to l-stack (copy)'
debug: Replaced _current_pool_balance_block@0.ops[16]: 'load maybe_value_did_exist%1#0' with 'load maybe_value_did_exist%1#0 from l-stack (no copy)'
debug: Inserted _current_pool_balance_block@0.ops[15]: 'store maybe_value%0#0 to l-stack (copy)'
debug: Replaced _current_pool_balance_block@0.ops[19]: 'load maybe_value%0#0' with 'load maybe_value%0#0 from l-stack (no copy)'
debug: Inserted _current_pool_balance_block@0.ops[7]: 'store app_global_get_ex_value%3#0 to l-stack (copy)'
debug: Replaced _current_pool_balance_block@0.ops[12]: 'load app_global_get_ex_value%3#0' with 'load app_global_get_ex_value%3#0 from l-stack (no copy)'
debug: Inserted _current_pool_balance_block@0.ops[1]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced _current_pool_balance_block@0.ops[12]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted _current_a_balance_block@0.ops[5]: 'store app_global_get_ex_did_exist%4#0 to l-stack (copy)'
debug: Replaced _current_a_balance_block@0.ops[8]: 'load app_global_get_ex_did_exist%4#0' with 'load app_global_get_ex_did_exist%4#0 from l-stack (no copy)'
debug: Inserted _current_a_balance_block@0.ops[13]: 'store maybe_value_did_exist%1#0 to l-stack (copy)'
debug: Replaced _current_a_balance_block@0.ops[16]: 'load maybe_value_did_exist%1#0' with 'load maybe_value_did_exist%1#0 from l-stack (no copy)'
debug: Inserted _current_a_balance_block@0.ops[15]: 'store maybe_value%0#0 to l-stack (copy)'
debug: Replaced _current_a_balance_block@0.ops[19]: 'load maybe_value%0#0' with 'load maybe_value%0#0 from l-stack (no copy)'
debug: Inserted _current_a_balance_block@0.ops[7]: 'store app_global_get_ex_value%3#0 to l-stack (copy)'
debug: Replaced _current_a_balance_block@0.ops[12]: 'load app_global_get_ex_value%3#0' with 'load app_global_get_ex_value%3#0 from l-stack (no copy)'
debug: Inserted _current_a_balance_block@0.ops[1]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced _current_a_balance_block@0.ops[12]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted _current_b_balance_block@0.ops[5]: 'store app_global_get_ex_did_exist%4#0 to l-stack (copy)'
debug: Replaced _current_b_balance_block@0.ops[8]: 'load app_global_get_ex_did_exist%4#0' with 'load app_global_get_ex_did_exist%4#0 from l-stack (no copy)'
debug: Inserted _current_b_balance_block@0.ops[13]: 'store maybe_value_did_exist%1#0 to l-stack (copy)'
debug: Replaced _current_b_balance_block@0.ops[16]: 'load maybe_value_did_exist%1#0' with 'load maybe_value_did_exist%1#0 from l-stack (no copy)'
debug: Inserted _current_b_balance_block@0.ops[15]: 'store maybe_value%0#0 to l-stack (copy)'
debug: Replaced _current_b_balance_block@0.ops[19]: 'load maybe_value%0#0' with 'load maybe_value%0#0 from l-stack (no copy)'
debug: Inserted _current_b_balance_block@0.ops[7]: 'store app_global_get_ex_value%3#0 to l-stack (copy)'
debug: Replaced _current_b_balance_block@0.ops[12]: 'load app_global_get_ex_value%3#0' with 'load app_global_get_ex_value%3#0 from l-stack (no copy)'
debug: Inserted _current_b_balance_block@0.ops[1]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced _current_b_balance_block@0.ops[12]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_and_contd@1.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_and_contd@1.ops[5]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_bool_true@2.ops[1]: 'store and_result%2#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_bool_true@2.ops[3]: 'load and_result%2#0' with 'load and_result%2#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_bool_false@3.ops[1]: 'store and_result%2#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_bool_false@3.ops[3]: 'load and_result%2#0' with 'load and_result%2#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_if_body@5.ops[3]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_if_body@5.ops[5]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_if_body@5.ops[7]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_if_body@5.ops[9]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_if_body@5.ops[12]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_if_body@5.ops[14]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_after_if_else@6.ops[31]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_after_if_else@6.ops[33]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_after_if_else@6.ops[11]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_after_if_else@6.ops[14]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_after_if_else@6.ops[24]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_after_if_else@6.ops[27]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_after_if_else@6.ops[29]: 'store b_ratio#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_after_if_else@6.ops[32]: 'load b_ratio#0' with 'load b_ratio#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_after_if_else@6.ops[7]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_after_if_else@6.ops[14]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_after_if_else@6.ops[21]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_after_if_else@6.ops[28]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_after_if_else@6.ops[17]: 'store a_ratio#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_after_if_else@6.ops[34]: 'load a_ratio#0' with 'load a_ratio#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_if_body@7.ops[3]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_if_body@7.ops[5]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_if_body@7.ops[8]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_if_body@7.ops[10]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_else_body@8.ops[3]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_else_body@8.ops[5]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted tokens_to_mint_else_body@8.ops[8]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced tokens_to_mint_else_body@8.ops[10]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Found 4 edge set/s for examples.amm.contract.tokens_to_mint
debug: Allocated 2 variable/s to x-stack: is_initial_mint#0, issued#0
debug: shared x-stack for tokens_to_mint_bool_true@2 -> tokens_to_mint_bool_merge@4: is_initial_mint#0
debug: shared x-stack for tokens_to_mint_bool_false@3 -> tokens_to_mint_bool_merge@4: is_initial_mint#0
debug: shared x-stack for tokens_to_mint_after_if_else@6 -> tokens_to_mint_if_body@7: issued#0
debug: shared x-stack for tokens_to_mint_after_if_else@6 -> tokens_to_mint_else_body@8: issued#0
debug: examples.amm.contract.tokens_to_mint f-stack entry: ['a_ratio#0', 'b_ratio#0']
debug: examples.amm.contract.tokens_to_mint f-stack on first store: []
debug: Inserted _update_ratio_block@0.ops[7]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced _update_ratio_block@0.ops[9]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted _update_ratio_block@0.ops[12]: 'store new_state_value%1#0 to l-stack (copy)'
debug: Replaced _update_ratio_block@0.ops[15]: 'load new_state_value%1#0' with 'load new_state_value%1#0 from l-stack (no copy)'
debug: Inserted _update_ratio_block@0.ops[1]: 'store a_balance#0 to l-stack (copy)'
debug: Replaced _update_ratio_block@0.ops[5]: 'load a_balance#0' with 'load a_balance#0 from l-stack (no copy)'
debug: Inserted _update_ratio_block@0.ops[4]: 'store b_balance#0 to l-stack (copy)'
debug: Replaced _update_ratio_block@0.ops[12]: 'load b_balance#0' with 'load b_balance#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[11]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[13]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[25]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[27]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[39]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[41]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[51]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[53]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[57]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[59]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[62]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[64]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[79]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[81]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[91]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[93]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[4]: 'store app_global_get_ex_did_exist%1#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[7]: 'load app_global_get_ex_did_exist%1#0' with 'load app_global_get_ex_did_exist%1#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[19]: 'store app_global_get_ex_did_exist%4#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[22]: 'load app_global_get_ex_did_exist%4#0' with 'load app_global_get_ex_did_exist%4#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[34]: 'store app_global_get_ex_did_exist%7#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[37]: 'load app_global_get_ex_did_exist%7#0' with 'load app_global_get_ex_did_exist%7#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[50]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[53]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[76]: 'store app_global_get_ex_did_exist%16#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[79]: 'load app_global_get_ex_did_exist%16#0' with 'load app_global_get_ex_did_exist%16#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[92]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[95]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[128]: 'store app_global_get_ex_did_exist%27#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[131]: 'load app_global_get_ex_did_exist%27#0' with 'load app_global_get_ex_did_exist%27#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[142]: 'store app_global_get_ex_did_exist%30#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[145]: 'load app_global_get_ex_did_exist%30#0' with 'load app_global_get_ex_did_exist%30#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[48]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[53]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[91]: 'store tmp%18#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[96]: 'load tmp%18#0' with 'load tmp%18#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[109]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[113]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[120]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[124]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[6]: 'store app_global_get_ex_value%0#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[11]: 'load app_global_get_ex_value%0#0' with 'load app_global_get_ex_value%0#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[22]: 'store app_global_get_ex_value%3#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[27]: 'load app_global_get_ex_value%3#0' with 'load app_global_get_ex_value%3#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[38]: 'store app_global_get_ex_value%6#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[43]: 'load app_global_get_ex_value%6#0' with 'load app_global_get_ex_value%6#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[82]: 'store app_global_get_ex_value%15#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[87]: 'load app_global_get_ex_value%15#0' with 'load app_global_get_ex_value%15#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[138]: 'store app_global_get_ex_value%26#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[143]: 'load app_global_get_ex_value%26#0' with 'load app_global_get_ex_value%26#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[153]: 'store app_global_get_ex_value%29#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[158]: 'load app_global_get_ex_value%29#0' with 'load app_global_get_ex_value%29#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[110]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[117]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[122]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[129]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[108]: 'store pool_balance#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[117]: 'load pool_balance#0' with 'load pool_balance#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[76]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[87]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[136]: 'store tmp%25#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[147]: 'load tmp%25#0' with 'load tmp%25#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[152]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[163]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[119]: 'store pool_balance#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[131]: 'load pool_balance#0' with 'load pool_balance#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[123]: 'store a_amt#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[151]: 'load a_amt#0' with 'load a_amt#0 from l-stack (no copy)'
debug: Inserted burn_block@0.ops[136]: 'store b_amt#0 to l-stack (copy)'
debug: Replaced burn_block@0.ops[168]: 'load b_amt#0' with 'load b_amt#0 from l-stack (no copy)'
debug: Simplified uncover 2; uncover 2 to cover 2
debug: Simplified uncover 2; uncover 2; uncover 2 to 
debug: Inserted tokens_to_burn_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced tokens_to_burn_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted tokens_to_burn_block@0.ops[12]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced tokens_to_burn_block@0.ops[14]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted tokens_to_burn_block@0.ops[17]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced tokens_to_burn_block@0.ops[19]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted tokens_to_burn_block@0.ops[8]: 'store issued#0 to l-stack (copy)'
debug: Replaced tokens_to_burn_block@0.ops[16]: 'load issued#0' with 'load issued#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[11]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[13]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[25]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[27]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[31]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[33]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[36]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[38]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[48]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[50]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[4]: 'store app_global_get_ex_did_exist%1#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[7]: 'load app_global_get_ex_did_exist%1#0' with 'load app_global_get_ex_did_exist%1#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[19]: 'store app_global_get_ex_did_exist%4#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[22]: 'load app_global_get_ex_did_exist%4#0' with 'load app_global_get_ex_did_exist%4#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[46]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[49]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[58]: 'store app_global_get_ex_did_exist%12#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[61]: 'load app_global_get_ex_did_exist%12#0' with 'load app_global_get_ex_did_exist%12#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[66]: 'store app_global_get_ex_did_exist%14#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[69]: 'load app_global_get_ex_did_exist%14#0' with 'load app_global_get_ex_did_exist%14#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[44]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[49]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[74]: 'store awst_tmp%15#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[78]: 'load awst_tmp%15#0' with 'load awst_tmp%15#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[6]: 'store app_global_get_ex_value%0#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[11]: 'load app_global_get_ex_value%0#0' with 'load app_global_get_ex_value%0#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[22]: 'store app_global_get_ex_value%3#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[27]: 'load app_global_get_ex_value%3#0' with 'load app_global_get_ex_value%3#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[71]: 'store app_global_get_ex_value%13#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[80]: 'load app_global_get_ex_value%13#0' with 'load app_global_get_ex_value%13#0 from l-stack (no copy)'
debug: Inserted swap_block@0.ops[63]: 'store app_global_get_ex_value%11#0 to l-stack (copy)'
debug: Replaced swap_block@0.ops[80]: 'load app_global_get_ex_value%11#0' with 'load app_global_get_ex_value%11#0 from l-stack (no copy)'
debug: Inserted swap_switch_case_0@1.ops[7]: 'store app_global_get_ex_did_exist%17#0 to l-stack (copy)'
debug: Replaced swap_switch_case_0@1.ops[10]: 'load app_global_get_ex_did_exist%17#0' with 'load app_global_get_ex_did_exist%17#0 from l-stack (no copy)'
debug: Inserted swap_switch_case_1@2.ops[7]: 'store app_global_get_ex_did_exist%19#0 to l-stack (copy)'
debug: Replaced swap_switch_case_1@2.ops[10]: 'load app_global_get_ex_did_exist%19#0' with 'load app_global_get_ex_did_exist%19#0 from l-stack (no copy)'
debug: Inserted swap_switch_case_next@4.ops[2]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced swap_switch_case_next@4.ops[4]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted swap_switch_case_next@4.ops[8]: 'store to_swap#0 to l-stack (copy)'
debug: Replaced swap_switch_case_next@4.ops[10]: 'load to_swap#0' with 'load to_swap#0 from l-stack (no copy)'
debug: Inserted swap_switch_case_next@4.ops[13]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced swap_switch_case_next@4.ops[15]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted swap_switch_case_next@4.ops[18]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced swap_switch_case_next@4.ops[20]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted swap_switch_case_next@4.ops[11]: 'store to_swap#0 to l-stack (copy)'
debug: Replaced swap_switch_case_next@4.ops[23]: 'load to_swap#0' with 'load to_swap#0 from l-stack (no copy)'
debug: Found 2 edge set/s for examples.amm.contract.ConstantProductAMM.swap
debug: Allocated 1 variable/s to x-stack: out_supply#0
debug: shared x-stack for swap_switch_case_0@1 -> swap_switch_case_next@4: out_supply#0
debug: shared x-stack for swap_switch_case_1@2 -> swap_switch_case_next@4: out_supply#0
debug: examples.amm.contract.ConstantProductAMM.swap f-stack entry: ['in_supply#0', 'out_asset#0']
debug: examples.amm.contract.ConstantProductAMM.swap f-stack on first store: []
debug: Simplified uncover 2; uncover 2; uncover 2 to 
debug: Inserted tokens_to_swap_block@0.ops[19]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced tokens_to_swap_block@0.ops[21]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted tokens_to_swap_block@0.ops[24]: 'store out_total#0 to l-stack (copy)'
debug: Replaced tokens_to_swap_block@0.ops[26]: 'load out_total#0' with 'load out_total#0 from l-stack (no copy)'
debug: Inserted tokens_to_swap_block@0.ops[29]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced tokens_to_swap_block@0.ops[31]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted tokens_to_swap_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced tokens_to_swap_block@0.ops[6]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted tokens_to_swap_block@0.ops[12]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced tokens_to_swap_block@0.ops[15]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted tokens_to_swap_block@0.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced tokens_to_swap_block@0.ops[15]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted tokens_to_swap_block@0.ops[18]: 'store in_total#0 to l-stack (copy)'
debug: Replaced tokens_to_swap_block@0.ops[31]: 'load in_total#0' with 'load in_total#0 from l-stack (no copy)'
debug: Inserted __init___block@0.ops[7]: 'store new_state_value%0#0 to l-stack (copy)'
debug: Replaced __init___block@0.ops[10]: 'load new_state_value%0#0' with 'load new_state_value%0#0 from l-stack (no copy)'
debug: Simplified txn Sender; byte "governor"; swap to byte "governor"; txn Sender
info: Writing amm/out/contract.approval.teal
info: Writing amm/out/contract.approval.debug.teal
info: Writing amm/out/contract.clear.teal
info: Writing amm/out/contract.clear.debug.teal
info: Writing amm/out/application.json
>> exit code = 0