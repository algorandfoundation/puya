#pragma version 10

examples.amm.contract.ConstantProductAMM.approval_program:
    intcblock 0 1 1000 4 10000000000
    bytecblock "asset_a" "asset_b" "pool_token" "governor" "ratio"
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// examples.amm.contract.ConstantProductAMM.__init__() -> void:
__init__:
    proto 0 0
    bytec_0 // "asset_a"
    intc_0 // 0
    app_global_put
    bytec_1 // "asset_b"
    intc_0 // 0
    app_global_put
    bytec_3 // "governor"
    txn Sender
    app_global_put
    bytec_2 // "pool_token"
    intc_0 // 0
    app_global_put
    bytec 4 // "ratio"
    intc_0 // 0
    app_global_put
    retsub


// examples.amm.contract.ConstantProductAMM.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@9
    pushbytess 0x08a956f7 0x6b59d965 0x5cbf1e2d 0x1436c2ac 0x4a88e055 // method "set_governor(account)void", method "bootstrap(pay,asset,asset)uint64", method "mint(axfer,axfer,asset,asset,asset)void", method "burn(axfer,asset,asset,asset)void", method "swap(axfer,asset,asset)void"
    txna ApplicationArgs 0
    match __puya_arc4_router___set_governor_route@2 __puya_arc4_router___bootstrap_route@3 __puya_arc4_router___mint_route@4 __puya_arc4_router___burn_route@5 __puya_arc4_router___swap_route@6
    intc_0 // 0
    retsub

__puya_arc4_router___set_governor_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    callsub set_governor
    intc_1 // 1
    retsub

__puya_arc4_router___bootstrap_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    callsub bootstrap
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___mint_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    btoi
    txnas Assets
    callsub mint
    intc_1 // 1
    retsub

__puya_arc4_router___burn_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    btoi
    txnas Assets
    callsub burn
    intc_1 // 1
    retsub

__puya_arc4_router___swap_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    callsub swap
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@9:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@13:
    intc_0 // 0
    retsub


// examples.amm.contract.ConstantProductAMM.set_governor(new_governor: bytes) -> void:
set_governor:
    proto 1 0
    callsub _check_is_governor
    bytec_3 // "governor"
    frame_dig -1
    app_global_put
    retsub


// examples.amm.contract.ConstantProductAMM._check_is_governor() -> void:
_check_is_governor:
    proto 0 0
    txn Sender
    intc_0 // 0
    bytec_3 // "governor"
    app_global_get_ex
    assert // check self.governor exists
    ==
    assert // Only the account set in global_state.governor may call this method
    retsub


// examples.amm.contract.ConstantProductAMM.bootstrap(seed: uint64, a_asset: uint64, b_asset: uint64) -> uint64:
bootstrap:
    proto 3 1
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    !
    assert // application has already been bootstrapped
    callsub _check_is_governor
    global GroupSize
    pushint 2 // 2
    ==
    assert // group size not 2
    frame_dig -3
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // receiver not app address
    frame_dig -3
    gtxns Amount
    pushint 300000 // 300000
    >=
    assert // amount minimum not met
    frame_dig -2
    frame_dig -1
    <
    assert // asset a must be less than asset b
    bytec_0 // "asset_a"
    frame_dig -2
    app_global_put
    bytec_1 // "asset_b"
    frame_dig -1
    app_global_put
    callsub _create_pool_token
    bytec_2 // "pool_token"
    swap
    app_global_put
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    callsub _do_opt_in
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    callsub _do_opt_in
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    retsub


// examples.amm.contract.ConstantProductAMM._create_pool_token() -> uint64:
_create_pool_token:
    proto 0 1
    itxn_begin
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    asset_params_get AssetUnitName
    assert // asset exists
    pushbytes 0x4450542d
    swap
    concat
    pushbytes 0x2d
    concat
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    asset_params_get AssetUnitName
    assert // asset exists
    concat
    global CurrentApplicationAddress
    dup
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    pushint 3 // 3
    itxn_field ConfigAssetDecimals
    intc 4 // 10000000000
    itxn_field ConfigAssetTotal
    pushbytes 0x646274
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetName
    pushint 3 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedAssetID
    retsub


// examples.amm.contract.ConstantProductAMM._do_opt_in(asset: uint64) -> void:
_do_opt_in:
    proto 1 0
    global CurrentApplicationAddress
    frame_dig -1
    intc_0 // 0
    callsub do_asset_transfer
    retsub


// examples.amm.contract.do_asset_transfer(receiver: bytes, asset: uint64, amount: uint64) -> void:
do_asset_transfer:
    proto 3 0
    itxn_begin
    frame_dig -3
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    intc_3 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub


// examples.amm.contract.ConstantProductAMM.mint(a_xfer: uint64, b_xfer: uint64, pool_asset: uint64, a_asset: uint64, b_asset: uint64) -> void:
mint:
    proto 5 0
    callsub _check_bootstrapped
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    frame_dig -3
    ==
    assert // asset pool incorrect
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    frame_dig -2
    ==
    assert // asset a incorrect
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    frame_dig -1
    ==
    assert // asset b incorrect
    frame_dig -5
    gtxns Sender
    txn Sender
    ==
    assert // sender invalid
    frame_dig -4
    gtxns Sender
    txn Sender
    ==
    assert // sender invalid
    frame_dig -5
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // receiver not app address
    frame_dig -5
    gtxns XferAsset
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    ==
    assert // asset a incorrect
    frame_dig -5
    gtxns AssetAmount
    dup
    assert // amount minimum not met
    frame_dig -4
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // receiver not app address
    frame_dig -4
    gtxns XferAsset
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    ==
    assert // asset b incorrect
    frame_dig -4
    gtxns AssetAmount
    dup
    assert // amount minimum not met
    callsub _current_pool_balance
    callsub _current_a_balance
    callsub _current_b_balance
    uncover 4
    uncover 4
    callsub tokens_to_mint
    dup
    assert // send amount too low
    txn Sender
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    uncover 2
    callsub do_asset_transfer
    callsub _update_ratio
    retsub


// examples.amm.contract.ConstantProductAMM._check_bootstrapped() -> void:
_check_bootstrapped:
    proto 0 0
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    assert // bootstrap method needs to be called first
    retsub


// examples.amm.contract.ConstantProductAMM._current_pool_balance() -> uint64:
_current_pool_balance:
    proto 0 1
    global CurrentApplicationAddress
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    asset_holding_get AssetBalance
    assert // account opted into asset
    retsub


// examples.amm.contract.ConstantProductAMM._current_a_balance() -> uint64:
_current_a_balance:
    proto 0 1
    global CurrentApplicationAddress
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    asset_holding_get AssetBalance
    assert // account opted into asset
    retsub


// examples.amm.contract.ConstantProductAMM._current_b_balance() -> uint64:
_current_b_balance:
    proto 0 1
    global CurrentApplicationAddress
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    asset_holding_get AssetBalance
    assert // account opted into asset
    retsub


// examples.amm.contract.tokens_to_mint(pool_balance: uint64, a_balance: uint64, b_balance: uint64, a_amount: uint64, b_amount: uint64) -> uint64:
tokens_to_mint:
    proto 5 1
    pushbytes ""
    dup
    frame_dig -4
    frame_dig -2
    ==
    bz tokens_to_mint_bool_false@3
    frame_dig -3
    frame_dig -1
    ==
    bz tokens_to_mint_bool_false@3
    intc_1 // 1
    b tokens_to_mint_bool_merge@4

tokens_to_mint_bool_false@3:
    intc_0 // 0

tokens_to_mint_bool_merge@4:
    bz tokens_to_mint_after_if_else@6
    frame_dig -2
    frame_dig -1
    *
    sqrt
    intc_2 // 1000
    -
    frame_bury 0
    retsub

tokens_to_mint_after_if_else@6:
    intc 4 // 10000000000
    frame_dig -5
    -
    intc_2 // 1000
    frame_dig -2
    *
    frame_dig -4
    frame_dig -2
    -
    /
    dup
    frame_bury 0
    intc_2 // 1000
    frame_dig -1
    *
    frame_dig -3
    frame_dig -1
    -
    /
    dup
    frame_bury 1
    <
    bz tokens_to_mint_else_body@8
    frame_dig 0
    *
    intc_2 // 1000
    /
    frame_bury 0
    retsub

tokens_to_mint_else_body@8:
    frame_dig 1
    *
    intc_2 // 1000
    /
    frame_bury 0
    retsub


// examples.amm.contract.ConstantProductAMM._update_ratio() -> void:
_update_ratio:
    proto 0 0
    callsub _current_a_balance
    callsub _current_b_balance
    swap
    intc_2 // 1000
    *
    swap
    /
    bytec 4 // "ratio"
    swap
    app_global_put
    retsub


// examples.amm.contract.ConstantProductAMM.burn(pool_xfer: uint64, pool_asset: uint64, a_asset: uint64, b_asset: uint64) -> void:
burn:
    proto 4 0
    callsub _check_bootstrapped
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    frame_dig -3
    ==
    assert // asset pool incorrect
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    frame_dig -2
    ==
    assert // asset a incorrect
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    frame_dig -1
    ==
    assert // asset b incorrect
    frame_dig -4
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // receiver not app address
    frame_dig -4
    gtxns AssetAmount
    dup
    assert // amount minimum not met
    frame_dig -4
    gtxns XferAsset
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    ==
    assert // asset pool incorrect
    frame_dig -4
    gtxns Sender
    txn Sender
    ==
    assert // sender invalid
    callsub _current_pool_balance
    callsub _current_a_balance
    dig 1
    swap
    dig 3
    callsub tokens_to_burn
    callsub _current_b_balance
    uncover 2
    swap
    uncover 3
    callsub tokens_to_burn
    txn Sender
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    uncover 3
    callsub do_asset_transfer
    txn Sender
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    uncover 2
    callsub do_asset_transfer
    callsub _update_ratio
    retsub


// examples.amm.contract.tokens_to_burn(pool_balance: uint64, supply: uint64, amount: uint64) -> uint64:
tokens_to_burn:
    proto 3 1
    intc 4 // 10000000000
    frame_dig -3
    -
    frame_dig -1
    -
    frame_dig -2
    frame_dig -1
    *
    swap
    /
    retsub


// examples.amm.contract.ConstantProductAMM.swap(swap_xfer: uint64, a_asset: uint64, b_asset: uint64) -> void:
swap:
    proto 3 0
    pushbytes ""
    dup
    callsub _check_bootstrapped
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    frame_dig -2
    ==
    assert // asset a incorrect
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    frame_dig -1
    ==
    assert // asset b incorrect
    frame_dig -3
    gtxns AssetAmount
    dup
    assert // amount minimum not met
    frame_dig -3
    gtxns Sender
    txn Sender
    ==
    assert // sender invalid
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    frame_dig -3
    gtxns XferAsset
    match swap_switch_case_0@1 swap_switch_case_1@2
    err // asset id incorrect

swap_switch_case_0@1:
    callsub _current_b_balance
    frame_bury 0
    callsub _current_a_balance
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    swap
    frame_bury 1
    assert // check self.asset_a exists
    b swap_switch_case_next@4

swap_switch_case_1@2:
    callsub _current_a_balance
    frame_bury 0
    callsub _current_b_balance
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    swap
    frame_bury 1
    assert // check self.asset_b exists

swap_switch_case_next@4:
    frame_dig 2
    frame_dig 0
    uncover 2
    callsub tokens_to_swap
    dup
    assert // send amount too low
    txn Sender
    frame_dig 1
    uncover 2
    callsub do_asset_transfer
    callsub _update_ratio
    retsub


// examples.amm.contract.tokens_to_swap(in_amount: uint64, in_supply: uint64, out_supply: uint64) -> uint64:
tokens_to_swap:
    proto 3 1
    frame_dig -2
    frame_dig -3
    -
    intc_2 // 1000
    *
    frame_dig -3
    pushint 995 // 995
    *
    swap
    dig 1
    +
    swap
    frame_dig -1
    *
    swap
    /
    retsub
