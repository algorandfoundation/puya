#pragma version 10
#pragma typetrack false

// examples.amm.contract.ConstantProductAMM.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 1000 4 10000000000
    bytecblock "asset_a" "asset_b" "pool_token" "governor" "ratio"
    pushbytes ""
    dupn 9
    txn ApplicationID
    bnz main_after_if_else@2
    bytec_0 // "asset_a"
    intc_0 // 0
    app_global_put
    bytec_1 // "asset_b"
    intc_0 // 0
    app_global_put
    bytec_3 // "governor"
    txn Sender
    app_global_put
    bytec_2 // "pool_token"
    intc_0 // 0
    app_global_put
    bytec 4 // "ratio"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    txn NumAppArgs
    bz main_bare_routing@14
    pushbytess 0x08a956f7 0x6b59d965 0x5cbf1e2d 0x1436c2ac 0x4a88e055 // method "set_governor(account)void", method "bootstrap(pay,asset,asset)uint64", method "mint(axfer,axfer,asset,asset,asset)void", method "burn(axfer,asset,asset,asset)void", method "swap(axfer,asset,asset)void"
    txna ApplicationArgs 0
    match main_set_governor_route@5 main_bootstrap_route@6 main_mint_route@7 main_burn_route@8 main_swap_route@9

main_after_if_else@16:
    intc_0 // 0
    return

main_swap_route@9:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    assert // bootstrap method needs to be called first
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    uncover 2
    ==
    assert // asset a incorrect
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    ==
    assert // asset b incorrect
    dup
    gtxns AssetAmount
    dup
    bury 6
    assert // amount minimum not met
    dup
    gtxns Sender
    txn Sender
    ==
    assert // sender invalid
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    uncover 2
    gtxns XferAsset
    match main_switch_case_0@10 main_switch_case_1@11
    err // asset id incorrect

main_switch_case_1@11:
    callsub _current_a_balance
    bury 3
    callsub _current_b_balance
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    swap
    bury 4
    assert // check self.asset_b exists

main_switch_case_next@13:
    dig 3
    dig 5
    dup
    cover 2
    -
    intc_2 // 1000
    *
    swap
    pushint 995 // 995
    *
    swap
    dig 1
    +
    swap
    uncover 2
    *
    swap
    /
    dup
    assert // send amount too low
    txn Sender
    dig 3
    uncover 2
    callsub do_asset_transfer
    callsub _update_ratio
    intc_1 // 1
    return

main_switch_case_0@10:
    callsub _current_b_balance
    bury 3
    callsub _current_a_balance
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    swap
    bury 4
    assert // check self.asset_a exists
    b main_switch_case_next@13

main_burn_route@8:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    btoi
    txnas Assets
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    assert // bootstrap method needs to be called first
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    uncover 3
    ==
    assert // asset pool incorrect
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    uncover 2
    ==
    assert // asset a incorrect
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    ==
    assert // asset b incorrect
    dup
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // receiver not app address
    dup
    gtxns AssetAmount
    dup
    assert // amount minimum not met
    dig 1
    gtxns XferAsset
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    ==
    assert // asset pool incorrect
    swap
    gtxns Sender
    txn Sender
    ==
    assert // sender invalid
    callsub _current_pool_balance
    callsub _current_a_balance
    intc 4 // 10000000000
    uncover 2
    -
    dig 2
    -
    swap
    dig 2
    *
    dig 1
    /
    callsub _current_b_balance
    uncover 3
    *
    uncover 2
    /
    txn Sender
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    uncover 3
    callsub do_asset_transfer
    txn Sender
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    uncover 2
    callsub do_asset_transfer
    callsub _update_ratio
    intc_1 // 1
    return

main_mint_route@7:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    btoi
    txnas Assets
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    assert // bootstrap method needs to be called first
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    uncover 3
    ==
    assert // asset pool incorrect
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    uncover 2
    ==
    assert // asset a incorrect
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    ==
    assert // asset b incorrect
    dig 1
    gtxns Sender
    txn Sender
    ==
    assert // sender invalid
    dup
    gtxns Sender
    txn Sender
    ==
    assert // sender invalid
    dig 1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // receiver not app address
    dig 1
    gtxns XferAsset
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    ==
    assert // asset a incorrect
    swap
    gtxns AssetAmount
    dup
    bury 12
    dup
    assert // amount minimum not met
    dig 1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert // receiver not app address
    dig 1
    gtxns XferAsset
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    ==
    assert // asset b incorrect
    swap
    gtxns AssetAmount
    dup
    bury 9
    assert // amount minimum not met
    callsub _current_pool_balance
    bury 2
    callsub _current_a_balance
    dup
    bury 11
    callsub _current_b_balance
    bury 8
    ==
    bz main_bool_false@23
    dig 5
    dig 7
    ==
    bz main_bool_false@23
    intc_1 // 1

main_bool_merge@24:
    bz main_after_if_else@26
    dig 9
    dig 7
    *
    sqrt
    intc_2 // 1000
    -

main_after_inlined_examples.amm.contract.tokens_to_mint@29:
    dup
    assert // send amount too low
    txn Sender
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    uncover 2
    callsub do_asset_transfer
    callsub _update_ratio
    intc_1 // 1
    return

main_after_if_else@26:
    intc 4 // 10000000000
    dig 1
    -
    intc_2 // 1000
    dig 11
    dup
    cover 2
    *
    dig 11
    uncover 2
    -
    /
    dup
    bury 10
    intc_2 // 1000
    dig 9
    dup
    cover 2
    *
    dig 9
    uncover 2
    -
    /
    dup
    bury 8
    <
    bz main_else_body@28
    dig 8
    *
    intc_2 // 1000
    /
    b main_after_inlined_examples.amm.contract.tokens_to_mint@29

main_else_body@28:
    dig 5
    *
    intc_2 // 1000
    /
    b main_after_inlined_examples.amm.contract.tokens_to_mint@29

main_bool_false@23:
    intc_0 // 0
    b main_bool_merge@24

main_bootstrap_route@6:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    !
    assert // application has already been bootstrapped
    callsub _check_is_governor
    global GroupSize
    pushint 2 // 2
    ==
    assert // group size not 2
    dig 2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // receiver not app address
    uncover 2
    gtxns Amount
    pushint 300000 // 300000
    >=
    assert // amount minimum not met
    dup2
    <
    assert // asset a must be less than asset b
    bytec_0 // "asset_a"
    uncover 2
    app_global_put
    bytec_1 // "asset_b"
    swap
    app_global_put
    itxn_begin
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    asset_params_get AssetUnitName
    assert // asset exists
    pushbytes 0x4450542d
    swap
    concat
    pushbytes 0x2d
    concat
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    asset_params_get AssetUnitName
    assert // asset exists
    concat
    global CurrentApplicationAddress
    dup
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    pushint 3 // 3
    itxn_field ConfigAssetDecimals
    intc 4 // 10000000000
    itxn_field ConfigAssetTotal
    pushbytes 0x646274
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetName
    pushint 3 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    bytec_2 // "pool_token"
    itxn CreatedAssetID
    app_global_put
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    global CurrentApplicationAddress
    swap
    intc_0 // 0
    callsub do_asset_transfer
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    global CurrentApplicationAddress
    swap
    intc_0 // 0
    callsub do_asset_transfer
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_set_governor_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    callsub _check_is_governor
    bytec_3 // "governor"
    swap
    app_global_put
    intc_1 // 1
    return

main_bare_routing@14:
    txn OnCompletion
    bnz main_after_if_else@16
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// examples.amm.contract.ConstantProductAMM._check_is_governor() -> void:
_check_is_governor:
    proto 0 0
    txn Sender
    intc_0 // 0
    bytec_3 // "governor"
    app_global_get_ex
    assert // check self.governor exists
    ==
    assert // Only the account set in global_state.governor may call this method
    retsub


// examples.amm.contract.do_asset_transfer(receiver: bytes, asset: uint64, amount: uint64) -> void:
do_asset_transfer:
    proto 3 0
    itxn_begin
    frame_dig -3
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    intc_3 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub


// examples.amm.contract.ConstantProductAMM._current_pool_balance() -> uint64:
_current_pool_balance:
    proto 0 1
    global CurrentApplicationAddress
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    asset_holding_get AssetBalance
    assert // account opted into asset
    retsub


// examples.amm.contract.ConstantProductAMM._current_a_balance() -> uint64:
_current_a_balance:
    proto 0 1
    global CurrentApplicationAddress
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    asset_holding_get AssetBalance
    assert // account opted into asset
    retsub


// examples.amm.contract.ConstantProductAMM._current_b_balance() -> uint64:
_current_b_balance:
    proto 0 1
    global CurrentApplicationAddress
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    asset_holding_get AssetBalance
    assert // account opted into asset
    retsub


// examples.amm.contract.ConstantProductAMM._update_ratio() -> void:
_update_ratio:
    proto 0 0
    callsub _current_a_balance
    callsub _current_b_balance
    swap
    intc_2 // 1000
    *
    swap
    /
    bytec 4 // "ratio"
    swap
    app_global_put
    retsub
