main examples.amm.contract.ConstantProductAMM.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "asset_a" 0u)
        (app_global_put "asset_b" 0u)
        let materialized_values%0#0: bytes[32] = (txn Sender)
        (app_global_put "governor" materialized_values%0#0)
        (app_global_put "pool_token" 0u)
        (app_global_put "ratio" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#2: uint64 = (txn NumAppArgs)
        goto tmp%0#2 ? block@4 : block@14
    block@4: // abi_routing_L27
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "set_governor(account)void" => block@5, method "bootstrap(pay,asset,asset)uint64" => block@6, method "mint(axfer,axfer,asset,asset,asset)void" => block@7, method "burn(axfer,asset,asset,asset)void" => block@8, method "swap(axfer,asset,asset)void" => block@9, * => block@16}
    block@5: // set_governor_route_L43
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let new_governor#0: bytes[32] = ((txnas Accounts) tmp%7#0)
        examples.amm.contract.ConstantProductAMM._check_is_governor()
        (app_global_put "governor" new_governor#0)
        let examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0
        goto block@17
    block@6: // bootstrap_route_L49
        let tmp%9#0: uint64 = (txn OnCompletion)
        let tmp%10#0: bool = (! tmp%9#0)
        (assert tmp%10#0) // OnCompletion is not NoOp
        let tmp%11#0: uint64 = (txn ApplicationID)
        (assert tmp%11#0) // can only call when not creating
        let tmp%13#0: uint64 = (txn GroupIndex)
        let seed#0: uint64 = (- tmp%13#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) seed#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%14#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let a_asset#0: uint64 = ((txnas Assets) tmp%14#0)
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%16#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let b_asset#0: uint64 = ((txnas Assets) tmp%16#0)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#0) // check self.pool_token exists
        let tmp%0#0: bool = (! maybe_value%0#0)
        (assert tmp%0#0) // application has already been bootstrapped
        examples.amm.contract.ConstantProductAMM._check_is_governor()
        let tmp%1#4: uint64 = (global GroupSize)
        let tmp%2#2: bool = (== tmp%1#4 2u)
        (assert tmp%2#2) // group size not 2
        let tmp%3#2: bytes[32] = ((gtxns Receiver) seed#0)
        let tmp%4#1: bytes[32] = (global CurrentApplicationAddress)
        let tmp%5#2: bool = (== tmp%3#2 tmp%4#1)
        (assert tmp%5#2) // receiver not app address
        let tmp%6#4: uint64 = ((gtxns Amount) seed#0)
        let tmp%7#4: bool = (>= tmp%6#4 300000u)
        (assert tmp%7#4) // amount minimum not met
        let tmp%8#3: bool = (< a_asset#0 b_asset#0)
        (assert tmp%8#3) // asset a must be less than asset b
        (app_global_put "asset_a" a_asset#0)
        (app_global_put "asset_b" b_asset#0)
        itxn_begin
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%0#0) // check self.asset_a exists
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetUnitName) maybe_value%0#0)
        (assert check%0#0) // asset exists
        let tmp%0#9: bytes = (concat 0x4450542d value%0#0)
        let tmp%1#7: bytes = (concat tmp%0#9 0x2d)
        let (value%1#0: bytes, check%1#0: bool) = ((asset_params_get AssetUnitName) b_asset#0)
        (assert check%1#0) // asset exists
        let inner_txn_params%0%%param_ConfigAssetName_idx_0#0: bytes = (concat tmp%1#7 value%1#0)
        let inner_txn_params%0%%param_ConfigAssetManager_idx_0#0: bytes[32] = (global CurrentApplicationAddress)
        let inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0: bytes[32] = (global CurrentApplicationAddress)
        ((itxn_field ConfigAssetReserve) inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0)
        ((itxn_field ConfigAssetManager) inner_txn_params%0%%param_ConfigAssetManager_idx_0#0)
        ((itxn_field ConfigAssetDecimals) 3u)
        ((itxn_field ConfigAssetTotal) 10000000000u)
        ((itxn_field ConfigAssetUnitName) 0x646274)
        ((itxn_field ConfigAssetName) inner_txn_params%0%%param_ConfigAssetName_idx_0#0)
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%2#5: uint64 = (itxn CreatedAssetID)
        (app_global_put "pool_token" tmp%2#5)
        let (asset#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%1#0) // check self.asset_a exists
        let tmp%0#9: bytes = (global CurrentApplicationAddress)
        examples.amm.contract.do_asset_transfer(tmp%0#9, asset#0, 0u)
        let (asset#0: uint64, maybe_exists%2#1: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%2#1) // check self.asset_b exists
        let tmp%0#9: bytes = (global CurrentApplicationAddress)
        examples.amm.contract.do_asset_transfer(tmp%0#9, asset#0, 0u)
        let (maybe_value%3#3: uint64, maybe_exists%3#3: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%3#3) // check self.pool_token exists
        let val_as_bytes%0#0: bytes[8] = (itob maybe_value%3#3)
        let tmp%18#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%18#0)
        let examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0
        goto block@17
    block@7: // mint_route_L81
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        let tmp%23#0: uint64 = (txn GroupIndex)
        let a_xfer#0: uint64 = (- tmp%23#0 2u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) a_xfer#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 axfer)
        (assert gtxn_type_matches%1#0) // transaction type is axfer
        let tmp%24#0: uint64 = (txn GroupIndex)
        let b_xfer#0: uint64 = (- tmp%24#0 1u)
        let gtxn_type%2#0: uint64 = ((gtxns TypeEnum) b_xfer#0)
        let gtxn_type_matches%2#0: bool = (== gtxn_type%2#0 axfer)
        (assert gtxn_type_matches%2#0) // transaction type is axfer
        let reinterpret_Encoded(uint8)%3#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%25#0: uint64 = (btoi reinterpret_Encoded(uint8)%3#0)
        let pool_asset#0: uint64 = ((txnas Assets) tmp%25#0)
        let reinterpret_Encoded(uint8)%4#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%27#0: uint64 = (btoi reinterpret_Encoded(uint8)%4#0)
        let a_asset#0: uint64 = ((txnas Assets) tmp%27#0)
        let reinterpret_Encoded(uint8)%5#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%29#0: uint64 = (btoi reinterpret_Encoded(uint8)%5#0)
        let b_asset#0: uint64 = ((txnas Assets) tmp%29#0)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#0) // check self.pool_token exists
        (assert maybe_value%0#0) // bootstrap method needs to be called first
        let tmp%0#0: bool = (== pool_asset#0 maybe_value%0#0)
        (assert tmp%0#0) // asset pool incorrect
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%1#0) // check self.asset_a exists
        let tmp%1#1: bool = (== a_asset#0 maybe_value%1#0)
        (assert tmp%1#1) // asset a incorrect
        let (maybe_value%2#1: uint64, maybe_exists%2#1: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%2#1) // check self.asset_b exists
        let tmp%2#2: bool = (== b_asset#0 maybe_value%2#1)
        (assert tmp%2#2) // asset b incorrect
        let tmp%3#2: bytes[32] = ((gtxns Sender) a_xfer#0)
        let tmp%4#1: bytes[32] = (txn Sender)
        let tmp%5#2: bool = (== tmp%3#2 tmp%4#1)
        (assert tmp%5#2) // sender invalid
        let tmp%6#3: bytes[32] = ((gtxns Sender) b_xfer#0)
        let tmp%7#3: bytes[32] = (txn Sender)
        let tmp%8#3: bool = (== tmp%6#3 tmp%7#3)
        (assert tmp%8#3) // sender invalid
        let tmp%9#3: bytes[32] = ((gtxns AssetReceiver) a_xfer#0)
        let tmp%10#1: bytes[32] = (global CurrentApplicationAddress)
        let tmp%11#2: bool = (== tmp%9#3 tmp%10#1)
        (assert tmp%11#2) // receiver not app address
        let tmp%12#2: uint64 = ((gtxns XferAsset) a_xfer#0)
        let tmp%13#2: bool = (== tmp%12#2 maybe_value%1#0)
        (assert tmp%13#2) // asset a incorrect
        let a_amount#0: uint64 = ((gtxns AssetAmount) a_xfer#0)
        (assert a_amount#0) // amount minimum not met
        let tmp%16#2: bytes[32] = ((gtxns AssetReceiver) b_xfer#0)
        let tmp%17#1: bytes[32] = (global CurrentApplicationAddress)
        let tmp%18#2: bool = (== tmp%16#2 tmp%17#1)
        (assert tmp%18#2) // receiver not app address
        let tmp%19#0: uint64 = ((gtxns XferAsset) b_xfer#0)
        let tmp%20#0: bool = (== tmp%19#0 maybe_value%2#1)
        (assert tmp%20#0) // asset b incorrect
        let b_amount#0: uint64 = ((gtxns AssetAmount) b_xfer#0)
        (assert b_amount#0) // amount minimum not met
        let pool_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_pool_balance()
        let a_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let b_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let tmp%0#0: bool = (== a_balance#0 a_amount#0)
        goto tmp%0#0 ? block@21 : block@23
    block@21: // and_contd_L331
        let tmp%1#1: bool = (== b_balance#0 b_amount#0)
        goto tmp%1#1 ? block@22 : block@23
    block@22: // bool_true_L331
        let and_result%0#0: bool = 1u
        let is_initial_mint#0: bool = and_result%0#0
        goto block@24
    block@23: // bool_false_L331
        let and_result%0#0: bool = 0u
        let is_initial_mint#0: bool = and_result%0#0
        goto block@24
    block@24: // bool_merge_L331
        goto is_initial_mint#0 ? block@25 : block@26
    block@25: // if_body_L333
        let tmp%2#5: uint64 = (* a_amount#0 b_amount#0)
        let tmp%3#0: uint64 = (sqrt tmp%2#5)
        let tmp%4#6: uint64 = (- tmp%3#0 1000u)
        let to_mint#0: uint64 = tmp%4#6
        goto block@29
    block@26: // after_if_else_L332
        let issued#0: uint64 = (- 10000000000u pool_balance#0)
        let tmp%5#0: uint64 = (* 1000u a_amount#0)
        let tmp%6#4: uint64 = (- a_balance#0 a_amount#0)
        let a_ratio#0: uint64 = (/ tmp%5#0 tmp%6#4)
        let tmp%7#0: uint64 = (* 1000u b_amount#0)
        let tmp%8#2: uint64 = (- b_balance#0 b_amount#0)
        let b_ratio#0: uint64 = (/ tmp%7#0 tmp%8#2)
        let tmp%9#2: bool = (< a_ratio#0 b_ratio#0)
        goto tmp%9#2 ? block@27 : block@28
    block@27: // if_body_L338
        let tmp%10#4: uint64 = (* a_ratio#0 issued#0)
        let tmp%11#0: uint64 = (/ tmp%10#4 1000u)
        let to_mint#0: uint64 = tmp%11#0
        goto block@29
    block@28: // else_body_L340
        let tmp%12#2: uint64 = (* b_ratio#0 issued#0)
        let tmp%13#0: uint64 = (/ tmp%12#2 1000u)
        let to_mint#0: uint64 = tmp%13#0
        goto block@29
    block@29: // after_inlined_examples.amm.contract.tokens_to_mint_L81
        (assert to_mint#0) // send amount too low
        let tmp%29#1: bytes[32] = (txn Sender)
        let (maybe_value%5#1: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%5#0) // check self.pool_token exists
        examples.amm.contract.do_asset_transfer(tmp%29#1, maybe_value%5#1, to_mint#0)
        examples.amm.contract.ConstantProductAMM._update_ratio()
        let examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0
        goto block@17
    block@8: // burn_route_L147
        let tmp%31#0: uint64 = (txn OnCompletion)
        let tmp%32#0: bool = (! tmp%31#0)
        (assert tmp%32#0) // OnCompletion is not NoOp
        let tmp%33#0: uint64 = (txn ApplicationID)
        (assert tmp%33#0) // can only call when not creating
        let tmp%35#0: uint64 = (txn GroupIndex)
        let pool_xfer#0: uint64 = (- tmp%35#0 1u)
        let gtxn_type%3#0: uint64 = ((gtxns TypeEnum) pool_xfer#0)
        let gtxn_type_matches%3#0: bool = (== gtxn_type%3#0 axfer)
        (assert gtxn_type_matches%3#0) // transaction type is axfer
        let reinterpret_Encoded(uint8)%6#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%36#0: uint64 = (btoi reinterpret_Encoded(uint8)%6#0)
        let pool_asset#0: uint64 = ((txnas Assets) tmp%36#0)
        let reinterpret_Encoded(uint8)%7#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%38#0: uint64 = (btoi reinterpret_Encoded(uint8)%7#0)
        let a_asset#0: uint64 = ((txnas Assets) tmp%38#0)
        let reinterpret_Encoded(uint8)%8#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%40#0: uint64 = (btoi reinterpret_Encoded(uint8)%8#0)
        let b_asset#0: uint64 = ((txnas Assets) tmp%40#0)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#0) // check self.pool_token exists
        (assert maybe_value%0#0) // bootstrap method needs to be called first
        let tmp%0#0: bool = (== pool_asset#0 maybe_value%0#0)
        (assert tmp%0#0) // asset pool incorrect
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%1#0) // check self.asset_a exists
        let tmp%1#1: bool = (== a_asset#0 maybe_value%1#0)
        (assert tmp%1#1) // asset a incorrect
        let (maybe_value%2#1: uint64, maybe_exists%2#1: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%2#1) // check self.asset_b exists
        let tmp%2#2: bool = (== b_asset#0 maybe_value%2#1)
        (assert tmp%2#2) // asset b incorrect
        let tmp%3#2: bytes[32] = ((gtxns AssetReceiver) pool_xfer#0)
        let tmp%4#1: bytes[32] = (global CurrentApplicationAddress)
        let tmp%5#2: bool = (== tmp%3#2 tmp%4#1)
        (assert tmp%5#2) // receiver not app address
        let amount#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
        (assert amount#0) // amount minimum not met
        let tmp%8#2: uint64 = ((gtxns XferAsset) pool_xfer#0)
        let tmp%9#2: bool = (== tmp%8#2 maybe_value%0#0)
        (assert tmp%9#2) // asset pool incorrect
        let tmp%10#1: bytes[32] = ((gtxns Sender) pool_xfer#0)
        let tmp%11#1: bytes[32] = (txn Sender)
        let tmp%12#1: bool = (== tmp%10#1 tmp%11#1)
        (assert tmp%12#1) // sender invalid
        let pool_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_pool_balance()
        let supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let tmp%0#2: uint64 = (- 10000000000u pool_balance#0)
        let issued#0: uint64 = (- tmp%0#2 amount#0)
        let tmp%1#4: uint64 = (* supply#0 amount#0)
        let a_amt#0: uint64 = (/ tmp%1#4 issued#0)
        let supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let tmp%1#4: uint64 = (* supply#0 amount#0)
        let b_amt#0: uint64 = (/ tmp%1#4 issued#0)
        let tmp%17#1: bytes[32] = (txn Sender)
        let (maybe_value%4#1: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%4#0) // check self.asset_a exists
        examples.amm.contract.do_asset_transfer(tmp%17#1, maybe_value%4#1, a_amt#0)
        let tmp%18#0: bytes = (txn Sender)
        let (maybe_value%5#1: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%5#0) // check self.asset_b exists
        examples.amm.contract.do_asset_transfer(tmp%18#0, maybe_value%5#1, b_amt#0)
        examples.amm.contract.ConstantProductAMM._update_ratio()
        let examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0
        goto block@17
    block@9: // swap_route_L204
        let tmp%42#0: uint64 = (txn OnCompletion)
        let tmp%43#0: bool = (! tmp%42#0)
        (assert tmp%43#0) // OnCompletion is not NoOp
        let tmp%44#0: uint64 = (txn ApplicationID)
        (assert tmp%44#0) // can only call when not creating
        let tmp%46#0: uint64 = (txn GroupIndex)
        let swap_xfer#0: uint64 = (- tmp%46#0 1u)
        let gtxn_type%4#0: uint64 = ((gtxns TypeEnum) swap_xfer#0)
        let gtxn_type_matches%4#0: bool = (== gtxn_type%4#0 axfer)
        (assert gtxn_type_matches%4#0) // transaction type is axfer
        let reinterpret_Encoded(uint8)%9#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%47#0: uint64 = (btoi reinterpret_Encoded(uint8)%9#0)
        let a_asset#0: uint64 = ((txnas Assets) tmp%47#0)
        let reinterpret_Encoded(uint8)%10#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%49#0: uint64 = (btoi reinterpret_Encoded(uint8)%10#0)
        let b_asset#0: uint64 = ((txnas Assets) tmp%49#0)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#0) // check self.pool_token exists
        (assert maybe_value%0#0) // bootstrap method needs to be called first
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%0#0) // check self.asset_a exists
        let tmp%0#0: bool = (== a_asset#0 maybe_value%0#0)
        (assert tmp%0#0) // asset a incorrect
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%1#0) // check self.asset_b exists
        let tmp%1#1: bool = (== b_asset#0 maybe_value%1#0)
        (assert tmp%1#1) // asset b incorrect
        let in_amount#0: uint64 = ((gtxns AssetAmount) swap_xfer#0)
        (assert in_amount#0) // amount minimum not met
        let tmp%4#1: bytes[32] = ((gtxns Sender) swap_xfer#0)
        let tmp%5#1: bytes[32] = (txn Sender)
        let tmp%6#1: bool = (== tmp%4#1 tmp%5#1)
        (assert tmp%6#1) // sender invalid
        let tmp%7#0: uint64 = ((gtxns XferAsset) swap_xfer#0)
        switch tmp%7#0 {maybe_value%0#0 => block@10, maybe_value%1#0 => block@11, * => block@12}
    block@10: // switch_case_0_L233
        let in_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let out_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let (out_asset#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%4#0) // check self.asset_a exists
        goto block@13
    block@11: // switch_case_1_L237
        let in_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let out_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let (out_asset#0: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%5#0) // check self.asset_b exists
        goto block@13
    block@12: // switch_case_default_L241
        fail // asset id incorrect
    block@13: // switch_case_next_L231
        let tmp%0#2: uint64 = (- in_supply#0 in_amount#0)
        let tmp%1#4: uint64 = (* 1000u tmp%0#2)
        let tmp%2#5: uint64 = (* in_amount#0 995u)
        let in_total#0: uint64 = (+ tmp%1#4 tmp%2#5)
        let out_total#0: uint64 = (* tmp%2#5 out_supply#0)
        let to_swap#0: uint64 = (/ out_total#0 in_total#0)
        (assert to_swap#0) // send amount too low
        let tmp%10#1: bytes[32] = (txn Sender)
        examples.amm.contract.do_asset_transfer(tmp%10#1, out_asset#0, to_swap#0)
        examples.amm.contract.ConstantProductAMM._update_ratio()
        let examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0
        goto block@17
    block@14: // bare_routing_L27
        let tmp%51#0: uint64 = (txn OnCompletion)
        goto tmp%51#0 ? block@16 : block@15
    block@15: // __algopy_default_create_L1
        let tmp%52#0: uint64 = (txn ApplicationID)
        let tmp%53#0: bool = (! tmp%52#0)
        (assert tmp%53#0) // can only call when creating
        let examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0
        goto block@17
    block@16: // after_if_else_L27
        let examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = examples.amm.contract.ConstantProductAMM.__puya_arc4_router__%0#0
        goto block@17
    block@17: // after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router___L1
        return tmp%0#0

subroutine examples.amm.contract.do_asset_transfer(receiver: bytes[32], asset: uint64, amount: uint64) -> void:
    block@0: // L356
        itxn_begin
        ((itxn_field AssetReceiver) receiver#0)
        ((itxn_field AssetAmount) amount#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine examples.amm.contract.ConstantProductAMM._update_ratio() -> void:
    block@0: // L255
        let a_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let b_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let tmp%0#0: uint64 = (* a_balance#0 1000u)
        let materialized_values%0#0: uint64 = (/ tmp%0#0 b_balance#0)
        (app_global_put "ratio" materialized_values%0#0)
        return 

subroutine examples.amm.contract.ConstantProductAMM._check_is_governor() -> void:
    block@0: // L262
        let tmp%0#0: bytes[32] = (txn Sender)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "governor")
        (assert maybe_exists%0#0) // check self.governor exists
        let tmp%1#0: bool = (== tmp%0#0 maybe_value%0#0)
        (assert tmp%1#0) // Only the account set in global_state.governor may call this method
        return 

subroutine examples.amm.contract.ConstantProductAMM._current_pool_balance() -> uint64:
    block@0: // L291
        let tmp%0#0: bytes[32] = (global CurrentApplicationAddress)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#0) // check self.pool_token exists
        let (value%0#0: uint64, check%0#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 maybe_value%0#0)
        (assert check%0#0) // account opted into asset
        return value%0#0

subroutine examples.amm.contract.ConstantProductAMM._current_a_balance() -> uint64:
    block@0: // L295
        let tmp%0#0: bytes[32] = (global CurrentApplicationAddress)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%0#0) // check self.asset_a exists
        let (value%0#0: uint64, check%0#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 maybe_value%0#0)
        (assert check%0#0) // account opted into asset
        return value%0#0

subroutine examples.amm.contract.ConstantProductAMM._current_b_balance() -> uint64:
    block@0: // L299
        let tmp%0#0: bytes[32] = (global CurrentApplicationAddress)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%0#0) // check self.asset_b exists
        let (value%0#0: uint64, check%0#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 maybe_value%0#0)
        (assert check%0#0) // account opted into asset
        return value%0#0