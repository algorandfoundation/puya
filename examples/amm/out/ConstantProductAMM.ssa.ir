contract examples.amm.contract.ConstantProductAMM:
    program approval:
        subroutine examples.amm.contract.ConstantProductAMM.approval_program() -> uint64:
            block@0: // L27
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L28
                examples.amm.contract.ConstantProductAMM.__init__()
                goto block@2
            block@2: // entrypoint_L28
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@3 : block@11
            block@3: // abi_routing_L27
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "set_governor(account)void" => block@4, method "bootstrap(pay,asset,asset)uint64" => block@5, method "mint(axfer,axfer,asset,asset,asset)void" => block@6, method "burn(axfer,asset,asset,asset)void" => block@7, method "swap(axfer,asset,asset)void" => block@8, * => block@9}
            block@4: // set_governor_route_L43
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: uint64 = (== tmp%2#0 NoOp)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: uint64 = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                let tmp%6#0: uint64 = (btoi tmp%5#0)
                let tmp%7#0: bytes = ((txnas Accounts) tmp%6#0)
                examples.amm.contract.ConstantProductAMM.set_governor(tmp%7#0)
                return 1u
            block@5: // bootstrap_route_L49
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: uint64 = (== tmp%8#0 NoOp)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: uint64 = (txn ApplicationID)
                (assert tmp%10#0) // is not creating
                let tmp%11#0: uint64 = (txn GroupIndex)
                let awst_tmp%0#0: uint64 = (- tmp%11#0 1u)
                let tmp%12#0: uint64 = ((gtxns TypeEnum) awst_tmp%0#0)
                let tmp%13#0: uint64 = (== tmp%12#0 pay)
                let (value%0#0: uint64, check%0#0: uint64) = (awst_tmp%0#0, tmp%13#0)
                (assert check%0#0) // transaction type is pay
                let tmp%14#0: bytes = (txna ApplicationArgs 1)
                let tmp%15#0: uint64 = (btoi tmp%14#0)
                let tmp%16#0: uint64 = ((txnas Assets) tmp%15#0)
                let tmp%17#0: bytes = (txna ApplicationArgs 2)
                let tmp%18#0: uint64 = (btoi tmp%17#0)
                let tmp%19#0: uint64 = ((txnas Assets) tmp%18#0)
                let tmp%20#0: uint64 = examples.amm.contract.ConstantProductAMM.bootstrap(value%0#0, tmp%16#0, tmp%19#0)
                let val_as_bytes%0#0: bytes = (itob tmp%20#0)
                let tmp%21#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
                (log tmp%21#0)
                return 1u
            block@6: // mint_route_L81
                let tmp%22#0: uint64 = (txn OnCompletion)
                let tmp%23#0: uint64 = (== tmp%22#0 NoOp)
                (assert tmp%23#0) // OnCompletion is NoOp
                let tmp%24#0: uint64 = (txn ApplicationID)
                (assert tmp%24#0) // is not creating
                let tmp%25#0: uint64 = (txn GroupIndex)
                let awst_tmp%1#0: uint64 = (- tmp%25#0 2u)
                let tmp%26#0: uint64 = ((gtxns TypeEnum) awst_tmp%1#0)
                let tmp%27#0: uint64 = (== tmp%26#0 axfer)
                let (value%1#0: uint64, check%1#0: uint64) = (awst_tmp%1#0, tmp%27#0)
                (assert check%1#0) // transaction type is axfer
                let tmp%28#0: uint64 = (txn GroupIndex)
                let awst_tmp%2#0: uint64 = (- tmp%28#0 1u)
                let tmp%29#0: uint64 = ((gtxns TypeEnum) awst_tmp%2#0)
                let tmp%30#0: uint64 = (== tmp%29#0 axfer)
                let (value%2#0: uint64, check%2#0: uint64) = (awst_tmp%2#0, tmp%30#0)
                (assert check%2#0) // transaction type is axfer
                let tmp%31#0: bytes = (txna ApplicationArgs 1)
                let tmp%32#0: uint64 = (btoi tmp%31#0)
                let tmp%33#0: uint64 = ((txnas Assets) tmp%32#0)
                let tmp%34#0: bytes = (txna ApplicationArgs 2)
                let tmp%35#0: uint64 = (btoi tmp%34#0)
                let tmp%36#0: uint64 = ((txnas Assets) tmp%35#0)
                let tmp%37#0: bytes = (txna ApplicationArgs 3)
                let tmp%38#0: uint64 = (btoi tmp%37#0)
                let tmp%39#0: uint64 = ((txnas Assets) tmp%38#0)
                examples.amm.contract.ConstantProductAMM.mint(value%1#0, value%2#0, tmp%33#0, tmp%36#0, tmp%39#0)
                return 1u
            block@7: // burn_route_L147
                let tmp%40#0: uint64 = (txn OnCompletion)
                let tmp%41#0: uint64 = (== tmp%40#0 NoOp)
                (assert tmp%41#0) // OnCompletion is NoOp
                let tmp%42#0: uint64 = (txn ApplicationID)
                (assert tmp%42#0) // is not creating
                let tmp%43#0: uint64 = (txn GroupIndex)
                let awst_tmp%3#0: uint64 = (- tmp%43#0 1u)
                let tmp%44#0: uint64 = ((gtxns TypeEnum) awst_tmp%3#0)
                let tmp%45#0: uint64 = (== tmp%44#0 axfer)
                let (value%3#0: uint64, check%3#0: uint64) = (awst_tmp%3#0, tmp%45#0)
                (assert check%3#0) // transaction type is axfer
                let tmp%46#0: bytes = (txna ApplicationArgs 1)
                let tmp%47#0: uint64 = (btoi tmp%46#0)
                let tmp%48#0: uint64 = ((txnas Assets) tmp%47#0)
                let tmp%49#0: bytes = (txna ApplicationArgs 2)
                let tmp%50#0: uint64 = (btoi tmp%49#0)
                let tmp%51#0: uint64 = ((txnas Assets) tmp%50#0)
                let tmp%52#0: bytes = (txna ApplicationArgs 3)
                let tmp%53#0: uint64 = (btoi tmp%52#0)
                let tmp%54#0: uint64 = ((txnas Assets) tmp%53#0)
                examples.amm.contract.ConstantProductAMM.burn(value%3#0, tmp%48#0, tmp%51#0, tmp%54#0)
                return 1u
            block@8: // swap_route_L204
                let tmp%55#0: uint64 = (txn OnCompletion)
                let tmp%56#0: uint64 = (== tmp%55#0 NoOp)
                (assert tmp%56#0) // OnCompletion is NoOp
                let tmp%57#0: uint64 = (txn ApplicationID)
                (assert tmp%57#0) // is not creating
                let tmp%58#0: uint64 = (txn GroupIndex)
                let awst_tmp%4#0: uint64 = (- tmp%58#0 1u)
                let tmp%59#0: uint64 = ((gtxns TypeEnum) awst_tmp%4#0)
                let tmp%60#0: uint64 = (== tmp%59#0 axfer)
                let (value%4#0: uint64, check%4#0: uint64) = (awst_tmp%4#0, tmp%60#0)
                (assert check%4#0) // transaction type is axfer
                let tmp%61#0: bytes = (txna ApplicationArgs 1)
                let tmp%62#0: uint64 = (btoi tmp%61#0)
                let tmp%63#0: uint64 = ((txnas Assets) tmp%62#0)
                let tmp%64#0: bytes = (txna ApplicationArgs 2)
                let tmp%65#0: uint64 = (btoi tmp%64#0)
                let tmp%66#0: uint64 = ((txnas Assets) tmp%65#0)
                examples.amm.contract.ConstantProductAMM.swap(value%4#0, tmp%63#0, tmp%66#0)
                return 1u
            block@9: // switch_case_default_L27
                goto block@10
            block@10: // switch_case_next_L27
                fail // reject transaction
            block@11: // bare_routing_L27
                let tmp%67#0: uint64 = (txn OnCompletion)
                switch tmp%67#0 {0u => block@12, * => block@13}
            block@12: // create_L27
                let tmp%68#0: uint64 = (txn ApplicationID)
                let tmp%69#0: uint64 = (! tmp%68#0)
                (assert tmp%69#0) // is creating
                return 1u
            block@13: // reject_bare_on_completion_L27
                fail // reject transaction
        
        subroutine examples.amm.contract.ConstantProductAMM.set_governor(new_governor: bytes) -> void:
            block@0: // L43
                examples.amm.contract.ConstantProductAMM._check_is_governor()
                (app_global_put "governor" new_governor#0)
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM._check_is_governor() -> void:
            block@0: // L262
                let tmp%0#0: bytes = (txn Sender)
                let (governor_value%0#0: bytes, governor_exists%0#0: uint64) = (app_global_get_ex 0u "governor")
                (assert governor_exists%0#0) // check governor exists
                let tmp%1#0: uint64 = (== tmp%0#0 governor_value%0#0)
                (assert tmp%1#0) // Only the account set in global_state.governor may call this method
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM.bootstrap(seed: uint64, a_asset: uint64, b_asset: uint64) -> uint64:
            block@0: // L49
                let (pool_token_value%0#0: uint64, pool_token_exists%0#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%0#0) // check pool_token exists
                let tmp%0#0: uint64 = (! pool_token_value%0#0)
                (assert tmp%0#0) // application has already been bootstrapped
                examples.amm.contract.ConstantProductAMM._check_is_governor()
                let tmp%1#0: uint64 = (global GroupSize)
                let tmp%2#0: uint64 = (== tmp%1#0 2u)
                (assert tmp%2#0) // group size not 2
                let tmp%3#0: bytes = ((gtxns Receiver) seed#0)
                let tmp%4#0: bytes = (global CurrentApplicationAddress)
                let tmp%5#0: uint64 = (== tmp%3#0 tmp%4#0)
                (assert tmp%5#0) // receiver not app address
                let tmp%6#0: uint64 = ((gtxns Amount) seed#0)
                let tmp%7#0: uint64 = (>= tmp%6#0 300000u)
                (assert tmp%7#0) // amount minimum not met
                let tmp%8#0: uint64 = (< a_asset#0 b_asset#0)
                (assert tmp%8#0) // asset a must be less than asset b
                (app_global_put "asset_a" a_asset#0)
                (app_global_put "asset_b" b_asset#0)
                let new_state_value%0#0: uint64 = examples.amm.contract.ConstantProductAMM._create_pool_token()
                (app_global_put "pool_token" new_state_value%0#0)
                let (asset_a_value%0#0: uint64, asset_a_exists%0#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%0#0) // check asset_a exists
                examples.amm.contract.ConstantProductAMM._do_opt_in(asset_a_value%0#0)
                let (asset_b_value%0#0: uint64, asset_b_exists%0#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%0#0) // check asset_b exists
                examples.amm.contract.ConstantProductAMM._do_opt_in(asset_b_value%0#0)
                let (pool_token_value%1#0: uint64, pool_token_exists%1#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%1#0) // check pool_token exists
                return pool_token_value%1#0
        
        subroutine examples.amm.contract.ConstantProductAMM._create_pool_token() -> uint64:
            block@0: // L268
                itxn_begin
                let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = acfg
                let inner_txn_params%0%%TypeEnum_length#0: uint64 = 1u
                let (asset_a_value%0#0: uint64, asset_a_exists%0#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%0#0) // check asset_a exists
                let (value%0#0: bytes, check%0#0: uint64) = ((asset_params_get AssetUnitName) asset_a_value%0#0)
                (assert check%0#0) // asset exists
                let tmp%0#0: bytes = (concat "DPT-" value%0#0)
                let tmp%1#0: bytes = (concat tmp%0#0 "-")
                let (asset_b_value%0#0: uint64, asset_b_exists%0#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%0#0) // check asset_b exists
                let (value%1#0: bytes, check%1#0: uint64) = ((asset_params_get AssetUnitName) asset_b_value%0#0)
                (assert check%1#0) // asset exists
                let inner_txn_params%0%%param_ConfigAssetName_idx_0#0: bytes = (concat tmp%1#0 value%1#0)
                let inner_txn_params%0%%ConfigAssetName_length#0: uint64 = 1u
                let inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0: bytes = "dbt"
                let inner_txn_params%0%%ConfigAssetUnitName_length#0: uint64 = 1u
                let inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0: uint64 = 10000000000u
                let inner_txn_params%0%%ConfigAssetTotal_length#0: uint64 = 1u
                let inner_txn_params%0%%param_ConfigAssetDecimals_idx_0#0: uint64 = 3u
                let inner_txn_params%0%%ConfigAssetDecimals_length#0: uint64 = 1u
                let inner_txn_params%0%%param_ConfigAssetManager_idx_0#0: bytes = (global CurrentApplicationAddress)
                let inner_txn_params%0%%ConfigAssetManager_length#0: uint64 = 1u
                let inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0: bytes = (global CurrentApplicationAddress)
                let inner_txn_params%0%%ConfigAssetReserve_length#0: uint64 = 1u
                let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%Fee_length#0: uint64 = 1u
                let inner_txn_params%0%%Sender_length#0: uint64 = 0u
                let inner_txn_params%0%%Note_length#0: uint64 = 0u
                let inner_txn_params%0%%Receiver_length#0: uint64 = 0u
                let inner_txn_params%0%%Amount_length#0: uint64 = 0u
                let inner_txn_params%0%%CloseRemainderTo_length#0: uint64 = 0u
                let inner_txn_params%0%%VotePK_length#0: uint64 = 0u
                let inner_txn_params%0%%SelectionPK_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteFirst_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteLast_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteKeyDilution_length#0: uint64 = 0u
                let inner_txn_params%0%%Type_length#0: uint64 = 0u
                let inner_txn_params%0%%XferAsset_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetAmount_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetSender_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetReceiver_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetCloseTo_length#0: uint64 = 0u
                let inner_txn_params%0%%ApplicationID_length#0: uint64 = 0u
                let inner_txn_params%0%%OnCompletion_length#0: uint64 = 0u
                let inner_txn_params%0%%ApprovalProgram_length#0: uint64 = 0u
                let inner_txn_params%0%%ClearStateProgram_length#0: uint64 = 0u
                let inner_txn_params%0%%RekeyTo_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAsset_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetDefaultFrozen_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetURL_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetMetadataHash_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetFreeze_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetClawback_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAsset_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAssetAccount_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAssetFrozen_length#0: uint64 = 0u
                let inner_txn_params%0%%GlobalNumUint_length#0: uint64 = 0u
                let inner_txn_params%0%%GlobalNumByteSlice_length#0: uint64 = 0u
                let inner_txn_params%0%%LocalNumUint_length#0: uint64 = 0u
                let inner_txn_params%0%%LocalNumByteSlice_length#0: uint64 = 0u
                let inner_txn_params%0%%ExtraProgramPages_length#0: uint64 = 0u
                let inner_txn_params%0%%Nonparticipation_length#0: uint64 = 0u
                let inner_txn_params%0%%StateProofPK_length#0: uint64 = 0u
                let inner_txn_params%0%%ApplicationArgs_length#0: uint64 = 0u
                let inner_txn_params%0%%Accounts_length#0: uint64 = 0u
                let inner_txn_params%0%%Assets_length#0: uint64 = 0u
                let inner_txn_params%0%%Applications_length#0: uint64 = 0u
                let inner_txn_params%0%%ApprovalProgramPages_length#0: uint64 = 0u
                let inner_txn_params%0%%ClearStateProgramPages_length#0: uint64 = 0u
                ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
                ((itxn_field ConfigAssetReserve) inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0)
                ((itxn_field ConfigAssetManager) inner_txn_params%0%%param_ConfigAssetManager_idx_0#0)
                ((itxn_field ConfigAssetDecimals) inner_txn_params%0%%param_ConfigAssetDecimals_idx_0#0)
                ((itxn_field ConfigAssetTotal) inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0)
                ((itxn_field ConfigAssetUnitName) inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0)
                ((itxn_field ConfigAssetName) inner_txn_params%0%%param_ConfigAssetName_idx_0#0)
                ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
                goto block@1
            block@1: // next_txn_L271
                itxn_submit
                let %%inner_txn_submit_id#0: uint64 = 1u
                let submit_result_0%0%%Sender#0: bytes = (itxn Sender)
                let submit_result_0%0%%Fee#0: uint64 = (itxn Fee)
                let submit_result_0%0%%FirstValid#0: uint64 = (itxn FirstValid)
                let submit_result_0%0%%FirstValidTime#0: uint64 = (itxn FirstValidTime)
                let submit_result_0%0%%LastValid#0: uint64 = (itxn LastValid)
                let submit_result_0%0%%Note#0: bytes = (itxn Note)
                let submit_result_0%0%%Lease#0: bytes = (itxn Lease)
                let submit_result_0%0%%Receiver#0: bytes = (itxn Receiver)
                let submit_result_0%0%%Amount#0: uint64 = (itxn Amount)
                let submit_result_0%0%%CloseRemainderTo#0: bytes = (itxn CloseRemainderTo)
                let submit_result_0%0%%VotePK#0: bytes = (itxn VotePK)
                let submit_result_0%0%%SelectionPK#0: bytes = (itxn SelectionPK)
                let submit_result_0%0%%VoteFirst#0: uint64 = (itxn VoteFirst)
                let submit_result_0%0%%VoteLast#0: uint64 = (itxn VoteLast)
                let submit_result_0%0%%VoteKeyDilution#0: uint64 = (itxn VoteKeyDilution)
                let submit_result_0%0%%Type#0: bytes = (itxn Type)
                let submit_result_0%0%%TypeEnum#0: uint64 = (itxn TypeEnum)
                let submit_result_0%0%%XferAsset#0: uint64 = (itxn XferAsset)
                let submit_result_0%0%%AssetAmount#0: uint64 = (itxn AssetAmount)
                let submit_result_0%0%%AssetSender#0: bytes = (itxn AssetSender)
                let submit_result_0%0%%AssetReceiver#0: bytes = (itxn AssetReceiver)
                let submit_result_0%0%%AssetCloseTo#0: bytes = (itxn AssetCloseTo)
                let submit_result_0%0%%GroupIndex#0: uint64 = (itxn GroupIndex)
                let submit_result_0%0%%TxID#0: bytes = (itxn TxID)
                let submit_result_0%0%%ApplicationID#0: uint64 = (itxn ApplicationID)
                let submit_result_0%0%%OnCompletion#0: uint64 = (itxn OnCompletion)
                let submit_result_0%0%%NumAppArgs#0: uint64 = (itxn NumAppArgs)
                let submit_result_0%0%%NumAccounts#0: uint64 = (itxn NumAccounts)
                let submit_result_0%0%%ApprovalProgram#0: bytes = (itxn ApprovalProgram)
                let submit_result_0%0%%ClearStateProgram#0: bytes = (itxn ClearStateProgram)
                let submit_result_0%0%%RekeyTo#0: bytes = (itxn RekeyTo)
                let submit_result_0%0%%ConfigAsset#0: uint64 = (itxn ConfigAsset)
                let submit_result_0%0%%ConfigAssetTotal#0: uint64 = (itxn ConfigAssetTotal)
                let submit_result_0%0%%ConfigAssetDecimals#0: uint64 = (itxn ConfigAssetDecimals)
                let submit_result_0%0%%ConfigAssetDefaultFrozen#0: uint64 = (itxn ConfigAssetDefaultFrozen)
                let submit_result_0%0%%ConfigAssetUnitName#0: bytes = (itxn ConfigAssetUnitName)
                let submit_result_0%0%%ConfigAssetName#0: bytes = (itxn ConfigAssetName)
                let submit_result_0%0%%ConfigAssetURL#0: bytes = (itxn ConfigAssetURL)
                let submit_result_0%0%%ConfigAssetMetadataHash#0: bytes = (itxn ConfigAssetMetadataHash)
                let submit_result_0%0%%ConfigAssetManager#0: bytes = (itxn ConfigAssetManager)
                let submit_result_0%0%%ConfigAssetReserve#0: bytes = (itxn ConfigAssetReserve)
                let submit_result_0%0%%ConfigAssetFreeze#0: bytes = (itxn ConfigAssetFreeze)
                let submit_result_0%0%%ConfigAssetClawback#0: bytes = (itxn ConfigAssetClawback)
                let submit_result_0%0%%FreezeAsset#0: uint64 = (itxn FreezeAsset)
                let submit_result_0%0%%FreezeAssetAccount#0: bytes = (itxn FreezeAssetAccount)
                let submit_result_0%0%%FreezeAssetFrozen#0: uint64 = (itxn FreezeAssetFrozen)
                let submit_result_0%0%%NumAssets#0: uint64 = (itxn NumAssets)
                let submit_result_0%0%%NumApplications#0: uint64 = (itxn NumApplications)
                let submit_result_0%0%%GlobalNumUint#0: uint64 = (itxn GlobalNumUint)
                let submit_result_0%0%%GlobalNumByteSlice#0: uint64 = (itxn GlobalNumByteSlice)
                let submit_result_0%0%%LocalNumUint#0: uint64 = (itxn LocalNumUint)
                let submit_result_0%0%%LocalNumByteSlice#0: uint64 = (itxn LocalNumByteSlice)
                let submit_result_0%0%%ExtraProgramPages#0: uint64 = (itxn ExtraProgramPages)
                let submit_result_0%0%%Nonparticipation#0: uint64 = (itxn Nonparticipation)
                let submit_result_0%0%%NumLogs#0: uint64 = (itxn NumLogs)
                let submit_result_0%0%%CreatedAssetID#0: uint64 = (itxn CreatedAssetID)
                let submit_result_0%0%%CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
                let submit_result_0%0%%LastLog#0: bytes = (itxn LastLog)
                let submit_result_0%0%%StateProofPK#0: bytes = (itxn StateProofPK)
                let submit_result_0%0%%NumApprovalProgramPages#0: uint64 = (itxn NumApprovalProgramPages)
                let submit_result_0%0%%NumClearStateProgramPages#0: uint64 = (itxn NumClearStateProgramPages)
                return submit_result_0%0%%CreatedAssetID#0
        
        subroutine examples.amm.contract.ConstantProductAMM._do_opt_in(asset: uint64) -> void:
            block@0: // L284
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                examples.amm.contract.do_asset_transfer(tmp%0#0, asset#0, 0u)
                return 
        
        subroutine examples.amm.contract.do_asset_transfer(receiver: bytes, asset: uint64, amount: uint64) -> void:
            block@0: // L357
                itxn_begin
                let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = axfer
                let inner_txn_params%0%%TypeEnum_length#0: uint64 = 1u
                let inner_txn_params%0%%param_XferAsset_idx_0#0: uint64 = asset#0
                let inner_txn_params%0%%XferAsset_length#0: uint64 = 1u
                let inner_txn_params%0%%param_AssetAmount_idx_0#0: uint64 = amount#0
                let inner_txn_params%0%%AssetAmount_length#0: uint64 = 1u
                let inner_txn_params%0%%param_AssetReceiver_idx_0#0: bytes = receiver#0
                let inner_txn_params%0%%AssetReceiver_length#0: uint64 = 1u
                let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%0%%Fee_length#0: uint64 = 1u
                let inner_txn_params%0%%Sender_length#0: uint64 = 0u
                let inner_txn_params%0%%Note_length#0: uint64 = 0u
                let inner_txn_params%0%%Receiver_length#0: uint64 = 0u
                let inner_txn_params%0%%Amount_length#0: uint64 = 0u
                let inner_txn_params%0%%CloseRemainderTo_length#0: uint64 = 0u
                let inner_txn_params%0%%VotePK_length#0: uint64 = 0u
                let inner_txn_params%0%%SelectionPK_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteFirst_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteLast_length#0: uint64 = 0u
                let inner_txn_params%0%%VoteKeyDilution_length#0: uint64 = 0u
                let inner_txn_params%0%%Type_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetSender_length#0: uint64 = 0u
                let inner_txn_params%0%%AssetCloseTo_length#0: uint64 = 0u
                let inner_txn_params%0%%ApplicationID_length#0: uint64 = 0u
                let inner_txn_params%0%%OnCompletion_length#0: uint64 = 0u
                let inner_txn_params%0%%ApprovalProgram_length#0: uint64 = 0u
                let inner_txn_params%0%%ClearStateProgram_length#0: uint64 = 0u
                let inner_txn_params%0%%RekeyTo_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAsset_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetTotal_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetDecimals_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetDefaultFrozen_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetUnitName_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetName_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetURL_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetMetadataHash_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetManager_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetReserve_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetFreeze_length#0: uint64 = 0u
                let inner_txn_params%0%%ConfigAssetClawback_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAsset_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAssetAccount_length#0: uint64 = 0u
                let inner_txn_params%0%%FreezeAssetFrozen_length#0: uint64 = 0u
                let inner_txn_params%0%%GlobalNumUint_length#0: uint64 = 0u
                let inner_txn_params%0%%GlobalNumByteSlice_length#0: uint64 = 0u
                let inner_txn_params%0%%LocalNumUint_length#0: uint64 = 0u
                let inner_txn_params%0%%LocalNumByteSlice_length#0: uint64 = 0u
                let inner_txn_params%0%%ExtraProgramPages_length#0: uint64 = 0u
                let inner_txn_params%0%%Nonparticipation_length#0: uint64 = 0u
                let inner_txn_params%0%%StateProofPK_length#0: uint64 = 0u
                let inner_txn_params%0%%ApplicationArgs_length#0: uint64 = 0u
                let inner_txn_params%0%%Accounts_length#0: uint64 = 0u
                let inner_txn_params%0%%Assets_length#0: uint64 = 0u
                let inner_txn_params%0%%Applications_length#0: uint64 = 0u
                let inner_txn_params%0%%ApprovalProgramPages_length#0: uint64 = 0u
                let inner_txn_params%0%%ClearStateProgramPages_length#0: uint64 = 0u
                ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
                ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
                ((itxn_field AssetAmount) inner_txn_params%0%%param_AssetAmount_idx_0#0)
                ((itxn_field XferAsset) inner_txn_params%0%%param_XferAsset_idx_0#0)
                ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
                goto block@1
            block@1: // next_txn_L359
                itxn_submit
                let %%inner_txn_submit_id#0: uint64 = 1u
                let submit_result_0%0%%Sender#0: bytes = (itxn Sender)
                let submit_result_0%0%%Fee#0: uint64 = (itxn Fee)
                let submit_result_0%0%%FirstValid#0: uint64 = (itxn FirstValid)
                let submit_result_0%0%%FirstValidTime#0: uint64 = (itxn FirstValidTime)
                let submit_result_0%0%%LastValid#0: uint64 = (itxn LastValid)
                let submit_result_0%0%%Note#0: bytes = (itxn Note)
                let submit_result_0%0%%Lease#0: bytes = (itxn Lease)
                let submit_result_0%0%%Receiver#0: bytes = (itxn Receiver)
                let submit_result_0%0%%Amount#0: uint64 = (itxn Amount)
                let submit_result_0%0%%CloseRemainderTo#0: bytes = (itxn CloseRemainderTo)
                let submit_result_0%0%%VotePK#0: bytes = (itxn VotePK)
                let submit_result_0%0%%SelectionPK#0: bytes = (itxn SelectionPK)
                let submit_result_0%0%%VoteFirst#0: uint64 = (itxn VoteFirst)
                let submit_result_0%0%%VoteLast#0: uint64 = (itxn VoteLast)
                let submit_result_0%0%%VoteKeyDilution#0: uint64 = (itxn VoteKeyDilution)
                let submit_result_0%0%%Type#0: bytes = (itxn Type)
                let submit_result_0%0%%TypeEnum#0: uint64 = (itxn TypeEnum)
                let submit_result_0%0%%XferAsset#0: uint64 = (itxn XferAsset)
                let submit_result_0%0%%AssetAmount#0: uint64 = (itxn AssetAmount)
                let submit_result_0%0%%AssetSender#0: bytes = (itxn AssetSender)
                let submit_result_0%0%%AssetReceiver#0: bytes = (itxn AssetReceiver)
                let submit_result_0%0%%AssetCloseTo#0: bytes = (itxn AssetCloseTo)
                let submit_result_0%0%%GroupIndex#0: uint64 = (itxn GroupIndex)
                let submit_result_0%0%%TxID#0: bytes = (itxn TxID)
                let submit_result_0%0%%ApplicationID#0: uint64 = (itxn ApplicationID)
                let submit_result_0%0%%OnCompletion#0: uint64 = (itxn OnCompletion)
                let submit_result_0%0%%NumAppArgs#0: uint64 = (itxn NumAppArgs)
                let submit_result_0%0%%NumAccounts#0: uint64 = (itxn NumAccounts)
                let submit_result_0%0%%ApprovalProgram#0: bytes = (itxn ApprovalProgram)
                let submit_result_0%0%%ClearStateProgram#0: bytes = (itxn ClearStateProgram)
                let submit_result_0%0%%RekeyTo#0: bytes = (itxn RekeyTo)
                let submit_result_0%0%%ConfigAsset#0: uint64 = (itxn ConfigAsset)
                let submit_result_0%0%%ConfigAssetTotal#0: uint64 = (itxn ConfigAssetTotal)
                let submit_result_0%0%%ConfigAssetDecimals#0: uint64 = (itxn ConfigAssetDecimals)
                let submit_result_0%0%%ConfigAssetDefaultFrozen#0: uint64 = (itxn ConfigAssetDefaultFrozen)
                let submit_result_0%0%%ConfigAssetUnitName#0: bytes = (itxn ConfigAssetUnitName)
                let submit_result_0%0%%ConfigAssetName#0: bytes = (itxn ConfigAssetName)
                let submit_result_0%0%%ConfigAssetURL#0: bytes = (itxn ConfigAssetURL)
                let submit_result_0%0%%ConfigAssetMetadataHash#0: bytes = (itxn ConfigAssetMetadataHash)
                let submit_result_0%0%%ConfigAssetManager#0: bytes = (itxn ConfigAssetManager)
                let submit_result_0%0%%ConfigAssetReserve#0: bytes = (itxn ConfigAssetReserve)
                let submit_result_0%0%%ConfigAssetFreeze#0: bytes = (itxn ConfigAssetFreeze)
                let submit_result_0%0%%ConfigAssetClawback#0: bytes = (itxn ConfigAssetClawback)
                let submit_result_0%0%%FreezeAsset#0: uint64 = (itxn FreezeAsset)
                let submit_result_0%0%%FreezeAssetAccount#0: bytes = (itxn FreezeAssetAccount)
                let submit_result_0%0%%FreezeAssetFrozen#0: uint64 = (itxn FreezeAssetFrozen)
                let submit_result_0%0%%NumAssets#0: uint64 = (itxn NumAssets)
                let submit_result_0%0%%NumApplications#0: uint64 = (itxn NumApplications)
                let submit_result_0%0%%GlobalNumUint#0: uint64 = (itxn GlobalNumUint)
                let submit_result_0%0%%GlobalNumByteSlice#0: uint64 = (itxn GlobalNumByteSlice)
                let submit_result_0%0%%LocalNumUint#0: uint64 = (itxn LocalNumUint)
                let submit_result_0%0%%LocalNumByteSlice#0: uint64 = (itxn LocalNumByteSlice)
                let submit_result_0%0%%ExtraProgramPages#0: uint64 = (itxn ExtraProgramPages)
                let submit_result_0%0%%Nonparticipation#0: uint64 = (itxn Nonparticipation)
                let submit_result_0%0%%NumLogs#0: uint64 = (itxn NumLogs)
                let submit_result_0%0%%CreatedAssetID#0: uint64 = (itxn CreatedAssetID)
                let submit_result_0%0%%CreatedApplicationID#0: uint64 = (itxn CreatedApplicationID)
                let submit_result_0%0%%LastLog#0: bytes = (itxn LastLog)
                let submit_result_0%0%%StateProofPK#0: bytes = (itxn StateProofPK)
                let submit_result_0%0%%NumApprovalProgramPages#0: uint64 = (itxn NumApprovalProgramPages)
                let submit_result_0%0%%NumClearStateProgramPages#0: uint64 = (itxn NumClearStateProgramPages)
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM.mint(a_xfer: uint64, b_xfer: uint64, pool_asset: uint64, a_asset: uint64, b_asset: uint64) -> void:
            block@0: // L81
                examples.amm.contract.ConstantProductAMM._check_bootstrapped()
                let (pool_token_value%0#0: uint64, pool_token_exists%0#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%0#0) // check pool_token exists
                let tmp%0#0: uint64 = (== pool_asset#0 pool_token_value%0#0)
                (assert tmp%0#0) // asset pool incorrect
                let (asset_a_value%0#0: uint64, asset_a_exists%0#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%0#0) // check asset_a exists
                let tmp%1#0: uint64 = (== a_asset#0 asset_a_value%0#0)
                (assert tmp%1#0) // asset a incorrect
                let (asset_b_value%0#0: uint64, asset_b_exists%0#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%0#0) // check asset_b exists
                let tmp%2#0: uint64 = (== b_asset#0 asset_b_value%0#0)
                (assert tmp%2#0) // asset b incorrect
                let tmp%3#0: bytes = ((gtxns Sender) a_xfer#0)
                let tmp%4#0: bytes = (txn Sender)
                let tmp%5#0: uint64 = (== tmp%3#0 tmp%4#0)
                (assert tmp%5#0) // sender invalid
                let tmp%6#0: bytes = ((gtxns Sender) b_xfer#0)
                let tmp%7#0: bytes = (txn Sender)
                let tmp%8#0: uint64 = (== tmp%6#0 tmp%7#0)
                (assert tmp%8#0) // sender invalid
                let tmp%9#0: bytes = ((gtxns AssetReceiver) a_xfer#0)
                let tmp%10#0: bytes = (global CurrentApplicationAddress)
                let tmp%11#0: uint64 = (== tmp%9#0 tmp%10#0)
                (assert tmp%11#0) // receiver not app address
                let tmp%12#0: uint64 = ((gtxns XferAsset) a_xfer#0)
                let (asset_a_value%1#0: uint64, asset_a_exists%1#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%1#0) // check asset_a exists
                let tmp%13#0: uint64 = (== tmp%12#0 asset_a_value%1#0)
                (assert tmp%13#0) // asset a incorrect
                let tmp%14#0: uint64 = ((gtxns AssetAmount) a_xfer#0)
                let tmp%15#0: uint64 = (> tmp%14#0 0u)
                (assert tmp%15#0) // amount minimum not met
                let tmp%16#0: bytes = ((gtxns AssetReceiver) b_xfer#0)
                let tmp%17#0: bytes = (global CurrentApplicationAddress)
                let tmp%18#0: uint64 = (== tmp%16#0 tmp%17#0)
                (assert tmp%18#0) // receiver not app address
                let tmp%19#0: uint64 = ((gtxns XferAsset) b_xfer#0)
                let (asset_b_value%1#0: uint64, asset_b_exists%1#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%1#0) // check asset_b exists
                let tmp%20#0: uint64 = (== tmp%19#0 asset_b_value%1#0)
                (assert tmp%20#0) // asset b incorrect
                let tmp%21#0: uint64 = ((gtxns AssetAmount) b_xfer#0)
                let tmp%22#0: uint64 = (> tmp%21#0 0u)
                (assert tmp%22#0) // amount minimum not met
                let tmp%23#0: uint64 = examples.amm.contract.ConstantProductAMM._current_pool_balance()
                let tmp%24#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let tmp%25#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let tmp%26#0: uint64 = ((gtxns AssetAmount) a_xfer#0)
                let tmp%27#0: uint64 = ((gtxns AssetAmount) b_xfer#0)
                let to_mint#0: uint64 = examples.amm.contract.tokens_to_mint(tmp%23#0, tmp%24#0, tmp%25#0, tmp%26#0, tmp%27#0)
                let tmp%28#0: uint64 = (> to_mint#0 0u)
                (assert tmp%28#0) // send amount too low
                let tmp%29#0: bytes = (txn Sender)
                let (pool_token_value%1#0: uint64, pool_token_exists%1#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%1#0) // check pool_token exists
                examples.amm.contract.do_asset_transfer(tmp%29#0, pool_token_value%1#0, to_mint#0)
                examples.amm.contract.ConstantProductAMM._update_ratio()
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM._check_bootstrapped() -> void:
            block@0: // L251
                let (pool_token_value%0#0: uint64, pool_token_exists%0#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%0#0) // check pool_token exists
                (assert pool_token_value%0#0) // bootstrap method needs to be called first
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM._current_pool_balance() -> uint64:
            block@0: // L292
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                let (pool_token_value%0#0: uint64, pool_token_exists%0#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%0#0) // check pool_token exists
                let (value%0#0: uint64, check%0#0: uint64) = ((asset_holding_get AssetBalance) tmp%0#0 pool_token_value%0#0)
                (assert check%0#0) // account opted into asset
                return value%0#0
        
        subroutine examples.amm.contract.ConstantProductAMM._current_a_balance() -> uint64:
            block@0: // L296
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                let (asset_a_value%0#0: uint64, asset_a_exists%0#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%0#0) // check asset_a exists
                let (value%0#0: uint64, check%0#0: uint64) = ((asset_holding_get AssetBalance) tmp%0#0 asset_a_value%0#0)
                (assert check%0#0) // account opted into asset
                return value%0#0
        
        subroutine examples.amm.contract.ConstantProductAMM._current_b_balance() -> uint64:
            block@0: // L300
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                let (asset_b_value%0#0: uint64, asset_b_exists%0#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%0#0) // check asset_b exists
                let (value%0#0: uint64, check%0#0: uint64) = ((asset_holding_get AssetBalance) tmp%0#0 asset_b_value%0#0)
                (assert check%0#0) // account opted into asset
                return value%0#0
        
        subroutine examples.amm.contract.tokens_to_mint(pool_balance: uint64, a_balance: uint64, b_balance: uint64, a_amount: uint64, b_amount: uint64) -> uint64:
            block@0: // L323
                let tmp%0#0: uint64 = (== a_balance#0 a_amount#0)
                goto tmp%0#0 ? block@1 : block@3
            block@1: // and_contd_L332
                let tmp%1#0: uint64 = (== b_balance#0 b_amount#0)
                goto tmp%1#0 ? block@2 : block@3
            block@2: // bool_true_L332
                let and_result%0#0: uint64 = 1u
                goto block@4
            block@3: // bool_false_L332
                let and_result%0#1: uint64 = 0u
                goto block@4
            block@4: // bool_merge_L332
                let and_result%0#2: uint64 = φ(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
                let is_initial_mint#0: uint64 = and_result%0#2
                goto is_initial_mint#0 ? block@5 : block@6
            block@5: // if_body_L333
                let tmp%2#0: uint64 = (* a_amount#0 b_amount#0)
                let tmp%3#0: uint64 = (sqrt tmp%2#0)
                let tmp%4#0: uint64 = (- tmp%3#0 1000u)
                return tmp%4#0
            block@6: // after_if_else_L333
                let issued#0: uint64 = (- 10000000000u pool_balance#0)
                let tmp%5#0: uint64 = (* 1000u a_amount#0)
                let tmp%6#0: uint64 = (- a_balance#0 a_amount#0)
                let a_ratio#0: uint64 = (/ tmp%5#0 tmp%6#0)
                let tmp%7#0: uint64 = (* 1000u b_amount#0)
                let tmp%8#0: uint64 = (- b_balance#0 b_amount#0)
                let b_ratio#0: uint64 = (/ tmp%7#0 tmp%8#0)
                let tmp%9#0: uint64 = (< a_ratio#0 b_ratio#0)
                goto tmp%9#0 ? block@7 : block@8
            block@7: // if_body_L338
                let tmp%10#0: uint64 = (* a_ratio#0 issued#0)
                let tmp%11#0: uint64 = (/ tmp%10#0 1000u)
                return tmp%11#0
            block@8: // else_body_L338
                let tmp%12#0: uint64 = (* b_ratio#0 issued#0)
                let tmp%13#0: uint64 = (/ tmp%12#0 1000u)
                return tmp%13#0
        
        subroutine examples.amm.contract.ConstantProductAMM._update_ratio() -> void:
            block@0: // L255
                let a_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let b_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let tmp%0#0: uint64 = (* a_balance#0 1000u)
                let new_state_value%0#0: uint64 = (/ tmp%0#0 b_balance#0)
                (app_global_put "ratio" new_state_value%0#0)
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM.burn(pool_xfer: uint64, pool_asset: uint64, a_asset: uint64, b_asset: uint64) -> void:
            block@0: // L147
                examples.amm.contract.ConstantProductAMM._check_bootstrapped()
                let (pool_token_value%0#0: uint64, pool_token_exists%0#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%0#0) // check pool_token exists
                let tmp%0#0: uint64 = (== pool_asset#0 pool_token_value%0#0)
                (assert tmp%0#0) // asset pool incorrect
                let (asset_a_value%0#0: uint64, asset_a_exists%0#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%0#0) // check asset_a exists
                let tmp%1#0: uint64 = (== a_asset#0 asset_a_value%0#0)
                (assert tmp%1#0) // asset a incorrect
                let (asset_b_value%0#0: uint64, asset_b_exists%0#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%0#0) // check asset_b exists
                let tmp%2#0: uint64 = (== b_asset#0 asset_b_value%0#0)
                (assert tmp%2#0) // asset b incorrect
                let tmp%3#0: bytes = ((gtxns AssetReceiver) pool_xfer#0)
                let tmp%4#0: bytes = (global CurrentApplicationAddress)
                let tmp%5#0: uint64 = (== tmp%3#0 tmp%4#0)
                (assert tmp%5#0) // receiver not app address
                let tmp%6#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
                let tmp%7#0: uint64 = (> tmp%6#0 0u)
                (assert tmp%7#0) // amount minimum not met
                let tmp%8#0: uint64 = ((gtxns XferAsset) pool_xfer#0)
                let (pool_token_value%1#0: uint64, pool_token_exists%1#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%1#0) // check pool_token exists
                let tmp%9#0: uint64 = (== tmp%8#0 pool_token_value%1#0)
                (assert tmp%9#0) // asset pool incorrect
                let tmp%10#0: bytes = ((gtxns Sender) pool_xfer#0)
                let tmp%11#0: bytes = (txn Sender)
                let tmp%12#0: uint64 = (== tmp%10#0 tmp%11#0)
                (assert tmp%12#0) // sender invalid
                let pool_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_pool_balance()
                let tmp%13#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let tmp%14#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
                let a_amt#0: uint64 = examples.amm.contract.tokens_to_burn(pool_balance#0, tmp%13#0, tmp%14#0)
                let tmp%15#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let tmp%16#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
                let b_amt#0: uint64 = examples.amm.contract.tokens_to_burn(pool_balance#0, tmp%15#0, tmp%16#0)
                let tmp%17#0: bytes = (txn Sender)
                let (asset_a_value%1#0: uint64, asset_a_exists%1#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%1#0) // check asset_a exists
                examples.amm.contract.do_asset_transfer(tmp%17#0, asset_a_value%1#0, a_amt#0)
                let tmp%18#0: bytes = (txn Sender)
                let (asset_b_value%1#0: uint64, asset_b_exists%1#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%1#0) // check asset_b exists
                examples.amm.contract.do_asset_transfer(tmp%18#0, asset_b_value%1#0, b_amt#0)
                examples.amm.contract.ConstantProductAMM._update_ratio()
                return 
        
        subroutine examples.amm.contract.tokens_to_burn(pool_balance: uint64, supply: uint64, amount: uint64) -> uint64:
            block@0: // L344
                let tmp%0#0: uint64 = (- 10000000000u pool_balance#0)
                let issued#0: uint64 = (- tmp%0#0 amount#0)
                let tmp%1#0: uint64 = (* supply#0 amount#0)
                let tmp%2#0: uint64 = (/ tmp%1#0 issued#0)
                return tmp%2#0
        
        subroutine examples.amm.contract.ConstantProductAMM.swap(swap_xfer: uint64, a_asset: uint64, b_asset: uint64) -> void:
            block@0: // L204
                examples.amm.contract.ConstantProductAMM._check_bootstrapped()
                let (asset_a_value%0#0: uint64, asset_a_exists%0#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%0#0) // check asset_a exists
                let tmp%0#0: uint64 = (== a_asset#0 asset_a_value%0#0)
                (assert tmp%0#0) // asset a incorrect
                let (asset_b_value%0#0: uint64, asset_b_exists%0#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%0#0) // check asset_b exists
                let tmp%1#0: uint64 = (== b_asset#0 asset_b_value%0#0)
                (assert tmp%1#0) // asset b incorrect
                let tmp%2#0: uint64 = ((gtxns AssetAmount) swap_xfer#0)
                let tmp%3#0: uint64 = (> tmp%2#0 0u)
                (assert tmp%3#0) // amount minimum not met
                let tmp%4#0: bytes = ((gtxns Sender) swap_xfer#0)
                let tmp%5#0: bytes = (txn Sender)
                let tmp%6#0: uint64 = (== tmp%4#0 tmp%5#0)
                (assert tmp%6#0) // sender invalid
                let (asset_a_value%1#0: uint64, asset_a_exists%1#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%1#0) // check asset_a exists
                let (asset_b_value%1#0: uint64, asset_b_exists%1#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%1#0) // check asset_b exists
                let awst_tmp%0#0: uint64 = ((gtxns XferAsset) swap_xfer#0)
                switch awst_tmp%0#0 {asset_a_value%1#0 => block@1, asset_b_value%1#0 => block@2, * => block@3}
            block@1: // switch_case_0_L233
                let in_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let out_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let (asset_a_value%2#0: uint64, asset_a_exists%2#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%2#0) // check asset_a exists
                let out_asset#0: uint64 = asset_a_value%2#0
                goto block@4
            block@2: // switch_case_1_L237
                let in_supply#1: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let out_supply#1: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let (asset_b_value%2#0: uint64, asset_b_exists%2#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%2#0) // check asset_b exists
                let out_asset#1: uint64 = asset_b_value%2#0
                goto block@4
            block@3: // switch_case_default_L231
                fail // asset id incorrect
            block@4: // switch_case_next_L231
                let in_supply#2: uint64 = φ(in_supply#0 <- block@1, in_supply#1 <- block@2)
                let out_supply#2: uint64 = φ(out_supply#0 <- block@1, out_supply#1 <- block@2)
                let out_asset#2: uint64 = φ(out_asset#0 <- block@1, out_asset#1 <- block@2)
                let tmp%7#0: uint64 = ((gtxns AssetAmount) swap_xfer#0)
                let to_swap#0: uint64 = examples.amm.contract.tokens_to_swap(tmp%7#0, in_supply#2, out_supply#2)
                let tmp%8#0: uint64 = (> to_swap#0 0u)
                (assert tmp%8#0) // send amount too low
                let tmp%9#0: bytes = (txn Sender)
                examples.amm.contract.do_asset_transfer(tmp%9#0, out_asset#2, to_swap#0)
                examples.amm.contract.ConstantProductAMM._update_ratio()
                return 
        
        subroutine examples.amm.contract.tokens_to_swap(in_amount: uint64, in_supply: uint64, out_supply: uint64) -> uint64:
            block@0: // L350
                let tmp%0#0: uint64 = (- in_supply#0 in_amount#0)
                let tmp%1#0: uint64 = (* 1000u tmp%0#0)
                let tmp%2#0: uint64 = (* in_amount#0 995u)
                let in_total#0: uint64 = (+ tmp%1#0 tmp%2#0)
                let tmp%3#0: uint64 = (* in_amount#0 995u)
                let out_total#0: uint64 = (* tmp%3#0 out_supply#0)
                let tmp%4#0: uint64 = (/ out_total#0 in_total#0)
                return tmp%4#0
        
        subroutine examples.amm.contract.ConstantProductAMM.__init__() -> void:
            block@0: // L28
                (app_global_put "asset_a" 0u)
                (app_global_put "asset_b" 0u)
                let new_state_value%0#0: bytes = (txn Sender)
                (app_global_put "governor" new_state_value%0#0)
                (app_global_put "pool_token" 0u)
                (app_global_put "ratio" 0u)
                return 
    
    program clear-state:
        subroutine examples.amm.contract.ConstantProductAMM.clear_state_program() -> uint64:
            block@0: // L27
                return 1u