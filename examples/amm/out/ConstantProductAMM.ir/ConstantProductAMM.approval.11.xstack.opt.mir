// Op                                                                                             Stack (out)
// examples.amm.contract.ConstantProductAMM.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    main_block@0:
        txn ApplicationID                                                                         tmp%0#0
        bz main_call___init__@1 ; b main_after_if_else@2

    main_call___init__@1:
        // amm/contract.py:33
        // self.asset_a = Asset()
        byte "asset_a"                                                                            "asset_a"
        int 0                                                                                     "asset_a",0
        app_global_put
        // amm/contract.py:35
        // self.asset_b = Asset()
        byte "asset_b"                                                                            "asset_b"
        int 0                                                                                     "asset_b",0
        app_global_put
        // amm/contract.py:37
        // self.governor = Txn.sender
        txn Sender                                                                                materialized_values%0#0
        byte "governor"                                                                           materialized_values%0#0,"governor"
        l-load materialized_values%0#0 1                                                          "governor",materialized_values%0#0
        app_global_put
        // amm/contract.py:39
        // self.pool_token = Asset()
        byte "pool_token"                                                                         "pool_token"
        int 0                                                                                     "pool_token",0
        app_global_put
        // amm/contract.py:41
        // self.ratio = UInt64(0)
        byte "ratio"                                                                              "ratio"
        int 0                                                                                     "ratio",0
        app_global_put
        b main_after_if_else@2

    main_after_if_else@2:
        // amm/contract.py:27
        // class ConstantProductAMM(ARC4Contract):
        txn NumAppArgs                                                                            tmp%0#2
        bz main_bare_routing@10 ; b main_abi_routing@4

    main_abi_routing@4:
        // amm/contract.py:27
        // class ConstantProductAMM(ARC4Contract):
        txna ApplicationArgs 0                                                                    tmp%2#0
        method set_governor(account)void                                                          tmp%2#0,Method(set_governor(account)void)
        method bootstrap(pay,asset,asset)uint64                                                   tmp%2#0,Method(set_governor(account)void),Method(bootstrap(pay,asset,asset)uint64)
        method mint(axfer,axfer,asset,asset,asset)void                                            tmp%2#0,Method(set_governor(account)void),Method(bootstrap(pay,asset,asset)uint64),Method(mint(axfer,axfer,asset,asset,asset)void)
        method burn(axfer,asset,asset,asset)void                                                  tmp%2#0,Method(set_governor(account)void),Method(bootstrap(pay,asset,asset)uint64),Method(mint(axfer,axfer,asset,asset,asset)void),Method(burn(axfer,asset,asset,asset)void)
        method swap(axfer,asset,asset)void                                                        tmp%2#0,Method(set_governor(account)void),Method(bootstrap(pay,asset,asset)uint64),Method(mint(axfer,axfer,asset,asset,asset)void),Method(burn(axfer,asset,asset,asset)void),Method(swap(axfer,asset,asset)void)
        l-load tmp%2#0 5                                                                          Method(set_governor(account)void),Method(bootstrap(pay,asset,asset)uint64),Method(mint(axfer,axfer,asset,asset,asset)void),Method(burn(axfer,asset,asset,asset)void),Method(swap(axfer,asset,asset)void),tmp%2#0
        match main_set_governor_route@5 main_bootstrap_route@6 main_mint_route@7 main_burn_route@8 main_swap_route@9 ; b main_after_if_else@12 

    main_set_governor_route@5:
        // amm/contract.py:43
        // @arc4.abimethod()
        txn OnCompletion                                                                          tmp%3#0
        !                                                                                         tmp%4#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%5#0
        assert // can only call when not creating
        // amm/contract.py:27
        // class ConstantProductAMM(ARC4Contract):
        txna ApplicationArgs 1                                                                    reinterpret_Encoded(uint8)%0#0
        btoi                                                                                      tmp%7#0
        txnas Accounts                                                                            tmp%8#0
        // amm/contract.py:43
        // @arc4.abimethod()
        callsub set_governor
        int 1                                                                                     tmp%0#0
        x-store tmp%0#0                                                                           (ùïè) tmp%0#0 |
        b main_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@13 (ùïè) tmp%0#0 | 

    main_bootstrap_route@6:
        // amm/contract.py:49
        // @arc4.abimethod()
        txn OnCompletion                                                                          tmp%9#0
        !                                                                                         tmp%10#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%11#0
        assert // can only call when not creating
        // amm/contract.py:27
        // class ConstantProductAMM(ARC4Contract):
        txn GroupIndex                                                                            tmp%13#0
        int 1                                                                                     tmp%13#0,1
        -                                                                                         gtxn_idx%0#0
        l-load-copy gtxn_idx%0#0 0                                                                gtxn_idx%0#0,gtxn_idx%0#0 (copy)
        gtxns TypeEnum                                                                            gtxn_idx%0#0,gtxn_type%0#0
        int pay                                                                                   gtxn_idx%0#0,gtxn_type%0#0,pay
        ==                                                                                        gtxn_idx%0#0,gtxn_type_matches%0#0
        assert // transaction type is pay                                                         gtxn_idx%0#0
        txna ApplicationArgs 1                                                                    gtxn_idx%0#0,reinterpret_Encoded(uint8)%1#0
        btoi                                                                                      gtxn_idx%0#0,tmp%14#0
        txnas Assets                                                                              gtxn_idx%0#0,tmp%15#0
        txna ApplicationArgs 2                                                                    gtxn_idx%0#0,tmp%15#0,reinterpret_Encoded(uint8)%2#0
        btoi                                                                                      gtxn_idx%0#0,tmp%15#0,tmp%16#0
        txnas Assets                                                                              gtxn_idx%0#0,tmp%15#0,tmp%17#0
        // amm/contract.py:49
        // @arc4.abimethod()
        l-load gtxn_idx%0#0 2                                                                     tmp%15#0,tmp%17#0,gtxn_idx%0#0
        l-load tmp%15#0 2                                                                         tmp%17#0,gtxn_idx%0#0,tmp%15#0
        l-load tmp%17#0 2                                                                         gtxn_idx%0#0,tmp%15#0,tmp%17#0
        callsub bootstrap                                                                         to_encode%0#0
        itob                                                                                      val_as_bytes%0#0
        byte 0x151f7c75                                                                           val_as_bytes%0#0,0x151f7c75
        l-load val_as_bytes%0#0 1                                                                 0x151f7c75,val_as_bytes%0#0
        concat                                                                                    tmp%18#0
        log
        int 1                                                                                     tmp%0#0
        x-store tmp%0#0                                                                           (ùïè) tmp%0#0 |
        b main_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@13 (ùïè) tmp%0#0 | 

    main_mint_route@7:
        // amm/contract.py:81-87
        // @arc4.abimethod(
        //     default_args={
        //         "pool_asset": "pool_token",
        //         "a_asset": "asset_a",
        //         "b_asset": "asset_b",
        //     },
        // )
        txn OnCompletion                                                                          tmp%19#0
        !                                                                                         tmp%20#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%21#0
        assert // can only call when not creating
        // amm/contract.py:27
        // class ConstantProductAMM(ARC4Contract):
        txn GroupIndex                                                                            tmp%23#0
        int 2                                                                                     tmp%23#0,2
        -                                                                                         gtxn_idx%1#0
        l-load-copy gtxn_idx%1#0 0                                                                gtxn_idx%1#0,gtxn_idx%1#0 (copy)
        gtxns TypeEnum                                                                            gtxn_idx%1#0,gtxn_type%1#0
        int axfer                                                                                 gtxn_idx%1#0,gtxn_type%1#0,axfer
        ==                                                                                        gtxn_idx%1#0,gtxn_type_matches%1#0
        assert // transaction type is axfer                                                       gtxn_idx%1#0
        txn GroupIndex                                                                            gtxn_idx%1#0,tmp%24#0
        int 1                                                                                     gtxn_idx%1#0,tmp%24#0,1
        -                                                                                         gtxn_idx%1#0,gtxn_idx%2#0
        l-load-copy gtxn_idx%2#0 0                                                                gtxn_idx%1#0,gtxn_idx%2#0,gtxn_idx%2#0 (copy)
        gtxns TypeEnum                                                                            gtxn_idx%1#0,gtxn_idx%2#0,gtxn_type%2#0
        int axfer                                                                                 gtxn_idx%1#0,gtxn_idx%2#0,gtxn_type%2#0,axfer
        ==                                                                                        gtxn_idx%1#0,gtxn_idx%2#0,gtxn_type_matches%2#0
        assert // transaction type is axfer                                                       gtxn_idx%1#0,gtxn_idx%2#0
        txna ApplicationArgs 1                                                                    gtxn_idx%1#0,gtxn_idx%2#0,reinterpret_Encoded(uint8)%3#0
        btoi                                                                                      gtxn_idx%1#0,gtxn_idx%2#0,tmp%25#0
        txnas Assets                                                                              gtxn_idx%1#0,gtxn_idx%2#0,tmp%26#0
        txna ApplicationArgs 2                                                                    gtxn_idx%1#0,gtxn_idx%2#0,tmp%26#0,reinterpret_Encoded(uint8)%4#0
        btoi                                                                                      gtxn_idx%1#0,gtxn_idx%2#0,tmp%26#0,tmp%27#0
        txnas Assets                                                                              gtxn_idx%1#0,gtxn_idx%2#0,tmp%26#0,tmp%28#0
        txna ApplicationArgs 3                                                                    gtxn_idx%1#0,gtxn_idx%2#0,tmp%26#0,tmp%28#0,reinterpret_Encoded(uint8)%5#0
        btoi                                                                                      gtxn_idx%1#0,gtxn_idx%2#0,tmp%26#0,tmp%28#0,tmp%29#0
        txnas Assets                                                                              gtxn_idx%1#0,gtxn_idx%2#0,tmp%26#0,tmp%28#0,tmp%30#0
        // amm/contract.py:81-87
        // @arc4.abimethod(
        //     default_args={
        //         "pool_asset": "pool_token",
        //         "a_asset": "asset_a",
        //         "b_asset": "asset_b",
        //     },
        // )
        l-load gtxn_idx%1#0 4                                                                     gtxn_idx%2#0,tmp%26#0,tmp%28#0,tmp%30#0,gtxn_idx%1#0
        l-load gtxn_idx%2#0 4                                                                     tmp%26#0,tmp%28#0,tmp%30#0,gtxn_idx%1#0,gtxn_idx%2#0
        l-load tmp%26#0 4                                                                         tmp%28#0,tmp%30#0,gtxn_idx%1#0,gtxn_idx%2#0,tmp%26#0
        l-load tmp%28#0 4                                                                         tmp%30#0,gtxn_idx%1#0,gtxn_idx%2#0,tmp%26#0,tmp%28#0
        l-load tmp%30#0 4                                                                         gtxn_idx%1#0,gtxn_idx%2#0,tmp%26#0,tmp%28#0,tmp%30#0
        callsub mint
        int 1                                                                                     tmp%0#0
        x-store tmp%0#0                                                                           (ùïè) tmp%0#0 |
        b main_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@13 (ùïè) tmp%0#0 | 

    main_burn_route@8:
        // amm/contract.py:147-153
        // @arc4.abimethod(
        //     default_args={
        //         "pool_asset": "pool_token",
        //         "a_asset": "asset_a",
        //         "b_asset": "asset_b",
        //     },
        // )
        txn OnCompletion                                                                          tmp%31#0
        !                                                                                         tmp%32#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%33#0
        assert // can only call when not creating
        // amm/contract.py:27
        // class ConstantProductAMM(ARC4Contract):
        txn GroupIndex                                                                            tmp%35#0
        int 1                                                                                     tmp%35#0,1
        -                                                                                         gtxn_idx%3#0
        l-load-copy gtxn_idx%3#0 0                                                                gtxn_idx%3#0,gtxn_idx%3#0 (copy)
        gtxns TypeEnum                                                                            gtxn_idx%3#0,gtxn_type%3#0
        int axfer                                                                                 gtxn_idx%3#0,gtxn_type%3#0,axfer
        ==                                                                                        gtxn_idx%3#0,gtxn_type_matches%3#0
        assert // transaction type is axfer                                                       gtxn_idx%3#0
        txna ApplicationArgs 1                                                                    gtxn_idx%3#0,reinterpret_Encoded(uint8)%6#0
        btoi                                                                                      gtxn_idx%3#0,tmp%36#0
        txnas Assets                                                                              gtxn_idx%3#0,tmp%37#0
        txna ApplicationArgs 2                                                                    gtxn_idx%3#0,tmp%37#0,reinterpret_Encoded(uint8)%7#0
        btoi                                                                                      gtxn_idx%3#0,tmp%37#0,tmp%38#0
        txnas Assets                                                                              gtxn_idx%3#0,tmp%37#0,tmp%39#0
        txna ApplicationArgs 3                                                                    gtxn_idx%3#0,tmp%37#0,tmp%39#0,reinterpret_Encoded(uint8)%8#0
        btoi                                                                                      gtxn_idx%3#0,tmp%37#0,tmp%39#0,tmp%40#0
        txnas Assets                                                                              gtxn_idx%3#0,tmp%37#0,tmp%39#0,tmp%41#0
        // amm/contract.py:147-153
        // @arc4.abimethod(
        //     default_args={
        //         "pool_asset": "pool_token",
        //         "a_asset": "asset_a",
        //         "b_asset": "asset_b",
        //     },
        // )
        l-load gtxn_idx%3#0 3                                                                     tmp%37#0,tmp%39#0,tmp%41#0,gtxn_idx%3#0
        l-load tmp%37#0 3                                                                         tmp%39#0,tmp%41#0,gtxn_idx%3#0,tmp%37#0
        l-load tmp%39#0 3                                                                         tmp%41#0,gtxn_idx%3#0,tmp%37#0,tmp%39#0
        l-load tmp%41#0 3                                                                         gtxn_idx%3#0,tmp%37#0,tmp%39#0,tmp%41#0
        callsub burn
        int 1                                                                                     tmp%0#0
        x-store tmp%0#0                                                                           (ùïè) tmp%0#0 |
        b main_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@13 (ùïè) tmp%0#0 | 

    main_swap_route@9:
        // amm/contract.py:204-209
        // @arc4.abimethod(
        //     default_args={
        //         "a_asset": "asset_a",
        //         "b_asset": "asset_b",
        //     },
        // )
        txn OnCompletion                                                                          tmp%42#0
        !                                                                                         tmp%43#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                                         tmp%44#0
        assert // can only call when not creating
        // amm/contract.py:27
        // class ConstantProductAMM(ARC4Contract):
        txn GroupIndex                                                                            tmp%46#0
        int 1                                                                                     tmp%46#0,1
        -                                                                                         gtxn_idx%4#0
        l-load-copy gtxn_idx%4#0 0                                                                gtxn_idx%4#0,gtxn_idx%4#0 (copy)
        gtxns TypeEnum                                                                            gtxn_idx%4#0,gtxn_type%4#0
        int axfer                                                                                 gtxn_idx%4#0,gtxn_type%4#0,axfer
        ==                                                                                        gtxn_idx%4#0,gtxn_type_matches%4#0
        assert // transaction type is axfer                                                       gtxn_idx%4#0
        txna ApplicationArgs 1                                                                    gtxn_idx%4#0,reinterpret_Encoded(uint8)%9#0
        btoi                                                                                      gtxn_idx%4#0,tmp%47#0
        txnas Assets                                                                              gtxn_idx%4#0,tmp%48#0
        txna ApplicationArgs 2                                                                    gtxn_idx%4#0,tmp%48#0,reinterpret_Encoded(uint8)%10#0
        btoi                                                                                      gtxn_idx%4#0,tmp%48#0,tmp%49#0
        txnas Assets                                                                              gtxn_idx%4#0,tmp%48#0,tmp%50#0
        // amm/contract.py:204-209
        // @arc4.abimethod(
        //     default_args={
        //         "a_asset": "asset_a",
        //         "b_asset": "asset_b",
        //     },
        // )
        l-load gtxn_idx%4#0 2                                                                     tmp%48#0,tmp%50#0,gtxn_idx%4#0
        l-load tmp%48#0 2                                                                         tmp%50#0,gtxn_idx%4#0,tmp%48#0
        l-load tmp%50#0 2                                                                         gtxn_idx%4#0,tmp%48#0,tmp%50#0
        callsub swap
        int 1                                                                                     tmp%0#0
        x-store tmp%0#0                                                                           (ùïè) tmp%0#0 |
        b main_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@13 (ùïè) tmp%0#0 | 

    main_bare_routing@10:
        // amm/contract.py:27
        // class ConstantProductAMM(ARC4Contract):
        txn OnCompletion                                                                          tmp%51#0
        bz main___algopy_default_create@11 ; b main_after_if_else@12

    main___algopy_default_create@11:
        txn ApplicationID                                                                         tmp%52#0
        !                                                                                         tmp%53#0
        assert // can only call when creating
        int 1                                                                                     tmp%0#0
        x-store tmp%0#0                                                                           (ùïè) tmp%0#0 |
        b main_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@13 (ùïè) tmp%0#0 | 

    main_after_if_else@12:
        // amm/contract.py:27
        // class ConstantProductAMM(ARC4Contract):
        int 0                                                                                     tmp%0#0
        x-store tmp%0#0                                                                           (ùïè) tmp%0#0 |
        b main_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@13 (ùïè) tmp%0#0 | 

    main_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@13:          (ùïè) tmp%0#0 |
        x-load tmp%0#0                                                                            tmp%0#0
        return


// examples.amm.contract.do_asset_transfer(receiver: bytes, asset: uint64, amount: uint64) -> void:
subroutine do_asset_transfer:
    do_asset_transfer_block@0:                                                                    (ùï°) receiver#0,asset#0,amount#0 |
        // amm/contract.py:358-362
        // itxn.AssetTransfer(
        //     xfer_asset=asset,
        //     asset_amount=amount,
        //     asset_receiver=receiver,
        // ).submit()
        itxn_begin                                                                                (ùï°) receiver#0,asset#0,amount#0 |
        p-load receiver#0                                                                         (ùï°) receiver#0,asset#0,amount#0 | receiver#0 (copy)
        itxn_field AssetReceiver                                                                  (ùï°) receiver#0,asset#0,amount#0 |
        p-load amount#0                                                                           (ùï°) receiver#0,asset#0,amount#0 | amount#0 (copy)
        itxn_field AssetAmount                                                                    (ùï°) receiver#0,asset#0,amount#0 |
        p-load asset#0                                                                            (ùï°) receiver#0,asset#0,amount#0 | asset#0 (copy)
        itxn_field XferAsset                                                                      (ùï°) receiver#0,asset#0,amount#0 |
        // amm/contract.py:358
        // itxn.AssetTransfer(
        int axfer                                                                                 (ùï°) receiver#0,asset#0,amount#0 | axfer
        itxn_field TypeEnum                                                                       (ùï°) receiver#0,asset#0,amount#0 |
        int 0                                                                                     (ùï°) receiver#0,asset#0,amount#0 | 0
        itxn_field Fee                                                                            (ùï°) receiver#0,asset#0,amount#0 |
        // amm/contract.py:358-362
        // itxn.AssetTransfer(
        //     xfer_asset=asset,
        //     asset_amount=amount,
        //     asset_receiver=receiver,
        // ).submit()
        itxn_submit                                                                               (ùï°) receiver#0,asset#0,amount#0 |
        retsub


// examples.amm.contract.ConstantProductAMM.set_governor(new_governor: bytes) -> void:
subroutine set_governor:
    set_governor_block@0:                                                                         (ùï°) new_governor#0 |
        // amm/contract.py:46
        // self._check_is_governor()
        callsub _check_is_governor                                                                (ùï°) new_governor#0 |
        // amm/contract.py:47
        // self.governor = new_governor
        byte "governor"                                                                           (ùï°) new_governor#0 | "governor"
        p-load new_governor#0                                                                     (ùï°) new_governor#0 | "governor",new_governor#0 (copy)
        app_global_put                                                                            (ùï°) new_governor#0 |
        retsub


// examples.amm.contract.ConstantProductAMM.bootstrap(seed: uint64, a_asset: uint64, b_asset: uint64) -> uint64:
subroutine bootstrap:
    bootstrap_block@0:                                                                            (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:66
        // assert not self.pool_token, "application has already been bootstrapped"
        int 0                                                                                     (ùï°) seed#0,a_asset#0,b_asset#0 | 0
        byte "pool_token"                                                                         (ùï°) seed#0,a_asset#0,b_asset#0 | 0,"pool_token"
        app_global_get_ex                                                                         (ùï°) seed#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.pool_token exists                                                    (ùï°) seed#0,a_asset#0,b_asset#0 | maybe_value%0#0
        l-load maybe_value%0#0 0                                                                  (ùï°) seed#0,a_asset#0,b_asset#0 | maybe_value%0#0
        !                                                                                         (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%0#0
        assert // application has already been bootstrapped                                       (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:67
        // self._check_is_governor()
        callsub _check_is_governor                                                                (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:68
        // assert Global.group_size == 2, "group size not 2"
        global GroupSize                                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%1#0
        int 2                                                                                     (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%1#0,2
        ==                                                                                        (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%2#0
        assert // group size not 2                                                                (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:69
        // assert seed.receiver == Global.current_application_address, "receiver not app address"
        p-load seed#0                                                                             (ùï°) seed#0,a_asset#0,b_asset#0 | seed#0 (copy)
        gtxns Receiver                                                                            (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%3#0
        global CurrentApplicationAddress                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%3#0,tmp%4#0
        l-load tmp%3#0 1                                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%4#0,tmp%3#0
        l-load tmp%4#0 1                                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%3#0,tmp%4#0
        ==                                                                                        (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%5#0
        assert // receiver not app address                                                        (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:71
        // assert seed.amount >= 300_000, "amount minimum not met"  # 0.3 Algos
        p-load seed#0                                                                             (ùï°) seed#0,a_asset#0,b_asset#0 | seed#0 (copy)
        gtxns Amount                                                                              (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%6#0
        int 300000                                                                                (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%6#0,300000
        >=                                                                                        (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%7#0
        assert // amount minimum not met                                                          (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:72
        // assert a_asset.id < b_asset.id, "asset a must be less than asset b"
        p-load a_asset#0                                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | a_asset#0 (copy)
        p-load b_asset#0                                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | a_asset#0 (copy),b_asset#0 (copy)
        <                                                                                         (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%8#0
        assert // asset a must be less than asset b                                               (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:73
        // self.asset_a = a_asset
        byte "asset_a"                                                                            (ùï°) seed#0,a_asset#0,b_asset#0 | "asset_a"
        p-load a_asset#0                                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | "asset_a",a_asset#0 (copy)
        app_global_put                                                                            (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:74
        // self.asset_b = b_asset
        byte "asset_b"                                                                            (ùï°) seed#0,a_asset#0,b_asset#0 | "asset_b"
        p-load b_asset#0                                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | "asset_b",b_asset#0 (copy)
        app_global_put                                                                            (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:271-279
        // itxn.AssetConfig(
        //     asset_name=b"DPT-" + self.asset_a.unit_name + b"-" + self.asset_b.unit_name,
        //     unit_name=b"dbt",
        //     total=TOTAL_SUPPLY,
        //     decimals=3,
        //     manager=Global.current_application_address,
        //     reserve=Global.current_application_address,
        // )
        // .submit()
        itxn_begin                                                                                (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:272
        // asset_name=b"DPT-" + self.asset_a.unit_name + b"-" + self.asset_b.unit_name,
        int 0                                                                                     (ùï°) seed#0,a_asset#0,b_asset#0 | 0
        byte "asset_a"                                                                            (ùï°) seed#0,a_asset#0,b_asset#0 | 0,"asset_a"
        app_global_get_ex                                                                         (ùï°) seed#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.asset_a exists                                                       (ùï°) seed#0,a_asset#0,b_asset#0 | maybe_value%0#0
        l-load maybe_value%0#0 0                                                                  (ùï°) seed#0,a_asset#0,b_asset#0 | maybe_value%0#0
        asset_params_get AssetUnitName                                                            (ùï°) seed#0,a_asset#0,b_asset#0 | value%0#0,check%0#0
        assert // asset exists                                                                    (ùï°) seed#0,a_asset#0,b_asset#0 | value%0#0
        byte 0x4450542d                                                                           (ùï°) seed#0,a_asset#0,b_asset#0 | value%0#0,0x4450542d
        l-load value%0#0 1                                                                        (ùï°) seed#0,a_asset#0,b_asset#0 | 0x4450542d,value%0#0
        concat                                                                                    (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%0#1
        byte 0x2d                                                                                 (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%0#1,0x2d
        concat                                                                                    (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%1#1
        p-load b_asset#0                                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%1#1,b_asset#0 (copy)
        asset_params_get AssetUnitName                                                            (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%1#1,value%1#0,check%1#0
        assert // asset exists                                                                    (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%1#1,value%1#0
        l-load tmp%1#1 1                                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | value%1#0,tmp%1#1
        l-load value%1#0 1                                                                        (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%1#1,value%1#0
        concat                                                                                    (ùï°) seed#0,a_asset#0,b_asset#0 | inner_txn_params%0%%param_ConfigAssetName_idx_0#0
        // amm/contract.py:276
        // manager=Global.current_application_address,
        global CurrentApplicationAddress                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | inner_txn_params%0%%param_ConfigAssetName_idx_0#0,inner_txn_params%0%%param_ConfigAssetManager_idx_0#0
        // amm/contract.py:277
        // reserve=Global.current_application_address,
        global CurrentApplicationAddress                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | inner_txn_params%0%%param_ConfigAssetName_idx_0#0,inner_txn_params%0%%param_ConfigAssetManager_idx_0#0,inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0
        itxn_field ConfigAssetReserve                                                             (ùï°) seed#0,a_asset#0,b_asset#0 | inner_txn_params%0%%param_ConfigAssetName_idx_0#0,inner_txn_params%0%%param_ConfigAssetManager_idx_0#0
        l-load inner_txn_params%0%%param_ConfigAssetManager_idx_0#0 0                             (ùï°) seed#0,a_asset#0,b_asset#0 | inner_txn_params%0%%param_ConfigAssetName_idx_0#0,inner_txn_params%0%%param_ConfigAssetManager_idx_0#0
        itxn_field ConfigAssetManager                                                             (ùï°) seed#0,a_asset#0,b_asset#0 | inner_txn_params%0%%param_ConfigAssetName_idx_0#0
        // amm/contract.py:275
        // decimals=3,
        int 3                                                                                     (ùï°) seed#0,a_asset#0,b_asset#0 | inner_txn_params%0%%param_ConfigAssetName_idx_0#0,3
        itxn_field ConfigAssetDecimals                                                            (ùï°) seed#0,a_asset#0,b_asset#0 | inner_txn_params%0%%param_ConfigAssetName_idx_0#0
        // amm/contract.py:274
        // total=TOTAL_SUPPLY,
        int 10000000000                                                                           (ùï°) seed#0,a_asset#0,b_asset#0 | inner_txn_params%0%%param_ConfigAssetName_idx_0#0,10000000000
        itxn_field ConfigAssetTotal                                                               (ùï°) seed#0,a_asset#0,b_asset#0 | inner_txn_params%0%%param_ConfigAssetName_idx_0#0
        // amm/contract.py:273
        // unit_name=b"dbt",
        byte 0x646274                                                                             (ùï°) seed#0,a_asset#0,b_asset#0 | inner_txn_params%0%%param_ConfigAssetName_idx_0#0,0x646274
        itxn_field ConfigAssetUnitName                                                            (ùï°) seed#0,a_asset#0,b_asset#0 | inner_txn_params%0%%param_ConfigAssetName_idx_0#0
        l-load inner_txn_params%0%%param_ConfigAssetName_idx_0#0 0                                (ùï°) seed#0,a_asset#0,b_asset#0 | inner_txn_params%0%%param_ConfigAssetName_idx_0#0
        itxn_field ConfigAssetName                                                                (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:271
        // itxn.AssetConfig(
        int acfg                                                                                  (ùï°) seed#0,a_asset#0,b_asset#0 | acfg
        itxn_field TypeEnum                                                                       (ùï°) seed#0,a_asset#0,b_asset#0 |
        int 0                                                                                     (ùï°) seed#0,a_asset#0,b_asset#0 | 0
        itxn_field Fee                                                                            (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:271-279
        // itxn.AssetConfig(
        //     asset_name=b"DPT-" + self.asset_a.unit_name + b"-" + self.asset_b.unit_name,
        //     unit_name=b"dbt",
        //     total=TOTAL_SUPPLY,
        //     decimals=3,
        //     manager=Global.current_application_address,
        //     reserve=Global.current_application_address,
        // )
        // .submit()
        itxn_submit                                                                               (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:271-280
        // itxn.AssetConfig(
        //     asset_name=b"DPT-" + self.asset_a.unit_name + b"-" + self.asset_b.unit_name,
        //     unit_name=b"dbt",
        //     total=TOTAL_SUPPLY,
        //     decimals=3,
        //     manager=Global.current_application_address,
        //     reserve=Global.current_application_address,
        // )
        // .submit()
        // .created_asset
        itxn CreatedAssetID                                                                       (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%2#1
        // amm/contract.py:75
        // self.pool_token = self._create_pool_token()
        byte "pool_token"                                                                         (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%2#1,"pool_token"
        l-load tmp%2#1 1                                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | "pool_token",tmp%2#1
        app_global_put                                                                            (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:77
        // self._do_opt_in(self.asset_a)
        int 0                                                                                     (ùï°) seed#0,a_asset#0,b_asset#0 | 0
        byte "asset_a"                                                                            (ùï°) seed#0,a_asset#0,b_asset#0 | 0,"asset_a"
        app_global_get_ex                                                                         (ùï°) seed#0,a_asset#0,b_asset#0 | asset#0,maybe_exists%1#0
        assert // check self.asset_a exists                                                       (ùï°) seed#0,a_asset#0,b_asset#0 | asset#0
        // amm/contract.py:286
        // receiver=Global.current_application_address,
        global CurrentApplicationAddress                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | asset#0,tmp%0#1
        // amm/contract.py:285-289
        // do_asset_transfer(
        //     receiver=Global.current_application_address,
        //     asset=asset,
        //     amount=UInt64(0),
        // )
        l-load asset#0 1                                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%0#1,asset#0
        // amm/contract.py:288
        // amount=UInt64(0),
        int 0                                                                                     (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%0#1,asset#0,0
        // amm/contract.py:285-289
        // do_asset_transfer(
        //     receiver=Global.current_application_address,
        //     asset=asset,
        //     amount=UInt64(0),
        // )
        callsub do_asset_transfer                                                                 (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:78
        // self._do_opt_in(self.asset_b)
        int 0                                                                                     (ùï°) seed#0,a_asset#0,b_asset#0 | 0
        byte "asset_b"                                                                            (ùï°) seed#0,a_asset#0,b_asset#0 | 0,"asset_b"
        app_global_get_ex                                                                         (ùï°) seed#0,a_asset#0,b_asset#0 | asset#0,maybe_exists%2#0
        assert // check self.asset_b exists                                                       (ùï°) seed#0,a_asset#0,b_asset#0 | asset#0
        // amm/contract.py:286
        // receiver=Global.current_application_address,
        global CurrentApplicationAddress                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | asset#0,tmp%0#1
        // amm/contract.py:285-289
        // do_asset_transfer(
        //     receiver=Global.current_application_address,
        //     asset=asset,
        //     amount=UInt64(0),
        // )
        l-load asset#0 1                                                                          (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%0#1,asset#0
        // amm/contract.py:288
        // amount=UInt64(0),
        int 0                                                                                     (ùï°) seed#0,a_asset#0,b_asset#0 | tmp%0#1,asset#0,0
        // amm/contract.py:285-289
        // do_asset_transfer(
        //     receiver=Global.current_application_address,
        //     asset=asset,
        //     amount=UInt64(0),
        // )
        callsub do_asset_transfer                                                                 (ùï°) seed#0,a_asset#0,b_asset#0 |
        // amm/contract.py:79
        // return self.pool_token.id
        int 0                                                                                     (ùï°) seed#0,a_asset#0,b_asset#0 | 0
        byte "pool_token"                                                                         (ùï°) seed#0,a_asset#0,b_asset#0 | 0,"pool_token"
        app_global_get_ex                                                                         (ùï°) seed#0,a_asset#0,b_asset#0 | maybe_value%3#0,maybe_exists%3#0
        assert // check self.pool_token exists                                                    (ùï°) seed#0,a_asset#0,b_asset#0 | maybe_value%3#0
        l-load maybe_value%3#0 0                                                                  (ùï°) seed#0,a_asset#0,b_asset#0 | maybe_value%3#0
        retsub                                                                                    maybe_value%3#0


// examples.amm.contract.ConstantProductAMM.mint(a_xfer: uint64, b_xfer: uint64, pool_asset: uint64, a_asset: uint64, b_asset: uint64) -> void:
subroutine mint:
    mint_block@0:                                                                                 (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |
        // amm/contract.py:253
        // assert self.pool_token, "bootstrap method needs to be called first"
        int 0                                                                                     (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | 0
        byte "pool_token"                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | 0,"pool_token"
        app_global_get_ex                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,maybe_exists%0#1
        assert // check self.pool_token exists                                                    (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1
        l-load-copy maybe_value%0#1 0                                                             (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,maybe_value%0#1 (copy)
        assert // bootstrap method needs to be called first                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1
        // amm/contract.py:114
        // assert pool_asset == self.pool_token, "asset pool incorrect"
        p-load pool_asset#0                                                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,pool_asset#0 (copy)
        l-load maybe_value%0#1 1                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | pool_asset#0 (copy),maybe_value%0#1
        ==                                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | tmp%0#0
        assert // asset pool incorrect                                                            (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |
        // amm/contract.py:115
        // assert a_asset == self.asset_a, "asset a incorrect"
        int 0                                                                                     (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | 0
        byte "asset_a"                                                                            (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | 0,"asset_a"
        app_global_get_ex                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_exists%1#0
        assert // check self.asset_a exists                                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0
        p-load a_asset#0                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,a_asset#0 (copy)
        l-load-copy maybe_value%1#0 1                                                             (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,a_asset#0 (copy),maybe_value%1#0 (copy)
        ==                                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,tmp%1#0
        assert // asset a incorrect                                                               (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0
        // amm/contract.py:116
        // assert b_asset == self.asset_b, "asset b incorrect"
        int 0                                                                                     (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,0
        byte "asset_b"                                                                            (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,0,"asset_b"
        app_global_get_ex                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,maybe_exists%2#0
        assert // check self.asset_b exists                                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0
        p-load b_asset#0                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,b_asset#0 (copy)
        l-load-copy maybe_value%2#0 1                                                             (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,b_asset#0 (copy),maybe_value%2#0 (copy)
        ==                                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%2#0
        assert // asset b incorrect                                                               (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0
        // amm/contract.py:117
        // assert a_xfer.sender == Txn.sender, "sender invalid"
        p-load a_xfer#0                                                                           (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,a_xfer#0 (copy)
        gtxns Sender                                                                              (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%3#0
        txn Sender                                                                                (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%3#0,tmp%4#0
        l-load tmp%3#0 1                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%4#0,tmp%3#0
        l-load tmp%4#0 1                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%3#0,tmp%4#0
        ==                                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%5#0
        assert // sender invalid                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0
        // amm/contract.py:118
        // assert b_xfer.sender == Txn.sender, "sender invalid"
        p-load b_xfer#0                                                                           (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,b_xfer#0 (copy)
        gtxns Sender                                                                              (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%6#0
        txn Sender                                                                                (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%6#0,tmp%7#0
        l-load tmp%6#0 1                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%7#0,tmp%6#0
        l-load tmp%7#0 1                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%6#0,tmp%7#0
        ==                                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%8#0
        assert // sender invalid                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0
        // amm/contract.py:122
        // a_xfer.asset_receiver == Global.current_application_address
        p-load a_xfer#0                                                                           (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,a_xfer#0 (copy)
        gtxns AssetReceiver                                                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%9#0
        global CurrentApplicationAddress                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%9#0,tmp%10#0
        l-load tmp%9#0 1                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%10#0,tmp%9#0
        l-load tmp%10#0 1                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%9#0,tmp%10#0
        ==                                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%11#0
        // amm/contract.py:121-123
        // assert (
        //     a_xfer.asset_receiver == Global.current_application_address
        // ), "receiver not app address"
        assert // receiver not app address                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0
        // amm/contract.py:124
        // assert a_xfer.xfer_asset == self.asset_a, "asset a incorrect"
        p-load a_xfer#0                                                                           (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,a_xfer#0 (copy)
        gtxns XferAsset                                                                           (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%1#0,maybe_value%2#0,tmp%12#0
        l-load maybe_value%1#0 2                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,tmp%12#0,maybe_value%1#0
        ==                                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,tmp%13#0
        assert // asset a incorrect                                                               (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0
        // amm/contract.py:125
        // assert a_xfer.asset_amount > 0, "amount minimum not met"
        p-load a_xfer#0                                                                           (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_xfer#0 (copy)
        gtxns AssetAmount                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0
        l-store-copy a_amount#0 0                                                                 (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0,a_amount#0 (copy)
        v-store a_amount#0                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0
        l-load-copy a_amount#0 0                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0,a_amount#0 (copy)
        assert // amount minimum not met                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0
        // amm/contract.py:129
        // b_xfer.asset_receiver == Global.current_application_address
        p-load b_xfer#0                                                                           (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0,b_xfer#0 (copy)
        gtxns AssetReceiver                                                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0,tmp%16#0
        global CurrentApplicationAddress                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0,tmp%16#0,tmp%17#0
        l-load tmp%16#0 1                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0,tmp%17#0,tmp%16#0
        l-load tmp%17#0 1                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0,tmp%16#0,tmp%17#0
        ==                                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0,tmp%18#0
        // amm/contract.py:128-130
        // assert (
        //     b_xfer.asset_receiver == Global.current_application_address
        // ), "receiver not app address"
        assert // receiver not app address                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0
        // amm/contract.py:131
        // assert b_xfer.xfer_asset == self.asset_b, "asset b incorrect"
        p-load b_xfer#0                                                                           (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0,b_xfer#0 (copy)
        gtxns XferAsset                                                                           (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%2#0,a_amount#0,tmp%19#0
        l-load maybe_value%2#0 2                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,tmp%19#0,maybe_value%2#0
        ==                                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,tmp%20#0
        assert // asset b incorrect                                                               (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0
        // amm/contract.py:132
        // assert b_xfer.asset_amount > 0, "amount minimum not met"
        p-load b_xfer#0                                                                           (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,b_xfer#0 (copy)
        gtxns AssetAmount                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,b_amount#0
        l-store-copy b_amount#0 0                                                                 (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,b_amount#0,b_amount#0 (copy)
        v-store b_amount#0                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,b_amount#0
        l-load b_amount#0 0                                                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,b_amount#0
        assert // amount minimum not met                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0
        // amm/contract.py:135
        // pool_balance=self._current_pool_balance(),
        callsub _current_pool_balance                                                             (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,pool_balance#0
        v-store pool_balance#0                                                                    (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0
        // amm/contract.py:136
        // a_balance=self._current_a_balance(),
        callsub _current_a_balance                                                                (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,a_balance#0
        l-store-copy a_balance#0 0                                                                (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,a_balance#0,a_balance#0 (copy)
        v-store a_balance#0                                                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,a_balance#0
        // amm/contract.py:137
        // b_balance=self._current_b_balance(),
        callsub _current_b_balance                                                                (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,a_balance#0,b_balance#0
        v-store b_balance#0                                                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,a_balance#0
        // amm/contract.py:331
        // is_initial_mint = a_balance == a_amount and b_balance == b_amount
        l-load a_balance#0 0                                                                      (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,a_balance#0
        l-load a_amount#0 1                                                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_balance#0,a_amount#0
        ==                                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | tmp%0#0
        bz mint_bool_false@4 ; b mint_and_contd@2                                                 (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |

    mint_and_contd@2:                                                                             (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |
        // amm/contract.py:331
        // is_initial_mint = a_balance == a_amount and b_balance == b_amount
        v-load b_balance#0                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | b_balance#0
        v-load b_amount#0                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | b_balance#0,b_amount#0
        ==                                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | tmp%1#0
        bz mint_bool_false@4 ; b mint_bool_true@3                                                 (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |

    mint_bool_true@3:                                                                             (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |
        int 1                                                                                     (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | is_initial_mint#0
        x-store is_initial_mint#0                                                                 (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) is_initial_mint#0 |
        b mint_bool_merge@5                                                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) is_initial_mint#0 |

    mint_bool_false@4:                                                                            (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |
        int 0                                                                                     (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | is_initial_mint#0
        x-store is_initial_mint#0                                                                 (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) is_initial_mint#0 |
        b mint_bool_merge@5                                                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) is_initial_mint#0 |

    mint_bool_merge@5:                                                                            (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) is_initial_mint#0 |
        // amm/contract.py:332
        // if is_initial_mint:
        x-load is_initial_mint#0                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | is_initial_mint#0
        bz mint_after_if_else@7 ; b mint_if_body@6                                                (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |

    mint_if_body@6:                                                                               (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |
        // amm/contract.py:333
        // return op.sqrt(a_amount * b_amount) - SCALE
        v-load a_amount#0                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0
        v-load b_amount#0                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amount#0,b_amount#0
        *                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | tmp%2#1
        sqrt                                                                                      (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | tmp%3#1
        int 1000                                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | tmp%3#1,1000
        -                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | to_mint#0
        x-store to_mint#0                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) to_mint#0 |
        // amm/contract.py:134-140
        // to_mint = tokens_to_mint(
        //     pool_balance=self._current_pool_balance(),
        //     a_balance=self._current_a_balance(),
        //     b_balance=self._current_b_balance(),
        //     a_amount=a_xfer.asset_amount,
        //     b_amount=b_xfer.asset_amount,
        // )
        b mint_after_inlined_examples.amm.contract.tokens_to_mint@10                              (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) to_mint#0 |

    mint_after_if_else@7:                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |
        // amm/contract.py:334
        // issued = TOTAL_SUPPLY - pool_balance
        int 10000000000                                                                           (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | 10000000000
        v-load pool_balance#0                                                                     (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | 10000000000,pool_balance#0
        -                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | issued#0
        x-store issued#0                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 |
        // amm/contract.py:335
        // a_ratio = SCALE * a_amount // (a_balance - a_amount)
        int 1000                                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | 1000
        v-load a_amount#0                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | 1000,a_amount#0
        l-store-copy a_amount#0 1                                                                 (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_amount#0,1000,a_amount#0 (copy)
        *                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_amount#0,tmp%5#1
        v-load a_balance#0                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_amount#0,tmp%5#1,a_balance#0
        l-load a_amount#0 2                                                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | tmp%5#1,a_balance#0,a_amount#0
        -                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | tmp%5#1,tmp%6#1
        l-load tmp%5#1 1                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | tmp%6#1,tmp%5#1
        l-load tmp%6#1 1                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | tmp%5#1,tmp%6#1
        /                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0
        l-store-copy a_ratio#0 0                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,a_ratio#0 (copy)
        v-store a_ratio#0                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0
        // amm/contract.py:336
        // b_ratio = SCALE * b_amount // (b_balance - b_amount)
        int 1000                                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,1000
        v-load b_amount#0                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,1000,b_amount#0
        l-store-copy b_amount#0 1                                                                 (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,b_amount#0,1000,b_amount#0 (copy)
        *                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,b_amount#0,tmp%7#1
        v-load b_balance#0                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,b_amount#0,tmp%7#1,b_balance#0
        l-load b_amount#0 2                                                                       (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,tmp%7#1,b_balance#0,b_amount#0
        -                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,tmp%7#1,tmp%8#1
        l-load tmp%7#1 1                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,tmp%8#1,tmp%7#1
        l-load tmp%8#1 1                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,tmp%7#1,tmp%8#1
        /                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,b_ratio#0
        l-store-copy b_ratio#0 0                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,b_ratio#0,b_ratio#0 (copy)
        v-store b_ratio#0                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,b_ratio#0
        // amm/contract.py:337
        // if a_ratio < b_ratio:
        l-load a_ratio#0 1                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | b_ratio#0,a_ratio#0
        l-load b_ratio#0 1                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0,b_ratio#0
        <                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | tmp%9#1
        bz mint_else_body@9 ; b mint_if_body@8                                                    (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 |

    mint_if_body@8:                                                                               (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 |
        // amm/contract.py:338
        // return a_ratio * issued // SCALE
        v-load a_ratio#0                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | a_ratio#0
        x-load issued#0                                                                           (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_ratio#0,issued#0
        *                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | tmp%10#1
        int 1000                                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | tmp%10#1,1000
        /                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | to_mint#0
        x-store to_mint#0                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) to_mint#0 |
        // amm/contract.py:134-140
        // to_mint = tokens_to_mint(
        //     pool_balance=self._current_pool_balance(),
        //     a_balance=self._current_a_balance(),
        //     b_balance=self._current_b_balance(),
        //     a_amount=a_xfer.asset_amount,
        //     b_amount=b_xfer.asset_amount,
        // )
        b mint_after_inlined_examples.amm.contract.tokens_to_mint@10                              (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) to_mint#0 |

    mint_else_body@9:                                                                             (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 |
        // amm/contract.py:340
        // return b_ratio * issued // SCALE
        v-load b_ratio#0                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) issued#0 | b_ratio#0
        x-load issued#0                                                                           (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | b_ratio#0,issued#0
        *                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | tmp%12#0
        int 1000                                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | tmp%12#0,1000
        /                                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | to_mint#0
        x-store to_mint#0                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) to_mint#0 |
        // amm/contract.py:134-140
        // to_mint = tokens_to_mint(
        //     pool_balance=self._current_pool_balance(),
        //     a_balance=self._current_a_balance(),
        //     b_balance=self._current_b_balance(),
        //     a_amount=a_xfer.asset_amount,
        //     b_amount=b_xfer.asset_amount,
        // )
        b mint_after_inlined_examples.amm.contract.tokens_to_mint@10                              (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) to_mint#0 |

    mint_after_inlined_examples.amm.contract.tokens_to_mint@10:                                   (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | (ùïè) to_mint#0 |
        // amm/contract.py:141
        // assert to_mint > 0, "send amount too low"
        x-load to_mint#0                                                                          (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | to_mint#0
        l-store-copy to_mint#0 0                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | to_mint#0,to_mint#0 (copy)
        assert // send amount too low                                                             (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | to_mint#0
        // amm/contract.py:144
        // do_asset_transfer(receiver=Txn.sender, asset=self.pool_token, amount=to_mint)
        txn Sender                                                                                (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | to_mint#0,tmp%29#0
        int 0                                                                                     (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | to_mint#0,tmp%29#0,0
        byte "pool_token"                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | to_mint#0,tmp%29#0,0,"pool_token"
        app_global_get_ex                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | to_mint#0,tmp%29#0,maybe_value%5#0,maybe_exists%5#0
        assert // check self.pool_token exists                                                    (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | to_mint#0,tmp%29#0,maybe_value%5#0
        l-load tmp%29#0 1                                                                         (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | to_mint#0,maybe_value%5#0,tmp%29#0
        l-load maybe_value%5#0 1                                                                  (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | to_mint#0,tmp%29#0,maybe_value%5#0
        l-load to_mint#0 2                                                                        (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | tmp%29#0,maybe_value%5#0,to_mint#0
        callsub do_asset_transfer                                                                 (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |
        // amm/contract.py:145
        // self._update_ratio()
        callsub _update_ratio                                                                     (ùï°) a_xfer#0,b_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |
        retsub


// examples.amm.contract.ConstantProductAMM.burn(pool_xfer: uint64, pool_asset: uint64, a_asset: uint64, b_asset: uint64) -> void:
subroutine burn:
    burn_block@0:                                                                                 (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |
        // amm/contract.py:253
        // assert self.pool_token, "bootstrap method needs to be called first"
        int 0                                                                                     (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | 0
        byte "pool_token"                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | 0,"pool_token"
        app_global_get_ex                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,maybe_exists%0#1
        assert // check self.pool_token exists                                                    (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1
        l-load-copy maybe_value%0#1 0                                                             (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,maybe_value%0#1 (copy)
        assert // bootstrap method needs to be called first                                       (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1
        // amm/contract.py:172
        // assert pool_asset == self.pool_token, "asset pool incorrect"
        p-load pool_asset#0                                                                       (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,pool_asset#0 (copy)
        l-load-copy maybe_value%0#1 1                                                             (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,pool_asset#0 (copy),maybe_value%0#1 (copy)
        ==                                                                                        (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,tmp%0#0
        assert // asset pool incorrect                                                            (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1
        // amm/contract.py:173
        // assert a_asset == self.asset_a, "asset a incorrect"
        int 0                                                                                     (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,0
        byte "asset_a"                                                                            (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,0,"asset_a"
        app_global_get_ex                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,maybe_value%1#0,maybe_exists%1#0
        assert // check self.asset_a exists                                                       (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,maybe_value%1#0
        p-load a_asset#0                                                                          (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,maybe_value%1#0,a_asset#0 (copy)
        l-load maybe_value%1#0 1                                                                  (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,a_asset#0 (copy),maybe_value%1#0
        ==                                                                                        (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,tmp%1#0
        assert // asset a incorrect                                                               (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1
        // amm/contract.py:174
        // assert b_asset == self.asset_b, "asset b incorrect"
        int 0                                                                                     (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,0
        byte "asset_b"                                                                            (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,0,"asset_b"
        app_global_get_ex                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,maybe_value%2#0,maybe_exists%2#0
        assert // check self.asset_b exists                                                       (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,maybe_value%2#0
        p-load b_asset#0                                                                          (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,maybe_value%2#0,b_asset#0 (copy)
        l-load maybe_value%2#0 1                                                                  (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,b_asset#0 (copy),maybe_value%2#0
        ==                                                                                        (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,tmp%2#0
        assert // asset b incorrect                                                               (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1
        // amm/contract.py:177
        // pool_xfer.asset_receiver == Global.current_application_address
        p-load pool_xfer#0                                                                        (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,pool_xfer#0 (copy)
        gtxns AssetReceiver                                                                       (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,tmp%3#0
        global CurrentApplicationAddress                                                          (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,tmp%3#0,tmp%4#0
        l-load tmp%3#0 1                                                                          (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,tmp%4#0,tmp%3#0
        l-load tmp%4#0 1                                                                          (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,tmp%3#0,tmp%4#0
        ==                                                                                        (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,tmp%5#0
        // amm/contract.py:176-178
        // assert (
        //     pool_xfer.asset_receiver == Global.current_application_address
        // ), "receiver not app address"
        assert // receiver not app address                                                        (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1
        // amm/contract.py:179
        // assert pool_xfer.asset_amount > 0, "amount minimum not met"
        p-load pool_xfer#0                                                                        (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,pool_xfer#0 (copy)
        gtxns AssetAmount                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,amount#0
        l-load-copy amount#0 0                                                                    (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,amount#0,amount#0 (copy)
        assert // amount minimum not met                                                          (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,amount#0
        // amm/contract.py:180
        // assert pool_xfer.xfer_asset == self.pool_token, "asset pool incorrect"
        p-load pool_xfer#0                                                                        (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,amount#0,pool_xfer#0 (copy)
        gtxns XferAsset                                                                           (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | maybe_value%0#1,amount#0,tmp%8#0
        l-load maybe_value%0#1 2                                                                  (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,tmp%8#0,maybe_value%0#1
        ==                                                                                        (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,tmp%9#0
        assert // asset pool incorrect                                                            (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0
        // amm/contract.py:181
        // assert pool_xfer.sender == Txn.sender, "sender invalid"
        p-load pool_xfer#0                                                                        (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,pool_xfer#0 (copy)
        gtxns Sender                                                                              (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,tmp%10#0
        txn Sender                                                                                (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,tmp%10#0,tmp%11#0
        l-load tmp%10#0 1                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,tmp%11#0,tmp%10#0
        l-load tmp%11#0 1                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,tmp%10#0,tmp%11#0
        ==                                                                                        (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,tmp%12#0
        assert // sender invalid                                                                  (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0
        // amm/contract.py:185
        // pool_balance = self._current_pool_balance()
        callsub _current_pool_balance                                                             (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,pool_balance#0
        // amm/contract.py:188
        // supply=self._current_a_balance(),
        callsub _current_a_balance                                                                (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,pool_balance#0,supply#0
        // amm/contract.py:345
        // issued = TOTAL_SUPPLY - pool_balance - amount
        int 10000000000                                                                           (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,pool_balance#0,supply#0,10000000000
        l-load pool_balance#0 2                                                                   (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,supply#0,10000000000,pool_balance#0
        -                                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,supply#0,tmp%0#1
        l-load-copy amount#0 2                                                                    (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,supply#0,tmp%0#1,amount#0 (copy)
        -                                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,supply#0,issued#0
        // amm/contract.py:346
        // return supply * amount // issued
        l-load supply#0 1                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,issued#0,supply#0
        l-load-copy amount#0 2                                                                    (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,issued#0,supply#0,amount#0 (copy)
        *                                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,issued#0,tmp%1#1
        l-load-copy issued#0 1                                                                    (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,issued#0,tmp%1#1,issued#0 (copy)
        /                                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,issued#0,a_amt#0
        // amm/contract.py:193
        // supply=self._current_b_balance(),
        callsub _current_b_balance                                                                (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | amount#0,issued#0,a_amt#0,supply#0
        // amm/contract.py:346
        // return supply * amount // issued
        l-load amount#0 3                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | issued#0,a_amt#0,supply#0,amount#0
        *                                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | issued#0,a_amt#0,tmp%1#1
        l-load issued#0 2                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amt#0,tmp%1#1,issued#0
        /                                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amt#0,b_amt#0
        // amm/contract.py:198
        // do_asset_transfer(receiver=Txn.sender, asset=self.asset_a, amount=a_amt)
        txn Sender                                                                                (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amt#0,b_amt#0,tmp%17#0
        int 0                                                                                     (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amt#0,b_amt#0,tmp%17#0,0
        byte "asset_a"                                                                            (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amt#0,b_amt#0,tmp%17#0,0,"asset_a"
        app_global_get_ex                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amt#0,b_amt#0,tmp%17#0,maybe_value%4#0,maybe_exists%4#0
        assert // check self.asset_a exists                                                       (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amt#0,b_amt#0,tmp%17#0,maybe_value%4#0
        l-load tmp%17#0 1                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amt#0,b_amt#0,maybe_value%4#0,tmp%17#0
        l-load maybe_value%4#0 1                                                                  (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | a_amt#0,b_amt#0,tmp%17#0,maybe_value%4#0
        l-load a_amt#0 3                                                                          (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | b_amt#0,tmp%17#0,maybe_value%4#0,a_amt#0
        callsub do_asset_transfer                                                                 (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | b_amt#0
        // amm/contract.py:201
        // do_asset_transfer(receiver=Txn.sender, asset=self.asset_b, amount=b_amt)
        txn Sender                                                                                (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | b_amt#0,tmp%18#0
        int 0                                                                                     (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | b_amt#0,tmp%18#0,0
        byte "asset_b"                                                                            (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | b_amt#0,tmp%18#0,0,"asset_b"
        app_global_get_ex                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | b_amt#0,tmp%18#0,maybe_value%5#0,maybe_exists%5#0
        assert // check self.asset_b exists                                                       (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | b_amt#0,tmp%18#0,maybe_value%5#0
        l-load tmp%18#0 1                                                                         (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | b_amt#0,maybe_value%5#0,tmp%18#0
        l-load maybe_value%5#0 1                                                                  (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | b_amt#0,tmp%18#0,maybe_value%5#0
        l-load b_amt#0 2                                                                          (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 | tmp%18#0,maybe_value%5#0,b_amt#0
        callsub do_asset_transfer                                                                 (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |
        // amm/contract.py:202
        // self._update_ratio()
        callsub _update_ratio                                                                     (ùï°) pool_xfer#0,pool_asset#0,a_asset#0,b_asset#0 |
        retsub


// examples.amm.contract.ConstantProductAMM.swap(swap_xfer: uint64, a_asset: uint64, b_asset: uint64) -> void:
subroutine swap:
    swap_block@0:                                                                                 (ùï°) swap_xfer#0,a_asset#0,b_asset#0 |
        // amm/contract.py:253
        // assert self.pool_token, "bootstrap method needs to be called first"
        int 0                                                                                     (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | 0
        byte "pool_token"                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | 0,"pool_token"
        app_global_get_ex                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.pool_token exists                                                    (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0
        l-load maybe_value%0#0 0                                                                  (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0
        assert // bootstrap method needs to be called first                                       (ùï°) swap_xfer#0,a_asset#0,b_asset#0 |
        // amm/contract.py:225
        // assert a_asset == self.asset_a, "asset a incorrect"
        int 0                                                                                     (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | 0
        byte "asset_a"                                                                            (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | 0,"asset_a"
        app_global_get_ex                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_exists%0#0
        assert // check self.asset_a exists                                                       (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0
        p-load a_asset#0                                                                          (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,a_asset#0 (copy)
        l-load-copy maybe_value%0#0 1                                                             (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,a_asset#0 (copy),maybe_value%0#0 (copy)
        ==                                                                                        (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,tmp%0#0
        assert // asset a incorrect                                                               (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0
        // amm/contract.py:226
        // assert b_asset == self.asset_b, "asset b incorrect"
        int 0                                                                                     (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,0
        byte "asset_b"                                                                            (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,0,"asset_b"
        app_global_get_ex                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,maybe_exists%1#0
        assert // check self.asset_b exists                                                       (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0
        p-load b_asset#0                                                                          (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,b_asset#0 (copy)
        l-load-copy maybe_value%1#0 1                                                             (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,b_asset#0 (copy),maybe_value%1#0 (copy)
        ==                                                                                        (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,tmp%1#0
        assert // asset b incorrect                                                               (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0
        // amm/contract.py:228
        // assert swap_xfer.asset_amount > 0, "amount minimum not met"
        p-load swap_xfer#0                                                                        (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,swap_xfer#0 (copy)
        gtxns AssetAmount                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,in_amount#0
        l-store-copy in_amount#0 0                                                                (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,in_amount#0,in_amount#0 (copy)
        v-store in_amount#0                                                                       (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,in_amount#0
        l-load in_amount#0 0                                                                      (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,in_amount#0
        assert // amount minimum not met                                                          (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0
        // amm/contract.py:229
        // assert swap_xfer.sender == Txn.sender, "sender invalid"
        p-load swap_xfer#0                                                                        (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,swap_xfer#0 (copy)
        gtxns Sender                                                                              (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,tmp%4#0
        txn Sender                                                                                (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,tmp%4#0,tmp%5#0
        l-load tmp%4#0 1                                                                          (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,tmp%5#0,tmp%4#0
        l-load tmp%5#0 1                                                                          (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,tmp%4#0,tmp%5#0
        ==                                                                                        (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,tmp%6#0
        assert // sender invalid                                                                  (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0
        // amm/contract.py:231
        // match swap_xfer.xfer_asset:
        p-load swap_xfer#0                                                                        (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,swap_xfer#0 (copy)
        gtxns XferAsset                                                                           (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,tmp%7#0
        // amm/contract.py:231-241
        // match swap_xfer.xfer_asset:
        //     case self.asset_a:
        //         in_supply = self._current_b_balance()
        //         out_supply = self._current_a_balance()
        //         out_asset = self.asset_a
        //     case self.asset_b:
        //         in_supply = self._current_a_balance()
        //         out_supply = self._current_b_balance()
        //         out_asset = self.asset_b
        //     case _:
        //         assert False, "asset id incorrect"
        l-load maybe_value%0#0 2                                                                  (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%1#0,tmp%7#0,maybe_value%0#0
        l-load maybe_value%1#0 2                                                                  (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | tmp%7#0,maybe_value%0#0,maybe_value%1#0
        l-load tmp%7#0 2                                                                          (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | maybe_value%0#0,maybe_value%1#0,tmp%7#0
        match swap_switch_case_0@1 swap_switch_case_1@2 ; b swap_switch_case_default@3            (ùï°) swap_xfer#0,a_asset#0,b_asset#0 |

    swap_switch_case_0@1:                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 |
        // amm/contract.py:233
        // in_supply = self._current_b_balance()
        callsub _current_b_balance                                                                (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | in_supply#0
        v-store in_supply#0                                                                       (ùï°) swap_xfer#0,a_asset#0,b_asset#0 |
        // amm/contract.py:234
        // out_supply = self._current_a_balance()
        callsub _current_a_balance                                                                (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | out_supply#0
        x-store out_supply#0                                                                      (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 |
        // amm/contract.py:235
        // out_asset = self.asset_a
        int 0                                                                                     (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | 0
        byte "asset_a"                                                                            (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | 0,"asset_a"
        app_global_get_ex                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | out_asset#0,maybe_exists%4#0
        l-store maybe_exists%4#0 1                                                                (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | maybe_exists%4#0,out_asset#0
        v-store out_asset#0                                                                       (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | maybe_exists%4#0
        l-load maybe_exists%4#0 0                                                                 (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | maybe_exists%4#0
        assert // check self.asset_a exists                                                       (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 |
        b swap_switch_case_next@4                                                                 (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 |

    swap_switch_case_1@2:                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 |
        // amm/contract.py:237
        // in_supply = self._current_a_balance()
        callsub _current_a_balance                                                                (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | in_supply#0
        v-store in_supply#0                                                                       (ùï°) swap_xfer#0,a_asset#0,b_asset#0 |
        // amm/contract.py:238
        // out_supply = self._current_b_balance()
        callsub _current_b_balance                                                                (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | out_supply#0
        x-store out_supply#0                                                                      (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 |
        // amm/contract.py:239
        // out_asset = self.asset_b
        int 0                                                                                     (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | 0
        byte "asset_b"                                                                            (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | 0,"asset_b"
        app_global_get_ex                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | out_asset#0,maybe_exists%5#0
        l-store maybe_exists%5#0 1                                                                (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | maybe_exists%5#0,out_asset#0
        v-store out_asset#0                                                                       (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | maybe_exists%5#0
        l-load maybe_exists%5#0 0                                                                 (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | maybe_exists%5#0
        assert // check self.asset_b exists                                                       (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 |
        b swap_switch_case_next@4                                                                 (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 |

    swap_switch_case_default@3:                                                                   (ùï°) swap_xfer#0,a_asset#0,b_asset#0 |
        // amm/contract.py:241
        // assert False, "asset id incorrect"
        err // asset id incorrect                                                                 (ùï°) swap_xfer#0,a_asset#0,b_asset#0 |

    swap_switch_case_next@4:                                                                      (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 |
        // amm/contract.py:351
        // in_total = SCALE * (in_supply - in_amount) + (in_amount * FACTOR)
        v-load in_supply#0                                                                        (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | in_supply#0
        v-load in_amount#0                                                                        (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | in_supply#0,in_amount#0
        l-store-copy in_amount#0 1                                                                (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | in_amount#0,in_supply#0,in_amount#0 (copy)
        -                                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | in_amount#0,tmp%0#1
        int 1000                                                                                  (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | in_amount#0,tmp%0#1,1000
        l-load tmp%0#1 1                                                                          (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | in_amount#0,1000,tmp%0#1
        *                                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | in_amount#0,tmp%1#1
        l-load in_amount#0 1                                                                      (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | tmp%1#1,in_amount#0
        int 995                                                                                   (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | tmp%1#1,in_amount#0,995
        *                                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | tmp%1#1,tmp%2#1
        l-load tmp%1#1 1                                                                          (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | tmp%2#1,tmp%1#1
        l-load-copy tmp%2#1 1                                                                     (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | tmp%2#1,tmp%1#1,tmp%2#1 (copy)
        +                                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | tmp%2#1,in_total#0
        // amm/contract.py:352
        // out_total = in_amount * FACTOR * out_supply
        l-load tmp%2#1 1                                                                          (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | (ùïè) out_supply#0 | in_total#0,tmp%2#1
        x-load out_supply#0                                                                       (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | in_total#0,tmp%2#1,out_supply#0
        *                                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | in_total#0,out_total#0
        // amm/contract.py:353
        // return out_total // in_total
        l-load in_total#0 1                                                                       (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | out_total#0,in_total#0
        /                                                                                         (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | to_swap#0
        // amm/contract.py:246
        // assert to_swap > 0, "send amount too low"
        l-load-copy to_swap#0 0                                                                   (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | to_swap#0,to_swap#0 (copy)
        assert // send amount too low                                                             (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | to_swap#0
        // amm/contract.py:248
        // do_asset_transfer(receiver=Txn.sender, asset=out_asset, amount=to_swap)
        txn Sender                                                                                (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | to_swap#0,tmp%10#0
        v-load out_asset#0                                                                        (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | to_swap#0,tmp%10#0,out_asset#0
        l-load to_swap#0 2                                                                        (ùï°) swap_xfer#0,a_asset#0,b_asset#0 | tmp%10#0,out_asset#0,to_swap#0
        callsub do_asset_transfer                                                                 (ùï°) swap_xfer#0,a_asset#0,b_asset#0 |
        // amm/contract.py:249
        // self._update_ratio()
        callsub _update_ratio                                                                     (ùï°) swap_xfer#0,a_asset#0,b_asset#0 |
        retsub


// examples.amm.contract.ConstantProductAMM._update_ratio() -> void:
subroutine _update_ratio:
    _update_ratio_block@0:
        // amm/contract.py:257
        // a_balance = self._current_a_balance()
        callsub _current_a_balance                                                                a_balance#0
        // amm/contract.py:258
        // b_balance = self._current_b_balance()
        callsub _current_b_balance                                                                a_balance#0,b_balance#0
        // amm/contract.py:260
        // self.ratio = a_balance * SCALE // b_balance
        l-load a_balance#0 1                                                                      b_balance#0,a_balance#0
        int 1000                                                                                  b_balance#0,a_balance#0,1000
        *                                                                                         b_balance#0,tmp%0#0
        l-load b_balance#0 1                                                                      tmp%0#0,b_balance#0
        /                                                                                         materialized_values%0#0
        byte "ratio"                                                                              materialized_values%0#0,"ratio"
        l-load materialized_values%0#0 1                                                          "ratio",materialized_values%0#0
        app_global_put
        retsub


// examples.amm.contract.ConstantProductAMM._check_is_governor() -> void:
subroutine _check_is_governor:
    _check_is_governor_block@0:
        // amm/contract.py:265
        // Txn.sender == self.governor
        txn Sender                                                                                tmp%0#0
        int 0                                                                                     tmp%0#0,0
        byte "governor"                                                                           tmp%0#0,0,"governor"
        app_global_get_ex                                                                         tmp%0#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.governor exists                                                      tmp%0#0,maybe_value%0#0
        l-load tmp%0#0 1                                                                          maybe_value%0#0,tmp%0#0
        l-load maybe_value%0#0 1                                                                  tmp%0#0,maybe_value%0#0
        ==                                                                                        tmp%1#0
        // amm/contract.py:264-266
        // assert (
        //     Txn.sender == self.governor
        // ), "Only the account set in global_state.governor may call this method"
        assert // Only the account set in global_state.governor may call this method
        retsub


// examples.amm.contract.ConstantProductAMM._current_pool_balance() -> uint64:
subroutine _current_pool_balance:
    _current_pool_balance_block@0:
        // amm/contract.py:293
        // return self.pool_token.balance(Global.current_application_address)
        global CurrentApplicationAddress                                                          tmp%0#0
        int 0                                                                                     tmp%0#0,0
        byte "pool_token"                                                                         tmp%0#0,0,"pool_token"
        app_global_get_ex                                                                         tmp%0#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.pool_token exists                                                    tmp%0#0,maybe_value%0#0
        l-load tmp%0#0 1                                                                          maybe_value%0#0,tmp%0#0
        l-load maybe_value%0#0 1                                                                  tmp%0#0,maybe_value%0#0
        asset_holding_get AssetBalance                                                            value%0#0,check%0#0
        assert // account opted into asset                                                        value%0#0
        l-load value%0#0 0                                                                        value%0#0
        retsub                                                                                    value%0#0


// examples.amm.contract.ConstantProductAMM._current_a_balance() -> uint64:
subroutine _current_a_balance:
    _current_a_balance_block@0:
        // amm/contract.py:297
        // return self.asset_a.balance(Global.current_application_address)
        global CurrentApplicationAddress                                                          tmp%0#0
        int 0                                                                                     tmp%0#0,0
        byte "asset_a"                                                                            tmp%0#0,0,"asset_a"
        app_global_get_ex                                                                         tmp%0#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.asset_a exists                                                       tmp%0#0,maybe_value%0#0
        l-load tmp%0#0 1                                                                          maybe_value%0#0,tmp%0#0
        l-load maybe_value%0#0 1                                                                  tmp%0#0,maybe_value%0#0
        asset_holding_get AssetBalance                                                            value%0#0,check%0#0
        assert // account opted into asset                                                        value%0#0
        l-load value%0#0 0                                                                        value%0#0
        retsub                                                                                    value%0#0


// examples.amm.contract.ConstantProductAMM._current_b_balance() -> uint64:
subroutine _current_b_balance:
    _current_b_balance_block@0:
        // amm/contract.py:301
        // return self.asset_b.balance(Global.current_application_address)
        global CurrentApplicationAddress                                                          tmp%0#0
        int 0                                                                                     tmp%0#0,0
        byte "asset_b"                                                                            tmp%0#0,0,"asset_b"
        app_global_get_ex                                                                         tmp%0#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.asset_b exists                                                       tmp%0#0,maybe_value%0#0
        l-load tmp%0#0 1                                                                          maybe_value%0#0,tmp%0#0
        l-load maybe_value%0#0 1                                                                  tmp%0#0,maybe_value%0#0
        asset_holding_get AssetBalance                                                            value%0#0,check%0#0
        assert // account opted into asset                                                        value%0#0
        l-load value%0#0 0                                                                        value%0#0
        retsub                                                                                    value%0#0


