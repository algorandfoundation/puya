main examples.amm.contract.ConstantProductAMM.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "asset_a" 0u)
        (app_global_put "asset_b" 0u)
        let tmp%0#2: account = (txn Sender)
        (app_global_put "governor" tmp%0#2)
        (app_global_put "pool_token" 0u)
        (app_global_put "ratio" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#3: uint64 = (txn NumAppArgs)
        goto tmp%0#3 ? block@4 : block@12
    block@4: // abi_routing_L27
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "set_governor(address)void" => block@6, method "bootstrap(pay,asset,asset)uint64" => block@7, method "mint(axfer,axfer,asset,asset,asset)void" => block@8, method "burn(axfer,asset,asset,asset)void" => block@9, method "swap(axfer,asset,asset)void" => block@10, * => block@11}
    block@6: // set_governor_route_L43
        examples.amm.contract.ConstantProductAMM.set_governor[routing]()
        goto block@11
    block@7: // bootstrap_route_L49
        examples.amm.contract.ConstantProductAMM.bootstrap[routing]()
        goto block@11
    block@8: // mint_route_L81
        examples.amm.contract.ConstantProductAMM.mint[routing]()
        goto block@11
    block@9: // burn_route_L148
        examples.amm.contract.ConstantProductAMM.burn[routing]()
        goto block@11
    block@10: // swap_route_L206
        examples.amm.contract.ConstantProductAMM.swap[routing]()
        goto block@11
    block@11: // after_if_else_L27
        fail
    block@12: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine examples.amm.contract.do_asset_transfer(receiver: account, asset: uint64, amount: uint64) -> void:
    block@0: // L359
        itxn_begin
        ((itxn_field AssetReceiver) receiver#0)
        ((itxn_field AssetAmount) amount#0)
        ((itxn_field XferAsset) asset#0)
        ((itxn_field TypeEnum) axfer)
        ((itxn_field Fee) 0u)
        itxn_submit
        return 

subroutine examples.amm.contract.ConstantProductAMM.set_governor[routing]() -> void:
    block@0: // L43
        let reinterpret_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = (txna ApplicationArgs 1)
        let new_governor#0: account = reinterpret_Encoded(uint8[32])%0#0
        examples.amm.contract.ConstantProductAMM._check_is_governor()
        (app_global_put "governor" new_governor#0)
        exit 1u

subroutine examples.amm.contract.ConstantProductAMM.bootstrap[routing]() -> void:
    block@0: // L49
        let tmp%0#0: uint64 = (txn GroupIndex)
        let seed#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) seed#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let a_asset#0: uint64 = ((txnas Assets) tmp%1#0)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%3#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let b_asset#0: uint64 = ((txnas Assets) tmp%3#0)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#0) // check self.pool_token exists
        let tmp%0#1: bool = (! maybe_value%0#0)
        (assert tmp%0#1) // application has already been bootstrapped
        examples.amm.contract.ConstantProductAMM._check_is_governor()
        let tmp%1#1: uint64 = (global GroupSize)
        let tmp%2#1: bool = (== tmp%1#1 2u)
        (assert tmp%2#1) // group size not 2
        let tmp%3#1: account = ((gtxns Receiver) seed#0)
        let tmp%4#1: account = (global CurrentApplicationAddress)
        let tmp%5#1: bool = (== tmp%3#1 tmp%4#1)
        (assert tmp%5#1) // receiver not app address
        let tmp%6#1: uint64 = ((gtxns Amount) seed#0)
        let tmp%7#1: bool = (>= tmp%6#1 300000u)
        (assert tmp%7#1) // amount minimum not met
        let tmp%8#0: bool = (< a_asset#0 b_asset#0)
        (assert tmp%8#0) // asset a must be less than asset b
        (app_global_put "asset_a" a_asset#0)
        (app_global_put "asset_b" b_asset#0)
        itxn_begin
        let (maybe_value%0#1: uint64, maybe_exists%0#1: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%0#1) // check self.asset_a exists
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetUnitName) maybe_value%0#1)
        (assert check%0#0) // asset exists
        let tmp%0#2: bytes = (concat 0x4450542d value%0#0)
        let tmp%1#2: bytes = (concat tmp%0#2 0x2d)
        let (maybe_value%1#1: uint64, maybe_exists%1#1: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%1#1) // check self.asset_b exists
        let (value%1#0: bytes, check%1#0: bool) = ((asset_params_get AssetUnitName) maybe_value%1#1)
        (assert check%1#0) // asset exists
        let inner_txn_params%0%%param_ConfigAssetName_idx_0#0: bytes = (concat tmp%1#2 value%1#0)
        let inner_txn_params%0%%param_ConfigAssetManager_idx_0#0: account = (global CurrentApplicationAddress)
        let inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0: account = (global CurrentApplicationAddress)
        ((itxn_field ConfigAssetReserve) inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0)
        ((itxn_field ConfigAssetManager) inner_txn_params%0%%param_ConfigAssetManager_idx_0#0)
        ((itxn_field ConfigAssetDecimals) 3u)
        ((itxn_field ConfigAssetTotal) 10000000000u)
        ((itxn_field ConfigAssetUnitName) 0x646274)
        ((itxn_field ConfigAssetName) inner_txn_params%0%%param_ConfigAssetName_idx_0#0)
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_submit
        let tmp%2#2: uint64 = (itxn CreatedAssetID)
        (app_global_put "pool_token" tmp%2#2)
        let (asset#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%1#0) // check self.asset_a exists
        let tmp%0#3: account = (global CurrentApplicationAddress)
        examples.amm.contract.do_asset_transfer(tmp%0#3, asset#0, 0u)
        let (asset#1: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%2#0) // check self.asset_b exists
        let tmp%0#4: account = (global CurrentApplicationAddress)
        examples.amm.contract.do_asset_transfer(tmp%0#4, asset#1, 0u)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%3#0) // check self.pool_token exists
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob maybe_value%3#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%6#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%7#0: bytes = (concat 0x151f7c75 tmp%6#0)
        (log tmp%7#0)
        exit 1u

subroutine examples.amm.contract.ConstantProductAMM.mint[routing]() -> void:
    block@0: // L81
        let tmp%0#0: uint64 = (txn GroupIndex)
        let a_xfer#0: uint64 = (- tmp%0#0 2u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) a_xfer#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 axfer)
        (assert gtxn_type_matches%0#0) // transaction type is axfer
        let tmp%1#0: uint64 = (txn GroupIndex)
        let b_xfer#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) b_xfer#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 axfer)
        (assert gtxn_type_matches%1#0) // transaction type is axfer
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%2#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let pool_asset#0: uint64 = ((txnas Assets) tmp%2#0)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%4#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let a_asset#0: uint64 = ((txnas Assets) tmp%4#0)
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%6#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let b_asset#0: uint64 = ((txnas Assets) tmp%6#0)
        let (maybe_value%0#1: uint64, maybe_exists%0#1: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#1) // check self.pool_token exists
        (assert maybe_value%0#1) // bootstrap method needs to be called first
        let tmp%0#1: bool = (== pool_asset#0 maybe_value%0#1)
        (assert tmp%0#1) // asset pool incorrect
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%1#0) // check self.asset_a exists
        let tmp%1#1: bool = (== a_asset#0 maybe_value%1#0)
        (assert tmp%1#1) // asset a incorrect
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%2#0) // check self.asset_b exists
        let tmp%2#1: bool = (== b_asset#0 maybe_value%2#0)
        (assert tmp%2#1) // asset b incorrect
        let tmp%3#1: account = ((gtxns Sender) a_xfer#0)
        let tmp%4#1: account = (txn Sender)
        let tmp%5#1: bool = (== tmp%3#1 tmp%4#1)
        (assert tmp%5#1) // sender invalid
        let tmp%6#1: account = ((gtxns Sender) b_xfer#0)
        let tmp%7#1: account = (txn Sender)
        let tmp%8#0: bool = (== tmp%6#1 tmp%7#1)
        (assert tmp%8#0) // sender invalid
        let tmp%9#0: account = ((gtxns AssetReceiver) a_xfer#0)
        let tmp%10#0: account = (global CurrentApplicationAddress)
        let tmp%11#0: bool = (== tmp%9#0 tmp%10#0)
        (assert tmp%11#0) // receiver not app address
        let tmp%12#0: uint64 = ((gtxns XferAsset) a_xfer#0)
        let tmp%13#0: bool = (== tmp%12#0 maybe_value%1#0)
        (assert tmp%13#0) // asset a incorrect
        let a_amount#0: uint64 = ((gtxns AssetAmount) a_xfer#0)
        (assert a_amount#0) // amount minimum not met
        let tmp%16#0: account = ((gtxns AssetReceiver) b_xfer#0)
        let tmp%17#0: account = (global CurrentApplicationAddress)
        let tmp%18#0: bool = (== tmp%16#0 tmp%17#0)
        (assert tmp%18#0) // receiver not app address
        let tmp%19#0: uint64 = ((gtxns XferAsset) b_xfer#0)
        let tmp%20#0: bool = (== tmp%19#0 maybe_value%2#0)
        (assert tmp%20#0) // asset b incorrect
        let b_amount#0: uint64 = ((gtxns AssetAmount) b_xfer#0)
        (assert b_amount#0) // amount minimum not met
        let pool_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_pool_balance()
        let a_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let b_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let tmp%0#2: bool = (== a_balance#0 a_amount#0)
        goto tmp%0#2 ? block@2 : block@4
    block@2: // and_contd_L334
        let tmp%1#2: bool = (== b_balance#0 b_amount#0)
        goto tmp%1#2 ? block@3 : block@4
    block@3: // bool_true_L334
        let and_result%0#0: bool = 1u
        goto block@5
    block@4: // bool_false_L334
        let and_result%0#1: bool = 0u
        goto block@5
    block@5: // bool_merge_L334
        let is_initial_mint#0: bool = φ(and_result%0#0 <- block@3, and_result%0#1 <- block@4)
        goto is_initial_mint#0 ? block@6 : block@7
    block@6: // if_body_L336
        let tmp%2#2: uint64 = (* a_amount#0 b_amount#0)
        let tmp%3#2: uint64 = (sqrt tmp%2#2)
        let tmp%4#2: uint64 = (- tmp%3#2 1000u)
        goto block@10
    block@7: // after_if_else_L335
        let issued#0: uint64 = (- 10000000000u pool_balance#0)
        let tmp%6#2: uint64 = (* 1000u a_amount#0)
        let tmp%7#2: uint64 = (- a_balance#0 a_amount#0)
        let a_ratio#0: uint64 = (/ tmp%6#2 tmp%7#2)
        let tmp%9#1: uint64 = (* 1000u b_amount#0)
        let tmp%10#1: uint64 = (- b_balance#0 b_amount#0)
        let b_ratio#0: uint64 = (/ tmp%9#1 tmp%10#1)
        let tmp%12#1: bool = (< a_ratio#0 b_ratio#0)
        goto tmp%12#1 ? block@8 : block@9
    block@8: // if_body_L341
        let tmp%13#1: uint64 = (* a_ratio#0 issued#0)
        let tmp%14#1: uint64 = (/ tmp%13#1 1000u)
        goto block@10
    block@9: // else_body_L343
        let tmp%15#1: uint64 = (* b_ratio#0 issued#0)
        let tmp%16#1: uint64 = (/ tmp%15#1 1000u)
        goto block@10
    block@10: // after_inlined_examples.amm.contract.tokens_to_mint_L81
        let to_mint#0: uint64 = φ(tmp%4#2 <- block@6, tmp%14#1 <- block@8, tmp%16#1 <- block@9)
        (assert to_mint#0) // send amount too low
        let tmp%30#0: account = (txn Sender)
        let (maybe_value%5#0: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%5#0) // check self.pool_token exists
        examples.amm.contract.do_asset_transfer(tmp%30#0, maybe_value%5#0, to_mint#0)
        examples.amm.contract.ConstantProductAMM._update_ratio()
        exit 1u

subroutine examples.amm.contract.ConstantProductAMM.burn[routing]() -> void:
    block@0: // L148
        let tmp%0#0: uint64 = (txn GroupIndex)
        let pool_xfer#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) pool_xfer#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 axfer)
        (assert gtxn_type_matches%0#0) // transaction type is axfer
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let pool_asset#0: uint64 = ((txnas Assets) tmp%1#0)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%3#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let a_asset#0: uint64 = ((txnas Assets) tmp%3#0)
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%5#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let b_asset#0: uint64 = ((txnas Assets) tmp%5#0)
        let (maybe_value%0#1: uint64, maybe_exists%0#1: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#1) // check self.pool_token exists
        (assert maybe_value%0#1) // bootstrap method needs to be called first
        let tmp%0#1: bool = (== pool_asset#0 maybe_value%0#1)
        (assert tmp%0#1) // asset pool incorrect
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%1#0) // check self.asset_a exists
        let tmp%1#1: bool = (== a_asset#0 maybe_value%1#0)
        (assert tmp%1#1) // asset a incorrect
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%2#0) // check self.asset_b exists
        let tmp%2#1: bool = (== b_asset#0 maybe_value%2#0)
        (assert tmp%2#1) // asset b incorrect
        let tmp%3#1: account = ((gtxns AssetReceiver) pool_xfer#0)
        let tmp%4#1: account = (global CurrentApplicationAddress)
        let tmp%5#1: bool = (== tmp%3#1 tmp%4#1)
        (assert tmp%5#1) // receiver not app address
        let amount#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
        (assert amount#0) // amount minimum not met
        let tmp%8#0: uint64 = ((gtxns XferAsset) pool_xfer#0)
        let tmp%9#0: bool = (== tmp%8#0 maybe_value%0#1)
        (assert tmp%9#0) // asset pool incorrect
        let tmp%10#0: account = ((gtxns Sender) pool_xfer#0)
        let tmp%11#0: account = (txn Sender)
        let tmp%12#0: bool = (== tmp%10#0 tmp%11#0)
        (assert tmp%12#0) // sender invalid
        let pool_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_pool_balance()
        let supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let tmp%0#2: uint64 = (- 10000000000u pool_balance#0)
        let issued#0: uint64 = (- tmp%0#2 amount#0)
        let tmp%2#2: uint64 = (* supply#0 amount#0)
        let a_amt#0: uint64 = (/ tmp%2#2 issued#0)
        let supply#1: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let tmp%2#3: uint64 = (* supply#1 amount#0)
        let b_amt#0: uint64 = (/ tmp%2#3 issued#0)
        let tmp%20#0: account = (txn Sender)
        let (maybe_value%4#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%4#0) // check self.asset_a exists
        examples.amm.contract.do_asset_transfer(tmp%20#0, maybe_value%4#0, a_amt#0)
        let tmp%21#0: account = (txn Sender)
        let (maybe_value%5#0: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%5#0) // check self.asset_b exists
        examples.amm.contract.do_asset_transfer(tmp%21#0, maybe_value%5#0, b_amt#0)
        examples.amm.contract.ConstantProductAMM._update_ratio()
        exit 1u

subroutine examples.amm.contract.ConstantProductAMM.swap[routing]() -> void:
    block@0: // L206
        let tmp%0#0: uint64 = (txn GroupIndex)
        let swap_xfer#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) swap_xfer#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 axfer)
        (assert gtxn_type_matches%0#0) // transaction type is axfer
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 1)
        let tmp%1#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let a_asset#0: uint64 = ((txnas Assets) tmp%1#0)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%3#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let b_asset#0: uint64 = ((txnas Assets) tmp%3#0)
        let (maybe_value%0#1: uint64, maybe_exists%0#1: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#1) // check self.pool_token exists
        (assert maybe_value%0#1) // bootstrap method needs to be called first
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%0#0) // check self.asset_a exists
        let tmp%0#1: bool = (== a_asset#0 maybe_value%0#0)
        (assert tmp%0#1) // asset a incorrect
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%1#0) // check self.asset_b exists
        let tmp%1#1: bool = (== b_asset#0 maybe_value%1#0)
        (assert tmp%1#1) // asset b incorrect
        let in_amount#0: uint64 = ((gtxns AssetAmount) swap_xfer#0)
        (assert in_amount#0) // amount minimum not met
        let tmp%4#1: account = ((gtxns Sender) swap_xfer#0)
        let tmp%5#0: account = (txn Sender)
        let tmp%6#0: bool = (== tmp%4#1 tmp%5#0)
        (assert tmp%6#0) // sender invalid
        let tmp%7#0: uint64 = ((gtxns XferAsset) swap_xfer#0)
        switch tmp%7#0 {maybe_value%0#0 => block@2, maybe_value%1#0 => block@3, * => block@4}
    block@2: // switch_case_0_L236
        let in_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let out_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let (out_asset#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%4#0) // check self.asset_a exists
        goto block@5
    block@3: // switch_case_1_L240
        let in_supply#1: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let out_supply#1: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let (out_asset#1: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%5#0) // check self.asset_b exists
        goto block@5
    block@4: // switch_case_default_L244
        fail // asset id incorrect
    block@5: // switch_case_next_L234
        let in_supply#2: uint64 = φ(in_supply#0 <- block@2, in_supply#1 <- block@3)
        let out_supply#2: uint64 = φ(out_supply#0 <- block@2, out_supply#1 <- block@3)
        let out_asset#2: uint64 = φ(out_asset#0 <- block@2, out_asset#1 <- block@3)
        let tmp%0#2: uint64 = (- in_supply#2 in_amount#0)
        let tmp%1#2: uint64 = (* 1000u tmp%0#2)
        let tmp%2#2: uint64 = (* in_amount#0 995u)
        let in_total#0: uint64 = (+ tmp%1#2 tmp%2#2)
        let out_total#0: uint64 = (* tmp%2#2 out_supply#2)
        let to_swap#0: uint64 = (/ out_total#0 in_total#0)
        (assert to_swap#0) // send amount too low
        let tmp%15#0: account = (txn Sender)
        examples.amm.contract.do_asset_transfer(tmp%15#0, out_asset#2, to_swap#0)
        examples.amm.contract.ConstantProductAMM._update_ratio()
        exit 1u

subroutine examples.amm.contract.ConstantProductAMM._update_ratio() -> void:
    block@0: // L258
        let a_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let b_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let tmp%2#0: uint64 = (* a_balance#0 1000u)
        let tmp%3#0: uint64 = (/ tmp%2#0 b_balance#0)
        (app_global_put "ratio" tmp%3#0)
        return 

subroutine examples.amm.contract.ConstantProductAMM._check_is_governor() -> void:
    block@0: // L265
        let tmp%0#0: account = (txn Sender)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "governor")
        (assert maybe_exists%0#0) // check self.governor exists
        let tmp%1#0: bool = (== tmp%0#0 maybe_value%0#0)
        (assert tmp%1#0) // Only the account set in global_state.governor may call this method
        return 

subroutine examples.amm.contract.ConstantProductAMM._current_pool_balance() -> uint64:
    block@0: // L294
        let tmp%0#0: account = (global CurrentApplicationAddress)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#0) // check self.pool_token exists
        let (value%0#0: uint64, check%0#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 maybe_value%0#0)
        (assert check%0#0) // account opted into asset
        return value%0#0

subroutine examples.amm.contract.ConstantProductAMM._current_a_balance() -> uint64:
    block@0: // L298
        let tmp%0#0: account = (global CurrentApplicationAddress)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%0#0) // check self.asset_a exists
        let (value%0#0: uint64, check%0#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 maybe_value%0#0)
        (assert check%0#0) // account opted into asset
        return value%0#0

subroutine examples.amm.contract.ConstantProductAMM._current_b_balance() -> uint64:
    block@0: // L302
        let tmp%0#0: account = (global CurrentApplicationAddress)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%0#0) // check self.asset_b exists
        let (value%0#0: uint64, check%0#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 maybe_value%0#0)
        (assert check%0#0) // account opted into asset
        return value%0#0