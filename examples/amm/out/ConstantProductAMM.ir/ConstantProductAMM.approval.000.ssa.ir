main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        examples.amm.contract.ConstantProductAMM.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = examples.amm.contract.ConstantProductAMM.__puya_arc4_router__()
        return tmp%1#0

subroutine examples.amm.contract.tokens_to_mint(pool_balance: uint64, a_balance: uint64, b_balance: uint64, a_amount: uint64, b_amount: uint64) -> uint64:
    block@0: // L325
        let tmp%0#0: bool = (== a_balance#0 a_amount#0)
        goto tmp%0#0 ? block@1 : block@3
    block@1: // and_contd_L334
        let tmp%1#0: bool = (== b_balance#0 b_amount#0)
        goto tmp%1#0 ? block@2 : block@3
    block@2: // bool_true_L334
        let and_result%0#0: bool = 1u
        goto block@4
    block@3: // bool_false_L334
        let and_result%0#1: bool = 0u
        goto block@4
    block@4: // bool_merge_L334
        let and_result%0#2: bool = Ï†(and_result%0#0 <- block@2, and_result%0#1 <- block@3)
        let is_initial_mint#0: bool = and_result%0#2
        goto is_initial_mint#0 ? block@5 : block@6
    block@5: // if_body_L336
        let tmp%2#0: uint64 = (* a_amount#0 b_amount#0)
        let tmp%3#0: uint64 = (sqrt tmp%2#0)
        let tmp%4#0: uint64 = (- tmp%3#0 1000u)
        return tmp%4#0
    block@6: // after_if_else_L335
        let tmp%5#0: uint64 = (- 10000000000u pool_balance#0)
        let issued#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (* 1000u a_amount#0)
        let tmp%7#0: uint64 = (- a_balance#0 a_amount#0)
        let tmp%8#0: uint64 = (/ tmp%6#0 tmp%7#0)
        let a_ratio#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = (* 1000u b_amount#0)
        let tmp%10#0: uint64 = (- b_balance#0 b_amount#0)
        let tmp%11#0: uint64 = (/ tmp%9#0 tmp%10#0)
        let b_ratio#0: uint64 = tmp%11#0
        let tmp%12#0: bool = (< a_ratio#0 b_ratio#0)
        goto tmp%12#0 ? block@7 : block@8
    block@7: // if_body_L341
        let tmp%13#0: uint64 = (* a_ratio#0 issued#0)
        let tmp%14#0: uint64 = (/ tmp%13#0 1000u)
        return tmp%14#0
    block@8: // else_body_L343
        let tmp%15#0: uint64 = (* b_ratio#0 issued#0)
        let tmp%16#0: uint64 = (/ tmp%15#0 1000u)
        return tmp%16#0

subroutine examples.amm.contract.tokens_to_burn(pool_balance: uint64, supply: uint64, amount: uint64) -> uint64:
    block@0: // L346
        let tmp%0#0: uint64 = (- 10000000000u pool_balance#0)
        let tmp%1#0: uint64 = (- tmp%0#0 amount#0)
        let issued#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (* supply#0 amount#0)
        let tmp%3#0: uint64 = (/ tmp%2#0 issued#0)
        return tmp%3#0

subroutine examples.amm.contract.tokens_to_swap(in_amount: uint64, in_supply: uint64, out_supply: uint64) -> uint64:
    block@0: // L352
        let tmp%0#0: uint64 = (- in_supply#0 in_amount#0)
        let tmp%1#0: uint64 = (* 1000u tmp%0#0)
        let tmp%2#0: uint64 = (* in_amount#0 995u)
        let tmp%3#0: uint64 = (+ tmp%1#0 tmp%2#0)
        let in_total#0: uint64 = tmp%3#0
        let tmp%4#0: uint64 = (* in_amount#0 995u)
        let tmp%5#0: uint64 = (* tmp%4#0 out_supply#0)
        let out_total#0: uint64 = tmp%5#0
        let tmp%6#0: uint64 = (/ out_total#0 in_total#0)
        return tmp%6#0

subroutine examples.amm.contract.do_asset_transfer(receiver: account, asset: uint64, amount: uint64) -> void:
    block@0: // L359
        itxn_begin
        let inner_txn_params%0#0: itxn_field_set = itxn_field_set(0)
        let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%Fee_length#0: uint64 = 1u
        let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = axfer
        let inner_txn_params%0%%TypeEnum_length#0: uint64 = 1u
        let inner_txn_params%0%%param_XferAsset_idx_0#0: uint64 = asset#0
        let inner_txn_params%0%%XferAsset_length#0: uint64 = 1u
        let inner_txn_params%0%%param_AssetAmount_idx_0#0: uint64 = amount#0
        let inner_txn_params%0%%AssetAmount_length#0: uint64 = 1u
        let inner_txn_params%0%%param_AssetReceiver_idx_0#0: account = receiver#0
        let inner_txn_params%0%%AssetReceiver_length#0: uint64 = 1u
        let inner_txn_params%0%%Sender_length#0: uint64 = 0u
        let inner_txn_params%0%%Note_length#0: uint64 = 0u
        let inner_txn_params%0%%Receiver_length#0: uint64 = 0u
        let inner_txn_params%0%%Amount_length#0: uint64 = 0u
        let inner_txn_params%0%%CloseRemainderTo_length#0: uint64 = 0u
        let inner_txn_params%0%%VotePK_length#0: uint64 = 0u
        let inner_txn_params%0%%SelectionPK_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteFirst_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteLast_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteKeyDilution_length#0: uint64 = 0u
        let inner_txn_params%0%%Type_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetSender_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetCloseTo_length#0: uint64 = 0u
        let inner_txn_params%0%%ApplicationID_length#0: uint64 = 0u
        let inner_txn_params%0%%OnCompletion_length#0: uint64 = 0u
        let inner_txn_params%0%%ApprovalProgram_length#0: uint64 = 0u
        let inner_txn_params%0%%ClearStateProgram_length#0: uint64 = 0u
        let inner_txn_params%0%%RekeyTo_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetTotal_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetDecimals_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetDefaultFrozen_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetUnitName_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetName_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetURL_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetMetadataHash_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetManager_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetReserve_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetFreeze_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetClawback_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAssetAccount_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAssetFrozen_length#0: uint64 = 0u
        let inner_txn_params%0%%GlobalNumUint_length#0: uint64 = 0u
        let inner_txn_params%0%%GlobalNumByteSlice_length#0: uint64 = 0u
        let inner_txn_params%0%%LocalNumUint_length#0: uint64 = 0u
        let inner_txn_params%0%%LocalNumByteSlice_length#0: uint64 = 0u
        let inner_txn_params%0%%ExtraProgramPages_length#0: uint64 = 0u
        let inner_txn_params%0%%Nonparticipation_length#0: uint64 = 0u
        let inner_txn_params%0%%StateProofPK_length#0: uint64 = 0u
        let inner_txn_params%0%%ApplicationArgs_length#0: uint64 = 0u
        let inner_txn_params%0%%Accounts_length#0: uint64 = 0u
        let inner_txn_params%0%%Assets_length#0: uint64 = 0u
        let inner_txn_params%0%%Applications_length#0: uint64 = 0u
        let inner_txn_params%0%%ApprovalProgramPages_length#0: uint64 = 0u
        let inner_txn_params%0%%ClearStateProgramPages_length#0: uint64 = 0u
        let inner_txn_params%0%%RejectVersion_length#0: uint64 = 0u
        ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
        ((itxn_field AssetAmount) inner_txn_params%0%%param_AssetAmount_idx_0#0)
        ((itxn_field XferAsset) inner_txn_params%0%%param_XferAsset_idx_0#0)
        ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
        ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
        goto block@1
    block@1: // next_txn_L361
        itxn_submit
        return 

subroutine examples.amm.contract.ConstantProductAMM.__puya_arc4_router__() -> bool:
    block@0: // L27
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@11
    block@1: // abi_routing_L27
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (== tmp%2#0 NoOp)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%5#0 ? block@2 : block@9
    block@2: // call_NoOp_L27
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "set_governor(address)void" => block@3, method "bootstrap(pay,asset,asset)uint64" => block@4, method "mint(axfer,axfer,asset,asset,asset)void" => block@5, method "burn(axfer,asset,asset,asset)void" => block@6, method "swap(axfer,asset,asset)void" => block@7, * => block@8}
    block@3: // set_governor_route_L43
        examples.amm.contract.ConstantProductAMM.set_governor[routing]()
        goto block@8
    block@4: // bootstrap_route_L49
        examples.amm.contract.ConstantProductAMM.bootstrap[routing]()
        goto block@8
    block@5: // mint_route_L81
        examples.amm.contract.ConstantProductAMM.mint[routing]()
        goto block@8
    block@6: // burn_route_L148
        examples.amm.contract.ConstantProductAMM.burn[routing]()
        goto block@8
    block@7: // swap_route_L206
        examples.amm.contract.ConstantProductAMM.swap[routing]()
        goto block@8
    block@8: // switch_case_next_L27
        goto block@10
    block@9: // create_NoOp_L27
        goto block@10
    block@10: // after_if_else_L27
        goto block@12
    block@11: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (== tmp%9#0 0u)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        examples.amm.contract.ConstantProductAMM.__algopy_default_create()
        exit 1u
    block@12: // after_if_else_L27
        exit 0u

subroutine examples.amm.contract.ConstantProductAMM.set_governor[routing]() -> void:
    block@0: // L43
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 32u)
        (assert eq%0#0) // invalid number of bytes for uint8[32]
        let as_Encoded(uint8[32])%0#0: Encoded(uint8[32]) = tmp%0#0
        let tmp%1#0: account = decode_bytes<account>(as_Encoded(uint8[32])%0#0)
        examples.amm.contract.ConstantProductAMM.set_governor(tmp%1#0)
        exit 1u

subroutine examples.amm.contract.ConstantProductAMM.bootstrap[routing]() -> void:
    block@0: // L49
        let tmp%0#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let tmp%1#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%1#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for uint8
        let as_Encoded(uint8)%0#0: Encoded(uint8) = tmp%1#0
        let tmp%2#0: uint64 = (btoi as_Encoded(uint8)%0#0)
        let tmp%3#0: uint64 = ((txnas Assets) tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%4#0)
        let eq%1#0: bool = (== len%1#0 1u)
        (assert eq%1#0) // invalid number of bytes for uint8
        let as_Encoded(uint8)%1#0: Encoded(uint8) = tmp%4#0
        let tmp%5#0: uint64 = (btoi as_Encoded(uint8)%1#0)
        let tmp%6#0: uint64 = ((txnas Assets) tmp%5#0)
        let tmp%7#0: uint64 = examples.amm.contract.ConstantProductAMM.bootstrap(gtxn_idx%0#0, tmp%3#0, tmp%6#0)
        let tmp%8#0: Encoded(uint64) = bytes_encode<uint64>(tmp%7#0)
        let tmp%9#0: bytes = (concat 0x151f7c75 tmp%8#0)
        (log tmp%9#0)
        exit 1u

subroutine examples.amm.contract.ConstantProductAMM.mint[routing]() -> void:
    block@0: // L81
        let tmp%0#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%0#0 2u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 axfer)
        (assert gtxn_type_matches%0#0) // transaction type is axfer
        let tmp%1#0: uint64 = (txn GroupIndex)
        let gtxn_idx%1#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 axfer)
        (assert gtxn_type_matches%1#0) // transaction type is axfer
        let tmp%2#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%2#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for uint8
        let as_Encoded(uint8)%0#0: Encoded(uint8) = tmp%2#0
        let tmp%3#0: uint64 = (btoi as_Encoded(uint8)%0#0)
        let tmp%4#0: uint64 = ((txnas Assets) tmp%3#0)
        let tmp%5#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%5#0)
        let eq%1#0: bool = (== len%1#0 1u)
        (assert eq%1#0) // invalid number of bytes for uint8
        let as_Encoded(uint8)%1#0: Encoded(uint8) = tmp%5#0
        let tmp%6#0: uint64 = (btoi as_Encoded(uint8)%1#0)
        let tmp%7#0: uint64 = ((txnas Assets) tmp%6#0)
        let tmp%8#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%8#0)
        let eq%2#0: bool = (== len%2#0 1u)
        (assert eq%2#0) // invalid number of bytes for uint8
        let as_Encoded(uint8)%2#0: Encoded(uint8) = tmp%8#0
        let tmp%9#0: uint64 = (btoi as_Encoded(uint8)%2#0)
        let tmp%10#0: uint64 = ((txnas Assets) tmp%9#0)
        examples.amm.contract.ConstantProductAMM.mint(gtxn_idx%0#0, gtxn_idx%1#0, tmp%4#0, tmp%7#0, tmp%10#0)
        exit 1u

subroutine examples.amm.contract.ConstantProductAMM.burn[routing]() -> void:
    block@0: // L148
        let tmp%0#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 axfer)
        (assert gtxn_type_matches%0#0) // transaction type is axfer
        let tmp%1#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%1#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for uint8
        let as_Encoded(uint8)%0#0: Encoded(uint8) = tmp%1#0
        let tmp%2#0: uint64 = (btoi as_Encoded(uint8)%0#0)
        let tmp%3#0: uint64 = ((txnas Assets) tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%4#0)
        let eq%1#0: bool = (== len%1#0 1u)
        (assert eq%1#0) // invalid number of bytes for uint8
        let as_Encoded(uint8)%1#0: Encoded(uint8) = tmp%4#0
        let tmp%5#0: uint64 = (btoi as_Encoded(uint8)%1#0)
        let tmp%6#0: uint64 = ((txnas Assets) tmp%5#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%7#0)
        let eq%2#0: bool = (== len%2#0 1u)
        (assert eq%2#0) // invalid number of bytes for uint8
        let as_Encoded(uint8)%2#0: Encoded(uint8) = tmp%7#0
        let tmp%8#0: uint64 = (btoi as_Encoded(uint8)%2#0)
        let tmp%9#0: uint64 = ((txnas Assets) tmp%8#0)
        examples.amm.contract.ConstantProductAMM.burn(gtxn_idx%0#0, tmp%3#0, tmp%6#0, tmp%9#0)
        exit 1u

subroutine examples.amm.contract.ConstantProductAMM.swap[routing]() -> void:
    block@0: // L206
        let tmp%0#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 axfer)
        (assert gtxn_type_matches%0#0) // transaction type is axfer
        let tmp%1#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%1#0)
        let eq%0#0: bool = (== len%0#0 1u)
        (assert eq%0#0) // invalid number of bytes for uint8
        let as_Encoded(uint8)%0#0: Encoded(uint8) = tmp%1#0
        let tmp%2#0: uint64 = (btoi as_Encoded(uint8)%0#0)
        let tmp%3#0: uint64 = ((txnas Assets) tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%4#0)
        let eq%1#0: bool = (== len%1#0 1u)
        (assert eq%1#0) // invalid number of bytes for uint8
        let as_Encoded(uint8)%1#0: Encoded(uint8) = tmp%4#0
        let tmp%5#0: uint64 = (btoi as_Encoded(uint8)%1#0)
        let tmp%6#0: uint64 = ((txnas Assets) tmp%5#0)
        examples.amm.contract.ConstantProductAMM.swap(gtxn_idx%0#0, tmp%3#0, tmp%6#0)
        exit 1u

subroutine examples.amm.contract.ConstantProductAMM.__init__() -> void:
    block@0: // L28
        (app_global_put "asset_a" 0u)
        (app_global_put "asset_b" 0u)
        let tmp%0#0: account = (txn Sender)
        (app_global_put "governor" tmp%0#0)
        (app_global_put "pool_token" 0u)
        (app_global_put "ratio" 0u)
        return 

subroutine examples.amm.contract.ConstantProductAMM.set_governor(new_governor: account) -> void:
    block@0: // L43
        examples.amm.contract.ConstantProductAMM._check_is_governor()
        (app_global_put "governor" new_governor#0)
        return 

subroutine examples.amm.contract.ConstantProductAMM.bootstrap(seed: uint64, a_asset: uint64, b_asset: uint64) -> uint64:
    block@0: // L49
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#0) // check self.pool_token exists
        let tmp%0#0: bool = (== maybe_value%0#0 0u)
        (assert tmp%0#0) // application has already been bootstrapped
        examples.amm.contract.ConstantProductAMM._check_is_governor()
        let tmp%1#0: uint64 = (global GroupSize)
        let tmp%2#0: bool = (== tmp%1#0 2u)
        (assert tmp%2#0) // group size not 2
        let tmp%3#0: account = ((gtxns Receiver) seed#0)
        let tmp%4#0: account = (global CurrentApplicationAddress)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // receiver not app address
        let tmp%6#0: uint64 = ((gtxns Amount) seed#0)
        let tmp%7#0: bool = (>= tmp%6#0 300000u)
        (assert tmp%7#0) // amount minimum not met
        let tmp%8#0: bool = (< a_asset#0 b_asset#0)
        (assert tmp%8#0) // asset a must be less than asset b
        (app_global_put "asset_a" a_asset#0)
        (app_global_put "asset_b" b_asset#0)
        let tmp%9#0: uint64 = examples.amm.contract.ConstantProductAMM._create_pool_token()
        (app_global_put "pool_token" tmp%9#0)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%1#0) // check self.asset_a exists
        examples.amm.contract.ConstantProductAMM._do_opt_in(maybe_value%1#0)
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%2#0) // check self.asset_b exists
        examples.amm.contract.ConstantProductAMM._do_opt_in(maybe_value%2#0)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%3#0) // check self.pool_token exists
        return maybe_value%3#0

subroutine examples.amm.contract.ConstantProductAMM.mint(a_xfer: uint64, b_xfer: uint64, pool_asset: uint64, a_asset: uint64, b_asset: uint64) -> void:
    block@0: // L81
        examples.amm.contract.ConstantProductAMM._check_bootstrapped()
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#0) // check self.pool_token exists
        let tmp%0#0: bool = (== pool_asset#0 maybe_value%0#0)
        (assert tmp%0#0) // asset pool incorrect
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%1#0) // check self.asset_a exists
        let tmp%1#0: bool = (== a_asset#0 maybe_value%1#0)
        (assert tmp%1#0) // asset a incorrect
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%2#0) // check self.asset_b exists
        let tmp%2#0: bool = (== b_asset#0 maybe_value%2#0)
        (assert tmp%2#0) // asset b incorrect
        let tmp%3#0: account = ((gtxns Sender) a_xfer#0)
        let tmp%4#0: account = (txn Sender)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // sender invalid
        let tmp%6#0: account = ((gtxns Sender) b_xfer#0)
        let tmp%7#0: account = (txn Sender)
        let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
        (assert tmp%8#0) // sender invalid
        let tmp%9#0: account = ((gtxns AssetReceiver) a_xfer#0)
        let tmp%10#0: account = (global CurrentApplicationAddress)
        let tmp%11#0: bool = (== tmp%9#0 tmp%10#0)
        (assert tmp%11#0) // receiver not app address
        let tmp%12#0: uint64 = ((gtxns XferAsset) a_xfer#0)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%3#0) // check self.asset_a exists
        let tmp%13#0: bool = (== tmp%12#0 maybe_value%3#0)
        (assert tmp%13#0) // asset a incorrect
        let tmp%14#0: uint64 = ((gtxns AssetAmount) a_xfer#0)
        let tmp%15#0: bool = (> tmp%14#0 0u)
        (assert tmp%15#0) // amount minimum not met
        let tmp%16#0: account = ((gtxns AssetReceiver) b_xfer#0)
        let tmp%17#0: account = (global CurrentApplicationAddress)
        let tmp%18#0: bool = (== tmp%16#0 tmp%17#0)
        (assert tmp%18#0) // receiver not app address
        let tmp%19#0: uint64 = ((gtxns XferAsset) b_xfer#0)
        let (maybe_value%4#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%4#0) // check self.asset_b exists
        let tmp%20#0: bool = (== tmp%19#0 maybe_value%4#0)
        (assert tmp%20#0) // asset b incorrect
        let tmp%21#0: uint64 = ((gtxns AssetAmount) b_xfer#0)
        let tmp%22#0: bool = (> tmp%21#0 0u)
        (assert tmp%22#0) // amount minimum not met
        let tmp%23#0: uint64 = examples.amm.contract.ConstantProductAMM._current_pool_balance()
        let tmp%24#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let tmp%25#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let tmp%26#0: uint64 = ((gtxns AssetAmount) a_xfer#0)
        let tmp%27#0: uint64 = ((gtxns AssetAmount) b_xfer#0)
        let tmp%28#0: uint64 = examples.amm.contract.tokens_to_mint(tmp%23#0, tmp%24#0, tmp%25#0, tmp%26#0, tmp%27#0)
        let to_mint#0: uint64 = tmp%28#0
        let tmp%29#0: bool = (> to_mint#0 0u)
        (assert tmp%29#0) // send amount too low
        let tmp%30#0: account = (txn Sender)
        let (maybe_value%5#0: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%5#0) // check self.pool_token exists
        examples.amm.contract.do_asset_transfer(tmp%30#0, maybe_value%5#0, to_mint#0)
        examples.amm.contract.ConstantProductAMM._update_ratio()
        return 

subroutine examples.amm.contract.ConstantProductAMM.burn(pool_xfer: uint64, pool_asset: uint64, a_asset: uint64, b_asset: uint64) -> void:
    block@0: // L148
        examples.amm.contract.ConstantProductAMM._check_bootstrapped()
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#0) // check self.pool_token exists
        let tmp%0#0: bool = (== pool_asset#0 maybe_value%0#0)
        (assert tmp%0#0) // asset pool incorrect
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%1#0) // check self.asset_a exists
        let tmp%1#0: bool = (== a_asset#0 maybe_value%1#0)
        (assert tmp%1#0) // asset a incorrect
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%2#0) // check self.asset_b exists
        let tmp%2#0: bool = (== b_asset#0 maybe_value%2#0)
        (assert tmp%2#0) // asset b incorrect
        let tmp%3#0: account = ((gtxns AssetReceiver) pool_xfer#0)
        let tmp%4#0: account = (global CurrentApplicationAddress)
        let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
        (assert tmp%5#0) // receiver not app address
        let tmp%6#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
        let tmp%7#0: bool = (> tmp%6#0 0u)
        (assert tmp%7#0) // amount minimum not met
        let tmp%8#0: uint64 = ((gtxns XferAsset) pool_xfer#0)
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%3#0) // check self.pool_token exists
        let tmp%9#0: bool = (== tmp%8#0 maybe_value%3#0)
        (assert tmp%9#0) // asset pool incorrect
        let tmp%10#0: account = ((gtxns Sender) pool_xfer#0)
        let tmp%11#0: account = (txn Sender)
        let tmp%12#0: bool = (== tmp%10#0 tmp%11#0)
        (assert tmp%12#0) // sender invalid
        let tmp%13#0: uint64 = examples.amm.contract.ConstantProductAMM._current_pool_balance()
        let pool_balance#0: uint64 = tmp%13#0
        let tmp%14#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let tmp%15#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
        let tmp%16#0: uint64 = examples.amm.contract.tokens_to_burn(pool_balance#0, tmp%14#0, tmp%15#0)
        let a_amt#0: uint64 = tmp%16#0
        let tmp%17#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let tmp%18#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
        let tmp%19#0: uint64 = examples.amm.contract.tokens_to_burn(pool_balance#0, tmp%17#0, tmp%18#0)
        let b_amt#0: uint64 = tmp%19#0
        let tmp%20#0: account = (txn Sender)
        let (maybe_value%4#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%4#0) // check self.asset_a exists
        examples.amm.contract.do_asset_transfer(tmp%20#0, maybe_value%4#0, a_amt#0)
        let tmp%21#0: account = (txn Sender)
        let (maybe_value%5#0: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%5#0) // check self.asset_b exists
        examples.amm.contract.do_asset_transfer(tmp%21#0, maybe_value%5#0, b_amt#0)
        examples.amm.contract.ConstantProductAMM._update_ratio()
        return 

subroutine examples.amm.contract.ConstantProductAMM.swap(swap_xfer: uint64, a_asset: uint64, b_asset: uint64) -> void:
    block@0: // L206
        examples.amm.contract.ConstantProductAMM._check_bootstrapped()
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%0#0) // check self.asset_a exists
        let tmp%0#0: bool = (== a_asset#0 maybe_value%0#0)
        (assert tmp%0#0) // asset a incorrect
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%1#0) // check self.asset_b exists
        let tmp%1#0: bool = (== b_asset#0 maybe_value%1#0)
        (assert tmp%1#0) // asset b incorrect
        let tmp%2#0: uint64 = ((gtxns AssetAmount) swap_xfer#0)
        let tmp%3#0: bool = (> tmp%2#0 0u)
        (assert tmp%3#0) // amount minimum not met
        let tmp%4#0: account = ((gtxns Sender) swap_xfer#0)
        let tmp%5#0: account = (txn Sender)
        let tmp%6#0: bool = (== tmp%4#0 tmp%5#0)
        (assert tmp%6#0) // sender invalid
        let tmp%7#0: uint64 = ((gtxns XferAsset) swap_xfer#0)
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%2#0) // check self.asset_a exists
        let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%3#0) // check self.asset_b exists
        switch tmp%7#0 {maybe_value%2#0 => block@1, maybe_value%3#0 => block@2, * => block@3}
    block@1: // switch_case_0_L236
        let tmp%8#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let in_supply#0: uint64 = tmp%8#0
        let tmp%9#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let out_supply#0: uint64 = tmp%9#0
        let (maybe_value%4#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%4#0) // check self.asset_a exists
        let out_asset#0: uint64 = maybe_value%4#0
        goto block@4
    block@2: // switch_case_1_L240
        let tmp%10#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let in_supply#1: uint64 = tmp%10#0
        let tmp%11#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let out_supply#1: uint64 = tmp%11#0
        let (maybe_value%5#0: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%5#0) // check self.asset_b exists
        let out_asset#1: uint64 = maybe_value%5#0
        goto block@4
    block@3: // switch_case_default_L244
        fail // asset id incorrect
    block@4: // switch_case_next_L234
        let in_supply#2: uint64 = Ï†(in_supply#0 <- block@1, in_supply#1 <- block@2)
        let out_supply#2: uint64 = Ï†(out_supply#0 <- block@1, out_supply#1 <- block@2)
        let out_asset#2: uint64 = Ï†(out_asset#0 <- block@1, out_asset#1 <- block@2)
        let tmp%12#0: uint64 = ((gtxns AssetAmount) swap_xfer#0)
        let tmp%13#0: uint64 = examples.amm.contract.tokens_to_swap(tmp%12#0, in_supply#2, out_supply#2)
        let to_swap#0: uint64 = tmp%13#0
        let tmp%14#0: bool = (> to_swap#0 0u)
        (assert tmp%14#0) // send amount too low
        let tmp%15#0: account = (txn Sender)
        examples.amm.contract.do_asset_transfer(tmp%15#0, out_asset#2, to_swap#0)
        examples.amm.contract.ConstantProductAMM._update_ratio()
        return 

subroutine examples.amm.contract.ConstantProductAMM._check_bootstrapped() -> void:
    block@0: // L254
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#0) // check self.pool_token exists
        let tmp%0#0: bool = (!= maybe_value%0#0 0u)
        (assert tmp%0#0) // bootstrap method needs to be called first
        return 

subroutine examples.amm.contract.ConstantProductAMM._update_ratio() -> void:
    block@0: // L258
        let tmp%0#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
        let a_balance#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
        let b_balance#0: uint64 = tmp%1#0
        let tmp%2#0: uint64 = (* a_balance#0 1000u)
        let tmp%3#0: uint64 = (/ tmp%2#0 b_balance#0)
        (app_global_put "ratio" tmp%3#0)
        return 

subroutine examples.amm.contract.ConstantProductAMM._check_is_governor() -> void:
    block@0: // L265
        let tmp%0#0: account = (txn Sender)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "governor")
        (assert maybe_exists%0#0) // check self.governor exists
        let tmp%1#0: bool = (== tmp%0#0 maybe_value%0#0)
        (assert tmp%1#0) // Only the account set in global_state.governor may call this method
        return 

subroutine examples.amm.contract.ConstantProductAMM._create_pool_token() -> uint64:
    block@0: // L271
        itxn_begin
        let inner_txn_params%0#0: itxn_field_set = itxn_field_set(0)
        let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = 0u
        let inner_txn_params%0%%Fee_length#0: uint64 = 1u
        let inner_txn_params%0%%param_TypeEnum_idx_0#0: uint64 = acfg
        let inner_txn_params%0%%TypeEnum_length#0: uint64 = 1u
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%0#0) // check self.asset_a exists
        let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetUnitName) maybe_value%0#0)
        (assert check%0#0) // asset exists
        let tmp%0#0: bytes = (concat 0x4450542d value%0#0)
        let tmp%1#0: bytes = (concat tmp%0#0 0x2d)
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%1#0) // check self.asset_b exists
        let (value%1#0: bytes, check%1#0: bool) = ((asset_params_get AssetUnitName) maybe_value%1#0)
        (assert check%1#0) // asset exists
        let inner_txn_params%0%%param_ConfigAssetName_idx_0#0: bytes = (concat tmp%1#0 value%1#0)
        let inner_txn_params%0%%ConfigAssetName_length#0: uint64 = 1u
        let inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0: bytes[3] = 0x646274
        let inner_txn_params%0%%ConfigAssetUnitName_length#0: uint64 = 1u
        let inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0: uint64 = 10000000000u
        let inner_txn_params%0%%ConfigAssetTotal_length#0: uint64 = 1u
        let inner_txn_params%0%%param_ConfigAssetDecimals_idx_0#0: uint64 = 3u
        let inner_txn_params%0%%ConfigAssetDecimals_length#0: uint64 = 1u
        let inner_txn_params%0%%param_ConfigAssetManager_idx_0#0: account = (global CurrentApplicationAddress)
        let inner_txn_params%0%%ConfigAssetManager_length#0: uint64 = 1u
        let inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0: account = (global CurrentApplicationAddress)
        let inner_txn_params%0%%ConfigAssetReserve_length#0: uint64 = 1u
        let inner_txn_params%0%%Sender_length#0: uint64 = 0u
        let inner_txn_params%0%%Note_length#0: uint64 = 0u
        let inner_txn_params%0%%Receiver_length#0: uint64 = 0u
        let inner_txn_params%0%%Amount_length#0: uint64 = 0u
        let inner_txn_params%0%%CloseRemainderTo_length#0: uint64 = 0u
        let inner_txn_params%0%%VotePK_length#0: uint64 = 0u
        let inner_txn_params%0%%SelectionPK_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteFirst_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteLast_length#0: uint64 = 0u
        let inner_txn_params%0%%VoteKeyDilution_length#0: uint64 = 0u
        let inner_txn_params%0%%Type_length#0: uint64 = 0u
        let inner_txn_params%0%%XferAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetAmount_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetSender_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetReceiver_length#0: uint64 = 0u
        let inner_txn_params%0%%AssetCloseTo_length#0: uint64 = 0u
        let inner_txn_params%0%%ApplicationID_length#0: uint64 = 0u
        let inner_txn_params%0%%OnCompletion_length#0: uint64 = 0u
        let inner_txn_params%0%%ApprovalProgram_length#0: uint64 = 0u
        let inner_txn_params%0%%ClearStateProgram_length#0: uint64 = 0u
        let inner_txn_params%0%%RekeyTo_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetDefaultFrozen_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetURL_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetMetadataHash_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetFreeze_length#0: uint64 = 0u
        let inner_txn_params%0%%ConfigAssetClawback_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAsset_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAssetAccount_length#0: uint64 = 0u
        let inner_txn_params%0%%FreezeAssetFrozen_length#0: uint64 = 0u
        let inner_txn_params%0%%GlobalNumUint_length#0: uint64 = 0u
        let inner_txn_params%0%%GlobalNumByteSlice_length#0: uint64 = 0u
        let inner_txn_params%0%%LocalNumUint_length#0: uint64 = 0u
        let inner_txn_params%0%%LocalNumByteSlice_length#0: uint64 = 0u
        let inner_txn_params%0%%ExtraProgramPages_length#0: uint64 = 0u
        let inner_txn_params%0%%Nonparticipation_length#0: uint64 = 0u
        let inner_txn_params%0%%StateProofPK_length#0: uint64 = 0u
        let inner_txn_params%0%%ApplicationArgs_length#0: uint64 = 0u
        let inner_txn_params%0%%Accounts_length#0: uint64 = 0u
        let inner_txn_params%0%%Assets_length#0: uint64 = 0u
        let inner_txn_params%0%%Applications_length#0: uint64 = 0u
        let inner_txn_params%0%%ApprovalProgramPages_length#0: uint64 = 0u
        let inner_txn_params%0%%ClearStateProgramPages_length#0: uint64 = 0u
        let inner_txn_params%0%%RejectVersion_length#0: uint64 = 0u
        ((itxn_field ConfigAssetReserve) inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0)
        ((itxn_field ConfigAssetManager) inner_txn_params%0%%param_ConfigAssetManager_idx_0#0)
        ((itxn_field ConfigAssetDecimals) inner_txn_params%0%%param_ConfigAssetDecimals_idx_0#0)
        ((itxn_field ConfigAssetTotal) inner_txn_params%0%%param_ConfigAssetTotal_idx_0#0)
        ((itxn_field ConfigAssetUnitName) inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0)
        ((itxn_field ConfigAssetName) inner_txn_params%0%%param_ConfigAssetName_idx_0#0)
        ((itxn_field TypeEnum) inner_txn_params%0%%param_TypeEnum_idx_0#0)
        ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
        goto block@1
    block@1: // next_txn_L274
        itxn_submit
        let tmp%2#0: uint64 = itxn[itxn_group_idx(0)].CreatedAssetID
        return tmp%2#0

subroutine examples.amm.contract.ConstantProductAMM._do_opt_in(asset: uint64) -> void:
    block@0: // L286
        let tmp%0#0: account = (global CurrentApplicationAddress)
        examples.amm.contract.do_asset_transfer(tmp%0#0, asset#0, 0u)
        return 

subroutine examples.amm.contract.ConstantProductAMM._current_pool_balance() -> uint64:
    block@0: // L294
        let tmp%0#0: account = (global CurrentApplicationAddress)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
        (assert maybe_exists%0#0) // check self.pool_token exists
        let (value%0#0: uint64, check%0#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 maybe_value%0#0)
        (assert check%0#0) // account opted into asset
        return value%0#0

subroutine examples.amm.contract.ConstantProductAMM._current_a_balance() -> uint64:
    block@0: // L298
        let tmp%0#0: account = (global CurrentApplicationAddress)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_a")
        (assert maybe_exists%0#0) // check self.asset_a exists
        let (value%0#0: uint64, check%0#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 maybe_value%0#0)
        (assert check%0#0) // account opted into asset
        return value%0#0

subroutine examples.amm.contract.ConstantProductAMM._current_b_balance() -> uint64:
    block@0: // L302
        let tmp%0#0: account = (global CurrentApplicationAddress)
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_b")
        (assert maybe_exists%0#0) // check self.asset_b exists
        let (value%0#0: uint64, check%0#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 maybe_value%0#0)
        (assert check%0#0) // account opted into asset
        return value%0#0

subroutine examples.amm.contract.ConstantProductAMM.__algopy_default_create() -> void:
    block@0: // L1
        return 