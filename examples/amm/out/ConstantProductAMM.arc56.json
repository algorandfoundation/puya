{
    "name": "ConstantProductAMM",
    "structs": {},
    "methods": [
        {
            "name": "set_governor",
            "args": [
                {
                    "type": "account",
                    "name": "new_governor"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "sets the governor of the contract, may only be called by the current governor",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bootstrap",
            "args": [
                {
                    "type": "pay",
                    "name": "seed",
                    "desc": "Initial Payment transaction to the app account so it can opt in to assets and create pool token."
                },
                {
                    "type": "asset",
                    "name": "a_asset",
                    "desc": "One of the two assets this pool should allow swapping between."
                },
                {
                    "type": "asset",
                    "name": "b_asset",
                    "desc": "The other of the two assets this pool should allow swapping between."
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The asset id of the pool token created."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "bootstraps the contract by opting into the assets and creating the pool token.\nNote this method will fail if it is attempted more than once on the same contract since the assets and pool token application state values are marked as static and cannot be overridden.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mint",
            "args": [
                {
                    "type": "axfer",
                    "name": "a_xfer",
                    "desc": "Asset Transfer Transaction of asset A as a deposit to the pool in exchange for pool tokens."
                },
                {
                    "type": "axfer",
                    "name": "b_xfer",
                    "desc": "Asset Transfer Transaction of asset B as a deposit to the pool in exchange for pool tokens."
                },
                {
                    "type": "asset",
                    "name": "pool_asset",
                    "desc": "The asset ID of the pool token so that we may distribute it.",
                    "defaultValue": {
                        "source": "global",
                        "data": "cG9vbF90b2tlbg==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "asset",
                    "name": "a_asset",
                    "desc": "The asset ID of the Asset A so that we may inspect our balance.",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNzZXRfYQ==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "asset",
                    "name": "b_asset",
                    "desc": "The asset ID of the Asset B so that we may inspect our balance.",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNzZXRfYg==",
                        "type": "AVMString"
                    }
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "mint pool tokens given some amount of asset A and asset B.\nGiven some amount of Asset A and Asset B in the transfers, mint some number of pool tokens commensurate with the pools current balance and circulating supply of pool tokens.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burn",
            "args": [
                {
                    "type": "axfer",
                    "name": "pool_xfer",
                    "desc": "Asset Transfer Transaction of the pool token for the amount the sender wishes to redeem"
                },
                {
                    "type": "asset",
                    "name": "pool_asset",
                    "desc": "Asset ID of the pool token so we may inspect balance.",
                    "defaultValue": {
                        "source": "global",
                        "data": "cG9vbF90b2tlbg==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "asset",
                    "name": "a_asset",
                    "desc": "Asset ID of Asset A so we may inspect balance and distribute it",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNzZXRfYQ==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "asset",
                    "name": "b_asset",
                    "desc": "Asset ID of Asset B so we may inspect balance and distribute it",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNzZXRfYg==",
                        "type": "AVMString"
                    }
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "burn pool tokens to get back some amount of asset A and asset B",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "swap",
            "args": [
                {
                    "type": "axfer",
                    "name": "swap_xfer",
                    "desc": "Asset Transfer Transaction of either Asset A or Asset B"
                },
                {
                    "type": "asset",
                    "name": "a_asset",
                    "desc": "Asset ID of asset A so we may inspect balance and possibly transfer it",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNzZXRfYQ==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "asset",
                    "name": "b_asset",
                    "desc": "Asset ID of asset B so we may inspect balance and possibly transfer it",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNzZXRfYg==",
                        "type": "AVMString"
                    }
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Swap some amount of either asset A or asset B for the other",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asset_a": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfYQ=="
                },
                "asset_b": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfYg=="
                },
                "governor": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z292ZXJub3I="
                },
                "pool_token": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cG9vbF90b2tlbg=="
                },
                "ratio": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmF0aW8="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        145,
                        163,
                        207,
                        258,
                        298
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        363
                    ],
                    "errorMessage": "Only the account set in global_state.governor may call this method"
                },
                {
                    "pc": [
                        689,
                        702,
                        715
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        400,
                        611,
                        635,
                        871,
                        990
                    ],
                    "errorMessage": "amount minimum not met"
                },
                {
                    "pc": [
                        373
                    ],
                    "errorMessage": "application has already been bootstrapped"
                },
                {
                    "pc": [
                        563,
                        605,
                        849,
                        976
                    ],
                    "errorMessage": "asset a incorrect"
                },
                {
                    "pc": [
                        406
                    ],
                    "errorMessage": "asset a must be less than asset b"
                },
                {
                    "pc": [
                        571,
                        629,
                        857,
                        984
                    ],
                    "errorMessage": "asset b incorrect"
                },
                {
                    "pc": [
                        450,
                        469
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        1017
                    ],
                    "errorMessage": "asset id incorrect"
                },
                {
                    "pc": [
                        555,
                        841,
                        881
                    ],
                    "errorMessage": "asset pool incorrect"
                },
                {
                    "pc": [
                        676
                    ],
                    "errorMessage": "bootstrap method needs to be called first"
                },
                {
                    "pc": [
                        337
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        148,
                        166,
                        210,
                        261,
                        301
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        424,
                        447,
                        559,
                        603,
                        699,
                        845,
                        920,
                        972,
                        1002,
                        1032
                    ],
                    "errorMessage": "check self.asset_a exists"
                },
                {
                    "pc": [
                        431,
                        466,
                        567,
                        627,
                        712,
                        853,
                        931,
                        980,
                        1006,
                        1050
                    ],
                    "errorMessage": "check self.asset_b exists"
                },
                {
                    "pc": [
                        361
                    ],
                    "errorMessage": "check self.governor exists"
                },
                {
                    "pc": [
                        371,
                        438,
                        551,
                        659,
                        675,
                        686,
                        837,
                        879
                    ],
                    "errorMessage": "check self.pool_token exists"
                },
                {
                    "pc": [
                        382
                    ],
                    "errorMessage": "group size not 2"
                },
                {
                    "pc": [
                        390,
                        595,
                        619,
                        865
                    ],
                    "errorMessage": "receiver not app address"
                },
                {
                    "pc": [
                        653,
                        1061
                    ],
                    "errorMessage": "send amount too low"
                },
                {
                    "pc": [
                        579,
                        587,
                        889,
                        998
                    ],
                    "errorMessage": "sender invalid"
                },
                {
                    "pc": [
                        221,
                        231,
                        271,
                        311
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        176
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpleGFtcGxlcy5hbW0uY29udHJhY3QuQ29uc3RhbnRQcm9kdWN0QU1NLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFAAHoBwSAyK+gJSYFB2Fzc2V0X2EHYXNzZXRfYgpwb29sX3Rva2VuCGdvdmVybm9yBXJhdGlvMRhAAAOIAASIABZDigAAKCJnKSJnKzEAZyoiZycEImeJigABMRtBAOeCBQQIqVb3BGtZ2WUEXL8eLQQUNsKsBEqI4FU2GgCOBQACABQAQABzAJsiiTEZFEQxGEQ2GgEXwByIALgjiTEZFEQxGEQxFiMJSTgQIxJENhoBF8AwNhoCF8AwiACtFoAEFR98dUxQsCOJMRkURDEYRDEWgQIJSTgQJRJEMRYjCUk4ECUSRDYaARfAMDYaAhfAMDYaAxfAMIgBISOJMRkURDEYRDEWIwlJOBAlEkQ2GgEXwDA2GgIXwDA2GgMXwDCIAhcjiTEZFEQxGEQxFiMJSTgQJRJENhoBF8AwNhoCF8AwiAJ5I4kxGUAABjEYFEQjiSKJigEAiAAFK4v/Z4mKAAAxACIrZUQSRImKAwEiKmVEFESI/+gyBIECEkSL/TgHMgoSRIv9OAiB4KcSD0SL/ov/DEQoi/5nKYv/Z4gAFipMZyIoZUSIAE4iKWVEiABHIiplRImKAAGxIihlRHEDRIAERFBULUxQgAEtUCIpZURxA0RQMgpJsiqyKYEDsiMhBLIigANkYnSyJbImgQOyECKyAbO0PImKAQAyCov/IogAAYmKAwCxi/2yFIv/shKL/rIRJbIQIrIBs4mKBQCIAHkiKmVEi/0SRCIoZUSL/hJEIillRIv/EkSL+zgAMQASRIv8OAAxABJEi/s4FDIKEkSL+zgRIihlRBJEi/s4EklEi/w4FDIKEkSL/DgRIillRBJEi/w4EklEiAAniAAxiAA7TwRPBIgAQUlEMQAiKmVETwKI/22IAI2JigAAIiplRESJigABMgoiKmVEcABEiYoAATIKIihlRHAARImKAAEyCiIpZURwAESJigUBgABJi/yL/hJBAAyL/Yv/EkEABCNCAAEiQQALi/6L/wuSJAmMAIkhBIv7CSSL/guL/Iv+CQpJjAAki/8Li/2L/wkKSYwBDEEACIsACyQKjACJiwELJAqMAImKAACI/4SI/45MJAtMCicETGeJigQAiP9bIiplRIv9EkQiKGVEi/4SRCIpZUSL/xJEi/w4FDIKEkSL/DgSSUSL/DgRIiplRBJEi/w4ADEAEkSI/ymI/zNLAUxLA4gAJYj/NU8CTE8DiAAaMQAiKGVETwOI/mgxACIpZURPAoj+XYj/fYmKAwEhBIv9CYv/CYv+i/8LTAqJigMAgABJiP7UIihlRIv+EkQiKWVEi/8SRIv9OBJJRIv9OAAxABJEIihlRCIpZUSL/TgRjgIAAQATAIj+w4wAiP6xIihlTIwBREIAD4j+pIwAiP6sIillTIwBRIsCiwBPAogAD0lEMQCLAU8CiP3XiP73iYoDAYv+i/0JJAuL/YHjBwtMSwEITIv/C0wKiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}