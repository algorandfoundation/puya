{
    "name": "ConstantProductAMM",
    "structs": {},
    "methods": [
        {
            "name": "set_governor",
            "args": [
                {
                    "type": "account",
                    "name": "new_governor"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "sets the governor of the contract, may only be called by the current governor",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bootstrap",
            "args": [
                {
                    "type": "pay",
                    "name": "seed",
                    "desc": "Initial Payment transaction to the app account so it can opt in to assets and create pool token."
                },
                {
                    "type": "asset",
                    "name": "a_asset",
                    "desc": "One of the two assets this pool should allow swapping between."
                },
                {
                    "type": "asset",
                    "name": "b_asset",
                    "desc": "The other of the two assets this pool should allow swapping between."
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The asset id of the pool token created."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "bootstraps the contract by opting into the assets and creating the pool token.\nNote this method will fail if it is attempted more than once on the same contract since the assets and pool token application state values are marked as static and cannot be overridden.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mint",
            "args": [
                {
                    "type": "axfer",
                    "name": "a_xfer",
                    "desc": "Asset Transfer Transaction of asset A as a deposit to the pool in exchange for pool tokens."
                },
                {
                    "type": "axfer",
                    "name": "b_xfer",
                    "desc": "Asset Transfer Transaction of asset B as a deposit to the pool in exchange for pool tokens."
                },
                {
                    "type": "asset",
                    "name": "pool_asset",
                    "desc": "The asset ID of the pool token so that we may distribute it.",
                    "defaultValue": {
                        "source": "global",
                        "data": "cG9vbF90b2tlbg==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "asset",
                    "name": "a_asset",
                    "desc": "The asset ID of the Asset A so that we may inspect our balance.",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNzZXRfYQ==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "asset",
                    "name": "b_asset",
                    "desc": "The asset ID of the Asset B so that we may inspect our balance.",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNzZXRfYg==",
                        "type": "AVMString"
                    }
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "mint pool tokens given some amount of asset A and asset B.\nGiven some amount of Asset A and Asset B in the transfers, mint some number of pool tokens commensurate with the pools current balance and circulating supply of pool tokens.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burn",
            "args": [
                {
                    "type": "axfer",
                    "name": "pool_xfer",
                    "desc": "Asset Transfer Transaction of the pool token for the amount the sender wishes to redeem"
                },
                {
                    "type": "asset",
                    "name": "pool_asset",
                    "desc": "Asset ID of the pool token so we may inspect balance.",
                    "defaultValue": {
                        "source": "global",
                        "data": "cG9vbF90b2tlbg==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "asset",
                    "name": "a_asset",
                    "desc": "Asset ID of Asset A so we may inspect balance and distribute it",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNzZXRfYQ==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "asset",
                    "name": "b_asset",
                    "desc": "Asset ID of Asset B so we may inspect balance and distribute it",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNzZXRfYg==",
                        "type": "AVMString"
                    }
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "burn pool tokens to get back some amount of asset A and asset B",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "swap",
            "args": [
                {
                    "type": "axfer",
                    "name": "swap_xfer",
                    "desc": "Asset Transfer Transaction of either Asset A or Asset B"
                },
                {
                    "type": "asset",
                    "name": "a_asset",
                    "desc": "Asset ID of asset A so we may inspect balance and possibly transfer it",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNzZXRfYQ==",
                        "type": "AVMString"
                    }
                },
                {
                    "type": "asset",
                    "name": "b_asset",
                    "desc": "Asset ID of asset B so we may inspect balance and possibly transfer it",
                    "defaultValue": {
                        "source": "global",
                        "data": "YXNzZXRfYg==",
                        "type": "AVMString"
                    }
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Swap some amount of either asset A or asset B for the other",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asset_a": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfYQ=="
                },
                "asset_b": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfYg=="
                },
                "governor": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z292ZXJub3I="
                },
                "pool_token": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cG9vbF90b2tlbg=="
                },
                "ratio": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmF0aW8="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        131,
                        165,
                        205,
                        256,
                        300
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        997
                    ],
                    "errorMessage": "Only the account set in global_state.governor may call this method"
                },
                {
                    "pc": [
                        1007,
                        1017,
                        1027
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        396,
                        577,
                        603,
                        766,
                        873
                    ],
                    "errorMessage": "amount minimum not met"
                },
                {
                    "pc": [
                        369
                    ],
                    "errorMessage": "application has already been bootstrapped"
                },
                {
                    "pc": [
                        528,
                        570,
                        744,
                        859
                    ],
                    "errorMessage": "asset a incorrect"
                },
                {
                    "pc": [
                        402
                    ],
                    "errorMessage": "asset a must be less than asset b"
                },
                {
                    "pc": [
                        536,
                        595,
                        752,
                        867
                    ],
                    "errorMessage": "asset b incorrect"
                },
                {
                    "pc": [
                        418,
                        437
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        900
                    ],
                    "errorMessage": "asset id incorrect"
                },
                {
                    "pc": [
                        520,
                        736,
                        776
                    ],
                    "errorMessage": "asset pool incorrect"
                },
                {
                    "pc": [
                        512,
                        728,
                        851
                    ],
                    "errorMessage": "bootstrap method needs to be called first"
                },
                {
                    "pc": [
                        323
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        134,
                        168,
                        208,
                        259,
                        303
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        415,
                        478,
                        524,
                        568,
                        740,
                        820,
                        855,
                        885,
                        970,
                        1014
                    ],
                    "errorMessage": "check self.asset_a exists"
                },
                {
                    "pc": [
                        434,
                        489,
                        532,
                        593,
                        748,
                        831,
                        863,
                        889,
                        915,
                        1024
                    ],
                    "errorMessage": "check self.asset_b exists"
                },
                {
                    "pc": [
                        995
                    ],
                    "errorMessage": "check self.governor exists"
                },
                {
                    "pc": [
                        367,
                        500,
                        511,
                        516,
                        650,
                        727,
                        732,
                        774,
                        850,
                        1004
                    ],
                    "errorMessage": "check self.pool_token exists"
                },
                {
                    "pc": [
                        378
                    ],
                    "errorMessage": "group size not 2"
                },
                {
                    "pc": [
                        386,
                        560,
                        585,
                        760
                    ],
                    "errorMessage": "receiver not app address"
                },
                {
                    "pc": [
                        644,
                        942
                    ],
                    "errorMessage": "send amount too low"
                },
                {
                    "pc": [
                        544,
                        552,
                        784,
                        881
                    ],
                    "errorMessage": "sender invalid"
                },
                {
                    "pc": [
                        144,
                        178,
                        219,
                        229
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        269
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAFAAHoBwSAyK+gJSYFB2Fzc2V0X2EHYXNzZXRfYgpwb29sX3Rva2VuCGdvdmVybm9yBXJhdGlvMRhAABEoImcpImcrMQBnKiJnJwQiZzEbQQDnggUECKlW9wRrWdllBFy/Hi0EFDbCrARKiOBVNhoAjgUAqwB/AEwAJAACIkMxGRREMRhEMRYjCUk4ECUSRDYaARfAMDYaAhfAMIgCqSNDMRkURDEYRDEWIwlJOBAlEkQ2GgEXwDA2GgIXwDA2GgMXwDCIAgkjQzEZFEQxGEQxFoECCUk4ECUSRDEWIwlJOBAlEkQ2GgEXwDA2GgIXwDA2GgMXwDCIAPsjQzEZFEQxGEQxFiMJSTgQIxJENhoBF8AwNhoCF8AwiABMFoAEFR98dUxQsCNDMRkURDEYRDYaARfAHIgAJSNDMRlA/z4xGBREI0OKAwCxi/2yFIv/shKL/rIRJbIQIrIBs4mKAQCIAnori/9niYoDASIqZUQURIgCaTIEgQISRIv9OAcyChJEi/04CIHgpxIPRIv+i/8MRCiL/mcpi/9nsSIoZURxA0SABERQVC1MUIABLVAiKWVEcQNEUDIKSbIqsimBA7IjIQSyIoADZGJ0siWyJoEDshAisgGzKrQ8ZyIoZUQyCkwiiP9gIillRDIKTCKI/1UiKmVEiYoFAIAASSIqZUREIiplRIv9EkQiKGVEi/4SRCIpZUSL/xJEi/s4ADEAEkSL/DgAMQASRIv7OBQyChJEi/s4ESIoZUQSRIv7OBJHAkSL/DgUMgoSRIv8OBEiKWVEEkSL/DgSSU4CRIgBiEyIAY5JTgKIAZJOAhJBAF6LBosDEkEAViNBABmLAosDC5IkCUlEMQAiKmVETwKI/raIATuJIQSLBAkkiwJJTgILiwVPAgkKSYwAJIsDSU4CC4sGTwIJCkmMAQxBAAiLAAskCkL/vosBCyQKQv+2IkL/p4oEACIqZUREIiplRIv9EkQiKGVEi/4SRCIpZUSL/xJEi/w4FDIKEkSL/DgSSUSL/DgRIiplRBJEi/w4ADEAEkSIANOIANohBE8CCUsCCUxLAgtLAQqIANJPAwtPAgoxACIoZURPA4j+DDEAIillRE8CiP4BiACGiYoDAIAASSIqZUREIihlRIv+EkQiKWVEi/8SRIv9OBJJRIv9OAAxABJEIihlRCIpZUSL/TgRjgIAOAABAIgAaYwAiABuIillTIwBRIsAiwJJTgIJJAtMgeMHC0xLAQhMTwILTApJRDEAiwFPAoj9jogAE4mIADyMAIgALSIoZUyMAURC/8aIACCIACdMJAtMCicETGeJMQAiK2VEEkSJMgoiKmVEcABEiTIKIihlRHAARIkyCiIpZURwAESJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}