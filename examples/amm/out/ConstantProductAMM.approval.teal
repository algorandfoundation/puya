#pragma version 10
#pragma typetrack false

// examples.amm.contract.ConstantProductAMM.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 1000 4 10000000000
    bytecblock "asset_a" "asset_b" "pool_token" "governor" "ratio"
    txn ApplicationID
    bnz main_after_if_else@2
    // amm/contract.py:32-33
    // # The asset id of asset A
    // self.asset_a = Asset()
    bytec_0 // "asset_a"
    intc_0 // 0
    app_global_put
    // amm/contract.py:34-35
    // # The asset id of asset B
    // self.asset_b = Asset()
    bytec_1 // "asset_b"
    intc_0 // 0
    app_global_put
    // amm/contract.py:36-37
    // # The current governor of this contract, allowed to do admin type actions
    // self.governor = Txn.sender
    bytec_3 // "governor"
    txn Sender
    app_global_put
    // amm/contract.py:38-39
    // # The asset id of the Pool Token, used to track share of pool the holder may recover
    // self.pool_token = Asset()
    bytec_2 // "pool_token"
    intc_0 // 0
    app_global_put
    // amm/contract.py:40-41
    // # The ratio between assets (A*Scale/B)
    // self.ratio = UInt64(0)
    bytec 4 // "ratio"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // amm/contract.py:27
    // class ConstantProductAMM(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@12
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert
    pushbytess 0xddc4cb4a 0x6b59d965 0x5cbf1e2d 0x1436c2ac 0x4a88e055 // method "set_governor(address)void", method "bootstrap(pay,asset,asset)uint64", method "mint(axfer,axfer,asset,asset,asset)void", method "burn(axfer,asset,asset,asset)void", method "swap(axfer,asset,asset)void"
    txna ApplicationArgs 0
    match set_governor bootstrap mint burn swap
    err

main_bare_routing@12:
    // amm/contract.py:27
    // class ConstantProductAMM(ARC4Contract):
    txn OnCompletion
    !
    assert
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// examples.amm.contract.do_asset_transfer(receiver: bytes, asset: uint64, amount: uint64) -> void:
do_asset_transfer:
    // amm/contract.py:359-360
    // @subroutine
    // def do_asset_transfer(*, receiver: Account, asset: Asset, amount: UInt64) -> None:
    proto 3 0
    // amm/contract.py:361-365
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_amount=amount,
    //     asset_receiver=receiver,
    // ).submit()
    itxn_begin
    frame_dig -3
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field AssetAmount
    frame_dig -2
    itxn_field XferAsset
    // amm/contract.py:361
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // amm/contract.py:361-365
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_amount=amount,
    //     asset_receiver=receiver,
    // ).submit()
    itxn_submit
    retsub


// examples.amm.contract.ConstantProductAMM.set_governor[routing]() -> void:
set_governor:
    // amm/contract.py:43
    // @arc4.abimethod()
    txna ApplicationArgs 1
    // amm/contract.py:46
    // self._check_is_governor()
    callsub _check_is_governor
    // amm/contract.py:47
    // self.governor = new_governor
    bytec_3 // "governor"
    swap
    app_global_put
    // amm/contract.py:43
    // @arc4.abimethod()
    intc_1 // 1
    return


// examples.amm.contract.ConstantProductAMM.bootstrap[routing]() -> void:
bootstrap:
    // amm/contract.py:49
    // @arc4.abimethod(resource_encoding="index")
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // amm/contract.py:66
    // assert not self.pool_token, "application has already been bootstrapped"
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    !
    assert // application has already been bootstrapped
    // amm/contract.py:67
    // self._check_is_governor()
    callsub _check_is_governor
    // amm/contract.py:68
    // assert Global.group_size == 2, "group size not 2"
    global GroupSize
    pushint 2 // 2
    ==
    assert // group size not 2
    // amm/contract.py:69
    // assert seed.receiver == Global.current_application_address, "receiver not app address"
    dig 2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // receiver not app address
    // amm/contract.py:71
    // assert seed.amount >= 300_000, "amount minimum not met"  # 0.3 Algos
    uncover 2
    gtxns Amount
    pushint 300000 // 300000
    >=
    assert // amount minimum not met
    // amm/contract.py:72
    // assert a_asset.id < b_asset.id, "asset a must be less than asset b"
    dup2
    <
    assert // asset a must be less than asset b
    // amm/contract.py:73
    // self.asset_a = a_asset
    bytec_0 // "asset_a"
    uncover 2
    app_global_put
    // amm/contract.py:74
    // self.asset_b = b_asset
    bytec_1 // "asset_b"
    dig 1
    app_global_put
    // amm/contract.py:274-282
    // itxn.AssetConfig(
    //     asset_name=b"DPT-" + self.asset_a.unit_name + b"-" + self.asset_b.unit_name,
    //     unit_name=b"dbt",
    //     total=TOTAL_SUPPLY,
    //     decimals=3,
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    // )
    // .submit()
    itxn_begin
    // amm/contract.py:275
    // asset_name=b"DPT-" + self.asset_a.unit_name + b"-" + self.asset_b.unit_name,
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    asset_params_get AssetUnitName
    assert // asset exists
    pushbytes 0x4450542d
    swap
    concat
    pushbytes 0x2d
    concat
    swap
    asset_params_get AssetUnitName
    assert // asset exists
    concat
    // amm/contract.py:279
    // manager=Global.current_application_address,
    global CurrentApplicationAddress
    // amm/contract.py:280
    // reserve=Global.current_application_address,
    dup
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    // amm/contract.py:278
    // decimals=3,
    pushint 3 // 3
    itxn_field ConfigAssetDecimals
    // amm/contract.py:277
    // total=TOTAL_SUPPLY,
    intc 4 // 10000000000
    itxn_field ConfigAssetTotal
    // amm/contract.py:276
    // unit_name=b"dbt",
    pushbytes 0x646274
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetName
    // amm/contract.py:274
    // itxn.AssetConfig(
    pushint 3 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // amm/contract.py:274-282
    // itxn.AssetConfig(
    //     asset_name=b"DPT-" + self.asset_a.unit_name + b"-" + self.asset_b.unit_name,
    //     unit_name=b"dbt",
    //     total=TOTAL_SUPPLY,
    //     decimals=3,
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    // )
    // .submit()
    itxn_submit
    // amm/contract.py:75
    // self.pool_token = self._create_pool_token()
    bytec_2 // "pool_token"
    // amm/contract.py:274-283
    // itxn.AssetConfig(
    //     asset_name=b"DPT-" + self.asset_a.unit_name + b"-" + self.asset_b.unit_name,
    //     unit_name=b"dbt",
    //     total=TOTAL_SUPPLY,
    //     decimals=3,
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    // )
    // .submit()
    // .created_asset
    itxn CreatedAssetID
    // amm/contract.py:75
    // self.pool_token = self._create_pool_token()
    app_global_put
    // amm/contract.py:77
    // self._do_opt_in(self.asset_a)
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    // amm/contract.py:289
    // receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // amm/contract.py:288-292
    // do_asset_transfer(
    //     receiver=Global.current_application_address,
    //     asset=asset,
    //     amount=UInt64(0),
    // )
    swap
    // amm/contract.py:291
    // amount=UInt64(0),
    intc_0 // 0
    // amm/contract.py:288-292
    // do_asset_transfer(
    //     receiver=Global.current_application_address,
    //     asset=asset,
    //     amount=UInt64(0),
    // )
    callsub do_asset_transfer
    // amm/contract.py:78
    // self._do_opt_in(self.asset_b)
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    // amm/contract.py:289
    // receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // amm/contract.py:288-292
    // do_asset_transfer(
    //     receiver=Global.current_application_address,
    //     asset=asset,
    //     amount=UInt64(0),
    // )
    swap
    // amm/contract.py:291
    // amount=UInt64(0),
    intc_0 // 0
    // amm/contract.py:288-292
    // do_asset_transfer(
    //     receiver=Global.current_application_address,
    //     asset=asset,
    //     amount=UInt64(0),
    // )
    callsub do_asset_transfer
    // amm/contract.py:79
    // return self.pool_token.id
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    // amm/contract.py:49
    // @arc4.abimethod(resource_encoding="index")
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// examples.amm.contract.ConstantProductAMM.mint[routing]() -> void:
mint:
    pushbytes ""
    dup
    // amm/contract.py:81-88
    // @arc4.abimethod(
    //     default_args={
    //         "pool_asset": "pool_token",
    //         "a_asset": "asset_a",
    //         "b_asset": "asset_b",
    //     },
    //     resource_encoding="index",
    // )
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    btoi
    txnas Assets
    // amm/contract.py:256
    // assert self.pool_token, "bootstrap method needs to be called first"
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    dup
    assert // bootstrap method needs to be called first
    // amm/contract.py:114-115
    // # well-formed mint
    // assert pool_asset == self.pool_token, "asset pool incorrect"
    uncover 3
    ==
    assert // asset pool incorrect
    // amm/contract.py:116
    // assert a_asset == self.asset_a, "asset a incorrect"
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    uncover 2
    dig 1
    ==
    assert // asset a incorrect
    // amm/contract.py:117
    // assert b_asset == self.asset_b, "asset b incorrect"
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    uncover 2
    dig 1
    ==
    assert // asset b incorrect
    // amm/contract.py:118
    // assert a_xfer.sender == Txn.sender, "sender invalid"
    dig 3
    gtxns Sender
    txn Sender
    ==
    assert // sender invalid
    // amm/contract.py:119
    // assert b_xfer.sender == Txn.sender, "sender invalid"
    dig 2
    gtxns Sender
    txn Sender
    ==
    assert // sender invalid
    // amm/contract.py:123
    // a_xfer.asset_receiver == Global.current_application_address
    dig 3
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    // amm/contract.py:121-124
    // # valid asset a xfer
    // assert (
    //     a_xfer.asset_receiver == Global.current_application_address
    // ), "receiver not app address"
    assert // receiver not app address
    // amm/contract.py:125
    // assert a_xfer.xfer_asset == self.asset_a, "asset a incorrect"
    dig 3
    gtxns XferAsset
    uncover 2
    ==
    assert // asset a incorrect
    // amm/contract.py:126
    // assert a_xfer.asset_amount > 0, "amount minimum not met"
    uncover 2
    gtxns AssetAmount
    dup
    cover 3
    dup
    assert // amount minimum not met
    // amm/contract.py:130
    // b_xfer.asset_receiver == Global.current_application_address
    dig 2
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    // amm/contract.py:128-131
    // # valid asset b xfer
    // assert (
    //     b_xfer.asset_receiver == Global.current_application_address
    // ), "receiver not app address"
    assert // receiver not app address
    // amm/contract.py:132
    // assert b_xfer.xfer_asset == self.asset_b, "asset b incorrect"
    dig 2
    gtxns XferAsset
    uncover 2
    ==
    assert // asset b incorrect
    // amm/contract.py:133
    // assert b_xfer.asset_amount > 0, "amount minimum not met"
    swap
    gtxns AssetAmount
    dup
    cover 2
    assert // amount minimum not met
    // amm/contract.py:136
    // pool_balance=self._current_pool_balance(),
    callsub _current_pool_balance
    swap
    // amm/contract.py:137
    // a_balance=self._current_a_balance(),
    callsub _current_a_balance
    dup
    cover 2
    // amm/contract.py:138
    // b_balance=self._current_b_balance(),
    callsub _current_b_balance
    cover 2
    // amm/contract.py:334
    // is_initial_mint = a_balance == a_amount and b_balance == b_amount
    ==
    bz mint_bool_false@4
    dup
    dig 4
    ==
    bz mint_bool_false@4
    intc_1 // 1

mint_bool_merge@5:
    // amm/contract.py:335
    // if is_initial_mint:
    bz mint_after_if_else@7
    // amm/contract.py:336
    // return op.sqrt(a_amount * b_amount) - SCALE
    dig 4
    dig 4
    *
    sqrt
    intc_2 // 1000
    -

mint_after_inlined_examples.amm.contract.tokens_to_mint@10:
    // amm/contract.py:142
    // assert to_mint > 0, "send amount too low"
    dup
    assert // send amount too low
    // amm/contract.py:144-145
    // # mint tokens
    // do_asset_transfer(receiver=Txn.sender, asset=self.pool_token, amount=to_mint)
    txn Sender
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    uncover 2
    callsub do_asset_transfer
    // amm/contract.py:146
    // self._update_ratio()
    callsub _update_ratio
    // amm/contract.py:81-88
    // @arc4.abimethod(
    //     default_args={
    //         "pool_asset": "pool_token",
    //         "a_asset": "asset_a",
    //         "b_asset": "asset_b",
    //     },
    //     resource_encoding="index",
    // )
    intc_1 // 1
    return

mint_after_if_else@7:
    // amm/contract.py:337
    // issued = TOTAL_SUPPLY - pool_balance
    intc 4 // 10000000000
    dig 3
    -
    // amm/contract.py:338
    // a_ratio = SCALE * a_amount // (a_balance - a_amount)
    intc_2 // 1000
    dig 6
    dup
    cover 2
    *
    dig 4
    uncover 2
    -
    /
    dup
    bury 9
    // amm/contract.py:339
    // b_ratio = SCALE * b_amount // (b_balance - b_amount)
    intc_2 // 1000
    dig 6
    dup
    cover 2
    *
    dig 4
    uncover 2
    -
    /
    dup
    bury 9
    // amm/contract.py:340
    // if a_ratio < b_ratio:
    <
    bz mint_else_body@9
    // amm/contract.py:341
    // return a_ratio * issued // SCALE
    dig 7
    *
    intc_2 // 1000
    /
    // amm/contract.py:135-141
    // to_mint = tokens_to_mint(
    //     pool_balance=self._current_pool_balance(),
    //     a_balance=self._current_a_balance(),
    //     b_balance=self._current_b_balance(),
    //     a_amount=a_xfer.asset_amount,
    //     b_amount=b_xfer.asset_amount,
    // )
    b mint_after_inlined_examples.amm.contract.tokens_to_mint@10

mint_else_body@9:
    // amm/contract.py:343
    // return b_ratio * issued // SCALE
    dig 6
    *
    intc_2 // 1000
    /
    // amm/contract.py:135-141
    // to_mint = tokens_to_mint(
    //     pool_balance=self._current_pool_balance(),
    //     a_balance=self._current_a_balance(),
    //     b_balance=self._current_b_balance(),
    //     a_amount=a_xfer.asset_amount,
    //     b_amount=b_xfer.asset_amount,
    // )
    b mint_after_inlined_examples.amm.contract.tokens_to_mint@10

mint_bool_false@4:
    intc_0 // 0
    b mint_bool_merge@5


// examples.amm.contract.ConstantProductAMM.burn[routing]() -> void:
burn:
    // amm/contract.py:148-155
    // @arc4.abimethod(
    //     default_args={
    //         "pool_asset": "pool_token",
    //         "a_asset": "asset_a",
    //         "b_asset": "asset_b",
    //     },
    //     resource_encoding="index",
    // )
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    txna ApplicationArgs 3
    btoi
    txnas Assets
    // amm/contract.py:256
    // assert self.pool_token, "bootstrap method needs to be called first"
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    dup
    assert // bootstrap method needs to be called first
    // amm/contract.py:174
    // assert pool_asset == self.pool_token, "asset pool incorrect"
    uncover 3
    dig 1
    ==
    assert // asset pool incorrect
    // amm/contract.py:175
    // assert a_asset == self.asset_a, "asset a incorrect"
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    uncover 3
    ==
    assert // asset a incorrect
    // amm/contract.py:176
    // assert b_asset == self.asset_b, "asset b incorrect"
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    uncover 2
    ==
    assert // asset b incorrect
    // amm/contract.py:179
    // pool_xfer.asset_receiver == Global.current_application_address
    dig 1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    // amm/contract.py:178-180
    // assert (
    //     pool_xfer.asset_receiver == Global.current_application_address
    // ), "receiver not app address"
    assert // receiver not app address
    // amm/contract.py:181
    // assert pool_xfer.asset_amount > 0, "amount minimum not met"
    dig 1
    gtxns AssetAmount
    dup
    assert // amount minimum not met
    // amm/contract.py:182
    // assert pool_xfer.xfer_asset == self.pool_token, "asset pool incorrect"
    dig 2
    gtxns XferAsset
    uncover 2
    ==
    assert // asset pool incorrect
    // amm/contract.py:183
    // assert pool_xfer.sender == Txn.sender, "sender invalid"
    swap
    gtxns Sender
    txn Sender
    ==
    assert // sender invalid
    // amm/contract.py:185-187
    // # Get the total number of tokens issued
    // # !important: this happens prior to receiving the current axfer of pool tokens
    // pool_balance = self._current_pool_balance()
    callsub _current_pool_balance
    // amm/contract.py:190
    // supply=self._current_a_balance(),
    callsub _current_a_balance
    // amm/contract.py:348
    // issued = TOTAL_SUPPLY - pool_balance - amount
    intc 4 // 10000000000
    uncover 2
    -
    dig 2
    -
    // amm/contract.py:349
    // return supply * amount // issued
    swap
    dig 2
    *
    dig 1
    /
    // amm/contract.py:195
    // supply=self._current_b_balance(),
    callsub _current_b_balance
    // amm/contract.py:349
    // return supply * amount // issued
    uncover 3
    *
    uncover 2
    /
    // amm/contract.py:199-200
    // # Send back commensurate amt of a
    // do_asset_transfer(receiver=Txn.sender, asset=self.asset_a, amount=a_amt)
    txn Sender
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    uncover 3
    callsub do_asset_transfer
    // amm/contract.py:202-203
    // # Send back commensurate amt of b
    // do_asset_transfer(receiver=Txn.sender, asset=self.asset_b, amount=b_amt)
    txn Sender
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    uncover 2
    callsub do_asset_transfer
    // amm/contract.py:204
    // self._update_ratio()
    callsub _update_ratio
    // amm/contract.py:148-155
    // @arc4.abimethod(
    //     default_args={
    //         "pool_asset": "pool_token",
    //         "a_asset": "asset_a",
    //         "b_asset": "asset_b",
    //     },
    //     resource_encoding="index",
    // )
    intc_1 // 1
    return


// examples.amm.contract.ConstantProductAMM.swap[routing]() -> void:
swap:
    pushbytes ""
    dup
    // amm/contract.py:206-212
    // @arc4.abimethod(
    //     default_args={
    //         "a_asset": "asset_a",
    //         "b_asset": "asset_b",
    //     },
    //     resource_encoding="index",
    // )
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_3 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // amm/contract.py:256
    // assert self.pool_token, "bootstrap method needs to be called first"
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    assert // bootstrap method needs to be called first
    // amm/contract.py:228
    // assert a_asset == self.asset_a, "asset a incorrect"
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    uncover 2
    dig 1
    ==
    assert // asset a incorrect
    // amm/contract.py:229
    // assert b_asset == self.asset_b, "asset b incorrect"
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    uncover 2
    dig 1
    ==
    assert // asset b incorrect
    // amm/contract.py:231
    // assert swap_xfer.asset_amount > 0, "amount minimum not met"
    dig 2
    gtxns AssetAmount
    dup
    cover 4
    assert // amount minimum not met
    // amm/contract.py:232
    // assert swap_xfer.sender == Txn.sender, "sender invalid"
    dig 2
    gtxns Sender
    txn Sender
    ==
    assert // sender invalid
    // amm/contract.py:234
    // match swap_xfer.xfer_asset:
    uncover 2
    gtxns XferAsset
    // amm/contract.py:234-244
    // match swap_xfer.xfer_asset:
    //     case self.asset_a:
    //         in_supply = self._current_b_balance()
    //         out_supply = self._current_a_balance()
    //         out_asset = self.asset_a
    //     case self.asset_b:
    //         in_supply = self._current_a_balance()
    //         out_supply = self._current_b_balance()
    //         out_asset = self.asset_b
    //     case _:
    //         assert False, "asset id incorrect"
    match swap_switch_case_0@2 swap_switch_case_1@3
    // amm/contract.py:244
    // assert False, "asset id incorrect"
    err // asset id incorrect

swap_switch_case_1@3:
    // amm/contract.py:240
    // in_supply = self._current_a_balance()
    callsub _current_a_balance
    bury 3
    // amm/contract.py:241
    // out_supply = self._current_b_balance()
    callsub _current_b_balance
    // amm/contract.py:242
    // out_asset = self.asset_b
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    swap
    bury 4
    assert // check self.asset_b exists

swap_switch_case_next@5:
    // amm/contract.py:354
    // in_total = SCALE * (in_supply - in_amount) + (in_amount * FACTOR)
    dig 3
    dig 2
    dup
    cover 2
    -
    intc_2 // 1000
    *
    swap
    pushint 995 // 995
    *
    swap
    dig 1
    +
    // amm/contract.py:355
    // out_total = in_amount * FACTOR * out_supply
    swap
    uncover 2
    *
    // amm/contract.py:356
    // return out_total // in_total
    swap
    /
    // amm/contract.py:249
    // assert to_swap > 0, "send amount too low"
    dup
    assert // send amount too low
    // amm/contract.py:251
    // do_asset_transfer(receiver=Txn.sender, asset=out_asset, amount=to_swap)
    txn Sender
    dig 3
    uncover 2
    callsub do_asset_transfer
    // amm/contract.py:252
    // self._update_ratio()
    callsub _update_ratio
    // amm/contract.py:206-212
    // @arc4.abimethod(
    //     default_args={
    //         "a_asset": "asset_a",
    //         "b_asset": "asset_b",
    //     },
    //     resource_encoding="index",
    // )
    intc_1 // 1
    return

swap_switch_case_0@2:
    // amm/contract.py:236
    // in_supply = self._current_b_balance()
    callsub _current_b_balance
    bury 3
    // amm/contract.py:237
    // out_supply = self._current_a_balance()
    callsub _current_a_balance
    // amm/contract.py:238
    // out_asset = self.asset_a
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    swap
    bury 4
    assert // check self.asset_a exists
    b swap_switch_case_next@5


// examples.amm.contract.ConstantProductAMM._update_ratio() -> void:
_update_ratio:
    // amm/contract.py:260
    // a_balance = self._current_a_balance()
    callsub _current_a_balance
    // amm/contract.py:261
    // b_balance = self._current_b_balance()
    callsub _current_b_balance
    // amm/contract.py:263
    // self.ratio = a_balance * SCALE // b_balance
    swap
    intc_2 // 1000
    *
    swap
    /
    bytec 4 // "ratio"
    swap
    app_global_put
    retsub


// examples.amm.contract.ConstantProductAMM._check_is_governor() -> void:
_check_is_governor:
    // amm/contract.py:268
    // Txn.sender == self.governor
    txn Sender
    intc_0 // 0
    bytec_3 // "governor"
    app_global_get_ex
    assert // check self.governor exists
    ==
    // amm/contract.py:267-269
    // assert (
    //     Txn.sender == self.governor
    // ), "Only the account set in global_state.governor may call this method"
    assert // Only the account set in global_state.governor may call this method
    retsub


// examples.amm.contract.ConstantProductAMM._current_pool_balance() -> uint64:
_current_pool_balance:
    // amm/contract.py:296
    // return self.pool_token.balance(Global.current_application_address)
    global CurrentApplicationAddress
    intc_0 // 0
    bytec_2 // "pool_token"
    app_global_get_ex
    assert // check self.pool_token exists
    asset_holding_get AssetBalance
    assert // account opted into asset
    retsub


// examples.amm.contract.ConstantProductAMM._current_a_balance() -> uint64:
_current_a_balance:
    // amm/contract.py:300
    // return self.asset_a.balance(Global.current_application_address)
    global CurrentApplicationAddress
    intc_0 // 0
    bytec_0 // "asset_a"
    app_global_get_ex
    assert // check self.asset_a exists
    asset_holding_get AssetBalance
    assert // account opted into asset
    retsub


// examples.amm.contract.ConstantProductAMM._current_b_balance() -> uint64:
_current_b_balance:
    // amm/contract.py:304
    // return self.asset_b.balance(Global.current_application_address)
    global CurrentApplicationAddress
    intc_0 // 0
    bytec_1 // "asset_b"
    app_global_get_ex
    assert // check self.asset_b exists
    asset_holding_get AssetBalance
    assert // account opted into asset
    retsub
