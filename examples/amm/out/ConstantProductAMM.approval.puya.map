{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCQ;AAAe;AAAf;AAEA;AAAe;AAAf;AAEA;AAAgB;;AAAhB;AAEA;AAAkB;AAAlB;AAEA;;AAAa;AAAb;AAdR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAmLK;;AAAA;AAAA;AAAA;;AAAA;AAnLL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAmLK;;;AAAA;;AA1DA;;AAAA;AAAA;AAAA;;AAAA;AAzHL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAyHK;;;AAAA;;AAnEA;;AAAA;AAAA;AAAA;;AAAA;AAtDL;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAsDK;;;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAtBL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAsBK;;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAhBL;;;AAgBK;;;AAAA;;AAhBL;;AAAA;;;;;;;;;AA4UA;;;AAEI;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;AA9TJ;;;AAGQ;;;AACA;AAAA;;AAAA;;AAER;;;AAiBmB;AAAA;AAAA;AAAA;AAAJ;AAAP;AACA;;;AACO;;AAAqB;;AAArB;AAAP;AACO;;AAAA;;AAAiB;;AAAjB;AAAP;AAEO;;AAAA;;AAAe;;;;AAAf;AAAP;AACO;;AAAA;;AAAA;AAAP;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAwMI;AACyB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAV;;;;;;AAAA;AAAA;AAAmC;;;AAAnC;AAA0C;;AAAA;;AAAA;AAA1C;AAIH;;AACA;;;;;AAFC;;;;AADH;;;;AADI;;;;;;;;;AAFd;;;;AAAA;;;AAAA;AAvMJ;AAuMI;;AAvMJ;AAEgB;AAAA;AAAA;AAAA;AAoNH;;AADb;AAGW;AAHX;;;AAlNgB;AAAA;AAAA;AAAA;AAmNH;;AADb;AAGW;AAHX;;;AAjNO;AAAA;AAAA;AAAA;AAAP;AAER;;;;;;AA+Ke;AAAA;AAAA;AAAA;AAAP;AAAA;AA7IO;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAiB;;AAAjB;AAAP;AACO;;AAAA;;AAAiB;;AAAjB;AAAP;AAII;;AAAA;;AAAyB;;AAAzB;AADJ;AAGO;;AAAA;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;;AAAP;AAAA;AAII;;AAAA;;AAAyB;;AAAzB;AADJ;AAGO;;AAAA;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAA;;AAAP;AAGiB;;;AAAA;AACH;;;AAAA;AAAA;;AACA;;;AAAA;;AAoMA;AAAA;;;AAA0B;;AAAA;;AAAA;AAA1B;;;;AACtB;;;AACuB;;AAAA;;AAAA;AAAR;AAA+B;AAA/B;AAlMP;AAAA;AAG2B;;AAAkB;AAAA;AAAA;AAAA;AAA7C;;AAAA;;;AACA;;;;AA+LK;;AAAA;;AAAA;AACC;AAAA;;AAAA;AAAA;;AAAA;AAAqB;;AAAA;;AAAA;AAArB;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;;AAAA;AAAqB;;AAAA;;AAAA;AAArB;AAAA;AAAA;;AACP;AAAP;;;AACe;;AAAA;AAAoB;AAApB;AA9MG;;;AAgNH;;AAAA;AAAoB;AAApB;AAhNG;;;;;;;AAalB;;;AA4Ge;AAAA;AAAA;AAAA;AAAP;AAAA;AAlFO;;AAAA;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AAGI;;AAAA;;AAA4B;;AAA5B;AADJ;AAGO;;AAAA;;AAAP;AAAA;AACO;;AAAA;;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAIe;;;AAGJ;;;AA8JN;;AAAA;;AAAA;AAAA;;AAAA;AACF;AAAA;;AAAA;AAAA;;AAAA;AA1JQ;;;AA0JR;;AAAA;AAAA;;AAAA;AArJwB;;AAAkB;AAAA;AAAA;AAAA;AAA7C;;AAAA;;;AAG2B;;AAAkB;AAAA;AAAA;AAAA;AAA7C;;AAAA;;;AACA;;;;AAER;;;;;;AAkDe;AAAA;AAAA;AAAA;AAAP;AA5BkB;AAAA;AAAA;AAAA;AAAX;;AAAA;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;;AAAA;AAAP;AAEO;;AAAA;;AAAA;AAAA;;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAEM;;AAAA;;AAAN;;;;;;AAUQ;AAJY;;;AAAA;;AACC;;;AACD;AAAA;AAAA;AAAA;AAAA;;AAAA;AAgHJ;;AAAA;;AAAA;AAAA;;AAAA;AAAT;AAAA;AAAmC;AAAY;;;AAAZ;AAAnC;AAAA;;AAAA;AACC;AAAA;;AAAA;AACL;AAAA;AA3GH;AAAA;AAE2B;;AAA3B;;AAAA;;AAAA;;;AACA;;;;AAhBoB;;;AAAA;;AACC;;;AACD;AAAA;AAAA;AAAA;AAAA;;AAAA;;;;AAsBR;;;AACA;;;AAEC;AAAY;AAAZ;AAAA;AAAA;AAAb;;AAAA;AAAA;;AAKI;;AAAc;AAAA;AAAA;AAAA;AAAd;AADJ;;AA6B+B;;AAAxB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAI4B;;AAArB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAI4B;;AAArB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000 4 10000000000"
    },
    "13": {
      "op": "bytecblock \"asset_a\" \"asset_b\" \"pool_token\" \"governor\" \"ratio\""
    },
    "57": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "59": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "62": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\""
      ],
      "stack_out": [
        "\"asset_a\""
      ]
    },
    "63": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "\"asset_a\"",
        "0"
      ]
    },
    "64": {
      "op": "app_global_put",
      "stack_out": []
    },
    "65": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\""
      ],
      "stack_out": [
        "\"asset_b\""
      ]
    },
    "66": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"asset_b\"",
        "0"
      ]
    },
    "67": {
      "op": "app_global_put",
      "stack_out": []
    },
    "68": {
      "op": "bytec_3 // \"governor\"",
      "defined_out": [
        "\"governor\""
      ],
      "stack_out": [
        "\"governor\""
      ]
    },
    "69": {
      "op": "txn Sender",
      "defined_out": [
        "\"governor\"",
        "tmp%0#2"
      ],
      "stack_out": [
        "\"governor\"",
        "tmp%0#2"
      ]
    },
    "71": {
      "op": "app_global_put",
      "stack_out": []
    },
    "72": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\""
      ],
      "stack_out": [
        "\"pool_token\""
      ]
    },
    "73": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"pool_token\"",
        "0"
      ]
    },
    "74": {
      "op": "app_global_put",
      "stack_out": []
    },
    "75": {
      "op": "bytec 4 // \"ratio\"",
      "defined_out": [
        "\"ratio\""
      ],
      "stack_out": [
        "\"ratio\""
      ]
    },
    "77": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"ratio\"",
        "0"
      ]
    },
    "78": {
      "op": "app_global_put",
      "stack_out": []
    },
    "79": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "81": {
      "op": "bz main_bare_routing@10",
      "stack_out": []
    },
    "84": {
      "op": "pushbytess 0xddc4cb4a 0x6b59d965 0x5cbf1e2d 0x1436c2ac 0x4a88e055 // method \"set_governor(address)void\", method \"bootstrap(pay,asset,asset)uint64\", method \"mint(axfer,axfer,asset,asset,asset)void\", method \"burn(axfer,asset,asset,asset)void\", method \"swap(axfer,asset,asset)void\"",
      "defined_out": [
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(burn(axfer,asset,asset,asset)void)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(set_governor(address)void)",
        "Method(swap(axfer,asset,asset)void)"
      ],
      "stack_out": [
        "Method(set_governor(address)void)",
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(burn(axfer,asset,asset,asset)void)",
        "Method(swap(axfer,asset,asset)void)"
      ]
    },
    "111": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(burn(axfer,asset,asset,asset)void)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(set_governor(address)void)",
        "Method(swap(axfer,asset,asset)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(set_governor(address)void)",
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(burn(axfer,asset,asset,asset)void)",
        "Method(swap(axfer,asset,asset)void)",
        "tmp%2#0"
      ]
    },
    "114": {
      "op": "match main_set_governor_route@5 main_bootstrap_route@6 main_mint_route@7 main_burn_route@8 main_swap_route@9",
      "stack_out": []
    },
    "126": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "127": {
      "op": "return",
      "stack_out": []
    },
    "128": {
      "block": "main_swap_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "130": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "131": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "132": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "134": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "135": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "137": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "1"
      ]
    },
    "138": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0"
      ]
    },
    "139": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "140": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "142": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "axfer"
      ]
    },
    "143": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "144": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%4#0"
      ]
    },
    "145": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_Encoded(uint8)%8#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "reinterpret_Encoded(uint8)%8#0"
      ]
    },
    "148": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%4#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "tmp%48#0"
      ]
    },
    "149": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%4#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "tmp%49#0"
      ]
    },
    "151": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%4#0",
        "reinterpret_Encoded(uint8)%9#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "tmp%49#0",
        "reinterpret_Encoded(uint8)%9#0"
      ]
    },
    "154": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%4#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "155": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%4#0",
        "tmp%49#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "tmp%49#0",
        "tmp%51#0"
      ]
    },
    "157": {
      "callsub": "examples.amm.contract.ConstantProductAMM.swap",
      "op": "callsub swap",
      "stack_out": []
    },
    "160": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "161": {
      "op": "return",
      "stack_out": []
    },
    "162": {
      "block": "main_burn_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "164": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "165": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "166": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "168": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "169": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "171": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "1"
      ]
    },
    "172": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "173": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "174": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "176": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "177": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "178": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "179": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_Encoded(uint8)%5#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_Encoded(uint8)%5#0"
      ]
    },
    "182": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%37#0"
      ]
    },
    "183": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%38#0"
      ]
    },
    "185": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_Encoded(uint8)%6#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%38#0",
        "reinterpret_Encoded(uint8)%6#0"
      ]
    },
    "188": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "189": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%38#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%38#0",
        "tmp%40#0"
      ]
    },
    "191": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_Encoded(uint8)%7#0",
        "tmp%38#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%38#0",
        "tmp%40#0",
        "reinterpret_Encoded(uint8)%7#0"
      ]
    },
    "194": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "195": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%42#0"
      ]
    },
    "197": {
      "callsub": "examples.amm.contract.ConstantProductAMM.burn",
      "op": "callsub burn",
      "stack_out": []
    },
    "200": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "201": {
      "op": "return",
      "stack_out": []
    },
    "202": {
      "block": "main_mint_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "204": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "205": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "206": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "208": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "209": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "211": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "2"
      ]
    },
    "213": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "214": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "215": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "217": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "218": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "219": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "220": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%25#0"
      ]
    },
    "222": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%25#0",
        "1"
      ]
    },
    "223": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "224": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "225": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "227": {
      "op": "intc_3 // axfer",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "axfer"
      ]
    },
    "228": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "229": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "230": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_Encoded(uint8)%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_Encoded(uint8)%2#0"
      ]
    },
    "233": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%26#0"
      ]
    },
    "234": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%27#0"
      ]
    },
    "236": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_Encoded(uint8)%3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%27#0",
        "reinterpret_Encoded(uint8)%3#0"
      ]
    },
    "239": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "240": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%27#0",
        "tmp%29#0"
      ]
    },
    "242": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "reinterpret_Encoded(uint8)%4#0",
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%27#0",
        "tmp%29#0",
        "reinterpret_Encoded(uint8)%4#0"
      ]
    },
    "245": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "246": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%31#0"
      ]
    },
    "248": {
      "callsub": "examples.amm.contract.ConstantProductAMM.mint",
      "op": "callsub mint",
      "stack_out": []
    },
    "251": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "252": {
      "op": "return",
      "stack_out": []
    },
    "253": {
      "block": "main_bootstrap_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "255": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "256": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "257": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "259": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "260": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "262": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "1"
      ]
    },
    "263": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "264": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "265": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "267": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "268": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "269": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "270": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint8)%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "273": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%13#0"
      ]
    },
    "274": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%14#0"
      ]
    },
    "276": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint8)%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%14#0",
        "reinterpret_Encoded(uint8)%1#0"
      ]
    },
    "279": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "280": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "282": {
      "callsub": "examples.amm.contract.ConstantProductAMM.bootstrap",
      "op": "callsub bootstrap",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "285": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "286": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "292": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "293": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "294": {
      "op": "log",
      "stack_out": []
    },
    "295": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "296": {
      "op": "return",
      "stack_out": []
    },
    "297": {
      "block": "main_set_governor_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "299": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "300": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "301": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "303": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "304": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "307": {
      "callsub": "examples.amm.contract.ConstantProductAMM.set_governor",
      "op": "callsub set_governor",
      "stack_out": []
    },
    "310": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "311": {
      "op": "return",
      "stack_out": []
    },
    "312": {
      "block": "main_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "314": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "317": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "319": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "320": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "321": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "322": {
      "op": "return",
      "stack_out": []
    },
    "323": {
      "subroutine": "examples.amm.contract.do_asset_transfer",
      "params": {
        "receiver#0": "bytes",
        "asset#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "do_asset_transfer",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "326": {
      "op": "itxn_begin"
    },
    "327": {
      "op": "frame_dig -3",
      "defined_out": [
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "receiver#0 (copy)"
      ]
    },
    "329": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "331": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "333": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "335": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "337": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "339": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "340": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "342": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "343": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "345": {
      "op": "itxn_submit"
    },
    "346": {
      "retsub": true,
      "op": "retsub"
    },
    "347": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.set_governor",
      "params": {
        "new_governor#0": "bytes"
      },
      "block": "set_governor",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "350": {
      "callsub": "examples.amm.contract.ConstantProductAMM._check_is_governor",
      "op": "callsub _check_is_governor"
    },
    "353": {
      "op": "bytec_3 // \"governor\"",
      "defined_out": [
        "\"governor\""
      ],
      "stack_out": [
        "\"governor\""
      ]
    },
    "354": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"governor\"",
        "new_governor#0 (copy)"
      ],
      "stack_out": [
        "\"governor\"",
        "new_governor#0 (copy)"
      ]
    },
    "356": {
      "op": "app_global_put",
      "stack_out": []
    },
    "357": {
      "retsub": true,
      "op": "retsub"
    },
    "358": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.bootstrap",
      "params": {
        "seed#0": "uint64",
        "a_asset#0": "uint64",
        "b_asset#0": "uint64"
      },
      "block": "bootstrap",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "361": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "362": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pool_token\""
      ]
    },
    "363": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "364": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "365": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "366": {
      "error": "application has already been bootstrapped",
      "op": "assert // application has already been bootstrapped",
      "stack_out": []
    },
    "367": {
      "callsub": "examples.amm.contract.ConstantProductAMM._check_is_governor",
      "op": "callsub _check_is_governor"
    },
    "370": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "372": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "2"
      ]
    },
    "374": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "375": {
      "error": "group size not 2",
      "op": "assert // group size not 2",
      "stack_out": []
    },
    "376": {
      "op": "frame_dig -3",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "378": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "380": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "382": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "383": {
      "error": "receiver not app address",
      "op": "assert // receiver not app address",
      "stack_out": []
    },
    "384": {
      "op": "frame_dig -3",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "386": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "388": {
      "op": "pushint 300000 // 300000",
      "defined_out": [
        "300000",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "300000"
      ]
    },
    "392": {
      "op": ">=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "393": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": []
    },
    "394": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_asset#0 (copy)"
      ],
      "stack_out": [
        "a_asset#0 (copy)"
      ]
    },
    "396": {
      "op": "frame_dig -1",
      "defined_out": [
        "a_asset#0 (copy)",
        "b_asset#0 (copy)"
      ],
      "stack_out": [
        "a_asset#0 (copy)",
        "b_asset#0 (copy)"
      ]
    },
    "398": {
      "op": "<",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "399": {
      "error": "asset a must be less than asset b",
      "op": "assert // asset a must be less than asset b",
      "stack_out": []
    },
    "400": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\""
      ],
      "stack_out": [
        "\"asset_a\""
      ]
    },
    "401": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"asset_a\"",
        "a_asset#0 (copy)"
      ]
    },
    "403": {
      "op": "app_global_put",
      "stack_out": []
    },
    "404": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\""
      ],
      "stack_out": [
        "\"asset_b\""
      ]
    },
    "405": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"asset_b\"",
        "b_asset#0 (copy)"
      ]
    },
    "407": {
      "op": "app_global_put",
      "stack_out": []
    },
    "408": {
      "op": "itxn_begin"
    },
    "409": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "410": {
      "op": "bytec_0 // \"asset_a\"",
      "stack_out": [
        "0",
        "\"asset_a\""
      ]
    },
    "411": {
      "op": "app_global_get_ex",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "412": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "413": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "415": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "416": {
      "op": "pushbytes 0x4450542d",
      "defined_out": [
        "0x4450542d",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "0x4450542d"
      ]
    },
    "422": {
      "op": "swap",
      "stack_out": [
        "0x4450542d",
        "value%0#0"
      ]
    },
    "423": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "424": {
      "op": "pushbytes 0x2d",
      "defined_out": [
        "0x2d",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0x2d"
      ]
    },
    "427": {
      "op": "concat",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "428": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#1",
        "b_asset#0 (copy)"
      ]
    },
    "430": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%1#0",
        "tmp%1#1",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%1#1",
        "value%1#0",
        "check%1#0"
      ]
    },
    "432": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "tmp%1#1",
        "value%1#0"
      ]
    },
    "433": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "434": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "436": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "437": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "439": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "441": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "3"
      ]
    },
    "443": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "445": {
      "op": "intc 4 // 10000000000",
      "defined_out": [
        "10000000000",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "10000000000"
      ]
    },
    "447": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "449": {
      "op": "pushbytes 0x646274",
      "defined_out": [
        "0x646274",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "0x646274"
      ]
    },
    "454": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "456": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "458": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "460": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "462": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "463": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "465": {
      "op": "itxn_submit"
    },
    "466": {
      "op": "bytec_2 // \"pool_token\"",
      "stack_out": [
        "\"pool_token\""
      ]
    },
    "467": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "\"pool_token\"",
        "tmp%2#1"
      ],
      "stack_out": [
        "\"pool_token\"",
        "tmp%2#1"
      ]
    },
    "469": {
      "op": "app_global_put",
      "stack_out": []
    },
    "470": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "471": {
      "op": "bytec_0 // \"asset_a\"",
      "stack_out": [
        "0",
        "\"asset_a\""
      ]
    },
    "472": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "asset#0",
        "maybe_exists%1#0"
      ]
    },
    "473": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "asset#0"
      ]
    },
    "474": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "asset#0",
        "tmp%0#2"
      ]
    },
    "476": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "asset#0"
      ]
    },
    "477": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "asset#0",
        "0"
      ]
    },
    "478": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": []
    },
    "481": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "482": {
      "op": "bytec_1 // \"asset_b\"",
      "stack_out": [
        "0",
        "\"asset_b\""
      ]
    },
    "483": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "asset#0",
        "maybe_exists%2#0"
      ]
    },
    "484": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "asset#0"
      ]
    },
    "485": {
      "op": "global CurrentApplicationAddress",
      "stack_out": [
        "asset#0",
        "tmp%0#2"
      ]
    },
    "487": {
      "op": "swap",
      "stack_out": [
        "tmp%0#2",
        "asset#0"
      ]
    },
    "488": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#2",
        "asset#0",
        "0"
      ]
    },
    "489": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": []
    },
    "492": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "493": {
      "op": "bytec_2 // \"pool_token\"",
      "stack_out": [
        "0",
        "\"pool_token\""
      ]
    },
    "494": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "495": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "496": {
      "retsub": true,
      "op": "retsub"
    },
    "497": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.mint",
      "params": {
        "a_xfer#0": "uint64",
        "b_xfer#0": "uint64",
        "pool_asset#0": "uint64",
        "a_asset#0": "uint64",
        "b_asset#0": "uint64"
      },
      "block": "mint",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "500": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "a_ratio#0"
      ]
    },
    "502": {
      "op": "dup",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0"
      ]
    },
    "503": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "0"
      ]
    },
    "504": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "0",
        "\"pool_token\""
      ]
    },
    "505": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#1",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "506": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%0#1"
      ]
    },
    "507": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)"
      ]
    },
    "508": {
      "error": "bootstrap method needs to be called first",
      "op": "assert // bootstrap method needs to be called first",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%0#1"
      ]
    },
    "509": {
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_value%0#1",
        "pool_asset#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%0#1",
        "pool_asset#0 (copy)"
      ]
    },
    "511": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%0#0"
      ]
    },
    "512": {
      "error": "asset pool incorrect",
      "op": "assert // asset pool incorrect",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0"
      ]
    },
    "513": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "0"
      ]
    },
    "514": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "0",
        "\"asset_a\""
      ]
    },
    "515": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "516": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0"
      ]
    },
    "517": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_asset#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "a_asset#0 (copy)"
      ]
    },
    "519": {
      "op": "dig 1",
      "defined_out": [
        "a_asset#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "a_asset#0 (copy)",
        "maybe_value%1#0 (copy)"
      ]
    },
    "521": {
      "op": "==",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "522": {
      "error": "asset a incorrect",
      "op": "assert // asset a incorrect",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0"
      ]
    },
    "523": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "524": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "0",
        "\"asset_b\""
      ]
    },
    "525": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "526": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "527": {
      "op": "frame_dig -1",
      "defined_out": [
        "b_asset#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "b_asset#0 (copy)"
      ]
    },
    "529": {
      "op": "dig 1",
      "defined_out": [
        "b_asset#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "b_asset#0 (copy)",
        "maybe_value%2#0 (copy)"
      ]
    },
    "531": {
      "op": "==",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%2#0"
      ]
    },
    "532": {
      "error": "asset b incorrect",
      "op": "assert // asset b incorrect",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "533": {
      "op": "frame_dig -5",
      "defined_out": [
        "a_xfer#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "a_xfer#0 (copy)"
      ]
    },
    "535": {
      "op": "gtxns Sender",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ]
    },
    "537": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "539": {
      "op": "==",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ]
    },
    "540": {
      "error": "sender invalid",
      "op": "assert // sender invalid",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "541": {
      "op": "frame_dig -4",
      "defined_out": [
        "b_xfer#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "b_xfer#0 (copy)"
      ]
    },
    "543": {
      "op": "gtxns Sender",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%6#0"
      ]
    },
    "545": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "547": {
      "op": "==",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%8#0"
      ]
    },
    "548": {
      "error": "sender invalid",
      "op": "assert // sender invalid",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "549": {
      "op": "frame_dig -5",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "a_xfer#0 (copy)"
      ]
    },
    "551": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%9#0"
      ]
    },
    "553": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "555": {
      "op": "==",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%11#0"
      ]
    },
    "556": {
      "error": "receiver not app address",
      "op": "assert // receiver not app address",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "557": {
      "op": "frame_dig -5",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "a_xfer#0 (copy)"
      ]
    },
    "559": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%12#0"
      ]
    },
    "561": {
      "op": "uncover 2",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%2#0",
        "tmp%12#0",
        "maybe_value%1#0"
      ]
    },
    "563": {
      "op": "==",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%2#0",
        "tmp%13#0"
      ]
    },
    "564": {
      "error": "asset a incorrect",
      "op": "assert // asset a incorrect",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%2#0"
      ]
    },
    "565": {
      "op": "frame_dig -5",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%2#0",
        "a_xfer#0 (copy)"
      ]
    },
    "567": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "a_amount#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%2#0",
        "a_amount#0"
      ]
    },
    "569": {
      "op": "dup",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "maybe_value%2#0",
        "a_amount#0",
        "a_amount#0"
      ]
    },
    "570": {
      "op": "cover 2",
      "defined_out": [
        "a_amount#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "maybe_value%2#0",
        "a_amount#0"
      ]
    },
    "572": {
      "op": "dup",
      "defined_out": [
        "a_amount#0",
        "a_amount#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "maybe_value%2#0",
        "a_amount#0",
        "a_amount#0 (copy)"
      ]
    },
    "573": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "maybe_value%2#0",
        "a_amount#0"
      ]
    },
    "574": {
      "op": "frame_dig -4",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "maybe_value%2#0",
        "a_amount#0",
        "b_xfer#0 (copy)"
      ]
    },
    "576": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "a_amount#0",
        "maybe_value%2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "maybe_value%2#0",
        "a_amount#0",
        "tmp%16#0"
      ]
    },
    "578": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "a_amount#0",
        "maybe_value%2#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "maybe_value%2#0",
        "a_amount#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "580": {
      "op": "==",
      "defined_out": [
        "a_amount#0",
        "maybe_value%2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "maybe_value%2#0",
        "a_amount#0",
        "tmp%18#0"
      ]
    },
    "581": {
      "error": "receiver not app address",
      "op": "assert // receiver not app address",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "maybe_value%2#0",
        "a_amount#0"
      ]
    },
    "582": {
      "op": "frame_dig -4",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "maybe_value%2#0",
        "a_amount#0",
        "b_xfer#0 (copy)"
      ]
    },
    "584": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "a_amount#0",
        "maybe_value%2#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "maybe_value%2#0",
        "a_amount#0",
        "tmp%19#0"
      ]
    },
    "586": {
      "op": "uncover 2",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "a_amount#0",
        "tmp%19#0",
        "maybe_value%2#0"
      ]
    },
    "588": {
      "op": "==",
      "defined_out": [
        "a_amount#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "a_amount#0",
        "tmp%20#0"
      ]
    },
    "589": {
      "error": "asset b incorrect",
      "op": "assert // asset b incorrect",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "a_amount#0"
      ]
    },
    "590": {
      "op": "frame_dig -4",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "a_amount#0",
        "b_xfer#0 (copy)"
      ]
    },
    "592": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "a_amount#0",
        "b_amount#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "a_amount#0",
        "b_amount#0"
      ]
    },
    "594": {
      "op": "dup",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "a_amount#0",
        "b_amount#0",
        "b_amount#0"
      ]
    },
    "595": {
      "op": "cover 2",
      "defined_out": [
        "a_amount#0",
        "b_amount#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "a_amount#0",
        "b_amount#0"
      ]
    },
    "597": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "a_amount#0"
      ]
    },
    "598": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_pool_balance",
      "op": "callsub _current_pool_balance",
      "defined_out": [
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "a_amount#0",
        "pool_balance#0"
      ]
    },
    "601": {
      "op": "swap",
      "defined_out": [
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_amount#0"
      ]
    },
    "602": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "b_amount#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_amount#0",
        "a_balance#0"
      ]
    },
    "605": {
      "op": "dup",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_amount#0",
        "a_balance#0",
        "a_balance#0"
      ]
    },
    "606": {
      "op": "cover 2",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "a_amount#0",
        "a_balance#0"
      ]
    },
    "608": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "b_amount#0",
        "b_balance#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "a_amount#0",
        "a_balance#0",
        "b_balance#0"
      ]
    },
    "611": {
      "op": "cover 2",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "a_amount#0",
        "a_balance#0"
      ]
    },
    "613": {
      "op": "==",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "tmp%0#0"
      ]
    },
    "614": {
      "op": "bz mint_bool_false@4",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0"
      ]
    },
    "617": {
      "op": "frame_dig 6",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "b_balance#0"
      ]
    },
    "619": {
      "op": "frame_dig 3",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "b_balance#0",
        "b_amount#0"
      ]
    },
    "621": {
      "op": "==",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "tmp%1#0"
      ]
    },
    "622": {
      "op": "bz mint_bool_false@4",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0"
      ]
    },
    "625": {
      "op": "intc_1 // 1",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "b_amount#0",
        "b_balance#0",
        "is_initial_mint#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "is_initial_mint#0"
      ]
    },
    "626": {
      "block": "mint_bool_merge@5",
      "stack_in": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "is_initial_mint#0"
      ],
      "op": "bz mint_after_if_else@7",
      "defined_out": [],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0"
      ]
    },
    "629": {
      "op": "frame_dig 2",
      "defined_out": [
        "a_amount#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "a_amount#0"
      ]
    },
    "631": {
      "op": "frame_dig 3",
      "defined_out": [
        "a_amount#0",
        "b_amount#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "a_amount#0",
        "b_amount#0"
      ]
    },
    "633": {
      "op": "*",
      "defined_out": [
        "a_amount#0",
        "b_amount#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "tmp%2#1"
      ]
    },
    "634": {
      "op": "sqrt",
      "defined_out": [
        "a_amount#0",
        "b_amount#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "tmp%3#1"
      ]
    },
    "635": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "a_amount#0",
        "b_amount#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "tmp%3#1",
        "1000"
      ]
    },
    "636": {
      "op": "-",
      "defined_out": [
        "a_amount#0",
        "b_amount#0",
        "to_mint#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "to_mint#0"
      ]
    },
    "637": {
      "block": "mint_after_inlined_examples.amm.contract.tokens_to_mint@10",
      "stack_in": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "to_mint#0"
      ],
      "op": "dup",
      "defined_out": [
        "to_mint#0",
        "to_mint#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "to_mint#0",
        "to_mint#0 (copy)"
      ]
    },
    "638": {
      "error": "send amount too low",
      "op": "assert // send amount too low",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "to_mint#0"
      ]
    },
    "639": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%30#0",
        "to_mint#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "to_mint#0",
        "tmp%30#0"
      ]
    },
    "641": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%30#0",
        "to_mint#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "to_mint#0",
        "tmp%30#0",
        "0"
      ]
    },
    "642": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0",
        "tmp%30#0",
        "to_mint#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "to_mint#0",
        "tmp%30#0",
        "0",
        "\"pool_token\""
      ]
    },
    "643": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%30#0",
        "to_mint#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "to_mint#0",
        "tmp%30#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "644": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "to_mint#0",
        "tmp%30#0",
        "maybe_value%5#0"
      ]
    },
    "645": {
      "op": "uncover 2",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "tmp%30#0",
        "maybe_value%5#0",
        "to_mint#0"
      ]
    },
    "647": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0"
      ]
    },
    "650": {
      "callsub": "examples.amm.contract.ConstantProductAMM._update_ratio",
      "op": "callsub _update_ratio"
    },
    "653": {
      "retsub": true,
      "op": "retsub"
    },
    "654": {
      "block": "mint_after_if_else@7",
      "stack_in": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0"
      ],
      "op": "intc 4 // 10000000000",
      "defined_out": [
        "10000000000"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "10000000000"
      ]
    },
    "656": {
      "op": "frame_dig 4",
      "defined_out": [
        "10000000000",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "10000000000",
        "pool_balance#0"
      ]
    },
    "658": {
      "op": "-",
      "defined_out": [
        "issued#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0"
      ]
    },
    "659": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "issued#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "1000"
      ]
    },
    "660": {
      "op": "frame_dig 2",
      "defined_out": [
        "1000",
        "a_amount#0",
        "issued#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "1000",
        "a_amount#0"
      ]
    },
    "662": {
      "op": "dup",
      "defined_out": [
        "1000",
        "a_amount#0",
        "a_amount#0 (copy)",
        "issued#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "1000",
        "a_amount#0 (copy)",
        "a_amount#0 (copy)"
      ]
    },
    "663": {
      "op": "cover 2",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_amount#0",
        "1000",
        "a_amount#0 (copy)"
      ]
    },
    "665": {
      "op": "*",
      "defined_out": [
        "a_amount#0",
        "issued#0",
        "pool_balance#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_amount#0",
        "tmp%6#1"
      ]
    },
    "666": {
      "op": "frame_dig 5",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "issued#0",
        "pool_balance#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_amount#0",
        "tmp%6#1",
        "a_balance#0"
      ]
    },
    "668": {
      "op": "uncover 2",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "tmp%6#1",
        "a_balance#0",
        "a_amount#0"
      ]
    },
    "670": {
      "op": "-",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "issued#0",
        "pool_balance#0",
        "tmp%6#1",
        "tmp%7#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "tmp%6#1",
        "tmp%7#1"
      ]
    },
    "671": {
      "op": "/",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "a_ratio#0",
        "issued#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0"
      ]
    },
    "672": {
      "op": "dup",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0",
        "a_ratio#0"
      ]
    },
    "673": {
      "op": "frame_bury 0",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "a_ratio#0",
        "issued#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0"
      ]
    },
    "675": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0",
        "1000"
      ]
    },
    "676": {
      "op": "frame_dig 3",
      "defined_out": [
        "1000",
        "a_amount#0",
        "a_balance#0",
        "a_ratio#0",
        "b_amount#0",
        "issued#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0",
        "1000",
        "b_amount#0"
      ]
    },
    "678": {
      "op": "dup",
      "defined_out": [
        "1000",
        "a_amount#0",
        "a_balance#0",
        "a_ratio#0",
        "b_amount#0",
        "b_amount#0 (copy)",
        "issued#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0",
        "1000",
        "b_amount#0 (copy)",
        "b_amount#0 (copy)"
      ]
    },
    "679": {
      "op": "cover 2",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0",
        "b_amount#0",
        "1000",
        "b_amount#0 (copy)"
      ]
    },
    "681": {
      "op": "*",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "a_ratio#0",
        "b_amount#0",
        "issued#0",
        "pool_balance#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0",
        "b_amount#0",
        "tmp%9#1"
      ]
    },
    "682": {
      "op": "frame_dig 6",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "a_ratio#0",
        "b_amount#0",
        "b_balance#0",
        "issued#0",
        "pool_balance#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0",
        "b_amount#0",
        "tmp%9#1",
        "b_balance#0"
      ]
    },
    "684": {
      "op": "uncover 2",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0",
        "tmp%9#1",
        "b_balance#0",
        "b_amount#0"
      ]
    },
    "686": {
      "op": "-",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "a_ratio#0",
        "b_amount#0",
        "b_balance#0",
        "issued#0",
        "pool_balance#0",
        "tmp%10#1",
        "tmp%9#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0",
        "tmp%9#1",
        "tmp%10#1"
      ]
    },
    "687": {
      "op": "/",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "a_ratio#0",
        "b_amount#0",
        "b_balance#0",
        "b_ratio#0",
        "issued#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0",
        "b_ratio#0"
      ]
    },
    "688": {
      "op": "dup",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0",
        "b_ratio#0",
        "b_ratio#0"
      ]
    },
    "689": {
      "op": "frame_bury 1",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "a_ratio#0",
        "b_amount#0",
        "b_balance#0",
        "b_ratio#0",
        "issued#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0",
        "b_ratio#0"
      ]
    },
    "691": {
      "op": "<",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "a_ratio#0",
        "b_amount#0",
        "b_balance#0",
        "b_ratio#0",
        "issued#0",
        "pool_balance#0",
        "tmp%12#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "tmp%12#1"
      ]
    },
    "692": {
      "op": "bz mint_else_body@9",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0"
      ]
    },
    "695": {
      "op": "frame_dig 0",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "a_ratio#0"
      ]
    },
    "697": {
      "op": "*",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "a_ratio#0",
        "b_amount#0",
        "b_balance#0",
        "b_ratio#0",
        "pool_balance#0",
        "tmp%13#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "tmp%13#1"
      ]
    },
    "698": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "tmp%13#1",
        "1000"
      ]
    },
    "699": {
      "op": "/",
      "defined_out": [
        "a_amount#0",
        "a_balance#0",
        "a_ratio#0",
        "b_amount#0",
        "b_balance#0",
        "b_ratio#0",
        "pool_balance#0",
        "to_mint#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "to_mint#0"
      ]
    },
    "700": {
      "op": "b mint_after_inlined_examples.amm.contract.tokens_to_mint@10"
    },
    "703": {
      "block": "mint_else_body@9",
      "stack_in": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "b_ratio#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "issued#0",
        "b_ratio#0"
      ]
    },
    "705": {
      "op": "*",
      "defined_out": [
        "b_ratio#0",
        "tmp%15#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "tmp%15#1"
      ]
    },
    "706": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "b_ratio#0",
        "tmp%15#1"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "tmp%15#1",
        "1000"
      ]
    },
    "707": {
      "op": "/",
      "defined_out": [
        "b_ratio#0",
        "to_mint#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "to_mint#0"
      ]
    },
    "708": {
      "op": "b mint_after_inlined_examples.amm.contract.tokens_to_mint@10"
    },
    "711": {
      "block": "mint_bool_false@4",
      "stack_in": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "is_initial_mint#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0",
        "b_amount#0",
        "pool_balance#0",
        "a_balance#0",
        "b_balance#0",
        "is_initial_mint#0"
      ]
    },
    "712": {
      "op": "b mint_bool_merge@5"
    },
    "715": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.burn",
      "params": {
        "pool_xfer#0": "uint64",
        "pool_asset#0": "uint64",
        "a_asset#0": "uint64",
        "b_asset#0": "uint64"
      },
      "block": "burn",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "718": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "719": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pool_token\""
      ]
    },
    "720": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#1",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_exists%0#1"
      ]
    },
    "721": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "722": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_value%0#1 (copy)"
      ]
    },
    "723": {
      "error": "bootstrap method needs to be called first",
      "op": "assert // bootstrap method needs to be called first",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "724": {
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_value%0#1",
        "pool_asset#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "pool_asset#0 (copy)"
      ]
    },
    "726": {
      "op": "dig 1",
      "stack_out": [
        "maybe_value%0#1",
        "pool_asset#0 (copy)",
        "maybe_value%0#1 (copy)"
      ]
    },
    "728": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "tmp%0#0"
      ]
    },
    "729": {
      "error": "asset pool incorrect",
      "op": "assert // asset pool incorrect",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "730": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#1",
        "0"
      ]
    },
    "731": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "0",
        "\"asset_a\""
      ]
    },
    "732": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "733": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "maybe_value%0#1",
        "maybe_value%1#0"
      ]
    },
    "734": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_asset#0 (copy)",
        "maybe_value%0#1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_value%1#0",
        "a_asset#0 (copy)"
      ]
    },
    "736": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "tmp%1#0"
      ]
    },
    "737": {
      "error": "asset a incorrect",
      "op": "assert // asset a incorrect",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "738": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#1",
        "0"
      ]
    },
    "739": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "0",
        "\"asset_b\""
      ]
    },
    "740": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "741": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "maybe_value%0#1",
        "maybe_value%2#0"
      ]
    },
    "742": {
      "op": "frame_dig -1",
      "defined_out": [
        "b_asset#0 (copy)",
        "maybe_value%0#1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_value%2#0",
        "b_asset#0 (copy)"
      ]
    },
    "744": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "tmp%2#0"
      ]
    },
    "745": {
      "error": "asset b incorrect",
      "op": "assert // asset b incorrect",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "746": {
      "op": "frame_dig -4",
      "defined_out": [
        "maybe_value%0#1",
        "pool_xfer#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "pool_xfer#0 (copy)"
      ]
    },
    "748": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "maybe_value%0#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "tmp%3#0"
      ]
    },
    "750": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "maybe_value%0#1",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "752": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "tmp%5#0"
      ]
    },
    "753": {
      "error": "receiver not app address",
      "op": "assert // receiver not app address",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "754": {
      "op": "frame_dig -4",
      "stack_out": [
        "maybe_value%0#1",
        "pool_xfer#0 (copy)"
      ]
    },
    "756": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "amount#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "amount#0"
      ]
    },
    "758": {
      "op": "dup",
      "defined_out": [
        "amount#0",
        "amount#0 (copy)",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "amount#0",
        "amount#0 (copy)"
      ]
    },
    "759": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": [
        "maybe_value%0#1",
        "amount#0"
      ]
    },
    "760": {
      "op": "frame_dig -4",
      "stack_out": [
        "maybe_value%0#1",
        "amount#0",
        "pool_xfer#0 (copy)"
      ]
    },
    "762": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "amount#0",
        "maybe_value%0#1",
        "tmp%8#0"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "amount#0",
        "tmp%8#0"
      ]
    },
    "764": {
      "op": "uncover 2",
      "stack_out": [
        "amount#0",
        "tmp%8#0",
        "maybe_value%0#1"
      ]
    },
    "766": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "amount#0",
        "tmp%9#0"
      ]
    },
    "767": {
      "error": "asset pool incorrect",
      "op": "assert // asset pool incorrect",
      "stack_out": [
        "amount#0"
      ]
    },
    "768": {
      "op": "frame_dig -4",
      "stack_out": [
        "amount#0",
        "pool_xfer#0 (copy)"
      ]
    },
    "770": {
      "op": "gtxns Sender",
      "defined_out": [
        "amount#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "amount#0",
        "tmp%10#0"
      ]
    },
    "772": {
      "op": "txn Sender",
      "defined_out": [
        "amount#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "amount#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "774": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "amount#0",
        "tmp%12#0"
      ]
    },
    "775": {
      "error": "sender invalid",
      "op": "assert // sender invalid",
      "stack_out": [
        "amount#0"
      ]
    },
    "776": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_pool_balance",
      "op": "callsub _current_pool_balance",
      "defined_out": [
        "amount#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "amount#0",
        "pool_balance#0"
      ]
    },
    "779": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "amount#0",
        "pool_balance#0",
        "supply#0"
      ],
      "stack_out": [
        "amount#0",
        "pool_balance#0",
        "supply#0"
      ]
    },
    "782": {
      "op": "intc 4 // 10000000000",
      "defined_out": [
        "10000000000",
        "amount#0",
        "pool_balance#0",
        "supply#0"
      ],
      "stack_out": [
        "amount#0",
        "pool_balance#0",
        "supply#0",
        "10000000000"
      ]
    },
    "784": {
      "op": "uncover 2",
      "stack_out": [
        "amount#0",
        "supply#0",
        "10000000000",
        "pool_balance#0"
      ]
    },
    "786": {
      "op": "-",
      "defined_out": [
        "amount#0",
        "supply#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "amount#0",
        "supply#0",
        "tmp%0#1"
      ]
    },
    "787": {
      "op": "dig 2",
      "stack_out": [
        "amount#0",
        "supply#0",
        "tmp%0#1",
        "amount#0 (copy)"
      ]
    },
    "789": {
      "op": "-",
      "defined_out": [
        "amount#0",
        "issued#0",
        "supply#0"
      ],
      "stack_out": [
        "amount#0",
        "supply#0",
        "issued#0"
      ]
    },
    "790": {
      "op": "swap",
      "stack_out": [
        "amount#0",
        "issued#0",
        "supply#0"
      ]
    },
    "791": {
      "op": "dig 2",
      "stack_out": [
        "amount#0",
        "issued#0",
        "supply#0",
        "amount#0 (copy)"
      ]
    },
    "793": {
      "op": "*",
      "defined_out": [
        "amount#0",
        "issued#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "amount#0",
        "issued#0",
        "tmp%2#1"
      ]
    },
    "794": {
      "op": "dig 1",
      "defined_out": [
        "amount#0",
        "issued#0",
        "issued#0 (copy)",
        "tmp%2#1"
      ],
      "stack_out": [
        "amount#0",
        "issued#0",
        "tmp%2#1",
        "issued#0 (copy)"
      ]
    },
    "796": {
      "op": "/",
      "defined_out": [
        "a_amt#0",
        "amount#0",
        "issued#0"
      ],
      "stack_out": [
        "amount#0",
        "issued#0",
        "a_amt#0"
      ]
    },
    "797": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "stack_out": [
        "amount#0",
        "issued#0",
        "a_amt#0",
        "supply#0"
      ]
    },
    "800": {
      "op": "uncover 3",
      "stack_out": [
        "issued#0",
        "a_amt#0",
        "supply#0",
        "amount#0"
      ]
    },
    "802": {
      "op": "*",
      "stack_out": [
        "issued#0",
        "a_amt#0",
        "tmp%2#1"
      ]
    },
    "803": {
      "op": "uncover 2",
      "stack_out": [
        "a_amt#0",
        "tmp%2#1",
        "issued#0"
      ]
    },
    "805": {
      "op": "/",
      "defined_out": [
        "a_amt#0",
        "b_amt#0"
      ],
      "stack_out": [
        "a_amt#0",
        "b_amt#0"
      ]
    },
    "806": {
      "op": "txn Sender",
      "defined_out": [
        "a_amt#0",
        "b_amt#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "a_amt#0",
        "b_amt#0",
        "tmp%20#0"
      ]
    },
    "808": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a_amt#0",
        "b_amt#0",
        "tmp%20#0",
        "0"
      ]
    },
    "809": {
      "op": "bytec_0 // \"asset_a\"",
      "stack_out": [
        "a_amt#0",
        "b_amt#0",
        "tmp%20#0",
        "0",
        "\"asset_a\""
      ]
    },
    "810": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a_amt#0",
        "b_amt#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "a_amt#0",
        "b_amt#0",
        "tmp%20#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "811": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "a_amt#0",
        "b_amt#0",
        "tmp%20#0",
        "maybe_value%4#0"
      ]
    },
    "812": {
      "op": "uncover 3",
      "stack_out": [
        "b_amt#0",
        "tmp%20#0",
        "maybe_value%4#0",
        "a_amt#0"
      ]
    },
    "814": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": [
        "b_amt#0"
      ]
    },
    "817": {
      "op": "txn Sender",
      "defined_out": [
        "b_amt#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "b_amt#0",
        "tmp%21#0"
      ]
    },
    "819": {
      "op": "intc_0 // 0",
      "stack_out": [
        "b_amt#0",
        "tmp%21#0",
        "0"
      ]
    },
    "820": {
      "op": "bytec_1 // \"asset_b\"",
      "stack_out": [
        "b_amt#0",
        "tmp%21#0",
        "0",
        "\"asset_b\""
      ]
    },
    "821": {
      "op": "app_global_get_ex",
      "defined_out": [
        "b_amt#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "b_amt#0",
        "tmp%21#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "822": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "b_amt#0",
        "tmp%21#0",
        "maybe_value%5#0"
      ]
    },
    "823": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%21#0",
        "maybe_value%5#0",
        "b_amt#0"
      ]
    },
    "825": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": []
    },
    "828": {
      "callsub": "examples.amm.contract.ConstantProductAMM._update_ratio",
      "op": "callsub _update_ratio"
    },
    "831": {
      "retsub": true,
      "op": "retsub"
    },
    "832": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.swap",
      "params": {
        "swap_xfer#0": "uint64",
        "a_asset#0": "uint64",
        "b_asset#0": "uint64"
      },
      "block": "swap",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "835": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "in_supply#0"
      ]
    },
    "837": {
      "op": "dup",
      "stack_out": [
        "in_supply#0",
        "out_asset#0"
      ]
    },
    "838": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "0"
      ]
    },
    "839": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "0",
        "\"pool_token\""
      ]
    },
    "840": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "841": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0"
      ]
    },
    "842": {
      "error": "bootstrap method needs to be called first",
      "op": "assert // bootstrap method needs to be called first",
      "stack_out": [
        "in_supply#0",
        "out_asset#0"
      ]
    },
    "843": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "0"
      ]
    },
    "844": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "0",
        "\"asset_a\""
      ]
    },
    "845": {
      "op": "app_global_get_ex",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "846": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0"
      ]
    },
    "847": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_asset#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "a_asset#0 (copy)"
      ]
    },
    "849": {
      "op": "dig 1",
      "defined_out": [
        "a_asset#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "a_asset#0 (copy)",
        "maybe_value%0#0 (copy)"
      ]
    },
    "851": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "852": {
      "error": "asset a incorrect",
      "op": "assert // asset a incorrect",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0"
      ]
    },
    "853": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "854": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "0",
        "\"asset_b\""
      ]
    },
    "855": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "856": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "857": {
      "op": "frame_dig -1",
      "defined_out": [
        "b_asset#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "b_asset#0 (copy)"
      ]
    },
    "859": {
      "op": "dig 1",
      "defined_out": [
        "b_asset#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "b_asset#0 (copy)",
        "maybe_value%1#0 (copy)"
      ]
    },
    "861": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "862": {
      "error": "asset b incorrect",
      "op": "assert // asset b incorrect",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "863": {
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "swap_xfer#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "swap_xfer#0 (copy)"
      ]
    },
    "865": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "in_amount#0"
      ]
    },
    "867": {
      "op": "dup",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "in_amount#0",
        "in_amount#0"
      ]
    },
    "868": {
      "op": "cover 3",
      "defined_out": [
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "in_amount#0"
      ]
    },
    "870": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "871": {
      "op": "frame_dig -3",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "swap_xfer#0 (copy)"
      ]
    },
    "873": {
      "op": "gtxns Sender",
      "defined_out": [
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ]
    },
    "875": {
      "op": "txn Sender",
      "defined_out": [
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "877": {
      "op": "==",
      "defined_out": [
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%6#0"
      ]
    },
    "878": {
      "error": "sender invalid",
      "op": "assert // sender invalid",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "879": {
      "op": "frame_dig -3",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "swap_xfer#0 (copy)"
      ]
    },
    "881": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ]
    },
    "883": {
      "op": "match swap_switch_case_0@1 swap_switch_case_1@2",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0"
      ]
    },
    "889": {
      "error": "asset id incorrect",
      "op": "err // asset id incorrect"
    },
    "890": {
      "block": "swap_switch_case_1@2",
      "stack_in": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0"
      ],
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "in_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "in_supply#0"
      ]
    },
    "893": {
      "op": "frame_bury 0",
      "defined_out": [
        "in_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0"
      ]
    },
    "895": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "in_supply#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0"
      ]
    },
    "898": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "0"
      ]
    },
    "899": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0",
        "in_supply#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "0",
        "\"asset_b\""
      ]
    },
    "900": {
      "op": "app_global_get_ex",
      "defined_out": [
        "in_supply#0",
        "maybe_exists%5#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "out_asset#0",
        "maybe_exists%5#0"
      ]
    },
    "901": {
      "op": "swap",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "maybe_exists%5#0",
        "out_asset#0"
      ]
    },
    "902": {
      "op": "frame_bury 1",
      "defined_out": [
        "in_supply#0",
        "maybe_exists%5#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "maybe_exists%5#0"
      ]
    },
    "904": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0"
      ]
    },
    "905": {
      "block": "swap_switch_case_next@4",
      "stack_in": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "in_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "in_supply#0"
      ]
    },
    "907": {
      "op": "frame_dig 2",
      "defined_out": [
        "in_amount#0",
        "in_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "in_supply#0",
        "in_amount#0"
      ]
    },
    "909": {
      "op": "dup",
      "defined_out": [
        "in_amount#0",
        "in_amount#0 (copy)",
        "in_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "in_supply#0",
        "in_amount#0 (copy)",
        "in_amount#0 (copy)"
      ]
    },
    "910": {
      "op": "cover 2",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "in_amount#0",
        "in_supply#0",
        "in_amount#0 (copy)"
      ]
    },
    "912": {
      "op": "-",
      "defined_out": [
        "in_amount#0",
        "in_supply#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "in_amount#0",
        "tmp%0#1"
      ]
    },
    "913": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "in_amount#0",
        "in_supply#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "in_amount#0",
        "tmp%0#1",
        "1000"
      ]
    },
    "914": {
      "op": "*",
      "defined_out": [
        "in_amount#0",
        "in_supply#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "in_amount#0",
        "tmp%1#1"
      ]
    },
    "915": {
      "op": "swap",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "tmp%1#1",
        "in_amount#0"
      ]
    },
    "916": {
      "op": "pushint 995 // 995",
      "defined_out": [
        "995",
        "in_amount#0",
        "in_supply#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "tmp%1#1",
        "in_amount#0",
        "995"
      ]
    },
    "919": {
      "op": "*",
      "defined_out": [
        "in_amount#0",
        "in_supply#0",
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "tmp%1#1",
        "tmp%2#1"
      ]
    },
    "920": {
      "op": "swap",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "tmp%2#1",
        "tmp%1#1"
      ]
    },
    "921": {
      "op": "dig 1",
      "defined_out": [
        "in_amount#0",
        "in_supply#0",
        "tmp%1#1",
        "tmp%2#1",
        "tmp%2#1 (copy)"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "tmp%2#1",
        "tmp%1#1",
        "tmp%2#1 (copy)"
      ]
    },
    "923": {
      "op": "+",
      "defined_out": [
        "in_amount#0",
        "in_supply#0",
        "in_total#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "tmp%2#1",
        "in_total#0"
      ]
    },
    "924": {
      "op": "swap",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "in_total#0",
        "tmp%2#1"
      ]
    },
    "925": {
      "op": "uncover 2",
      "defined_out": [
        "in_amount#0",
        "in_supply#0",
        "in_total#0",
        "out_supply#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "in_total#0",
        "tmp%2#1",
        "out_supply#0"
      ]
    },
    "927": {
      "op": "*",
      "defined_out": [
        "in_amount#0",
        "in_supply#0",
        "in_total#0",
        "out_total#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "in_total#0",
        "out_total#0"
      ]
    },
    "928": {
      "op": "swap",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_total#0",
        "in_total#0"
      ]
    },
    "929": {
      "op": "/",
      "defined_out": [
        "in_amount#0",
        "in_supply#0",
        "to_swap#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "to_swap#0"
      ]
    },
    "930": {
      "op": "dup",
      "defined_out": [
        "in_amount#0",
        "in_supply#0",
        "to_swap#0",
        "to_swap#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "to_swap#0",
        "to_swap#0 (copy)"
      ]
    },
    "931": {
      "error": "send amount too low",
      "op": "assert // send amount too low",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "to_swap#0"
      ]
    },
    "932": {
      "op": "txn Sender",
      "defined_out": [
        "in_amount#0",
        "in_supply#0",
        "tmp%15#0",
        "to_swap#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "to_swap#0",
        "tmp%15#0"
      ]
    },
    "934": {
      "op": "frame_dig 1",
      "defined_out": [
        "in_amount#0",
        "in_supply#0",
        "out_asset#0",
        "tmp%15#0",
        "to_swap#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "to_swap#0",
        "tmp%15#0",
        "out_asset#0"
      ]
    },
    "936": {
      "op": "uncover 2",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "tmp%15#0",
        "out_asset#0",
        "to_swap#0"
      ]
    },
    "938": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0"
      ]
    },
    "941": {
      "callsub": "examples.amm.contract.ConstantProductAMM._update_ratio",
      "op": "callsub _update_ratio"
    },
    "944": {
      "retsub": true,
      "op": "retsub"
    },
    "945": {
      "block": "swap_switch_case_0@1",
      "stack_in": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0"
      ],
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "in_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "in_supply#0"
      ]
    },
    "948": {
      "op": "frame_bury 0",
      "defined_out": [
        "in_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0"
      ]
    },
    "950": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "in_supply#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0"
      ]
    },
    "953": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "0"
      ]
    },
    "954": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0",
        "in_supply#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "0",
        "\"asset_a\""
      ]
    },
    "955": {
      "op": "app_global_get_ex",
      "defined_out": [
        "in_supply#0",
        "maybe_exists%4#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "out_asset#0",
        "maybe_exists%4#0"
      ]
    },
    "956": {
      "op": "swap",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "maybe_exists%4#0",
        "out_asset#0"
      ]
    },
    "957": {
      "op": "frame_bury 1",
      "defined_out": [
        "in_supply#0",
        "maybe_exists%4#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0",
        "maybe_exists%4#0"
      ]
    },
    "959": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_amount#0",
        "out_supply#0"
      ]
    },
    "960": {
      "op": "b swap_switch_case_next@4"
    },
    "963": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._update_ratio",
      "params": {},
      "block": "_update_ratio",
      "stack_in": [],
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "a_balance#0"
      ],
      "stack_out": [
        "a_balance#0"
      ]
    },
    "966": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "a_balance#0",
        "b_balance#0"
      ],
      "stack_out": [
        "a_balance#0",
        "b_balance#0"
      ]
    },
    "969": {
      "op": "swap",
      "stack_out": [
        "b_balance#0",
        "a_balance#0"
      ]
    },
    "970": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "a_balance#0",
        "b_balance#0"
      ],
      "stack_out": [
        "b_balance#0",
        "a_balance#0",
        "1000"
      ]
    },
    "971": {
      "op": "*",
      "defined_out": [
        "b_balance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "b_balance#0",
        "tmp%2#0"
      ]
    },
    "972": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "b_balance#0"
      ]
    },
    "973": {
      "op": "/",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "974": {
      "op": "bytec 4 // \"ratio\"",
      "defined_out": [
        "\"ratio\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"ratio\""
      ]
    },
    "976": {
      "op": "swap",
      "stack_out": [
        "\"ratio\"",
        "tmp%3#0"
      ]
    },
    "977": {
      "op": "app_global_put",
      "stack_out": []
    },
    "978": {
      "retsub": true,
      "op": "retsub"
    },
    "979": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._check_is_governor",
      "params": {},
      "block": "_check_is_governor",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "981": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "982": {
      "op": "bytec_3 // \"governor\"",
      "defined_out": [
        "\"governor\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"governor\""
      ]
    },
    "983": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "984": {
      "error": "check self.governor exists",
      "op": "assert // check self.governor exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "985": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "986": {
      "error": "Only the account set in global_state.governor may call this method",
      "op": "assert // Only the account set in global_state.governor may call this method",
      "stack_out": []
    },
    "987": {
      "retsub": true,
      "op": "retsub"
    },
    "988": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._current_pool_balance",
      "params": {},
      "block": "_current_pool_balance",
      "stack_in": [],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "990": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "991": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"pool_token\""
      ]
    },
    "992": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "993": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "994": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "996": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "997": {
      "retsub": true,
      "op": "retsub"
    },
    "998": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "params": {},
      "block": "_current_a_balance",
      "stack_in": [],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1000": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1001": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"asset_a\""
      ]
    },
    "1002": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1003": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1004": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1006": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1007": {
      "retsub": true,
      "op": "retsub"
    },
    "1008": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "params": {},
      "block": "_current_b_balance",
      "stack_in": [],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1010": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1011": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"asset_b\""
      ]
    },
    "1012": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1013": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1014": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1016": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1017": {
      "retsub": true,
      "op": "retsub"
    }
  }
}