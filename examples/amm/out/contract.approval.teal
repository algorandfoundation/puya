#pragma version 8

// examples.amm.contract.ConstantProductAMM.approval_program() -> uint64:
main_block@0:
        txn ApplicationID
        bnz main_entrypoint@2

main_on_create@1:
        callsub __init__

main_entrypoint@2:
        txn NumAppArgs
        bz main_bare_routing@11

main_abi_routing@3:
        txna ApplicationArgs 0
        method "set_governor(account)void"
        method "bootstrap(pay,asset,asset)uint64"
        method "mint(axfer,axfer,asset,asset,asset)void"
        method "burn(axfer,asset,asset,asset)void"
        method "swap(axfer,asset,asset)void"
        uncover 5
        match main_set_governor_route@4 main_bootstrap_route@5 main_mint_route@6 main_burn_route@7 main_swap_route@8
        b main_switch_case_default@9

main_set_governor_route@4:
        txn OnCompletion
        !
        assert // OnCompletion is NoOp
        txn ApplicationID
        assert // is not creating
        txna ApplicationArgs 1
        btoi
        txnas Accounts
        callsub set_governor
        int 1
        return

main_bootstrap_route@5:
        txn OnCompletion
        !
        assert // OnCompletion is NoOp
        txn ApplicationID
        assert // is not creating
        txn GroupIndex
        int 1
        -
        dup
        gtxns TypeEnum
        int pay
        ==
        assert // transaction type is pay
        txna ApplicationArgs 1
        btoi
        txnas Assets
        txna ApplicationArgs 2
        btoi
        txnas Assets
        callsub bootstrap
        byte 0x151f7c75
        swap
        concat
        log
        int 1
        return

main_mint_route@6:
        txn OnCompletion
        !
        assert // OnCompletion is NoOp
        txn ApplicationID
        assert // is not creating
        txn GroupIndex
        int 2
        -
        dup
        gtxns TypeEnum
        int axfer
        ==
        assert // transaction type is axfer
        txn GroupIndex
        int 1
        -
        dup
        gtxns TypeEnum
        int axfer
        ==
        assert // transaction type is axfer
        txna ApplicationArgs 1
        btoi
        txnas Assets
        txna ApplicationArgs 2
        btoi
        txnas Assets
        txna ApplicationArgs 3
        btoi
        txnas Assets
        callsub mint
        int 1
        return

main_burn_route@7:
        txn OnCompletion
        !
        assert // OnCompletion is NoOp
        txn ApplicationID
        assert // is not creating
        txn GroupIndex
        int 1
        -
        dup
        gtxns TypeEnum
        int axfer
        ==
        assert // transaction type is axfer
        txna ApplicationArgs 1
        btoi
        txnas Assets
        txna ApplicationArgs 2
        btoi
        txnas Assets
        txna ApplicationArgs 3
        btoi
        txnas Assets
        callsub burn
        int 1
        return

main_swap_route@8:
        txn OnCompletion
        !
        assert // OnCompletion is NoOp
        txn ApplicationID
        assert // is not creating
        txn GroupIndex
        int 1
        -
        dup
        gtxns TypeEnum
        int axfer
        ==
        assert // transaction type is axfer
        txna ApplicationArgs 1
        btoi
        txnas Assets
        txna ApplicationArgs 2
        btoi
        txnas Assets
        callsub swap
        int 1
        return

main_switch_case_default@9:
        err // reject transaction

main_bare_routing@11:
        txn OnCompletion
        bnz main_reject_bare_on_completion@13

main_create@12:
        txn ApplicationID
        !
        assert // is creating
        int 1
        return

main_reject_bare_on_completion@13:
        err // reject transaction


// examples.amm.contract.ConstantProductAMM.set_governor(new_governor#0: bytes) -> void:
set_governor:
        proto 1 0

set_governor_block@0:
        callsub _check_is_governor
        byte "governor"
        frame_dig -1
        app_global_put
        retsub


// examples.amm.contract.ConstantProductAMM._check_is_governor() -> void:
_check_is_governor:
        proto 0 0

_check_is_governor_block@0:
        txn Sender
        int 0
        byte "governor"
        app_global_get_ex
        assert // check value exists
        ==
        assert // Only the account set in global_state.governor may call this method
        retsub


// examples.amm.contract.ConstantProductAMM.bootstrap(seed#0: uint64, a_asset#0: uint64, b_asset#0: uint64) -> bytes:
bootstrap:
        proto 3 1

bootstrap_block@0:
        int 0
        byte "pool_token"
        app_global_get_ex
        assert // check value exists
        !
        assert // application has already been bootstrapped
        callsub _check_is_governor
        global GroupSize
        int 2
        ==
        assert // group size not 2
        frame_dig -3
        gtxns Receiver
        global CurrentApplicationAddress
        ==
        assert // receiver not app address
        frame_dig -3
        gtxns Amount
        int 300000
        >=
        assert // amount minimum not met
        frame_dig -2
        frame_dig -1
        <
        assert // asset a must be less than asset b
        byte "asset_a"
        frame_dig -2
        app_global_put
        byte "asset_b"
        frame_dig -1
        app_global_put
        callsub _create_pool_token
        byte "pool_token"
        swap
        app_global_put
        int 0
        byte "asset_a"
        app_global_get_ex
        assert // check value exists
        callsub _do_opt_in
        int 0
        byte "asset_b"
        app_global_get_ex
        assert // check value exists
        callsub _do_opt_in
        int 0
        byte "pool_token"
        app_global_get_ex
        assert // check value exists
        itob
        retsub


// examples.amm.contract.ConstantProductAMM._create_pool_token() -> uint64:
_create_pool_token:
        proto 0 1

_create_pool_token_block@0:
        itxn_begin
        int acfg
        itxn_field TypeEnum
        int 0
        byte "asset_a"
        app_global_get_ex
        assert // check value exists
        asset_params_get AssetUnitName
        assert // asset exists
        byte "DPT-"
        swap
        concat
        byte "-"
        concat
        int 0
        byte "asset_b"
        app_global_get_ex
        assert // check value exists
        asset_params_get AssetUnitName
        assert // asset exists
        concat
        itxn_field ConfigAssetName
        byte "dpt"
        itxn_field ConfigAssetUnitName
        int 10000000000
        itxn_field ConfigAssetTotal
        int 3
        itxn_field ConfigAssetDecimals
        global CurrentApplicationAddress
        itxn_field ConfigAssetManager
        global CurrentApplicationAddress
        itxn_field ConfigAssetReserve
        int 0
        itxn_field Fee
        itxn_submit
        itxn CreatedAssetID
        retsub


// examples.amm.contract.ConstantProductAMM._do_opt_in(asset#0: uint64) -> void:
_do_opt_in:
        proto 1 0

_do_opt_in_block@0:
        global CurrentApplicationAddress
        frame_dig -1
        int 0
        callsub do_asset_transfer
        retsub


// examples.amm.contract.do_asset_transfer(receiver#0: bytes, asset#0: uint64, amount#0: uint64) -> void:
do_asset_transfer:
        proto 3 0

do_asset_transfer_block@0:
        itxn_begin
        int axfer
        itxn_field TypeEnum
        frame_dig -2
        itxn_field XferAsset
        frame_dig -1
        itxn_field AssetAmount
        frame_dig -3
        itxn_field AssetReceiver
        int 0
        itxn_field Fee
        itxn_submit
        retsub


// examples.amm.contract.ConstantProductAMM.mint(a_xfer#0: uint64, b_xfer#0: uint64, pool_asset#0: uint64, a_asset#0: uint64, b_asset#0: uint64) -> void:
mint:
        proto 5 0

mint_block@0:
        callsub _check_bootstrapped
        int 0
        byte "pool_token"
        app_global_get_ex
        assert // check value exists
        frame_dig -3
        ==
        assert // asset pool incorrect
        int 0
        byte "asset_a"
        app_global_get_ex
        assert // check value exists
        frame_dig -2
        ==
        assert // asset a incorrect
        int 0
        byte "asset_b"
        app_global_get_ex
        assert // check value exists
        frame_dig -1
        ==
        assert // asset b incorrect
        frame_dig -5
        gtxns Sender
        txn Sender
        ==
        assert // sender invalid
        frame_dig -4
        gtxns Sender
        txn Sender
        ==
        assert // sender invalid
        frame_dig -5
        gtxns AssetReceiver
        global CurrentApplicationAddress
        ==
        assert // receiver not app address
        frame_dig -5
        gtxns XferAsset
        int 0
        byte "asset_a"
        app_global_get_ex
        assert // check value exists
        ==
        assert // asset a incorrect
        frame_dig -5
        gtxns AssetAmount
        int 0
        >
        assert // amount minimum not met
        frame_dig -4
        gtxns AssetReceiver
        global CurrentApplicationAddress
        ==
        assert // receiver not app address
        frame_dig -4
        gtxns XferAsset
        int 0
        byte "asset_b"
        app_global_get_ex
        assert // check value exists
        ==
        assert // asset b incorrect
        frame_dig -4
        gtxns AssetAmount
        int 0
        >
        assert // amount minimum not met
        callsub _current_pool_balance
        callsub _current_a_balance
        callsub _current_b_balance
        frame_dig -5
        gtxns AssetAmount
        frame_dig -4
        gtxns AssetAmount
        callsub tokens_to_mint
        dup
        int 0
        >
        assert // send amount too low
        txn Sender
        int 0
        byte "pool_token"
        app_global_get_ex
        assert // check value exists
        uncover 2
        callsub do_asset_transfer
        callsub _update_ratio
        retsub


// examples.amm.contract.ConstantProductAMM._check_bootstrapped() -> void:
_check_bootstrapped:
        proto 0 0

_check_bootstrapped_block@0:
        int 0
        byte "pool_token"
        app_global_get_ex
        assert // check value exists
        assert // bootstrap method needs to be called first
        retsub


// examples.amm.contract.ConstantProductAMM._current_pool_balance() -> uint64:
_current_pool_balance:
        proto 0 1

_current_pool_balance_block@0:
        global CurrentApplicationAddress
        int 0
        byte "pool_token"
        app_global_get_ex
        assert // check value exists
        asset_holding_get AssetBalance
        assert // account opted into asset
        retsub


// examples.amm.contract.ConstantProductAMM._current_a_balance() -> uint64:
_current_a_balance:
        proto 0 1

_current_a_balance_block@0:
        global CurrentApplicationAddress
        int 0
        byte "asset_a"
        app_global_get_ex
        assert // check value exists
        asset_holding_get AssetBalance
        assert // account opted into asset
        retsub


// examples.amm.contract.ConstantProductAMM._current_b_balance() -> uint64:
_current_b_balance:
        proto 0 1

_current_b_balance_block@0:
        global CurrentApplicationAddress
        int 0
        byte "asset_b"
        app_global_get_ex
        assert // check value exists
        asset_holding_get AssetBalance
        assert // account opted into asset
        retsub


// examples.amm.contract.tokens_to_mint(pool_balance#0: uint64, a_balance#0: uint64, b_balance#0: uint64, a_amount#0: uint64, b_amount#0: uint64) -> uint64:
tokens_to_mint:
        proto 5 1
        byte ""
        dup

tokens_to_mint_block@0:
        frame_dig -4
        frame_dig -2
        ==
        bz tokens_to_mint_bool_false@3

tokens_to_mint_and_contd@1:
        frame_dig -3
        frame_dig -1
        ==
        bz tokens_to_mint_bool_false@3

tokens_to_mint_bool_true@2:
        int 1
        b tokens_to_mint_bool_merge@4

tokens_to_mint_bool_false@3:
        int 0

tokens_to_mint_bool_merge@4:
        bz tokens_to_mint_after_if_else@6

tokens_to_mint_if_body@5:
        frame_dig -2
        frame_dig -1
        *
        sqrt
        int 1000
        -
        frame_bury 0
        retsub

tokens_to_mint_after_if_else@6:
        int 10000000000
        frame_dig -5
        -
        int 1000
        frame_dig -2
        *
        frame_dig -4
        frame_dig -2
        -
        /
        dup
        frame_bury 0
        int 1000
        frame_dig -1
        *
        frame_dig -3
        frame_dig -1
        -
        /
        dup
        frame_bury 1
        <
        bz tokens_to_mint_else_body@8

tokens_to_mint_if_body@7:
        frame_dig 0
        *
        int 1000
        /
        frame_bury 0
        retsub

tokens_to_mint_else_body@8:
        frame_dig 1
        *
        int 1000
        /
        frame_bury 0
        retsub


// examples.amm.contract.ConstantProductAMM._update_ratio() -> void:
_update_ratio:
        proto 0 0

_update_ratio_block@0:
        callsub _current_a_balance
        callsub _current_b_balance
        swap
        int 1000
        *
        swap
        /
        byte "ratio"
        swap
        app_global_put
        retsub


// examples.amm.contract.ConstantProductAMM.burn(pool_xfer#0: uint64, pool_asset#0: uint64, a_asset#0: uint64, b_asset#0: uint64) -> void:
burn:
        proto 4 0

burn_block@0:
        callsub _check_bootstrapped
        int 0
        byte "pool_token"
        app_global_get_ex
        assert // check value exists
        frame_dig -3
        ==
        assert // asset pool incorrect
        int 0
        byte "asset_a"
        app_global_get_ex
        assert // check value exists
        frame_dig -2
        ==
        assert // asset a incorrect
        int 0
        byte "asset_b"
        app_global_get_ex
        assert // check value exists
        frame_dig -1
        ==
        assert // asset b incorrect
        frame_dig -4
        gtxns AssetReceiver
        global CurrentApplicationAddress
        ==
        assert // receiver not app address
        frame_dig -4
        gtxns AssetAmount
        int 0
        >
        assert // amount minimum not met
        frame_dig -4
        gtxns XferAsset
        int 0
        byte "pool_token"
        app_global_get_ex
        assert // check value exists
        ==
        assert // asset pool incorrect
        frame_dig -4
        gtxns Sender
        txn Sender
        ==
        assert // sender invalid
        callsub _current_pool_balance
        callsub _current_a_balance
        frame_dig -4
        gtxns AssetAmount
        dig 2
        cover 2
        callsub tokens_to_burn
        swap
        callsub _current_b_balance
        frame_dig -4
        gtxns AssetAmount
        callsub tokens_to_burn
        swap
        txn Sender
        int 0
        byte "asset_a"
        app_global_get_ex
        assert // check value exists
        uncover 2
        callsub do_asset_transfer
        txn Sender
        int 0
        byte "asset_b"
        app_global_get_ex
        assert // check value exists
        uncover 2
        callsub do_asset_transfer
        callsub _update_ratio
        retsub


// examples.amm.contract.tokens_to_burn(pool_balance#0: uint64, supply#0: uint64, amount#0: uint64) -> uint64:
tokens_to_burn:
        proto 3 1

tokens_to_burn_block@0:
        int 10000000000
        frame_dig -3
        -
        frame_dig -1
        -
        frame_dig -2
        frame_dig -1
        *
        swap
        /
        retsub


// examples.amm.contract.ConstantProductAMM.swap(swap_xfer#0: uint64, a_asset#0: uint64, b_asset#0: uint64) -> void:
swap:
        proto 3 0
        byte ""
        dup

swap_block@0:
        callsub _check_bootstrapped
        int 0
        byte "asset_a"
        app_global_get_ex
        assert // check value exists
        frame_dig -2
        ==
        assert // asset a incorrect
        int 0
        byte "asset_b"
        app_global_get_ex
        assert // check value exists
        frame_dig -1
        ==
        assert // asset b incorrect
        frame_dig -3
        gtxns AssetAmount
        int 0
        >
        assert // amount minimum not met
        frame_dig -3
        gtxns Sender
        txn Sender
        ==
        assert // sender invalid
        int 0
        byte "asset_a"
        app_global_get_ex
        assert // check value exists
        int 0
        byte "asset_b"
        app_global_get_ex
        assert // check value exists
        frame_dig -3
        gtxns XferAsset
        match swap_switch_case_0@1 swap_switch_case_1@2
        b swap_switch_case_default@3

swap_switch_case_0@1:
        callsub _current_b_balance
        frame_bury 0
        callsub _current_a_balance
        int 0
        byte "asset_a"
        app_global_get_ex
        swap
        frame_bury 1
        assert // check value exists
        b swap_switch_case_next@4

swap_switch_case_1@2:
        callsub _current_a_balance
        frame_bury 0
        callsub _current_b_balance
        int 0
        byte "asset_b"
        app_global_get_ex
        swap
        frame_bury 1
        assert // check value exists
        b swap_switch_case_next@4

swap_switch_case_default@3:
        err // asset id incorrect

swap_switch_case_next@4:
        frame_dig -3
        gtxns AssetAmount
        frame_dig 0
        uncover 2
        callsub tokens_to_swap
        dup
        int 0
        >
        assert // send amount too low
        txn Sender
        frame_dig 1
        uncover 2
        callsub do_asset_transfer
        callsub _update_ratio
        retsub


// examples.amm.contract.tokens_to_swap(in_amount#0: uint64, in_supply#0: uint64, out_supply#0: uint64) -> uint64:
tokens_to_swap:
        proto 3 1

tokens_to_swap_block@0:
        frame_dig -2
        frame_dig -3
        -
        int 1000
        *
        frame_dig -3
        int 995
        *
        +
        frame_dig -3
        int 995
        *
        frame_dig -1
        *
        swap
        /
        retsub


// examples.amm.contract.ConstantProductAMM.__init__() -> void:
__init__:
        proto 0 0

__init___block@0:
        byte "asset_a"
        int 0
        app_global_put
        byte "asset_b"
        int 0
        app_global_put
        byte "governor"
        txn Sender
        app_global_put
        byte "pool_token"
        int 0
        app_global_put
        byte "ratio"
        int 0
        app_global_put
        retsub

