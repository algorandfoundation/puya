contract examples.amm.contract.ConstantProductAMM:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L28
                examples.amm.contract.ConstantProductAMM.__init__()
                goto block@2
            block@2: // after_if_else_L28
                let tmp%0#0: bool = examples.amm.contract.ConstantProductAMM.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine examples.amm.contract.ConstantProductAMM.__puya_arc4_router__() -> bool:
            block@0: // L27
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@9
            block@1: // abi_routing_L27
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "set_governor(account)void" => block@2, method "bootstrap(pay,asset,asset)uint64" => block@3, method "mint(axfer,axfer,asset,asset,asset)void" => block@4, method "burn(axfer,asset,asset,asset)void" => block@5, method "swap(axfer,asset,asset)void" => block@6, * => block@7}
            block@2: // set_governor_route_L43
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // is not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: uint64 = (btoi tmp%7#0)
                let tmp%9#0: bytes = ((txnas Accounts) tmp%8#0)
                examples.amm.contract.ConstantProductAMM.set_governor(tmp%9#0)
                return 1u
            block@3: // bootstrap_route_L49
                let tmp%10#0: uint64 = (txn OnCompletion)
                let tmp%11#0: bool = (== tmp%10#0 NoOp)
                (assert tmp%11#0) // OnCompletion is NoOp
                let tmp%12#0: uint64 = (txn ApplicationID)
                let tmp%13#0: bool = (!= tmp%12#0 0u)
                (assert tmp%13#0) // is not creating
                let tmp%14#0: uint64 = (txn GroupIndex)
                let gtxn_idx%0#0: uint64 = (- tmp%14#0 1u)
                let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
                let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
                (assert gtxn_type_matches%0#0) // transaction type is pay
                let tmp%15#0: bytes = (txna ApplicationArgs 1)
                let tmp%16#0: uint64 = (btoi tmp%15#0)
                let tmp%17#0: uint64 = ((txnas Assets) tmp%16#0)
                let tmp%18#0: bytes = (txna ApplicationArgs 2)
                let tmp%19#0: uint64 = (btoi tmp%18#0)
                let tmp%20#0: uint64 = ((txnas Assets) tmp%19#0)
                let to_encode%0#0: uint64 = examples.amm.contract.ConstantProductAMM.bootstrap(gtxn_idx%0#0, tmp%17#0, tmp%20#0)
                let val_as_bytes%0#0: bytes = (itob to_encode%0#0)
                let tmp%21#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
                (log tmp%21#0)
                return 1u
            block@4: // mint_route_L81
                let tmp%22#0: uint64 = (txn OnCompletion)
                let tmp%23#0: bool = (== tmp%22#0 NoOp)
                (assert tmp%23#0) // OnCompletion is NoOp
                let tmp%24#0: uint64 = (txn ApplicationID)
                let tmp%25#0: bool = (!= tmp%24#0 0u)
                (assert tmp%25#0) // is not creating
                let tmp%26#0: uint64 = (txn GroupIndex)
                let gtxn_idx%1#0: uint64 = (- tmp%26#0 2u)
                let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
                let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 axfer)
                (assert gtxn_type_matches%1#0) // transaction type is axfer
                let tmp%27#0: uint64 = (txn GroupIndex)
                let gtxn_idx%2#0: uint64 = (- tmp%27#0 1u)
                let gtxn_type%2#0: uint64 = ((gtxns TypeEnum) gtxn_idx%2#0)
                let gtxn_type_matches%2#0: bool = (== gtxn_type%2#0 axfer)
                (assert gtxn_type_matches%2#0) // transaction type is axfer
                let tmp%28#0: bytes = (txna ApplicationArgs 1)
                let tmp%29#0: uint64 = (btoi tmp%28#0)
                let tmp%30#0: uint64 = ((txnas Assets) tmp%29#0)
                let tmp%31#0: bytes = (txna ApplicationArgs 2)
                let tmp%32#0: uint64 = (btoi tmp%31#0)
                let tmp%33#0: uint64 = ((txnas Assets) tmp%32#0)
                let tmp%34#0: bytes = (txna ApplicationArgs 3)
                let tmp%35#0: uint64 = (btoi tmp%34#0)
                let tmp%36#0: uint64 = ((txnas Assets) tmp%35#0)
                examples.amm.contract.ConstantProductAMM.mint(gtxn_idx%1#0, gtxn_idx%2#0, tmp%30#0, tmp%33#0, tmp%36#0)
                return 1u
            block@5: // burn_route_L147
                let tmp%37#0: uint64 = (txn OnCompletion)
                let tmp%38#0: bool = (== tmp%37#0 NoOp)
                (assert tmp%38#0) // OnCompletion is NoOp
                let tmp%39#0: uint64 = (txn ApplicationID)
                let tmp%40#0: bool = (!= tmp%39#0 0u)
                (assert tmp%40#0) // is not creating
                let tmp%41#0: uint64 = (txn GroupIndex)
                let gtxn_idx%3#0: uint64 = (- tmp%41#0 1u)
                let gtxn_type%3#0: uint64 = ((gtxns TypeEnum) gtxn_idx%3#0)
                let gtxn_type_matches%3#0: bool = (== gtxn_type%3#0 axfer)
                (assert gtxn_type_matches%3#0) // transaction type is axfer
                let tmp%42#0: bytes = (txna ApplicationArgs 1)
                let tmp%43#0: uint64 = (btoi tmp%42#0)
                let tmp%44#0: uint64 = ((txnas Assets) tmp%43#0)
                let tmp%45#0: bytes = (txna ApplicationArgs 2)
                let tmp%46#0: uint64 = (btoi tmp%45#0)
                let tmp%47#0: uint64 = ((txnas Assets) tmp%46#0)
                let tmp%48#0: bytes = (txna ApplicationArgs 3)
                let tmp%49#0: uint64 = (btoi tmp%48#0)
                let tmp%50#0: uint64 = ((txnas Assets) tmp%49#0)
                examples.amm.contract.ConstantProductAMM.burn(gtxn_idx%3#0, tmp%44#0, tmp%47#0, tmp%50#0)
                return 1u
            block@6: // swap_route_L204
                let tmp%51#0: uint64 = (txn OnCompletion)
                let tmp%52#0: bool = (== tmp%51#0 NoOp)
                (assert tmp%52#0) // OnCompletion is NoOp
                let tmp%53#0: uint64 = (txn ApplicationID)
                let tmp%54#0: bool = (!= tmp%53#0 0u)
                (assert tmp%54#0) // is not creating
                let tmp%55#0: uint64 = (txn GroupIndex)
                let gtxn_idx%4#0: uint64 = (- tmp%55#0 1u)
                let gtxn_type%4#0: uint64 = ((gtxns TypeEnum) gtxn_idx%4#0)
                let gtxn_type_matches%4#0: bool = (== gtxn_type%4#0 axfer)
                (assert gtxn_type_matches%4#0) // transaction type is axfer
                let tmp%56#0: bytes = (txna ApplicationArgs 1)
                let tmp%57#0: uint64 = (btoi tmp%56#0)
                let tmp%58#0: uint64 = ((txnas Assets) tmp%57#0)
                let tmp%59#0: bytes = (txna ApplicationArgs 2)
                let tmp%60#0: uint64 = (btoi tmp%59#0)
                let tmp%61#0: uint64 = ((txnas Assets) tmp%60#0)
                examples.amm.contract.ConstantProductAMM.swap(gtxn_idx%4#0, tmp%58#0, tmp%61#0)
                return 1u
            block@7: // switch_case_default_L27
                goto block@8
            block@8: // switch_case_next_L27
                goto block@13
            block@9: // bare_routing_L27
                let tmp%62#0: uint64 = (txn OnCompletion)
                switch tmp%62#0 {0u => block@10, * => block@11}
            block@10: // __algopy_default_create_L27
                let tmp%63#0: uint64 = (txn ApplicationID)
                let tmp%64#0: bool = (== tmp%63#0 0u)
                (assert tmp%64#0) // is creating
                examples.amm.contract.ConstantProductAMM.__algopy_default_create()
                return 1u
            block@11: // switch_case_default_L27
                goto block@12
            block@12: // switch_case_next_L27
                goto block@13
            block@13: // after_if_else_L27
                return 0u
        
        subroutine examples.amm.contract.ConstantProductAMM.set_governor(new_governor: bytes) -> void:
            block@0: // L43
                examples.amm.contract.ConstantProductAMM._check_is_governor()
                (app_global_put "governor" new_governor#0)
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM._check_is_governor() -> void:
            block@0: // L262
                let tmp%0#0: bytes = (txn Sender)
                let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "governor")
                (assert maybe_exists%0#0) // check self.governor exists
                let tmp%1#0: bool = (== tmp%0#0 maybe_value%0#0)
                (assert tmp%1#0) // Only the account set in global_state.governor may call this method
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM.bootstrap(seed: uint64, a_asset: uint64, b_asset: uint64) -> uint64:
            block@0: // L49
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
                (assert maybe_exists%0#0) // check self.pool_token exists
                let reinterpret_bool%0#0: bool = maybe_value%0#0
                let tmp%0#0: bool = (! reinterpret_bool%0#0)
                (assert tmp%0#0) // application has already been bootstrapped
                examples.amm.contract.ConstantProductAMM._check_is_governor()
                let tmp%1#0: uint64 = (global GroupSize)
                let tmp%2#0: bool = (== tmp%1#0 2u)
                (assert tmp%2#0) // group size not 2
                let tmp%3#0: bytes = ((gtxns Receiver) seed#0)
                let tmp%4#0: bytes = (global CurrentApplicationAddress)
                let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
                (assert tmp%5#0) // receiver not app address
                let tmp%6#0: uint64 = ((gtxns Amount) seed#0)
                let tmp%7#0: bool = (>= tmp%6#0 300000u)
                (assert tmp%7#0) // amount minimum not met
                let tmp%8#0: bool = (< a_asset#0 b_asset#0)
                (assert tmp%8#0) // asset a must be less than asset b
                (app_global_put "asset_a" a_asset#0)
                (app_global_put "asset_b" b_asset#0)
                let new_state_value%0#0: uint64 = examples.amm.contract.ConstantProductAMM._create_pool_token()
                (app_global_put "pool_token" new_state_value%0#0)
                let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_a")
                (assert maybe_exists%1#0) // check self.asset_a exists
                examples.amm.contract.ConstantProductAMM._do_opt_in(maybe_value%1#0)
                let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "asset_b")
                (assert maybe_exists%2#0) // check self.asset_b exists
                examples.amm.contract.ConstantProductAMM._do_opt_in(maybe_value%2#0)
                let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "pool_token")
                (assert maybe_exists%3#0) // check self.pool_token exists
                return maybe_value%3#0
        
        subroutine examples.amm.contract.ConstantProductAMM._create_pool_token() -> uint64:
            block@0: // L268
                itxn_begin
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_a")
                (assert maybe_exists%0#0) // check self.asset_a exists
                let (value%0#0: bytes, check%0#0: bool) = ((asset_params_get AssetUnitName) maybe_value%0#0)
                (assert check%0#0) // asset exists
                let tmp%0#0: bytes = (concat 0x4450542d value%0#0)
                let tmp%1#0: bytes = (concat tmp%0#0 0x2d)
                let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_b")
                (assert maybe_exists%1#0) // check self.asset_b exists
                let (value%1#0: bytes, check%1#0: bool) = ((asset_params_get AssetUnitName) maybe_value%1#0)
                (assert check%1#0) // asset exists
                let inner_txn_params%0%%param_ConfigAssetName_idx_0#0: bytes = (concat tmp%1#0 value%1#0)
                let inner_txn_params%0%%param_ConfigAssetManager_idx_0#0: bytes = (global CurrentApplicationAddress)
                let inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0: bytes = (global CurrentApplicationAddress)
                ((itxn_field ConfigAssetReserve) inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0)
                ((itxn_field ConfigAssetManager) inner_txn_params%0%%param_ConfigAssetManager_idx_0#0)
                ((itxn_field ConfigAssetDecimals) 3u)
                ((itxn_field ConfigAssetTotal) 10000000000u)
                ((itxn_field ConfigAssetUnitName) 0x646274)
                ((itxn_field ConfigAssetName) inner_txn_params%0%%param_ConfigAssetName_idx_0#0)
                ((itxn_field TypeEnum) acfg)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L271
                itxn_submit
                let tmp%2#0: uint64 = (itxn CreatedAssetID)
                return tmp%2#0
        
        subroutine examples.amm.contract.ConstantProductAMM._do_opt_in(asset: uint64) -> void:
            block@0: // L283
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                examples.amm.contract.do_asset_transfer(tmp%0#0, asset#0, 0u)
                return 
        
        subroutine examples.amm.contract.do_asset_transfer(receiver: bytes, asset: uint64, amount: uint64) -> void:
            block@0: // L356
                itxn_begin
                let inner_txn_params%0%%param_XferAsset_idx_0#0: uint64 = asset#0
                let inner_txn_params%0%%param_AssetAmount_idx_0#0: uint64 = amount#0
                let inner_txn_params%0%%param_AssetReceiver_idx_0#0: bytes = receiver#0
                ((itxn_field AssetReceiver) inner_txn_params%0%%param_AssetReceiver_idx_0#0)
                ((itxn_field AssetAmount) inner_txn_params%0%%param_AssetAmount_idx_0#0)
                ((itxn_field XferAsset) inner_txn_params%0%%param_XferAsset_idx_0#0)
                ((itxn_field TypeEnum) axfer)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L358
                itxn_submit
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM.mint(a_xfer: uint64, b_xfer: uint64, pool_asset: uint64, a_asset: uint64, b_asset: uint64) -> void:
            block@0: // L81
                examples.amm.contract.ConstantProductAMM._check_bootstrapped()
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
                (assert maybe_exists%0#0) // check self.pool_token exists
                let tmp%0#0: bool = (== pool_asset#0 maybe_value%0#0)
                (assert tmp%0#0) // asset pool incorrect
                let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_a")
                (assert maybe_exists%1#0) // check self.asset_a exists
                let tmp%1#0: bool = (== a_asset#0 maybe_value%1#0)
                (assert tmp%1#0) // asset a incorrect
                let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "asset_b")
                (assert maybe_exists%2#0) // check self.asset_b exists
                let tmp%2#0: bool = (== b_asset#0 maybe_value%2#0)
                (assert tmp%2#0) // asset b incorrect
                let tmp%3#0: bytes = ((gtxns Sender) a_xfer#0)
                let tmp%4#0: bytes = (txn Sender)
                let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
                (assert tmp%5#0) // sender invalid
                let tmp%6#0: bytes = ((gtxns Sender) b_xfer#0)
                let tmp%7#0: bytes = (txn Sender)
                let tmp%8#0: bool = (== tmp%6#0 tmp%7#0)
                (assert tmp%8#0) // sender invalid
                let tmp%9#0: bytes = ((gtxns AssetReceiver) a_xfer#0)
                let tmp%10#0: bytes = (global CurrentApplicationAddress)
                let tmp%11#0: bool = (== tmp%9#0 tmp%10#0)
                (assert tmp%11#0) // receiver not app address
                let tmp%12#0: uint64 = ((gtxns XferAsset) a_xfer#0)
                let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "asset_a")
                (assert maybe_exists%3#0) // check self.asset_a exists
                let tmp%13#0: bool = (== tmp%12#0 maybe_value%3#0)
                (assert tmp%13#0) // asset a incorrect
                let tmp%14#0: uint64 = ((gtxns AssetAmount) a_xfer#0)
                let tmp%15#0: bool = (> tmp%14#0 0u)
                (assert tmp%15#0) // amount minimum not met
                let tmp%16#0: bytes = ((gtxns AssetReceiver) b_xfer#0)
                let tmp%17#0: bytes = (global CurrentApplicationAddress)
                let tmp%18#0: bool = (== tmp%16#0 tmp%17#0)
                (assert tmp%18#0) // receiver not app address
                let tmp%19#0: uint64 = ((gtxns XferAsset) b_xfer#0)
                let (maybe_value%4#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "asset_b")
                (assert maybe_exists%4#0) // check self.asset_b exists
                let tmp%20#0: bool = (== tmp%19#0 maybe_value%4#0)
                (assert tmp%20#0) // asset b incorrect
                let tmp%21#0: uint64 = ((gtxns AssetAmount) b_xfer#0)
                let tmp%22#0: bool = (> tmp%21#0 0u)
                (assert tmp%22#0) // amount minimum not met
                let tmp%23#0: uint64 = examples.amm.contract.ConstantProductAMM._current_pool_balance()
                let tmp%24#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let tmp%25#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let tmp%26#0: uint64 = ((gtxns AssetAmount) a_xfer#0)
                let tmp%27#0: uint64 = ((gtxns AssetAmount) b_xfer#0)
                let to_mint#0: uint64 = examples.amm.contract.tokens_to_mint(tmp%23#0, tmp%24#0, tmp%25#0, tmp%26#0, tmp%27#0)
                let tmp%28#0: bool = (> to_mint#0 0u)
                (assert tmp%28#0) // send amount too low
                let tmp%29#0: bytes = (txn Sender)
                let (maybe_value%5#0: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "pool_token")
                (assert maybe_exists%5#0) // check self.pool_token exists
                examples.amm.contract.do_asset_transfer(tmp%29#0, maybe_value%5#0, to_mint#0)
                examples.amm.contract.ConstantProductAMM._update_ratio()
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM._check_bootstrapped() -> void:
            block@0: // L251
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
                (assert maybe_exists%0#0) // check self.pool_token exists
                let reinterpret_bool%0#0: bool = maybe_value%0#0
                (assert reinterpret_bool%0#0) // bootstrap method needs to be called first
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM._current_pool_balance() -> uint64:
            block@0: // L291
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
                (assert maybe_exists%0#0) // check self.pool_token exists
                let (value%0#0: uint64, check%0#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 maybe_value%0#0)
                (assert check%0#0) // account opted into asset
                return value%0#0
        
        subroutine examples.amm.contract.ConstantProductAMM._current_a_balance() -> uint64:
            block@0: // L295
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_a")
                (assert maybe_exists%0#0) // check self.asset_a exists
                let (value%0#0: uint64, check%0#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 maybe_value%0#0)
                (assert check%0#0) // account opted into asset
                return value%0#0
        
        subroutine examples.amm.contract.ConstantProductAMM._current_b_balance() -> uint64:
            block@0: // L299
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_b")
                (assert maybe_exists%0#0) // check self.asset_b exists
                let (value%0#0: uint64, check%0#0: bool) = ((asset_holding_get AssetBalance) tmp%0#0 maybe_value%0#0)
                (assert check%0#0) // account opted into asset
                return value%0#0
        
        subroutine examples.amm.contract.tokens_to_mint(pool_balance: uint64, a_balance: uint64, b_balance: uint64, a_amount: uint64, b_amount: uint64) -> uint64:
            block@0: // L322
                let tmp%0#0: bool = (== a_balance#0 a_amount#0)
                goto tmp%0#0 ? block@1 : block@3
            block@1: // and_contd_L331
                let tmp%1#0: bool = (== b_balance#0 b_amount#0)
                goto tmp%1#0 ? block@2 : block@3
            block@2: // bool_true_L331
                let and_result%0#0: bool = 1u
                goto block@4
            block@3: // bool_false_L331
                let and_result%0#0: bool = 0u
                goto block@4
            block@4: // bool_merge_L331
                let is_initial_mint#0: bool = and_result%0#0
                goto is_initial_mint#0 ? block@5 : block@6
            block@5: // if_body_L333
                let tmp%2#0: uint64 = (* a_amount#0 b_amount#0)
                let tmp%3#0: uint64 = (sqrt tmp%2#0)
                let tmp%4#0: uint64 = (- tmp%3#0 1000u)
                return tmp%4#0
            block@6: // after_if_else_L332
                let issued#0: uint64 = (- 10000000000u pool_balance#0)
                let tmp%5#0: uint64 = (* 1000u a_amount#0)
                let tmp%6#0: uint64 = (- a_balance#0 a_amount#0)
                let a_ratio#0: uint64 = (/ tmp%5#0 tmp%6#0)
                let tmp%7#0: uint64 = (* 1000u b_amount#0)
                let tmp%8#0: uint64 = (- b_balance#0 b_amount#0)
                let b_ratio#0: uint64 = (/ tmp%7#0 tmp%8#0)
                let tmp%9#0: bool = (< a_ratio#0 b_ratio#0)
                goto tmp%9#0 ? block@7 : block@8
            block@7: // if_body_L338
                let tmp%10#0: uint64 = (* a_ratio#0 issued#0)
                let tmp%11#0: uint64 = (/ tmp%10#0 1000u)
                return tmp%11#0
            block@8: // else_body_L340
                let tmp%12#0: uint64 = (* b_ratio#0 issued#0)
                let tmp%13#0: uint64 = (/ tmp%12#0 1000u)
                return tmp%13#0
        
        subroutine examples.amm.contract.ConstantProductAMM._update_ratio() -> void:
            block@0: // L255
                let a_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let b_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let tmp%0#0: uint64 = (* a_balance#0 1000u)
                let new_state_value%0#0: uint64 = (/ tmp%0#0 b_balance#0)
                (app_global_put "ratio" new_state_value%0#0)
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM.burn(pool_xfer: uint64, pool_asset: uint64, a_asset: uint64, b_asset: uint64) -> void:
            block@0: // L147
                examples.amm.contract.ConstantProductAMM._check_bootstrapped()
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "pool_token")
                (assert maybe_exists%0#0) // check self.pool_token exists
                let tmp%0#0: bool = (== pool_asset#0 maybe_value%0#0)
                (assert tmp%0#0) // asset pool incorrect
                let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_a")
                (assert maybe_exists%1#0) // check self.asset_a exists
                let tmp%1#0: bool = (== a_asset#0 maybe_value%1#0)
                (assert tmp%1#0) // asset a incorrect
                let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "asset_b")
                (assert maybe_exists%2#0) // check self.asset_b exists
                let tmp%2#0: bool = (== b_asset#0 maybe_value%2#0)
                (assert tmp%2#0) // asset b incorrect
                let tmp%3#0: bytes = ((gtxns AssetReceiver) pool_xfer#0)
                let tmp%4#0: bytes = (global CurrentApplicationAddress)
                let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
                (assert tmp%5#0) // receiver not app address
                let tmp%6#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
                let tmp%7#0: bool = (> tmp%6#0 0u)
                (assert tmp%7#0) // amount minimum not met
                let tmp%8#0: uint64 = ((gtxns XferAsset) pool_xfer#0)
                let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "pool_token")
                (assert maybe_exists%3#0) // check self.pool_token exists
                let tmp%9#0: bool = (== tmp%8#0 maybe_value%3#0)
                (assert tmp%9#0) // asset pool incorrect
                let tmp%10#0: bytes = ((gtxns Sender) pool_xfer#0)
                let tmp%11#0: bytes = (txn Sender)
                let tmp%12#0: bool = (== tmp%10#0 tmp%11#0)
                (assert tmp%12#0) // sender invalid
                let pool_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_pool_balance()
                let tmp%13#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let tmp%14#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
                let a_amt#0: uint64 = examples.amm.contract.tokens_to_burn(pool_balance#0, tmp%13#0, tmp%14#0)
                let tmp%15#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let tmp%16#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
                let b_amt#0: uint64 = examples.amm.contract.tokens_to_burn(pool_balance#0, tmp%15#0, tmp%16#0)
                let tmp%17#0: bytes = (txn Sender)
                let (maybe_value%4#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "asset_a")
                (assert maybe_exists%4#0) // check self.asset_a exists
                examples.amm.contract.do_asset_transfer(tmp%17#0, maybe_value%4#0, a_amt#0)
                let tmp%18#0: bytes = (txn Sender)
                let (maybe_value%5#0: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "asset_b")
                (assert maybe_exists%5#0) // check self.asset_b exists
                examples.amm.contract.do_asset_transfer(tmp%18#0, maybe_value%5#0, b_amt#0)
                examples.amm.contract.ConstantProductAMM._update_ratio()
                return 
        
        subroutine examples.amm.contract.tokens_to_burn(pool_balance: uint64, supply: uint64, amount: uint64) -> uint64:
            block@0: // L343
                let tmp%0#0: uint64 = (- 10000000000u pool_balance#0)
                let issued#0: uint64 = (- tmp%0#0 amount#0)
                let tmp%1#0: uint64 = (* supply#0 amount#0)
                let tmp%2#0: uint64 = (/ tmp%1#0 issued#0)
                return tmp%2#0
        
        subroutine examples.amm.contract.ConstantProductAMM.swap(swap_xfer: uint64, a_asset: uint64, b_asset: uint64) -> void:
            block@0: // L204
                examples.amm.contract.ConstantProductAMM._check_bootstrapped()
                let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "asset_a")
                (assert maybe_exists%0#0) // check self.asset_a exists
                let tmp%0#0: bool = (== a_asset#0 maybe_value%0#0)
                (assert tmp%0#0) // asset a incorrect
                let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "asset_b")
                (assert maybe_exists%1#0) // check self.asset_b exists
                let tmp%1#0: bool = (== b_asset#0 maybe_value%1#0)
                (assert tmp%1#0) // asset b incorrect
                let tmp%2#0: uint64 = ((gtxns AssetAmount) swap_xfer#0)
                let tmp%3#0: bool = (> tmp%2#0 0u)
                (assert tmp%3#0) // amount minimum not met
                let tmp%4#0: bytes = ((gtxns Sender) swap_xfer#0)
                let tmp%5#0: bytes = (txn Sender)
                let tmp%6#0: bool = (== tmp%4#0 tmp%5#0)
                (assert tmp%6#0) // sender invalid
                let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "asset_a")
                (assert maybe_exists%2#0) // check self.asset_a exists
                let (maybe_value%3#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "asset_b")
                (assert maybe_exists%3#0) // check self.asset_b exists
                let tmp%7#0: uint64 = ((gtxns XferAsset) swap_xfer#0)
                switch tmp%7#0 {maybe_value%2#0 => block@1, maybe_value%3#0 => block@2, * => block@3}
            block@1: // switch_case_0_L233
                let in_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let out_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let (maybe_value%4#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "asset_a")
                (assert maybe_exists%4#0) // check self.asset_a exists
                let out_asset#0: uint64 = maybe_value%4#0
                goto block@4
            block@2: // switch_case_1_L237
                let in_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let out_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let (maybe_value%5#0: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "asset_b")
                (assert maybe_exists%5#0) // check self.asset_b exists
                let out_asset#0: uint64 = maybe_value%5#0
                goto block@4
            block@3: // switch_case_default_L241
                fail // asset id incorrect
            block@4: // switch_case_next_L231
                let tmp%8#0: uint64 = ((gtxns AssetAmount) swap_xfer#0)
                let to_swap#0: uint64 = examples.amm.contract.tokens_to_swap(tmp%8#0, in_supply#0, out_supply#0)
                let tmp%9#0: bool = (> to_swap#0 0u)
                (assert tmp%9#0) // send amount too low
                let tmp%10#0: bytes = (txn Sender)
                examples.amm.contract.do_asset_transfer(tmp%10#0, out_asset#0, to_swap#0)
                examples.amm.contract.ConstantProductAMM._update_ratio()
                return 
        
        subroutine examples.amm.contract.tokens_to_swap(in_amount: uint64, in_supply: uint64, out_supply: uint64) -> uint64:
            block@0: // L349
                let tmp%0#0: uint64 = (- in_supply#0 in_amount#0)
                let tmp%1#0: uint64 = (* 1000u tmp%0#0)
                let tmp%2#0: uint64 = (* in_amount#0 995u)
                let in_total#0: uint64 = (+ tmp%1#0 tmp%2#0)
                let tmp%3#0: uint64 = (* in_amount#0 995u)
                let out_total#0: uint64 = (* tmp%3#0 out_supply#0)
                let tmp%4#0: uint64 = (/ out_total#0 in_total#0)
                return tmp%4#0
        
        subroutine examples.amm.contract.ConstantProductAMM.__algopy_default_create() -> void:
            block@0: // L27
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM.__init__() -> void:
            block@0: // L28
                (app_global_put "asset_a" 0u)
                (app_global_put "asset_b" 0u)
                let new_state_value%0#0: bytes = (txn Sender)
                (app_global_put "governor" new_state_value%0#0)
                (app_global_put "pool_token" 0u)
                (app_global_put "ratio" 0u)
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u