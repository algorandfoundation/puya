contract examples.amm.contract.ConstantProductAMM:
    program approval:
        subroutine examples.amm.contract.ConstantProductAMM.approval_program() -> uint64:
            block@0: // L27
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L28
                examples.amm.contract.ConstantProductAMM.__init__()
                goto block@2
            block@2: // entrypoint_L28
                let tmp%1#0: uint64 = (txn NumAppArgs)
                goto tmp%1#0 ? block@3 : block@11
            block@3: // abi_routing_L27
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "set_governor(account)void" => block@4, method "bootstrap(pay,asset,asset)uint64" => block@5, method "mint(axfer,axfer,asset,asset,asset)void" => block@6, method "burn(axfer,asset,asset,asset)void" => block@7, method "swap(axfer,asset,asset)void" => block@8, * => block@9}
            block@4: // set_governor_route_L43
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: uint64 = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // is not creating
                let tmp%6#0: bytes = (txna ApplicationArgs 1)
                let tmp%7#0: uint64 = (btoi tmp%6#0)
                let tmp%8#0: bytes = ((txnas Accounts) tmp%7#0)
                examples.amm.contract.ConstantProductAMM.set_governor(tmp%8#0)
                return 1u
            block@5: // bootstrap_route_L49
                let tmp%9#0: uint64 = (txn OnCompletion)
                let tmp%10#0: uint64 = (== tmp%9#0 NoOp)
                (assert tmp%10#0) // OnCompletion is NoOp
                let tmp%11#0: uint64 = (txn ApplicationID)
                (assert tmp%11#0) // is not creating
                let tmp%14#0: uint64 = (txn GroupIndex)
                let awst_tmp%15#0: uint64 = (- tmp%14#0 1u)
                let tmp%16#0: uint64 = ((gtxns TypeEnum) awst_tmp%15#0)
                let tmp%17#0: uint64 = (== tmp%16#0 pay)
                let maybe_value%12#0: uint64 = awst_tmp%15#0
                let maybe_value_did_exist%13#0: uint64 = tmp%17#0
                (assert maybe_value_did_exist%13#0) // transaction type is pay
                let tmp%18#0: bytes = (txna ApplicationArgs 1)
                let tmp%19#0: uint64 = (btoi tmp%18#0)
                let tmp%20#0: uint64 = ((txnas Assets) tmp%19#0)
                let tmp%21#0: bytes = (txna ApplicationArgs 2)
                let tmp%22#0: uint64 = (btoi tmp%21#0)
                let tmp%23#0: uint64 = ((txnas Assets) tmp%22#0)
                let tmp%24#0: bytes = examples.amm.contract.ConstantProductAMM.bootstrap(maybe_value%12#0, tmp%20#0, tmp%23#0)
                let tmp%25#0: bytes = (concat 0x151f7c75 tmp%24#0)
                (log tmp%25#0)
                return 1u
            block@6: // mint_route_L83
                let tmp%26#0: uint64 = (txn OnCompletion)
                let tmp%27#0: uint64 = (== tmp%26#0 NoOp)
                (assert tmp%27#0) // OnCompletion is NoOp
                let tmp%28#0: uint64 = (txn ApplicationID)
                (assert tmp%28#0) // is not creating
                let tmp%31#0: uint64 = (txn GroupIndex)
                let awst_tmp%32#0: uint64 = (- tmp%31#0 2u)
                let tmp%33#0: uint64 = ((gtxns TypeEnum) awst_tmp%32#0)
                let tmp%34#0: uint64 = (== tmp%33#0 axfer)
                let maybe_value%29#0: uint64 = awst_tmp%32#0
                let maybe_value_did_exist%30#0: uint64 = tmp%34#0
                (assert maybe_value_did_exist%30#0) // transaction type is axfer
                let tmp%37#0: uint64 = (txn GroupIndex)
                let awst_tmp%15#0: uint64 = (- tmp%37#0 1u)
                let tmp%38#0: uint64 = ((gtxns TypeEnum) awst_tmp%15#0)
                let tmp%39#0: uint64 = (== tmp%38#0 axfer)
                let maybe_value%35#0: uint64 = awst_tmp%15#0
                let maybe_value_did_exist%36#0: uint64 = tmp%39#0
                (assert maybe_value_did_exist%36#0) // transaction type is axfer
                let tmp%40#0: bytes = (txna ApplicationArgs 1)
                let tmp%41#0: uint64 = (btoi tmp%40#0)
                let tmp%42#0: uint64 = ((txnas Assets) tmp%41#0)
                let tmp%43#0: bytes = (txna ApplicationArgs 2)
                let tmp%44#0: uint64 = (btoi tmp%43#0)
                let tmp%45#0: uint64 = ((txnas Assets) tmp%44#0)
                let tmp%46#0: bytes = (txna ApplicationArgs 3)
                let tmp%47#0: uint64 = (btoi tmp%46#0)
                let tmp%48#0: uint64 = ((txnas Assets) tmp%47#0)
                examples.amm.contract.ConstantProductAMM.mint(maybe_value%29#0, maybe_value%35#0, tmp%42#0, tmp%45#0, tmp%48#0)
                return 1u
            block@7: // burn_route_L149
                let tmp%49#0: uint64 = (txn OnCompletion)
                let tmp%50#0: uint64 = (== tmp%49#0 NoOp)
                (assert tmp%50#0) // OnCompletion is NoOp
                let tmp%51#0: uint64 = (txn ApplicationID)
                (assert tmp%51#0) // is not creating
                let tmp%54#0: uint64 = (txn GroupIndex)
                let awst_tmp%15#0: uint64 = (- tmp%54#0 1u)
                let tmp%55#0: uint64 = ((gtxns TypeEnum) awst_tmp%15#0)
                let tmp%56#0: uint64 = (== tmp%55#0 axfer)
                let maybe_value%52#0: uint64 = awst_tmp%15#0
                let maybe_value_did_exist%53#0: uint64 = tmp%56#0
                (assert maybe_value_did_exist%53#0) // transaction type is axfer
                let tmp%57#0: bytes = (txna ApplicationArgs 1)
                let tmp%58#0: uint64 = (btoi tmp%57#0)
                let tmp%59#0: uint64 = ((txnas Assets) tmp%58#0)
                let tmp%60#0: bytes = (txna ApplicationArgs 2)
                let tmp%61#0: uint64 = (btoi tmp%60#0)
                let tmp%62#0: uint64 = ((txnas Assets) tmp%61#0)
                let tmp%63#0: bytes = (txna ApplicationArgs 3)
                let tmp%64#0: uint64 = (btoi tmp%63#0)
                let tmp%65#0: uint64 = ((txnas Assets) tmp%64#0)
                examples.amm.contract.ConstantProductAMM.burn(maybe_value%52#0, tmp%59#0, tmp%62#0, tmp%65#0)
                return 1u
            block@8: // swap_route_L206
                let tmp%66#0: uint64 = (txn OnCompletion)
                let tmp%67#0: uint64 = (== tmp%66#0 NoOp)
                (assert tmp%67#0) // OnCompletion is NoOp
                let tmp%68#0: uint64 = (txn ApplicationID)
                (assert tmp%68#0) // is not creating
                let tmp%71#0: uint64 = (txn GroupIndex)
                let awst_tmp%15#0: uint64 = (- tmp%71#0 1u)
                let tmp%72#0: uint64 = ((gtxns TypeEnum) awst_tmp%15#0)
                let tmp%73#0: uint64 = (== tmp%72#0 axfer)
                let maybe_value%69#0: uint64 = awst_tmp%15#0
                let maybe_value_did_exist%70#0: uint64 = tmp%73#0
                (assert maybe_value_did_exist%70#0) // transaction type is axfer
                let tmp%74#0: bytes = (txna ApplicationArgs 1)
                let tmp%75#0: uint64 = (btoi tmp%74#0)
                let tmp%76#0: uint64 = ((txnas Assets) tmp%75#0)
                let tmp%77#0: bytes = (txna ApplicationArgs 2)
                let tmp%78#0: uint64 = (btoi tmp%77#0)
                let tmp%79#0: uint64 = ((txnas Assets) tmp%78#0)
                examples.amm.contract.ConstantProductAMM.swap(maybe_value%69#0, tmp%76#0, tmp%79#0)
                return 1u
            block@9: // switch_case_default_L27
                goto block@10
            block@10: // switch_case_next_L27
                goto block@14
            block@11: // bare_routing_L27
                let tmp%80#0: uint64 = (txn OnCompletion)
                switch tmp%80#0 {0u => block@12, * => block@13}
            block@12: // create_L27
                let tmp%81#0: uint64 = (txn ApplicationID)
                let tmp%82#0: uint64 = (! tmp%81#0)
                (assert tmp%82#0) // is creating
                return 1u
            block@13: // reject_bare_on_completion_L27
                fail // reject transaction
            block@14: // after_if_else_L27
                fail // reject transaction
        
        subroutine examples.amm.contract.ConstantProductAMM.set_governor(new_governor: bytes) -> void:
            block@0: // L43
                examples.amm.contract.ConstantProductAMM._check_is_governor()
                (app_global_put "governor" new_governor#0)
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM._check_is_governor() -> void:
            block@0: // L264
                let tmp%0#0: bytes = (txn Sender)
                let (governor_value%1#0: bytes, governor_exists%2#0: uint64) = (app_global_get_ex 0u "governor")
                (assert governor_exists%2#0) // check governor exists
                let tmp%3#0: uint64 = (== tmp%0#0 governor_value%1#0)
                (assert tmp%3#0) // Only the account set in global_state.governor may call this method
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM.bootstrap(seed: uint64, a_asset: uint64, b_asset: uint64) -> bytes:
            block@0: // L49
                let (pool_token_value%0#0: uint64, pool_token_exists%1#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%1#0) // check pool_token exists
                let tmp%2#0: uint64 = (! pool_token_value%0#0)
                (assert tmp%2#0) // application has already been bootstrapped
                examples.amm.contract.ConstantProductAMM._check_is_governor()
                let tmp%3#0: uint64 = (global GroupSize)
                let tmp%4#0: uint64 = (== tmp%3#0 2u)
                (assert tmp%4#0) // group size not 2
                let tmp%5#0: bytes = ((gtxns Receiver) seed#0)
                let tmp%6#0: bytes = (global CurrentApplicationAddress)
                let tmp%7#0: uint64 = (== tmp%5#0 tmp%6#0)
                (assert tmp%7#0) // receiver not app address
                let tmp%8#0: uint64 = ((gtxns Amount) seed#0)
                let tmp%9#0: uint64 = (>= tmp%8#0 300000u)
                (assert tmp%9#0) // amount minimum not met
                let tmp%10#0: uint64 = (< a_asset#0 b_asset#0)
                (assert tmp%10#0) // asset a must be less than asset b
                (app_global_put "asset_a" a_asset#0)
                (app_global_put "asset_b" b_asset#0)
                let new_state_value%11#0: uint64 = examples.amm.contract.ConstantProductAMM._create_pool_token()
                (app_global_put "pool_token" new_state_value%11#0)
                let (asset_a_value%12#0: uint64, asset_a_exists%13#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%13#0) // check asset_a exists
                examples.amm.contract.ConstantProductAMM._do_opt_in(asset_a_value%12#0)
                let (asset_b_value%14#0: uint64, asset_b_exists%15#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%15#0) // check asset_b exists
                examples.amm.contract.ConstantProductAMM._do_opt_in(asset_b_value%14#0)
                let (pool_token_value%16#0: uint64, pool_token_exists%17#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%17#0) // check pool_token exists
                let val_as_bytes%18#0: bytes = (itob pool_token_value%16#0)
                return val_as_bytes%18#0
        
        subroutine examples.amm.contract.ConstantProductAMM._create_pool_token() -> uint64:
            block@0: // L270
                itxn_begin
                let (asset_a_value%4#0: uint64, asset_a_exists%5#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%5#0) // check asset_a exists
                let (maybe_value%2#0: bytes, maybe_value_did_exist%3#0: uint64) = ((asset_params_get AssetUnitName) asset_a_value%4#0)
                (assert maybe_value_did_exist%3#0) // asset exists
                let tmp%6#0: bytes = (concat "DPT-" maybe_value%2#0)
                let tmp%7#0: bytes = (concat tmp%6#0 "-")
                let (asset_b_value%10#0: uint64, asset_b_exists%11#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%11#0) // check asset_b exists
                let (maybe_value%8#0: bytes, maybe_value_did_exist%9#0: uint64) = ((asset_params_get AssetUnitName) asset_b_value%10#0)
                (assert maybe_value_did_exist%9#0) // asset exists
                let inner_txn_params%1%%param_ConfigAssetName_idx_0#0: bytes = (concat tmp%7#0 maybe_value%8#0)
                let inner_txn_params%1%%param_ConfigAssetDecimals_idx_0#0: uint64 = 3u
                let inner_txn_params%1%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%1%%param_ConfigAssetManager_idx_0#0: bytes = (global CurrentApplicationAddress)
                let inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0: bytes = (global CurrentApplicationAddress)
                let inner_txn_params%1%%param_ConfigAssetTotal_idx_0#0: uint64 = 10000000000u
                let inner_txn_params%1%%param_TypeEnum_idx_0#0: uint64 = acfg
                let inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0: bytes = "dbt"
                ((itxn_field ConfigAssetUnitName) inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0)
                ((itxn_field TypeEnum) inner_txn_params%1%%param_TypeEnum_idx_0#0)
                ((itxn_field ConfigAssetTotal) inner_txn_params%1%%param_ConfigAssetTotal_idx_0#0)
                ((itxn_field ConfigAssetReserve) inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0)
                ((itxn_field ConfigAssetManager) inner_txn_params%1%%param_ConfigAssetManager_idx_0#0)
                ((itxn_field Fee) inner_txn_params%1%%param_Fee_idx_0#0)
                ((itxn_field ConfigAssetDecimals) inner_txn_params%1%%param_ConfigAssetDecimals_idx_0#0)
                ((itxn_field ConfigAssetName) inner_txn_params%1%%param_ConfigAssetName_idx_0#0)
                goto block@1
            block@1: // next_txn_L273
                itxn_submit
                let submit_result_0%0%%CreatedAssetID#0: uint64 = (itxn CreatedAssetID)
                return submit_result_0%0%%CreatedAssetID#0
        
        subroutine examples.amm.contract.ConstantProductAMM._do_opt_in(asset: uint64) -> void:
            block@0: // L286
                let tmp%0#0: bytes = (global CurrentApplicationAddress)
                examples.amm.contract.do_asset_transfer(tmp%0#0, asset#0, 0u)
                return 
        
        subroutine examples.amm.contract.do_asset_transfer(receiver: bytes, asset: uint64, amount: uint64) -> void:
            block@0: // L359
                itxn_begin
                let inner_txn_params%1%%param_AssetAmount_idx_0#0: uint64 = amount#0
                let inner_txn_params%1%%param_AssetReceiver_idx_0#0: bytes = receiver#0
                let inner_txn_params%1%%param_Fee_idx_0#0: uint64 = 0u
                let inner_txn_params%1%%param_TypeEnum_idx_0#0: uint64 = axfer
                let inner_txn_params%1%%param_XferAsset_idx_0#0: uint64 = asset#0
                ((itxn_field XferAsset) inner_txn_params%1%%param_XferAsset_idx_0#0)
                ((itxn_field TypeEnum) inner_txn_params%1%%param_TypeEnum_idx_0#0)
                ((itxn_field Fee) inner_txn_params%1%%param_Fee_idx_0#0)
                ((itxn_field AssetReceiver) inner_txn_params%1%%param_AssetReceiver_idx_0#0)
                ((itxn_field AssetAmount) inner_txn_params%1%%param_AssetAmount_idx_0#0)
                goto block@1
            block@1: // next_txn_L361
                itxn_submit
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM.mint(a_xfer: uint64, b_xfer: uint64, pool_asset: uint64, a_asset: uint64, b_asset: uint64) -> void:
            block@0: // L83
                examples.amm.contract.ConstantProductAMM._check_bootstrapped()
                let (pool_token_value%0#0: uint64, pool_token_exists%1#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%1#0) // check pool_token exists
                let tmp%2#0: uint64 = (== pool_asset#0 pool_token_value%0#0)
                (assert tmp%2#0) // asset pool incorrect
                let (asset_a_value%3#0: uint64, asset_a_exists%4#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%4#0) // check asset_a exists
                let tmp%5#0: uint64 = (== a_asset#0 asset_a_value%3#0)
                (assert tmp%5#0) // asset a incorrect
                let (asset_b_value%6#0: uint64, asset_b_exists%7#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%7#0) // check asset_b exists
                let tmp%8#0: uint64 = (== b_asset#0 asset_b_value%6#0)
                (assert tmp%8#0) // asset b incorrect
                let tmp%9#0: bytes = ((gtxns Sender) a_xfer#0)
                let tmp%10#0: bytes = (txn Sender)
                let tmp%11#0: uint64 = (== tmp%9#0 tmp%10#0)
                (assert tmp%11#0) // sender invalid
                let tmp%12#0: bytes = ((gtxns Sender) b_xfer#0)
                let tmp%13#0: bytes = (txn Sender)
                let tmp%14#0: uint64 = (== tmp%12#0 tmp%13#0)
                (assert tmp%14#0) // sender invalid
                let tmp%15#0: bytes = ((gtxns AssetReceiver) a_xfer#0)
                let tmp%16#0: bytes = (global CurrentApplicationAddress)
                let tmp%17#0: uint64 = (== tmp%15#0 tmp%16#0)
                (assert tmp%17#0) // receiver not app address
                let tmp%18#0: uint64 = ((gtxns XferAsset) a_xfer#0)
                let (asset_a_value%19#0: uint64, asset_a_exists%20#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%20#0) // check asset_a exists
                let tmp%21#0: uint64 = (== tmp%18#0 asset_a_value%19#0)
                (assert tmp%21#0) // asset a incorrect
                let tmp%22#0: uint64 = ((gtxns AssetAmount) a_xfer#0)
                let tmp%23#0: uint64 = (> tmp%22#0 0u)
                (assert tmp%23#0) // amount minimum not met
                let tmp%24#0: bytes = ((gtxns AssetReceiver) b_xfer#0)
                let tmp%25#0: bytes = (global CurrentApplicationAddress)
                let tmp%26#0: uint64 = (== tmp%24#0 tmp%25#0)
                (assert tmp%26#0) // receiver not app address
                let tmp%27#0: uint64 = ((gtxns XferAsset) b_xfer#0)
                let (asset_b_value%28#0: uint64, asset_b_exists%29#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%29#0) // check asset_b exists
                let tmp%30#0: uint64 = (== tmp%27#0 asset_b_value%28#0)
                (assert tmp%30#0) // asset b incorrect
                let tmp%31#0: uint64 = ((gtxns AssetAmount) b_xfer#0)
                let tmp%32#0: uint64 = (> tmp%31#0 0u)
                (assert tmp%32#0) // amount minimum not met
                let tmp%33#0: uint64 = examples.amm.contract.ConstantProductAMM._current_pool_balance()
                let tmp%34#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let tmp%35#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let tmp%36#0: uint64 = ((gtxns AssetAmount) a_xfer#0)
                let tmp%37#0: uint64 = ((gtxns AssetAmount) b_xfer#0)
                let to_mint#0: uint64 = examples.amm.contract.tokens_to_mint(tmp%33#0, tmp%34#0, tmp%35#0, tmp%36#0, tmp%37#0)
                let tmp%38#0: uint64 = (> to_mint#0 0u)
                (assert tmp%38#0) // send amount too low
                let tmp%39#0: bytes = (txn Sender)
                let (pool_token_value%40#0: uint64, pool_token_exists%41#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%41#0) // check pool_token exists
                examples.amm.contract.do_asset_transfer(tmp%39#0, pool_token_value%40#0, to_mint#0)
                examples.amm.contract.ConstantProductAMM._update_ratio()
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM._check_bootstrapped() -> void:
            block@0: // L253
                let (pool_token_value%0#0: uint64, pool_token_exists%1#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%1#0) // check pool_token exists
                (assert pool_token_value%0#0) // bootstrap method needs to be called first
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM._current_pool_balance() -> uint64:
            block@0: // L294
                let tmp%2#0: bytes = (global CurrentApplicationAddress)
                let (pool_token_value%3#0: uint64, pool_token_exists%4#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%4#0) // check pool_token exists
                let (maybe_value%0#0: uint64, maybe_value_did_exist%1#0: uint64) = ((asset_holding_get AssetBalance) tmp%2#0 pool_token_value%3#0)
                (assert maybe_value_did_exist%1#0) // account opted into asset
                return maybe_value%0#0
        
        subroutine examples.amm.contract.ConstantProductAMM._current_a_balance() -> uint64:
            block@0: // L298
                let tmp%2#0: bytes = (global CurrentApplicationAddress)
                let (asset_a_value%3#0: uint64, asset_a_exists%4#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%4#0) // check asset_a exists
                let (maybe_value%0#0: uint64, maybe_value_did_exist%1#0: uint64) = ((asset_holding_get AssetBalance) tmp%2#0 asset_a_value%3#0)
                (assert maybe_value_did_exist%1#0) // account opted into asset
                return maybe_value%0#0
        
        subroutine examples.amm.contract.ConstantProductAMM._current_b_balance() -> uint64:
            block@0: // L302
                let tmp%2#0: bytes = (global CurrentApplicationAddress)
                let (asset_b_value%3#0: uint64, asset_b_exists%4#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%4#0) // check asset_b exists
                let (maybe_value%0#0: uint64, maybe_value_did_exist%1#0: uint64) = ((asset_holding_get AssetBalance) tmp%2#0 asset_b_value%3#0)
                (assert maybe_value_did_exist%1#0) // account opted into asset
                return maybe_value%0#0
        
        subroutine examples.amm.contract.tokens_to_mint(pool_balance: uint64, a_balance: uint64, b_balance: uint64, a_amount: uint64, b_amount: uint64) -> uint64:
            block@0: // L325
                let tmp%0#0: uint64 = (== a_balance#0 a_amount#0)
                goto tmp%0#0 ? block@1 : block@3
            block@1: // and_contd_L334
                let tmp%1#0: uint64 = (== b_balance#0 b_amount#0)
                goto tmp%1#0 ? block@2 : block@3
            block@2: // bool_true_L334
                let and_result%2#0: uint64 = 1u
                goto block@4
            block@3: // bool_false_L334
                let and_result%2#0: uint64 = 0u
                goto block@4
            block@4: // bool_merge_L334
                let is_initial_mint#0: uint64 = and_result%2#0
                goto is_initial_mint#0 ? block@5 : block@6
            block@5: // if_body_L335
                let tmp%3#0: uint64 = (* a_amount#0 b_amount#0)
                let tmp%4#0: uint64 = (sqrt tmp%3#0)
                let tmp%5#0: uint64 = (- tmp%4#0 1000u)
                return tmp%5#0
            block@6: // after_if_else_L335
                let issued#0: uint64 = (- 10000000000u pool_balance#0)
                let tmp%6#0: uint64 = (* 1000u a_amount#0)
                let tmp%7#0: uint64 = (- a_balance#0 a_amount#0)
                let a_ratio#0: uint64 = (/ tmp%6#0 tmp%7#0)
                let tmp%8#0: uint64 = (* 1000u b_amount#0)
                let tmp%9#0: uint64 = (- b_balance#0 b_amount#0)
                let b_ratio#0: uint64 = (/ tmp%8#0 tmp%9#0)
                let tmp%10#0: uint64 = (< a_ratio#0 b_ratio#0)
                goto tmp%10#0 ? block@7 : block@8
            block@7: // if_body_L340
                let tmp%11#0: uint64 = (* a_ratio#0 issued#0)
                let tmp%12#0: uint64 = (/ tmp%11#0 1000u)
                return tmp%12#0
            block@8: // else_body_L340
                let tmp%13#0: uint64 = (* b_ratio#0 issued#0)
                let tmp%14#0: uint64 = (/ tmp%13#0 1000u)
                return tmp%14#0
        
        subroutine examples.amm.contract.ConstantProductAMM._update_ratio() -> void:
            block@0: // L257
                let a_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let b_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let tmp%0#0: uint64 = (* a_balance#0 1000u)
                let new_state_value%1#0: uint64 = (/ tmp%0#0 b_balance#0)
                (app_global_put "ratio" new_state_value%1#0)
                return 
        
        subroutine examples.amm.contract.ConstantProductAMM.burn(pool_xfer: uint64, pool_asset: uint64, a_asset: uint64, b_asset: uint64) -> void:
            block@0: // L149
                examples.amm.contract.ConstantProductAMM._check_bootstrapped()
                let (pool_token_value%0#0: uint64, pool_token_exists%1#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%1#0) // check pool_token exists
                let tmp%2#0: uint64 = (== pool_asset#0 pool_token_value%0#0)
                (assert tmp%2#0) // asset pool incorrect
                let (asset_a_value%3#0: uint64, asset_a_exists%4#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%4#0) // check asset_a exists
                let tmp%5#0: uint64 = (== a_asset#0 asset_a_value%3#0)
                (assert tmp%5#0) // asset a incorrect
                let (asset_b_value%6#0: uint64, asset_b_exists%7#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%7#0) // check asset_b exists
                let tmp%8#0: uint64 = (== b_asset#0 asset_b_value%6#0)
                (assert tmp%8#0) // asset b incorrect
                let tmp%9#0: bytes = ((gtxns AssetReceiver) pool_xfer#0)
                let tmp%10#0: bytes = (global CurrentApplicationAddress)
                let tmp%11#0: uint64 = (== tmp%9#0 tmp%10#0)
                (assert tmp%11#0) // receiver not app address
                let tmp%12#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
                let tmp%13#0: uint64 = (> tmp%12#0 0u)
                (assert tmp%13#0) // amount minimum not met
                let tmp%14#0: uint64 = ((gtxns XferAsset) pool_xfer#0)
                let (pool_token_value%15#0: uint64, pool_token_exists%16#0: uint64) = (app_global_get_ex 0u "pool_token")
                (assert pool_token_exists%16#0) // check pool_token exists
                let tmp%17#0: uint64 = (== tmp%14#0 pool_token_value%15#0)
                (assert tmp%17#0) // asset pool incorrect
                let tmp%18#0: bytes = ((gtxns Sender) pool_xfer#0)
                let tmp%19#0: bytes = (txn Sender)
                let tmp%20#0: uint64 = (== tmp%18#0 tmp%19#0)
                (assert tmp%20#0) // sender invalid
                let pool_balance#0: uint64 = examples.amm.contract.ConstantProductAMM._current_pool_balance()
                let tmp%21#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let tmp%22#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
                let a_amt#0: uint64 = examples.amm.contract.tokens_to_burn(pool_balance#0, tmp%21#0, tmp%22#0)
                let tmp%23#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let tmp%24#0: uint64 = ((gtxns AssetAmount) pool_xfer#0)
                let b_amt#0: uint64 = examples.amm.contract.tokens_to_burn(pool_balance#0, tmp%23#0, tmp%24#0)
                let tmp%25#0: bytes = (txn Sender)
                let (asset_a_value%26#0: uint64, asset_a_exists%27#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%27#0) // check asset_a exists
                examples.amm.contract.do_asset_transfer(tmp%25#0, asset_a_value%26#0, a_amt#0)
                let tmp%28#0: bytes = (txn Sender)
                let (asset_b_value%29#0: uint64, asset_b_exists%30#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%30#0) // check asset_b exists
                examples.amm.contract.do_asset_transfer(tmp%28#0, asset_b_value%29#0, b_amt#0)
                examples.amm.contract.ConstantProductAMM._update_ratio()
                return 
        
        subroutine examples.amm.contract.tokens_to_burn(pool_balance: uint64, supply: uint64, amount: uint64) -> uint64:
            block@0: // L346
                let tmp%0#0: uint64 = (- 10000000000u pool_balance#0)
                let issued#0: uint64 = (- tmp%0#0 amount#0)
                let tmp%1#0: uint64 = (* supply#0 amount#0)
                let tmp%2#0: uint64 = (/ tmp%1#0 issued#0)
                return tmp%2#0
        
        subroutine examples.amm.contract.ConstantProductAMM.swap(swap_xfer: uint64, a_asset: uint64, b_asset: uint64) -> void:
            block@0: // L206
                examples.amm.contract.ConstantProductAMM._check_bootstrapped()
                let (asset_a_value%0#0: uint64, asset_a_exists%1#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%1#0) // check asset_a exists
                let tmp%2#0: uint64 = (== a_asset#0 asset_a_value%0#0)
                (assert tmp%2#0) // asset a incorrect
                let (asset_b_value%3#0: uint64, asset_b_exists%4#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%4#0) // check asset_b exists
                let tmp%5#0: uint64 = (== b_asset#0 asset_b_value%3#0)
                (assert tmp%5#0) // asset b incorrect
                let tmp%6#0: uint64 = ((gtxns AssetAmount) swap_xfer#0)
                let tmp%7#0: uint64 = (> tmp%6#0 0u)
                (assert tmp%7#0) // amount minimum not met
                let tmp%8#0: bytes = ((gtxns Sender) swap_xfer#0)
                let tmp%9#0: bytes = (txn Sender)
                let tmp%10#0: uint64 = (== tmp%8#0 tmp%9#0)
                (assert tmp%10#0) // sender invalid
                let (asset_a_value%11#0: uint64, asset_a_exists%12#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%12#0) // check asset_a exists
                let (asset_b_value%13#0: uint64, asset_b_exists%14#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%14#0) // check asset_b exists
                let awst_tmp%15#0: uint64 = ((gtxns XferAsset) swap_xfer#0)
                switch awst_tmp%15#0 {asset_a_value%11#0 => block@1, asset_b_value%13#0 => block@2, * => block@3}
            block@1: // switch_case_0_L235
                let in_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let out_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let (asset_a_value%16#0: uint64, asset_a_exists%17#0: uint64) = (app_global_get_ex 0u "asset_a")
                (assert asset_a_exists%17#0) // check asset_a exists
                let out_asset#0: uint64 = asset_a_value%16#0
                goto block@4
            block@2: // switch_case_1_L239
                let in_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_a_balance()
                let out_supply#0: uint64 = examples.amm.contract.ConstantProductAMM._current_b_balance()
                let (asset_b_value%18#0: uint64, asset_b_exists%19#0: uint64) = (app_global_get_ex 0u "asset_b")
                (assert asset_b_exists%19#0) // check asset_b exists
                let out_asset#0: uint64 = asset_b_value%18#0
                goto block@4
            block@3: // switch_case_default_L233
                fail // asset id incorrect
            block@4: // switch_case_next_L233
                let tmp%20#0: uint64 = ((gtxns AssetAmount) swap_xfer#0)
                let to_swap#0: uint64 = examples.amm.contract.tokens_to_swap(tmp%20#0, in_supply#0, out_supply#0)
                let tmp%21#0: uint64 = (> to_swap#0 0u)
                (assert tmp%21#0) // send amount too low
                let tmp%22#0: bytes = (txn Sender)
                examples.amm.contract.do_asset_transfer(tmp%22#0, out_asset#0, to_swap#0)
                examples.amm.contract.ConstantProductAMM._update_ratio()
                return 
        
        subroutine examples.amm.contract.tokens_to_swap(in_amount: uint64, in_supply: uint64, out_supply: uint64) -> uint64:
            block@0: // L352
                let tmp%0#0: uint64 = (- in_supply#0 in_amount#0)
                let tmp%1#0: uint64 = (* 1000u tmp%0#0)
                let tmp%2#0: uint64 = (* in_amount#0 995u)
                let in_total#0: uint64 = (+ tmp%1#0 tmp%2#0)
                let tmp%3#0: uint64 = (* in_amount#0 995u)
                let out_total#0: uint64 = (* tmp%3#0 out_supply#0)
                let tmp%4#0: uint64 = (/ out_total#0 in_total#0)
                return tmp%4#0
        
        subroutine examples.amm.contract.ConstantProductAMM.__init__() -> void:
            block@0: // L28
                (app_global_put "asset_a" 0u)
                (app_global_put "asset_b" 0u)
                let new_state_value%0#0: bytes = (txn Sender)
                (app_global_put "governor" new_state_value%0#0)
                (app_global_put "pool_token" 0u)
                (app_global_put "ratio" 0u)
                return 
    
    program clear-state:
        subroutine examples.amm.contract.ConstantProductAMM.clear_state_program() -> uint64:
            block@0: // L27
                return 1u