{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoUA;;;;;;;;;;AASsB;;AAAA;;AAAA;AAAA;;;AAAA;;;AAA0B;;AAAA;;AAAA;AAA1B;;;AAAA;;;;;;;;;AAAlB;;AACJ;;;AAAA;;;AACuB;;AAAA;;AAAA;AAAR;AAA+B;AAA/B;AAAP;;AAAA;AACK;;AAAA;;AAAA;AAAT;;AACU;AAAA;;AAAA;AAAqB;;AAAA;;AAAA;AAArB;AAAV;AAAA;;AACU;AAAA;;AAAA;AAAqB;;AAAA;;AAAA;AAArB;AAAV;AAAA;;AACG;AAAP;;;AAAA;;;AACe;;AAAA;;AAAA;AAAoB;AAApB;AAAP;;AAAA;AAEO;;AAAA;;AAAA;AAAoB;AAApB;AAAP;;AAAA;;;;;;;AAGR;;;;;;AAEa;;AAAA;;AAAA;AAAA;;AAAA;AACF;;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAGJ;;;;;;AAEwB;;AAAA;;AAAA;AAAT;AAAA;AAAmC;;AAAY;;;AAAZ;AAAnC;AACC;;AAAY;;;AAAZ;AAAA;;AAAA;AACL;;AAAA;AAAP;AAGJ;;;;;;AAEI;AACe;;AACE;;AACE;;;;;;;;AAHnB;;;AAAA;;;;;;AAAA;;;;;AA9TC;;;AAAA;;;AAAA;AAAA;;;;AAMA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAgCA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AAmEA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AA0DA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AA7KG;AAAe;AAAf;AAEA;AAAe;AAAf;AAEgB;;AAAhB;;AAAA;;AAAA;AAEA;AAAkB;AAAlB;AAEA;;AAAa;AAAb;;AAER;;;;;;AAGQ;;;AACA;;AAAA;;AAAA;;AAER;;;;;;AAiBmB;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAP;AACA;;;AACO;;AAAqB;;AAArB;AAAP;AACO;;AAAA;;AAAiB;;AAAjB;AAAP;AAEO;;AAAA;;AAAe;;;;AAAf;AAAP;AACO;;AAAA;;AAAA;AAAP;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACkB;;;AAAlB;AAAA;;AAAA;AAEgB;AAAA;AAAA;AAAA;AAAhB;;;AACgB;AAAA;AAAA;AAAA;AAAhB;;;AACO;AAAA;AAAA;AAAA;AAAP;AAER;;;;;;AA+BQ;;;AAGqB;AAAA;AAAA;AAAA;AAAd;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AACO;;AAAA;;AAAiB;;AAAjB;AAAP;AACO;;AAAA;;AAAiB;;AAAjB;AAAP;AAII;;AAAA;;AAAyB;;AAAzB;AADJ;AAGO;;AAAA;;AAAqB;AAAA;AAAA;AAAA;AAArB;AAAP;AACO;;AAAA;;AAAsB;AAAtB;AAAP;AAII;;AAAA;;AAAyB;;AAAzB;AADJ;AAGO;;AAAA;;AAAqB;AAAA;AAAA;AAAA;AAArB;AAAP;AACO;;AAAA;;AAAsB;AAAtB;AAAP;AAGiB;;;AACH;;;AACA;;;AACD;;AAAA;;AACA;;AAAA;;AALH;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAOH;AAAU;AAAV;AAAP;AAG2B;;AAAkB;AAAA;AAAA;AAAA;AAA7C;;AAAA;;;AACA;;;;AAER;;;;;;AAwBQ;;;AAEqB;AAAA;AAAA;AAAA;AAAd;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AAGI;;AAAA;;AAA4B;;AAA5B;AADJ;AAGO;;AAAA;;AAAyB;AAAzB;AAAP;AACO;;AAAA;;AAAwB;AAAA;AAAA;AAAA;AAAxB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAIe;;;AAGJ;;;AACA;;AAAA;;AAHH;;AAAA;;AAAA;;AAAA;;;AAAR;;AAOW;;;AACA;;AAAA;;AAHH;;AAAA;;AAAA;;AAAA;;;AAAR;;AAO2B;;AAAkB;AAAA;AAAA;AAAA;AAA7C;;AAAA;;;AAG2B;;AAAkB;AAAA;AAAA;AAAA;AAA7C;;AAAA;;;AACA;;;;AAER;;;;;;;;;AAoBQ;;;AAEkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AAEO;;AAAA;;AAAyB;AAAzB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAGS;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AALH;;AAAA;;AAAN;;AAAA;;AAAA;;AAAA;;;;;;AAAA;;;AAUQ;AAJY;;;AAAZ;;AACa;;;AAAb;;AACY;AAAA;AAAA;AAAA;AAAZ;;;;;AAKM;;AAAA;;AADJ;;AAAA;;AAAA;;;AAGH;AAAU;AAAV;AAAP;AAE2B;;AAA3B;;AAAA;;AAAA;;;AACA;;;;AAhBoB;;;AAAZ;;AACa;;;AAAb;;AACY;AAAA;AAAA;AAAA;AAAZ;;;;;;;;AAkBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAP;;;;;AAIY;;;AACA;;;AAAZ;;AAEyB;AAAZ;AAAA;;AAAA;AAAb;;AAAA;;AAAA;;;;;AAKI;;AAAc;AAAA;;AAAA;AAAA;AAAd;AADJ;;;;;AAOI;AACyB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAV;;;;;;AAAA;;AAAA;AAAmC;;;AAAnC;AAA0C;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA1C;AAIH;;AACA;;;;;;AAFC;;;;AADH;;;;AADI;;;;;;;;;AAFd;;;;AAAA;;;;;;AAAA;AAAA;;AADJ;AAaR;;;;;;AAGqB;;AADb;;AAGW;AAHX;;;;;;;AAQ+B;;AAAxB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;;;;AAI4B;;AAArB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;;;;AAI4B;;AAArB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;;;;;;;AArRR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000 4 10000000000"
    },
    "13": {
      "op": "bytecblock \"asset_a\" \"asset_b\" \"pool_token\" \"\" \"governor\" \"ratio\""
    },
    "58": {
      "op": "b block@0"
    },
    "61": {
      "block": "block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "63": {
      "op": "bnz after_if_else@2",
      "stack_out": []
    },
    "66": {
      "op": "b call___init__@1"
    },
    "69": {
      "block": "call___init__@1",
      "stack_in": [],
      "callsub": "examples.amm.contract.ConstantProductAMM.__init__",
      "op": "callsub __init__"
    },
    "72": {
      "op": "b after_if_else@2"
    },
    "75": {
      "block": "after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "78": {
      "op": "return",
      "stack_out": []
    },
    "79": {
      "subroutine": "examples.amm.contract.tokens_to_mint",
      "params": {
        "pool_balance#0": "uint64",
        "a_balance#0": "uint64",
        "b_balance#0": "uint64",
        "a_amount#0": "uint64",
        "b_amount#0": "uint64"
      },
      "block": "tokens_to_mint",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "82": {
      "op": "bytec_3 // \"\"",
      "stack_out": [
        "a_ratio#0"
      ]
    },
    "83": {
      "op": "bytec_3 // \"\"",
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0"
      ]
    },
    "84": {
      "op": "bytec_3 // \"\"",
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0"
      ]
    },
    "85": {
      "op": "bytec_3 // \"\"",
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ]
    },
    "86": {
      "op": "b tokens_to_mint_block@0"
    },
    "89": {
      "block": "tokens_to_mint_block@0",
      "stack_in": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "a_balance#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_balance#0 (copy)"
      ]
    },
    "91": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_amount#0 (copy)",
        "a_balance#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_balance#0 (copy)",
        "a_amount#0 (copy)"
      ]
    },
    "93": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%0#0"
      ]
    },
    "94": {
      "op": "bz tokens_to_mint_bool_false@3",
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ]
    },
    "97": {
      "op": "b tokens_to_mint_and_contd@1"
    },
    "100": {
      "block": "tokens_to_mint_and_contd@1",
      "stack_in": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "b_balance#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "b_balance#0 (copy)"
      ]
    },
    "102": {
      "op": "frame_dig -1",
      "defined_out": [
        "b_amount#0 (copy)",
        "b_balance#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "b_balance#0 (copy)",
        "b_amount#0 (copy)"
      ]
    },
    "104": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%1#0"
      ]
    },
    "105": {
      "op": "bz tokens_to_mint_bool_false@3",
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ]
    },
    "108": {
      "op": "b tokens_to_mint_bool_true@2"
    },
    "111": {
      "block": "tokens_to_mint_bool_true@2",
      "stack_in": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "1"
      ]
    },
    "112": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ]
    },
    "114": {
      "op": "b tokens_to_mint_bool_merge@4"
    },
    "117": {
      "block": "tokens_to_mint_bool_merge@4",
      "stack_in": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "and_result%0#0",
        "is_initial_mint#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "is_initial_mint#0"
      ]
    },
    "119": {
      "op": "bz tokens_to_mint_after_if_else@6",
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ]
    },
    "122": {
      "op": "b tokens_to_mint_if_body@5"
    },
    "125": {
      "block": "tokens_to_mint_if_body@5",
      "stack_in": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "a_amount#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_amount#0 (copy)"
      ]
    },
    "127": {
      "op": "frame_dig -1",
      "defined_out": [
        "a_amount#0 (copy)",
        "b_amount#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_amount#0 (copy)",
        "b_amount#0 (copy)"
      ]
    },
    "129": {
      "op": "*",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%2#0"
      ]
    },
    "130": {
      "op": "sqrt",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%3#0"
      ]
    },
    "131": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%3#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%3#0",
        "1000"
      ]
    },
    "132": {
      "op": "-",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%4#0"
      ]
    },
    "133": {
      "op": "frame_bury 0"
    },
    "135": {
      "retsub": true,
      "op": "retsub"
    },
    "136": {
      "block": "tokens_to_mint_after_if_else@6",
      "stack_in": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ],
      "op": "intc 4 // 10000000000",
      "defined_out": [
        "10000000000"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "10000000000"
      ]
    },
    "138": {
      "op": "frame_dig -5",
      "defined_out": [
        "10000000000",
        "pool_balance#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "10000000000",
        "pool_balance#0 (copy)"
      ]
    },
    "140": {
      "op": "-",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%5#0"
      ]
    },
    "141": {
      "op": "frame_bury 3",
      "defined_out": [],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ]
    },
    "143": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "1000"
      ]
    },
    "144": {
      "op": "frame_dig -2",
      "defined_out": [
        "1000",
        "a_amount#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "1000",
        "a_amount#0 (copy)"
      ]
    },
    "146": {
      "op": "*",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%6#0"
      ]
    },
    "147": {
      "op": "frame_dig -4",
      "defined_out": [
        "a_balance#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%6#0",
        "a_balance#0 (copy)"
      ]
    },
    "149": {
      "op": "frame_dig -2",
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%6#0",
        "a_balance#0 (copy)",
        "a_amount#0 (copy)"
      ]
    },
    "151": {
      "op": "-",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "152": {
      "op": "/",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%8#0"
      ]
    },
    "153": {
      "op": "dup",
      "defined_out": [
        "a_ratio#0",
        "a_ratio#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "a_ratio#0 (copy)"
      ]
    },
    "154": {
      "op": "frame_bury 0",
      "defined_out": [
        "a_ratio#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0"
      ]
    },
    "156": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "1000"
      ]
    },
    "157": {
      "op": "frame_dig -1",
      "defined_out": [
        "1000",
        "a_ratio#0",
        "b_amount#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "1000",
        "b_amount#0 (copy)"
      ]
    },
    "159": {
      "op": "*",
      "defined_out": [
        "a_ratio#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "tmp%9#0"
      ]
    },
    "160": {
      "op": "frame_dig -3",
      "defined_out": [
        "a_ratio#0",
        "b_balance#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "tmp%9#0",
        "b_balance#0 (copy)"
      ]
    },
    "162": {
      "op": "frame_dig -1",
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "tmp%9#0",
        "b_balance#0 (copy)",
        "b_amount#0 (copy)"
      ]
    },
    "164": {
      "op": "-",
      "defined_out": [
        "a_ratio#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "165": {
      "op": "/",
      "defined_out": [
        "a_ratio#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "tmp%11#0"
      ]
    },
    "166": {
      "op": "dup",
      "defined_out": [
        "a_ratio#0",
        "b_ratio#0",
        "b_ratio#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "b_ratio#0",
        "b_ratio#0 (copy)"
      ]
    },
    "167": {
      "op": "frame_bury 2",
      "defined_out": [
        "a_ratio#0",
        "b_ratio#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "b_ratio#0"
      ]
    },
    "169": {
      "op": "<",
      "defined_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%12#0"
      ]
    },
    "170": {
      "op": "bz tokens_to_mint_else_body@8",
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ]
    },
    "173": {
      "op": "b tokens_to_mint_if_body@7"
    },
    "176": {
      "block": "tokens_to_mint_if_body@7",
      "stack_in": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a_ratio#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0"
      ]
    },
    "178": {
      "op": "frame_dig 3",
      "defined_out": [
        "a_ratio#0",
        "issued#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "issued#0"
      ]
    },
    "180": {
      "op": "*",
      "defined_out": [
        "a_ratio#0",
        "issued#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%13#0"
      ]
    },
    "181": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "a_ratio#0",
        "issued#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%13#0",
        "1000"
      ]
    },
    "182": {
      "op": "/",
      "defined_out": [
        "a_ratio#0",
        "issued#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%14#0"
      ]
    },
    "183": {
      "op": "frame_bury 0"
    },
    "185": {
      "retsub": true,
      "op": "retsub"
    },
    "186": {
      "block": "tokens_to_mint_else_body@8",
      "stack_in": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "b_ratio#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "b_ratio#0"
      ]
    },
    "188": {
      "op": "frame_dig 3",
      "defined_out": [
        "b_ratio#0",
        "issued#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "b_ratio#0",
        "issued#0"
      ]
    },
    "190": {
      "op": "*",
      "defined_out": [
        "b_ratio#0",
        "issued#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%15#0"
      ]
    },
    "191": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "b_ratio#0",
        "issued#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%15#0",
        "1000"
      ]
    },
    "192": {
      "op": "/",
      "defined_out": [
        "b_ratio#0",
        "issued#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "tmp%16#0"
      ]
    },
    "193": {
      "op": "frame_bury 0"
    },
    "195": {
      "retsub": true,
      "op": "retsub"
    },
    "196": {
      "block": "tokens_to_mint_bool_false@3",
      "stack_in": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0",
        "0"
      ]
    },
    "197": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "a_ratio#0",
        "and_result%0#0",
        "b_ratio#0",
        "issued#0"
      ]
    },
    "199": {
      "op": "b tokens_to_mint_bool_merge@4"
    },
    "202": {
      "subroutine": "examples.amm.contract.tokens_to_burn",
      "params": {
        "pool_balance#0": "uint64",
        "supply#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "tokens_to_burn",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "205": {
      "op": "b tokens_to_burn_block@0"
    },
    "208": {
      "block": "tokens_to_burn_block@0",
      "stack_in": [],
      "op": "intc 4 // 10000000000",
      "defined_out": [
        "10000000000"
      ],
      "stack_out": [
        "10000000000"
      ]
    },
    "210": {
      "op": "frame_dig -3",
      "defined_out": [
        "10000000000",
        "pool_balance#0 (copy)"
      ],
      "stack_out": [
        "10000000000",
        "pool_balance#0 (copy)"
      ]
    },
    "212": {
      "op": "-",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "213": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "amount#0 (copy)"
      ]
    },
    "215": {
      "op": "-",
      "defined_out": [
        "issued#0"
      ],
      "stack_out": [
        "issued#0"
      ]
    },
    "216": {
      "op": "frame_dig -2",
      "defined_out": [
        "issued#0",
        "supply#0 (copy)"
      ],
      "stack_out": [
        "issued#0",
        "supply#0 (copy)"
      ]
    },
    "218": {
      "op": "frame_dig -1",
      "stack_out": [
        "issued#0",
        "supply#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "220": {
      "op": "*",
      "defined_out": [
        "issued#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "issued#0",
        "tmp%2#0"
      ]
    },
    "221": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%2#0",
        "issued#0"
      ]
    },
    "223": {
      "op": "/",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "224": {
      "retsub": true,
      "op": "retsub"
    },
    "225": {
      "subroutine": "examples.amm.contract.tokens_to_swap",
      "params": {
        "in_amount#0": "uint64",
        "in_supply#0": "uint64",
        "out_supply#0": "uint64"
      },
      "block": "tokens_to_swap",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "228": {
      "op": "b tokens_to_swap_block@0"
    },
    "231": {
      "block": "tokens_to_swap_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "in_supply#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0 (copy)"
      ]
    },
    "233": {
      "op": "frame_dig -3",
      "defined_out": [
        "in_amount#0 (copy)",
        "in_supply#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0 (copy)",
        "in_amount#0 (copy)"
      ]
    },
    "235": {
      "op": "-",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "236": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1000"
      ]
    },
    "237": {
      "op": "*",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "238": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%1#0",
        "in_amount#0 (copy)"
      ]
    },
    "240": {
      "op": "pushint 995 // 995",
      "defined_out": [
        "995",
        "in_amount#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "in_amount#0 (copy)",
        "995"
      ]
    },
    "243": {
      "op": "*",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "244": {
      "op": "+",
      "defined_out": [
        "in_total#0"
      ],
      "stack_out": [
        "in_total#0"
      ]
    },
    "245": {
      "op": "frame_dig -3",
      "stack_out": [
        "in_total#0",
        "in_amount#0 (copy)"
      ]
    },
    "247": {
      "op": "pushint 995 // 995",
      "stack_out": [
        "in_total#0",
        "in_amount#0 (copy)",
        "995"
      ]
    },
    "250": {
      "op": "*",
      "defined_out": [
        "in_total#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "in_total#0",
        "tmp%4#0"
      ]
    },
    "251": {
      "op": "frame_dig -1",
      "defined_out": [
        "in_total#0",
        "out_supply#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "in_total#0",
        "tmp%4#0",
        "out_supply#0 (copy)"
      ]
    },
    "253": {
      "op": "*",
      "defined_out": [
        "in_total#0",
        "out_total#0"
      ],
      "stack_out": [
        "in_total#0",
        "out_total#0"
      ]
    },
    "254": {
      "op": "uncover 1",
      "stack_out": [
        "out_total#0",
        "in_total#0"
      ]
    },
    "256": {
      "op": "/",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "257": {
      "retsub": true,
      "op": "retsub"
    },
    "258": {
      "subroutine": "examples.amm.contract.do_asset_transfer",
      "params": {
        "receiver#0": "bytes",
        "asset#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "do_asset_transfer",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "261": {
      "op": "b do_asset_transfer_block@0"
    },
    "264": {
      "block": "do_asset_transfer_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "265": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "267": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "269": {
      "op": "frame_dig -3",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "271": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "273": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "275": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "277": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "278": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "280": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "281": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "283": {
      "op": "b do_asset_transfer_next_txn@1"
    },
    "286": {
      "block": "do_asset_transfer_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "287": {
      "retsub": true,
      "op": "retsub"
    },
    "288": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.set_governor[routing]",
      "params": {},
      "block": "set_governor",
      "stack_in": [],
      "op": "b set_governor_block@0"
    },
    "291": {
      "block": "set_governor_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "294": {
      "callsub": "examples.amm.contract.ConstantProductAMM.set_governor",
      "op": "callsub examples.amm.contract.ConstantProductAMM.set_governor",
      "stack_out": []
    },
    "297": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "298": {
      "op": "return",
      "stack_out": []
    },
    "299": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.bootstrap[routing]",
      "params": {},
      "block": "bootstrap",
      "stack_in": [],
      "op": "b bootstrap_block@0"
    },
    "302": {
      "block": "bootstrap_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "304": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "305": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "306": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "307": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "309": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "310": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "311": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "312": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint8)%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "315": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ]
    },
    "316": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "318": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint8)%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "reinterpret_Encoded(uint8)%1#0"
      ]
    },
    "321": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "322": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "324": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "gtxn_idx%0#0"
      ]
    },
    "326": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "328": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "330": {
      "callsub": "examples.amm.contract.ConstantProductAMM.bootstrap",
      "op": "callsub examples.amm.contract.ConstantProductAMM.bootstrap",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "333": {
      "op": "itob",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "334": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0x151f7c75"
      ]
    },
    "340": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%6#0"
      ]
    },
    "342": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "343": {
      "op": "log",
      "stack_out": []
    },
    "344": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "345": {
      "op": "return",
      "stack_out": []
    },
    "346": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.mint[routing]",
      "params": {},
      "block": "mint",
      "stack_in": [],
      "op": "b mint_block@0"
    },
    "349": {
      "block": "mint_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "351": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "353": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "354": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "355": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "357": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "358": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "359": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "360": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ]
    },
    "362": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "363": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "364": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "365": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "367": {
      "op": "intc_3 // axfer",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "368": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "369": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "370": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint8)%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "373": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%2#0"
      ]
    },
    "374": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0"
      ]
    },
    "376": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint8)%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0",
        "reinterpret_Encoded(uint8)%1#0"
      ]
    },
    "379": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "380": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "382": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(uint8)%2#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "reinterpret_Encoded(uint8)%2#0"
      ]
    },
    "385": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "386": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "388": {
      "op": "uncover 4",
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "gtxn_idx%0#0"
      ]
    },
    "390": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "392": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%5#0",
        "tmp%7#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0"
      ]
    },
    "394": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%7#0",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "396": {
      "op": "uncover 4",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "398": {
      "callsub": "examples.amm.contract.ConstantProductAMM.mint",
      "op": "callsub examples.amm.contract.ConstantProductAMM.mint",
      "stack_out": []
    },
    "401": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "402": {
      "op": "return",
      "stack_out": []
    },
    "403": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.burn[routing]",
      "params": {},
      "block": "burn",
      "stack_in": [],
      "op": "b burn_block@0"
    },
    "406": {
      "block": "burn_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "408": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "409": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "410": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "411": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "413": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "414": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "415": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "416": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint8)%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "419": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ]
    },
    "420": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "422": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint8)%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "reinterpret_Encoded(uint8)%1#0"
      ]
    },
    "425": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "426": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "428": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint8)%2#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "reinterpret_Encoded(uint8)%2#0"
      ]
    },
    "431": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "432": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "434": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0",
        "gtxn_idx%0#0"
      ]
    },
    "436": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "438": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%6#0",
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "440": {
      "op": "uncover 3",
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "442": {
      "callsub": "examples.amm.contract.ConstantProductAMM.burn",
      "op": "callsub examples.amm.contract.ConstantProductAMM.burn",
      "stack_out": []
    },
    "445": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "446": {
      "op": "return",
      "stack_out": []
    },
    "447": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.swap[routing]",
      "params": {},
      "block": "swap",
      "stack_in": [],
      "op": "b swap_block@0"
    },
    "450": {
      "block": "swap_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "452": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "453": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "454": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "455": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "457": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "458": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "459": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "460": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint8)%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "463": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ]
    },
    "464": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "466": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(uint8)%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "reinterpret_Encoded(uint8)%1#0"
      ]
    },
    "469": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "470": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "472": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "gtxn_idx%0#0"
      ]
    },
    "474": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%4#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "476": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "478": {
      "callsub": "examples.amm.contract.ConstantProductAMM.swap",
      "op": "callsub examples.amm.contract.ConstantProductAMM.swap",
      "stack_out": []
    },
    "481": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "482": {
      "op": "return",
      "stack_out": []
    },
    "483": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "486": {
      "block": "__init___block@0",
      "stack_in": [],
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\""
      ],
      "stack_out": [
        "\"asset_a\""
      ]
    },
    "487": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "\"asset_a\"",
        "0"
      ]
    },
    "488": {
      "op": "app_global_put",
      "stack_out": []
    },
    "489": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\""
      ],
      "stack_out": [
        "\"asset_b\""
      ]
    },
    "490": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"asset_b\"",
        "0"
      ]
    },
    "491": {
      "op": "app_global_put",
      "stack_out": []
    },
    "492": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "494": {
      "op": "bytec 4 // \"governor\"",
      "defined_out": [
        "\"governor\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"governor\""
      ]
    },
    "496": {
      "op": "uncover 1",
      "stack_out": [
        "\"governor\"",
        "tmp%0#0"
      ]
    },
    "498": {
      "op": "app_global_put",
      "stack_out": []
    },
    "499": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\""
      ],
      "stack_out": [
        "\"pool_token\""
      ]
    },
    "500": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"pool_token\"",
        "0"
      ]
    },
    "501": {
      "op": "app_global_put",
      "stack_out": []
    },
    "502": {
      "op": "bytec 5 // \"ratio\"",
      "defined_out": [
        "\"ratio\""
      ],
      "stack_out": [
        "\"ratio\""
      ]
    },
    "504": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"ratio\"",
        "0"
      ]
    },
    "505": {
      "op": "app_global_put",
      "stack_out": []
    },
    "506": {
      "retsub": true,
      "op": "retsub"
    },
    "507": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.set_governor",
      "params": {
        "new_governor#0": "bytes"
      },
      "block": "examples.amm.contract.ConstantProductAMM.set_governor",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "510": {
      "op": "b examples.amm.contract.ConstantProductAMM.set_governor_block@0"
    },
    "513": {
      "block": "examples.amm.contract.ConstantProductAMM.set_governor_block@0",
      "stack_in": [],
      "callsub": "examples.amm.contract.ConstantProductAMM._check_is_governor",
      "op": "callsub _check_is_governor"
    },
    "516": {
      "op": "bytec 4 // \"governor\"",
      "defined_out": [
        "\"governor\""
      ],
      "stack_out": [
        "\"governor\""
      ]
    },
    "518": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"governor\"",
        "new_governor#0 (copy)"
      ],
      "stack_out": [
        "\"governor\"",
        "new_governor#0 (copy)"
      ]
    },
    "520": {
      "op": "app_global_put",
      "stack_out": []
    },
    "521": {
      "retsub": true,
      "op": "retsub"
    },
    "522": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.bootstrap",
      "params": {
        "seed#0": "uint64",
        "a_asset#0": "uint64",
        "b_asset#0": "uint64"
      },
      "block": "examples.amm.contract.ConstantProductAMM.bootstrap",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "525": {
      "op": "b examples.amm.contract.ConstantProductAMM.bootstrap_block@0"
    },
    "528": {
      "block": "examples.amm.contract.ConstantProductAMM.bootstrap_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "529": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pool_token\""
      ]
    },
    "530": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "531": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "532": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "533": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "534": {
      "error": "application has already been bootstrapped",
      "op": "assert // application has already been bootstrapped",
      "stack_out": []
    },
    "535": {
      "callsub": "examples.amm.contract.ConstantProductAMM._check_is_governor",
      "op": "callsub _check_is_governor"
    },
    "538": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "540": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "2"
      ]
    },
    "542": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "543": {
      "error": "group size not 2",
      "op": "assert // group size not 2",
      "stack_out": []
    },
    "544": {
      "op": "frame_dig -3",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "546": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "548": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "550": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "551": {
      "error": "receiver not app address",
      "op": "assert // receiver not app address",
      "stack_out": []
    },
    "552": {
      "op": "frame_dig -3",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "554": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "556": {
      "op": "pushint 300000 // 300000",
      "defined_out": [
        "300000",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "300000"
      ]
    },
    "560": {
      "op": ">=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "561": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": []
    },
    "562": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_asset#0 (copy)"
      ],
      "stack_out": [
        "a_asset#0 (copy)"
      ]
    },
    "564": {
      "op": "frame_dig -1",
      "defined_out": [
        "a_asset#0 (copy)",
        "b_asset#0 (copy)"
      ],
      "stack_out": [
        "a_asset#0 (copy)",
        "b_asset#0 (copy)"
      ]
    },
    "566": {
      "op": "<",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "567": {
      "error": "asset a must be less than asset b",
      "op": "assert // asset a must be less than asset b",
      "stack_out": []
    },
    "568": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\""
      ],
      "stack_out": [
        "\"asset_a\""
      ]
    },
    "569": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"asset_a\"",
        "a_asset#0 (copy)"
      ]
    },
    "571": {
      "op": "app_global_put",
      "stack_out": []
    },
    "572": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\""
      ],
      "stack_out": [
        "\"asset_b\""
      ]
    },
    "573": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"asset_b\"",
        "b_asset#0 (copy)"
      ]
    },
    "575": {
      "op": "app_global_put",
      "stack_out": []
    },
    "576": {
      "callsub": "examples.amm.contract.ConstantProductAMM._create_pool_token",
      "op": "callsub _create_pool_token",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "579": {
      "op": "bytec_2 // \"pool_token\"",
      "stack_out": [
        "tmp%9#0",
        "\"pool_token\""
      ]
    },
    "580": {
      "op": "uncover 1",
      "stack_out": [
        "\"pool_token\"",
        "tmp%9#0"
      ]
    },
    "582": {
      "op": "app_global_put",
      "stack_out": []
    },
    "583": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "584": {
      "op": "bytec_0 // \"asset_a\"",
      "stack_out": [
        "0",
        "\"asset_a\""
      ]
    },
    "585": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "586": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "587": {
      "callsub": "examples.amm.contract.ConstantProductAMM._do_opt_in",
      "op": "callsub _do_opt_in",
      "stack_out": []
    },
    "590": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "591": {
      "op": "bytec_1 // \"asset_b\"",
      "stack_out": [
        "0",
        "\"asset_b\""
      ]
    },
    "592": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "593": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "594": {
      "callsub": "examples.amm.contract.ConstantProductAMM._do_opt_in",
      "op": "callsub _do_opt_in",
      "stack_out": []
    },
    "597": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "598": {
      "op": "bytec_2 // \"pool_token\"",
      "stack_out": [
        "0",
        "\"pool_token\""
      ]
    },
    "599": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "600": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "601": {
      "retsub": true,
      "op": "retsub"
    },
    "602": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.mint",
      "params": {
        "a_xfer#0": "uint64",
        "b_xfer#0": "uint64",
        "pool_asset#0": "uint64",
        "a_asset#0": "uint64",
        "b_asset#0": "uint64"
      },
      "block": "examples.amm.contract.ConstantProductAMM.mint",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "605": {
      "op": "b examples.amm.contract.ConstantProductAMM.mint_block@0"
    },
    "608": {
      "block": "examples.amm.contract.ConstantProductAMM.mint_block@0",
      "stack_in": [],
      "callsub": "examples.amm.contract.ConstantProductAMM._check_bootstrapped",
      "op": "callsub _check_bootstrapped"
    },
    "611": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "612": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pool_token\""
      ]
    },
    "613": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "614": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "615": {
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_value%0#0",
        "pool_asset#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "pool_asset#0 (copy)"
      ]
    },
    "617": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "618": {
      "error": "asset pool incorrect",
      "op": "assert // asset pool incorrect",
      "stack_out": []
    },
    "619": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "620": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset_a\""
      ]
    },
    "621": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "622": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "623": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_asset#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "a_asset#0 (copy)"
      ]
    },
    "625": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "626": {
      "error": "asset a incorrect",
      "op": "assert // asset a incorrect",
      "stack_out": []
    },
    "627": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "628": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset_b\""
      ]
    },
    "629": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "630": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "631": {
      "op": "frame_dig -1",
      "defined_out": [
        "b_asset#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "b_asset#0 (copy)"
      ]
    },
    "633": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "634": {
      "error": "asset b incorrect",
      "op": "assert // asset b incorrect",
      "stack_out": []
    },
    "635": {
      "op": "frame_dig -5",
      "defined_out": [
        "a_xfer#0 (copy)"
      ],
      "stack_out": [
        "a_xfer#0 (copy)"
      ]
    },
    "637": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "639": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "641": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "642": {
      "error": "sender invalid",
      "op": "assert // sender invalid",
      "stack_out": []
    },
    "643": {
      "op": "frame_dig -4",
      "defined_out": [
        "b_xfer#0 (copy)"
      ],
      "stack_out": [
        "b_xfer#0 (copy)"
      ]
    },
    "645": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "647": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "649": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "650": {
      "error": "sender invalid",
      "op": "assert // sender invalid",
      "stack_out": []
    },
    "651": {
      "op": "frame_dig -5",
      "stack_out": [
        "a_xfer#0 (copy)"
      ]
    },
    "653": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "655": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "657": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "658": {
      "error": "receiver not app address",
      "op": "assert // receiver not app address",
      "stack_out": []
    },
    "659": {
      "op": "frame_dig -5",
      "stack_out": [
        "a_xfer#0 (copy)"
      ]
    },
    "661": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "663": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "0"
      ]
    },
    "664": {
      "op": "bytec_0 // \"asset_a\"",
      "stack_out": [
        "tmp%12#0",
        "0",
        "\"asset_a\""
      ]
    },
    "665": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "666": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "tmp%12#0",
        "maybe_value%3#0"
      ]
    },
    "667": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "668": {
      "error": "asset a incorrect",
      "op": "assert // asset a incorrect",
      "stack_out": []
    },
    "669": {
      "op": "frame_dig -5",
      "stack_out": [
        "a_xfer#0 (copy)"
      ]
    },
    "671": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "673": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "674": {
      "op": ">",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "675": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": []
    },
    "676": {
      "op": "frame_dig -4",
      "stack_out": [
        "b_xfer#0 (copy)"
      ]
    },
    "678": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "680": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "682": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "683": {
      "error": "receiver not app address",
      "op": "assert // receiver not app address",
      "stack_out": []
    },
    "684": {
      "op": "frame_dig -4",
      "stack_out": [
        "b_xfer#0 (copy)"
      ]
    },
    "686": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "688": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "689": {
      "op": "bytec_1 // \"asset_b\"",
      "stack_out": [
        "tmp%19#0",
        "0",
        "\"asset_b\""
      ]
    },
    "690": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "691": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "tmp%19#0",
        "maybe_value%4#0"
      ]
    },
    "692": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "693": {
      "error": "asset b incorrect",
      "op": "assert // asset b incorrect",
      "stack_out": []
    },
    "694": {
      "op": "frame_dig -4",
      "stack_out": [
        "b_xfer#0 (copy)"
      ]
    },
    "696": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "698": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%21#0",
        "0"
      ]
    },
    "699": {
      "op": ">",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "700": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": []
    },
    "701": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_pool_balance",
      "op": "callsub _current_pool_balance",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "704": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "707": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "710": {
      "op": "frame_dig -5",
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "a_xfer#0 (copy)"
      ]
    },
    "712": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "714": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "b_xfer#0 (copy)"
      ]
    },
    "716": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "718": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%23#0"
      ]
    },
    "720": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "722": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "724": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%27#0",
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "726": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "728": {
      "callsub": "examples.amm.contract.tokens_to_mint",
      "op": "callsub tokens_to_mint",
      "defined_out": [
        "to_mint#0"
      ],
      "stack_out": [
        "to_mint#0"
      ]
    },
    "731": {
      "op": "dup",
      "defined_out": [
        "to_mint#0",
        "to_mint#0 (copy)"
      ],
      "stack_out": [
        "to_mint#0",
        "to_mint#0 (copy)"
      ]
    },
    "732": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_mint#0",
        "to_mint#0 (copy)",
        "0"
      ]
    },
    "733": {
      "op": ">",
      "defined_out": [
        "tmp%29#0",
        "to_mint#0"
      ],
      "stack_out": [
        "to_mint#0",
        "tmp%29#0"
      ]
    },
    "734": {
      "error": "send amount too low",
      "op": "assert // send amount too low",
      "stack_out": [
        "to_mint#0"
      ]
    },
    "735": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%30#0",
        "to_mint#0"
      ],
      "stack_out": [
        "to_mint#0",
        "tmp%30#0"
      ]
    },
    "737": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_mint#0",
        "tmp%30#0",
        "0"
      ]
    },
    "738": {
      "op": "bytec_2 // \"pool_token\"",
      "stack_out": [
        "to_mint#0",
        "tmp%30#0",
        "0",
        "\"pool_token\""
      ]
    },
    "739": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%30#0",
        "to_mint#0"
      ],
      "stack_out": [
        "to_mint#0",
        "tmp%30#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "740": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "to_mint#0",
        "tmp%30#0",
        "maybe_value%5#0"
      ]
    },
    "741": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%30#0",
        "maybe_value%5#0",
        "to_mint#0"
      ]
    },
    "743": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": []
    },
    "746": {
      "callsub": "examples.amm.contract.ConstantProductAMM._update_ratio",
      "op": "callsub _update_ratio"
    },
    "749": {
      "retsub": true,
      "op": "retsub"
    },
    "750": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.burn",
      "params": {
        "pool_xfer#0": "uint64",
        "pool_asset#0": "uint64",
        "a_asset#0": "uint64",
        "b_asset#0": "uint64"
      },
      "block": "examples.amm.contract.ConstantProductAMM.burn",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "753": {
      "op": "b examples.amm.contract.ConstantProductAMM.burn_block@0"
    },
    "756": {
      "block": "examples.amm.contract.ConstantProductAMM.burn_block@0",
      "stack_in": [],
      "callsub": "examples.amm.contract.ConstantProductAMM._check_bootstrapped",
      "op": "callsub _check_bootstrapped"
    },
    "759": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "760": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pool_token\""
      ]
    },
    "761": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "762": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "763": {
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_value%0#0",
        "pool_asset#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "pool_asset#0 (copy)"
      ]
    },
    "765": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "766": {
      "error": "asset pool incorrect",
      "op": "assert // asset pool incorrect",
      "stack_out": []
    },
    "767": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "768": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset_a\""
      ]
    },
    "769": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "770": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "771": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_asset#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "a_asset#0 (copy)"
      ]
    },
    "773": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "774": {
      "error": "asset a incorrect",
      "op": "assert // asset a incorrect",
      "stack_out": []
    },
    "775": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "776": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset_b\""
      ]
    },
    "777": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "778": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "779": {
      "op": "frame_dig -1",
      "defined_out": [
        "b_asset#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "b_asset#0 (copy)"
      ]
    },
    "781": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "782": {
      "error": "asset b incorrect",
      "op": "assert // asset b incorrect",
      "stack_out": []
    },
    "783": {
      "op": "frame_dig -4",
      "defined_out": [
        "pool_xfer#0 (copy)"
      ],
      "stack_out": [
        "pool_xfer#0 (copy)"
      ]
    },
    "785": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "787": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "789": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "790": {
      "error": "receiver not app address",
      "op": "assert // receiver not app address",
      "stack_out": []
    },
    "791": {
      "op": "frame_dig -4",
      "stack_out": [
        "pool_xfer#0 (copy)"
      ]
    },
    "793": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "795": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "796": {
      "op": ">",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "797": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": []
    },
    "798": {
      "op": "frame_dig -4",
      "stack_out": [
        "pool_xfer#0 (copy)"
      ]
    },
    "800": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "802": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "803": {
      "op": "bytec_2 // \"pool_token\"",
      "stack_out": [
        "tmp%8#0",
        "0",
        "\"pool_token\""
      ]
    },
    "804": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "805": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "tmp%8#0",
        "maybe_value%3#0"
      ]
    },
    "806": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "807": {
      "error": "asset pool incorrect",
      "op": "assert // asset pool incorrect",
      "stack_out": []
    },
    "808": {
      "op": "frame_dig -4",
      "stack_out": [
        "pool_xfer#0 (copy)"
      ]
    },
    "810": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "812": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "814": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "815": {
      "error": "sender invalid",
      "op": "assert // sender invalid",
      "stack_out": []
    },
    "816": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_pool_balance",
      "op": "callsub _current_pool_balance",
      "defined_out": [
        "pool_balance#0"
      ],
      "stack_out": [
        "pool_balance#0"
      ]
    },
    "819": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "pool_balance#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "pool_balance#0",
        "tmp%14#0"
      ]
    },
    "822": {
      "op": "frame_dig -4",
      "stack_out": [
        "pool_balance#0",
        "tmp%14#0",
        "pool_xfer#0 (copy)"
      ]
    },
    "824": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "pool_balance#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "pool_balance#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "826": {
      "op": "dig 2",
      "defined_out": [
        "pool_balance#0",
        "pool_balance#0 (copy)",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "pool_balance#0",
        "tmp%14#0",
        "tmp%15#0",
        "pool_balance#0 (copy)"
      ]
    },
    "828": {
      "op": "uncover 2",
      "stack_out": [
        "pool_balance#0",
        "tmp%15#0",
        "pool_balance#0 (copy)",
        "tmp%14#0"
      ]
    },
    "830": {
      "op": "uncover 2",
      "stack_out": [
        "pool_balance#0",
        "pool_balance#0 (copy)",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "832": {
      "callsub": "examples.amm.contract.tokens_to_burn",
      "op": "callsub tokens_to_burn",
      "defined_out": [
        "pool_balance#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "pool_balance#0",
        "tmp%16#0"
      ]
    },
    "835": {
      "op": "cover 1",
      "defined_out": [
        "a_amt#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "a_amt#0",
        "pool_balance#0"
      ]
    },
    "837": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "a_amt#0",
        "pool_balance#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "a_amt#0",
        "pool_balance#0",
        "tmp%17#0"
      ]
    },
    "840": {
      "op": "frame_dig -4",
      "stack_out": [
        "a_amt#0",
        "pool_balance#0",
        "tmp%17#0",
        "pool_xfer#0 (copy)"
      ]
    },
    "842": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "a_amt#0",
        "pool_balance#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "a_amt#0",
        "pool_balance#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "844": {
      "op": "uncover 2",
      "stack_out": [
        "a_amt#0",
        "tmp%17#0",
        "tmp%18#0",
        "pool_balance#0"
      ]
    },
    "846": {
      "op": "uncover 2",
      "stack_out": [
        "a_amt#0",
        "tmp%18#0",
        "pool_balance#0",
        "tmp%17#0"
      ]
    },
    "848": {
      "op": "uncover 2",
      "stack_out": [
        "a_amt#0",
        "pool_balance#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "850": {
      "callsub": "examples.amm.contract.tokens_to_burn",
      "op": "callsub tokens_to_burn",
      "defined_out": [
        "a_amt#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "a_amt#0",
        "tmp%19#0"
      ]
    },
    "853": {
      "op": "cover 1",
      "defined_out": [
        "a_amt#0",
        "b_amt#0"
      ],
      "stack_out": [
        "b_amt#0",
        "a_amt#0"
      ]
    },
    "855": {
      "op": "txn Sender",
      "defined_out": [
        "a_amt#0",
        "b_amt#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "b_amt#0",
        "a_amt#0",
        "tmp%20#0"
      ]
    },
    "857": {
      "op": "intc_0 // 0",
      "stack_out": [
        "b_amt#0",
        "a_amt#0",
        "tmp%20#0",
        "0"
      ]
    },
    "858": {
      "op": "bytec_0 // \"asset_a\"",
      "stack_out": [
        "b_amt#0",
        "a_amt#0",
        "tmp%20#0",
        "0",
        "\"asset_a\""
      ]
    },
    "859": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a_amt#0",
        "b_amt#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "b_amt#0",
        "a_amt#0",
        "tmp%20#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "860": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "b_amt#0",
        "a_amt#0",
        "tmp%20#0",
        "maybe_value%4#0"
      ]
    },
    "861": {
      "op": "uncover 2",
      "stack_out": [
        "b_amt#0",
        "tmp%20#0",
        "maybe_value%4#0",
        "a_amt#0"
      ]
    },
    "863": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": [
        "b_amt#0"
      ]
    },
    "866": {
      "op": "txn Sender",
      "defined_out": [
        "b_amt#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "b_amt#0",
        "tmp%21#0"
      ]
    },
    "868": {
      "op": "intc_0 // 0",
      "stack_out": [
        "b_amt#0",
        "tmp%21#0",
        "0"
      ]
    },
    "869": {
      "op": "bytec_1 // \"asset_b\"",
      "stack_out": [
        "b_amt#0",
        "tmp%21#0",
        "0",
        "\"asset_b\""
      ]
    },
    "870": {
      "op": "app_global_get_ex",
      "defined_out": [
        "b_amt#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "b_amt#0",
        "tmp%21#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "871": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "b_amt#0",
        "tmp%21#0",
        "maybe_value%5#0"
      ]
    },
    "872": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%21#0",
        "maybe_value%5#0",
        "b_amt#0"
      ]
    },
    "874": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": []
    },
    "877": {
      "callsub": "examples.amm.contract.ConstantProductAMM._update_ratio",
      "op": "callsub _update_ratio"
    },
    "880": {
      "retsub": true,
      "op": "retsub"
    },
    "881": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.swap",
      "params": {
        "swap_xfer#0": "uint64",
        "a_asset#0": "uint64",
        "b_asset#0": "uint64"
      },
      "block": "examples.amm.contract.ConstantProductAMM.swap",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "884": {
      "op": "bytec_3 // \"\"",
      "stack_out": [
        "in_supply#0"
      ]
    },
    "885": {
      "op": "bytec_3 // \"\"",
      "stack_out": [
        "in_supply#0",
        "out_asset#0"
      ]
    },
    "886": {
      "op": "bytec_3 // \"\"",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "887": {
      "op": "b examples.amm.contract.ConstantProductAMM.swap_block@0"
    },
    "890": {
      "block": "examples.amm.contract.ConstantProductAMM.swap_block@0",
      "stack_in": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "callsub": "examples.amm.contract.ConstantProductAMM._check_bootstrapped",
      "op": "callsub _check_bootstrapped"
    },
    "893": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0"
      ]
    },
    "894": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0",
        "\"asset_a\""
      ]
    },
    "895": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "896": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%0#0"
      ]
    },
    "897": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_asset#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%0#0",
        "a_asset#0 (copy)"
      ]
    },
    "899": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%0#0"
      ]
    },
    "900": {
      "error": "asset a incorrect",
      "op": "assert // asset a incorrect",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "901": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0"
      ]
    },
    "902": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0",
        "\"asset_b\""
      ]
    },
    "903": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "904": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%1#0"
      ]
    },
    "905": {
      "op": "frame_dig -1",
      "defined_out": [
        "b_asset#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%1#0",
        "b_asset#0 (copy)"
      ]
    },
    "907": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%1#0"
      ]
    },
    "908": {
      "error": "asset b incorrect",
      "op": "assert // asset b incorrect",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "909": {
      "op": "frame_dig -3",
      "defined_out": [
        "swap_xfer#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "swap_xfer#0 (copy)"
      ]
    },
    "911": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%2#0"
      ]
    },
    "913": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%2#0",
        "0"
      ]
    },
    "914": {
      "op": ">",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%3#0"
      ]
    },
    "915": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "916": {
      "op": "frame_dig -3",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "swap_xfer#0 (copy)"
      ]
    },
    "918": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%4#0"
      ]
    },
    "920": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "922": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%6#0"
      ]
    },
    "923": {
      "error": "sender invalid",
      "op": "assert // sender invalid",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "924": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0"
      ]
    },
    "925": {
      "op": "bytec_0 // \"asset_a\"",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0",
        "\"asset_a\""
      ]
    },
    "926": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "927": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%2#0"
      ]
    },
    "928": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "929": {
      "op": "bytec_1 // \"asset_b\"",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%2#0",
        "0",
        "\"asset_b\""
      ]
    },
    "930": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "931": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "932": {
      "op": "frame_dig -3",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "swap_xfer#0 (copy)"
      ]
    },
    "934": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "tmp%7#0"
      ]
    },
    "936": {
      "op": "uncover 2",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%3#0",
        "tmp%7#0",
        "maybe_value%2#0"
      ]
    },
    "938": {
      "op": "uncover 2",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%7#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "940": {
      "op": "uncover 2",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "tmp%7#0"
      ]
    },
    "942": {
      "op": "match examples.amm.contract.ConstantProductAMM.swap_switch_case_0@1 examples.amm.contract.ConstantProductAMM.swap_switch_case_1@2",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "948": {
      "op": "b examples.amm.contract.ConstantProductAMM.swap_switch_case_default@3"
    },
    "951": {
      "error": "asset id incorrect",
      "block": "examples.amm.contract.ConstantProductAMM.swap_switch_case_default@3",
      "stack_in": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "op": "err // asset id incorrect"
    },
    "952": {
      "block": "examples.amm.contract.ConstantProductAMM.swap_switch_case_1@2",
      "stack_in": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%10#0"
      ]
    },
    "955": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "957": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%11#0"
      ]
    },
    "960": {
      "op": "frame_bury 2",
      "defined_out": [],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "962": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0"
      ]
    },
    "963": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0",
        "\"asset_b\""
      ]
    },
    "964": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "965": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%5#0"
      ]
    },
    "966": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "968": {
      "op": "b examples.amm.contract.ConstantProductAMM.swap_switch_case_next@4"
    },
    "971": {
      "block": "examples.amm.contract.ConstantProductAMM.swap_switch_case_next@4",
      "stack_in": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "swap_xfer#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "swap_xfer#0 (copy)"
      ]
    },
    "973": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%12#0"
      ]
    },
    "975": {
      "op": "frame_dig 0",
      "defined_out": [
        "in_supply#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%12#0",
        "in_supply#0"
      ]
    },
    "977": {
      "op": "frame_dig 2",
      "defined_out": [
        "in_supply#0",
        "out_supply#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%12#0",
        "in_supply#0",
        "out_supply#0"
      ]
    },
    "979": {
      "callsub": "examples.amm.contract.tokens_to_swap",
      "op": "callsub tokens_to_swap",
      "defined_out": [
        "in_supply#0",
        "out_supply#0",
        "to_swap#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "to_swap#0"
      ]
    },
    "982": {
      "op": "dup",
      "defined_out": [
        "in_supply#0",
        "out_supply#0",
        "to_swap#0",
        "to_swap#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "to_swap#0",
        "to_swap#0 (copy)"
      ]
    },
    "983": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "in_supply#0",
        "out_supply#0",
        "to_swap#0",
        "to_swap#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "to_swap#0",
        "to_swap#0 (copy)",
        "0"
      ]
    },
    "984": {
      "op": ">",
      "defined_out": [
        "in_supply#0",
        "out_supply#0",
        "tmp%14#0",
        "to_swap#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "to_swap#0",
        "tmp%14#0"
      ]
    },
    "985": {
      "error": "send amount too low",
      "op": "assert // send amount too low",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "to_swap#0"
      ]
    },
    "986": {
      "op": "txn Sender",
      "defined_out": [
        "in_supply#0",
        "out_supply#0",
        "tmp%15#0",
        "to_swap#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "to_swap#0",
        "tmp%15#0"
      ]
    },
    "988": {
      "op": "frame_dig 1",
      "defined_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%15#0",
        "to_swap#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "to_swap#0",
        "tmp%15#0",
        "out_asset#0"
      ]
    },
    "990": {
      "op": "uncover 2",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%15#0",
        "out_asset#0",
        "to_swap#0"
      ]
    },
    "992": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "995": {
      "callsub": "examples.amm.contract.ConstantProductAMM._update_ratio",
      "op": "callsub _update_ratio"
    },
    "998": {
      "retsub": true,
      "op": "retsub"
    },
    "999": {
      "block": "examples.amm.contract.ConstantProductAMM.swap_switch_case_0@1",
      "stack_in": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%8#0"
      ]
    },
    "1002": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "1004": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%9#0"
      ]
    },
    "1007": {
      "op": "frame_bury 2",
      "defined_out": [],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "1009": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0"
      ]
    },
    "1010": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0",
        "\"asset_a\""
      ]
    },
    "1011": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1012": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%4#0"
      ]
    },
    "1013": {
      "op": "frame_bury 1",
      "defined_out": [],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "1015": {
      "op": "b examples.amm.contract.ConstantProductAMM.swap_switch_case_next@4"
    },
    "1018": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._check_bootstrapped",
      "params": {},
      "block": "_check_bootstrapped",
      "stack_in": [],
      "op": "b _check_bootstrapped_block@0"
    },
    "1021": {
      "block": "_check_bootstrapped_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1022": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pool_token\""
      ]
    },
    "1023": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1024": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1025": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "1026": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1027": {
      "error": "bootstrap method needs to be called first",
      "op": "assert // bootstrap method needs to be called first",
      "stack_out": []
    },
    "1028": {
      "retsub": true,
      "op": "retsub"
    },
    "1029": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._update_ratio",
      "params": {},
      "block": "_update_ratio",
      "stack_in": [],
      "op": "b _update_ratio_block@0"
    },
    "1032": {
      "block": "_update_ratio_block@0",
      "stack_in": [],
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "a_balance#0"
      ],
      "stack_out": [
        "a_balance#0"
      ]
    },
    "1035": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "a_balance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a_balance#0",
        "tmp%1#0"
      ]
    },
    "1038": {
      "op": "cover 1",
      "defined_out": [
        "a_balance#0",
        "b_balance#0"
      ],
      "stack_out": [
        "b_balance#0",
        "a_balance#0"
      ]
    },
    "1040": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "a_balance#0",
        "b_balance#0"
      ],
      "stack_out": [
        "b_balance#0",
        "a_balance#0",
        "1000"
      ]
    },
    "1041": {
      "op": "*",
      "defined_out": [
        "b_balance#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "b_balance#0",
        "tmp%2#0"
      ]
    },
    "1042": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%2#0",
        "b_balance#0"
      ]
    },
    "1044": {
      "op": "/",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1045": {
      "op": "bytec 5 // \"ratio\"",
      "defined_out": [
        "\"ratio\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"ratio\""
      ]
    },
    "1047": {
      "op": "uncover 1",
      "stack_out": [
        "\"ratio\"",
        "tmp%3#0"
      ]
    },
    "1049": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1050": {
      "retsub": true,
      "op": "retsub"
    },
    "1051": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._check_is_governor",
      "params": {},
      "block": "_check_is_governor",
      "stack_in": [],
      "op": "b _check_is_governor_block@0"
    },
    "1054": {
      "block": "_check_is_governor_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1056": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1057": {
      "op": "bytec 4 // \"governor\"",
      "defined_out": [
        "\"governor\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"governor\""
      ]
    },
    "1059": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1060": {
      "error": "check self.governor exists",
      "op": "assert // check self.governor exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1061": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1062": {
      "error": "Only the account set in global_state.governor may call this method",
      "op": "assert // Only the account set in global_state.governor may call this method",
      "stack_out": []
    },
    "1063": {
      "retsub": true,
      "op": "retsub"
    },
    "1064": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._create_pool_token",
      "params": {},
      "block": "_create_pool_token",
      "stack_in": [],
      "op": "b _create_pool_token_block@0"
    },
    "1067": {
      "block": "_create_pool_token_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "1068": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1069": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset_a\""
      ]
    },
    "1070": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1071": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1072": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1074": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1075": {
      "op": "pushbytes 0x4450542d",
      "defined_out": [
        "0x4450542d",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "0x4450542d"
      ]
    },
    "1081": {
      "op": "uncover 1",
      "stack_out": [
        "0x4450542d",
        "value%0#0"
      ]
    },
    "1083": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1084": {
      "op": "pushbytes 0x2d",
      "defined_out": [
        "0x2d",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x2d"
      ]
    },
    "1087": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1088": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1089": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"asset_b\""
      ]
    },
    "1090": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1091": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "1092": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%1#0",
        "tmp%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "1094": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "tmp%1#0",
        "value%1#0"
      ]
    },
    "1095": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "1096": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1098": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "1100": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1102": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "1104": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "3"
      ]
    },
    "1106": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "1108": {
      "op": "intc 4 // 10000000000",
      "defined_out": [
        "10000000000",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "10000000000"
      ]
    },
    "1110": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "1112": {
      "op": "pushbytes 0x646274",
      "defined_out": [
        "0x646274",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "0x646274"
      ]
    },
    "1117": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "1119": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "1121": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "1123": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1125": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1126": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1128": {
      "op": "b _create_pool_token_next_txn@1"
    },
    "1131": {
      "block": "_create_pool_token_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "1132": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1134": {
      "retsub": true,
      "op": "retsub"
    },
    "1135": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._do_opt_in",
      "params": {
        "asset#0": "uint64"
      },
      "block": "_do_opt_in",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1138": {
      "op": "b _do_opt_in_block@0"
    },
    "1141": {
      "block": "_do_opt_in_block@0",
      "stack_in": [],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1143": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "asset#0 (copy)"
      ]
    },
    "1145": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "asset#0 (copy)",
        "0"
      ]
    },
    "1146": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": []
    },
    "1149": {
      "retsub": true,
      "op": "retsub"
    },
    "1150": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._current_pool_balance",
      "params": {},
      "block": "_current_pool_balance",
      "stack_in": [],
      "op": "b _current_pool_balance_block@0"
    },
    "1153": {
      "block": "_current_pool_balance_block@0",
      "stack_in": [],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1155": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1156": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"pool_token\""
      ]
    },
    "1157": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1158": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1159": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1161": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1162": {
      "retsub": true,
      "op": "retsub"
    },
    "1163": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "params": {},
      "block": "_current_a_balance",
      "stack_in": [],
      "op": "b _current_a_balance_block@0"
    },
    "1166": {
      "block": "_current_a_balance_block@0",
      "stack_in": [],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1168": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1169": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"asset_a\""
      ]
    },
    "1170": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1171": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1172": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1174": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1175": {
      "retsub": true,
      "op": "retsub"
    },
    "1176": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "params": {},
      "block": "_current_b_balance",
      "stack_in": [],
      "op": "b _current_b_balance_block@0"
    },
    "1179": {
      "block": "_current_b_balance_block@0",
      "stack_in": [],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1181": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1182": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"asset_b\""
      ]
    },
    "1183": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1184": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1185": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1187": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1188": {
      "retsub": true,
      "op": "retsub"
    },
    "1189": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "b approval_program_block@0"
    },
    "1192": {
      "block": "approval_program_block@0",
      "stack_in": [],
      "op": "b approval_program_block@1"
    },
    "1195": {
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1197": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1198": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1200": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "1201": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1202": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1203": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "1204": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "1205": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "1207": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "1209": {
      "op": "intc_3 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "1210": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "1212": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "1214": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "1216": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "1218": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "1220": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "1222": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "1224": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "1226": {
      "op": "match approval_program_call_NoOp approval_program_create_NoOp approval_program_call_OptIn approval_program_create_OptIn approval_program_call_CloseOut approval_program_create_CloseOut approval_program_call_ClearState approval_program_create_ClearState approval_program_call_UpdateApplication approval_program_create_UpdateApplication approval_program_call_DeleteApplication approval_program_create_DeleteApplication",
      "stack_out": []
    },
    "1252": {
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "1255": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "approval_program_*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "1256": {
      "block": "approval_program_create_DeleteApplication",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "1259": {
      "block": "approval_program_call_DeleteApplication",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "1262": {
      "block": "approval_program_create_UpdateApplication",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "1265": {
      "block": "approval_program_call_UpdateApplication",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "1268": {
      "block": "approval_program_create_ClearState",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "1271": {
      "block": "approval_program_call_ClearState",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "1274": {
      "block": "approval_program_create_CloseOut",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "1277": {
      "block": "approval_program_call_CloseOut",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "1280": {
      "block": "approval_program_create_OptIn",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "1283": {
      "block": "approval_program_call_OptIn",
      "stack_in": [],
      "op": "b approval_program_*NOT_IMPLEMENTED"
    },
    "1286": {
      "block": "approval_program_create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1288": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "1289": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1290": {
      "op": "bz approval_program_else_body@14",
      "stack_out": []
    },
    "1293": {
      "op": "b approval_program___algopy_default_create@11"
    },
    "1296": {
      "block": "approval_program___algopy_default_create@11",
      "stack_in": [],
      "op": "b approval_program_block@12"
    },
    "1299": {
      "block": "approval_program_block@12",
      "stack_in": [],
      "op": "b approval_program_after_inlined_examples.amm.contract.ConstantProductAMM.__algopy_default_create@13"
    },
    "1302": {
      "block": "approval_program_after_inlined_examples.amm.contract.ConstantProductAMM.__algopy_default_create@13",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1303": {
      "op": "return",
      "stack_out": []
    },
    "1304": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "approval_program_else_body@14",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "1305": {
      "block": "approval_program_call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1308": {
      "op": "pushbytes 0xddc4cb4a // method \"set_governor(address)void\"",
      "defined_out": [
        "Method(set_governor(address)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(set_governor(address)void)"
      ]
    },
    "1314": {
      "op": "pushbytes 0x6b59d965 // method \"bootstrap(pay,asset,asset)uint64\"",
      "defined_out": [
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(set_governor(address)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(set_governor(address)void)",
        "Method(bootstrap(pay,asset,asset)uint64)"
      ]
    },
    "1320": {
      "op": "pushbytes 0x5cbf1e2d // method \"mint(axfer,axfer,asset,asset,asset)void\"",
      "defined_out": [
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(set_governor(address)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(set_governor(address)void)",
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)"
      ]
    },
    "1326": {
      "op": "pushbytes 0x1436c2ac // method \"burn(axfer,asset,asset,asset)void\"",
      "defined_out": [
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(burn(axfer,asset,asset,asset)void)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(set_governor(address)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(set_governor(address)void)",
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(burn(axfer,asset,asset,asset)void)"
      ]
    },
    "1332": {
      "op": "pushbytes 0x4a88e055 // method \"swap(axfer,asset,asset)void\"",
      "defined_out": [
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(burn(axfer,asset,asset,asset)void)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(set_governor(address)void)",
        "Method(swap(axfer,asset,asset)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(set_governor(address)void)",
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(burn(axfer,asset,asset,asset)void)",
        "Method(swap(axfer,asset,asset)void)"
      ]
    },
    "1338": {
      "op": "uncover 5",
      "stack_out": [
        "Method(set_governor(address)void)",
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(burn(axfer,asset,asset,asset)void)",
        "Method(swap(axfer,asset,asset)void)",
        "tmp%5#0"
      ]
    },
    "1340": {
      "op": "match approval_program_set_governor_route@3 approval_program_bootstrap_route@4 approval_program_mint_route@5 approval_program_burn_route@6 approval_program_swap_route@7",
      "stack_out": []
    },
    "1352": {
      "op": "b approval_program_switch_case_default@8"
    },
    "1355": {
      "block": "approval_program_switch_case_default@8",
      "stack_in": [],
      "op": "b approval_program_switch_case_next@9"
    },
    "1358": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "approval_program_switch_case_next@9",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "1359": {
      "block": "approval_program_swap_route@7",
      "stack_in": [],
      "callsub": "examples.amm.contract.ConstantProductAMM.swap[routing]",
      "op": "callsub swap"
    },
    "1362": {
      "op": "b approval_program_switch_case_next@9"
    },
    "1365": {
      "block": "approval_program_burn_route@6",
      "stack_in": [],
      "callsub": "examples.amm.contract.ConstantProductAMM.burn[routing]",
      "op": "callsub burn"
    },
    "1368": {
      "op": "b approval_program_switch_case_next@9"
    },
    "1371": {
      "block": "approval_program_mint_route@5",
      "stack_in": [],
      "callsub": "examples.amm.contract.ConstantProductAMM.mint[routing]",
      "op": "callsub mint"
    },
    "1374": {
      "op": "b approval_program_switch_case_next@9"
    },
    "1377": {
      "block": "approval_program_bootstrap_route@4",
      "stack_in": [],
      "callsub": "examples.amm.contract.ConstantProductAMM.bootstrap[routing]",
      "op": "callsub bootstrap"
    },
    "1380": {
      "op": "b approval_program_switch_case_next@9"
    },
    "1383": {
      "block": "approval_program_set_governor_route@3",
      "stack_in": [],
      "callsub": "examples.amm.contract.ConstantProductAMM.set_governor[routing]",
      "op": "callsub set_governor"
    },
    "1386": {
      "op": "b approval_program_switch_case_next@9"
    }
  }
}