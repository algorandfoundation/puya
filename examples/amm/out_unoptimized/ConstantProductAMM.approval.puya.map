{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiUA;;;;;;AASsB;;AAAA;;AAAA;AAAA;;;AAA0B;;AAAA;;AAAA;AAA1B;;;;AACtB;;;AACuB;;AAAA;;AAAA;AAAR;AAA+B;AAA/B;AAAP;;AAAA;AACK;;AAAT;;AAAS;AACC;AAAA;;AAAA;AAAqB;;AAAA;;AAAA;AAArB;AAAV;AAAA;;AACU;AAAA;;AAAA;AAAqB;;AAAA;;AAAA;AAArB;AAAV;AAAA;;AACG;AAAP;;;AACe;;AAAA;AAAoB;AAApB;AAAP;;AAAA;AAEO;;AAAA;AAAoB;AAApB;AAAP;;AAAA;;;;;AAGR;;;AAEa;;AAAA;;AAAA;AAAT;;AAAS;AACF;;AAAA;;AAAA;AAAA;AAAA;AAAP;AAGJ;;;AAEwB;;AAAA;;AAAA;AAAT;AAAA;AAAmC;;AAAY;;;AAAZ;AAAnC;AACC;;AAAY;;;AAAZ;AAAZ;;AAAY;AACL;AAAA;AAAP;AAGJ;;;AAEI;AACe;;AACE;;AACE;;;;;;;;AAHnB;;;AAAA;;;AAAA;;AA1UJ;;;AAKQ;AAAe;AAAf;AAEA;AAAe;AAAf;AAEgB;;AAAhB;AAAA;AAAA;AAEA;AAAkB;AAAlB;AAEA;;AAAa;AAAb;;AAER;;;AAGQ;;;AACA;AAAA;;AAAA;;AAER;;;AAiBmB;AAAA;AAAA;AAAA;AAAJ;AAAP;AACA;;;AACO;;AAAqB;;AAArB;AAAP;AACO;;AAAA;;AAAiB;;AAAjB;AAAP;AAEO;;AAAA;;AAAe;;;;AAAf;AAAP;AACO;;AAAA;;AAAA;AAAP;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACkB;;;AAAlB;AAAA;AAAA;AAEgB;AAAA;AAAA;AAAA;AAAhB;;;AACgB;AAAA;AAAA;AAAA;AAAhB;;;AACO;AAAA;AAAA;AAAA;AAAP;AAER;;;AA8BQ;;;AAGqB;AAAA;AAAA;AAAA;AAAd;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AACO;;AAAA;;AAAiB;;AAAjB;AAAP;AACO;;AAAA;;AAAiB;;AAAjB;AAAP;AAII;;AAAA;;AAAyB;;AAAzB;AADJ;AAGO;;AAAA;;AAAqB;AAAA;AAAA;AAAA;AAArB;AAAP;AACO;;AAAA;;AAAsB;AAAtB;AAAP;AAII;;AAAA;;AAAyB;;AAAzB;AADJ;AAGO;;AAAA;;AAAqB;AAAA;AAAA;AAAA;AAArB;AAAP;AACO;;AAAA;;AAAsB;AAAtB;AAAP;AAGiB;;;AACH;;;AACA;;;AACD;;AAAA;;AACA;;AAAA;;AALb;;AAAA;;AAAA;;AAAA;;AAAA;;AAAU;;;AAOH;AAAU;AAAV;AAAP;AAG2B;;AAAkB;AAAA;AAAA;AAAA;AAA7C;;AAAA;;;AACA;;;;AAER;;;AAuBQ;;;AAEqB;AAAA;AAAA;AAAA;AAAd;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AAGI;;AAAA;;AAA4B;;AAA5B;AADJ;AAGO;;AAAA;;AAAyB;AAAzB;AAAP;AACO;;AAAA;;AAAwB;AAAA;AAAA;AAAA;AAAxB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAIe;;;AAGJ;;;AACA;;AAAA;;AAHX;;AAAA;;AAAA;;AAAQ;;;AAAR;AAOW;;;AACA;;AAAA;;AAHX;;AAAA;;AAAA;;AAAQ;;;AAAR;AAO2B;;AAAkB;AAAA;AAAA;AAAA;AAA7C;;AAAA;;;AAG2B;;AAAkB;AAAA;AAAA;AAAA;AAA7C;;AAAA;;;AACA;;;;AAER;;;;;;AAmBQ;;;AAEkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AACkB;AAAA;AAAA;AAAA;AAAX;;AAAA;AAAP;AAEO;;AAAA;;AAAyB;AAAzB;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAGS;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AALH;;AAAA;;AAAN;;AAAA;;AAAA;;AAAA;;;;;;AAUQ;AAJY;;;AAAZ;;AACa;;;AACD;AAAA;AAAA;AAAA;AAAZ;;AAKM;;AAAA;;AADd;;AAAA;;AAAU;;;AAGH;AAAU;AAAV;AAAP;AAE2B;;AAA3B;;AAAA;;AAAA;;;AACA;;;;AAhBoB;;;AAAZ;;AACa;;;AACD;AAAA;AAAA;AAAA;AAAZ;;;;;AAgBhB;;;AAEe;AAAA;AAAA;AAAA;AAAP;;AAER;;;AAEoB;;;AACA;;;AAAZ;AAEyB;AAAZ;AAAA;AAAA;AAAb;;AAAA;AAAA;;AAER;;;AAGY;;AAAc;AAAA;AAAA;AAAA;AAAd;AADJ;;AAIR;;;AAGY;AACyB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAV;;;;;;AAAA;AAAA;AAAmC;;;AAAnC;AAA0C;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA1C;AAIH;;AACA;;;;;AAFC;;;;AADH;;;;AADI;;;;;;;;;AAFd;;;;AAAA;;;AAAA;AAAA;;AADJ;AAaR;;;AAGqB;;AADb;;AAGW;AAHX;;;;AAMR;;;AAEuC;;AAAxB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAER;;;AAEoC;;AAArB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAER;;;AAEoC;;AAArB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;;;;AAlRR;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;;;AAAA;;AAiLK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjLL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAiLK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AAzDA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAxHL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAwHK;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AAlEA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtDL;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAsDK;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AAhCA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAtBL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAsBK;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAhBL;;;AAAA;AAAA;;AAgBK;;;AAAA;;;;AAhBL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000 4 10000000000"
    },
    "13": {
      "op": "bytecblock \"asset_a\" \"asset_b\" \"pool_token\" \"governor\" \"ratio\""
    },
    "57": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "59": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "62": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "examples.amm.contract.ConstantProductAMM.__init__",
      "op": "callsub __init__"
    },
    "65": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "algopy.arc4.ARC4Contract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "68": {
      "op": "return",
      "stack_out": []
    },
    "69": {
      "subroutine": "examples.amm.contract.tokens_to_mint",
      "params": {
        "pool_balance#0": "uint64",
        "a_balance#0": "uint64",
        "b_balance#0": "uint64",
        "a_amount#0": "uint64",
        "b_amount#0": "uint64"
      },
      "block": "tokens_to_mint",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "72": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "a_ratio#0"
      ]
    },
    "74": {
      "op": "dup",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0"
      ]
    },
    "75": {
      "op": "frame_dig -4",
      "defined_out": [
        "a_balance#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_balance#0 (copy)"
      ]
    },
    "77": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_amount#0 (copy)",
        "a_balance#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_balance#0 (copy)",
        "a_amount#0 (copy)"
      ]
    },
    "79": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%0#0"
      ]
    },
    "80": {
      "op": "bz tokens_to_mint_bool_false@3",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0"
      ]
    },
    "83": {
      "block": "tokens_to_mint_and_contd@1",
      "stack_in": [
        "a_ratio#0",
        "b_ratio#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "b_balance#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "b_balance#0 (copy)"
      ]
    },
    "85": {
      "op": "frame_dig -1",
      "defined_out": [
        "b_amount#0 (copy)",
        "b_balance#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "b_balance#0 (copy)",
        "b_amount#0 (copy)"
      ]
    },
    "87": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%1#0"
      ]
    },
    "88": {
      "op": "bz tokens_to_mint_bool_false@3",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0"
      ]
    },
    "91": {
      "block": "tokens_to_mint_bool_true@2",
      "stack_in": [
        "a_ratio#0",
        "b_ratio#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "and_result%0#0"
      ]
    },
    "92": {
      "block": "tokens_to_mint_bool_merge@4",
      "stack_in": [
        "a_ratio#0",
        "b_ratio#0",
        "and_result%0#0"
      ],
      "op": "bz tokens_to_mint_after_if_else@6",
      "defined_out": [],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0"
      ]
    },
    "95": {
      "block": "tokens_to_mint_if_body@5",
      "stack_in": [
        "a_ratio#0",
        "b_ratio#0"
      ],
      "op": "frame_dig -2",
      "defined_out": [
        "a_amount#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0 (copy)"
      ]
    },
    "97": {
      "op": "frame_dig -1",
      "defined_out": [
        "a_amount#0 (copy)",
        "b_amount#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "a_amount#0 (copy)",
        "b_amount#0 (copy)"
      ]
    },
    "99": {
      "op": "*",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%2#0"
      ]
    },
    "100": {
      "op": "sqrt",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%3#0"
      ]
    },
    "101": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%3#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%3#0",
        "1000"
      ]
    },
    "102": {
      "op": "-",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%4#0"
      ]
    },
    "103": {
      "op": "frame_bury 0"
    },
    "105": {
      "retsub": true,
      "op": "retsub"
    },
    "106": {
      "block": "tokens_to_mint_after_if_else@6",
      "stack_in": [
        "a_ratio#0",
        "b_ratio#0"
      ],
      "op": "intc 4 // 10000000000",
      "defined_out": [
        "10000000000"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "10000000000"
      ]
    },
    "108": {
      "op": "frame_dig -5",
      "defined_out": [
        "10000000000",
        "pool_balance#0 (copy)"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "10000000000",
        "pool_balance#0 (copy)"
      ]
    },
    "110": {
      "op": "-",
      "defined_out": [
        "issued#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0"
      ]
    },
    "111": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "issued#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "1000"
      ]
    },
    "112": {
      "op": "frame_dig -2",
      "defined_out": [
        "1000",
        "a_amount#0 (copy)",
        "issued#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "1000",
        "a_amount#0 (copy)"
      ]
    },
    "114": {
      "op": "*",
      "defined_out": [
        "issued#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "tmp%5#0"
      ]
    },
    "115": {
      "op": "frame_dig -4",
      "defined_out": [
        "a_balance#0 (copy)",
        "issued#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "tmp%5#0",
        "a_balance#0 (copy)"
      ]
    },
    "117": {
      "op": "frame_dig -2",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "tmp%5#0",
        "a_balance#0 (copy)",
        "a_amount#0 (copy)"
      ]
    },
    "119": {
      "op": "-",
      "defined_out": [
        "issued#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "120": {
      "op": "/",
      "defined_out": [
        "a_ratio#0",
        "issued#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0"
      ]
    },
    "121": {
      "op": "dup",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "a_ratio#0"
      ]
    },
    "122": {
      "op": "frame_bury 0",
      "defined_out": [
        "a_ratio#0",
        "issued#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0"
      ]
    },
    "124": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "1000"
      ]
    },
    "125": {
      "op": "frame_dig -1",
      "defined_out": [
        "1000",
        "a_ratio#0",
        "b_amount#0 (copy)",
        "issued#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "1000",
        "b_amount#0 (copy)"
      ]
    },
    "127": {
      "op": "*",
      "defined_out": [
        "a_ratio#0",
        "issued#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "tmp%7#0"
      ]
    },
    "128": {
      "op": "frame_dig -3",
      "defined_out": [
        "a_ratio#0",
        "b_balance#0 (copy)",
        "issued#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "tmp%7#0",
        "b_balance#0 (copy)"
      ]
    },
    "130": {
      "op": "frame_dig -1",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "tmp%7#0",
        "b_balance#0 (copy)",
        "b_amount#0 (copy)"
      ]
    },
    "132": {
      "op": "-",
      "defined_out": [
        "a_ratio#0",
        "issued#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "133": {
      "op": "/",
      "defined_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "b_ratio#0"
      ]
    },
    "134": {
      "op": "dup",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "b_ratio#0",
        "b_ratio#0"
      ]
    },
    "135": {
      "op": "frame_bury 1",
      "defined_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0",
        "b_ratio#0"
      ]
    },
    "137": {
      "op": "<",
      "defined_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "tmp%9#0"
      ]
    },
    "138": {
      "op": "bz tokens_to_mint_else_body@8",
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0"
      ]
    },
    "141": {
      "block": "tokens_to_mint_if_body@7",
      "stack_in": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a_ratio#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "a_ratio#0"
      ]
    },
    "143": {
      "op": "*",
      "defined_out": [
        "a_ratio#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%10#0"
      ]
    },
    "144": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "a_ratio#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%10#0",
        "1000"
      ]
    },
    "145": {
      "op": "/",
      "defined_out": [
        "a_ratio#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%11#0"
      ]
    },
    "146": {
      "op": "frame_bury 0"
    },
    "148": {
      "retsub": true,
      "op": "retsub"
    },
    "149": {
      "block": "tokens_to_mint_else_body@8",
      "stack_in": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "b_ratio#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "issued#0",
        "b_ratio#0"
      ]
    },
    "151": {
      "op": "*",
      "defined_out": [
        "b_ratio#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%12#0"
      ]
    },
    "152": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "b_ratio#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%12#0",
        "1000"
      ]
    },
    "153": {
      "op": "/",
      "defined_out": [
        "b_ratio#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "tmp%13#0"
      ]
    },
    "154": {
      "op": "frame_bury 0"
    },
    "156": {
      "retsub": true,
      "op": "retsub"
    },
    "157": {
      "block": "tokens_to_mint_bool_false@3",
      "stack_in": [
        "a_ratio#0",
        "b_ratio#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "a_ratio#0",
        "b_ratio#0",
        "and_result%0#0"
      ]
    },
    "158": {
      "op": "b tokens_to_mint_bool_merge@4"
    },
    "161": {
      "subroutine": "examples.amm.contract.tokens_to_burn",
      "params": {
        "pool_balance#0": "uint64",
        "supply#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "tokens_to_burn",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "164": {
      "op": "intc 4 // 10000000000",
      "defined_out": [
        "10000000000"
      ],
      "stack_out": [
        "10000000000"
      ]
    },
    "166": {
      "op": "frame_dig -3",
      "defined_out": [
        "10000000000",
        "pool_balance#0 (copy)"
      ],
      "stack_out": [
        "10000000000",
        "pool_balance#0 (copy)"
      ]
    },
    "168": {
      "op": "-",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "169": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "amount#0 (copy)"
      ]
    },
    "171": {
      "op": "-",
      "defined_out": [
        "issued#0"
      ],
      "stack_out": [
        "issued#0"
      ]
    },
    "172": {
      "op": "frame_dig -2",
      "defined_out": [
        "issued#0",
        "supply#0 (copy)"
      ],
      "stack_out": [
        "issued#0",
        "supply#0 (copy)"
      ]
    },
    "174": {
      "op": "frame_dig -1",
      "stack_out": [
        "issued#0",
        "supply#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "176": {
      "op": "*",
      "defined_out": [
        "issued#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "issued#0",
        "tmp%1#0"
      ]
    },
    "177": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "issued#0"
      ]
    },
    "178": {
      "op": "/",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "179": {
      "retsub": true,
      "op": "retsub"
    },
    "180": {
      "subroutine": "examples.amm.contract.tokens_to_swap",
      "params": {
        "in_amount#0": "uint64",
        "in_supply#0": "uint64",
        "out_supply#0": "uint64"
      },
      "block": "tokens_to_swap",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "183": {
      "op": "frame_dig -2",
      "defined_out": [
        "in_supply#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0 (copy)"
      ]
    },
    "185": {
      "op": "frame_dig -3",
      "defined_out": [
        "in_amount#0 (copy)",
        "in_supply#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0 (copy)",
        "in_amount#0 (copy)"
      ]
    },
    "187": {
      "op": "-",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "188": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1000"
      ]
    },
    "189": {
      "op": "*",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "190": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%1#0",
        "in_amount#0 (copy)"
      ]
    },
    "192": {
      "op": "pushint 995 // 995",
      "defined_out": [
        "995",
        "in_amount#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "in_amount#0 (copy)",
        "995"
      ]
    },
    "195": {
      "op": "*",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "196": {
      "op": "+",
      "defined_out": [
        "in_total#0"
      ],
      "stack_out": [
        "in_total#0"
      ]
    },
    "197": {
      "op": "frame_dig -3",
      "stack_out": [
        "in_total#0",
        "in_amount#0 (copy)"
      ]
    },
    "199": {
      "op": "pushint 995 // 995",
      "stack_out": [
        "in_total#0",
        "in_amount#0 (copy)",
        "995"
      ]
    },
    "202": {
      "op": "*",
      "defined_out": [
        "in_total#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "in_total#0",
        "tmp%3#0"
      ]
    },
    "203": {
      "op": "frame_dig -1",
      "defined_out": [
        "in_total#0",
        "out_supply#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "in_total#0",
        "tmp%3#0",
        "out_supply#0 (copy)"
      ]
    },
    "205": {
      "op": "*",
      "defined_out": [
        "in_total#0",
        "out_total#0"
      ],
      "stack_out": [
        "in_total#0",
        "out_total#0"
      ]
    },
    "206": {
      "op": "swap",
      "stack_out": [
        "out_total#0",
        "in_total#0"
      ]
    },
    "207": {
      "op": "/",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "208": {
      "retsub": true,
      "op": "retsub"
    },
    "209": {
      "subroutine": "examples.amm.contract.do_asset_transfer",
      "params": {
        "receiver#0": "bytes",
        "asset#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "do_asset_transfer",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "212": {
      "op": "itxn_begin"
    },
    "213": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "215": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "217": {
      "op": "frame_dig -3",
      "defined_out": [
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "219": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "inner_txn_params%0%%param_AssetAmount_idx_0#0"
      ]
    },
    "221": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "223": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "225": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "226": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "228": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "229": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "231": {
      "block": "do_asset_transfer_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "232": {
      "retsub": true,
      "op": "retsub"
    },
    "233": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "236": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\""
      ],
      "stack_out": [
        "\"asset_a\""
      ]
    },
    "237": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "\"asset_a\"",
        "0"
      ]
    },
    "238": {
      "op": "app_global_put",
      "stack_out": []
    },
    "239": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\""
      ],
      "stack_out": [
        "\"asset_b\""
      ]
    },
    "240": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"asset_b\"",
        "0"
      ]
    },
    "241": {
      "op": "app_global_put",
      "stack_out": []
    },
    "242": {
      "op": "txn Sender",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "244": {
      "op": "bytec_3 // \"governor\"",
      "defined_out": [
        "\"governor\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"governor\""
      ]
    },
    "245": {
      "op": "swap",
      "stack_out": [
        "\"governor\"",
        "new_state_value%0#0"
      ]
    },
    "246": {
      "op": "app_global_put",
      "stack_out": []
    },
    "247": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\""
      ],
      "stack_out": [
        "\"pool_token\""
      ]
    },
    "248": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"pool_token\"",
        "0"
      ]
    },
    "249": {
      "op": "app_global_put",
      "stack_out": []
    },
    "250": {
      "op": "bytec 4 // \"ratio\"",
      "defined_out": [
        "\"ratio\""
      ],
      "stack_out": [
        "\"ratio\""
      ]
    },
    "252": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"ratio\"",
        "0"
      ]
    },
    "253": {
      "op": "app_global_put",
      "stack_out": []
    },
    "254": {
      "retsub": true,
      "op": "retsub"
    },
    "255": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.set_governor",
      "params": {
        "new_governor#0": "bytes"
      },
      "block": "set_governor",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "258": {
      "callsub": "examples.amm.contract.ConstantProductAMM._check_is_governor",
      "op": "callsub _check_is_governor"
    },
    "261": {
      "op": "bytec_3 // \"governor\"",
      "defined_out": [
        "\"governor\""
      ],
      "stack_out": [
        "\"governor\""
      ]
    },
    "262": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"governor\"",
        "new_governor#0 (copy)"
      ],
      "stack_out": [
        "\"governor\"",
        "new_governor#0 (copy)"
      ]
    },
    "264": {
      "op": "app_global_put",
      "stack_out": []
    },
    "265": {
      "retsub": true,
      "op": "retsub"
    },
    "266": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.bootstrap",
      "params": {
        "seed#0": "uint64",
        "a_asset#0": "uint64",
        "b_asset#0": "uint64"
      },
      "block": "bootstrap",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "269": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "270": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pool_token\""
      ]
    },
    "271": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "272": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "273": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "error": "application has already been bootstrapped",
      "op": "assert // application has already been bootstrapped",
      "stack_out": []
    },
    "275": {
      "callsub": "examples.amm.contract.ConstantProductAMM._check_is_governor",
      "op": "callsub _check_is_governor"
    },
    "278": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "280": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "2"
      ]
    },
    "282": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "283": {
      "error": "group size not 2",
      "op": "assert // group size not 2",
      "stack_out": []
    },
    "284": {
      "op": "frame_dig -3",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "286": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "288": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "290": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "291": {
      "error": "receiver not app address",
      "op": "assert // receiver not app address",
      "stack_out": []
    },
    "292": {
      "op": "frame_dig -3",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "294": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "296": {
      "op": "pushint 300000 // 300000",
      "defined_out": [
        "300000",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "300000"
      ]
    },
    "300": {
      "op": ">=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "301": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": []
    },
    "302": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_asset#0 (copy)"
      ],
      "stack_out": [
        "a_asset#0 (copy)"
      ]
    },
    "304": {
      "op": "frame_dig -1",
      "defined_out": [
        "a_asset#0 (copy)",
        "b_asset#0 (copy)"
      ],
      "stack_out": [
        "a_asset#0 (copy)",
        "b_asset#0 (copy)"
      ]
    },
    "306": {
      "op": "<",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "307": {
      "error": "asset a must be less than asset b",
      "op": "assert // asset a must be less than asset b",
      "stack_out": []
    },
    "308": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\""
      ],
      "stack_out": [
        "\"asset_a\""
      ]
    },
    "309": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"asset_a\"",
        "a_asset#0 (copy)"
      ]
    },
    "311": {
      "op": "app_global_put",
      "stack_out": []
    },
    "312": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\""
      ],
      "stack_out": [
        "\"asset_b\""
      ]
    },
    "313": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"asset_b\"",
        "b_asset#0 (copy)"
      ]
    },
    "315": {
      "op": "app_global_put",
      "stack_out": []
    },
    "316": {
      "callsub": "examples.amm.contract.ConstantProductAMM._create_pool_token",
      "op": "callsub _create_pool_token",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "319": {
      "op": "bytec_2 // \"pool_token\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"pool_token\""
      ]
    },
    "320": {
      "op": "swap",
      "stack_out": [
        "\"pool_token\"",
        "new_state_value%0#0"
      ]
    },
    "321": {
      "op": "app_global_put",
      "stack_out": []
    },
    "322": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "323": {
      "op": "bytec_0 // \"asset_a\"",
      "stack_out": [
        "0",
        "\"asset_a\""
      ]
    },
    "324": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "325": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "326": {
      "callsub": "examples.amm.contract.ConstantProductAMM._do_opt_in",
      "op": "callsub _do_opt_in",
      "stack_out": []
    },
    "329": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "330": {
      "op": "bytec_1 // \"asset_b\"",
      "stack_out": [
        "0",
        "\"asset_b\""
      ]
    },
    "331": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "332": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "333": {
      "callsub": "examples.amm.contract.ConstantProductAMM._do_opt_in",
      "op": "callsub _do_opt_in",
      "stack_out": []
    },
    "336": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "337": {
      "op": "bytec_2 // \"pool_token\"",
      "stack_out": [
        "0",
        "\"pool_token\""
      ]
    },
    "338": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "339": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "340": {
      "retsub": true,
      "op": "retsub"
    },
    "341": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.mint",
      "params": {
        "a_xfer#0": "uint64",
        "b_xfer#0": "uint64",
        "pool_asset#0": "uint64",
        "a_asset#0": "uint64",
        "b_asset#0": "uint64"
      },
      "block": "mint",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "344": {
      "callsub": "examples.amm.contract.ConstantProductAMM._check_bootstrapped",
      "op": "callsub _check_bootstrapped"
    },
    "347": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "348": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pool_token\""
      ]
    },
    "349": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "350": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "351": {
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_value%0#0",
        "pool_asset#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "pool_asset#0 (copy)"
      ]
    },
    "353": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "354": {
      "error": "asset pool incorrect",
      "op": "assert // asset pool incorrect",
      "stack_out": []
    },
    "355": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "356": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset_a\""
      ]
    },
    "357": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "358": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "359": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_asset#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "a_asset#0 (copy)"
      ]
    },
    "361": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "362": {
      "error": "asset a incorrect",
      "op": "assert // asset a incorrect",
      "stack_out": []
    },
    "363": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "364": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset_b\""
      ]
    },
    "365": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "366": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "367": {
      "op": "frame_dig -1",
      "defined_out": [
        "b_asset#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "b_asset#0 (copy)"
      ]
    },
    "369": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "370": {
      "error": "asset b incorrect",
      "op": "assert // asset b incorrect",
      "stack_out": []
    },
    "371": {
      "op": "frame_dig -5",
      "defined_out": [
        "a_xfer#0 (copy)"
      ],
      "stack_out": [
        "a_xfer#0 (copy)"
      ]
    },
    "373": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "375": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "377": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "378": {
      "error": "sender invalid",
      "op": "assert // sender invalid",
      "stack_out": []
    },
    "379": {
      "op": "frame_dig -4",
      "defined_out": [
        "b_xfer#0 (copy)"
      ],
      "stack_out": [
        "b_xfer#0 (copy)"
      ]
    },
    "381": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "383": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "385": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "386": {
      "error": "sender invalid",
      "op": "assert // sender invalid",
      "stack_out": []
    },
    "387": {
      "op": "frame_dig -5",
      "stack_out": [
        "a_xfer#0 (copy)"
      ]
    },
    "389": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "391": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "393": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "394": {
      "error": "receiver not app address",
      "op": "assert // receiver not app address",
      "stack_out": []
    },
    "395": {
      "op": "frame_dig -5",
      "stack_out": [
        "a_xfer#0 (copy)"
      ]
    },
    "397": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "399": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "0"
      ]
    },
    "400": {
      "op": "bytec_0 // \"asset_a\"",
      "stack_out": [
        "tmp%12#0",
        "0",
        "\"asset_a\""
      ]
    },
    "401": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "402": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "tmp%12#0",
        "maybe_value%3#0"
      ]
    },
    "403": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "404": {
      "error": "asset a incorrect",
      "op": "assert // asset a incorrect",
      "stack_out": []
    },
    "405": {
      "op": "frame_dig -5",
      "stack_out": [
        "a_xfer#0 (copy)"
      ]
    },
    "407": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "409": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "410": {
      "op": ">",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "411": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": []
    },
    "412": {
      "op": "frame_dig -4",
      "stack_out": [
        "b_xfer#0 (copy)"
      ]
    },
    "414": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "416": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "418": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "419": {
      "error": "receiver not app address",
      "op": "assert // receiver not app address",
      "stack_out": []
    },
    "420": {
      "op": "frame_dig -4",
      "stack_out": [
        "b_xfer#0 (copy)"
      ]
    },
    "422": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "424": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "425": {
      "op": "bytec_1 // \"asset_b\"",
      "stack_out": [
        "tmp%19#0",
        "0",
        "\"asset_b\""
      ]
    },
    "426": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "427": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "tmp%19#0",
        "maybe_value%4#0"
      ]
    },
    "428": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "429": {
      "error": "asset b incorrect",
      "op": "assert // asset b incorrect",
      "stack_out": []
    },
    "430": {
      "op": "frame_dig -4",
      "stack_out": [
        "b_xfer#0 (copy)"
      ]
    },
    "432": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "434": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%21#0",
        "0"
      ]
    },
    "435": {
      "op": ">",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "436": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": []
    },
    "437": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_pool_balance",
      "op": "callsub _current_pool_balance",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "440": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "443": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "446": {
      "op": "frame_dig -5",
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "a_xfer#0 (copy)"
      ]
    },
    "448": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "450": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "b_xfer#0 (copy)"
      ]
    },
    "452": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "454": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%23#0"
      ]
    },
    "456": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "458": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "460": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%27#0",
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "462": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "464": {
      "callsub": "examples.amm.contract.tokens_to_mint",
      "op": "callsub tokens_to_mint",
      "defined_out": [
        "to_mint#0"
      ],
      "stack_out": [
        "to_mint#0"
      ]
    },
    "467": {
      "op": "dup",
      "defined_out": [
        "to_mint#0",
        "to_mint#0 (copy)"
      ],
      "stack_out": [
        "to_mint#0",
        "to_mint#0 (copy)"
      ]
    },
    "468": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_mint#0",
        "to_mint#0 (copy)",
        "0"
      ]
    },
    "469": {
      "op": ">",
      "defined_out": [
        "tmp%28#0",
        "to_mint#0"
      ],
      "stack_out": [
        "to_mint#0",
        "tmp%28#0"
      ]
    },
    "470": {
      "error": "send amount too low",
      "op": "assert // send amount too low",
      "stack_out": [
        "to_mint#0"
      ]
    },
    "471": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%29#0",
        "to_mint#0"
      ],
      "stack_out": [
        "to_mint#0",
        "tmp%29#0"
      ]
    },
    "473": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to_mint#0",
        "tmp%29#0",
        "0"
      ]
    },
    "474": {
      "op": "bytec_2 // \"pool_token\"",
      "stack_out": [
        "to_mint#0",
        "tmp%29#0",
        "0",
        "\"pool_token\""
      ]
    },
    "475": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%29#0",
        "to_mint#0"
      ],
      "stack_out": [
        "to_mint#0",
        "tmp%29#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "476": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "to_mint#0",
        "tmp%29#0",
        "maybe_value%5#0"
      ]
    },
    "477": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%29#0",
        "maybe_value%5#0",
        "to_mint#0"
      ]
    },
    "479": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": []
    },
    "482": {
      "callsub": "examples.amm.contract.ConstantProductAMM._update_ratio",
      "op": "callsub _update_ratio"
    },
    "485": {
      "retsub": true,
      "op": "retsub"
    },
    "486": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.burn",
      "params": {
        "pool_xfer#0": "uint64",
        "pool_asset#0": "uint64",
        "a_asset#0": "uint64",
        "b_asset#0": "uint64"
      },
      "block": "burn",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "489": {
      "callsub": "examples.amm.contract.ConstantProductAMM._check_bootstrapped",
      "op": "callsub _check_bootstrapped"
    },
    "492": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "493": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pool_token\""
      ]
    },
    "494": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "495": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "496": {
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_value%0#0",
        "pool_asset#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "pool_asset#0 (copy)"
      ]
    },
    "498": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "499": {
      "error": "asset pool incorrect",
      "op": "assert // asset pool incorrect",
      "stack_out": []
    },
    "500": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "501": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset_a\""
      ]
    },
    "502": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "503": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "504": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_asset#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "a_asset#0 (copy)"
      ]
    },
    "506": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "507": {
      "error": "asset a incorrect",
      "op": "assert // asset a incorrect",
      "stack_out": []
    },
    "508": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "509": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset_b\""
      ]
    },
    "510": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "511": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "512": {
      "op": "frame_dig -1",
      "defined_out": [
        "b_asset#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "b_asset#0 (copy)"
      ]
    },
    "514": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "515": {
      "error": "asset b incorrect",
      "op": "assert // asset b incorrect",
      "stack_out": []
    },
    "516": {
      "op": "frame_dig -4",
      "defined_out": [
        "pool_xfer#0 (copy)"
      ],
      "stack_out": [
        "pool_xfer#0 (copy)"
      ]
    },
    "518": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "520": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "522": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "523": {
      "error": "receiver not app address",
      "op": "assert // receiver not app address",
      "stack_out": []
    },
    "524": {
      "op": "frame_dig -4",
      "stack_out": [
        "pool_xfer#0 (copy)"
      ]
    },
    "526": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "528": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "529": {
      "op": ">",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "530": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": []
    },
    "531": {
      "op": "frame_dig -4",
      "stack_out": [
        "pool_xfer#0 (copy)"
      ]
    },
    "533": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "535": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "536": {
      "op": "bytec_2 // \"pool_token\"",
      "stack_out": [
        "tmp%8#0",
        "0",
        "\"pool_token\""
      ]
    },
    "537": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "538": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "tmp%8#0",
        "maybe_value%3#0"
      ]
    },
    "539": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "540": {
      "error": "asset pool incorrect",
      "op": "assert // asset pool incorrect",
      "stack_out": []
    },
    "541": {
      "op": "frame_dig -4",
      "stack_out": [
        "pool_xfer#0 (copy)"
      ]
    },
    "543": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "545": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "547": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "548": {
      "error": "sender invalid",
      "op": "assert // sender invalid",
      "stack_out": []
    },
    "549": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_pool_balance",
      "op": "callsub _current_pool_balance",
      "defined_out": [
        "pool_balance#0"
      ],
      "stack_out": [
        "pool_balance#0"
      ]
    },
    "552": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "pool_balance#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "pool_balance#0",
        "tmp%13#0"
      ]
    },
    "555": {
      "op": "frame_dig -4",
      "stack_out": [
        "pool_balance#0",
        "tmp%13#0",
        "pool_xfer#0 (copy)"
      ]
    },
    "557": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "pool_balance#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "pool_balance#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "559": {
      "op": "dig 2",
      "defined_out": [
        "pool_balance#0",
        "pool_balance#0 (copy)",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "pool_balance#0",
        "tmp%13#0",
        "tmp%14#0",
        "pool_balance#0 (copy)"
      ]
    },
    "561": {
      "op": "uncover 2",
      "stack_out": [
        "pool_balance#0",
        "tmp%14#0",
        "pool_balance#0 (copy)",
        "tmp%13#0"
      ]
    },
    "563": {
      "op": "uncover 2",
      "stack_out": [
        "pool_balance#0",
        "pool_balance#0 (copy)",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "565": {
      "callsub": "examples.amm.contract.tokens_to_burn",
      "op": "callsub tokens_to_burn",
      "defined_out": [
        "a_amt#0",
        "pool_balance#0"
      ],
      "stack_out": [
        "pool_balance#0",
        "a_amt#0"
      ]
    },
    "568": {
      "op": "swap",
      "stack_out": [
        "a_amt#0",
        "pool_balance#0"
      ]
    },
    "569": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "a_amt#0",
        "pool_balance#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "a_amt#0",
        "pool_balance#0",
        "tmp%15#0"
      ]
    },
    "572": {
      "op": "frame_dig -4",
      "stack_out": [
        "a_amt#0",
        "pool_balance#0",
        "tmp%15#0",
        "pool_xfer#0 (copy)"
      ]
    },
    "574": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "a_amt#0",
        "pool_balance#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "a_amt#0",
        "pool_balance#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "576": {
      "op": "uncover 2",
      "stack_out": [
        "a_amt#0",
        "tmp%15#0",
        "tmp%16#0",
        "pool_balance#0"
      ]
    },
    "578": {
      "op": "uncover 2",
      "stack_out": [
        "a_amt#0",
        "tmp%16#0",
        "pool_balance#0",
        "tmp%15#0"
      ]
    },
    "580": {
      "op": "uncover 2",
      "stack_out": [
        "a_amt#0",
        "pool_balance#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "582": {
      "callsub": "examples.amm.contract.tokens_to_burn",
      "op": "callsub tokens_to_burn",
      "defined_out": [
        "a_amt#0",
        "b_amt#0"
      ],
      "stack_out": [
        "a_amt#0",
        "b_amt#0"
      ]
    },
    "585": {
      "op": "swap",
      "stack_out": [
        "b_amt#0",
        "a_amt#0"
      ]
    },
    "586": {
      "op": "txn Sender",
      "defined_out": [
        "a_amt#0",
        "b_amt#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "b_amt#0",
        "a_amt#0",
        "tmp%17#0"
      ]
    },
    "588": {
      "op": "intc_0 // 0",
      "stack_out": [
        "b_amt#0",
        "a_amt#0",
        "tmp%17#0",
        "0"
      ]
    },
    "589": {
      "op": "bytec_0 // \"asset_a\"",
      "stack_out": [
        "b_amt#0",
        "a_amt#0",
        "tmp%17#0",
        "0",
        "\"asset_a\""
      ]
    },
    "590": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a_amt#0",
        "b_amt#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "b_amt#0",
        "a_amt#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "591": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "b_amt#0",
        "a_amt#0",
        "tmp%17#0",
        "maybe_value%4#0"
      ]
    },
    "592": {
      "op": "uncover 2",
      "stack_out": [
        "b_amt#0",
        "tmp%17#0",
        "maybe_value%4#0",
        "a_amt#0"
      ]
    },
    "594": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": [
        "b_amt#0"
      ]
    },
    "597": {
      "op": "txn Sender",
      "defined_out": [
        "b_amt#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "b_amt#0",
        "tmp%18#0"
      ]
    },
    "599": {
      "op": "intc_0 // 0",
      "stack_out": [
        "b_amt#0",
        "tmp%18#0",
        "0"
      ]
    },
    "600": {
      "op": "bytec_1 // \"asset_b\"",
      "stack_out": [
        "b_amt#0",
        "tmp%18#0",
        "0",
        "\"asset_b\""
      ]
    },
    "601": {
      "op": "app_global_get_ex",
      "defined_out": [
        "b_amt#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "b_amt#0",
        "tmp%18#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "602": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "b_amt#0",
        "tmp%18#0",
        "maybe_value%5#0"
      ]
    },
    "603": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%18#0",
        "maybe_value%5#0",
        "b_amt#0"
      ]
    },
    "605": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": []
    },
    "608": {
      "callsub": "examples.amm.contract.ConstantProductAMM._update_ratio",
      "op": "callsub _update_ratio"
    },
    "611": {
      "retsub": true,
      "op": "retsub"
    },
    "612": {
      "subroutine": "examples.amm.contract.ConstantProductAMM.swap",
      "params": {
        "swap_xfer#0": "uint64",
        "a_asset#0": "uint64",
        "b_asset#0": "uint64"
      },
      "block": "swap",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "615": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "in_supply#0"
      ]
    },
    "617": {
      "op": "dup",
      "stack_out": [
        "in_supply#0",
        "out_asset#0"
      ]
    },
    "618": {
      "callsub": "examples.amm.contract.ConstantProductAMM._check_bootstrapped",
      "op": "callsub _check_bootstrapped"
    },
    "621": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "0"
      ]
    },
    "622": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "0",
        "\"asset_a\""
      ]
    },
    "623": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "624": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0"
      ]
    },
    "625": {
      "op": "frame_dig -2",
      "defined_out": [
        "a_asset#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%0#0",
        "a_asset#0 (copy)"
      ]
    },
    "627": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "tmp%0#0"
      ]
    },
    "628": {
      "error": "asset a incorrect",
      "op": "assert // asset a incorrect",
      "stack_out": [
        "in_supply#0",
        "out_asset#0"
      ]
    },
    "629": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "0"
      ]
    },
    "630": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "0",
        "\"asset_b\""
      ]
    },
    "631": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "632": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%1#0"
      ]
    },
    "633": {
      "op": "frame_dig -1",
      "defined_out": [
        "b_asset#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%1#0",
        "b_asset#0 (copy)"
      ]
    },
    "635": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "tmp%1#0"
      ]
    },
    "636": {
      "error": "asset b incorrect",
      "op": "assert // asset b incorrect",
      "stack_out": [
        "in_supply#0",
        "out_asset#0"
      ]
    },
    "637": {
      "op": "frame_dig -3",
      "defined_out": [
        "swap_xfer#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "swap_xfer#0 (copy)"
      ]
    },
    "639": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "tmp%2#0"
      ]
    },
    "641": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "tmp%2#0",
        "0"
      ]
    },
    "642": {
      "op": ">",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "tmp%3#0"
      ]
    },
    "643": {
      "error": "amount minimum not met",
      "op": "assert // amount minimum not met",
      "stack_out": [
        "in_supply#0",
        "out_asset#0"
      ]
    },
    "644": {
      "op": "frame_dig -3",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "swap_xfer#0 (copy)"
      ]
    },
    "646": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "tmp%4#0"
      ]
    },
    "648": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "650": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "tmp%6#0"
      ]
    },
    "651": {
      "error": "sender invalid",
      "op": "assert // sender invalid",
      "stack_out": [
        "in_supply#0",
        "out_asset#0"
      ]
    },
    "652": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "0"
      ]
    },
    "653": {
      "op": "bytec_0 // \"asset_a\"",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "0",
        "\"asset_a\""
      ]
    },
    "654": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "655": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%2#0"
      ]
    },
    "656": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "657": {
      "op": "bytec_1 // \"asset_b\"",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%2#0",
        "0",
        "\"asset_b\""
      ]
    },
    "658": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "659": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "660": {
      "op": "frame_dig -3",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "swap_xfer#0 (copy)"
      ]
    },
    "662": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "tmp%7#0"
      ]
    },
    "664": {
      "op": "uncover 2",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%3#0",
        "tmp%7#0",
        "maybe_value%2#0"
      ]
    },
    "666": {
      "op": "uncover 2",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "tmp%7#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "668": {
      "op": "uncover 2",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "tmp%7#0"
      ]
    },
    "670": {
      "op": "match swap_switch_case_0@1 swap_switch_case_1@2",
      "stack_out": [
        "in_supply#0",
        "out_asset#0"
      ]
    },
    "676": {
      "block": "swap_switch_case_default@3",
      "stack_in": [
        "in_supply#0",
        "out_asset#0"
      ],
      "error": "asset id incorrect",
      "op": "err // asset id incorrect"
    },
    "677": {
      "block": "swap_switch_case_1@2",
      "stack_in": [
        "in_supply#0",
        "out_asset#0"
      ],
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "in_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_supply#0"
      ]
    },
    "680": {
      "op": "frame_bury 0",
      "defined_out": [
        "in_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0"
      ]
    },
    "682": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "in_supply#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "685": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0"
      ]
    },
    "686": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0",
        "in_supply#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0",
        "\"asset_b\""
      ]
    },
    "687": {
      "op": "app_global_get_ex",
      "defined_out": [
        "in_supply#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "688": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "defined_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "out_asset#0"
      ]
    },
    "689": {
      "op": "frame_bury 1",
      "defined_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "691": {
      "block": "swap_switch_case_next@4",
      "stack_in": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "swap_xfer#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "swap_xfer#0 (copy)"
      ]
    },
    "693": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%8#0"
      ]
    },
    "695": {
      "op": "frame_dig 0",
      "defined_out": [
        "in_supply#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "tmp%8#0",
        "in_supply#0"
      ]
    },
    "697": {
      "op": "uncover 2",
      "defined_out": [
        "in_supply#0",
        "out_supply#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "tmp%8#0",
        "in_supply#0",
        "out_supply#0"
      ]
    },
    "699": {
      "callsub": "examples.amm.contract.tokens_to_swap",
      "op": "callsub tokens_to_swap",
      "defined_out": [
        "in_supply#0",
        "to_swap#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "to_swap#0"
      ]
    },
    "702": {
      "op": "dup",
      "defined_out": [
        "in_supply#0",
        "to_swap#0",
        "to_swap#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "to_swap#0",
        "to_swap#0 (copy)"
      ]
    },
    "703": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "in_supply#0",
        "to_swap#0",
        "to_swap#0 (copy)"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "to_swap#0",
        "to_swap#0 (copy)",
        "0"
      ]
    },
    "704": {
      "op": ">",
      "defined_out": [
        "in_supply#0",
        "tmp%9#0",
        "to_swap#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "to_swap#0",
        "tmp%9#0"
      ]
    },
    "705": {
      "error": "send amount too low",
      "op": "assert // send amount too low",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "to_swap#0"
      ]
    },
    "706": {
      "op": "txn Sender",
      "defined_out": [
        "in_supply#0",
        "tmp%10#0",
        "to_swap#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "to_swap#0",
        "tmp%10#0"
      ]
    },
    "708": {
      "op": "frame_dig 1",
      "defined_out": [
        "in_supply#0",
        "out_asset#0",
        "tmp%10#0",
        "to_swap#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "to_swap#0",
        "tmp%10#0",
        "out_asset#0"
      ]
    },
    "710": {
      "op": "uncover 2",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "tmp%10#0",
        "out_asset#0",
        "to_swap#0"
      ]
    },
    "712": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": [
        "in_supply#0",
        "out_asset#0"
      ]
    },
    "715": {
      "callsub": "examples.amm.contract.ConstantProductAMM._update_ratio",
      "op": "callsub _update_ratio"
    },
    "718": {
      "retsub": true,
      "op": "retsub"
    },
    "719": {
      "block": "swap_switch_case_0@1",
      "stack_in": [
        "in_supply#0",
        "out_asset#0"
      ],
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "in_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "in_supply#0"
      ]
    },
    "722": {
      "op": "frame_bury 0",
      "defined_out": [
        "in_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0"
      ]
    },
    "724": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "in_supply#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "727": {
      "op": "intc_0 // 0",
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0"
      ]
    },
    "728": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0",
        "in_supply#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "0",
        "\"asset_a\""
      ]
    },
    "729": {
      "op": "app_global_get_ex",
      "defined_out": [
        "in_supply#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "730": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "defined_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0",
        "out_asset#0"
      ]
    },
    "731": {
      "op": "frame_bury 1",
      "defined_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ],
      "stack_out": [
        "in_supply#0",
        "out_asset#0",
        "out_supply#0"
      ]
    },
    "733": {
      "op": "b swap_switch_case_next@4"
    },
    "736": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._check_bootstrapped",
      "params": {},
      "block": "_check_bootstrapped",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "739": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "740": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"pool_token\""
      ]
    },
    "741": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "742": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "743": {
      "error": "bootstrap method needs to be called first",
      "op": "assert // bootstrap method needs to be called first",
      "stack_out": []
    },
    "744": {
      "retsub": true,
      "op": "retsub"
    },
    "745": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._update_ratio",
      "params": {},
      "block": "_update_ratio",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "748": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "op": "callsub _current_a_balance",
      "defined_out": [
        "a_balance#0"
      ],
      "stack_out": [
        "a_balance#0"
      ]
    },
    "751": {
      "callsub": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "op": "callsub _current_b_balance",
      "defined_out": [
        "a_balance#0",
        "b_balance#0"
      ],
      "stack_out": [
        "a_balance#0",
        "b_balance#0"
      ]
    },
    "754": {
      "op": "swap",
      "stack_out": [
        "b_balance#0",
        "a_balance#0"
      ]
    },
    "755": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "a_balance#0",
        "b_balance#0"
      ],
      "stack_out": [
        "b_balance#0",
        "a_balance#0",
        "1000"
      ]
    },
    "756": {
      "op": "*",
      "defined_out": [
        "b_balance#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "b_balance#0",
        "tmp%0#0"
      ]
    },
    "757": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "b_balance#0"
      ]
    },
    "758": {
      "op": "/",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "759": {
      "op": "bytec 4 // \"ratio\"",
      "defined_out": [
        "\"ratio\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"ratio\""
      ]
    },
    "761": {
      "op": "swap",
      "stack_out": [
        "\"ratio\"",
        "new_state_value%0#0"
      ]
    },
    "762": {
      "op": "app_global_put",
      "stack_out": []
    },
    "763": {
      "retsub": true,
      "op": "retsub"
    },
    "764": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._check_is_governor",
      "params": {},
      "block": "_check_is_governor",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "767": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "769": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "770": {
      "op": "bytec_3 // \"governor\"",
      "defined_out": [
        "\"governor\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"governor\""
      ]
    },
    "771": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "772": {
      "error": "check self.governor exists",
      "op": "assert // check self.governor exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "773": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "774": {
      "error": "Only the account set in global_state.governor may call this method",
      "op": "assert // Only the account set in global_state.governor may call this method",
      "stack_out": []
    },
    "775": {
      "retsub": true,
      "op": "retsub"
    },
    "776": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._create_pool_token",
      "params": {},
      "block": "_create_pool_token",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "779": {
      "op": "itxn_begin"
    },
    "780": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "781": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset_a\""
      ]
    },
    "782": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "783": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "784": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "786": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "787": {
      "op": "pushbytes 0x4450542d",
      "defined_out": [
        "0x4450542d",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "0x4450542d"
      ]
    },
    "793": {
      "op": "swap",
      "stack_out": [
        "0x4450542d",
        "value%0#0"
      ]
    },
    "794": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "795": {
      "op": "pushbytes 0x2d",
      "defined_out": [
        "0x2d",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x2d"
      ]
    },
    "798": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "799": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "800": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"asset_b\""
      ]
    },
    "801": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "802": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "803": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%1#0",
        "tmp%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "805": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "tmp%1#0",
        "value%1#0"
      ]
    },
    "806": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "807": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "809": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "810": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "812": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "814": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "3"
      ]
    },
    "816": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "818": {
      "op": "intc 4 // 10000000000",
      "defined_out": [
        "10000000000",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "10000000000"
      ]
    },
    "820": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "822": {
      "op": "pushbytes 0x646274",
      "defined_out": [
        "0x646274",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "0x646274"
      ]
    },
    "827": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "829": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "831": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "833": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "835": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "836": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "838": {
      "block": "_create_pool_token_next_txn@1",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "839": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "841": {
      "retsub": true,
      "op": "retsub"
    },
    "842": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._do_opt_in",
      "params": {
        "asset#0": "uint64"
      },
      "block": "_do_opt_in",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "845": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "847": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "asset#0 (copy)"
      ]
    },
    "849": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "asset#0 (copy)",
        "0"
      ]
    },
    "850": {
      "callsub": "examples.amm.contract.do_asset_transfer",
      "op": "callsub do_asset_transfer",
      "stack_out": []
    },
    "853": {
      "retsub": true,
      "op": "retsub"
    },
    "854": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._current_pool_balance",
      "params": {},
      "block": "_current_pool_balance",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "857": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "859": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "860": {
      "op": "bytec_2 // \"pool_token\"",
      "defined_out": [
        "\"pool_token\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"pool_token\""
      ]
    },
    "861": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "862": {
      "error": "check self.pool_token exists",
      "op": "assert // check self.pool_token exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "863": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "865": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "866": {
      "retsub": true,
      "op": "retsub"
    },
    "867": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._current_a_balance",
      "params": {},
      "block": "_current_a_balance",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "870": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "872": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "873": {
      "op": "bytec_0 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"asset_a\""
      ]
    },
    "874": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "875": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "876": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "878": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "879": {
      "retsub": true,
      "op": "retsub"
    },
    "880": {
      "subroutine": "examples.amm.contract.ConstantProductAMM._current_b_balance",
      "params": {},
      "block": "_current_b_balance",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "883": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "885": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "886": {
      "op": "bytec_1 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"asset_b\""
      ]
    },
    "887": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "888": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "889": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "891": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "892": {
      "retsub": true,
      "op": "retsub"
    },
    "893": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "896": {
      "block": "approval_program_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "898": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "899": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "900": {
      "op": "bz approval_program_bare_routing@10",
      "stack_out": []
    },
    "903": {
      "block": "approval_program_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "906": {
      "op": "pushbytes 0x08a956f7 // method \"set_governor(account)void\"",
      "defined_out": [
        "Method(set_governor(account)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_governor(account)void)"
      ]
    },
    "912": {
      "op": "pushbytes 0x6b59d965 // method \"bootstrap(pay,asset,asset)uint64\"",
      "defined_out": [
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(set_governor(account)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_governor(account)void)",
        "Method(bootstrap(pay,asset,asset)uint64)"
      ]
    },
    "918": {
      "op": "pushbytes 0x5cbf1e2d // method \"mint(axfer,axfer,asset,asset,asset)void\"",
      "defined_out": [
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(set_governor(account)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_governor(account)void)",
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)"
      ]
    },
    "924": {
      "op": "pushbytes 0x1436c2ac // method \"burn(axfer,asset,asset,asset)void\"",
      "defined_out": [
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(burn(axfer,asset,asset,asset)void)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(set_governor(account)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_governor(account)void)",
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(burn(axfer,asset,asset,asset)void)"
      ]
    },
    "930": {
      "op": "pushbytes 0x4a88e055 // method \"swap(axfer,asset,asset)void\"",
      "defined_out": [
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(burn(axfer,asset,asset,asset)void)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(set_governor(account)void)",
        "Method(swap(axfer,asset,asset)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(set_governor(account)void)",
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(burn(axfer,asset,asset,asset)void)",
        "Method(swap(axfer,asset,asset)void)"
      ]
    },
    "936": {
      "op": "uncover 5",
      "stack_out": [
        "Method(set_governor(account)void)",
        "Method(bootstrap(pay,asset,asset)uint64)",
        "Method(mint(axfer,axfer,asset,asset,asset)void)",
        "Method(burn(axfer,asset,asset,asset)void)",
        "Method(swap(axfer,asset,asset)void)",
        "tmp%2#0"
      ]
    },
    "938": {
      "op": "match approval_program_set_governor_route@3 approval_program_bootstrap_route@4 approval_program_mint_route@5 approval_program_burn_route@6 approval_program_swap_route@7",
      "stack_out": []
    },
    "950": {
      "block": "approval_program_after_if_else@16",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "951": {
      "block": "approval_program_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@17",
      "stack_in": [
        "tmp%0#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "952": {
      "block": "approval_program_swap_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "954": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "NoOp"
      ]
    },
    "955": {
      "op": "==",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "956": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "957": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "959": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "0"
      ]
    },
    "960": {
      "op": "!=",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "961": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "962": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "964": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "1"
      ]
    },
    "965": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0"
      ]
    },
    "966": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_idx%4#0 (copy)"
      ]
    },
    "967": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ]
    },
    "969": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%4#0",
        "gtxn_type%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type%4#0",
        "axfer"
      ]
    },
    "970": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "gtxn_type_matches%4#0"
      ]
    },
    "971": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%4#0"
      ]
    },
    "972": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%4#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "tmp%56#0"
      ]
    },
    "975": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%4#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "tmp%57#0"
      ]
    },
    "976": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%4#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "tmp%58#0"
      ]
    },
    "978": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%4#0",
        "tmp%58#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "tmp%58#0",
        "tmp%59#0"
      ]
    },
    "981": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%4#0",
        "tmp%58#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "tmp%58#0",
        "tmp%60#0"
      ]
    },
    "982": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%4#0",
        "tmp%58#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "gtxn_idx%4#0",
        "tmp%58#0",
        "tmp%61#0"
      ]
    },
    "984": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%58#0",
        "tmp%61#0",
        "gtxn_idx%4#0"
      ]
    },
    "986": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%61#0",
        "gtxn_idx%4#0",
        "tmp%58#0"
      ]
    },
    "988": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%4#0",
        "tmp%58#0",
        "tmp%61#0"
      ]
    },
    "990": {
      "callsub": "examples.amm.contract.ConstantProductAMM.swap",
      "op": "callsub swap",
      "stack_out": []
    },
    "993": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "994": {
      "op": "b approval_program_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@17"
    },
    "997": {
      "block": "approval_program_burn_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "999": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "NoOp"
      ]
    },
    "1000": {
      "op": "==",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1001": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1002": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "1004": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "0"
      ]
    },
    "1005": {
      "op": "!=",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "1006": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1007": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1009": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "1"
      ]
    },
    "1010": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1011": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "1012": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "1014": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "1015": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "1016": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "1017": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%42#0"
      ]
    },
    "1020": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%43#0"
      ]
    },
    "1021": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%44#0"
      ]
    },
    "1023": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%45#0"
      ]
    },
    "1026": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%46#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%46#0"
      ]
    },
    "1027": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%47#0"
      ]
    },
    "1029": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "1032": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%47#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%47#0",
        "tmp%49#0"
      ]
    },
    "1033": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%47#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%47#0",
        "tmp%50#0"
      ]
    },
    "1035": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%44#0",
        "tmp%47#0",
        "tmp%50#0",
        "gtxn_idx%3#0"
      ]
    },
    "1037": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%47#0",
        "tmp%50#0",
        "gtxn_idx%3#0",
        "tmp%44#0"
      ]
    },
    "1039": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%50#0",
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%47#0"
      ]
    },
    "1041": {
      "op": "uncover 3",
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%44#0",
        "tmp%47#0",
        "tmp%50#0"
      ]
    },
    "1043": {
      "callsub": "examples.amm.contract.ConstantProductAMM.burn",
      "op": "callsub burn",
      "stack_out": []
    },
    "1046": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1047": {
      "op": "b approval_program_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@17"
    },
    "1050": {
      "block": "approval_program_mint_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1052": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "NoOp"
      ]
    },
    "1053": {
      "op": "==",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1054": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1055": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1057": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0"
      ]
    },
    "1058": {
      "op": "!=",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1059": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1060": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1062": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "2"
      ]
    },
    "1064": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1065": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "1066": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "1068": {
      "op": "intc_3 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "1069": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "1070": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "1071": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%27#0"
      ]
    },
    "1073": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%1#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%27#0",
        "1"
      ]
    },
    "1074": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "1075": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "1076": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "1078": {
      "op": "intc_3 // axfer",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "axfer"
      ]
    },
    "1079": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "1080": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "1081": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%28#0"
      ]
    },
    "1084": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%29#0"
      ]
    },
    "1085": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0"
      ]
    },
    "1087": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1090": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%32#0"
      ]
    },
    "1091": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%33#0"
      ]
    },
    "1093": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "1096": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%33#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%33#0",
        "tmp%35#0"
      ]
    },
    "1097": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%33#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%33#0",
        "tmp%36#0"
      ]
    },
    "1099": {
      "op": "uncover 4",
      "stack_out": [
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%33#0",
        "tmp%36#0",
        "gtxn_idx%1#0"
      ]
    },
    "1101": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%30#0",
        "tmp%33#0",
        "tmp%36#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0"
      ]
    },
    "1103": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%33#0",
        "tmp%36#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0"
      ]
    },
    "1105": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%36#0",
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%33#0"
      ]
    },
    "1107": {
      "op": "uncover 4",
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%2#0",
        "tmp%30#0",
        "tmp%33#0",
        "tmp%36#0"
      ]
    },
    "1109": {
      "callsub": "examples.amm.contract.ConstantProductAMM.mint",
      "op": "callsub mint",
      "stack_out": []
    },
    "1112": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1113": {
      "op": "b approval_program_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@17"
    },
    "1116": {
      "block": "approval_program_bootstrap_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1118": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "NoOp"
      ]
    },
    "1119": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1120": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1121": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1123": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "0"
      ]
    },
    "1124": {
      "op": "!=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1125": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1126": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1128": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "1129": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1130": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "1131": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "1133": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "1134": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1135": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "1136": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ]
    },
    "1139": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%16#0"
      ]
    },
    "1140": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%17#0"
      ]
    },
    "1142": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1145": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "1146": {
      "op": "txnas Assets",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%17#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%17#0",
        "tmp%20#0"
      ]
    },
    "1148": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%17#0",
        "tmp%20#0",
        "gtxn_idx%0#0"
      ]
    },
    "1150": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%20#0",
        "gtxn_idx%0#0",
        "tmp%17#0"
      ]
    },
    "1152": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%17#0",
        "tmp%20#0"
      ]
    },
    "1154": {
      "callsub": "examples.amm.contract.ConstantProductAMM.bootstrap",
      "op": "callsub bootstrap",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1157": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1158": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1164": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1165": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1166": {
      "op": "log",
      "stack_out": []
    },
    "1167": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1168": {
      "op": "b approval_program_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@17"
    },
    "1171": {
      "block": "approval_program_set_governor_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1173": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "1174": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1175": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1176": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1178": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1179": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1180": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1181": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1184": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1185": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1187": {
      "callsub": "examples.amm.contract.ConstantProductAMM.set_governor",
      "op": "callsub set_governor",
      "stack_out": []
    },
    "1190": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1191": {
      "op": "b approval_program_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@17"
    },
    "1194": {
      "block": "approval_program_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "1196": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "0"
      ]
    },
    "1197": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%62#0"
      ]
    },
    "1198": {
      "op": "match approval_program___algopy_default_create@11",
      "stack_out": []
    },
    "1202": {
      "block": "approval_program_switch_case_next@15",
      "stack_in": [],
      "op": "b approval_program_after_if_else@16"
    },
    "1205": {
      "block": "approval_program___algopy_default_create@11",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "1207": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "0"
      ]
    },
    "1208": {
      "op": "==",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "1209": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1210": {
      "block": "approval_program_after_inlined_examples.amm.contract.ConstantProductAMM.__algopy_default_create@13",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1211": {
      "op": "b approval_program_after_inlined_examples.amm.contract.ConstantProductAMM.__puya_arc4_router__@17"
    }
  }
}