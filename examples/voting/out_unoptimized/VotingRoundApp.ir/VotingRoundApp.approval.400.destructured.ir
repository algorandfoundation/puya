main examples.voting.voting.VotingRoundApp.__algopy_entrypoint_with_init:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        examples.voting.voting.VotingRoundApp.__init__()
        goto block@2
    block@2: // after_if_else_L1
        let tmp%1#0: bool = algopy.arc4.ARC4Contract.approval_program()
        return tmp%1#0

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let tmp%0#0: uint64 = (+ required_budget#0 10u)
        let required_budget_with_buffer#0: uint64 = tmp%0#0
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@7
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        switch fee_source#0 {0u => block@3, 1u => block@4, * => block@5}
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@6
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@6
    block@5: // switch_case_default_L26
        goto block@6
    block@6: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@7: // after_while_L20
        return 

subroutine examples.voting.voting.itoa(i: uint64) -> string:
    block@0: // L249
        let tmp%0#0: uint64 = (len 0x30313233343536373839)
        let radix#0: uint64 = tmp%0#0
        let tmp%1#0: bool = (< i#0 radix#0)
        goto tmp%1#0 ? block@1 : block@2
    block@1: // if_body_L254
        let extract%0#0: bytes = (extract3 0x30313233343536373839 i#0 1u)
        let reinterpret_string%0#0: string = extract%0#0
        return reinterpret_string%0#0
    block@2: // after_if_else_L253
        let tmp%2#0: uint64 = (/ i#0 radix#0)
        let tmp%3#0: string = examples.voting.voting.itoa(tmp%2#0)
        let tmp%4#0: uint64 = (% i#0 radix#0)
        let extract%1#0: bytes = (extract3 0x30313233343536373839 tmp%4#0 1u)
        let reinterpret_string%1#0: string = extract%1#0
        let tmp%5#0: bytes = (concat tmp%3#0 reinterpret_string%1#0)
        return tmp%5#0

subroutine examples.voting.voting.VotingRoundApp.__init__() -> void:
    block@0: // L50
        (app_global_put "is_bootstrapped" 0u)
        (app_global_put "voter_count" 0u)
        return 

subroutine examples.voting.voting.VotingRoundApp.create(vote_id: string, snapshot_public_key: bytes, metadata_ipfs_cid: string, start_time: uint64, end_time: uint64, option_counts: Encoded(len+uint8[]), quorum: uint64, nft_image_url: string) -> void:
    block@0: // L58
        let tmp%0#0: bool = (< start_time#0 end_time#0)
        (assert tmp%0#0) // End time should be after start time
        let tmp%1#0: uint64 = (global LatestTimestamp)
        let tmp%2#0: bool = (>= end_time#0 tmp%1#0)
        (assert tmp%2#0) // End time should be in the future
        (app_global_put "vote_id" vote_id#0)
        (app_global_put "snapshot_public_key" snapshot_public_key#0)
        (app_global_put "metadata_ipfs_cid" metadata_ipfs_cid#0)
        (app_global_put "start_time" start_time#0)
        (app_global_put "end_time" end_time#0)
        (app_global_put "quorum" quorum#0)
        (app_global_put "nft_image_url" nft_image_url#0)
        let store_option_counts%0#0: Encoded(len+uint8[]) = examples.voting.voting.VotingRoundApp.store_option_counts(option_counts#0)
        return 

subroutine examples.voting.voting.VotingRoundApp.bootstrap(fund_min_bal_req: uint64) -> void:
    block@0: // L82
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "is_bootstrapped")
        (assert maybe_exists%0#0) // check self.is_bootstrapped exists
        let tmp%0#0: bool = (! maybe_value%0#0)
        (assert tmp%0#0) // Must not be already bootstrapped
        (app_global_put "is_bootstrapped" 1u)
        let tmp%1#0: account = ((gtxns Receiver) fund_min_bal_req#0)
        let tmp%2#0: account = (global CurrentApplicationAddress)
        let tmp%3#0: bool = (== tmp%1#0 tmp%2#0)
        (assert tmp%3#0) // Payment must be to app address
        let (maybe_value%1#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "total_options")
        (assert maybe_exists%1#0) // check self.total_options exists
        let tmp%4#0: uint64 = (* maybe_value%1#0 8u)
        let tally_box_size#0: uint64 = tmp%4#0
        let tmp%5#0: uint64 = (* tally_box_size#0 400u)
        let tmp%6#0: uint64 = (+ 203900u tmp%5#0)
        let min_balance_req#0: uint64 = tmp%6#0
        let tmp%7#0: bytes = (itob min_balance_req#0)
        (log tmp%7#0)
        let tmp%8#0: uint64 = ((gtxns Amount) fund_min_bal_req#0)
        let tmp%9#0: bool = (== tmp%8#0 min_balance_req#0)
        (assert tmp%9#0) // Payment must be for the exact min balance requirement
        let tmp%10#0: bool = (box_create "V" tally_box_size#0)
        (assert tmp%10#0)
        return 

subroutine examples.voting.voting.VotingRoundApp.close() -> void:
    block@0: // L110
        _puya_lib.util.ensure_budget(20000u, 0u)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "close_time")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0) // Already closed
        let tmp%1#0: uint64 = (global LatestTimestamp)
        (app_global_put "close_time" tmp%1#0)
        let (maybe_value%0#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "vote_id")
        (assert maybe_exists%1#0) // check self.vote_id exists
        let tmp%2#0: bytes = (concat "{\"standard\":\"arc69\",\"description\":\"This is a voting result NFT for voting round with ID " maybe_value%0#0)
        let tmp%3#0: bytes = (concat tmp%2#0 ".\",\"properties\":{\"metadata\":\"ipfs://")
        let (maybe_value%1#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "metadata_ipfs_cid")
        (assert maybe_exists%2#0) // check self.metadata_ipfs_cid exists
        let tmp%4#0: bytes = (concat tmp%3#0 maybe_value%1#0)
        let tmp%5#0: bytes = (concat tmp%4#0 "\",\"id\":\"")
        let (maybe_value%2#0: bytes, maybe_exists%3#0: bool) = (app_global_get_ex 0u "vote_id")
        (assert maybe_exists%3#0) // check self.vote_id exists
        let tmp%6#0: bytes = (concat tmp%5#0 maybe_value%2#0)
        let tmp%7#0: bytes = (concat tmp%6#0 "\",\"quorum\":")
        let (maybe_value%3#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "quorum")
        (assert maybe_exists%4#0) // check self.quorum exists
        let tmp%8#0: string = examples.voting.voting.itoa(maybe_value%3#0)
        let tmp%9#0: bytes = (concat tmp%7#0 tmp%8#0)
        let tmp%10#0: bytes = (concat tmp%9#0 ",\"voterCount\":")
        let (maybe_value%4#0: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "voter_count")
        (assert maybe_exists%5#0) // check self.voter_count exists
        let tmp%11#0: string = examples.voting.voting.itoa(maybe_value%4#0)
        let tmp%12#0: bytes = (concat tmp%10#0 tmp%11#0)
        let tmp%13#0: bytes = (concat tmp%12#0 ",\"tallies\":[")
        let note#0: string = tmp%13#0
        let current_index#0: uint64 = 0u
        let (maybe_value%5#0: bytes, maybe_exists%6#0: bool) = (app_global_get_ex 0u "option_counts")
        (assert maybe_exists%6#0) // check self.option_counts exists
        let array_length%0#0: uint64 = (extract_uint16 maybe_value%5#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L132
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%0#0)
        goto continue_looping%0#0 ? block@2 : block@14
    block@2: // for_body_L133
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) maybe_value%5#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#0 1u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 1u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8) = aggregate%encoded_element%0#1
        let question_options#0: Encoded(uint8) = array_item%0#0
        let question_index#0: uint64 = item_index_internal%0#0
        let tmp%14#0: bool = (> question_index#0 0u)
        let note#17: string = note#0
        goto tmp%14#0 ? block@3 : block@4
    block@3: // if_body_L134
        let tmp%15#0: bytes = (concat note#0 ",")
        let note#0: string = tmp%15#0
        let note#17: string = note#0
        goto block@4
    block@4: // after_if_else_L133
        let note#0: string = note#17
        let reinterpret_biguint%0#0: biguint = question_options#0
        let tmp%16#0: bool = (b> reinterpret_biguint%0#0 0x00)
        let current_index#15: uint64 = current_index#0
        let note#17: string = note#0
        goto tmp%16#0 ? block@5 : block@12
    block@5: // if_body_L136
        let tmp%17#0: bytes = (concat note#0 "[")
        let note#0: string = tmp%17#0
        let tmp%18#0: uint64 = (btoi question_options#0)
        (assert 1u) // Step cannot be zero
        let option_index#0: uint64 = 0u
        goto block@6
    block@6: // for_header_L137
        let continue_looping%1#0: bool = (< option_index#0 tmp%18#0)
        goto continue_looping%1#0 ? block@7 : block@11
    block@7: // for_body_L138
        let tmp%19#0: bool = (> option_index#0 0u)
        let note#17: string = note#0
        goto tmp%19#0 ? block@8 : block@9
    block@8: // if_body_L139
        let tmp%20#0: bytes = (concat note#0 ",")
        let note#0: string = tmp%20#0
        let note#17: string = note#0
        goto block@9
    block@9: // after_if_else_L138
        let note#0: string = note#17
        let tmp%21#0: uint64 = examples.voting.voting.VotingRoundApp.get_vote_from_box(current_index#0)
        let votes_for_option#0: uint64 = tmp%21#0
        let tmp%22#0: string = examples.voting.voting.itoa(votes_for_option#0)
        let tmp%23#0: bytes = (concat note#0 tmp%22#0)
        let note#0: string = tmp%23#0
        let tmp%24#0: uint64 = (+ current_index#0 1u)
        let current_index#0: uint64 = tmp%24#0
        goto block@10
    block@10: // for_footer_L137
        let option_index#0: uint64 = (+ option_index#0 1u)
        goto block@6
    block@11: // after_for_L137
        let tmp%25#0: bytes = (concat note#0 "]")
        let note#0: string = tmp%25#0
        let current_index#15: uint64 = current_index#0
        let note#17: string = note#0
        goto block@12
    block@12: // after_if_else_L135
        let current_index#0: uint64 = current_index#15
        let note#0: string = note#17
        goto block@13
    block@13: // for_footer_L132
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@14: // after_for_L132
        let tmp%26#0: bytes = (concat note#0 "]}}")
        let note#0: string = tmp%26#0
        itxn_begin
        let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = (global MinTxnFee)
        let (maybe_value%6#0: bytes, maybe_exists%7#0: bool) = (app_global_get_ex 0u "vote_id")
        (assert maybe_exists%7#0) // check self.vote_id exists
        let inner_txn_params%0%%param_ConfigAssetName_idx_0#0: bytes = (concat "[VOTE RESULT] " maybe_value%6#0)
        let (maybe_value%7#0: bytes, maybe_exists%8#0: bool) = (app_global_get_ex 0u "nft_image_url")
        (assert maybe_exists%8#0) // check self.nft_image_url exists
        let inner_txn_params%0%%param_ConfigAssetURL_idx_0#0: bytes = maybe_value%7#0
        let inner_txn_params%0%%param_Note_idx_0#0: string = note#0
        ((itxn_field Note) inner_txn_params%0%%param_Note_idx_0#0)
        ((itxn_field ConfigAssetURL) inner_txn_params%0%%param_ConfigAssetURL_idx_0#0)
        ((itxn_field ConfigAssetUnitName) "VOTERSLT")
        ((itxn_field ConfigAssetName) inner_txn_params%0%%param_ConfigAssetName_idx_0#0)
        ((itxn_field ConfigAssetDefaultFrozen) 0u)
        ((itxn_field ConfigAssetDecimals) 0u)
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
        goto block@15
    block@15: // next_txn_L146
        itxn_submit
        let tmp%27#0: uint64 = (itxn CreatedAssetID)
        (app_global_put "nft_asset_id" tmp%27#0)
        return 

subroutine examples.voting.voting.VotingRoundApp.get_preconditions(signature: bytes) -> Encoded(uint64,uint64,uint64,uint64):
    block@0: // L160
        let tmp%0#0: bool = examples.voting.voting.VotingRoundApp.voting_open()
        let aggregate%val_as_bytes%0#1: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#1: Encoded(uint64) = aggregate%val_as_bytes%0#1
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#1
        let tmp%2#0: bool = examples.voting.voting.VotingRoundApp.allowed_to_vote(signature#0)
        let aggregate%val_as_bytes%1#1: bytes[8] = (itob tmp%2#0)
        let aggregate%as_Encoded(uint64)%1#1: Encoded(uint64) = aggregate%val_as_bytes%1#1
        let tmp%3#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%1#1
        let tmp%4#0: bool = examples.voting.voting.VotingRoundApp.already_voted()
        let aggregate%val_as_bytes%2#1: bytes[8] = (itob tmp%4#0)
        let aggregate%as_Encoded(uint64)%2#1: Encoded(uint64) = aggregate%val_as_bytes%2#1
        let tmp%5#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%2#1
        let tmp%6#0: uint64 = (global LatestTimestamp)
        let aggregate%val_as_bytes%3#1: bytes[8] = (itob tmp%6#0)
        let aggregate%as_Encoded(uint64)%3#1: Encoded(uint64) = aggregate%val_as_bytes%3#1
        let tmp%7#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%3#1
        let aggregate%encoded%0#1: bytes = (concat 0x tmp%1#0)
        let aggregate%encoded%1#1: bytes = (concat aggregate%encoded%0#1 tmp%3#0)
        let aggregate%encoded%2#1: bytes = (concat aggregate%encoded%1#1 tmp%5#0)
        let aggregate%encoded%3#1: bytes = (concat aggregate%encoded%2#1 tmp%7#0)
        let aggregate%encoded%4#1: Encoded(uint64,uint64,uint64,uint64) = (concat aggregate%encoded%3#1 0x)
        let tmp%8#0: Encoded(uint64,uint64,uint64,uint64) = aggregate%encoded%4#1
        return tmp%8#0

subroutine examples.voting.voting.VotingRoundApp.vote(fund_min_bal_req: uint64, signature: bytes, answer_ids: Encoded(len+uint8[])) -> void:
    block@0: // L169
        _puya_lib.util.ensure_budget(7700u, 0u)
        let tmp%0#0: bool = examples.voting.voting.VotingRoundApp.allowed_to_vote(signature#0)
        (assert tmp%0#0) // Not allowed to vote
        let tmp%1#0: bool = examples.voting.voting.VotingRoundApp.voting_open()
        (assert tmp%1#0) // Voting not open
        let tmp%2#0: bool = examples.voting.voting.VotingRoundApp.already_voted()
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // Already voted
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "option_counts")
        (assert maybe_exists%0#0) // check self.option_counts exists
        let array_length%0#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let questions_count#0: uint64 = array_length%0#0
        let array_length%1#0: uint64 = (extract_uint16 answer_ids#0 0u)
        let tmp%4#0: bool = (== array_length%1#0 questions_count#0)
        (assert tmp%4#0) // Number of answers incorrect
        let array_length%2#0: uint64 = (extract_uint16 answer_ids#0 0u)
        let tmp%5#0: uint64 = (* 1u array_length%2#0)
        let tmp%6#0: uint64 = (+ 34u tmp%5#0)
        let tmp%7#0: uint64 = (* tmp%6#0 400u)
        let tmp%8#0: uint64 = (+ 2500u tmp%7#0)
        let min_bal_req#0: uint64 = tmp%8#0
        let tmp%9#0: account = ((gtxns Receiver) fund_min_bal_req#0)
        let tmp%10#0: account = (global CurrentApplicationAddress)
        let tmp%11#0: bool = (== tmp%9#0 tmp%10#0)
        (assert tmp%11#0) // Payment must be to app address
        let tmp%12#0: bytes = (itob min_bal_req#0)
        (log tmp%12#0)
        let tmp%13#0: uint64 = ((gtxns Amount) fund_min_bal_req#0)
        let tmp%14#0: bool = (== tmp%13#0 min_bal_req#0)
        (assert tmp%14#0) // Payment must be the exact min balance
        let cumulative_offset#0: uint64 = 0u
        (assert 1u) // Step cannot be zero
        let question_index#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L195
        let continue_looping%0#0: bool = (< question_index#0 questions_count#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L197
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) answer_ids#0)
        let aggregate%bytes_offset%0#1: uint64 = (* question_index#0 1u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 1u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8) = aggregate%encoded_element%0#1
        let tmp%15#0: uint64 = (btoi array_item%0#0)
        let answer_option_index#0: uint64 = tmp%15#0
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "option_counts")
        (assert maybe_exists%1#0) // check self.option_counts exists
        let aggregate%array_trimmed%1#1: bytes = ((extract 2 0) maybe_value%1#0)
        let aggregate%bytes_offset%1#1: uint64 = (* question_index#0 1u)
        let aggregate%encoded_element%1#1: bytes = (extract3 aggregate%array_trimmed%1#1 aggregate%bytes_offset%1#1 1u) // on error: index access is out of bounds
        let array_item%1#0: Encoded(uint8) = aggregate%encoded_element%1#1
        let tmp%16#0: uint64 = (btoi array_item%1#0)
        let options_count#0: uint64 = tmp%16#0
        let tmp%17#0: bool = (< answer_option_index#0 options_count#0)
        (assert tmp%17#0) // Answer option index invalid
        let tmp%18#0: uint64 = (+ cumulative_offset#0 answer_option_index#0)
        examples.voting.voting.VotingRoundApp.increment_vote_in_box(tmp%18#0)
        let tmp%19#0: uint64 = (+ cumulative_offset#0 options_count#0)
        let cumulative_offset#0: uint64 = tmp%19#0
        let materialized_values%0#0: account = (txn Sender)
        let box_prefixed_key%0#0: bytes = (concat "" materialized_values%0#0)
        (box_del box_prefixed_key%0#0)
        (box_put box_prefixed_key%0#0 answer_ids#0)
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "voter_count")
        (assert maybe_exists%2#0) // check self.voter_count exists
        let tmp%20#0: uint64 = (+ maybe_value%2#0 1u)
        (app_global_put "voter_count" tmp%20#0)
        goto block@3
    block@3: // for_footer_L195
        let question_index#0: uint64 = (+ question_index#0 1u)
        goto block@1
    block@4: // after_for_L195
        return 

subroutine examples.voting.voting.VotingRoundApp.voting_open() -> bool:
    block@0: // L205
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "is_bootstrapped")
        (assert maybe_exists%0#0) // check self.is_bootstrapped exists
        goto maybe_value%0#0 ? block@1 : block@5
    block@1: // and_contd_L208
        let (_%0#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "close_time")
        goto maybe_exists%1#0 ? block@5 : block@2
    block@2: // and_contd_L208
        let (maybe_value%1#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "start_time")
        (assert maybe_exists%2#0) // check self.start_time exists
        let awst_tmp%0#0: uint64 = (global LatestTimestamp)
        let tmp%0#0: bool = (<= maybe_value%1#0 awst_tmp%0#0)
        goto tmp%0#0 ? block@3 : block@5
    block@3: // and_contd_L210
        let (maybe_value%2#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "end_time")
        (assert maybe_exists%3#0) // check self.end_time exists
        let tmp%1#0: bool = (<= awst_tmp%0#0 maybe_value%2#0)
        goto tmp%1#0 ? block@4 : block@5
    block@4: // bool_true_L208
        let and_result%0#0: bool = 1u
        goto block@6
    block@5: // bool_false_L208
        let and_result%0#0: bool = 0u
        goto block@6
    block@6: // bool_merge_L208
        return and_result%0#0

subroutine examples.voting.voting.VotingRoundApp.already_voted() -> bool:
    block@0: // L213
        let materialized_values%0#0: account = (txn Sender)
        let box_prefixed_key%0#0: bytes = (concat "" materialized_values%0#0)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len box_prefixed_key%0#0)
        return maybe_exists%0#0

subroutine examples.voting.voting.VotingRoundApp.store_option_counts(option_counts: Encoded(len+uint8[])) -> Encoded(len+uint8[]):
    block@0: // L217
        let option_counts%out#0: Encoded(len+uint8[]) = option_counts#0
        let array_length%0#0: uint64 = (extract_uint16 option_counts#0 0u)
        let tmp%0#0: bool = (!= array_length%0#0 0u)
        (assert tmp%0#0) // option_counts should be non-empty
        let array_length%1#0: uint64 = (extract_uint16 option_counts#0 0u)
        let tmp%1#0: bool = (<= array_length%1#0 112u)
        (assert tmp%1#0) // Can't have more than 112 questions
        let total_options#0: uint64 = 0u
        let array_length%2#0: uint64 = (extract_uint16 option_counts#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L223
        let continue_looping%0#0: bool = (< item_index_internal%0#0 array_length%2#0)
        goto continue_looping%0#0 ? block@2 : block@4
    block@2: // for_body_L224
        let aggregate%array_trimmed%0#1: bytes = ((extract 2 0) option_counts#0)
        let aggregate%bytes_offset%0#1: uint64 = (* item_index_internal%0#0 1u)
        let aggregate%encoded_element%0#1: bytes = (extract3 aggregate%array_trimmed%0#1 aggregate%bytes_offset%0#1 1u) // on error: index access is out of bounds
        let array_item%0#0: Encoded(uint8) = aggregate%encoded_element%0#1
        let item#0: Encoded(uint8) = array_item%0#0
        let tmp%2#0: uint64 = (btoi item#0)
        let tmp%3#0: uint64 = (+ total_options#0 tmp%2#0)
        let total_options#0: uint64 = tmp%3#0
        goto block@3
    block@3: // for_footer_L223
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@1
    block@4: // after_for_L223
        let tmp%4#0: bool = (<= total_options#0 128u)
        (assert tmp%4#0) // Can't have more than 128 vote options
        (app_global_put "option_counts" option_counts#0)
        (app_global_put "total_options" total_options#0)
        return option_counts%out#0

subroutine examples.voting.voting.VotingRoundApp.allowed_to_vote(signature: bytes) -> bool:
    block@0: // L230
        _puya_lib.util.ensure_budget(2000u, 0u)
        let tmp%0#0: account = (txn Sender)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "snapshot_public_key")
        (assert maybe_exists%0#0) // check self.snapshot_public_key exists
        let tmp%1#0: bool = (ed25519verify_bare tmp%0#0 signature#0 maybe_value%0#0)
        return tmp%1#0

subroutine examples.voting.voting.VotingRoundApp.get_vote_from_box(index: uint64) -> uint64:
    block@0: // L239
        let tmp%0#0: bytes = (box_extract "V" index#0 8u)
        let tmp%1#0: uint64 = (btoi tmp%0#0)
        return tmp%1#0

subroutine examples.voting.voting.VotingRoundApp.increment_vote_in_box(index: uint64) -> void:
    block@0: // L243
        let tmp%0#0: uint64 = examples.voting.voting.VotingRoundApp.get_vote_from_box(index#0)
        let current_vote#0: uint64 = tmp%0#0
        let tmp%1#0: uint64 = (+ current_vote#0 1u)
        let tmp%2#0: bytes = (itob tmp%1#0)
        (box_replace "V" index#0 tmp%2#0)
        return 

subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
    block@0: // L1
        goto block@1
    block@1: // L49
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@10
    block@2: // abi_routing_L49
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void" => block@3, method "bootstrap(pay)void" => block@4, method "close()void" => block@5, method "get_preconditions(byte[])(uint64,uint64,uint64,uint64)" => block@6, method "vote(pay,byte[],uint8[])void" => block@7, * => block@8}
    block@3: // create_route_L58
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        (assert tmp%6#0) // can only call when creating
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let tmp%7#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%8#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        let tmp%9#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let tmp%10#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let tmp%11#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 6)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 7)
        let tmp%12#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = (txna ApplicationArgs 8)
        let tmp%13#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%2#0)
        examples.voting.voting.VotingRoundApp.create(tmp%7#0, tmp%8#0, tmp%9#0, tmp%10#0, tmp%11#0, reinterpret_Encoded(len+uint8[])%1#0, tmp%12#0, tmp%13#0)
        let examples.voting.voting.VotingRoundApp.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.voting.voting.VotingRoundApp.__puya_arc4_router__%0#0
        goto block@12
    block@4: // bootstrap_route_L82
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (== tmp%14#0 NoOp)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        let tmp%17#0: bool = (!= tmp%16#0 0u)
        (assert tmp%17#0) // can only call when not creating
        let tmp%18#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%18#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        examples.voting.voting.VotingRoundApp.bootstrap(gtxn_idx%0#0)
        let examples.voting.voting.VotingRoundApp.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.voting.voting.VotingRoundApp.__puya_arc4_router__%0#0
        goto block@12
    block@5: // close_route_L110
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (== tmp%19#0 NoOp)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (!= tmp%21#0 0u)
        (assert tmp%22#0) // can only call when not creating
        examples.voting.voting.VotingRoundApp.close()
        let examples.voting.voting.VotingRoundApp.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.voting.voting.VotingRoundApp.__puya_arc4_router__%0#0
        goto block@12
    block@6: // get_preconditions_route_L160
        let tmp%23#0: uint64 = (txn OnCompletion)
        let tmp%24#0: bool = (== tmp%23#0 NoOp)
        (assert tmp%24#0) // OnCompletion is not NoOp
        let tmp%25#0: uint64 = (txn ApplicationID)
        let tmp%26#0: bool = (!= tmp%25#0 0u)
        (assert tmp%26#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%27#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%2#0)
        let tmp%28#0: Encoded(uint64,uint64,uint64,uint64) = examples.voting.voting.VotingRoundApp.get_preconditions(tmp%27#0)
        let tmp%29#0: bytes = (concat 0x151f7c75 tmp%28#0)
        (log tmp%29#0)
        let examples.voting.voting.VotingRoundApp.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.voting.voting.VotingRoundApp.__puya_arc4_router__%0#0
        goto block@12
    block@7: // vote_route_L169
        let tmp%30#0: uint64 = (txn OnCompletion)
        let tmp%31#0: bool = (== tmp%30#0 NoOp)
        (assert tmp%31#0) // OnCompletion is not NoOp
        let tmp%32#0: uint64 = (txn ApplicationID)
        let tmp%33#0: bool = (!= tmp%32#0 0u)
        (assert tmp%33#0) // can only call when not creating
        let tmp%34#0: uint64 = (txn GroupIndex)
        let gtxn_idx%1#0: uint64 = (- tmp%34#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 pay)
        (assert gtxn_type_matches%1#0) // transaction type is pay
        let reinterpret_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%35#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%3#0)
        let reinterpret_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        examples.voting.voting.VotingRoundApp.vote(gtxn_idx%1#0, tmp%35#0, reinterpret_Encoded(len+uint8[])%4#0)
        let examples.voting.voting.VotingRoundApp.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = examples.voting.voting.VotingRoundApp.__puya_arc4_router__%0#0
        goto block@12
    block@8: // switch_case_default_L49
        goto block@9
    block@9: // switch_case_next_L49
        goto block@11
    block@10: // bare_routing_L49
        goto block@11
    block@11: // after_if_else_L49
        let examples.voting.voting.VotingRoundApp.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = examples.voting.voting.VotingRoundApp.__puya_arc4_router__%0#0
        goto block@12
    block@12: // after_inlined_examples.voting.voting.VotingRoundApp.__puya_arc4_router___L1
        return tmp%0#0