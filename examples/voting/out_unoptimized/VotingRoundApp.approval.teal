#pragma version 10

examples.voting.voting.VotingRoundApp.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // voting/voting.py:48
    // class VotingRoundApp(ARC4Contract):
    txna ApplicationArgs 0
    method "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void"
    method "bootstrap(pay)void"
    method "close()void"
    method "get_preconditions(byte[])(uint64,uint64,uint64,uint64)"
    method "vote(pay,byte[],uint8[])void"
    uncover 5
    match main_create_route@3 main_bootstrap_route@4 main_close_route@5 main_get_preconditions_route@6 main_vote_route@7
    b main_switch_case_default@8

main_create_route@3:
    // voting/voting.py:55
    // @arc4.abimethod(create=True)
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    // voting/voting.py:48
    // class VotingRoundApp(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    btoi
    txna ApplicationArgs 8
    // voting/voting.py:55
    // @arc4.abimethod(create=True)
    uncover 7
    uncover 7
    uncover 7
    uncover 7
    uncover 7
    uncover 7
    uncover 7
    uncover 7
    callsub create
    int 1
    return

main_bootstrap_route@4:
    // voting/voting.py:79
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // voting/voting.py:48
    // class VotingRoundApp(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    // voting/voting.py:79
    // @arc4.abimethod
    callsub bootstrap
    int 1
    return

main_close_route@5:
    // voting/voting.py:107
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub close
    int 1
    return

main_get_preconditions_route@6:
    // voting/voting.py:157
    // @arc4.abimethod(readonly=True)
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // voting/voting.py:48
    // class VotingRoundApp(ARC4Contract):
    txna ApplicationArgs 1
    // voting/voting.py:157
    // @arc4.abimethod(readonly=True)
    callsub get_preconditions
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_vote_route@7:
    // voting/voting.py:166
    // @arc4.abimethod
    txn OnCompletion
    int NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // voting/voting.py:48
    // class VotingRoundApp(ARC4Contract):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    // voting/voting.py:166
    // @arc4.abimethod
    uncover 2
    uncover 2
    uncover 2
    callsub vote
    int 1
    return

main_switch_case_default@8:
    // voting/voting.py:48
    // class VotingRoundApp(ARC4Contract):
    err // reject transaction


// examples.voting.voting.VotingRoundApp.create(vote_id: bytes, snapshot_public_key: bytes, metadata_ipfs_cid: bytes, start_time: uint64, end_time: uint64, option_counts: bytes, quorum: uint64, nft_image_url: bytes) -> void:
create:
    // voting/voting.py:55-66
    // @arc4.abimethod(create=True)
    // def create(
    //     self,
    //     vote_id: arc4.String,
    //     snapshot_public_key: Bytes,
    //     metadata_ipfs_cid: arc4.String,
    //     start_time: UInt64,
    //     end_time: UInt64,
    //     option_counts: VoteIndexArray,
    //     quorum: UInt64,
    //     nft_image_url: arc4.String,
    // ) -> None:
    proto 8 0
    // voting/voting.py:67
    // assert start_time < end_time, "End time should be after start time"
    frame_dig -5
    frame_dig -4
    <
    assert // End time should be after start time
    // voting/voting.py:68
    // assert end_time >= Global.latest_timestamp, "End time should be in the future"
    global LatestTimestamp
    frame_dig -4
    swap
    >=
    assert // End time should be in the future
    // voting/voting.py:70
    // self.vote_id = vote_id.decode()
    frame_dig -8
    extract 2 0
    byte "vote_id"
    swap
    app_global_put
    // voting/voting.py:71
    // self.snapshot_public_key = snapshot_public_key
    byte "snapshot_public_key"
    frame_dig -7
    app_global_put
    // voting/voting.py:72
    // self.metadata_ipfs_cid = metadata_ipfs_cid.decode()
    frame_dig -6
    extract 2 0
    byte "metadata_ipfs_cid"
    swap
    app_global_put
    // voting/voting.py:73
    // self.start_time = start_time
    byte "start_time"
    frame_dig -5
    app_global_put
    // voting/voting.py:74
    // self.end_time = end_time
    byte "end_time"
    frame_dig -4
    app_global_put
    // voting/voting.py:75
    // self.quorum = quorum
    byte "quorum"
    frame_dig -2
    app_global_put
    // voting/voting.py:76
    // self.nft_image_url = nft_image_url.decode()
    frame_dig -1
    extract 2 0
    byte "nft_image_url"
    swap
    app_global_put
    // voting/voting.py:77
    // self.store_option_counts(option_counts.copy())
    frame_dig -3
    callsub store_option_counts
    pop
    retsub


// examples.voting.voting.VotingRoundApp.store_option_counts(option_counts: bytes) -> bytes:
store_option_counts:
    // voting/voting.py:215-216
    // @subroutine
    // def store_option_counts(self, option_counts: VoteIndexArray) -> None:
    proto 1 1
    // voting/voting.py:217
    // assert option_counts.length, "option_counts should be non-empty"
    frame_dig -1
    int 0
    extract_uint16
    assert // option_counts should be non-empty
    // voting/voting.py:218
    // assert option_counts.length <= 112, "Can't have more than 112 questions"
    frame_dig -1
    int 0
    extract_uint16
    int 112
    <=
    assert // Can't have more than 112 questions
    // voting/voting.py:220
    // total_options = UInt64(0)
    int 0
    // voting/voting.py:221
    // for item in option_counts:
    frame_dig -1
    int 0
    extract_uint16
    frame_dig -1
    extract 2 0
    int 0

store_option_counts_for_header@1:
    // voting/voting.py:221
    // for item in option_counts:
    frame_dig 3
    frame_dig 1
    <
    bz store_option_counts_after_for@4
    frame_dig 3
    int 1
    *
    frame_dig 2
    swap
    int 1
    extract3
    // voting/voting.py:222
    // total_options += item.decode()
    btoi
    frame_dig 0
    swap
    +
    frame_bury 0
    frame_dig 3
    int 1
    +
    frame_bury 3
    b store_option_counts_for_header@1

store_option_counts_after_for@4:
    // voting/voting.py:223
    // assert total_options <= 128, "Can't have more than 128 vote options"
    frame_dig 0
    dup
    int 128
    <=
    assert // Can't have more than 128 vote options
    // voting/voting.py:225
    // self.option_counts = option_counts.copy()
    frame_dig -1
    byte "option_counts"
    swap
    app_global_put
    // voting/voting.py:226
    // self.total_options = total_options
    byte "total_options"
    swap
    app_global_put
    frame_dig -1
    frame_bury 0
    retsub


// examples.voting.voting.VotingRoundApp.bootstrap(fund_min_bal_req: uint64) -> void:
bootstrap:
    // voting/voting.py:79-80
    // @arc4.abimethod
    // def bootstrap(self, fund_min_bal_req: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // voting/voting.py:81
    // assert not self.is_bootstrapped, "Must not be already bootstrapped"
    int 0
    byte "is_bootstrapped"
    app_global_get_ex
    assert // check is_bootstrapped exists
    !
    assert // Must not be already bootstrapped
    // voting/voting.py:82
    // self.is_bootstrapped = True
    byte "is_bootstrapped"
    int 1
    app_global_put
    // voting/voting.py:85
    // fund_min_bal_req.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // voting/voting.py:84-86
    // assert (
    //     fund_min_bal_req.receiver == Global.current_application_address
    // ), "Payment must be to app address"
    assert // Payment must be to app address
    // voting/voting.py:88
    // tally_box_size = self.total_options * VOTE_COUNT_BYTES
    int 0
    byte "total_options"
    app_global_get_ex
    assert // check total_options exists
    int 8
    *
    // voting/voting.py:98-99
    // # tally box value
    // + (tally_box_size * BOX_BYTE_MIN_BALANCE)
    dup
    int 400
    *
    // voting/voting.py:90-97
    // # minimum balance req for: ALGOs + Vote result NFT asset
    // ASSET_MIN_BALANCE * 2
    // # create NFT fee
    // + 1000
    // # tally box
    // + BOX_FLAT_MIN_BALANCE
    // # tally box key "V"
    // + BOX_BYTE_MIN_BALANCE
    int 203900
    // voting/voting.py:89-100
    // min_balance_req = (
    //     # minimum balance req for: ALGOs + Vote result NFT asset
    //     ASSET_MIN_BALANCE * 2
    //     # create NFT fee
    //     + 1000
    //     # tally box
    //     + BOX_FLAT_MIN_BALANCE
    //     # tally box key "V"
    //     + BOX_BYTE_MIN_BALANCE
    //     # tally box value
    //     + (tally_box_size * BOX_BYTE_MIN_BALANCE)
    // )
    swap
    // voting/voting.py:90-99
    // # minimum balance req for: ALGOs + Vote result NFT asset
    // ASSET_MIN_BALANCE * 2
    // # create NFT fee
    // + 1000
    // # tally box
    // + BOX_FLAT_MIN_BALANCE
    // # tally box key "V"
    // + BOX_BYTE_MIN_BALANCE
    // # tally box value
    // + (tally_box_size * BOX_BYTE_MIN_BALANCE)
    +
    // voting/voting.py:101
    // log(min_balance_req)
    dup
    itob
    log
    // voting/voting.py:103
    // fund_min_bal_req.amount == min_balance_req
    frame_dig -1
    gtxns Amount
    swap
    ==
    // voting/voting.py:102-104
    // assert (
    //     fund_min_bal_req.amount == min_balance_req
    // ), "Payment must be for the exact min balance requirement"
    assert // Payment must be for the exact min balance requirement
    // voting/voting.py:105
    // assert op.Box.create(TALLY_BOX_KEY, tally_box_size)
    byte "V"
    swap
    box_create
    assert
    retsub


// examples.voting.voting.VotingRoundApp.close() -> void:
close:
    // voting/voting.py:107-108
    // @arc4.abimethod
    // def close(self) -> None:
    proto 0 0
    int 0
    dup
    byte ""
    dupn 2
    // voting/voting.py:109
    // ensure_budget(20000, fee_source=OpUpFeeSource.GroupCredit)
    int 20000
    int 0
    callsub ensure_budget
    // voting/voting.py:110
    // assert not self.close_time, "Already closed"
    int 0
    byte "close_time"
    app_global_get_ex
    swap
    pop
    !
    assert // Already closed
    // voting/voting.py:111
    // self.close_time.value = Global.latest_timestamp
    global LatestTimestamp
    byte "close_time"
    swap
    app_global_put
    // voting/voting.py:116
    // + self.vote_id
    int 0
    byte "vote_id"
    app_global_get_ex
    assert // check vote_id exists
    // voting/voting.py:114-115
    // b'{"standard":"arc69",'
    // b'"description":"This is a voting result NFT for voting round with ID '
    byte "{\"standard\":\"arc69\",\"description\":\"This is a voting result NFT for voting round with ID "
    // voting/voting.py:114-116
    // b'{"standard":"arc69",'
    // b'"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    swap
    concat
    // voting/voting.py:117
    // + b'.","properties":{"metadata":"ipfs://'
    byte ".\",\"properties\":{\"metadata\":\"ipfs://"
    // voting/voting.py:114-117
    // b'{"standard":"arc69",'
    // b'"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + b'.","properties":{"metadata":"ipfs://'
    concat
    // voting/voting.py:118
    // + self.metadata_ipfs_cid
    int 0
    byte "metadata_ipfs_cid"
    app_global_get_ex
    assert // check metadata_ipfs_cid exists
    // voting/voting.py:114-118
    // b'{"standard":"arc69",'
    // b'"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + b'.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    concat
    // voting/voting.py:119
    // + b'","id":"'
    byte "\",\"id\":\""
    // voting/voting.py:114-119
    // b'{"standard":"arc69",'
    // b'"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + b'.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + b'","id":"'
    concat
    // voting/voting.py:120
    // + self.vote_id
    int 0
    byte "vote_id"
    app_global_get_ex
    assert // check vote_id exists
    // voting/voting.py:114-120
    // b'{"standard":"arc69",'
    // b'"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + b'.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + b'","id":"'
    // + self.vote_id
    concat
    // voting/voting.py:121
    // + b'","quorum":'
    byte "\",\"quorum\":"
    // voting/voting.py:114-121
    // b'{"standard":"arc69",'
    // b'"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + b'.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + b'","id":"'
    // + self.vote_id
    // + b'","quorum":'
    concat
    // voting/voting.py:122
    // + itoa(self.quorum)
    int 0
    byte "quorum"
    app_global_get_ex
    assert // check quorum exists
    callsub itoa
    // voting/voting.py:114-122
    // b'{"standard":"arc69",'
    // b'"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + b'.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + b'","id":"'
    // + self.vote_id
    // + b'","quorum":'
    // + itoa(self.quorum)
    concat
    // voting/voting.py:123
    // + b',"voterCount":'
    byte ",\"voterCount\":"
    // voting/voting.py:114-123
    // b'{"standard":"arc69",'
    // b'"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + b'.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + b'","id":"'
    // + self.vote_id
    // + b'","quorum":'
    // + itoa(self.quorum)
    // + b',"voterCount":'
    concat
    // voting/voting.py:124
    // + itoa(self.voter_count)
    int 0
    byte "voter_count"
    app_global_get_ex
    assert // check voter_count exists
    callsub itoa
    // voting/voting.py:114-124
    // b'{"standard":"arc69",'
    // b'"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + b'.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + b'","id":"'
    // + self.vote_id
    // + b'","quorum":'
    // + itoa(self.quorum)
    // + b',"voterCount":'
    // + itoa(self.voter_count)
    concat
    // voting/voting.py:125
    // + b',"tallies":['
    byte ",\"tallies\":["
    // voting/voting.py:114-125
    // b'{"standard":"arc69",'
    // b'"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + b'.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + b'","id":"'
    // + self.vote_id
    // + b'","quorum":'
    // + itoa(self.quorum)
    // + b',"voterCount":'
    // + itoa(self.voter_count)
    // + b',"tallies":['
    concat
    // voting/voting.py:128
    // current_index = UInt64(0)
    int 0
    // voting/voting.py:129
    // for question_index, question_options_arc in uenumerate(self.option_counts):
    int 0
    byte "option_counts"
    app_global_get_ex
    assert // check option_counts exists
    dup
    int 0
    extract_uint16
    swap
    extract 2 0
    int 0

close_for_header@1:
    // voting/voting.py:129
    // for question_index, question_options_arc in uenumerate(self.option_counts):
    frame_dig 9
    frame_dig 7
    <
    bz close_after_for@15
    frame_dig 9
    dup
    int 1
    *
    frame_dig 8
    swap
    int 1
    extract3
    frame_bury 1
    // voting/voting.py:130
    // if question_index > 0:
    int 0
    >
    frame_dig 5
    frame_bury 0
    bz close_after_if_else@4
    // voting/voting.py:131
    // note += b","
    frame_dig 5
    byte ","
    concat
    frame_bury 0

close_after_if_else@4:
    frame_dig 0
    dup
    frame_bury 5
    // voting/voting.py:132
    // question_options = question_options_arc.decode()
    frame_dig 1
    btoi
    dup
    frame_bury 3
    // voting/voting.py:133
    // if question_options > 0:
    int 0
    >
    frame_dig 6
    frame_bury 2
    swap
    frame_bury 0
    bz close_after_if_else@13
    // voting/voting.py:134
    // note += b"["
    frame_dig 5
    byte "["
    concat
    frame_bury 5
    // voting/voting.py:135
    // for option_index in urange(question_options):
    int 1
    assert // Step cannot be zero
    int 0
    frame_bury 4

close_for_header@6:
    // voting/voting.py:135
    // for option_index in urange(question_options):
    frame_dig 4
    frame_dig 3
    <
    bz close_after_for@12
    frame_dig 4
    // voting/voting.py:136
    // if option_index > 0:
    int 0
    >
    frame_dig 5
    frame_bury 0
    bz close_after_if_else@9
    // voting/voting.py:137
    // note += b","
    frame_dig 5
    byte ","
    concat
    frame_bury 0

close_after_if_else@9:
    frame_dig 0
    // voting/voting.py:138
    // votes_for_option = get_vote_from_box(current_index)
    frame_dig 6
    dup
    cover 2
    callsub get_vote_from_box
    // voting/voting.py:139
    // note += itoa(votes_for_option)
    callsub itoa
    concat
    frame_bury 5
    // voting/voting.py:140
    // current_index += 1
    int 1
    +
    frame_bury 6
    // voting/voting.py:135
    // for option_index in urange(question_options):
    frame_dig 4
    int 1
    +
    frame_bury 4
    b close_for_header@6

close_after_for@12:
    // voting/voting.py:141
    // note += b"]"
    frame_dig 5
    byte "]"
    concat
    frame_dig 6
    frame_bury 2
    frame_bury 0

close_after_if_else@13:
    frame_dig 2
    frame_bury 6
    frame_dig 0
    frame_bury 5
    frame_dig 9
    int 1
    +
    frame_bury 9
    b close_for_header@1

close_after_for@15:
    // voting/voting.py:142
    // note += b"]}}"
    frame_dig 5
    byte "]}}"
    concat
    // voting/voting.py:144-153
    // itxn.AssetConfig(
    //     total=1,
    //     decimals=0,
    //     default_frozen=False,
    //     asset_name=b"[VOTE RESULT] " + self.vote_id,
    //     unit_name=b"VOTERSLT",
    //     url=self.nft_image_url,
    //     note=note,
    // )
    // .submit()
    itxn_begin
    // voting/voting.py:148
    // asset_name=b"[VOTE RESULT] " + self.vote_id,
    int 0
    byte "vote_id"
    app_global_get_ex
    assert // check vote_id exists
    byte "[VOTE RESULT] "
    swap
    concat
    swap
    // voting/voting.py:146
    // decimals=0,
    int 0
    swap
    // voting/voting.py:147
    // default_frozen=False,
    int 0
    swap
    // voting/voting.py:145
    // total=1,
    int 1
    // voting/voting.py:144
    // itxn.AssetConfig(
    int acfg
    // voting/voting.py:149
    // unit_name=b"VOTERSLT",
    byte "VOTERSLT"
    // voting/voting.py:150
    // url=self.nft_image_url,
    int 0
    byte "nft_image_url"
    app_global_get_ex
    assert // check nft_image_url exists
    itxn_field ConfigAssetURL
    itxn_field ConfigAssetUnitName
    itxn_field TypeEnum
    itxn_field ConfigAssetTotal
    itxn_field Note
    itxn_field ConfigAssetDefaultFrozen
    itxn_field ConfigAssetDecimals
    itxn_field ConfigAssetName
    // voting/voting.py:144-153
    // itxn.AssetConfig(
    //     total=1,
    //     decimals=0,
    //     default_frozen=False,
    //     asset_name=b"[VOTE RESULT] " + self.vote_id,
    //     unit_name=b"VOTERSLT",
    //     url=self.nft_image_url,
    //     note=note,
    // )
    // .submit()
    itxn_submit
    itxn CreatedAssetID
    // voting/voting.py:143
    // self.nft_asset_id = (
    byte "nft_asset_id"
    // voting/voting.py:143-155
    // self.nft_asset_id = (
    //     itxn.AssetConfig(
    //         total=1,
    //         decimals=0,
    //         default_frozen=False,
    //         asset_name=b"[VOTE RESULT] " + self.vote_id,
    //         unit_name=b"VOTERSLT",
    //         url=self.nft_image_url,
    //         note=note,
    //     )
    //     .submit()
    //     .created_asset.id
    // )
    swap
    app_global_put
    retsub


// puyapy.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    // <puya>/puyapy.py:11-17
    proto 2 0
    // <puya>/puyapy.py:18
    frame_dig -2
    int 10
    +

ensure_budget_while_top@1:
    // <puya>/puyapy.py:19
    global OpcodeBudget
    frame_dig 0
    swap
    >
    bz ensure_budget_after_while@7
    // <puya>/puyapy.py:20
    itxn_begin
    // <puya>/puyapy.py:21
    int appl
    itxn_field TypeEnum
    // <puya>/puyapy.py:22
    int DeleteApplication
    itxn_field OnCompletion
    // <puya>/puyapy.py:23
    byte 0x068101
    itxn_field ApprovalProgram
    // <puya>/puyapy.py:24
    byte 0x068101
    itxn_field ClearStateProgram
    // <puya>/puyapy.py:26
    int 0
    // <puya>/puyapy.py:28
    int 1
    // <puya>/puyapy.py:25-29
    frame_dig -1
    match ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4
    b ensure_budget_switch_case_default@5

ensure_budget_switch_case_0@3:
    // <puya>/puyapy.py:27
    int 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_1@4:
    // <puya>/puyapy.py:29
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_default@5:

ensure_budget_switch_case_next@6:
    // <puya>/puyapy.py:30
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_after_while@7:
    retsub


// examples.voting.voting.itoa(i: uint64) -> bytes:
itoa:
    // voting/voting.py:253-254
    // @subroutine
    // def itoa(i: UInt64) -> Bytes:
    proto 1 1
    // voting/voting.py:255
    // digits = Bytes(b"0123456789")
    byte "0123456789"
    dup
    swap
    // voting/voting.py:256
    // radix = digits.length
    len
    dup
    cover 2
    // voting/voting.py:257
    // if i < radix:
    frame_dig -1
    swap
    <
    bz itoa_after_if_else@2
    // voting/voting.py:258
    // return digits[i]
    frame_dig -1
    int 1
    +
    swap
    frame_dig -1
    uncover 2
    substring3
    swap
    retsub

itoa_after_if_else@2:
    // voting/voting.py:259
    // return itoa(i // radix) + digits[i % radix]
    frame_dig -1
    frame_dig 0
    dup
    cover 2
    /
    callsub itoa
    swap
    frame_dig -1
    swap
    %
    dup
    int 1
    +
    uncover 3
    uncover 2
    uncover 2
    substring3
    concat
    swap
    retsub


// examples.voting.voting.get_vote_from_box(index: uint64) -> uint64:
get_vote_from_box:
    // voting/voting.py:238-239
    // @subroutine
    // def get_vote_from_box(index: UInt64) -> UInt64:
    proto 1 1
    // voting/voting.py:240
    // box_data, exists = op.Box.get(TALLY_BOX_KEY)
    byte "V"
    box_get
    // voting/voting.py:241
    // assert exists, "Box not created"
    assert // Box not created
    // voting/voting.py:242
    // return op.btoi(op.extract(box_data, index, VOTE_COUNT_BYTES))
    frame_dig -1
    int 8
    extract3
    btoi
    retsub


// examples.voting.voting.VotingRoundApp.get_preconditions(signature: bytes) -> bytes:
get_preconditions:
    // voting/voting.py:157-158
    // @arc4.abimethod(readonly=True)
    // def get_preconditions(self, signature: arc4.DynamicBytes) -> VotingPreconditions:
    proto 1 1
    // voting/voting.py:160
    // is_voting_open=arc4.UInt64(self.voting_open()),
    callsub voting_open
    itob
    // voting/voting.py:161
    // is_allowed_to_vote=arc4.UInt64(self.allowed_to_vote(signature.bytes[2:])),
    frame_dig -1
    dup
    len
    swap
    dup
    len
    int 2
    swap
    <
    uncover 2
    int 2
    uncover 2
    select
    dig 1
    len
    swap
    uncover 2
    swap
    uncover 2
    substring3
    callsub allowed_to_vote
    itob
    // voting/voting.py:162
    // has_already_voted=arc4.UInt64(self.already_voted()),
    callsub already_voted
    itob
    // voting/voting.py:163
    // current_time=arc4.UInt64(Global.latest_timestamp),
    global LatestTimestamp
    itob
    // voting/voting.py:159-164
    // return VotingPreconditions(
    //     is_voting_open=arc4.UInt64(self.voting_open()),
    //     is_allowed_to_vote=arc4.UInt64(self.allowed_to_vote(signature.bytes[2:])),
    //     has_already_voted=arc4.UInt64(self.already_voted()),
    //     current_time=arc4.UInt64(Global.latest_timestamp),
    // )
    byte 0x
    uncover 4
    concat
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    retsub


// examples.voting.voting.VotingRoundApp.voting_open() -> uint64:
voting_open:
    // voting/voting.py:202-203
    // @subroutine
    // def voting_open(self) -> bool:
    proto 0 1
    byte ""
    // voting/voting.py:205
    // self.is_bootstrapped
    int 0
    byte "is_bootstrapped"
    app_global_get_ex
    assert // check is_bootstrapped exists
    // voting/voting.py:205-207
    // self.is_bootstrapped
    // and not self.close_time
    // and self.start_time <= Global.latest_timestamp <= self.end_time
    bz voting_open_bool_false@5
    // voting/voting.py:206
    // and not self.close_time
    int 0
    byte "close_time"
    app_global_get_ex
    swap
    pop
    bnz voting_open_bool_false@5
    // voting/voting.py:207
    // and self.start_time <= Global.latest_timestamp <= self.end_time
    int 0
    byte "start_time"
    app_global_get_ex
    assert // check start_time exists
    global LatestTimestamp
    dup
    frame_bury 0
    <=
    bz voting_open_bool_false@5
    int 0
    byte "end_time"
    app_global_get_ex
    assert // check end_time exists
    frame_dig 0
    swap
    <=
    bz voting_open_bool_false@5
    int 1
    b voting_open_bool_merge@6

voting_open_bool_false@5:
    int 0

voting_open_bool_merge@6:
    // voting/voting.py:204-208
    // return (
    //     self.is_bootstrapped
    //     and not self.close_time
    //     and self.start_time <= Global.latest_timestamp <= self.end_time
    // )
    swap
    retsub


// examples.voting.voting.VotingRoundApp.allowed_to_vote(signature: bytes) -> uint64:
allowed_to_vote:
    // voting/voting.py:228-229
    // @subroutine
    // def allowed_to_vote(self, signature: Bytes) -> bool:
    proto 1 1
    // voting/voting.py:230
    // ensure_budget(2000)
    int 2000
    int 2
    callsub ensure_budget
    // voting/voting.py:232
    // Txn.sender.bytes,
    txn Sender
    // voting/voting.py:234
    // self.snapshot_public_key,
    int 0
    byte "snapshot_public_key"
    app_global_get_ex
    assert // check snapshot_public_key exists
    // voting/voting.py:231-235
    // return op.ed25519verify_bare(
    //     Txn.sender.bytes,
    //     signature,
    //     self.snapshot_public_key,
    // )
    swap
    frame_dig -1
    uncover 2
    ed25519verify_bare
    retsub


// examples.voting.voting.VotingRoundApp.already_voted() -> uint64:
already_voted:
    // voting/voting.py:210-211
    // @subroutine
    // def already_voted(self) -> bool:
    proto 0 1
    // voting/voting.py:212
    // (votes, exists) = op.Box.get(Txn.sender.bytes)
    txn Sender
    box_get
    swap
    pop
    // voting/voting.py:213
    // return exists
    retsub


// examples.voting.voting.VotingRoundApp.vote(fund_min_bal_req: uint64, signature: bytes, answer_ids: bytes) -> void:
vote:
    // voting/voting.py:166-172
    // @arc4.abimethod
    // def vote(
    //     self,
    //     fund_min_bal_req: gtxn.PaymentTransaction,
    //     signature: Bytes,
    //     answer_ids: VoteIndexArray,
    // ) -> None:
    proto 3 0
    // voting/voting.py:173
    // ensure_budget(7700, fee_source=OpUpFeeSource.GroupCredit)
    int 7700
    int 0
    callsub ensure_budget
    // voting/voting.py:174-175
    // # Check voting preconditions
    // assert self.allowed_to_vote(signature), "Not allowed to vote"
    frame_dig -2
    callsub allowed_to_vote
    assert // Not allowed to vote
    // voting/voting.py:176
    // assert self.voting_open(), "Voting not open"
    callsub voting_open
    assert // Voting not open
    // voting/voting.py:177
    // assert not self.already_voted(), "Already voted"
    callsub already_voted
    !
    assert // Already voted
    // voting/voting.py:178
    // questions_count = self.option_counts.length
    int 0
    byte "option_counts"
    app_global_get_ex
    assert // check option_counts exists
    int 0
    extract_uint16
    dup
    swap
    // voting/voting.py:179
    // assert answer_ids.length == questions_count, "Number of answers incorrect"
    frame_dig -1
    int 0
    extract_uint16
    swap
    ==
    assert // Number of answers incorrect
    // voting/voting.py:182
    // (32 + 2 + VOTE_INDEX_BYTES * answer_ids.length) * BOX_BYTE_MIN_BALANCE
    frame_dig -1
    int 0
    extract_uint16
    int 1
    swap
    *
    int 34
    swap
    +
    int 400
    *
    // voting/voting.py:180-181
    // # Check voter box is funded
    // min_bal_req = BOX_FLAT_MIN_BALANCE + (
    int 2500
    // voting/voting.py:180-183
    // # Check voter box is funded
    // min_bal_req = BOX_FLAT_MIN_BALANCE + (
    //     (32 + 2 + VOTE_INDEX_BYTES * answer_ids.length) * BOX_BYTE_MIN_BALANCE
    // )
    swap
    +
    // voting/voting.py:185
    // fund_min_bal_req.receiver == Global.current_application_address
    frame_dig -3
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // voting/voting.py:184-186
    // assert (
    //     fund_min_bal_req.receiver == Global.current_application_address
    // ), "Payment must be to app address"
    assert // Payment must be to app address
    // voting/voting.py:188
    // log(min_bal_req)
    dup
    itob
    log
    // voting/voting.py:189
    // assert fund_min_bal_req.amount == min_bal_req, "Payment must be the exact min balance"
    frame_dig -3
    gtxns Amount
    swap
    ==
    assert // Payment must be the exact min balance
    // voting/voting.py:190-191
    // # Record the vote for each question
    // cumulative_offset = UInt64(0)
    int 0
    // voting/voting.py:192
    // for question_index in urange(questions_count):
    int 1
    assert // Step cannot be zero
    int 0

vote_for_header@1:
    // voting/voting.py:192
    // for question_index in urange(questions_count):
    frame_dig 2
    frame_dig 0
    <
    bz vote_after_for@5
    frame_dig 2
    // voting/voting.py:193-194
    // # Load the user's vote for this question
    // answer_option_index = answer_ids[question_index].decode()
    frame_dig -1
    int 0
    extract_uint16
    dig 1
    swap
    <
    assert // Index access is out of bounds
    frame_dig -1
    extract 2 0
    dig 1
    int 1
    *
    int 1
    extract3
    btoi
    swap
    // voting/voting.py:195
    // options_count = self.option_counts[question_index].decode()
    int 0
    byte "option_counts"
    app_global_get_ex
    assert // check option_counts exists
    dup
    int 0
    extract_uint16
    dig 2
    swap
    <
    assert // Index access is out of bounds
    extract 2 0
    swap
    int 1
    *
    int 1
    extract3
    btoi
    // voting/voting.py:196
    // assert answer_option_index < options_count, "Answer option index invalid"
    dig 1
    dig 1
    <
    assert // Answer option index invalid
    // voting/voting.py:197
    // increment_vote_in_box(cumulative_offset + answer_option_index)
    frame_dig 1
    dup
    uncover 3
    +
    callsub increment_vote_in_box
    // voting/voting.py:198
    // cumulative_offset += options_count
    swap
    +
    frame_bury 1
    // voting/voting.py:199
    // op.Box.put(Txn.sender.bytes, answer_ids.bytes)
    txn Sender
    frame_dig -1
    box_put
    // voting/voting.py:200
    // self.voter_count += 1
    int 0
    byte "voter_count"
    app_global_get_ex
    assert // check voter_count exists
    int 1
    +
    byte "voter_count"
    swap
    app_global_put
    // voting/voting.py:192
    // for question_index in urange(questions_count):
    frame_dig 2
    int 1
    +
    frame_bury 2
    b vote_for_header@1

vote_after_for@5:
    retsub


// examples.voting.voting.increment_vote_in_box(index: uint64) -> void:
increment_vote_in_box:
    // voting/voting.py:245-246
    // @subroutine
    // def increment_vote_in_box(index: UInt64) -> None:
    proto 1 0
    // voting/voting.py:247
    // box_data, exists = op.Box.get(TALLY_BOX_KEY)
    byte "V"
    box_get
    // voting/voting.py:248
    // assert exists, "Box not created"
    assert // Box not created
    // voting/voting.py:249
    // current_vote = op.btoi(op.extract(box_data, index, VOTE_COUNT_BYTES))
    frame_dig -1
    int 8
    extract3
    btoi
    // voting/voting.py:250
    // op.Box.replace(TALLY_BOX_KEY, index, op.itob(current_vote + 1))
    int 1
    +
    itob
    byte "V"
    frame_dig -1
    uncover 2
    box_replace
    retsub


// examples.voting.voting.VotingRoundApp.__init__() -> void:
__init__:
    // voting/voting.py:49
    // def __init__(self) -> None:
    proto 0 0
    // voting/voting.py:50
    // self.is_bootstrapped = False
    byte "is_bootstrapped"
    int 0
    app_global_put
    // voting/voting.py:51-52
    // # The minimum number of voters who have voted
    // self.voter_count = UInt64(0)
    byte "voter_count"
    int 0
    app_global_put
    retsub
