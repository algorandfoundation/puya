main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = (txn ApplicationID)
        goto tmp%0#0 ? block@2 : block@1
    block@1: // call __init___L1
        (app_global_put "is_bootstrapped" 0u)
        (app_global_put "voter_count" 0u)
        goto block@2
    block@2: // after_if_else_L1
        let tmp%0#1: uint64 = (txn OnCompletion)
        let tmp%1#1: bool = (! tmp%0#1)
        (assert tmp%1#1) // OnCompletion must be NoOp
        let tmp%2#0: uint64 = (txn ApplicationID)
        goto tmp%2#0 ? block@4 : block@10
    block@4: // call_NoOp_L49
        let tmp%4#0: bytes = (txna ApplicationArgs 0)
        switch tmp%4#0 {method "bootstrap(pay)void" => block@5, method "close()void" => block@6, method "get_preconditions(byte[])(uint64,uint64,uint64,uint64)" => block@7, method "vote(pay,byte[],uint8[])void" => block@8, * => block@13}
    block@5: // bootstrap_route_L82
        let tmp%0#1: uint64 = (txn GroupIndex)
        let fund_min_bal_req#0: uint64 = (- tmp%0#1 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) fund_min_bal_req#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let (maybe_value%0#2: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "is_bootstrapped")
        (assert maybe_exists%0#0) // check self.is_bootstrapped exists
        let tmp%0#0: bool = (! maybe_value%0#2)
        (assert tmp%0#0) // Must not be already bootstrapped
        (app_global_put "is_bootstrapped" 1u)
        let tmp%1#9: account = ((gtxns Receiver) fund_min_bal_req#0)
        let tmp%2#7: account = (global CurrentApplicationAddress)
        let tmp%3#1: bool = (== tmp%1#9 tmp%2#7)
        (assert tmp%3#1) // Payment must be to app address
        let (maybe_value%1#2: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "total_options")
        (assert maybe_exists%1#0) // check self.total_options exists
        let tally_box_size#0: uint64 = (* maybe_value%1#2 8u)
        let tmp%5#4: uint64 = (* tally_box_size#0 400u)
        let min_balance_req#0: uint64 = (+ 203900u tmp%5#4)
        let tmp%7#2: bytes = (itob min_balance_req#0)
        (log tmp%7#2)
        let tmp%8#3: uint64 = ((gtxns Amount) fund_min_bal_req#0)
        let tmp%9#2: bool = (== tmp%8#3 min_balance_req#0)
        (assert tmp%9#2) // Payment must be for the exact min balance requirement
        let tmp%10#2: bool = (box_create "V" tally_box_size#0)
        (assert tmp%10#2)
        exit 1u
    block@6: // close_route_L110
        _puya_lib.util.ensure_budget(20000u, 0u)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "close_time")
        let tmp%0#0: bool = (! maybe_exists%0#0)
        (assert tmp%0#0) // Already closed
        let tmp%1#3: uint64 = (global LatestTimestamp)
        (app_global_put "close_time" tmp%1#3)
        let (maybe_value%0#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "vote_id")
        (assert maybe_exists%1#0) // check self.vote_id exists
        let tmp%2#4: bytes = (concat "{\"standard\":\"arc69\",\"description\":\"This is a voting result NFT for voting round with ID " maybe_value%0#0)
        let tmp%3#3: bytes = (concat tmp%2#4 ".\",\"properties\":{\"metadata\":\"ipfs://")
        let (maybe_value%1#0: bytes, maybe_exists%2#0: bool) = (app_global_get_ex 0u "metadata_ipfs_cid")
        (assert maybe_exists%2#0) // check self.metadata_ipfs_cid exists
        let tmp%4#0: bytes = (concat tmp%3#3 maybe_value%1#0)
        let tmp%5#0: bytes = (concat tmp%4#0 "\",\"id\":\"")
        let tmp%6#2: bytes = (concat tmp%5#0 maybe_value%0#0)
        let tmp%7#2: bytes = (concat tmp%6#2 "\",\"quorum\":")
        let (maybe_value%3#0: uint64, maybe_exists%4#0: bool) = (app_global_get_ex 0u "quorum")
        (assert maybe_exists%4#0) // check self.quorum exists
        let tmp%8#2: string = examples.voting.voting.itoa(maybe_value%3#0)
        let tmp%9#1: bytes = (concat tmp%7#2 tmp%8#2)
        let tmp%10#1: bytes = (concat tmp%9#1 ",\"voterCount\":")
        let (maybe_value%4#0: uint64, maybe_exists%5#0: bool) = (app_global_get_ex 0u "voter_count")
        (assert maybe_exists%5#0) // check self.voter_count exists
        let tmp%11#0: string = examples.voting.voting.itoa(maybe_value%4#0)
        let tmp%12#1: bytes = (concat tmp%10#1 tmp%11#0)
        let note#0: string = (concat tmp%12#1 ",\"tallies\":[")
        let current_index#0: uint64 = 0u
        let (maybe_value%5#0: bytes, maybe_exists%6#0: bool) = (app_global_get_ex 0u "option_counts")
        (assert maybe_exists%6#0) // check self.option_counts exists
        let aggregate%array_length%0#0: uint64 = (extract_uint16 maybe_value%5#0 0u)
        let item_index_internal%0#0: uint64 = 0u
        let question_index#0: uint64 = item_index_internal%0#0
        goto block@24
    block@24: // for_header_L132
        let continue_looping%0#0: bool = (< question_index#0 aggregate%array_length%0#0)
        goto continue_looping%0#0 ? block@25 : block@35
    block@25: // for_body_L133
        let aggregate%array_trimmed%0#0: bytes = ((extract 2 0) maybe_value%5#0)
        let question_options#0: Encoded(uint8) = (extract3 aggregate%array_trimmed%0#0 question_index#0 1u) // on error: index access is out of bounds
        goto question_index#0 ? block@26 : block@27
    block@26: // if_body_L134
        let note#0: string = (concat note#0 ",")
        goto block@27
    block@27: // after_if_else_L133
        let tmp%16#1: bool = (b> question_options#0 0x00)
        goto tmp%16#1 ? block@28 : block@34
    block@28: // if_body_L136
        let note#0: string = (concat note#0 "[")
        let tmp%18#0: uint64 = (getbyte aggregate%array_trimmed%0#0 question_index#0)
        let value_internal%0#0: uint64 = 0u
        let option_index#0: uint64 = value_internal%0#0
        goto block@29
    block@29: // for_header_L137
        let continue_looping%1#0: bool = (< option_index#0 tmp%18#0)
        goto continue_looping%1#0 ? block@30 : block@33
    block@30: // for_body_L138
        goto option_index#0 ? block@31 : block@32
    block@31: // if_body_L139
        let note#0: string = (concat note#0 ",")
        goto block@32
    block@32: // after_if_else_L138
        let tmp%0#12: bytes = (box_extract "V" current_index#0 8u)
        let votes_for_option#0: uint64 = (btoi tmp%0#12)
        let tmp%22#0: string = examples.voting.voting.itoa(votes_for_option#0)
        let note#0: string = (concat note#0 tmp%22#0)
        let current_index#0: uint64 = (+ current_index#0 1u)
        let value_internal%0#0: uint64 = (+ option_index#0 1u)
        let option_index#0: uint64 = value_internal%0#0
        goto block@29
    block@33: // after_for_L137
        let note#0: string = (concat note#0 "]")
        goto block@34
    block@34: // after_if_else_L135
        let item_index_internal%0#0: uint64 = (+ question_index#0 1u)
        let question_index#0: uint64 = item_index_internal%0#0
        goto block@24
    block@35: // after_for_L132
        let note#0: string = (concat note#0 "]}}")
        itxn_begin
        let inner_txn_params%0%%param_Fee_idx_0#0: uint64 = (global MinTxnFee)
        let (maybe_value%6#0: bytes, maybe_exists%7#0: bool) = (app_global_get_ex 0u "vote_id")
        (assert maybe_exists%7#0) // check self.vote_id exists
        let inner_txn_params%0%%param_ConfigAssetName_idx_0#0: bytes = (concat "[VOTE RESULT] " maybe_value%6#0)
        let (maybe_value%7#0: bytes, maybe_exists%8#0: bool) = (app_global_get_ex 0u "nft_image_url")
        (assert maybe_exists%8#0) // check self.nft_image_url exists
        ((itxn_field Note) note#0)
        ((itxn_field ConfigAssetURL) maybe_value%7#0)
        ((itxn_field ConfigAssetUnitName) "VOTERSLT")
        ((itxn_field ConfigAssetName) inner_txn_params%0%%param_ConfigAssetName_idx_0#0)
        ((itxn_field ConfigAssetDefaultFrozen) 0u)
        ((itxn_field ConfigAssetDecimals) 0u)
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) inner_txn_params%0%%param_Fee_idx_0#0)
        itxn_submit
        let tmp%27#0: uint64 = (itxn CreatedAssetID)
        (app_global_put "nft_asset_id" tmp%27#0)
        exit 1u
    block@7: // get_preconditions_route_L160
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let signature#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%0#0: bool = examples.voting.voting.VotingRoundApp.voting_open()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let tmp%2#2: bool = examples.voting.voting.VotingRoundApp.allowed_to_vote(signature#0)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%2#2)
        let materialized_values%0#0: account = (txn Sender)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len materialized_values%0#0)
        let aggregate%val_as_bytes%2#0: bytes[8] = (itob maybe_exists%0#0)
        let tmp%6#1: uint64 = (global LatestTimestamp)
        let aggregate%val_as_bytes%3#0: bytes[8] = (itob tmp%6#1)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let aggregate%head%2#0: bytes = (concat aggregate%head%1#0 aggregate%val_as_bytes%2#0)
        let aggregate%head%3#0: bytes = (concat aggregate%head%2#0 aggregate%val_as_bytes%3#0)
        let tmp%2#4: bytes = (concat 0x151f7c75 aggregate%head%3#0)
        (log tmp%2#4)
        exit 1u
    block@8: // vote_route_L169
        let tmp%0#1: uint64 = (txn GroupIndex)
        let fund_min_bal_req#0: uint64 = (- tmp%0#1 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) fund_min_bal_req#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 pay)
        (assert gtxn_type_matches%0#0) // transaction type is pay
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let signature#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let answer_ids#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        _puya_lib.util.ensure_budget(7700u, 0u)
        let tmp%0#0: bool = examples.voting.voting.VotingRoundApp.allowed_to_vote(signature#0)
        (assert tmp%0#0) // Not allowed to vote
        let tmp%1#1: bool = examples.voting.voting.VotingRoundApp.voting_open()
        (assert tmp%1#1) // Voting not open
        let materialized_values%0#0: account = (txn Sender)
        let (_%0#0: uint64, maybe_exists%0#0: bool) = (box_len materialized_values%0#0)
        let tmp%3#1: bool = (! maybe_exists%0#0)
        (assert tmp%3#1) // Already voted
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "option_counts")
        (assert maybe_exists%0#0) // check self.option_counts exists
        let questions_count#0: uint64 = (extract_uint16 maybe_value%0#0 0u)
        let aggregate%array_length%2#0: uint64 = (extract_uint16 answer_ids#0 0u)
        let tmp%6#0: bool = (== aggregate%array_length%2#0 questions_count#0)
        (assert tmp%6#0) // Number of answers incorrect
        let tmp%9#0: uint64 = (+ 34u aggregate%array_length%2#0)
        let tmp%10#0: uint64 = (* tmp%9#0 400u)
        let min_bal_req#0: uint64 = (+ 2500u tmp%10#0)
        let tmp%12#0: account = ((gtxns Receiver) fund_min_bal_req#0)
        let tmp%13#0: account = (global CurrentApplicationAddress)
        let tmp%14#0: bool = (== tmp%12#0 tmp%13#0)
        (assert tmp%14#0) // Payment must be to app address
        let tmp%15#0: bytes = (itob min_bal_req#0)
        (log tmp%15#0)
        let tmp%16#0: uint64 = ((gtxns Amount) fund_min_bal_req#0)
        let tmp%17#0: bool = (== tmp%16#0 min_bal_req#0)
        (assert tmp%17#0) // Payment must be the exact min balance
        let cumulative_offset#0: uint64 = 0u
        let value_internal%0#0: uint64 = 0u
        let question_index#0: uint64 = value_internal%0#0
        goto block@17
    block@17: // for_header_L195
        let continue_looping%0#0: bool = (< question_index#0 questions_count#0)
        goto continue_looping%0#0 ? block@18 : block@19
    block@18: // for_body_L197
        let aggregate%array_trimmed%1#0: bytes = ((extract 2 0) answer_ids#0)
        let answer_option_index#0: uint64 = (getbyte aggregate%array_trimmed%1#0 question_index#0)
        let (maybe_value%1#0: bytes, maybe_exists%1#0: bool) = (app_global_get_ex 0u "option_counts")
        (assert maybe_exists%1#0) // check self.option_counts exists
        let aggregate%array_trimmed%2#0: bytes = ((extract 2 0) maybe_value%1#0)
        let options_count#0: uint64 = (getbyte aggregate%array_trimmed%2#0 question_index#0)
        let tmp%20#0: bool = (< answer_option_index#0 options_count#0)
        (assert tmp%20#0) // Answer option index invalid
        let index#0: uint64 = (+ cumulative_offset#0 answer_option_index#0)
        let tmp%0#12: bytes = (box_extract "V" index#0 8u)
        let current_vote#0: uint64 = (btoi tmp%0#12)
        let tmp%1#3: uint64 = (+ current_vote#0 1u)
        let tmp%2#4: bytes = (itob tmp%1#3)
        (box_replace "V" index#0 tmp%2#4)
        let cumulative_offset#0: uint64 = (+ cumulative_offset#0 options_count#0)
        let materialized_values%0#0: account = (txn Sender)
        (box_del materialized_values%0#0)
        (box_put materialized_values%0#0 answer_ids#0)
        let (maybe_value%2#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "voter_count")
        (assert maybe_exists%2#0) // check self.voter_count exists
        let tmp%23#0: uint64 = (+ maybe_value%2#0 1u)
        (app_global_put "voter_count" tmp%23#0)
        let value_internal%0#0: uint64 = (+ question_index#0 1u)
        let question_index#0: uint64 = value_internal%0#0
        goto block@17
    block@19: // after_for_L195
        exit 1u
    block@10: // create_NoOp_L49
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void" => block@11, * => block@13}
    block@11: // create_route_L58
        let reinterpret_Encoded(len+utf8[])%0#0: Encoded(len+utf8[]) = (txna ApplicationArgs 1)
        let vote_id#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let snapshot_public_key#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+utf8[])%1#0: Encoded(len+utf8[]) = (txna ApplicationArgs 3)
        let metadata_ipfs_cid#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%1#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 4)
        let start_time#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 5)
        let end_time#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let option_counts#0: Encoded(len+uint8[]) = (txna ApplicationArgs 6)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 7)
        let quorum#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let reinterpret_Encoded(len+utf8[])%2#0: Encoded(len+utf8[]) = (txna ApplicationArgs 8)
        let nft_image_url#0: string = ((extract 2 0) reinterpret_Encoded(len+utf8[])%2#0)
        let tmp%0#0: bool = (< start_time#0 end_time#0)
        (assert tmp%0#0) // End time should be after start time
        let tmp%1#3: uint64 = (global LatestTimestamp)
        let tmp%2#2: bool = (>= end_time#0 tmp%1#3)
        (assert tmp%2#2) // End time should be in the future
        (app_global_put "vote_id" vote_id#0)
        (app_global_put "snapshot_public_key" snapshot_public_key#0)
        (app_global_put "metadata_ipfs_cid" metadata_ipfs_cid#0)
        (app_global_put "start_time" start_time#0)
        (app_global_put "end_time" end_time#0)
        (app_global_put "quorum" quorum#0)
        (app_global_put "nft_image_url" nft_image_url#0)
        let aggregate%array_length%4#0: uint64 = (extract_uint16 option_counts#0 0u)
        (assert aggregate%array_length%4#0) // option_counts should be non-empty
        let tmp%3#1: bool = (<= aggregate%array_length%4#0 112u)
        (assert tmp%3#1) // Can't have more than 112 questions
        let total_options#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@37
    block@37: // for_header_L223
        let continue_looping%0#0: bool = (< item_index_internal%0#0 aggregate%array_length%4#0)
        goto continue_looping%0#0 ? block@38 : block@39
    block@38: // for_body_L224
        let aggregate%array_trimmed%3#0: bytes = ((extract 2 0) option_counts#0)
        let tmp%4#3: uint64 = (getbyte aggregate%array_trimmed%3#0 item_index_internal%0#0)
        let total_options#0: uint64 = (+ total_options#0 tmp%4#3)
        let item_index_internal%0#0: uint64 = (+ item_index_internal%0#0 1u)
        goto block@37
    block@39: // after_for_L223
        let tmp%6#0: bool = (<= total_options#0 128u)
        (assert tmp%6#0) // Can't have more than 128 vote options
        (app_global_put "option_counts" option_counts#0)
        (app_global_put "total_options" total_options#0)
        exit 1u
    block@13: // after_if_else_L49
        fail

subroutine _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
    block@0: // L12
        let required_budget_with_buffer#0: uint64 = (+ required_budget#0 10u)
        goto block@1
    block@1: // while_top_L20
        let tmp%1#0: uint64 = (global OpcodeBudget)
        let tmp%2#0: bool = (> required_budget_with_buffer#0 tmp%1#0)
        goto tmp%2#0 ? block@2 : block@6
    block@2: // while_body_L21
        itxn_begin
        ((itxn_field TypeEnum) appl)
        ((itxn_field OnCompletion) DeleteApplication)
        ((itxn_field ApprovalProgram) 0x068101)
        ((itxn_field ClearStateProgram) 0x068101)
        goto_nth [block@3, block@4][fee_source#0] else goto block@5
    block@3: // switch_case_0_L28
        ((itxn_field Fee) 0u)
        goto block@5
    block@4: // switch_case_1_L30
        let tmp%3#0: uint64 = (global MinTxnFee)
        ((itxn_field Fee) tmp%3#0)
        goto block@5
    block@5: // switch_case_next_L26
        itxn_submit
        goto block@1
    block@6: // after_while_L20
        return 

subroutine examples.voting.voting.itoa(i: uint64) -> string:
    block@0: // L249
        let tmp%1#0: bool = (< i#0 10u)
        goto tmp%1#0 ? block@1 : block@2
    block@1: // if_body_L254
        let extract%0#0: bytes = (extract3 0x30313233343536373839 i#0 1u)
        return extract%0#0
    block@2: // after_if_else_L253
        let tmp%2#0: uint64 = (/ i#0 10u)
        let tmp%3#0: string = examples.voting.voting.itoa(tmp%2#0)
        let tmp%4#0: uint64 = (% i#0 10u)
        let extract%1#0: bytes = (extract3 0x30313233343536373839 tmp%4#0 1u)
        let tmp%5#0: bytes = (concat tmp%3#0 extract%1#0)
        return tmp%5#0

subroutine examples.voting.voting.VotingRoundApp.voting_open() -> bool:
    block@0: // L205
        let (maybe_value%0#0: uint64, maybe_exists%0#0: bool) = (app_global_get_ex 0u "is_bootstrapped")
        (assert maybe_exists%0#0) // check self.is_bootstrapped exists
        goto maybe_value%0#0 ? block@1 : block@5
    block@1: // and_contd_L208
        let (_%0#0: uint64, maybe_exists%1#0: bool) = (app_global_get_ex 0u "close_time")
        goto maybe_exists%1#0 ? block@5 : block@2
    block@2: // and_contd_L208
        let (maybe_value%1#0: uint64, maybe_exists%2#0: bool) = (app_global_get_ex 0u "start_time")
        (assert maybe_exists%2#0) // check self.start_time exists
        let awst_tmp%0#0: uint64 = (global LatestTimestamp)
        let tmp%0#0: bool = (<= maybe_value%1#0 awst_tmp%0#0)
        goto tmp%0#0 ? block@3 : block@5
    block@3: // and_contd_L210
        let (maybe_value%2#0: uint64, maybe_exists%3#0: bool) = (app_global_get_ex 0u "end_time")
        (assert maybe_exists%3#0) // check self.end_time exists
        let tmp%1#0: bool = (<= awst_tmp%0#0 maybe_value%2#0)
        goto tmp%1#0 ? block@4 : block@5
    block@4: // bool_true_L208
        let and_result%0#0: bool = 1u
        goto block@6
    block@5: // bool_false_L208
        let and_result%0#0: bool = 0u
        goto block@6
    block@6: // bool_merge_L208
        return and_result%0#0

subroutine examples.voting.voting.VotingRoundApp.allowed_to_vote(signature: bytes) -> bool:
    block@0: // L230
        _puya_lib.util.ensure_budget(2000u, 0u)
        let tmp%0#0: account = (txn Sender)
        let (maybe_value%0#0: bytes, maybe_exists%0#0: bool) = (app_global_get_ex 0u "snapshot_public_key")
        (assert maybe_exists%0#0) // check self.snapshot_public_key exists
        let tmp%1#0: bool = (ed25519verify_bare tmp%0#0 signature#0 maybe_value%0#0)
        return tmp%1#0