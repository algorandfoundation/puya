#pragma version 10
#pragma typetrack false

// examples.voting.voting.VotingRoundApp.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 10 8
    bytecblock "is_bootstrapped" "voter_count" "option_counts" "V" "close_time" "vote_id" "metadata_ipfs_cid" "quorum" "nft_image_url" "total_options" "snapshot_public_key" "start_time" "end_time" 0x068101 0x30313233343536373839
    intc_0 // 0
    dupn 5
    pushbytes ""
    dupn 9
    txn ApplicationID
    bnz main_after_if_else@2
    bytec_0 // "is_bootstrapped"
    intc_0 // 0
    app_global_put
    bytec_1 // "voter_count"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@9
    pushbytess 0xa4e8d164 0x9656047a 0xbcb15896 0x84a53c6e // method "bootstrap(pay)void", method "close()void", method "get_preconditions(byte[])(uint64,uint64,uint64,uint64)", method "vote(pay,byte[],uint8[])void"
    txna ApplicationArgs 0
    match main_bootstrap_route@5 main_close_route@6 main_get_preconditions_route@7 main_vote_route@8
    err

main_vote_route@8:
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    dup
    cover 2
    bury 18
    pushint 7700 // 7700
    intc_0 // 0
    callsub ensure_budget
    callsub allowed_to_vote
    assert // Not allowed to vote
    callsub voting_open
    assert // Voting not open
    txn Sender
    box_len
    bury 1
    !
    assert // Already voted
    intc_0 // 0
    bytec_2 // "option_counts"
    app_global_get_ex
    assert // check self.option_counts exists
    intc_0 // 0
    extract_uint16
    dup
    bury 6
    swap
    intc_0 // 0
    extract_uint16
    dup
    uncover 2
    ==
    assert // Number of answers incorrect
    pushint 34 // 34
    +
    pushint 400 // 400
    *
    pushint 2500 // 2500
    +
    dig 1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment must be to app address
    dup
    itob
    log
    swap
    gtxns Amount
    ==
    assert // Payment must be the exact min balance
    intc_0 // 0
    bury 8
    intc_0 // 0
    bury 4

main_for_header@18:
    dig 3
    dig 3
    <
    bz main_after_for@20
    dig 14
    dup
    extract 2 0
    dig 5
    dup
    cover 2
    getbyte
    intc_0 // 0
    bytec_2 // "option_counts"
    app_global_get_ex
    assert // check self.option_counts exists
    extract 2 0
    dig 2
    getbyte
    dup2
    <
    assert // Answer option index invalid
    dig 11
    dup
    cover 2
    uncover 3
    +
    bytec_3 // "V"
    dig 1
    intc_3 // 8
    box_extract
    btoi
    intc_1 // 1
    +
    itob
    bytec_3 // "V"
    cover 2
    box_replace
    +
    bury 10
    txn Sender
    dup
    box_del
    pop
    uncover 2
    box_put
    intc_0 // 0
    bytec_1 // "voter_count"
    app_global_get_ex
    assert // check self.voter_count exists
    intc_1 // 1
    +
    bytec_1 // "voter_count"
    swap
    app_global_put
    intc_1 // 1
    +
    bury 4
    b main_for_header@18

main_after_for@20:
    intc_1 // 1
    return

main_get_preconditions_route@7:
    txna ApplicationArgs 1
    extract 2 0
    callsub voting_open
    itob
    swap
    callsub allowed_to_vote
    itob
    txn Sender
    box_len
    bury 1
    itob
    global LatestTimestamp
    itob
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_close_route@6:
    pushint 20000 // 20000
    intc_0 // 0
    callsub ensure_budget
    intc_0 // 0
    bytec 4 // "close_time"
    app_global_get_ex
    bury 1
    !
    assert // Already closed
    bytec 4 // "close_time"
    global LatestTimestamp
    app_global_put
    intc_0 // 0
    bytec 5 // "vote_id"
    app_global_get_ex
    assert // check self.vote_id exists
    pushbytes "{\"standard\":\"arc69\",\"description\":\"This is a voting result NFT for voting round with ID "
    dig 1
    concat
    pushbytes ".\",\"properties\":{\"metadata\":\"ipfs://"
    concat
    intc_0 // 0
    bytec 6 // "metadata_ipfs_cid"
    app_global_get_ex
    assert // check self.metadata_ipfs_cid exists
    concat
    pushbytes "\",\"id\":\""
    concat
    swap
    concat
    pushbytes "\",\"quorum\":"
    concat
    intc_0 // 0
    bytec 7 // "quorum"
    app_global_get_ex
    assert // check self.quorum exists
    callsub itoa
    concat
    pushbytes ",\"voterCount\":"
    concat
    intc_0 // 0
    bytec_1 // "voter_count"
    app_global_get_ex
    assert // check self.voter_count exists
    callsub itoa
    concat
    pushbytes ",\"tallies\":["
    concat
    bury 13
    intc_0 // 0
    bury 7
    intc_0 // 0
    bytec_2 // "option_counts"
    app_global_get_ex
    swap
    dup
    cover 2
    bury 16
    assert // check self.option_counts exists
    intc_0 // 0
    extract_uint16
    bury 10
    intc_0 // 0
    bury 4

main_for_header@25:
    dig 3
    dig 10
    <
    bz main_after_for@36
    dig 13
    extract 2 0
    dup
    bury 17
    dig 4
    dup
    cover 2
    intc_1 // 1
    extract3 // on error: index access is out of bounds
    bury 12
    bz main_after_if_else@28
    dig 12
    pushbytes ","
    concat
    bury 13

main_after_if_else@28:
    dig 10
    pushbytes 0x00
    b>
    bz main_after_if_else@35
    dig 12
    pushbytes "["
    concat
    bury 13
    dig 15
    dig 4
    getbyte
    bury 2
    intc_0 // 0
    bury 5

main_for_header@30:
    dig 4
    dig 2
    <
    bz main_after_for@34
    dig 4
    bz main_after_if_else@33
    dig 12
    pushbytes ","
    concat
    bury 13

main_after_if_else@33:
    bytec_3 // "V"
    dig 7
    dup
    cover 2
    intc_3 // 8
    box_extract
    btoi
    callsub itoa
    dig 14
    swap
    concat
    bury 14
    intc_1 // 1
    +
    bury 7
    dig 4
    intc_1 // 1
    +
    bury 5
    b main_for_header@30

main_after_for@34:
    dig 12
    pushbytes "]"
    concat
    bury 13

main_after_if_else@35:
    dig 3
    intc_1 // 1
    +
    bury 4
    b main_for_header@25

main_after_for@36:
    dig 12
    pushbytes "]}}"
    concat
    itxn_begin
    global MinTxnFee
    intc_0 // 0
    bytec 5 // "vote_id"
    app_global_get_ex
    assert // check self.vote_id exists
    pushbytes "[VOTE RESULT] "
    swap
    concat
    intc_0 // 0
    bytec 8 // "nft_image_url"
    app_global_get_ex
    assert // check self.nft_image_url exists
    uncover 3
    itxn_field Note
    itxn_field ConfigAssetURL
    pushbytes "VOTERSLT"
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetName
    intc_0 // 0
    itxn_field ConfigAssetDefaultFrozen
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    intc_1 // 1
    itxn_field ConfigAssetTotal
    pushint 3 // acfg
    itxn_field TypeEnum
    itxn_field Fee
    itxn_submit
    pushbytes "nft_asset_id"
    itxn CreatedAssetID
    app_global_put
    intc_1 // 1
    return

main_bootstrap_route@5:
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    intc_0 // 0
    bytec_0 // "is_bootstrapped"
    app_global_get_ex
    assert // check self.is_bootstrapped exists
    !
    assert // Must not be already bootstrapped
    bytec_0 // "is_bootstrapped"
    intc_1 // 1
    app_global_put
    dup
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment must be to app address
    intc_0 // 0
    bytec 9 // "total_options"
    app_global_get_ex
    assert // check self.total_options exists
    intc_3 // 8
    *
    dup
    pushint 400 // 400
    *
    pushint 203900 // 203900
    +
    dup
    itob
    log
    uncover 2
    gtxns Amount
    ==
    assert // Payment must be for the exact min balance requirement
    bytec_3 // "V"
    swap
    box_create
    return

main_create_NoOp@9:
    pushbytes 0xae897f6b // method "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void"
    txna ApplicationArgs 0
    match main_create_route@10
    err

main_create_route@10:
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    dup
    cover 5
    bury 18
    txna ApplicationArgs 7
    btoi
    txna ApplicationArgs 8
    extract 2 0
    dig 3
    dig 3
    <
    assert // End time should be after start time
    dig 2
    global LatestTimestamp
    >=
    assert // End time should be in the future
    bytec 5 // "vote_id"
    uncover 8
    app_global_put
    bytec 10 // "snapshot_public_key"
    uncover 6
    app_global_put
    bytec 6 // "metadata_ipfs_cid"
    uncover 5
    app_global_put
    bytec 11 // "start_time"
    uncover 4
    app_global_put
    bytec 12 // "end_time"
    uncover 3
    app_global_put
    bytec 7 // "quorum"
    uncover 2
    app_global_put
    bytec 8 // "nft_image_url"
    swap
    app_global_put
    intc_0 // 0
    extract_uint16
    dup
    bury 10
    dup
    assert // option_counts should be non-empty
    pushint 112 // 112
    <=
    assert // Can't have more than 112 questions
    intc_0 // 0
    bury 1
    intc_0 // 0
    bury 6

main_for_header@13:
    dig 5
    dig 9
    <
    bz main_after_for@15
    dig 11
    extract 2 0
    dig 6
    dup
    cover 2
    getbyte
    dig 2
    +
    bury 2
    intc_1 // 1
    +
    bury 6
    b main_for_header@13

main_after_for@15:
    dupn 2
    pushint 128 // 128
    <=
    assert // Can't have more than 128 vote options
    bytec_2 // "option_counts"
    dig 13
    app_global_put
    bytec 9 // "total_options"
    swap
    app_global_put
    intc_1 // 1
    return


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    frame_dig -2
    intc_2 // 10
    +

ensure_budget_while_top@1:
    frame_dig 0
    global OpcodeBudget
    >
    bz ensure_budget_after_while@6
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 13 // 0x068101
    itxn_field ApprovalProgram
    bytec 13 // 0x068101
    itxn_field ClearStateProgram
    frame_dig -1
    switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4

ensure_budget_switch_case_next@5:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_switch_case_0@3:
    intc_0 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_after_while@6:
    retsub


// examples.voting.voting.itoa(i: uint64) -> bytes:
itoa:
    proto 1 1
    frame_dig -1
    intc_2 // 10
    <
    bz itoa_after_if_else@2
    bytec 14 // 0x30313233343536373839
    frame_dig -1
    intc_1 // 1
    extract3
    retsub

itoa_after_if_else@2:
    frame_dig -1
    intc_2 // 10
    /
    callsub itoa
    frame_dig -1
    intc_2 // 10
    %
    bytec 14 // 0x30313233343536373839
    swap
    intc_1 // 1
    extract3
    concat
    retsub


// examples.voting.voting.VotingRoundApp.voting_open() -> uint64:
voting_open:
    proto 0 1
    pushbytes ""
    intc_0 // 0
    bytec_0 // "is_bootstrapped"
    app_global_get_ex
    assert // check self.is_bootstrapped exists
    bz voting_open_bool_false@5
    intc_0 // 0
    bytec 4 // "close_time"
    app_global_get_ex
    bury 1
    bnz voting_open_bool_false@5
    intc_0 // 0
    bytec 11 // "start_time"
    app_global_get_ex
    assert // check self.start_time exists
    global LatestTimestamp
    dup
    frame_bury 0
    <=
    bz voting_open_bool_false@5
    intc_0 // 0
    bytec 12 // "end_time"
    app_global_get_ex
    assert // check self.end_time exists
    frame_dig 0
    >=
    bz voting_open_bool_false@5
    intc_1 // 1

voting_open_bool_merge@6:
    swap
    retsub

voting_open_bool_false@5:
    intc_0 // 0
    b voting_open_bool_merge@6


// examples.voting.voting.VotingRoundApp.allowed_to_vote(signature: bytes) -> uint64:
allowed_to_vote:
    proto 1 1
    pushint 2000 // 2000
    intc_0 // 0
    callsub ensure_budget
    txn Sender
    intc_0 // 0
    bytec 10 // "snapshot_public_key"
    app_global_get_ex
    assert // check self.snapshot_public_key exists
    frame_dig -1
    swap
    ed25519verify_bare
    retsub
