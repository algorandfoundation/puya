contract examples.voting.voting.VotingRoundApp:
    program approval:
        subroutine examples.voting.voting.VotingRoundApp.approval_program() -> uint64:
            block@0: // L51
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L52
                examples.voting.voting.VotingRoundApp.__init__()
                goto block@2
            block@2: // entrypoint_L52
                let tmp%1#0: uint64 = (txn NumAppArgs)
                goto tmp%1#0 ? block@3 : block@11
            block@3: // abi_routing_L51
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void" => block@4, method "bootstrap(pay)void" => block@5, method "close()void" => block@6, method "get_preconditions(byte[])(uint64,uint64,uint64,uint64)" => block@7, method "vote(pay,byte[],uint8[])void" => block@8, * => block@11}
            block@4: // create_route_L72
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: uint64 = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: uint64 = (! tmp%5#0)
                (assert tmp%6#0) // is creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: bytes = (txna ApplicationArgs 2)
                let tmp%9#0: bytes = (txna ApplicationArgs 3)
                let tmp%10#0: bytes = (txna ApplicationArgs 4)
                let tmp%11#0: bytes = (txna ApplicationArgs 5)
                let tmp%12#0: bytes = (txna ApplicationArgs 6)
                let tmp%13#0: bytes = (txna ApplicationArgs 7)
                let tmp%14#0: bytes = (txna ApplicationArgs 8)
                examples.voting.voting.VotingRoundApp.create(tmp%7#0, tmp%8#0, tmp%9#0, tmp%10#0, tmp%11#0, tmp%12#0, tmp%13#0, tmp%14#0)
                return 1u
            block@5: // bootstrap_route_L98
                let tmp%15#0: uint64 = (txn OnCompletion)
                let tmp%16#0: uint64 = (! tmp%15#0)
                (assert tmp%16#0) // OnCompletion is NoOp
                let tmp%17#0: uint64 = (txn ApplicationID)
                (assert tmp%17#0) // is not creating
                let tmp%20#0: uint64 = (txn GroupIndex)
                let awst_tmp%21#0: uint64 = (- tmp%20#0 1u)
                let tmp%22#0: uint64 = ((gtxns TypeEnum) awst_tmp%21#0)
                let tmp%23#0: uint64 = (== tmp%22#0 pay)
                (assert tmp%23#0) // transaction type is pay
                examples.voting.voting.VotingRoundApp.bootstrap(awst_tmp%21#0)
                return 1u
            block@6: // close_route_L122
                let tmp%24#0: uint64 = (txn OnCompletion)
                let tmp%25#0: uint64 = (! tmp%24#0)
                (assert tmp%25#0) // OnCompletion is NoOp
                let tmp%26#0: uint64 = (txn ApplicationID)
                (assert tmp%26#0) // is not creating
                examples.voting.voting.VotingRoundApp.close()
                return 1u
            block@7: // get_preconditions_route_L171
                let tmp%27#0: uint64 = (txn OnCompletion)
                let tmp%28#0: uint64 = (! tmp%27#0)
                (assert tmp%28#0) // OnCompletion is NoOp
                let tmp%29#0: uint64 = (txn ApplicationID)
                (assert tmp%29#0) // is not creating
                let tmp%30#0: bytes = (txna ApplicationArgs 1)
                let tmp%31#0: bytes = examples.voting.voting.VotingRoundApp.get_preconditions(tmp%30#0)
                let tmp%32#0: bytes = (concat 0x151f7c75 tmp%31#0)
                (log tmp%32#0)
                return 1u
            block@8: // vote_route_L180
                let tmp%33#0: uint64 = (txn OnCompletion)
                let tmp%34#0: uint64 = (! tmp%33#0)
                (assert tmp%34#0) // OnCompletion is NoOp
                let tmp%35#0: uint64 = (txn ApplicationID)
                (assert tmp%35#0) // is not creating
                let tmp%38#0: uint64 = (txn GroupIndex)
                let awst_tmp%21#1: uint64 = (- tmp%38#0 1u)
                let tmp%39#0: uint64 = ((gtxns TypeEnum) awst_tmp%21#1)
                let tmp%40#0: uint64 = (== tmp%39#0 pay)
                (assert tmp%40#0) // transaction type is pay
                let tmp%41#0: bytes = (txna ApplicationArgs 1)
                let tmp%42#0: bytes = (txna ApplicationArgs 2)
                examples.voting.voting.VotingRoundApp.vote(awst_tmp%21#1, tmp%41#0, tmp%42#0)
                return 1u
            block@11: // after_if_else_L51
                fail // reject transaction
        
        subroutine examples.voting.voting.VotingRoundApp.create(vote_id: bytes, snapshot_public_key: bytes, metadata_ipfs_cid: bytes, start_time: bytes, end_time: bytes, option_counts: bytes, quorum: bytes, nft_image_url: bytes) -> void:
            block@0: // L73
                let st#0: uint64 = (btoi start_time#0)
                let et#0: uint64 = (btoi end_time#0)
                let tmp%0#0: uint64 = (< st#0 et#0)
                (assert tmp%0#0) // End time should be after start time
                let tmp%1#0: uint64 = (global LatestTimestamp)
                let tmp%2#0: uint64 = (>= et#0 tmp%1#0)
                (assert tmp%2#0) // End time should be in the future
                let new_state_value%3#0: bytes = ((extract 2 0) vote_id#0)
                (app_global_put "vote_id" new_state_value%3#0)
                let awst_tmp%4#0: uint64 = (len snapshot_public_key#0)
                let tmp%5#0: uint64 = (< 2u awst_tmp%4#0)
                goto tmp%5#0 ? block@1 : block@2
            block@1: // ternary_true_L90
                let ternary_result%6#0: uint64 = 2u
                goto block@3
            block@2: // ternary_false_L90
                goto block@3
            block@3: // ternary_merge_L90
                let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@1, awst_tmp%4#0 <- block@2)
                let base_length%7#0: uint64 = (len snapshot_public_key#0)
                let new_state_value%8#0: bytes = (substring3 snapshot_public_key#0 ternary_result%6#2 base_length%7#0)
                (app_global_put "snapshot_public_key" new_state_value%8#0)
                let new_state_value%9#0: bytes = ((extract 2 0) metadata_ipfs_cid#0)
                (app_global_put "metadata_ipfs_cid" new_state_value%9#0)
                (app_global_put "start_time" st#0)
                (app_global_put "end_time" et#0)
                let new_state_value%10#0: uint64 = (btoi quorum#0)
                (app_global_put "quorum" new_state_value%10#0)
                let new_state_value%11#0: bytes = ((extract 2 0) nft_image_url#0)
                (app_global_put "nft_image_url" new_state_value%11#0)
                examples.voting.voting.VotingRoundApp.store_option_counts(option_counts#0)
                return 
        
        subroutine examples.voting.voting.VotingRoundApp.store_option_counts(option_counts: bytes) -> void:
            block@0: // L233
                let tmp%0#0: uint64 = (extract_uint16 option_counts#0 0u)
                (assert tmp%0#0) // option_counts should be non-empty
                let tmp%1#0: uint64 = (extract_uint16 option_counts#0 0u)
                let tmp%2#0: uint64 = (<= tmp%1#0 112u)
                (assert tmp%2#0) // Can't have more than 112 questions
                (app_global_put "option_counts" option_counts#0)
                let total_options#0: uint64 = examples.voting.voting.VotingRoundApp.calculate_total_options_count(option_counts#0)
                let tmp%3#0: uint64 = (<= total_options#0 128u)
                (assert tmp%3#0) // Can't have more than 128 vote options
                (app_global_put "total_options" total_options#0)
                return 
        
        subroutine examples.voting.voting.VotingRoundApp.calculate_total_options_count(option_counts: bytes) -> uint64:
            block@0: // L245
                let total#0: uint64 = 0u
                let array_length%0#0: uint64 = (extract_uint16 option_counts#0 0u)
                let array_value%1#0: bytes = ((extract 2 0) option_counts#0)
                let item_index_internal%2#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L247
                let item_index_internal%2#1: uint64 = φ(item_index_internal%2#0 <- block@0, item_index_internal%2#2 <- block@2)
                let total#1: uint64 = φ(total#0 <- block@0, total#2 <- block@2)
                let continue_looping%3#0: uint64 = (< item_index_internal%2#1 array_length%0#0)
                goto continue_looping%3#0 ? block@2 : block@4
            block@2: // for_body_L247
                let item#0: bytes = (extract3 array_value%1#0 item_index_internal%2#1 1u)
                let tmp%5#0: uint64 = (btoi item#0)
                let total#2: uint64 = (+ total#1 tmp%5#0)
                let item_index_internal%2#2: uint64 = (+ item_index_internal%2#1 1u)
                goto block@1
            block@4: // after_for_L247
                return total#1
        
        subroutine examples.voting.voting.VotingRoundApp.bootstrap(fund_min_bal_req: uint64) -> void:
            block@0: // L99
                let (app_global_get_ex_value%0#0: uint64, app_global_get_ex_did_exist%1#0: uint64) = (app_global_get_ex 0u "is_bootstrapped")
                (assert app_global_get_ex_did_exist%1#0) // check value exists
                let tmp%2#0: uint64 = (! app_global_get_ex_value%0#0)
                (assert tmp%2#0) // Must not be already bootstrapped
                (app_global_put "is_bootstrapped" 1u)
                let (app_global_get_ex_value%3#0: uint64, app_global_get_ex_did_exist%4#0: uint64) = (app_global_get_ex 0u "total_options")
                (assert app_global_get_ex_did_exist%4#0) // check value exists
                let tmp%5#0: uint64 = (* app_global_get_ex_value%3#0 400u)
                let tmp%6#0: uint64 = (* tmp%5#0 8u)
                let box_cost#0: uint64 = (+ 2900u tmp%6#0)
                let min_balance_req#0: uint64 = (+ 201000u box_cost#0)
                let tmp%7#0: bytes = ((gtxns Receiver) fund_min_bal_req#0)
                let tmp%8#0: bytes = (global CurrentApplicationAddress)
                let tmp%9#0: uint64 = (== tmp%7#0 tmp%8#0)
                (assert tmp%9#0) // Payment must be to app address
                let tmp%10#0: bytes = (itob min_balance_req#0)
                (log tmp%10#0)
                let tmp%11#0: uint64 = ((gtxns Amount) fund_min_bal_req#0)
                let tmp%12#0: uint64 = (== tmp%11#0 min_balance_req#0)
                (assert tmp%12#0) // Payment must be for the exact min balance requirement
                let (app_global_get_ex_value%13#0: uint64, app_global_get_ex_did_exist%14#0: uint64) = (app_global_get_ex 0u "total_options")
                (assert app_global_get_ex_did_exist%14#0) // check value exists
                let tmp%15#0: uint64 = (* app_global_get_ex_value%13#0 8u)
                let tmp%16#0: uint64 = (box_create "V" tmp%15#0)
                (assert tmp%16#0)
                return 
        
        subroutine examples.voting.voting.VotingRoundApp.close() -> void:
            block@0: // L123
                puyapy.ensure_budget(20000u, 0u)
                let (app_global_get_ex_value%0#0: uint64, app_global_get_ex_did_exist%1#0: uint64) = (app_global_get_ex 0u "close_time")
                (assert app_global_get_ex_did_exist%1#0) // check value exists
                let tmp%2#0: uint64 = (! app_global_get_ex_value%0#0)
                (assert tmp%2#0) // Already closed
                let new_state_value%3#0: uint64 = (global LatestTimestamp)
                (app_global_put "close_time" new_state_value%3#0)
                let (app_global_get_ex_value%4#0: bytes, app_global_get_ex_did_exist%5#0: uint64) = (app_global_get_ex 0u "vote_id")
                (assert app_global_get_ex_did_exist%5#0) // check value exists
                let tmp%6#0: bytes = (concat "{\"standard\":\"arc69\",\"description\":\"This is a voting result NFT for voting round with ID " app_global_get_ex_value%4#0)
                let tmp%7#0: bytes = (concat tmp%6#0 ".\",\"properties\":{\"metadata\":\"ipfs://")
                let (app_global_get_ex_value%8#0: bytes, app_global_get_ex_did_exist%9#0: uint64) = (app_global_get_ex 0u "metadata_ipfs_cid")
                (assert app_global_get_ex_did_exist%9#0) // check value exists
                let tmp%10#0: bytes = (concat tmp%7#0 app_global_get_ex_value%8#0)
                let tmp%11#0: bytes = (concat tmp%10#0 "\",\"id\":\"")
                let (app_global_get_ex_value%12#0: bytes, app_global_get_ex_did_exist%13#0: uint64) = (app_global_get_ex 0u "vote_id")
                (assert app_global_get_ex_did_exist%13#0) // check value exists
                let tmp%14#0: bytes = (concat tmp%11#0 app_global_get_ex_value%12#0)
                let tmp%15#0: bytes = (concat tmp%14#0 "\",\"quorum\":")
                let (app_global_get_ex_value%16#0: uint64, app_global_get_ex_did_exist%17#0: uint64) = (app_global_get_ex 0u "quorum")
                (assert app_global_get_ex_did_exist%17#0) // check value exists
                let tmp%18#0: bytes = (itob app_global_get_ex_value%16#0)
                let tmp%19#0: bytes = (concat tmp%15#0 tmp%18#0)
                let tmp%20#0: bytes = (concat tmp%19#0 ",\"voterCount\":")
                let (app_global_get_ex_value%21#0: uint64, app_global_get_ex_did_exist%22#0: uint64) = (app_global_get_ex 0u "voter_count")
                (assert app_global_get_ex_did_exist%22#0) // check value exists
                let tmp%23#0: bytes = (itob app_global_get_ex_value%21#0)
                let tmp%24#0: bytes = (concat tmp%20#0 tmp%23#0)
                let note#0: bytes = (concat tmp%24#0 ",\"tallies\":[")
                let current_index#0: uint64 = 0u
                let (app_global_get_ex_value%25#0: bytes, app_global_get_ex_did_exist%26#0: uint64) = (app_global_get_ex 0u "option_counts")
                (assert app_global_get_ex_did_exist%26#0) // check value exists
                let tmp%27#0: uint64 = (extract_uint16 app_global_get_ex_value%25#0 0u)
                let range_item%28#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L144
                let question_index#0: uint64 = φ(range_item%28#0 <- block@0, range_item%28#6 <- block@15)
                let current_index#6: uint64 = φ(current_index#0 <- block@0, current_index#1 <- block@15)
                let note#3: bytes = φ(note#0 <- block@0, note#1 <- block@15)
                let continue_looping%29#0: uint64 = (< question_index#0 tmp%27#0)
                goto continue_looping%29#0 ? block@2 : block@17
            block@2: // for_body_L144
                let (app_global_get_ex_value%30#0: bytes, app_global_get_ex_did_exist%31#0: uint64) = (app_global_get_ex 0u "option_counts")
                (assert app_global_get_ex_did_exist%31#0) // check value exists
                let array_length%32#0: uint64 = (extract_uint16 app_global_get_ex_value%30#0 0u)
                let index_is_in_bounds%33#0: uint64 = (< question_index#0 array_length%32#0)
                (assert index_is_in_bounds%33#0) // Index access is out of bounds
                let array_data_sans_header%34#0: bytes = ((extract 2 0) app_global_get_ex_value%30#0)
                let tmp%36#0: bytes = (extract3 array_data_sans_header%34#0 question_index#0 1u)
                let question_options#0: uint64 = (btoi tmp%36#0)
                let range_item%37#0: uint64 = 0u
                goto block@3
            block@3: // for_header_L146
                let option_index#0: uint64 = φ(range_item%37#0 <- block@2, range_item%37#5 <- block@13)
                let current_index#1: uint64 = φ(current_index#6 <- block@2, current_index#5 <- block@13)
                let note#1: bytes = φ(note#3 <- block@2, note#2 <- block@13)
                let continue_looping%38#0: uint64 = (< option_index#0 question_options#0)
                goto continue_looping%38#0 ? block@4 : block@15
            block@4: // for_body_L146
                let votes_for_option#0: uint64 = examples.voting.voting.get_vote_from_box(current_index#1)
                let tmp%39#0: uint64 = (! option_index#0)
                goto tmp%39#0 ? block@5 : block@6
            block@5: // ternary_true_L149
                let ternary_result%40#0: bytes = "["
                goto block@13
            block@6: // ternary_false_L149
                let tmp%41#0: uint64 = (- question_options#0 1u)
                let tmp%42#0: uint64 = (== option_index#0 tmp%41#0)
                goto tmp%42#0 ? block@7 : block@8
            block@7: // ternary_true_L151
                let tmp%44#0: bytes = (itob votes_for_option#0)
                let ternary_result%43#0: bytes = (concat tmp%44#0 "]")
                goto block@12
            block@8: // ternary_false_L151
                let (app_global_get_ex_value%46#0: bytes, app_global_get_ex_did_exist%47#0: uint64) = (app_global_get_ex 0u "option_counts")
                (assert app_global_get_ex_did_exist%47#0) // check value exists
                let tmp%48#0: uint64 = (extract_uint16 app_global_get_ex_value%46#0 0u)
                let tmp%49#0: uint64 = (- tmp%48#0 1u)
                let tmp%50#0: uint64 = (== question_index#0 tmp%49#0)
                goto tmp%50#0 ? block@9 : block@10
            block@9: // ternary_true_L153
                let ternary_result%51#0: bytes = ","
                goto block@11
            block@10: // ternary_false_L153
                let ternary_result%51#1: bytes = ""
                goto block@11
            block@11: // ternary_merge_L153
                let ternary_result%51#2: bytes = φ(ternary_result%51#0 <- block@9, ternary_result%51#1 <- block@10)
                goto block@12
            block@12: // ternary_merge_L151
                let ternary_result%43#2: bytes = φ(ternary_result%43#0 <- block@7, ternary_result%51#2 <- block@11)
                goto block@13
            block@13: // ternary_merge_L149
                let ternary_result%40#2: bytes = φ(ternary_result%40#0 <- block@5, ternary_result%43#2 <- block@12)
                let note#2: bytes = (concat note#1 ternary_result%40#2)
                let current_index#5: uint64 = (+ current_index#1 1u)
                let range_item%37#5: uint64 = (+ option_index#0 1u)
                goto block@3
            block@15: // after_for_L146
                let range_item%28#6: uint64 = (+ question_index#0 1u)
                goto block@1
            block@17: // after_for_L144
                let note#4: bytes = (concat note#3 "]}}")
                itxn_begin
                ((itxn_field TypeEnum) acfg)
                ((itxn_field ConfigAssetTotal) 1u)
                ((itxn_field ConfigAssetDecimals) 0u)
                ((itxn_field ConfigAssetDefaultFrozen) 0u)
                let (app_global_get_ex_value%52#0: bytes, app_global_get_ex_did_exist%53#0: uint64) = (app_global_get_ex 0u "vote_id")
                (assert app_global_get_ex_did_exist%53#0) // check value exists
                let tmp%54#0: bytes = (concat "[VOTE RESULT] " app_global_get_ex_value%52#0)
                ((itxn_field ConfigAssetName) tmp%54#0)
                ((itxn_field ConfigAssetUnitName) "VOTERSLT")
                let (app_global_get_ex_value%55#0: bytes, app_global_get_ex_did_exist%56#0: uint64) = (app_global_get_ex 0u "nft_image_url")
                (assert app_global_get_ex_did_exist%56#0) // check value exists
                ((itxn_field ConfigAssetURL) app_global_get_ex_value%55#0)
                ((itxn_field Note) note#4)
                itxn_submit
                let new_state_value%57#0: uint64 = (itxn CreatedAssetID)
                (app_global_put "nft_asset_id" new_state_value%57#0)
                return 
        
        subroutine puyapy.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
            block@0: // L13
                let required_budget_with_buffer#0: uint64 = (+ required_budget#0 10u)
                goto block@1
            block@1: // while_top_L20
                let tmp%0#0: uint64 = (global OpcodeBudget)
                let tmp%1#0: uint64 = (> required_budget_with_buffer#0 tmp%0#0)
                goto tmp%1#0 ? block@2 : block@7
            block@2: // while_body_L20
                itxn_begin
                ((itxn_field TypeEnum) appl)
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApprovalProgram) 0x068101)
                ((itxn_field ClearStateProgram) 0x068101)
                goto [block@3, block@4, ...block@6][fee_source#0]
            block@3: // switch_case_0_L28
                ((itxn_field Fee) 0u)
                goto block@6
            block@4: // switch_case_1_L30
                let tmp%2#0: uint64 = (global MinTxnFee)
                ((itxn_field Fee) tmp%2#0)
                goto block@6
            block@6: // switch_case_next_L26
                itxn_submit
                goto block@1
            block@7: // after_while_L20
                return 
        
        subroutine examples.voting.voting.get_vote_from_box(index: uint64) -> uint64:
            block@0: // L263
                let (box_data#0: bytes, exists#0: uint64) = (box_get "V")
                (assert exists#0) // Box not created
                let tmp%2#0: bytes = (extract3 box_data#0 index#0 8u)
                let tmp%3#0: uint64 = (btoi tmp%2#0)
                return tmp%3#0
        
        subroutine examples.voting.voting.VotingRoundApp.get_preconditions(signature: bytes) -> bytes:
            block@0: // L172
                let tmp%0#0: uint64 = examples.voting.voting.VotingRoundApp.voting_open()
                let val_as_bytes%1#0: bytes = (itob tmp%0#0)
                let awst_tmp%2#0: uint64 = (len signature#0)
                let tmp%3#0: uint64 = (< 2u awst_tmp%2#0)
                goto tmp%3#0 ? block@1 : block@2
            block@1: // ternary_true_L175
                let ternary_result%4#0: uint64 = 2u
                goto block@3
            block@2: // ternary_false_L175
                goto block@3
            block@3: // ternary_merge_L175
                let ternary_result%4#2: uint64 = φ(ternary_result%4#0 <- block@1, awst_tmp%2#0 <- block@2)
                let base_length%5#0: uint64 = (len signature#0)
                let tmp%6#0: bytes = (substring3 signature#0 ternary_result%4#2 base_length%5#0)
                let tmp%7#0: uint64 = examples.voting.voting.VotingRoundApp.allowed_to_vote(tmp%6#0)
                let val_as_bytes%8#0: bytes = (itob tmp%7#0)
                let tmp%9#0: uint64 = examples.voting.voting.VotingRoundApp.already_voted()
                let val_as_bytes%10#0: bytes = (itob tmp%9#0)
                let tmp%11#0: uint64 = (global LatestTimestamp)
                let val_as_bytes%12#0: bytes = (itob tmp%11#0)
                let encoded_tuple_buffer%14#1: bytes = (concat 0x val_as_bytes%1#0)
                let encoded_tuple_buffer%14#2: bytes = (concat encoded_tuple_buffer%14#1 val_as_bytes%8#0)
                let encoded_tuple_buffer%14#3: bytes = (concat encoded_tuple_buffer%14#2 val_as_bytes%10#0)
                let encoded_tuple_buffer%14#4: bytes = (concat encoded_tuple_buffer%14#3 val_as_bytes%12#0)
                return encoded_tuple_buffer%14#4
        
        subroutine examples.voting.voting.VotingRoundApp.voting_open() -> uint64:
            block@0: // L220
                let (app_global_get_ex_value%0#0: uint64, app_global_get_ex_did_exist%1#0: uint64) = (app_global_get_ex 0u "is_bootstrapped")
                (assert app_global_get_ex_did_exist%1#0) // check value exists
                goto app_global_get_ex_value%0#0 ? block@1 : block@5
            block@1: // and_contd_L222
                let (app_global_get_ex_value%2#0: uint64, app_global_get_ex_did_exist%3#0: uint64) = (app_global_get_ex 0u "close_time")
                (assert app_global_get_ex_did_exist%3#0) // check value exists
                goto app_global_get_ex_value%2#0 ? block@5 : block@2
            block@2: // and_contd_L222
                let (app_global_get_ex_value%4#0: uint64, app_global_get_ex_did_exist%5#0: uint64) = (app_global_get_ex 0u "start_time")
                (assert app_global_get_ex_did_exist%5#0) // check value exists
                let awst_tmp%6#0: uint64 = (global LatestTimestamp)
                let tmp%7#0: uint64 = (<= app_global_get_ex_value%4#0 awst_tmp%6#0)
                goto tmp%7#0 ? block@3 : block@5
            block@3: // and_contd_L224
                let (app_global_get_ex_value%8#0: uint64, app_global_get_ex_did_exist%9#0: uint64) = (app_global_get_ex 0u "end_time")
                (assert app_global_get_ex_did_exist%9#0) // check value exists
                let tmp%10#0: uint64 = (<= awst_tmp%6#0 app_global_get_ex_value%8#0)
                goto tmp%10#0 ? block@4 : block@5
            block@4: // bool_true_L222
                let and_result%11#0: uint64 = 1u
                goto block@6
            block@5: // bool_false_L222
                let and_result%11#1: uint64 = 0u
                goto block@6
            block@6: // bool_merge_L222
                let and_result%11#2: uint64 = φ(and_result%11#0 <- block@4, and_result%11#1 <- block@5)
                return and_result%11#2
        
        subroutine examples.voting.voting.VotingRoundApp.allowed_to_vote(signature: bytes) -> uint64:
            block@0: // L253
                puyapy.ensure_budget(2000u, 2u)
                let tmp%0#0: bytes = (txn Sender)
                let (app_global_get_ex_value%1#0: bytes, app_global_get_ex_did_exist%2#0: uint64) = (app_global_get_ex 0u "snapshot_public_key")
                (assert app_global_get_ex_did_exist%2#0) // check value exists
                let tmp%3#0: uint64 = (ed25519verify_bare tmp%0#0 signature#0 app_global_get_ex_value%1#0)
                return tmp%3#0
        
        subroutine examples.voting.voting.VotingRoundApp.already_voted() -> uint64:
            block@0: // L228
                let tmp%0#0: bytes = (txn Sender)
                let (votes#0: bytes, exists#0: uint64) = (box_get tmp%0#0)
                return exists#0
        
        subroutine examples.voting.voting.VotingRoundApp.vote(fund_min_bal_req: uint64, signature: bytes, answer_ids: bytes) -> void:
            block@0: // L181
                puyapy.ensure_budget(7700u, 0u)
                let awst_tmp%0#0: uint64 = (len signature#0)
                let tmp%1#0: uint64 = (< 2u awst_tmp%0#0)
                goto tmp%1#0 ? block@1 : block@2
            block@1: // ternary_true_L190
                let ternary_result%2#0: uint64 = 2u
                goto block@3
            block@2: // ternary_false_L190
                goto block@3
            block@3: // ternary_merge_L190
                let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@1, awst_tmp%0#0 <- block@2)
                let base_length%3#0: uint64 = (len signature#0)
                let tmp%4#0: bytes = (substring3 signature#0 ternary_result%2#2 base_length%3#0)
                let tmp%5#0: uint64 = examples.voting.voting.VotingRoundApp.allowed_to_vote(tmp%4#0)
                (assert tmp%5#0) // Not allowed to vote
                let tmp%6#0: uint64 = examples.voting.voting.VotingRoundApp.voting_open()
                (assert tmp%6#0) // Voting not open
                let tmp%7#0: uint64 = examples.voting.voting.VotingRoundApp.already_voted()
                let tmp%8#0: uint64 = (! tmp%7#0)
                (assert tmp%8#0) // Already voted
                let (app_global_get_ex_value%9#0: bytes, app_global_get_ex_did_exist%10#0: uint64) = (app_global_get_ex 0u "option_counts")
                (assert app_global_get_ex_did_exist%10#0) // check value exists
                let questions_count#0: uint64 = (extract_uint16 app_global_get_ex_value%9#0 0u)
                let tmp%11#0: uint64 = (extract_uint16 answer_ids#0 0u)
                let tmp%12#0: uint64 = (== tmp%11#0 questions_count#0)
                (assert tmp%12#0) // Number of answers incorrect
                let tmp%13#0: uint64 = (extract_uint16 answer_ids#0 0u)
                let tmp%15#0: uint64 = (+ 34u tmp%13#0)
                let tmp%16#0: uint64 = (* tmp%15#0 400u)
                let min_bal_req#0: uint64 = (+ 2500u tmp%16#0)
                let tmp%17#0: bytes = ((gtxns Receiver) fund_min_bal_req#0)
                let tmp%18#0: bytes = (global CurrentApplicationAddress)
                let tmp%19#0: uint64 = (== tmp%17#0 tmp%18#0)
                (assert tmp%19#0) // Payment must be to app address
                let tmp%20#0: bytes = (itob min_bal_req#0)
                (log tmp%20#0)
                let tmp%21#0: uint64 = ((gtxns Amount) fund_min_bal_req#0)
                let tmp%22#0: uint64 = (== tmp%21#0 min_bal_req#0)
                (assert tmp%22#0) // Payment must be the exact min balance
                let cumulative_offset#0: uint64 = 0u
                let range_item%23#0: uint64 = 0u
                goto block@4
            block@4: // for_header_L207
                let question_index#0: uint64 = φ(range_item%23#0 <- block@3, range_item%23#2 <- block@5)
                let cumulative_offset#1: uint64 = φ(cumulative_offset#0 <- block@3, cumulative_offset#2 <- block@5)
                let continue_looping%24#0: uint64 = (< question_index#0 questions_count#0)
                goto continue_looping%24#0 ? block@5 : block@7
            block@5: // for_body_L207
                let array_length%25#0: uint64 = (extract_uint16 answer_ids#0 0u)
                let index_is_in_bounds%26#0: uint64 = (< question_index#0 array_length%25#0)
                (assert index_is_in_bounds%26#0) // Index access is out of bounds
                let array_data_sans_header%27#0: bytes = ((extract 2 0) answer_ids#0)
                let answer_option_index#0: bytes = (extract3 array_data_sans_header%27#0 question_index#0 1u)
                let (app_global_get_ex_value%29#0: bytes, app_global_get_ex_did_exist%30#0: uint64) = (app_global_get_ex 0u "option_counts")
                (assert app_global_get_ex_did_exist%30#0) // check value exists
                let array_length%31#0: uint64 = (extract_uint16 app_global_get_ex_value%29#0 0u)
                let index_is_in_bounds%32#0: uint64 = (< question_index#0 array_length%31#0)
                (assert index_is_in_bounds%32#0) // Index access is out of bounds
                let array_data_sans_header%33#0: bytes = ((extract 2 0) app_global_get_ex_value%29#0)
                let options_count#0: bytes = (extract3 array_data_sans_header%33#0 question_index#0 1u)
                let tmp%35#0: uint64 = (btoi answer_option_index#0)
                let tmp%36#0: uint64 = (btoi options_count#0)
                let tmp%37#0: uint64 = (< tmp%35#0 tmp%36#0)
                (assert tmp%37#0) // Answer option index invalid
                let tmp%38#0: uint64 = (btoi answer_option_index#0)
                let tmp%39#0: uint64 = (+ cumulative_offset#1 tmp%38#0)
                examples.voting.voting.increment_vote_in_box(tmp%39#0)
                let tmp%40#0: uint64 = (btoi options_count#0)
                let cumulative_offset#2: uint64 = (+ cumulative_offset#1 tmp%40#0)
                let tmp%41#0: bytes = (txn Sender)
                (box_put tmp%41#0 answer_ids#0)
                let (app_global_get_ex_value%42#0: uint64, app_global_get_ex_did_exist%43#0: uint64) = (app_global_get_ex 0u "voter_count")
                (assert app_global_get_ex_did_exist%43#0) // check value exists
                let new_state_value%44#0: uint64 = (+ app_global_get_ex_value%42#0 1u)
                (app_global_put "voter_count" new_state_value%44#0)
                let range_item%23#2: uint64 = (+ question_index#0 1u)
                goto block@4
            block@7: // after_for_L207
                return 
        
        subroutine examples.voting.voting.increment_vote_in_box(index: uint64) -> void:
            block@0: // L270
                let (box_data#0: bytes, exists#0: uint64) = (box_get "V")
                (assert exists#0) // Box not created
                let tmp%2#0: bytes = (extract3 box_data#0 index#0 8u)
                let current_vote#0: uint64 = (btoi tmp%2#0)
                let tmp%3#0: uint64 = (+ current_vote#0 1u)
                let tmp%4#0: bytes = (itob tmp%3#0)
                (box_replace "V" index#0 tmp%4#0)
                return 
        
        subroutine examples.voting.voting.VotingRoundApp.__init__() -> void:
            block@0: // L52
                (app_global_put "is_bootstrapped" 0u)
                (app_global_put "voter_count" 0u)
                (app_global_put "close_time" 0u)
                (app_global_put "nft_asset_id" 0u)
                (app_global_put "snapshot_public_key" "")
                (app_global_put "vote_id" "")
                (app_global_put "metadata_ipfs_cid" "")
                (app_global_put "start_time" 0u)
                (app_global_put "end_time" 0u)
                (app_global_put "quorum" 0u)
                (app_global_put "nft_image_url" "")
                (app_global_put "option_counts" 0x0000)
                (app_global_put "total_options" 0u)
                return 
    
    program clear-state:
        subroutine examples.voting.voting.VotingRoundApp.clear_state_program() -> uint64:
            block@0: // L69
                return 1u