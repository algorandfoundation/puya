{
    "hints": {
        "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "bootstrap(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "close()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_preconditions(byte[])(uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "arc4.struct<is_voting_open:arc4.uint64,is_allowed_to_vote:arc4.uint64,has_already_voted:arc4.uint64,current_time:arc4.uint64>",
                    "elements": [
                        [
                            "is_voting_open",
                            "uint64"
                        ],
                        [
                            "is_allowed_to_vote",
                            "uint64"
                        ],
                        [
                            "has_already_voted",
                            "uint64"
                        ],
                        [
                            "current_time",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "vote(pay,byte[],uint8[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKCi8vIGV4YW1wbGVzLnZvdGluZy52b3RpbmcuVm90aW5nUm91bmRBcHAuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbl9ibG9ja0AwOgogICAgICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAgICAgYm56IG1haW5fZW50cnlwb2ludEAyCgptYWluX29uX2NyZWF0ZUAxOgogICAgICAgIGNhbGxzdWIgX19pbml0X18KCm1haW5fZW50cnlwb2ludEAyOgogICAgICAgIHR4biBOdW1BcHBBcmdzCiAgICAgICAgYnogbWFpbl9hZnRlcl9pZl9lbHNlQDExCgptYWluX2FiaV9yb3V0aW5nQDM6CiAgICAgICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgICAgIG1ldGhvZCAiY3JlYXRlKHN0cmluZyxieXRlW10sc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDhbXSx1aW50NjQsc3RyaW5nKXZvaWQiCiAgICAgICAgbWV0aG9kICJib290c3RyYXAocGF5KXZvaWQiCiAgICAgICAgbWV0aG9kICJjbG9zZSgpdm9pZCIKICAgICAgICBtZXRob2QgImdldF9wcmVjb25kaXRpb25zKGJ5dGVbXSkodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSIKICAgICAgICBtZXRob2QgInZvdGUocGF5LGJ5dGVbXSx1aW50OFtdKXZvaWQiCiAgICAgICAgdW5jb3ZlciA1CiAgICAgICAgbWF0Y2ggbWFpbl9jcmVhdGVfcm91dGVANCBtYWluX2Jvb3RzdHJhcF9yb3V0ZUA1IG1haW5fY2xvc2Vfcm91dGVANiBtYWluX2dldF9wcmVjb25kaXRpb25zX3JvdXRlQDcgbWFpbl92b3RlX3JvdXRlQDgKICAgICAgICBiIG1haW5fYWZ0ZXJfaWZfZWxzZUAxMQoKbWFpbl9jcmVhdGVfcm91dGVANDoKICAgICAgICB0eG4gT25Db21wbGV0aW9uCiAgICAgICAgIQogICAgICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAgICAgIQogICAgICAgIGFzc2VydCAvLyBpcyBjcmVhdGluZwogICAgICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgICAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAgICAgZXh0cmFjdCAyIDAKICAgICAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAgICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgICAgIGJ0b2kKICAgICAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA1CiAgICAgICAgYnRvaQogICAgICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDYKICAgICAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA3CiAgICAgICAgYnRvaQogICAgICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDgKICAgICAgICBjYWxsc3ViIGNyZWF0ZQogICAgICAgIGludCAxCiAgICAgICAgcmV0dXJuCgptYWluX2Jvb3RzdHJhcF9yb3V0ZUA1OgogICAgICAgIHR4biBPbkNvbXBsZXRpb24KICAgICAgICAhCiAgICAgICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICAgICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAgICAgdHhuIEdyb3VwSW5kZXgKICAgICAgICBpbnQgMQogICAgICAgIC0KICAgICAgICBkdXAKICAgICAgICBndHhucyBUeXBlRW51bQogICAgICAgIGludCBwYXkKICAgICAgICA9PQogICAgICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgICAgIGNhbGxzdWIgYm9vdHN0cmFwCiAgICAgICAgaW50IDEKICAgICAgICByZXR1cm4KCm1haW5fY2xvc2Vfcm91dGVANjoKICAgICAgICB0eG4gT25Db21wbGV0aW9uCiAgICAgICAgIQogICAgICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAgICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgICAgIGNhbGxzdWIgY2xvc2UKICAgICAgICBpbnQgMQogICAgICAgIHJldHVybgoKbWFpbl9nZXRfcHJlY29uZGl0aW9uc19yb3V0ZUA3OgogICAgICAgIHR4biBPbkNvbXBsZXRpb24KICAgICAgICAhCiAgICAgICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICAgICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAgICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgICAgIGNhbGxzdWIgZ2V0X3ByZWNvbmRpdGlvbnMKICAgICAgICBieXRlIDB4MTUxZjdjNzUKICAgICAgICBzd2FwCiAgICAgICAgY29uY2F0CiAgICAgICAgbG9nCiAgICAgICAgaW50IDEKICAgICAgICByZXR1cm4KCm1haW5fdm90ZV9yb3V0ZUA4OgogICAgICAgIHR4biBPbkNvbXBsZXRpb24KICAgICAgICAhCiAgICAgICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICAgICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAgICAgdHhuIEdyb3VwSW5kZXgKICAgICAgICBpbnQgMQogICAgICAgIC0KICAgICAgICBkdXAKICAgICAgICBndHhucyBUeXBlRW51bQogICAgICAgIGludCBwYXkKICAgICAgICA9PQogICAgICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgICAgICBleHRyYWN0IDIgMAogICAgICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgICAgICBjYWxsc3ViIHZvdGUKICAgICAgICBpbnQgMQogICAgICAgIHJldHVybgoKbWFpbl9hZnRlcl9pZl9lbHNlQDExOgogICAgICAgIGVyciAvLyByZWplY3QgdHJhbnNhY3Rpb24KCgovLyBleGFtcGxlcy52b3Rpbmcudm90aW5nLlZvdGluZ1JvdW5kQXBwLmNyZWF0ZSh2b3RlX2lkIzA6IGJ5dGVzLCBzbmFwc2hvdF9wdWJsaWNfa2V5IzA6IGJ5dGVzLCBtZXRhZGF0YV9pcGZzX2NpZCMwOiBieXRlcywgc3RhcnRfdGltZSMwOiB1aW50NjQsIGVuZF90aW1lIzA6IHVpbnQ2NCwgb3B0aW9uX2NvdW50cyMwOiBieXRlcywgcXVvcnVtIzA6IHVpbnQ2NCwgbmZ0X2ltYWdlX3VybCMwOiBieXRlcykgLT4gdm9pZDoKY3JlYXRlOgogICAgICAgIHByb3RvIDggMAoKY3JlYXRlX2Jsb2NrQDA6CiAgICAgICAgZnJhbWVfZGlnIC01CiAgICAgICAgZnJhbWVfZGlnIC00CiAgICAgICAgPAogICAgICAgIGFzc2VydCAvLyBFbmQgdGltZSBzaG91bGQgYmUgYWZ0ZXIgc3RhcnQgdGltZQogICAgICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgICAgICBmcmFtZV9kaWcgLTQKICAgICAgICA8PQogICAgICAgIGFzc2VydCAvLyBFbmQgdGltZSBzaG91bGQgYmUgaW4gdGhlIGZ1dHVyZQogICAgICAgIGZyYW1lX2RpZyAtOAogICAgICAgIGV4dHJhY3QgMiAwCiAgICAgICAgYnl0ZSAidm90ZV9pZCIKICAgICAgICBzd2FwCiAgICAgICAgYXBwX2dsb2JhbF9wdXQKICAgICAgICBieXRlICJzbmFwc2hvdF9wdWJsaWNfa2V5IgogICAgICAgIGZyYW1lX2RpZyAtNwogICAgICAgIGFwcF9nbG9iYWxfcHV0CiAgICAgICAgZnJhbWVfZGlnIC02CiAgICAgICAgZXh0cmFjdCAyIDAKICAgICAgICBieXRlICJtZXRhZGF0YV9pcGZzX2NpZCIKICAgICAgICBzd2FwCiAgICAgICAgYXBwX2dsb2JhbF9wdXQKICAgICAgICBieXRlICJzdGFydF90aW1lIgogICAgICAgIGZyYW1lX2RpZyAtNQogICAgICAgIGFwcF9nbG9iYWxfcHV0CiAgICAgICAgYnl0ZSAiZW5kX3RpbWUiCiAgICAgICAgZnJhbWVfZGlnIC00CiAgICAgICAgYXBwX2dsb2JhbF9wdXQKICAgICAgICBieXRlICJxdW9ydW0iCiAgICAgICAgZnJhbWVfZGlnIC0yCiAgICAgICAgYXBwX2dsb2JhbF9wdXQKICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICBleHRyYWN0IDIgMAogICAgICAgIGJ5dGUgIm5mdF9pbWFnZV91cmwiCiAgICAgICAgc3dhcAogICAgICAgIGFwcF9nbG9iYWxfcHV0CiAgICAgICAgZnJhbWVfZGlnIC0zCiAgICAgICAgY2FsbHN1YiBzdG9yZV9vcHRpb25fY291bnRzCiAgICAgICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMudm90aW5nLnZvdGluZy5Wb3RpbmdSb3VuZEFwcC5zdG9yZV9vcHRpb25fY291bnRzKG9wdGlvbl9jb3VudHMjMDogYnl0ZXMpIC0+IHZvaWQ6CnN0b3JlX29wdGlvbl9jb3VudHM6CiAgICAgICAgcHJvdG8gMSAwCgpzdG9yZV9vcHRpb25fY291bnRzX2Jsb2NrQDA6CiAgICAgICAgZnJhbWVfZGlnIC0xCiAgICAgICAgaW50IDAKICAgICAgICBleHRyYWN0X3VpbnQxNgogICAgICAgIGFzc2VydCAvLyBvcHRpb25fY291bnRzIHNob3VsZCBiZSBub24tZW1wdHkKICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICBpbnQgMAogICAgICAgIGV4dHJhY3RfdWludDE2CiAgICAgICAgaW50IDExMgogICAgICAgIDw9CiAgICAgICAgYXNzZXJ0IC8vIENhbid0IGhhdmUgbW9yZSB0aGFuIDExMiBxdWVzdGlvbnMKICAgICAgICBpbnQgMAogICAgICAgIGZyYW1lX2RpZyAtMQogICAgICAgIGludCAwCiAgICAgICAgZXh0cmFjdF91aW50MTYKICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICBleHRyYWN0IDIgMAogICAgICAgIGludCAwCgpzdG9yZV9vcHRpb25fY291bnRzX2Zvcl9oZWFkZXJAMToKICAgICAgICBmcmFtZV9kaWcgMwogICAgICAgIGZyYW1lX2RpZyAxCiAgICAgICAgPAogICAgICAgIGJ6IHN0b3JlX29wdGlvbl9jb3VudHNfYWZ0ZXJfZm9yQDQKCnN0b3JlX29wdGlvbl9jb3VudHNfZm9yX2JvZHlAMjoKICAgICAgICBmcmFtZV9kaWcgMgogICAgICAgIGZyYW1lX2RpZyAzCiAgICAgICAgZHVwCiAgICAgICAgY292ZXIgMgogICAgICAgIGludCAxCiAgICAgICAgZXh0cmFjdDMKICAgICAgICBidG9pCiAgICAgICAgZnJhbWVfZGlnIDAKICAgICAgICArCiAgICAgICAgZnJhbWVfYnVyeSAwCiAgICAgICAgaW50IDEKICAgICAgICArCiAgICAgICAgZnJhbWVfYnVyeSAzCiAgICAgICAgYiBzdG9yZV9vcHRpb25fY291bnRzX2Zvcl9oZWFkZXJAMQoKc3RvcmVfb3B0aW9uX2NvdW50c19hZnRlcl9mb3JANDoKICAgICAgICBmcmFtZV9kaWcgMAogICAgICAgIGR1cAogICAgICAgIGludCAxMjgKICAgICAgICA8PQogICAgICAgIGFzc2VydCAvLyBDYW4ndCBoYXZlIG1vcmUgdGhhbiAxMjggdm90ZSBvcHRpb25zCiAgICAgICAgYnl0ZSAib3B0aW9uX2NvdW50cyIKICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICBhcHBfZ2xvYmFsX3B1dAogICAgICAgIGJ5dGUgInRvdGFsX29wdGlvbnMiCiAgICAgICAgc3dhcAogICAgICAgIGFwcF9nbG9iYWxfcHV0CiAgICAgICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMudm90aW5nLnZvdGluZy5Wb3RpbmdSb3VuZEFwcC5ib290c3RyYXAoZnVuZF9taW5fYmFsX3JlcSMwOiB1aW50NjQpIC0+IHZvaWQ6CmJvb3RzdHJhcDoKICAgICAgICBwcm90byAxIDAKCmJvb3RzdHJhcF9ibG9ja0AwOgogICAgICAgIGludCAwCiAgICAgICAgYnl0ZSAiaXNfYm9vdHN0cmFwcGVkIgogICAgICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICAgICAgYXNzZXJ0IC8vIGNoZWNrIHZhbHVlIGV4aXN0cwogICAgICAgICEKICAgICAgICBhc3NlcnQgLy8gTXVzdCBub3QgYmUgYWxyZWFkeSBib290c3RyYXBwZWQKICAgICAgICBieXRlICJpc19ib290c3RyYXBwZWQiCiAgICAgICAgaW50IDEKICAgICAgICBhcHBfZ2xvYmFsX3B1dAogICAgICAgIGZyYW1lX2RpZyAtMQogICAgICAgIGd0eG5zIFJlY2VpdmVyCiAgICAgICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgICAgICA9PQogICAgICAgIGFzc2VydCAvLyBQYXltZW50IG11c3QgYmUgdG8gYXBwIGFkZHJlc3MKICAgICAgICBpbnQgMAogICAgICAgIGJ5dGUgInRvdGFsX29wdGlvbnMiCiAgICAgICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgICAgICBhc3NlcnQgLy8gY2hlY2sgdmFsdWUgZXhpc3RzCiAgICAgICAgaW50IDgKICAgICAgICAqCiAgICAgICAgZHVwCiAgICAgICAgaW50IDQwMAogICAgICAgICoKICAgICAgICBpbnQgMjAzOTAwCiAgICAgICAgKwogICAgICAgIGR1cAogICAgICAgIGl0b2IKICAgICAgICBsb2cKICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICBndHhucyBBbW91bnQKICAgICAgICA9PQogICAgICAgIGFzc2VydCAvLyBQYXltZW50IG11c3QgYmUgZm9yIHRoZSBleGFjdCBtaW4gYmFsYW5jZSByZXF1aXJlbWVudAogICAgICAgIGJ5dGUgIlYiCiAgICAgICAgc3dhcAogICAgICAgIGJveF9jcmVhdGUKICAgICAgICBhc3NlcnQKICAgICAgICByZXRzdWIKCgovLyBleGFtcGxlcy52b3Rpbmcudm90aW5nLlZvdGluZ1JvdW5kQXBwLmNsb3NlKCkgLT4gdm9pZDoKY2xvc2U6CiAgICAgICAgcHJvdG8gMCAwCiAgICAgICAgaW50IDAKICAgICAgICBkdXAKICAgICAgICBieXRlICIiCiAgICAgICAgZHVwbiAyCgpjbG9zZV9ibG9ja0AwOgogICAgICAgIGludCAyMDAwMAogICAgICAgIGludCAwCiAgICAgICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CiAgICAgICAgaW50IDAKICAgICAgICBieXRlICJjbG9zZV90aW1lIgogICAgICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICAgICAgc3dhcAogICAgICAgIHBvcAogICAgICAgICEKICAgICAgICBhc3NlcnQgLy8gQWxyZWFkeSBjbG9zZWQKICAgICAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICAgICAgYnl0ZSAiY2xvc2VfdGltZSIKICAgICAgICBzd2FwCiAgICAgICAgYXBwX2dsb2JhbF9wdXQKICAgICAgICBpbnQgMAogICAgICAgIGJ5dGUgInZvdGVfaWQiCiAgICAgICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgICAgICBhc3NlcnQgLy8gY2hlY2sgdmFsdWUgZXhpc3RzCiAgICAgICAgYnl0ZSAie1wic3RhbmRhcmRcIjpcImFyYzY5XCIsXCJkZXNjcmlwdGlvblwiOlwiVGhpcyBpcyBhIHZvdGluZyByZXN1bHQgTkZUIGZvciB2b3Rpbmcgcm91bmQgd2l0aCBJRCAiCiAgICAgICAgc3dhcAogICAgICAgIGNvbmNhdAogICAgICAgIGJ5dGUgIi5cIixcInByb3BlcnRpZXNcIjp7XCJtZXRhZGF0YVwiOlwiaXBmczovLyIKICAgICAgICBjb25jYXQKICAgICAgICBpbnQgMAogICAgICAgIGJ5dGUgIm1ldGFkYXRhX2lwZnNfY2lkIgogICAgICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICAgICAgYXNzZXJ0IC8vIGNoZWNrIHZhbHVlIGV4aXN0cwogICAgICAgIGNvbmNhdAogICAgICAgIGJ5dGUgIlwiLFwiaWRcIjpcIiIKICAgICAgICBjb25jYXQKICAgICAgICBpbnQgMAogICAgICAgIGJ5dGUgInZvdGVfaWQiCiAgICAgICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgICAgICBhc3NlcnQgLy8gY2hlY2sgdmFsdWUgZXhpc3RzCiAgICAgICAgY29uY2F0CiAgICAgICAgYnl0ZSAiXCIsXCJxdW9ydW1cIjoiCiAgICAgICAgY29uY2F0CiAgICAgICAgaW50IDAKICAgICAgICBieXRlICJxdW9ydW0iCiAgICAgICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgICAgICBhc3NlcnQgLy8gY2hlY2sgdmFsdWUgZXhpc3RzCiAgICAgICAgY2FsbHN1YiBpdG9hCiAgICAgICAgY29uY2F0CiAgICAgICAgYnl0ZSAiLFwidm90ZXJDb3VudFwiOiIKICAgICAgICBjb25jYXQKICAgICAgICBpbnQgMAogICAgICAgIGJ5dGUgInZvdGVyX2NvdW50IgogICAgICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICAgICAgYXNzZXJ0IC8vIGNoZWNrIHZhbHVlIGV4aXN0cwogICAgICAgIGNhbGxzdWIgaXRvYQogICAgICAgIGNvbmNhdAogICAgICAgIGJ5dGUgIixcInRhbGxpZXNcIjpbIgogICAgICAgIGNvbmNhdAogICAgICAgIGludCAwCiAgICAgICAgaW50IDAKICAgICAgICBieXRlICJvcHRpb25fY291bnRzIgogICAgICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICAgICAgYXNzZXJ0IC8vIGNoZWNrIHZhbHVlIGV4aXN0cwogICAgICAgIGR1cAogICAgICAgIGludCAwCiAgICAgICAgZXh0cmFjdF91aW50MTYKICAgICAgICBzd2FwCiAgICAgICAgZXh0cmFjdCAyIDAKICAgICAgICBpbnQgMAoKY2xvc2VfZm9yX2hlYWRlckAxOgogICAgICAgIGZyYW1lX2RpZyA5CiAgICAgICAgZnJhbWVfZGlnIDcKICAgICAgICA8CiAgICAgICAgYnogY2xvc2VfYWZ0ZXJfZm9yQDE1CgpjbG9zZV9mb3JfYm9keUAyOgogICAgICAgIGZyYW1lX2RpZyA4CiAgICAgICAgZnJhbWVfZGlnIDkKICAgICAgICBkdXAKICAgICAgICBjb3ZlciAyCiAgICAgICAgaW50IDEKICAgICAgICBleHRyYWN0MwogICAgICAgIGZyYW1lX2J1cnkgMQogICAgICAgIGludCAwCiAgICAgICAgPgogICAgICAgIGZyYW1lX2RpZyA1CiAgICAgICAgZnJhbWVfYnVyeSAwCiAgICAgICAgYnogY2xvc2VfYWZ0ZXJfaWZfZWxzZUA0CgpjbG9zZV9pZl9ib2R5QDM6CiAgICAgICAgZnJhbWVfZGlnIDUKICAgICAgICBieXRlICIsIgogICAgICAgIGNvbmNhdAogICAgICAgIGZyYW1lX2J1cnkgMAoKY2xvc2VfYWZ0ZXJfaWZfZWxzZUA0OgogICAgICAgIGZyYW1lX2RpZyAwCiAgICAgICAgZHVwCiAgICAgICAgZnJhbWVfYnVyeSA1CiAgICAgICAgZnJhbWVfZGlnIDEKICAgICAgICBidG9pCiAgICAgICAgZHVwCiAgICAgICAgZnJhbWVfYnVyeSA0CiAgICAgICAgaW50IDAKICAgICAgICA+CiAgICAgICAgc3dhcAogICAgICAgIGZyYW1lX2J1cnkgMAogICAgICAgIGZyYW1lX2RpZyA2CiAgICAgICAgZnJhbWVfYnVyeSAyCiAgICAgICAgYnogY2xvc2VfYWZ0ZXJfaWZfZWxzZUAxMwoKY2xvc2VfaWZfYm9keUA1OgogICAgICAgIGZyYW1lX2RpZyA1CiAgICAgICAgYnl0ZSAiWyIKICAgICAgICBjb25jYXQKICAgICAgICBmcmFtZV9idXJ5IDUKICAgICAgICBpbnQgMAogICAgICAgIGZyYW1lX2J1cnkgMwoKY2xvc2VfZm9yX2hlYWRlckA2OgogICAgICAgIGZyYW1lX2RpZyAzCiAgICAgICAgZnJhbWVfZGlnIDQKICAgICAgICA8CiAgICAgICAgYnogY2xvc2VfYWZ0ZXJfZm9yQDEyCgpjbG9zZV9mb3JfYm9keUA3OgogICAgICAgIGZyYW1lX2RpZyAzCiAgICAgICAgaW50IDAKICAgICAgICA+CiAgICAgICAgZnJhbWVfZGlnIDUKICAgICAgICBmcmFtZV9idXJ5IDAKICAgICAgICBieiBjbG9zZV9hZnRlcl9pZl9lbHNlQDkKCmNsb3NlX2lmX2JvZHlAODoKICAgICAgICBmcmFtZV9kaWcgNQogICAgICAgIGJ5dGUgIiwiCiAgICAgICAgY29uY2F0CiAgICAgICAgZnJhbWVfYnVyeSAwCgpjbG9zZV9hZnRlcl9pZl9lbHNlQDk6CiAgICAgICAgZnJhbWVfZGlnIDAKICAgICAgICBmcmFtZV9kaWcgNgogICAgICAgIGR1cAogICAgICAgIGNvdmVyIDIKICAgICAgICBjYWxsc3ViIGdldF92b3RlX2Zyb21fYm94CiAgICAgICAgY2FsbHN1YiBpdG9hCiAgICAgICAgY29uY2F0CiAgICAgICAgZnJhbWVfYnVyeSA1CiAgICAgICAgaW50IDEKICAgICAgICArCiAgICAgICAgZnJhbWVfYnVyeSA2CiAgICAgICAgZnJhbWVfZGlnIDMKICAgICAgICBpbnQgMQogICAgICAgICsKICAgICAgICBmcmFtZV9idXJ5IDMKICAgICAgICBiIGNsb3NlX2Zvcl9oZWFkZXJANgoKY2xvc2VfYWZ0ZXJfZm9yQDEyOgogICAgICAgIGZyYW1lX2RpZyA1CiAgICAgICAgYnl0ZSAiXSIKICAgICAgICBjb25jYXQKICAgICAgICBmcmFtZV9idXJ5IDAKICAgICAgICBmcmFtZV9kaWcgNgogICAgICAgIGZyYW1lX2J1cnkgMgoKY2xvc2VfYWZ0ZXJfaWZfZWxzZUAxMzoKICAgICAgICBmcmFtZV9kaWcgMAogICAgICAgIGZyYW1lX2J1cnkgNQogICAgICAgIGZyYW1lX2RpZyAyCiAgICAgICAgZnJhbWVfYnVyeSA2CiAgICAgICAgZnJhbWVfZGlnIDkKICAgICAgICBpbnQgMQogICAgICAgICsKICAgICAgICBmcmFtZV9idXJ5IDkKICAgICAgICBiIGNsb3NlX2Zvcl9oZWFkZXJAMQoKY2xvc2VfYWZ0ZXJfZm9yQDE1OgogICAgICAgIGZyYW1lX2RpZyA1CiAgICAgICAgYnl0ZSAiXX19IgogICAgICAgIGNvbmNhdAogICAgICAgIGl0eG5fYmVnaW4KICAgICAgICBpbnQgYWNmZwogICAgICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgICAgICBpbnQgMQogICAgICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAogICAgICAgIGludCAwCiAgICAgICAgaXR4bl9maWVsZCBDb25maWdBc3NldERlY2ltYWxzCiAgICAgICAgaW50IDAKICAgICAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RGVmYXVsdEZyb3plbgogICAgICAgIGludCAwCiAgICAgICAgYnl0ZSAidm90ZV9pZCIKICAgICAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgICAgIGFzc2VydCAvLyBjaGVjayB2YWx1ZSBleGlzdHMKICAgICAgICBieXRlICJbVk9URSBSRVNVTFRdICIKICAgICAgICBzd2FwCiAgICAgICAgY29uY2F0CiAgICAgICAgaXR4bl9maWVsZCBDb25maWdBc3NldE5hbWUKICAgICAgICBieXRlICJWT1RFUlNMVCIKICAgICAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKICAgICAgICBpbnQgMAogICAgICAgIGJ5dGUgIm5mdF9pbWFnZV91cmwiCiAgICAgICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgICAgICBhc3NlcnQgLy8gY2hlY2sgdmFsdWUgZXhpc3RzCiAgICAgICAgaXR4bl9maWVsZCBDb25maWdBc3NldFVSTAogICAgICAgIGl0eG5fZmllbGQgTm90ZQogICAgICAgIGl0eG5fc3VibWl0CiAgICAgICAgaXR4biBDcmVhdGVkQXNzZXRJRAogICAgICAgIGJ5dGUgIm5mdF9hc3NldF9pZCIKICAgICAgICBzd2FwCiAgICAgICAgYXBwX2dsb2JhbF9wdXQKICAgICAgICByZXRzdWIKCgovLyBwdXlhcHkuZW5zdXJlX2J1ZGdldChyZXF1aXJlZF9idWRnZXQjMDogdWludDY0LCBmZWVfc291cmNlIzA6IHVpbnQ2NCkgLT4gdm9pZDoKZW5zdXJlX2J1ZGdldDoKICAgICAgICBwcm90byAyIDAKCmVuc3VyZV9idWRnZXRfYmxvY2tAMDoKICAgICAgICBmcmFtZV9kaWcgLTIKICAgICAgICBpbnQgMTAKICAgICAgICArCgplbnN1cmVfYnVkZ2V0X3doaWxlX3RvcEAxOgogICAgICAgIGdsb2JhbCBPcGNvZGVCdWRnZXQKICAgICAgICBmcmFtZV9kaWcgMAogICAgICAgIDwKICAgICAgICBieiBlbnN1cmVfYnVkZ2V0X2FmdGVyX3doaWxlQDcKCmVuc3VyZV9idWRnZXRfd2hpbGVfYm9keUAyOgogICAgICAgIGl0eG5fYmVnaW4KICAgICAgICBpbnQgYXBwbAogICAgICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgICAgICBpbnQgRGVsZXRlQXBwbGljYXRpb24KICAgICAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgICAgIGJ5dGUgMHgwNjgxMDEKICAgICAgICBpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQogICAgICAgIGJ5dGUgMHgwNjgxMDEKICAgICAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCiAgICAgICAgZnJhbWVfZGlnIC0xCiAgICAgICAgc3dpdGNoIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMEAzIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMUA0CiAgICAgICAgYiBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlX25leHRANgoKZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV8wQDM6CiAgICAgICAgaW50IDAKICAgICAgICBpdHhuX2ZpZWxkIEZlZQogICAgICAgIGIgZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV9uZXh0QDYKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMUA0OgogICAgICAgIGdsb2JhbCBNaW5UeG5GZWUKICAgICAgICBpdHhuX2ZpZWxkIEZlZQoKZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV9uZXh0QDY6CiAgICAgICAgaXR4bl9zdWJtaXQKICAgICAgICBiIGVuc3VyZV9idWRnZXRfd2hpbGVfdG9wQDEKCmVuc3VyZV9idWRnZXRfYWZ0ZXJfd2hpbGVANzoKICAgICAgICByZXRzdWIKCgovLyBleGFtcGxlcy52b3Rpbmcudm90aW5nLml0b2EoaSMwOiB1aW50NjQpIC0+IGJ5dGVzOgppdG9hOgogICAgICAgIHByb3RvIDEgMQoKaXRvYV9ibG9ja0AwOgogICAgICAgIGZyYW1lX2RpZyAtMQogICAgICAgIGludCAxMAogICAgICAgIDwKICAgICAgICBieiBpdG9hX2FmdGVyX2lmX2Vsc2VAMgoKaXRvYV9pZl9ib2R5QDE6CiAgICAgICAgZnJhbWVfZGlnIC0xCiAgICAgICAgaW50IDEKICAgICAgICArCiAgICAgICAgYnl0ZSAiMDEyMzQ1Njc4OSIKICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICB1bmNvdmVyIDIKICAgICAgICBzdWJzdHJpbmczCiAgICAgICAgcmV0c3ViCgppdG9hX2FmdGVyX2lmX2Vsc2VAMjoKICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICBpbnQgMTAKICAgICAgICAvCiAgICAgICAgY2FsbHN1YiBpdG9hCiAgICAgICAgZnJhbWVfZGlnIC0xCiAgICAgICAgaW50IDEwCiAgICAgICAgJQogICAgICAgIGR1cAogICAgICAgIGludCAxCiAgICAgICAgKwogICAgICAgIGJ5dGUgIjAxMjM0NTY3ODkiCiAgICAgICAgY292ZXIgMgogICAgICAgIHN1YnN0cmluZzMKICAgICAgICBjb25jYXQKICAgICAgICByZXRzdWIKCgovLyBleGFtcGxlcy52b3Rpbmcudm90aW5nLmdldF92b3RlX2Zyb21fYm94KGluZGV4IzA6IHVpbnQ2NCkgLT4gdWludDY0OgpnZXRfdm90ZV9mcm9tX2JveDoKICAgICAgICBwcm90byAxIDEKCmdldF92b3RlX2Zyb21fYm94X2Jsb2NrQDA6CiAgICAgICAgYnl0ZSAiViIKICAgICAgICBib3hfZ2V0CiAgICAgICAgYXNzZXJ0IC8vIEJveCBub3QgY3JlYXRlZAogICAgICAgIGZyYW1lX2RpZyAtMQogICAgICAgIGludCA4CiAgICAgICAgZXh0cmFjdDMKICAgICAgICBidG9pCiAgICAgICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMudm90aW5nLnZvdGluZy5Wb3RpbmdSb3VuZEFwcC5nZXRfcHJlY29uZGl0aW9ucyhzaWduYXR1cmUjMDogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRfcHJlY29uZGl0aW9uczoKICAgICAgICBwcm90byAxIDEKCmdldF9wcmVjb25kaXRpb25zX2Jsb2NrQDA6CiAgICAgICAgY2FsbHN1YiB2b3Rpbmdfb3BlbgogICAgICAgIGl0b2IKICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICBsZW4KICAgICAgICBkdXAKICAgICAgICBzd2FwCiAgICAgICAgaW50IDIKICAgICAgICA+CiAgICAgICAgYnogZ2V0X3ByZWNvbmRpdGlvbnNfdGVybmFyeV9mYWxzZUAyCgpnZXRfcHJlY29uZGl0aW9uc190ZXJuYXJ5X3RydWVAMToKICAgICAgICBpbnQgMgogICAgICAgIGIgZ2V0X3ByZWNvbmRpdGlvbnNfdGVybmFyeV9tZXJnZUAzCgpnZXRfcHJlY29uZGl0aW9uc190ZXJuYXJ5X2ZhbHNlQDI6CiAgICAgICAgZnJhbWVfZGlnIDEKCmdldF9wcmVjb25kaXRpb25zX3Rlcm5hcnlfbWVyZ2VAMzoKICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICBsZW4KICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICBjb3ZlciAyCiAgICAgICAgc3Vic3RyaW5nMwogICAgICAgIGNhbGxzdWIgYWxsb3dlZF90b192b3RlCiAgICAgICAgaXRvYgogICAgICAgIGNhbGxzdWIgYWxyZWFkeV92b3RlZAogICAgICAgIGl0b2IKICAgICAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICAgICAgaXRvYgogICAgICAgIGZyYW1lX2RpZyAwCiAgICAgICAgdW5jb3ZlciAzCiAgICAgICAgY29uY2F0CiAgICAgICAgdW5jb3ZlciAyCiAgICAgICAgY29uY2F0CiAgICAgICAgc3dhcAogICAgICAgIGNvbmNhdAogICAgICAgIGZyYW1lX2J1cnkgMAogICAgICAgIHJldHN1YgoKCi8vIGV4YW1wbGVzLnZvdGluZy52b3RpbmcuVm90aW5nUm91bmRBcHAudm90aW5nX29wZW4oKSAtPiB1aW50NjQ6CnZvdGluZ19vcGVuOgogICAgICAgIHByb3RvIDAgMQogICAgICAgIGJ5dGUgIiIKCnZvdGluZ19vcGVuX2Jsb2NrQDA6CiAgICAgICAgaW50IDAKICAgICAgICBieXRlICJpc19ib290c3RyYXBwZWQiCiAgICAgICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgICAgICBhc3NlcnQgLy8gY2hlY2sgdmFsdWUgZXhpc3RzCiAgICAgICAgYnogdm90aW5nX29wZW5fYm9vbF9mYWxzZUA1Cgp2b3Rpbmdfb3Blbl9hbmRfY29udGRAMToKICAgICAgICBpbnQgMAogICAgICAgIGJ5dGUgImNsb3NlX3RpbWUiCiAgICAgICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgICAgICBzd2FwCiAgICAgICAgcG9wCiAgICAgICAgYm56IHZvdGluZ19vcGVuX2Jvb2xfZmFsc2VANQoKdm90aW5nX29wZW5fYW5kX2NvbnRkQDI6CiAgICAgICAgaW50IDAKICAgICAgICBieXRlICJzdGFydF90aW1lIgogICAgICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICAgICAgYXNzZXJ0IC8vIGNoZWNrIHZhbHVlIGV4aXN0cwogICAgICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgICAgICBkdXAKICAgICAgICBmcmFtZV9idXJ5IDAKICAgICAgICA8PQogICAgICAgIGJ6IHZvdGluZ19vcGVuX2Jvb2xfZmFsc2VANQoKdm90aW5nX29wZW5fYW5kX2NvbnRkQDM6CiAgICAgICAgaW50IDAKICAgICAgICBieXRlICJlbmRfdGltZSIKICAgICAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgICAgIGFzc2VydCAvLyBjaGVjayB2YWx1ZSBleGlzdHMKICAgICAgICBmcmFtZV9kaWcgMAogICAgICAgID49CiAgICAgICAgYnogdm90aW5nX29wZW5fYm9vbF9mYWxzZUA1Cgp2b3Rpbmdfb3Blbl9ib29sX3RydWVANDoKICAgICAgICBpbnQgMQogICAgICAgIGIgdm90aW5nX29wZW5fYm9vbF9tZXJnZUA2Cgp2b3Rpbmdfb3Blbl9ib29sX2ZhbHNlQDU6CiAgICAgICAgaW50IDAKCnZvdGluZ19vcGVuX2Jvb2xfbWVyZ2VANjoKICAgICAgICBzd2FwCiAgICAgICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMudm90aW5nLnZvdGluZy5Wb3RpbmdSb3VuZEFwcC5hbGxvd2VkX3RvX3ZvdGUoc2lnbmF0dXJlIzA6IGJ5dGVzKSAtPiB1aW50NjQ6CmFsbG93ZWRfdG9fdm90ZToKICAgICAgICBwcm90byAxIDEKCmFsbG93ZWRfdG9fdm90ZV9ibG9ja0AwOgogICAgICAgIGludCAyMDAwCiAgICAgICAgaW50IDIKICAgICAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgICAgICB0eG4gU2VuZGVyCiAgICAgICAgaW50IDAKICAgICAgICBieXRlICJzbmFwc2hvdF9wdWJsaWNfa2V5IgogICAgICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICAgICAgYXNzZXJ0IC8vIGNoZWNrIHZhbHVlIGV4aXN0cwogICAgICAgIHN3YXAKICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICB1bmNvdmVyIDIKICAgICAgICBlZDI1NTE5dmVyaWZ5X2JhcmUKICAgICAgICByZXRzdWIKCgovLyBleGFtcGxlcy52b3Rpbmcudm90aW5nLlZvdGluZ1JvdW5kQXBwLmFscmVhZHlfdm90ZWQoKSAtPiB1aW50NjQ6CmFscmVhZHlfdm90ZWQ6CiAgICAgICAgcHJvdG8gMCAxCgphbHJlYWR5X3ZvdGVkX2Jsb2NrQDA6CiAgICAgICAgdHhuIFNlbmRlcgogICAgICAgIGJveF9nZXQKICAgICAgICBzd2FwCiAgICAgICAgcG9wCiAgICAgICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMudm90aW5nLnZvdGluZy5Wb3RpbmdSb3VuZEFwcC52b3RlKGZ1bmRfbWluX2JhbF9yZXEjMDogdWludDY0LCBzaWduYXR1cmUjMDogYnl0ZXMsIGFuc3dlcl9pZHMjMDogYnl0ZXMpIC0+IHZvaWQ6CnZvdGU6CiAgICAgICAgcHJvdG8gMyAwCgp2b3RlX2Jsb2NrQDA6CiAgICAgICAgaW50IDc3MDAKICAgICAgICBpbnQgMAogICAgICAgIGNhbGxzdWIgZW5zdXJlX2J1ZGdldAogICAgICAgIGZyYW1lX2RpZyAtMgogICAgICAgIGNhbGxzdWIgYWxsb3dlZF90b192b3RlCiAgICAgICAgYXNzZXJ0IC8vIE5vdCBhbGxvd2VkIHRvIHZvdGUKICAgICAgICBjYWxsc3ViIHZvdGluZ19vcGVuCiAgICAgICAgYXNzZXJ0IC8vIFZvdGluZyBub3Qgb3BlbgogICAgICAgIGNhbGxzdWIgYWxyZWFkeV92b3RlZAogICAgICAgICEKICAgICAgICBhc3NlcnQgLy8gQWxyZWFkeSB2b3RlZAogICAgICAgIGludCAwCiAgICAgICAgYnl0ZSAib3B0aW9uX2NvdW50cyIKICAgICAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgICAgIGFzc2VydCAvLyBjaGVjayB2YWx1ZSBleGlzdHMKICAgICAgICBpbnQgMAogICAgICAgIGV4dHJhY3RfdWludDE2CiAgICAgICAgZHVwCiAgICAgICAgc3dhcAogICAgICAgIGZyYW1lX2RpZyAtMQogICAgICAgIGludCAwCiAgICAgICAgZXh0cmFjdF91aW50MTYKICAgICAgICA9PQogICAgICAgIGFzc2VydCAvLyBOdW1iZXIgb2YgYW5zd2VycyBpbmNvcnJlY3QKICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICBpbnQgMAogICAgICAgIGV4dHJhY3RfdWludDE2CiAgICAgICAgaW50IDM0CiAgICAgICAgKwogICAgICAgIGludCA0MDAKICAgICAgICAqCiAgICAgICAgaW50IDI1MDAKICAgICAgICArCiAgICAgICAgZnJhbWVfZGlnIC0zCiAgICAgICAgZ3R4bnMgUmVjZWl2ZXIKICAgICAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgICAgID09CiAgICAgICAgYXNzZXJ0IC8vIFBheW1lbnQgbXVzdCBiZSB0byBhcHAgYWRkcmVzcwogICAgICAgIGR1cAogICAgICAgIGl0b2IKICAgICAgICBsb2cKICAgICAgICBmcmFtZV9kaWcgLTMKICAgICAgICBndHhucyBBbW91bnQKICAgICAgICA9PQogICAgICAgIGFzc2VydCAvLyBQYXltZW50IG11c3QgYmUgdGhlIGV4YWN0IG1pbiBiYWxhbmNlCiAgICAgICAgaW50IDAKICAgICAgICBpbnQgMAoKdm90ZV9mb3JfaGVhZGVyQDE6CiAgICAgICAgZnJhbWVfZGlnIDIKICAgICAgICBmcmFtZV9kaWcgMAogICAgICAgIDwKICAgICAgICBieiB2b3RlX2FmdGVyX2ZvckA1Cgp2b3RlX2Zvcl9ib2R5QDI6CiAgICAgICAgZnJhbWVfZGlnIC0xCiAgICAgICAgaW50IDAKICAgICAgICBleHRyYWN0X3VpbnQxNgogICAgICAgIGZyYW1lX2RpZyAyCiAgICAgICAgZHVwCiAgICAgICAgY292ZXIgMgogICAgICAgID4KICAgICAgICBhc3NlcnQgLy8gSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICBleHRyYWN0IDIgMAogICAgICAgIGRpZyAxCiAgICAgICAgaW50IDEKICAgICAgICBleHRyYWN0MwogICAgICAgIGJ0b2kKICAgICAgICBzd2FwCiAgICAgICAgaW50IDAKICAgICAgICBieXRlICJvcHRpb25fY291bnRzIgogICAgICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICAgICAgYXNzZXJ0IC8vIGNoZWNrIHZhbHVlIGV4aXN0cwogICAgICAgIGR1cAogICAgICAgIGludCAwCiAgICAgICAgZXh0cmFjdF91aW50MTYKICAgICAgICBkaWcgMgogICAgICAgID4KICAgICAgICBhc3NlcnQgLy8gSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgICAgICBleHRyYWN0IDIgMAogICAgICAgIGRpZyAxCiAgICAgICAgaW50IDEKICAgICAgICBleHRyYWN0MwogICAgICAgIGJ0b2kKICAgICAgICBkaWcgMgogICAgICAgIGRpZyAxCiAgICAgICAgPAogICAgICAgIGFzc2VydCAvLyBBbnN3ZXIgb3B0aW9uIGluZGV4IGludmFsaWQKICAgICAgICBmcmFtZV9kaWcgMQogICAgICAgIGR1cAogICAgICAgIHVuY292ZXIgNAogICAgICAgICsKICAgICAgICBjYWxsc3ViIGluY3JlbWVudF92b3RlX2luX2JveAogICAgICAgICsKICAgICAgICBmcmFtZV9idXJ5IDEKICAgICAgICB0eG4gU2VuZGVyCiAgICAgICAgZnJhbWVfZGlnIC0xCiAgICAgICAgYm94X3B1dAogICAgICAgIGludCAwCiAgICAgICAgYnl0ZSAidm90ZXJfY291bnQiCiAgICAgICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgICAgICBhc3NlcnQgLy8gY2hlY2sgdmFsdWUgZXhpc3RzCiAgICAgICAgaW50IDEKICAgICAgICArCiAgICAgICAgYnl0ZSAidm90ZXJfY291bnQiCiAgICAgICAgc3dhcAogICAgICAgIGFwcF9nbG9iYWxfcHV0CiAgICAgICAgaW50IDEKICAgICAgICArCiAgICAgICAgZnJhbWVfYnVyeSAyCiAgICAgICAgYiB2b3RlX2Zvcl9oZWFkZXJAMQoKdm90ZV9hZnRlcl9mb3JANToKICAgICAgICByZXRzdWIKCgovLyBleGFtcGxlcy52b3Rpbmcudm90aW5nLmluY3JlbWVudF92b3RlX2luX2JveChpbmRleCMwOiB1aW50NjQpIC0+IHZvaWQ6CmluY3JlbWVudF92b3RlX2luX2JveDoKICAgICAgICBwcm90byAxIDAKCmluY3JlbWVudF92b3RlX2luX2JveF9ibG9ja0AwOgogICAgICAgIGJ5dGUgIlYiCiAgICAgICAgYm94X2dldAogICAgICAgIGFzc2VydCAvLyBCb3ggbm90IGNyZWF0ZWQKICAgICAgICBmcmFtZV9kaWcgLTEKICAgICAgICBpbnQgOAogICAgICAgIGV4dHJhY3QzCiAgICAgICAgYnRvaQogICAgICAgIGludCAxCiAgICAgICAgKwogICAgICAgIGl0b2IKICAgICAgICBieXRlICJWIgogICAgICAgIGZyYW1lX2RpZyAtMQogICAgICAgIHVuY292ZXIgMgogICAgICAgIGJveF9yZXBsYWNlCiAgICAgICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMudm90aW5nLnZvdGluZy5Wb3RpbmdSb3VuZEFwcC5fX2luaXRfXygpIC0+IHZvaWQ6Cl9faW5pdF9fOgogICAgICAgIHByb3RvIDAgMAoKX19pbml0X19fYmxvY2tAMDoKICAgICAgICBieXRlICJpc19ib290c3RyYXBwZWQiCiAgICAgICAgaW50IDAKICAgICAgICBhcHBfZ2xvYmFsX3B1dAogICAgICAgIGJ5dGUgInZvdGVyX2NvdW50IgogICAgICAgIGludCAwCiAgICAgICAgYXBwX2dsb2JhbF9wdXQKICAgICAgICByZXRzdWIKCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKCi8vIGV4YW1wbGVzLnZvdGluZy52b3RpbmcuVm90aW5nUm91bmRBcHAuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbl9ibG9ja0AwOgogICAgICAgIGludCAxCiAgICAgICAgcmV0dXJuCgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 5,
            "num_uints": 8
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "close_time": {
                    "type": "uint64",
                    "key": "close_time"
                },
                "end_time": {
                    "type": "uint64",
                    "key": "end_time"
                },
                "is_bootstrapped": {
                    "type": "uint64",
                    "key": "is_bootstrapped"
                },
                "metadata_ipfs_cid": {
                    "type": "bytes",
                    "key": "metadata_ipfs_cid"
                },
                "nft_asset_id": {
                    "type": "uint64",
                    "key": "nft_asset_id"
                },
                "nft_image_url": {
                    "type": "bytes",
                    "key": "nft_image_url"
                },
                "option_counts": {
                    "type": "bytes",
                    "key": "option_counts"
                },
                "quorum": {
                    "type": "uint64",
                    "key": "quorum"
                },
                "snapshot_public_key": {
                    "type": "bytes",
                    "key": "snapshot_public_key"
                },
                "start_time": {
                    "type": "uint64",
                    "key": "start_time"
                },
                "total_options": {
                    "type": "uint64",
                    "key": "total_options"
                },
                "vote_id": {
                    "type": "bytes",
                    "key": "vote_id"
                },
                "voter_count": {
                    "type": "uint64",
                    "key": "voter_count"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "VotingRoundApp",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "string",
                        "name": "vote_id"
                    },
                    {
                        "type": "byte[]",
                        "name": "snapshot_public_key"
                    },
                    {
                        "type": "string",
                        "name": "metadata_ipfs_cid"
                    },
                    {
                        "type": "uint64",
                        "name": "start_time"
                    },
                    {
                        "type": "uint64",
                        "name": "end_time"
                    },
                    {
                        "type": "uint8[]",
                        "name": "option_counts"
                    },
                    {
                        "type": "uint64",
                        "name": "quorum"
                    },
                    {
                        "type": "string",
                        "name": "nft_image_url"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "pay",
                        "name": "fund_min_bal_req"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "close",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_preconditions",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "signature"
                    }
                ],
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "vote",
                "args": [
                    {
                        "type": "pay",
                        "name": "fund_min_bal_req"
                    },
                    {
                        "type": "byte[]",
                        "name": "signature"
                    },
                    {
                        "type": "uint8[]",
                        "name": "answer_ids"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}