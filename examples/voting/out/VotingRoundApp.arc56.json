{
    "name": "VotingRoundApp",
    "structs": {
        "VotingPreconditions": [
            {
                "name": "is_voting_open",
                "type": "uint64"
            },
            {
                "name": "is_allowed_to_vote",
                "type": "uint64"
            },
            {
                "name": "has_already_voted",
                "type": "uint64"
            },
            {
                "name": "current_time",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "string",
                    "name": "vote_id"
                },
                {
                    "type": "byte[]",
                    "name": "snapshot_public_key"
                },
                {
                    "type": "string",
                    "name": "metadata_ipfs_cid"
                },
                {
                    "type": "uint64",
                    "name": "start_time"
                },
                {
                    "type": "uint64",
                    "name": "end_time"
                },
                {
                    "type": "uint8[]",
                    "name": "option_counts"
                },
                {
                    "type": "uint64",
                    "name": "quorum"
                },
                {
                    "type": "string",
                    "name": "nft_image_url"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bootstrap",
            "args": [
                {
                    "type": "pay",
                    "name": "fund_min_bal_req"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "close",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_preconditions",
            "args": [
                {
                    "type": "byte[]",
                    "name": "signature"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)",
                "struct": "VotingPreconditions"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote",
            "args": [
                {
                    "type": "pay",
                    "name": "fund_min_bal_req"
                },
                {
                    "type": "byte[]",
                    "name": "signature"
                },
                {
                    "type": "uint8[]",
                    "name": "answer_ids"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 8,
                "bytes": 5
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "is_bootstrapped": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aXNfYm9vdHN0cmFwcGVk"
                },
                "voter_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dm90ZXJfY291bnQ="
                },
                "close_time": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2xvc2VfdGltZQ=="
                },
                "vote_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "dm90ZV9pZA=="
                },
                "snapshot_public_key": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "c25hcHNob3RfcHVibGljX2tleQ=="
                },
                "metadata_ipfs_cid": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bWV0YWRhdGFfaXBmc19jaWQ="
                },
                "start_time": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3RhcnRfdGltZQ=="
                },
                "end_time": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZW5kX3RpbWU="
                },
                "quorum": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVt"
                },
                "nft_image_url": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bmZ0X2ltYWdlX3VybA=="
                },
                "nft_asset_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmZ0X2Fzc2V0X2lk"
                },
                "option_counts": {
                    "keyType": "AVMString",
                    "valueType": "uint8[]",
                    "key": "b3B0aW9uX2NvdW50cw=="
                },
                "total_options": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfb3B0aW9ucw=="
                }
            },
            "local": {},
            "box": {
                "tally_box": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Vg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "votes_by_account": {
                    "keyType": "AVMBytes",
                    "valueType": "uint8[]",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        602
                    ],
                    "errorMessage": "Already closed"
                },
                {
                    "pc": [
                        1274
                    ],
                    "errorMessage": "Already voted"
                },
                {
                    "pc": [
                        1356
                    ],
                    "errorMessage": "Answer option index invalid"
                },
                {
                    "pc": [
                        469
                    ],
                    "errorMessage": "Can't have more than 112 questions"
                },
                {
                    "pc": [
                        512
                    ],
                    "errorMessage": "Can't have more than 128 vote options"
                },
                {
                    "pc": [
                        408
                    ],
                    "errorMessage": "End time should be after start time"
                },
                {
                    "pc": [
                        414
                    ],
                    "errorMessage": "End time should be in the future"
                },
                {
                    "pc": [
                        491,
                        859,
                        1340,
                        1352
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        534
                    ],
                    "errorMessage": "Must not be already bootstrapped"
                },
                {
                    "pc": [
                        1265
                    ],
                    "errorMessage": "Not allowed to vote"
                },
                {
                    "pc": [
                        1290
                    ],
                    "errorMessage": "Number of answers incorrect"
                },
                {
                    "pc": [
                        257,
                        309,
                        331,
                        343,
                        370
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        571
                    ],
                    "errorMessage": "Payment must be for the exact min balance requirement"
                },
                {
                    "pc": [
                        1318
                    ],
                    "errorMessage": "Payment must be the exact min balance"
                },
                {
                    "pc": [
                        545,
                        1309
                    ],
                    "errorMessage": "Payment must be to app address"
                },
                {
                    "pc": [
                        1269
                    ],
                    "errorMessage": "Voting not open"
                },
                {
                    "pc": [
                        261
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        312,
                        334,
                        346,
                        373
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1205
                    ],
                    "errorMessage": "check self.end_time exists"
                },
                {
                    "pc": [
                        532,
                        1174
                    ],
                    "errorMessage": "check self.is_bootstrapped exists"
                },
                {
                    "pc": [
                        747
                    ],
                    "errorMessage": "check self.metadata_ipfs_cid exists"
                },
                {
                    "pc": [
                        1034
                    ],
                    "errorMessage": "check self.nft_image_url exists"
                },
                {
                    "pc": [
                        836,
                        1278,
                        1345
                    ],
                    "errorMessage": "check self.option_counts exists"
                },
                {
                    "pc": [
                        783
                    ],
                    "errorMessage": "check self.quorum exists"
                },
                {
                    "pc": [
                        1235
                    ],
                    "errorMessage": "check self.snapshot_public_key exists"
                },
                {
                    "pc": [
                        1191
                    ],
                    "errorMessage": "check self.start_time exists"
                },
                {
                    "pc": [
                        550
                    ],
                    "errorMessage": "check self.total_options exists"
                },
                {
                    "pc": [
                        611,
                        763,
                        1011
                    ],
                    "errorMessage": "check self.vote_id exists"
                },
                {
                    "pc": [
                        808,
                        1380
                    ],
                    "errorMessage": "check self.voter_count exists"
                },
                {
                    "pc": [
                        465
                    ],
                    "errorMessage": "option_counts should be non-empty"
                },
                {
                    "pc": [
                        322,
                        383
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpleGFtcGxlcy52b3Rpbmcudm90aW5nLlZvdGluZ1JvdW5kQXBwLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEKCCYPD2lzX2Jvb3RzdHJhcHBlZAt2b3Rlcl9jb3VudAd2b3RlX2lkDW9wdGlvbl9jb3VudHMBVgpjbG9zZV90aW1lE3NuYXBzaG90X3B1YmxpY19rZXkRbWV0YWRhdGFfaXBmc19jaWQKc3RhcnRfdGltZQhlbmRfdGltZQZxdW9ydW0NbmZ0X2ltYWdlX3VybA10b3RhbF9vcHRpb25zCjAxMjM0NTY3ODkDBoEBMRhAAAOIAASIAAtDigAAKCJnKSJniYoAATEbQQC8ggUErol/awSk6NFkBJZWBHoEvLFYlgSEpTxuNhoAjgUAAgA2AEwAWABzIokxGRREMRgURDYaAVcCADYaAlcCADYaA1cCADYaBBc2GgUXNhoGNhoHFzYaCFcCAIgAYCOJMRkURDEYRDEWIwlJOBAjEkSIAMgjiTEZFEQxGESIAPAjiTEZFEQxGEQ2GgFXAgCIAwuABBUffHVMULAjiTEZFEQxGEQxFiMJSTgQIxJENhoBVwIANhoCiANWI4kiiYoIAIv7i/wMRIv8MgcPRCqL+GcnBov5ZycHi/pnJwiL+2cnCYv8ZycKi/5nJwuL/2eL/YgAAkiJigEBi/8iWUcCRIFwDkQiSYsCiwAMQQAZi/9XAgCLAklOAiNYF4sBCIwBIwiMAkL/34sBSYGAAQ5EK4v/ZycMTGeL/4wAiYoBACIoZUQURCgjZ4v/OAcyChJEIicMZUQlC0mBkAMLgfy4DAhJFrCL/zgIEkQnBEy5RImKAAAiSYAARwKBoJwBIogDMiInBWVFARREJwUyB2ciKmVEgFh7InN0YW5kYXJkIjoiYXJjNjkiLCJkZXNjcmlwdGlvbiI6IlRoaXMgaXMgYSB2b3RpbmcgcmVzdWx0IE5GVCBmb3Igdm90aW5nIHJvdW5kIHdpdGggSUQgTFCAJC4iLCJwcm9wZXJ0aWVzIjp7Im1ldGFkYXRhIjoiaXBmczovL1AiJwdlRFCACCIsImlkIjoiUCIqZURQgAsiLCJxdW9ydW0iOlAiJwplRIgBLlCADiwidm90ZXJDb3VudCI6UCIpZUSIARVQgAwsInRhbGxpZXMiOltQIkkrZUxJTwJEIlkiiwmLCAxBAJWLB1cCAIsJSU4CI1iMAYsFjABBAAiLBYABLFCMAIsASYwFiwGAAQCliwaMAkyMAEEAUosFgAFbUIwFiwEXjAQijAOLA4sEDEEALosFjACLA0EACIsFgAEsUIwAiwCLBklOAogAr4gAiVCMBSMIjAaLAyMIjANC/8qLBYABXVCLBowCjACLAowGiwCMBYsJIwiMCUL/Y4sFgANdfX1QsTIAIiplRIAOW1ZPVEUgUkVTVUxUXSBMUCInC2VETwOyBbIngAhWT1RFUlNMVLIlsiYisiQisiMjsiKBA7IQsgGzgAxuZnRfYXNzZXRfaWS0PGeJigEBi/8kDEEABycNi/8jWImL/yQKiP/oi/8kGCcNTCNYUImKAQEnBIv/JboXiYoBAYgAGRaL/4gASBaIAFoWMgcWTwNPA1BPAlBMUImKAAGAACIoZURBACYiJwVlRQFAAB0iJwhlRDIHSYwADkEADyInCWVEiwAPQQAEI0IAASJMiYoBAYHQDyKIALgxACInBmVEi/9MhImKAAExAL1FAYmKAwCBlDwiiACZi/6I/9JEiP+ZRIj/4BREIitlRCJZSYv/IllJTwISRIEiCIGQAwuBxBMIi/04BzIKEkRJFrCL/TgIEkQiSYsCiwAMQQBAi/9XAgCLAklOAiNYFyIrZURXAgBLAiNYF0oMRIsBSU8DCIgAHAiMATEASbxIi/+/IillRCMIKUxnIwiMAkL/uImKAQCL/4j+6iMIFicEi/9PAruJigIAi/4kCIsAMgwNQQAqsYEGshCBBbIZJw6yHicOsh+L/40CAAMACUIACiKyAUIABDIAsgGzQv/OiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}