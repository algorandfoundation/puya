{
    "name": "VotingRoundApp",
    "structs": {
        "VotingPreconditions": [
            {
                "name": "is_voting_open",
                "type": "uint64"
            },
            {
                "name": "is_allowed_to_vote",
                "type": "uint64"
            },
            {
                "name": "has_already_voted",
                "type": "uint64"
            },
            {
                "name": "current_time",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "string",
                    "name": "vote_id"
                },
                {
                    "type": "byte[]",
                    "name": "snapshot_public_key"
                },
                {
                    "type": "string",
                    "name": "metadata_ipfs_cid"
                },
                {
                    "type": "uint64",
                    "name": "start_time"
                },
                {
                    "type": "uint64",
                    "name": "end_time"
                },
                {
                    "type": "uint8[]",
                    "name": "option_counts"
                },
                {
                    "type": "uint64",
                    "name": "quorum"
                },
                {
                    "type": "string",
                    "name": "nft_image_url"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bootstrap",
            "args": [
                {
                    "type": "pay",
                    "name": "fund_min_bal_req"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "close",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_preconditions",
            "args": [
                {
                    "type": "byte[]",
                    "name": "signature"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)",
                "struct": "VotingPreconditions"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote",
            "args": [
                {
                    "type": "pay",
                    "name": "fund_min_bal_req"
                },
                {
                    "type": "byte[]",
                    "name": "signature"
                },
                {
                    "type": "uint8[]",
                    "name": "answer_ids"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 8,
                "bytes": 5
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "is_bootstrapped": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aXNfYm9vdHN0cmFwcGVk"
                },
                "voter_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dm90ZXJfY291bnQ="
                },
                "close_time": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2xvc2VfdGltZQ=="
                },
                "vote_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "dm90ZV9pZA=="
                },
                "snapshot_public_key": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "c25hcHNob3RfcHVibGljX2tleQ=="
                },
                "metadata_ipfs_cid": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bWV0YWRhdGFfaXBmc19jaWQ="
                },
                "start_time": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3RhcnRfdGltZQ=="
                },
                "end_time": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZW5kX3RpbWU="
                },
                "quorum": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVt"
                },
                "nft_image_url": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bmZ0X2ltYWdlX3VybA=="
                },
                "nft_asset_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmZ0X2Fzc2V0X2lk"
                },
                "option_counts": {
                    "keyType": "AVMString",
                    "valueType": "uint8[]",
                    "key": "b3B0aW9uX2NvdW50cw=="
                },
                "total_options": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfb3B0aW9ucw=="
                }
            },
            "local": {},
            "box": {
                "tally_box": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Vg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "votes_by_account": {
                    "keyType": "address",
                    "valueType": "uint8[]",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        663
                    ],
                    "errorMessage": "Already closed"
                },
                {
                    "pc": [
                        1215
                    ],
                    "errorMessage": "Already voted"
                },
                {
                    "pc": [
                        1293
                    ],
                    "errorMessage": "Answer option index invalid"
                },
                {
                    "pc": [
                        536
                    ],
                    "errorMessage": "Can't have more than 112 questions"
                },
                {
                    "pc": [
                        577
                    ],
                    "errorMessage": "Can't have more than 128 vote options"
                },
                {
                    "pc": [
                        484
                    ],
                    "errorMessage": "End time should be after start time"
                },
                {
                    "pc": [
                        490
                    ],
                    "errorMessage": "End time should be in the future"
                },
                {
                    "pc": [
                        595
                    ],
                    "errorMessage": "Must not be already bootstrapped"
                },
                {
                    "pc": [
                        1204
                    ],
                    "errorMessage": "Not allowed to vote"
                },
                {
                    "pc": [
                        1231
                    ],
                    "errorMessage": "Number of answers incorrect"
                },
                {
                    "pc": [
                        242,
                        273,
                        300,
                        312,
                        334
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        632
                    ],
                    "errorMessage": "Payment must be for the exact min balance requirement"
                },
                {
                    "pc": [
                        1259
                    ],
                    "errorMessage": "Payment must be the exact min balance"
                },
                {
                    "pc": [
                        606,
                        1250
                    ],
                    "errorMessage": "Payment must be to app address"
                },
                {
                    "pc": [
                        1208
                    ],
                    "errorMessage": "Voting not open"
                },
                {
                    "pc": [
                        338
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        245,
                        276,
                        303,
                        315
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1382
                    ],
                    "errorMessage": "check self.end_time exists"
                },
                {
                    "pc": [
                        593,
                        1351
                    ],
                    "errorMessage": "check self.is_bootstrapped exists"
                },
                {
                    "pc": [
                        810
                    ],
                    "errorMessage": "check self.metadata_ipfs_cid exists"
                },
                {
                    "pc": [
                        1101
                    ],
                    "errorMessage": "check self.nft_image_url exists"
                },
                {
                    "pc": [
                        896,
                        1219,
                        1284
                    ],
                    "errorMessage": "check self.option_counts exists"
                },
                {
                    "pc": [
                        843
                    ],
                    "errorMessage": "check self.quorum exists"
                },
                {
                    "pc": [
                        1412
                    ],
                    "errorMessage": "check self.snapshot_public_key exists"
                },
                {
                    "pc": [
                        1368
                    ],
                    "errorMessage": "check self.start_time exists"
                },
                {
                    "pc": [
                        611
                    ],
                    "errorMessage": "check self.total_options exists"
                },
                {
                    "pc": [
                        673,
                        1078
                    ],
                    "errorMessage": "check self.vote_id exists"
                },
                {
                    "pc": [
                        868,
                        1329
                    ],
                    "errorMessage": "check self.voter_count exists"
                },
                {
                    "pc": [
                        922
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        532
                    ],
                    "errorMessage": "option_counts should be non-empty"
                },
                {
                    "pc": [
                        255,
                        325
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEKCCYPD2lzX2Jvb3RzdHJhcHBlZAt2b3Rlcl9jb3VudA1vcHRpb25fY291bnRzAVYHdm90ZV9pZApjbG9zZV90aW1lAwaBAQowMTIzNDU2Nzg5E3NuYXBzaG90X3B1YmxpY19rZXkRbWV0YWRhdGFfaXBmc19jaWQKc3RhcnRfdGltZQhlbmRfdGltZQZxdW9ydW0NbmZ0X2ltYWdlX3VybA10b3RhbF9vcHRpb25zMRhAAAYoImcpImcxG0EAKoIFBK6Jf2sEpOjRZASWVgR6BLyxWJYEhKU8bjYaAI4FAF0ARwA7ACAAAQAxGRREMRhEMRYjCUk4ECMSRDYaAVcCADYaAogDmSNDMRkURDEYRDYaAVcCAIgDZoAEFR98dUxQsCNDMRkURDEYRIgBSyNDMRkURDEYRDEWIwlJOBAjEkSIAQIjQzEZFEQxGBRENhoBVwIANhoCVwIANhoDVwIANhoEFzYaBRc2GgY2GgcXNhoIVwIAiABfI0OKAgCL/iQIiwAyDA1BACqxgQayEIEFshknBrIeJwayH4v/jQIACwAEs0L/2zIAsgFC//UisgFC/++JigEBi/8kDEEABycHi/8jWImL/yQKiP/oi/8kGCcHTCNYUImKCACL+4v8DESL/DIHD0QnBIv4ZycIi/lnJwmL+mcnCov7ZycLi/xnJwyL/mcnDYv/Z4v9IllHAkSBcA5EIkmLAosADEEAF4v9VwIAiwJJTgJViwEIjAEjCIwCQv/hiwFJgYABDkQqi/1nJw5MZ4mKAQAiKGVEFEQoI2eL/zgHMgoSRCInDmVEJQtJgZADC4H8uAwISRawi/84CBJEK0y5RImKAAAiRwKAAEcCgaCcASKI/u8iJwVlRQEURCcFMgdnIicEZUSAWHsic3RhbmRhcmQiOiJhcmM2OSIsImRlc2NyaXB0aW9uIjoiVGhpcyBpcyBhIHZvdGluZyByZXN1bHQgTkZUIGZvciB2b3Rpbmcgcm91bmQgd2l0aCBJRCBLAVCAJC4iLCJwcm9wZXJ0aWVzIjp7Im1ldGFkYXRhIjoiaXBmczovL1AiJwllRFCACCIsImlkIjoiUExQgAsiLCJxdW9ydW0iOlAiJwxlRIj+alCADiwidm90ZXJDb3VudCI6UCIpZUSI/lFQgAwsInRhbGxpZXMiOltQIkkqZUxJTwJEIlkiiwqLCQxBAJuLCFcCAEmMAIsKSU4CI1iMAosGjAFBAAiLBoABLFCMAYsBSYwGiwKAAQCliweMA0yMAUEAVYsGgAFbUIwGiwCLClWMBSKMBIsEiwUMQQAviwaMAYsEQQAIiwaAASxQjAGLASuLB0lOAyW6F4j9v1CMBiMIjAeLBCMIjARC/8mLBoABXVCLB4wDjAGLA4wHiwGMBosKIwiMCkL/XYsGgANdfX1QsTIAIicEZUSADltWT1RFIFJFU1VMVF0gTFAiJw1lRE8DsgWyJ4AIVk9URVJTTFSyJbImIrIkIrIjI7IigQOyELIBs4AMbmZ0X2Fzc2V0X2lktDxniYoBAYgAtRaL/4gA5BYxAL1FARYyBxZPA08DUE8CUExQiYoDAIGUPCKI/NCL/ogAwESIAIdEMQC9RQEURCIqZUQiWUmL/yJZSU8CEkSBIgiBkAMLgcQTCIv9OAcyChJESRawi/04CBJEIkmLAosADEEASIv/VwIAiwJJTgJVIiplRFcCAEsCVUoMRIsBSU4CTwMIK0sBJboXIwgWK04CuwiMATEASbxIi/+/IillRCMIKUxnIwiMAkL/sImKAAGAACIoZURBACUiJwVlRQFAABwiJwplRDIHSYwADkEADiInC2VEiwAPQQADI0yJIkL/+ooBAYHQDyKI/AExACInCGVEi/9MhIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}