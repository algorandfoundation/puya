{
    "name": "VotingRoundApp",
    "structs": {
        "VotingPreconditions": [
            {
                "name": "is_voting_open",
                "type": "uint64"
            },
            {
                "name": "is_allowed_to_vote",
                "type": "uint64"
            },
            {
                "name": "has_already_voted",
                "type": "uint64"
            },
            {
                "name": "current_time",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "string",
                    "name": "vote_id"
                },
                {
                    "type": "byte[]",
                    "name": "snapshot_public_key"
                },
                {
                    "type": "string",
                    "name": "metadata_ipfs_cid"
                },
                {
                    "type": "uint64",
                    "name": "start_time"
                },
                {
                    "type": "uint64",
                    "name": "end_time"
                },
                {
                    "type": "uint8[]",
                    "name": "option_counts"
                },
                {
                    "type": "uint64",
                    "name": "quorum"
                },
                {
                    "type": "string",
                    "name": "nft_image_url"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bootstrap",
            "args": [
                {
                    "type": "pay",
                    "name": "fund_min_bal_req"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "close",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_preconditions",
            "args": [
                {
                    "type": "byte[]",
                    "name": "signature"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)",
                "struct": "VotingPreconditions"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote",
            "args": [
                {
                    "type": "pay",
                    "name": "fund_min_bal_req"
                },
                {
                    "type": "byte[]",
                    "name": "signature"
                },
                {
                    "type": "uint8[]",
                    "name": "answer_ids"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 8,
                "bytes": 5
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "is_bootstrapped": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aXNfYm9vdHN0cmFwcGVk"
                },
                "voter_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dm90ZXJfY291bnQ="
                },
                "close_time": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2xvc2VfdGltZQ=="
                },
                "vote_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "dm90ZV9pZA=="
                },
                "snapshot_public_key": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "c25hcHNob3RfcHVibGljX2tleQ=="
                },
                "metadata_ipfs_cid": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bWV0YWRhdGFfaXBmc19jaWQ="
                },
                "start_time": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3RhcnRfdGltZQ=="
                },
                "end_time": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZW5kX3RpbWU="
                },
                "quorum": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cXVvcnVt"
                },
                "nft_image_url": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bmZ0X2ltYWdlX3VybA=="
                },
                "nft_asset_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmZ0X2Fzc2V0X2lk"
                },
                "option_counts": {
                    "keyType": "AVMString",
                    "valueType": "uint8[]",
                    "key": "b3B0aW9uX2NvdW50cw=="
                },
                "total_options": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfb3B0aW9ucw=="
                }
            },
            "local": {},
            "box": {
                "tally_box": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Vg=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "votes_by_account": {
                    "keyType": "address",
                    "valueType": "uint8[]",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        636
                    ],
                    "errorMessage": "Already closed"
                },
                {
                    "pc": [
                        1217
                    ],
                    "errorMessage": "Already voted"
                },
                {
                    "pc": [
                        1291
                    ],
                    "errorMessage": "Answer option index invalid"
                },
                {
                    "pc": [
                        509
                    ],
                    "errorMessage": "Can't have more than 112 questions"
                },
                {
                    "pc": [
                        549
                    ],
                    "errorMessage": "Can't have more than 128 vote options"
                },
                {
                    "pc": [
                        463
                    ],
                    "errorMessage": "End time should be after start time"
                },
                {
                    "pc": [
                        469
                    ],
                    "errorMessage": "End time should be in the future"
                },
                {
                    "pc": [
                        575
                    ],
                    "errorMessage": "Must not be already bootstrapped"
                },
                {
                    "pc": [
                        1206
                    ],
                    "errorMessage": "Not allowed to vote"
                },
                {
                    "pc": [
                        1230
                    ],
                    "errorMessage": "Number of answers incorrect"
                },
                {
                    "pc": [
                        194
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        611
                    ],
                    "errorMessage": "Payment must be for the exact min balance requirement"
                },
                {
                    "pc": [
                        1257
                    ],
                    "errorMessage": "Payment must be the exact min balance"
                },
                {
                    "pc": [
                        585,
                        1249
                    ],
                    "errorMessage": "Payment must be to app address"
                },
                {
                    "pc": [
                        1210
                    ],
                    "errorMessage": "Voting not open"
                },
                {
                    "pc": [
                        1381
                    ],
                    "errorMessage": "check self.end_time exists"
                },
                {
                    "pc": [
                        573,
                        1350
                    ],
                    "errorMessage": "check self.is_bootstrapped exists"
                },
                {
                    "pc": [
                        783
                    ],
                    "errorMessage": "check self.metadata_ipfs_cid exists"
                },
                {
                    "pc": [
                        1041
                    ],
                    "errorMessage": "check self.nft_image_url exists"
                },
                {
                    "pc": [
                        869,
                        1221,
                        1282
                    ],
                    "errorMessage": "check self.option_counts exists"
                },
                {
                    "pc": [
                        816
                    ],
                    "errorMessage": "check self.quorum exists"
                },
                {
                    "pc": [
                        1411
                    ],
                    "errorMessage": "check self.snapshot_public_key exists"
                },
                {
                    "pc": [
                        1367
                    ],
                    "errorMessage": "check self.start_time exists"
                },
                {
                    "pc": [
                        590
                    ],
                    "errorMessage": "check self.total_options exists"
                },
                {
                    "pc": [
                        646,
                        1018
                    ],
                    "errorMessage": "check self.vote_id exists"
                },
                {
                    "pc": [
                        841,
                        1327
                    ],
                    "errorMessage": "check self.voter_count exists"
                },
                {
                    "pc": [
                        894
                    ],
                    "errorMessage": "index access is out of bounds"
                },
                {
                    "pc": [
                        352,
                        368,
                        384,
                        421,
                        447,
                        871,
                        1102,
                        1167,
                        1186,
                        1223
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        359,
                        375,
                        391,
                        432,
                        454,
                        1109,
                        1174,
                        1194
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        402,
                        411,
                        440
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                },
                {
                    "pc": [
                        505
                    ],
                    "errorMessage": "option_counts should be non-empty"
                },
                {
                    "pc": [
                        569,
                        1161
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAECCCYPD2lzX2Jvb3RzdHJhcHBlZAt2b3Rlcl9jb3VudA1vcHRpb25fY291bnRzAVYHdm90ZV9pZApjbG9zZV90aW1lAwaBAQowMTIzNDU2Nzg5E3NuYXBzaG90X3B1YmxpY19rZXkRbWV0YWRhdGFfaXBmc19jaWQKc3RhcnRfdGltZQhlbmRfdGltZQZxdW9ydW0NbmZ0X2ltYWdlX3VybA10b3RhbF9vcHRpb25zMRhAAAYoImcpImcxGRREMRhBACSCBASk6NFkBJZWBHoEvLFYlgSEpTxuNhoAjgQBRQF9A14DlQCABK6Jf2s2GgCOAQBiAIoCAIv+gQoIiwAyDA1BACqxgQayEIEFshknBrIeJwayH4v/jQIACwAEs0L/2zIAsgFC//UisgFC/++JigEBi/+BCgxBAAcnB4v/I1iJi/+BCgqI/+aL/4EKGCcHTCNYUIk2GgFJIlkkCEsBFRJEVwIANhoCSSJZJAhLARUSRFcCADYaA0kiWSQISwEVEkRXAgA2GgRJFSUSRBc2GgVJFSUSRBc2GgZJTgZJIllJTgdJJAhPAhUSRDYaB0kVJRJEFzYaCEkiWSQISwEVEkRXAgBLBEsEDERLAzIHD0QnBE8IZycITwdnJwlPBmcnCk8FZycLTwRnJwxPAmcnDUxnSUSBcA5EIklJSwMMQQAXSwNXAgBLAUlOAlVLAwhFAyMIRQFC/+JLAUmBgAEORCpLBWcnDkxnI0MxFiMJSTgQIxJEIihlRBREKCNnSTgHMgoSRCInDmVEJQtJgZADC4H8uAwISRawTwI4CBJEK0y5QyJJgABJgaCcASKI/oUiJwVlRQEURCcFMgdnIicEZUSAWHsic3RhbmRhcmQiOiJhcmM2OSIsImRlc2NyaXB0aW9uIjoiVGhpcyBpcyBhIHZvdGluZyByZXN1bHQgTkZUIGZvciB2b3Rpbmcgcm91bmQgd2l0aCBJRCBLAVCAJC4iLCJwcm9wZXJ0aWVzIjp7Im1ldGFkYXRhIjoiaXBmczovL1AiJwllRFCACCIsImlkIjoiUExQgAsiLCJxdW9ydW0iOlAiJwxlRIj+AVCADiwidm90ZXJDb3VudCI6UCIpZUSI/ehQgAwsInRhbGxpZXMiOltQIkkqZUxJTwJEIlkiSUsCDEEAe0sCVwIASUUKSwFJTgIjWEUJQQAISwSAASxQRQVLB4ABAKVBAE5LBIABW1BFBUsISwFVRQYiRQdLBksGDEEALEsGQQAISwSAASxQRQUrSwRJTgIluheI/W1LBkxQRQYjCEUESwYjCEUHQv/MSwSAAV1QRQVJIwhFAUL/fksEgANdfX1QsTIAIicEZUSADltWT1RFIFJFU1VMVF0gTFAiJw1lRE8DsgWyJ4AIVk9URVJTTFSyJbImIrIkIrIjI7IigQOyELIBs4AMbmZ0X2Fzc2V0X2lktDxnI0M2GgFJIlkkCEsBFRJEVwIAiADiFkyIARIWMQC9RQEWMgcWTwNPA1BPAlBMUIAEFR98dUxQsCNDMRYjCUk4ECMSRDYaAUkiWSQISwEVEkRXAgA2GgJJTgNJIllJJAhPAhUSRIGUPCKI/EhMiAC9RIgAhEQxAL1FARREIiplRCJZSU4DSwESRIEiCIGQAwuBxBMISwE4BzIKEkRJFrBMOAgSRCJJSUsDDEEASUsDSVcCAEsCSU4CVSIqZURXAgBLAlVKDERLBUlOAk8DCCtLASW6FyMIFitOArsIRQQxAEm8SE8CvyIpZUQjCClMZyMIRQFC/7AjQ4oAAYAAIihlREEAJSInBWVFAUAAHCInCmVEMgdJjAAOQQAOIicLZUSLAA9BAAMjTIkiQv/6igEBgdAPIoj7fTEAIicIZUSL/0yEiQ==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}