#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 10 8
    bytecblock "is_bootstrapped" "voter_count" "option_counts" "V" "vote_id" "close_time" 0x068101 0x30313233343536373839 "snapshot_public_key" "metadata_ipfs_cid" "start_time" "end_time" "quorum" "nft_image_url" "total_options"
    txn ApplicationID
    bnz main_after_if_else@2
    // voting/voting.py:51
    // self.is_bootstrapped = False
    bytec_0 // "is_bootstrapped"
    intc_0 // 0
    app_global_put
    // voting/voting.py:52-53
    // # The minimum number of voters who have voted
    // self.voter_count = UInt64(0)
    bytec_1 // "voter_count"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // voting/voting.py:49
    // class VotingRoundApp(ARC4Contract):
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@10
    pushbytess 0xa4e8d164 0x9656047a 0xbcb15896 0x84a53c6e // method "bootstrap(pay)void", method "close()void", method "get_preconditions(byte[])(uint64,uint64,uint64,uint64)", method "vote(pay,byte[],uint8[])void"
    txna ApplicationArgs 0
    match bootstrap close get_preconditions vote
    err

main_create_NoOp@10:
    // voting/voting.py:49
    // class VotingRoundApp(ARC4Contract):
    pushbytes 0xae897f6b // method "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void"
    txna ApplicationArgs 0
    match create
    err


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    frame_dig -2
    intc_2 // 10
    +

ensure_budget_while_top@1:
    frame_dig 0
    global OpcodeBudget
    >
    bz ensure_budget_after_while@6
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 6 // 0x068101
    itxn_field ApprovalProgram
    bytec 6 // 0x068101
    itxn_field ClearStateProgram
    frame_dig -1
    switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4

ensure_budget_switch_case_next@5:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_switch_case_0@3:
    intc_0 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@5

ensure_budget_after_while@6:
    retsub


// examples.voting.voting.itoa(i: uint64) -> bytes:
itoa:
    // voting/voting.py:249-250
    // @subroutine
    // def itoa(i: UInt64) -> String:
    proto 1 1
    // voting/voting.py:253
    // if i < radix:
    frame_dig -1
    // voting/voting.py:252
    // radix = digits.length
    intc_2 // 10
    // voting/voting.py:253
    // if i < radix:
    <
    bz itoa_after_if_else@2
    // voting/voting.py:251
    // digits = Bytes(b"0123456789")
    bytec 7 // 0x30313233343536373839
    // voting/voting.py:254
    // return String.from_bytes(digits[i])
    frame_dig -1
    intc_1 // 1
    extract3
    retsub

itoa_after_if_else@2:
    // voting/voting.py:255
    // return itoa(i // radix) + String.from_bytes(digits[i % radix])
    frame_dig -1
    // voting/voting.py:252
    // radix = digits.length
    intc_2 // 10
    // voting/voting.py:255
    // return itoa(i // radix) + String.from_bytes(digits[i % radix])
    /
    callsub itoa
    frame_dig -1
    // voting/voting.py:252
    // radix = digits.length
    intc_2 // 10
    // voting/voting.py:255
    // return itoa(i // radix) + String.from_bytes(digits[i % radix])
    %
    // voting/voting.py:251
    // digits = Bytes(b"0123456789")
    bytec 7 // 0x30313233343536373839
    // voting/voting.py:255
    // return itoa(i // radix) + String.from_bytes(digits[i % radix])
    swap
    intc_1 // 1
    extract3
    concat
    retsub


// examples.voting.voting.VotingRoundApp.create[routing]() -> void:
create:
    // voting/voting.py:58
    // @arc4.abimethod(create="require")
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    dup
    cover 5
    cover 6
    txna ApplicationArgs 7
    btoi
    txna ApplicationArgs 8
    extract 2 0
    // voting/voting.py:70
    // assert start_time < end_time, "End time should be after start time"
    dig 3
    dig 3
    <
    assert // End time should be after start time
    // voting/voting.py:71
    // assert end_time >= Global.latest_timestamp, "End time should be in the future"
    dig 2
    global LatestTimestamp
    >=
    assert // End time should be in the future
    // voting/voting.py:73
    // self.vote_id = vote_id
    bytec 4 // "vote_id"
    uncover 8
    app_global_put
    // voting/voting.py:74
    // self.snapshot_public_key = snapshot_public_key
    bytec 8 // "snapshot_public_key"
    uncover 6
    app_global_put
    // voting/voting.py:75
    // self.metadata_ipfs_cid = metadata_ipfs_cid
    bytec 9 // "metadata_ipfs_cid"
    uncover 5
    app_global_put
    // voting/voting.py:76
    // self.start_time = start_time
    bytec 10 // "start_time"
    uncover 4
    app_global_put
    // voting/voting.py:77
    // self.end_time = end_time
    bytec 11 // "end_time"
    uncover 3
    app_global_put
    // voting/voting.py:78
    // self.quorum = quorum
    bytec 12 // "quorum"
    uncover 2
    app_global_put
    // voting/voting.py:79
    // self.nft_image_url = nft_image_url
    bytec 13 // "nft_image_url"
    swap
    app_global_put
    // voting/voting.py:219
    // assert option_counts.length, "option_counts should be non-empty"
    intc_0 // 0
    extract_uint16
    dupn 2
    assert // option_counts should be non-empty
    // voting/voting.py:220
    // assert option_counts.length <= 112, "Can't have more than 112 questions"
    pushint 112 // 112
    <=
    assert // Can't have more than 112 questions
    // voting/voting.py:222
    // total_options = UInt64(0)
    intc_0 // 0
    dup

create_for_header@2:
    // voting/voting.py:223
    // for item in option_counts:
    dup
    dig 3
    <
    bz create_after_for@4
    dig 3
    extract 2 0
    // voting/voting.py:224
    // total_options += item.native
    dig 1
    dup
    cover 2
    getbyte
    dig 3
    +
    bury 3
    intc_1 // 1
    +
    bury 1
    b create_for_header@2

create_after_for@4:
    // voting/voting.py:225
    // assert total_options <= 128, "Can't have more than 128 vote options"
    dig 1
    dup
    pushint 128 // 128
    <=
    assert // Can't have more than 128 vote options
    // voting/voting.py:227
    // self.option_counts = option_counts.copy()
    bytec_2 // "option_counts"
    dig 5
    app_global_put
    // voting/voting.py:228
    // self.total_options = total_options
    bytec 14 // "total_options"
    swap
    app_global_put
    // voting/voting.py:58
    // @arc4.abimethod(create="require")
    intc_1 // 1
    return


// examples.voting.voting.VotingRoundApp.bootstrap[routing]() -> void:
bootstrap:
    // voting/voting.py:82
    // @arc4.abimethod
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // voting/voting.py:84
    // assert not self.is_bootstrapped, "Must not be already bootstrapped"
    intc_0 // 0
    bytec_0 // "is_bootstrapped"
    app_global_get_ex
    assert // check self.is_bootstrapped exists
    !
    assert // Must not be already bootstrapped
    // voting/voting.py:85
    // self.is_bootstrapped = True
    bytec_0 // "is_bootstrapped"
    intc_1 // 1
    app_global_put
    // voting/voting.py:88
    // fund_min_bal_req.receiver == Global.current_application_address
    dup
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // voting/voting.py:87-89
    // assert (
    //     fund_min_bal_req.receiver == Global.current_application_address
    // ), "Payment must be to app address"
    assert // Payment must be to app address
    // voting/voting.py:91
    // tally_box_size = self.total_options * VOTE_COUNT_BYTES
    intc_0 // 0
    bytec 14 // "total_options"
    app_global_get_ex
    assert // check self.total_options exists
    intc_3 // 8
    *
    // voting/voting.py:101-102
    // # tally box value
    // + (tally_box_size * BOX_BYTE_MIN_BALANCE)
    dup
    pushint 400 // 400
    *
    // voting/voting.py:93-100
    // # minimum balance req for: ALGOs + Vote result NFT asset
    // ASSET_MIN_BALANCE * 2
    // # create NFT fee
    // + 1000
    // # tally box
    // + BOX_FLAT_MIN_BALANCE
    // # tally box key "V"
    // + BOX_BYTE_MIN_BALANCE
    pushint 203900 // 203900
    // voting/voting.py:93-102
    // # minimum balance req for: ALGOs + Vote result NFT asset
    // ASSET_MIN_BALANCE * 2
    // # create NFT fee
    // + 1000
    // # tally box
    // + BOX_FLAT_MIN_BALANCE
    // # tally box key "V"
    // + BOX_BYTE_MIN_BALANCE
    // # tally box value
    // + (tally_box_size * BOX_BYTE_MIN_BALANCE)
    +
    // voting/voting.py:104
    // log(min_balance_req)
    dup
    itob
    log
    // voting/voting.py:106
    // fund_min_bal_req.amount == min_balance_req
    uncover 2
    gtxns Amount
    ==
    // voting/voting.py:105-107
    // assert (
    //     fund_min_bal_req.amount == min_balance_req
    // ), "Payment must be for the exact min balance requirement"
    assert // Payment must be for the exact min balance requirement
    // voting/voting.py:108
    // assert self.tally_box.create(size=tally_box_size)
    bytec_3 // "V"
    swap
    box_create
    // voting/voting.py:82
    // @arc4.abimethod
    return


// examples.voting.voting.VotingRoundApp.close[routing]() -> void:
close:
    intc_0 // 0
    dup
    pushbytes ""
    dup
    // voting/voting.py:112
    // ensure_budget(20000, fee_source=OpUpFeeSource.GroupCredit)
    pushint 20000 // 20000
    intc_0 // 0
    callsub ensure_budget
    // voting/voting.py:113
    // assert not self.close_time, "Already closed"
    intc_0 // 0
    bytec 5 // "close_time"
    app_global_get_ex
    bury 1
    !
    assert // Already closed
    // voting/voting.py:114
    // self.close_time.value = Global.latest_timestamp
    bytec 5 // "close_time"
    global LatestTimestamp
    app_global_put
    // voting/voting.py:119
    // + self.vote_id
    intc_0 // 0
    bytec 4 // "vote_id"
    app_global_get_ex
    assert // check self.vote_id exists
    // voting/voting.py:117-118
    // '{"standard":"arc69",'
    // '"description":"This is a voting result NFT for voting round with ID '
    pushbytes "{\"standard\":\"arc69\",\"description\":\"This is a voting result NFT for voting round with ID "
    // voting/voting.py:117-119
    // '{"standard":"arc69",'
    // '"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    dig 1
    concat
    // voting/voting.py:120
    // + '.","properties":{"metadata":"ipfs://'
    pushbytes ".\",\"properties\":{\"metadata\":\"ipfs://"
    // voting/voting.py:117-120
    // '{"standard":"arc69",'
    // '"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + '.","properties":{"metadata":"ipfs://'
    concat
    // voting/voting.py:121
    // + self.metadata_ipfs_cid
    intc_0 // 0
    bytec 9 // "metadata_ipfs_cid"
    app_global_get_ex
    assert // check self.metadata_ipfs_cid exists
    // voting/voting.py:117-121
    // '{"standard":"arc69",'
    // '"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + '.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    concat
    // voting/voting.py:122
    // + '","id":"'
    pushbytes "\",\"id\":\""
    // voting/voting.py:117-122
    // '{"standard":"arc69",'
    // '"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + '.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + '","id":"'
    concat
    // voting/voting.py:117-123
    // '{"standard":"arc69",'
    // '"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + '.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + '","id":"'
    // + self.vote_id
    swap
    concat
    // voting/voting.py:124
    // + '","quorum":'
    pushbytes "\",\"quorum\":"
    // voting/voting.py:117-124
    // '{"standard":"arc69",'
    // '"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + '.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + '","id":"'
    // + self.vote_id
    // + '","quorum":'
    concat
    // voting/voting.py:125
    // + itoa(self.quorum)
    intc_0 // 0
    bytec 12 // "quorum"
    app_global_get_ex
    assert // check self.quorum exists
    callsub itoa
    // voting/voting.py:117-125
    // '{"standard":"arc69",'
    // '"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + '.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + '","id":"'
    // + self.vote_id
    // + '","quorum":'
    // + itoa(self.quorum)
    concat
    // voting/voting.py:126
    // + ',"voterCount":'
    pushbytes ",\"voterCount\":"
    // voting/voting.py:117-126
    // '{"standard":"arc69",'
    // '"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + '.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + '","id":"'
    // + self.vote_id
    // + '","quorum":'
    // + itoa(self.quorum)
    // + ',"voterCount":'
    concat
    // voting/voting.py:127
    // + itoa(self.voter_count)
    intc_0 // 0
    bytec_1 // "voter_count"
    app_global_get_ex
    assert // check self.voter_count exists
    callsub itoa
    // voting/voting.py:117-127
    // '{"standard":"arc69",'
    // '"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + '.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + '","id":"'
    // + self.vote_id
    // + '","quorum":'
    // + itoa(self.quorum)
    // + ',"voterCount":'
    // + itoa(self.voter_count)
    concat
    // voting/voting.py:128
    // + ',"tallies":['
    pushbytes ",\"tallies\":["
    // voting/voting.py:117-128
    // '{"standard":"arc69",'
    // '"description":"This is a voting result NFT for voting round with ID '
    // + self.vote_id
    // + '.","properties":{"metadata":"ipfs://'
    // + self.metadata_ipfs_cid
    // + '","id":"'
    // + self.vote_id
    // + '","quorum":'
    // + itoa(self.quorum)
    // + ',"voterCount":'
    // + itoa(self.voter_count)
    // + ',"tallies":['
    concat
    // voting/voting.py:131
    // current_index = UInt64(0)
    intc_0 // 0
    // voting/voting.py:132
    // for question_index, question_options in uenumerate(self.option_counts):
    dup
    bytec_2 // "option_counts"
    app_global_get_ex
    swap
    dup
    uncover 2
    assert // check self.option_counts exists
    intc_0 // 0
    extract_uint16
    intc_0 // 0

close_for_header@2:
    // voting/voting.py:132
    // for question_index, question_options in uenumerate(self.option_counts):
    dup
    dig 2
    <
    bz close_after_for@15
    dig 2
    extract 2 0
    dup
    bury 10
    dig 1
    dup
    cover 2
    intc_1 // 1
    extract3 // on error: index access is out of bounds
    bury 9
    // voting/voting.py:133
    // if question_index > 0:
    bz close_after_if_else@5
    // voting/voting.py:134
    // note += ","
    dig 4
    pushbytes ","
    concat
    bury 5

close_after_if_else@5:
    // voting/voting.py:135
    // if question_options > 0:
    dig 7
    pushbytes 0x00
    b>
    bz close_after_if_else@13
    // voting/voting.py:136
    // note += "["
    dig 4
    pushbytes "["
    concat
    bury 5
    // voting/voting.py:137
    // for option_index in urange(question_options.native):
    dig 8
    dig 1
    getbyte
    bury 6
    intc_0 // 0
    bury 7

close_for_header@7:
    // voting/voting.py:137
    // for option_index in urange(question_options.native):
    dig 6
    dig 6
    <
    bz close_after_for@12
    // voting/voting.py:138
    // if option_index > 0:
    dig 6
    bz close_after_if_else@10
    // voting/voting.py:139
    // note += ","
    dig 4
    pushbytes ","
    concat
    bury 5

close_after_if_else@10:
    // voting/voting.py:241
    // return op.btoi(self.tally_box.extract(index, VOTE_COUNT_BYTES))
    bytec_3 // "V"
    dig 4
    dup
    cover 2
    intc_3 // 8
    box_extract
    btoi
    // voting/voting.py:141
    // note += itoa(votes_for_option)
    callsub itoa
    dig 6
    swap
    concat
    bury 6
    // voting/voting.py:142
    // current_index += 1
    intc_1 // 1
    +
    bury 4
    // voting/voting.py:137
    // for option_index in urange(question_options.native):
    dig 6
    intc_1 // 1
    +
    bury 7
    b close_for_header@7

close_after_for@12:
    // voting/voting.py:143
    // note += "]"
    dig 4
    pushbytes "]"
    concat
    bury 5

close_after_if_else@13:
    dup
    intc_1 // 1
    +
    bury 1
    b close_for_header@2

close_after_for@15:
    // voting/voting.py:144
    // note += "]}}"
    dig 4
    pushbytes "]}}"
    concat
    // voting/voting.py:146-156
    // itxn.AssetConfig(
    //     total=1,
    //     decimals=0,
    //     default_frozen=False,
    //     asset_name="[VOTE RESULT] " + self.vote_id,
    //     unit_name="VOTERSLT",
    //     url=self.nft_image_url,
    //     note=note,
    //     fee=Global.min_txn_fee,
    // )
    // .submit()
    itxn_begin
    // voting/voting.py:154
    // fee=Global.min_txn_fee,
    global MinTxnFee
    // voting/voting.py:150
    // asset_name="[VOTE RESULT] " + self.vote_id,
    intc_0 // 0
    bytec 4 // "vote_id"
    app_global_get_ex
    assert // check self.vote_id exists
    pushbytes "[VOTE RESULT] "
    swap
    concat
    // voting/voting.py:152
    // url=self.nft_image_url,
    intc_0 // 0
    bytec 13 // "nft_image_url"
    app_global_get_ex
    assert // check self.nft_image_url exists
    uncover 3
    itxn_field Note
    itxn_field ConfigAssetURL
    // voting/voting.py:151
    // unit_name="VOTERSLT",
    pushbytes "VOTERSLT"
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetName
    // voting/voting.py:149
    // default_frozen=False,
    intc_0 // 0
    itxn_field ConfigAssetDefaultFrozen
    // voting/voting.py:148
    // decimals=0,
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    // voting/voting.py:147
    // total=1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // voting/voting.py:146
    // itxn.AssetConfig(
    pushint 3 // acfg
    itxn_field TypeEnum
    itxn_field Fee
    // voting/voting.py:146-156
    // itxn.AssetConfig(
    //     total=1,
    //     decimals=0,
    //     default_frozen=False,
    //     asset_name="[VOTE RESULT] " + self.vote_id,
    //     unit_name="VOTERSLT",
    //     url=self.nft_image_url,
    //     note=note,
    //     fee=Global.min_txn_fee,
    // )
    // .submit()
    itxn_submit
    // voting/voting.py:145
    // self.nft_asset_id = (
    pushbytes "nft_asset_id"
    // voting/voting.py:146-157
    // itxn.AssetConfig(
    //     total=1,
    //     decimals=0,
    //     default_frozen=False,
    //     asset_name="[VOTE RESULT] " + self.vote_id,
    //     unit_name="VOTERSLT",
    //     url=self.nft_image_url,
    //     note=note,
    //     fee=Global.min_txn_fee,
    // )
    // .submit()
    // .created_asset.id
    itxn CreatedAssetID
    // voting/voting.py:145-158
    // self.nft_asset_id = (
    //     itxn.AssetConfig(
    //         total=1,
    //         decimals=0,
    //         default_frozen=False,
    //         asset_name="[VOTE RESULT] " + self.vote_id,
    //         unit_name="VOTERSLT",
    //         url=self.nft_image_url,
    //         note=note,
    //         fee=Global.min_txn_fee,
    //     )
    //     .submit()
    //     .created_asset.id
    // )
    app_global_put
    // voting/voting.py:110
    // @arc4.abimethod
    intc_1 // 1
    return


// examples.voting.voting.VotingRoundApp.get_preconditions[routing]() -> void:
get_preconditions:
    // voting/voting.py:160
    // @arc4.abimethod(readonly=True)
    txna ApplicationArgs 1
    extract 2 0
    // voting/voting.py:163
    // is_voting_open=arc4.UInt64(self.voting_open()),
    callsub voting_open
    itob
    // voting/voting.py:164
    // is_allowed_to_vote=arc4.UInt64(self.allowed_to_vote(signature)),
    swap
    callsub allowed_to_vote
    itob
    // voting/voting.py:215
    // return Txn.sender in self.votes_by_account
    txn Sender
    box_len
    bury 1
    // voting/voting.py:165
    // has_already_voted=arc4.UInt64(self.already_voted()),
    itob
    // voting/voting.py:166
    // current_time=arc4.UInt64(Global.latest_timestamp),
    global LatestTimestamp
    itob
    // voting/voting.py:162-167
    // return VotingPreconditions(
    //     is_voting_open=arc4.UInt64(self.voting_open()),
    //     is_allowed_to_vote=arc4.UInt64(self.allowed_to_vote(signature)),
    //     has_already_voted=arc4.UInt64(self.already_voted()),
    //     current_time=arc4.UInt64(Global.latest_timestamp),
    // )
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    // voting/voting.py:160
    // @arc4.abimethod(readonly=True)
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return


// examples.voting.voting.VotingRoundApp.vote[routing]() -> void:
vote:
    // voting/voting.py:169
    // @arc4.abimethod
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    dup
    cover 2
    cover 3
    // voting/voting.py:176
    // ensure_budget(7700, fee_source=OpUpFeeSource.GroupCredit)
    pushint 7700 // 7700
    intc_0 // 0
    callsub ensure_budget
    // voting/voting.py:177-178
    // # Check voting preconditions
    // assert self.allowed_to_vote(signature), "Not allowed to vote"
    callsub allowed_to_vote
    assert // Not allowed to vote
    // voting/voting.py:179
    // assert self.voting_open(), "Voting not open"
    callsub voting_open
    assert // Voting not open
    // voting/voting.py:215
    // return Txn.sender in self.votes_by_account
    txn Sender
    box_len
    bury 1
    // voting/voting.py:180
    // assert not self.already_voted(), "Already voted"
    !
    assert // Already voted
    // voting/voting.py:181
    // questions_count = self.option_counts.length
    intc_0 // 0
    bytec_2 // "option_counts"
    app_global_get_ex
    assert // check self.option_counts exists
    intc_0 // 0
    extract_uint16
    dup
    cover 3
    // voting/voting.py:182
    // assert answer_ids.length == questions_count, "Number of answers incorrect"
    swap
    intc_0 // 0
    extract_uint16
    dup
    uncover 2
    ==
    assert // Number of answers incorrect
    // voting/voting.py:185
    // (32 + 2 + VOTE_INDEX_BYTES * answer_ids.length) * BOX_BYTE_MIN_BALANCE
    pushint 34 // 34
    +
    pushint 400 // 400
    *
    // voting/voting.py:183-184
    // # Check voter box is funded
    // min_bal_req = BOX_FLAT_MIN_BALANCE + (
    pushint 2500 // 2500
    // voting/voting.py:183-186
    // # Check voter box is funded
    // min_bal_req = BOX_FLAT_MIN_BALANCE + (
    //     (32 + 2 + VOTE_INDEX_BYTES * answer_ids.length) * BOX_BYTE_MIN_BALANCE
    // )
    +
    // voting/voting.py:188
    // fund_min_bal_req.receiver == Global.current_application_address
    dig 1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // voting/voting.py:187-189
    // assert (
    //     fund_min_bal_req.receiver == Global.current_application_address
    // ), "Payment must be to app address"
    assert // Payment must be to app address
    // voting/voting.py:191
    // log(min_bal_req)
    dup
    itob
    log
    // voting/voting.py:192
    // assert fund_min_bal_req.amount == min_bal_req, "Payment must be the exact min balance"
    swap
    gtxns Amount
    ==
    assert // Payment must be the exact min balance
    // voting/voting.py:193-194
    // # Record the vote for each question
    // cumulative_offset = UInt64(0)
    intc_0 // 0
    // voting/voting.py:195
    // for question_index in urange(questions_count):
    dup

vote_for_header@2:
    // voting/voting.py:195
    // for question_index in urange(questions_count):
    dup
    dig 3
    <
    bz vote_after_for@5
    // voting/voting.py:196-197
    // # Load the user's vote for this question
    // answer_option_index = answer_ids[question_index].native
    dig 3
    dup
    extract 2 0
    dig 2
    dup
    cover 2
    getbyte
    // voting/voting.py:198
    // options_count = self.option_counts[question_index].native
    intc_0 // 0
    bytec_2 // "option_counts"
    app_global_get_ex
    assert // check self.option_counts exists
    extract 2 0
    dig 2
    getbyte
    // voting/voting.py:199
    // assert answer_option_index < options_count, "Answer option index invalid"
    dup2
    <
    assert // Answer option index invalid
    // voting/voting.py:200
    // self.increment_vote_in_box(cumulative_offset + answer_option_index)
    dig 5
    dup
    cover 2
    uncover 3
    +
    // voting/voting.py:241
    // return op.btoi(self.tally_box.extract(index, VOTE_COUNT_BYTES))
    bytec_3 // "V"
    dig 1
    intc_3 // 8
    box_extract
    btoi
    // voting/voting.py:246
    // self.tally_box.replace(index, op.itob(current_vote + 1))
    intc_1 // 1
    +
    itob
    bytec_3 // "V"
    cover 2
    box_replace
    // voting/voting.py:201
    // cumulative_offset += options_count
    +
    bury 4
    // voting/voting.py:202
    // self.votes_by_account[Txn.sender] = answer_ids.copy()
    txn Sender
    dup
    box_del
    pop
    uncover 2
    box_put
    // voting/voting.py:203
    // self.voter_count += 1
    intc_0 // 0
    bytec_1 // "voter_count"
    app_global_get_ex
    assert // check self.voter_count exists
    intc_1 // 1
    +
    bytec_1 // "voter_count"
    swap
    app_global_put
    // voting/voting.py:195
    // for question_index in urange(questions_count):
    intc_1 // 1
    +
    bury 1
    b vote_for_header@2

vote_after_for@5:
    // voting/voting.py:169
    // @arc4.abimethod
    intc_1 // 1
    return


// examples.voting.voting.VotingRoundApp.voting_open() -> uint64:
voting_open:
    // voting/voting.py:205-206
    // @subroutine
    // def voting_open(self) -> bool:
    proto 0 1
    pushbytes ""
    // voting/voting.py:208
    // self.is_bootstrapped
    intc_0 // 0
    bytec_0 // "is_bootstrapped"
    app_global_get_ex
    assert // check self.is_bootstrapped exists
    // voting/voting.py:208-210
    // self.is_bootstrapped
    // and not self.close_time
    // and self.start_time <= Global.latest_timestamp <= self.end_time
    bz voting_open_bool_false@5
    // voting/voting.py:209
    // and not self.close_time
    intc_0 // 0
    bytec 5 // "close_time"
    app_global_get_ex
    bury 1
    bnz voting_open_bool_false@5
    // voting/voting.py:210
    // and self.start_time <= Global.latest_timestamp <= self.end_time
    intc_0 // 0
    bytec 10 // "start_time"
    app_global_get_ex
    assert // check self.start_time exists
    global LatestTimestamp
    dup
    frame_bury 0
    <=
    bz voting_open_bool_false@5
    intc_0 // 0
    bytec 11 // "end_time"
    app_global_get_ex
    assert // check self.end_time exists
    frame_dig 0
    >=
    bz voting_open_bool_false@5
    intc_1 // 1

voting_open_bool_merge@6:
    // voting/voting.py:207-211
    // return (
    //     self.is_bootstrapped
    //     and not self.close_time
    //     and self.start_time <= Global.latest_timestamp <= self.end_time
    // )
    swap
    retsub

voting_open_bool_false@5:
    intc_0 // 0
    b voting_open_bool_merge@6


// examples.voting.voting.VotingRoundApp.allowed_to_vote(signature: bytes) -> uint64:
allowed_to_vote:
    // voting/voting.py:230-231
    // @subroutine
    // def allowed_to_vote(self, signature: Bytes) -> bool:
    proto 1 1
    // voting/voting.py:232
    // ensure_budget(2000)
    pushint 2000 // 2000
    intc_0 // 0
    callsub ensure_budget
    // voting/voting.py:234
    // Txn.sender.bytes,
    txn Sender
    // voting/voting.py:236
    // self.snapshot_public_key,
    intc_0 // 0
    bytec 8 // "snapshot_public_key"
    app_global_get_ex
    assert // check self.snapshot_public_key exists
    // voting/voting.py:233-237
    // return op.ed25519verify_bare(
    //     Txn.sender.bytes,
    //     signature,
    //     self.snapshot_public_key,
    // )
    frame_dig -1
    swap
    ed25519verify_bare
    retsub
