{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;AASA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;;;;;;;;;;;AAAA;AA+BK;;;;;;AANA;;;;;;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;;AAKA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AA9BL;;;;;;AAE2B;;AAAA;AACnB;AACA;AAER;;;;;;;;AAEkB;;AAAA;AAAA;AAAA;AAEV;AAAA;;AAEA;;AAAA;;AAER;;;;;;AAEwB;;AAAA;AAChB;;AAAA;AAER;;;;;;AAEmC;;AAAA;AAAA;AAAA;AAAhB;;;AAAJ;AAAP;AACA;;AAAA;;;;AAER;;;;;;AAEe;;AAAA;;;AACM;;AAAA;AAAb;;AAAA;;AAAA;;AAAA;AACA;;;;AAER;;;;;;AAEe;;AAAA;;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 8"
    },
    "7": {
      "op": "b main_block@0"
    },
    "10": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "13": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "16": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "17": {
      "op": "bz main___algopy_default_create@11",
      "stack_out": []
    },
    "20": {
      "op": "b main_abi_routing@2"
    },
    "23": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "25": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "26": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "27": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "28": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "30": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "31": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "32": {
      "op": "bz main_create_NoOp@9",
      "stack_out": []
    },
    "35": {
      "op": "b main_call_NoOp@3"
    },
    "38": {
      "block": "main_call_NoOp@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "41": {
      "op": "pushbytes 0xda8534bd // method \"add_user((string,uint64,uint64))void\"",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(add_user((string,uint64,uint64))void)"
      ]
    },
    "47": {
      "op": "pushbytes 0xb4633ddd // method \"attach_asset_to_user(uint64,uint64)void\"",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)"
      ]
    },
    "53": {
      "op": "pushbytes 0x16545880 // method \"get_user(uint64)(string,uint64,uint64)\"",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))"
      ]
    },
    "59": {
      "op": "uncover 3",
      "stack_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))",
        "tmp%6#0"
      ]
    },
    "61": {
      "op": "match main_add_user_route@4 main_attach_asset_to_user_route@5 main_get_user_route@6",
      "stack_out": []
    },
    "69": {
      "op": "b main_switch_case_default@7"
    },
    "72": {
      "block": "main_switch_case_default@7",
      "stack_in": [],
      "op": "b main_switch_case_next@8"
    },
    "75": {
      "block": "main_switch_case_next@8",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "78": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "b main_after_if_else@12"
    },
    "81": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "82": {
      "block": "main_get_user_route@6",
      "stack_in": [],
      "callsub": "examples.struct_in_box.contract.ExampleContract.get_user[routing]",
      "op": "callsub get_user"
    },
    "85": {
      "op": "b main_switch_case_next@8"
    },
    "88": {
      "block": "main_attach_asset_to_user_route@5",
      "stack_in": [],
      "callsub": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]",
      "op": "callsub attach_asset_to_user"
    },
    "91": {
      "op": "b main_switch_case_next@8"
    },
    "94": {
      "block": "main_add_user_route@4",
      "stack_in": [],
      "callsub": "examples.struct_in_box.contract.ExampleContract.add_user[routing]",
      "op": "callsub add_user"
    },
    "97": {
      "op": "b main_switch_case_next@8"
    },
    "100": {
      "block": "main_create_NoOp@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "103": {
      "block": "main___algopy_default_create@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "105": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "106": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "107": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "109": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "110": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "111": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "112": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "113": {
      "op": "b main_block@14"
    },
    "116": {
      "block": "main_block@14",
      "stack_in": [],
      "op": "b main_after_inlined_examples.struct_in_box.contract.ExampleContract.__algopy_default_create@15"
    },
    "119": {
      "block": "main_after_inlined_examples.struct_in_box.contract.ExampleContract.__algopy_default_create@15",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "120": {
      "op": "return",
      "stack_out": []
    },
    "121": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.add_user[routing]",
      "params": {},
      "block": "add_user",
      "stack_in": [],
      "op": "b add_user_block@0"
    },
    "124": {
      "block": "add_user_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0"
      ]
    },
    "127": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.add_user",
      "op": "callsub examples.struct_in_box.contract.ExampleContract.add_user",
      "stack_out": []
    },
    "130": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "131": {
      "op": "return",
      "stack_out": []
    },
    "132": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]",
      "params": {},
      "block": "attach_asset_to_user",
      "stack_in": [],
      "op": "b attach_asset_to_user_block@0"
    },
    "135": {
      "block": "attach_asset_to_user_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "138": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "141": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0"
      ]
    },
    "142": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user",
      "op": "callsub examples.struct_in_box.contract.ExampleContract.attach_asset_to_user",
      "stack_out": []
    },
    "145": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "146": {
      "op": "return",
      "stack_out": []
    },
    "147": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.get_user[routing]",
      "params": {},
      "block": "get_user",
      "stack_in": [],
      "op": "b get_user_block@0"
    },
    "150": {
      "block": "get_user_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "153": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.get_user",
      "op": "callsub examples.struct_in_box.contract.ExampleContract.get_user",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "156": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "162": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "164": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "165": {
      "op": "log",
      "stack_out": []
    },
    "166": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "167": {
      "op": "return",
      "stack_out": []
    },
    "168": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.read_from_box",
      "params": {
        "user_id#0": "bytes"
      },
      "block": "read_from_box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "171": {
      "op": "b read_from_box_block@0"
    },
    "174": {
      "block": "read_from_box_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "176": {
      "op": "box_get",
      "defined_out": [
        "box_data#0",
        "exists#0"
      ],
      "stack_out": [
        "box_data#0",
        "exists#0"
      ]
    },
    "177": {
      "error": "User with that id does not exist",
      "op": "assert // User with that id does not exist",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0"
      ]
    },
    "178": {
      "retsub": true,
      "op": "retsub"
    },
    "179": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.write_to_box",
      "params": {
        "user#0": "bytes"
      },
      "block": "write_to_box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "182": {
      "op": "b write_to_box_block@0"
    },
    "185": {
      "block": "write_to_box_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0"
      ]
    },
    "187": {
      "op": "frame_dig -1",
      "stack_out": [
        "user%out#0",
        "user#0 (copy)"
      ]
    },
    "189": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "user#0 (copy)",
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0",
        "user#0 (copy)",
        "2"
      ]
    },
    "190": {
      "op": "intc_3 // 8",
      "defined_out": [
        "2",
        "8",
        "user#0 (copy)",
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0",
        "user#0 (copy)",
        "2",
        "8"
      ]
    },
    "191": {
      "op": "extract3",
      "defined_out": [
        "box_key#0",
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0",
        "box_key#0"
      ]
    },
    "192": {
      "op": "dup",
      "defined_out": [
        "box_key#0",
        "box_key#0 (copy)",
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0",
        "box_key#0",
        "box_key#0 (copy)"
      ]
    },
    "193": {
      "op": "box_del",
      "defined_out": [
        "box_key#0",
        "user%out#0",
        "{box_del}"
      ],
      "stack_out": [
        "user%out#0",
        "box_key#0",
        "{box_del}"
      ]
    },
    "194": {
      "op": "pop",
      "stack_out": [
        "user%out#0",
        "box_key#0"
      ]
    },
    "195": {
      "op": "frame_dig -1",
      "stack_out": [
        "user%out#0",
        "box_key#0",
        "user#0 (copy)"
      ]
    },
    "197": {
      "op": "box_put",
      "stack_out": [
        "user%out#0"
      ]
    },
    "198": {
      "retsub": true,
      "op": "retsub"
    },
    "199": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.box_exists",
      "params": {
        "user_id#0": "bytes"
      },
      "block": "box_exists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "202": {
      "op": "b box_exists_block@0"
    },
    "205": {
      "block": "box_exists_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "207": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "exists#0"
      ]
    },
    "208": {
      "op": "uncover 1"
    },
    "210": {
      "retsub": true,
      "op": "retsub"
    },
    "211": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.add_user",
      "params": {
        "user#0": "bytes"
      },
      "block": "examples.struct_in_box.contract.ExampleContract.add_user",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "214": {
      "op": "b examples.struct_in_box.contract.ExampleContract.add_user_block@0"
    },
    "217": {
      "block": "examples.struct_in_box.contract.ExampleContract.add_user_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "219": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "2"
      ]
    },
    "220": {
      "op": "intc_3 // 8",
      "defined_out": [
        "2",
        "8",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "2",
        "8"
      ]
    },
    "221": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "222": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.box_exists",
      "op": "callsub box_exists",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "225": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "226": {
      "error": "User with id must not exist",
      "op": "assert // User with id must not exist",
      "stack_out": []
    },
    "227": {
      "op": "frame_dig -1",
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "229": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.write_to_box",
      "op": "callsub write_to_box",
      "defined_out": [
        "write_to_box%0#0"
      ],
      "stack_out": [
        "write_to_box%0#0"
      ]
    },
    "232": {
      "retsub": true,
      "op": "retsub"
    },
    "233": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user",
      "params": {
        "user_id#0": "bytes",
        "asset#0": "uint64"
      },
      "block": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "236": {
      "op": "b examples.struct_in_box.contract.ExampleContract.attach_asset_to_user_block@0"
    },
    "239": {
      "block": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "241": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.read_from_box",
      "op": "callsub read_from_box",
      "defined_out": [
        "user#0"
      ],
      "stack_out": [
        "user#0"
      ]
    },
    "244": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "asset#0 (copy)"
      ]
    },
    "246": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "tmp%1#0"
      ]
    },
    "247": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "user#0"
      ]
    },
    "249": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "tmp%1#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "user#0",
        "10"
      ]
    },
    "251": {
      "op": "uncover 2",
      "stack_out": [
        "user#0",
        "10",
        "tmp%1#0"
      ]
    },
    "253": {
      "op": "replace3",
      "defined_out": [
        "user#0"
      ],
      "stack_out": [
        "user#0"
      ]
    },
    "254": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.write_to_box",
      "op": "callsub write_to_box",
      "defined_out": [
        "write_to_box%0#0"
      ],
      "stack_out": [
        "write_to_box%0#0"
      ]
    },
    "257": {
      "retsub": true,
      "op": "retsub"
    },
    "258": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.get_user",
      "params": {
        "user_id#0": "bytes"
      },
      "block": "examples.struct_in_box.contract.ExampleContract.get_user",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "261": {
      "op": "b examples.struct_in_box.contract.ExampleContract.get_user_block@0"
    },
    "264": {
      "block": "examples.struct_in_box.contract.ExampleContract.get_user_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "266": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.read_from_box",
      "op": "callsub read_from_box",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "269": {
      "retsub": true,
      "op": "retsub"
    }
  }
}