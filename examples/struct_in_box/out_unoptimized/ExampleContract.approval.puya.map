{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;AASA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;AA+BK;;;;;;AANA;;;;;;AALA;;;;;;AApBL;;;AAAA;;AAAA;;;;;;;;;AAAA;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAoBK;;;AAAA;;;AAAA;AAAA;;;;AAKA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;;AAMA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AA9BL;;;;;;AAE2B;;AAAA;AACnB;AACA;AAER;;;;;;;;AAEkB;;AAAA;AAAA;AAAA;AAEV;AAAA;;AAEA;;AAAA;;AAER;;;;;;AAEwB;;AAAA;AAChB;;AAAA;AAER;;;;;;AAEmC;;AAAA;AAAA;AAAA;AAAhB;;;AAAJ;AAAP;AACA;;AAAA;;;;AAER;;;;;;AAEe;;AAAA;;;AACM;;AAAA;AAAb;;AAAA;;AAAA;;AAAA;AACA;;;;AAER;;;;;;AAEe;;AAAA;;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 8"
    },
    "7": {
      "op": "b main_block@0"
    },
    "10": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "13": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "16": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "17": {
      "op": "bz main_bare_routing@17",
      "stack_out": []
    },
    "20": {
      "op": "b main_abi_routing@2"
    },
    "23": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "26": {
      "op": "match",
      "stack_out": []
    },
    "28": {
      "op": "b main_route_NoOp@3"
    },
    "31": {
      "block": "main_route_NoOp@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "33": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "34": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "35": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "36": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "39": {
      "op": "match",
      "stack_out": []
    },
    "41": {
      "op": "b main_switch_case_default@4"
    },
    "44": {
      "block": "main_switch_case_default@4",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "46": {
      "op": "bz main_create_NoOp@11",
      "stack_out": []
    },
    "49": {
      "op": "b main_call_NoOp@5"
    },
    "52": {
      "block": "main_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "55": {
      "op": "pushbytes 0xda8534bd // method \"add_user((string,uint64,uint64))void\"",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(add_user((string,uint64,uint64))void)"
      ]
    },
    "61": {
      "op": "pushbytes 0xb4633ddd // method \"attach_asset_to_user(uint64,uint64)void\"",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)"
      ]
    },
    "67": {
      "op": "pushbytes 0x16545880 // method \"get_user(uint64)(string,uint64,uint64)\"",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))"
      ]
    },
    "73": {
      "op": "uncover 3",
      "stack_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))",
        "tmp%7#0"
      ]
    },
    "75": {
      "op": "match main_add_user_route@6 main_attach_asset_to_user_route@7 main_get_user_route@8",
      "stack_out": []
    },
    "83": {
      "op": "b main_switch_case_default@9"
    },
    "86": {
      "block": "main_switch_case_default@9",
      "stack_in": [],
      "op": "b main_switch_case_next@10"
    },
    "89": {
      "block": "main_switch_case_next@10",
      "stack_in": [],
      "op": "b main_after_if_else@14"
    },
    "92": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "b main_switch_case_next@15"
    },
    "95": {
      "block": "main_switch_case_next@15",
      "stack_in": [],
      "op": "b main_switch_case_next@16"
    },
    "98": {
      "block": "main_switch_case_next@16",
      "stack_in": [],
      "op": "b main_after_if_else@21"
    },
    "101": {
      "block": "main_after_if_else@21",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "102": {
      "block": "main_get_user_route@8",
      "stack_in": [],
      "callsub": "examples.struct_in_box.contract.ExampleContract.get_user[routing]",
      "op": "callsub get_user"
    },
    "105": {
      "op": "b main_switch_case_next@10"
    },
    "108": {
      "block": "main_attach_asset_to_user_route@7",
      "stack_in": [],
      "callsub": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]",
      "op": "callsub attach_asset_to_user"
    },
    "111": {
      "op": "b main_switch_case_next@10"
    },
    "114": {
      "block": "main_add_user_route@6",
      "stack_in": [],
      "callsub": "examples.struct_in_box.contract.ExampleContract.add_user[routing]",
      "op": "callsub add_user"
    },
    "117": {
      "op": "b main_switch_case_next@10"
    },
    "120": {
      "block": "main_create_NoOp@11",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "123": {
      "op": "match",
      "stack_out": []
    },
    "125": {
      "op": "b main_switch_case_default@12"
    },
    "128": {
      "block": "main_switch_case_default@12",
      "stack_in": [],
      "op": "b main_switch_case_next@13"
    },
    "131": {
      "block": "main_switch_case_next@13",
      "stack_in": [],
      "op": "b main_after_if_else@14"
    },
    "134": {
      "block": "main_bare_routing@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "136": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "137": {
      "op": "uncover 1",
      "stack_out": [
        "0",
        "tmp%9#0"
      ]
    },
    "139": {
      "op": "match main___algopy_default_create@18",
      "stack_out": []
    },
    "143": {
      "op": "b main_switch_case_default@19"
    },
    "146": {
      "block": "main_switch_case_default@19",
      "stack_in": [],
      "op": "b main_switch_case_next@20"
    },
    "149": {
      "block": "main_switch_case_next@20",
      "stack_in": [],
      "op": "b main_after_if_else@21"
    },
    "152": {
      "block": "main___algopy_default_create@18",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "154": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "155": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "156": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "157": {
      "op": "b main_block@23"
    },
    "160": {
      "block": "main_block@23",
      "stack_in": [],
      "op": "b main_after_inlined_examples.struct_in_box.contract.ExampleContract.__algopy_default_create@24"
    },
    "163": {
      "block": "main_after_inlined_examples.struct_in_box.contract.ExampleContract.__algopy_default_create@24",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "164": {
      "op": "return",
      "stack_out": []
    },
    "165": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.add_user[routing]",
      "params": {},
      "block": "add_user",
      "stack_in": [],
      "op": "b add_user_block@0"
    },
    "168": {
      "block": "add_user_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0"
      ]
    },
    "171": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.add_user",
      "op": "callsub examples.struct_in_box.contract.ExampleContract.add_user",
      "stack_out": []
    },
    "174": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "175": {
      "op": "return",
      "stack_out": []
    },
    "176": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]",
      "params": {},
      "block": "attach_asset_to_user",
      "stack_in": [],
      "op": "b attach_asset_to_user_block@0"
    },
    "179": {
      "block": "attach_asset_to_user_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "182": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "185": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0"
      ]
    },
    "186": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user",
      "op": "callsub examples.struct_in_box.contract.ExampleContract.attach_asset_to_user",
      "stack_out": []
    },
    "189": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "190": {
      "op": "return",
      "stack_out": []
    },
    "191": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.get_user[routing]",
      "params": {},
      "block": "get_user",
      "stack_in": [],
      "op": "b get_user_block@0"
    },
    "194": {
      "block": "get_user_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "197": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.get_user",
      "op": "callsub examples.struct_in_box.contract.ExampleContract.get_user",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "200": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "206": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "208": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "209": {
      "op": "log",
      "stack_out": []
    },
    "210": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "211": {
      "op": "return",
      "stack_out": []
    },
    "212": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.read_from_box",
      "params": {
        "user_id#0": "bytes"
      },
      "block": "read_from_box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "215": {
      "op": "b read_from_box_block@0"
    },
    "218": {
      "block": "read_from_box_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "220": {
      "op": "box_get",
      "defined_out": [
        "box_data#0",
        "exists#0"
      ],
      "stack_out": [
        "box_data#0",
        "exists#0"
      ]
    },
    "221": {
      "error": "User with that id does not exist",
      "op": "assert // User with that id does not exist",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0"
      ]
    },
    "222": {
      "retsub": true,
      "op": "retsub"
    },
    "223": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.write_to_box",
      "params": {
        "user#0": "bytes"
      },
      "block": "write_to_box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "226": {
      "op": "b write_to_box_block@0"
    },
    "229": {
      "block": "write_to_box_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0"
      ]
    },
    "231": {
      "op": "frame_dig -1",
      "stack_out": [
        "user%out#0",
        "user#0 (copy)"
      ]
    },
    "233": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "user#0 (copy)",
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0",
        "user#0 (copy)",
        "2"
      ]
    },
    "234": {
      "op": "intc_3 // 8",
      "defined_out": [
        "2",
        "8",
        "user#0 (copy)",
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0",
        "user#0 (copy)",
        "2",
        "8"
      ]
    },
    "235": {
      "op": "extract3",
      "defined_out": [
        "box_key#0",
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0",
        "box_key#0"
      ]
    },
    "236": {
      "op": "dup",
      "defined_out": [
        "box_key#0",
        "box_key#0 (copy)",
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0",
        "box_key#0",
        "box_key#0 (copy)"
      ]
    },
    "237": {
      "op": "box_del",
      "defined_out": [
        "box_key#0",
        "user%out#0",
        "{box_del}"
      ],
      "stack_out": [
        "user%out#0",
        "box_key#0",
        "{box_del}"
      ]
    },
    "238": {
      "op": "pop",
      "stack_out": [
        "user%out#0",
        "box_key#0"
      ]
    },
    "239": {
      "op": "frame_dig -1",
      "stack_out": [
        "user%out#0",
        "box_key#0",
        "user#0 (copy)"
      ]
    },
    "241": {
      "op": "box_put",
      "stack_out": [
        "user%out#0"
      ]
    },
    "242": {
      "retsub": true,
      "op": "retsub"
    },
    "243": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.box_exists",
      "params": {
        "user_id#0": "bytes"
      },
      "block": "box_exists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "246": {
      "op": "b box_exists_block@0"
    },
    "249": {
      "block": "box_exists_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "251": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "exists#0"
      ]
    },
    "252": {
      "op": "uncover 1"
    },
    "254": {
      "retsub": true,
      "op": "retsub"
    },
    "255": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.add_user",
      "params": {
        "user#0": "bytes"
      },
      "block": "examples.struct_in_box.contract.ExampleContract.add_user",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "258": {
      "op": "b examples.struct_in_box.contract.ExampleContract.add_user_block@0"
    },
    "261": {
      "block": "examples.struct_in_box.contract.ExampleContract.add_user_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "263": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "2"
      ]
    },
    "264": {
      "op": "intc_3 // 8",
      "defined_out": [
        "2",
        "8",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "2",
        "8"
      ]
    },
    "265": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "266": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.box_exists",
      "op": "callsub box_exists",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "269": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "270": {
      "error": "User with id must not exist",
      "op": "assert // User with id must not exist",
      "stack_out": []
    },
    "271": {
      "op": "frame_dig -1",
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "273": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.write_to_box",
      "op": "callsub write_to_box",
      "defined_out": [
        "write_to_box%0#0"
      ],
      "stack_out": [
        "write_to_box%0#0"
      ]
    },
    "276": {
      "retsub": true,
      "op": "retsub"
    },
    "277": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user",
      "params": {
        "user_id#0": "bytes",
        "asset#0": "uint64"
      },
      "block": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "280": {
      "op": "b examples.struct_in_box.contract.ExampleContract.attach_asset_to_user_block@0"
    },
    "283": {
      "block": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "285": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.read_from_box",
      "op": "callsub read_from_box",
      "defined_out": [
        "user#0"
      ],
      "stack_out": [
        "user#0"
      ]
    },
    "288": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "asset#0 (copy)"
      ]
    },
    "290": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "tmp%1#0"
      ]
    },
    "291": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%1#0",
        "user#0"
      ]
    },
    "293": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "tmp%1#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "user#0",
        "10"
      ]
    },
    "295": {
      "op": "uncover 2",
      "stack_out": [
        "user#0",
        "10",
        "tmp%1#0"
      ]
    },
    "297": {
      "op": "replace3",
      "defined_out": [
        "user#0"
      ],
      "stack_out": [
        "user#0"
      ]
    },
    "298": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.write_to_box",
      "op": "callsub write_to_box",
      "defined_out": [
        "write_to_box%0#0"
      ],
      "stack_out": [
        "write_to_box%0#0"
      ]
    },
    "301": {
      "retsub": true,
      "op": "retsub"
    },
    "302": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.get_user",
      "params": {
        "user_id#0": "bytes"
      },
      "block": "examples.struct_in_box.contract.ExampleContract.get_user",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "305": {
      "op": "b examples.struct_in_box.contract.ExampleContract.get_user_block@0"
    },
    "308": {
      "block": "examples.struct_in_box.contract.ExampleContract.get_user_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "310": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.read_from_box",
      "op": "callsub read_from_box",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "313": {
      "retsub": true,
      "op": "retsub"
    }
  }
}