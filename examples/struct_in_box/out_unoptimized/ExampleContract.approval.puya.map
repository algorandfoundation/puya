{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;AASA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;AA+BK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA/BL;;;AA+BK;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;;;AANA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAzBL;;;AAAA;;;AAAA;AAyBK;;;AAAA;;;;AALA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AApBL;;;AAoBK;;;AAAA;;;;AApBL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AACA;;;AAE2B;;AAAA;AACnB;AACA;AAER;;;;;AAEkB;AAAA;AAAA;AAAA;AAEV;AAAA;;AAEA;;AAAA;;AAER;;;AAEwB;;AAAA;AAAA;;AAChB;AAER;;;AAEmC;;AAAA;AAAA;AAAA;AAAhB;;;AAAJ;AAAP;AACA;;AAAA;;;AAAA;;AAER;;;AAEe;;AAAA;;;AACM;;AAAA;AAAb;AAAA;;AAAA;;AAAA;AACA;;;AAAA;;AAER;;;AAEe;;AAAA;;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 8"
    },
    "7": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "9": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "10": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "11": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "14": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "17": {
      "op": "pushbytes 0xda8534bd // method \"add_user((string,uint64,uint64))void\"",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(add_user((string,uint64,uint64))void)"
      ]
    },
    "23": {
      "op": "pushbytes 0xb4633ddd // method \"attach_asset_to_user(uint64,uint64)void\"",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)"
      ]
    },
    "29": {
      "op": "pushbytes 0x16545880 // method \"get_user(uint64)(string,uint64,uint64)\"",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))"
      ]
    },
    "35": {
      "op": "uncover 3",
      "stack_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))",
        "tmp%2#0"
      ]
    },
    "37": {
      "op": "match main_add_user_route@3 main_attach_asset_to_user_route@4 main_get_user_route@5",
      "stack_out": []
    },
    "45": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "46": {
      "block": "main_after_inlined_examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__@13",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "47": {
      "block": "main_get_user_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "49": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "NoOp"
      ]
    },
    "50": {
      "op": "==",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "51": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "52": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "54": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "0"
      ]
    },
    "55": {
      "op": "!=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "56": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "57": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "60": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.get_user",
      "op": "callsub get_user",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "63": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "0x151f7c75"
      ]
    },
    "69": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%16#0"
      ]
    },
    "70": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "71": {
      "op": "log",
      "stack_out": []
    },
    "72": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "73": {
      "op": "b main_after_inlined_examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__@13"
    },
    "76": {
      "block": "main_attach_asset_to_user_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "78": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "79": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "80": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "81": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "83": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "84": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "85": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "86": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "89": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "92": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%11#0"
      ]
    },
    "93": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user",
      "op": "callsub attach_asset_to_user",
      "stack_out": []
    },
    "96": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "97": {
      "op": "b main_after_inlined_examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__@13"
    },
    "100": {
      "block": "main_add_user_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "102": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "103": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "104": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "105": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "107": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "108": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "109": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "110": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0"
      ]
    },
    "113": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.add_user",
      "op": "callsub add_user",
      "stack_out": []
    },
    "116": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "b main_after_inlined_examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__@13"
    },
    "120": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "122": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0"
      ]
    },
    "123": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%18#0"
      ]
    },
    "124": {
      "op": "match main___algopy_default_create@9",
      "stack_out": []
    },
    "128": {
      "block": "main_switch_case_next@11",
      "stack_in": [],
      "op": "b main_after_if_else@12"
    },
    "131": {
      "block": "main___algopy_default_create@9",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "133": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "134": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "135": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "136": {
      "block": "main_after_inlined_examples.struct_in_box.contract.ExampleContract.__algopy_default_create@15",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "137": {
      "op": "b main_after_inlined_examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__@13"
    },
    "140": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.read_from_box",
      "params": {
        "user_id#0": "bytes"
      },
      "block": "read_from_box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "143": {
      "block": "read_from_box_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "145": {
      "op": "box_get",
      "defined_out": [
        "box_data#0",
        "exists#0"
      ],
      "stack_out": [
        "box_data#0",
        "exists#0"
      ]
    },
    "146": {
      "error": "User with that id does not exist",
      "op": "assert // User with that id does not exist",
      "defined_out": [
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0"
      ]
    },
    "147": {
      "retsub": true,
      "op": "retsub"
    },
    "148": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.write_to_box",
      "params": {
        "user#0": "bytes"
      },
      "block": "write_to_box",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "151": {
      "block": "write_to_box_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0"
      ]
    },
    "153": {
      "op": "dup",
      "defined_out": [
        "user#0 (copy)",
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0",
        "user#0 (copy)"
      ]
    },
    "154": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "user#0 (copy)",
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0",
        "user#0 (copy)",
        "2"
      ]
    },
    "155": {
      "op": "intc_3 // 8",
      "defined_out": [
        "2",
        "8",
        "user#0 (copy)",
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0",
        "user#0 (copy)",
        "2",
        "8"
      ]
    },
    "156": {
      "op": "extract3",
      "defined_out": [
        "box_key#0",
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0",
        "box_key#0"
      ]
    },
    "157": {
      "op": "dup",
      "defined_out": [
        "box_key#0",
        "box_key#0 (copy)",
        "user%out#0"
      ],
      "stack_out": [
        "user%out#0",
        "box_key#0",
        "box_key#0 (copy)"
      ]
    },
    "158": {
      "op": "box_del",
      "defined_out": [
        "box_key#0",
        "user%out#0",
        "{box_del}"
      ],
      "stack_out": [
        "user%out#0",
        "box_key#0",
        "{box_del}"
      ]
    },
    "159": {
      "op": "pop",
      "stack_out": [
        "user%out#0",
        "box_key#0"
      ]
    },
    "160": {
      "op": "frame_dig -1",
      "stack_out": [
        "user%out#0",
        "box_key#0",
        "user#0 (copy)"
      ]
    },
    "162": {
      "op": "box_put",
      "stack_out": [
        "user%out#0"
      ]
    },
    "163": {
      "retsub": true,
      "op": "retsub"
    },
    "164": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.box_exists",
      "params": {
        "user_id#0": "bytes"
      },
      "block": "box_exists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "167": {
      "block": "box_exists_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "169": {
      "op": "box_get",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "170": {
      "op": "bury 1",
      "defined_out": [
        "exists#0"
      ],
      "stack_out": [
        "exists#0"
      ]
    },
    "172": {
      "retsub": true,
      "op": "retsub"
    },
    "173": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.add_user",
      "params": {
        "user#0": "bytes"
      },
      "block": "add_user",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "176": {
      "block": "add_user_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "178": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "2"
      ]
    },
    "179": {
      "op": "intc_3 // 8",
      "defined_out": [
        "2",
        "8",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)",
        "2",
        "8"
      ]
    },
    "180": {
      "op": "extract3",
      "defined_out": [
        "tuple_item%0#0"
      ],
      "stack_out": [
        "tuple_item%0#0"
      ]
    },
    "181": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.box_exists",
      "op": "callsub box_exists",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "184": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "185": {
      "error": "User with id must not exist",
      "op": "assert // User with id must not exist",
      "stack_out": []
    },
    "186": {
      "op": "frame_dig -1",
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "188": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.write_to_box",
      "op": "callsub write_to_box",
      "defined_out": [
        "write_to_box%0#0"
      ],
      "stack_out": [
        "write_to_box%0#0"
      ]
    },
    "191": {
      "op": "pop",
      "stack_out": []
    },
    "192": {
      "retsub": true,
      "op": "retsub"
    },
    "193": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user",
      "params": {
        "user_id#0": "bytes",
        "asset#0": "uint64"
      },
      "block": "attach_asset_to_user",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "196": {
      "block": "attach_asset_to_user_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "198": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.read_from_box",
      "op": "callsub read_from_box",
      "defined_out": [
        "user#0"
      ],
      "stack_out": [
        "user#0"
      ]
    },
    "201": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "asset#0 (copy)"
      ]
    },
    "203": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "tmp%1#0"
      ]
    },
    "204": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "user#0"
      ]
    },
    "205": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "tmp%1#0",
        "user#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "user#0",
        "10"
      ]
    },
    "207": {
      "op": "uncover 2",
      "stack_out": [
        "user#0",
        "10",
        "tmp%1#0"
      ]
    },
    "209": {
      "op": "replace3",
      "stack_out": [
        "user#0"
      ]
    },
    "210": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.write_to_box",
      "op": "callsub write_to_box",
      "defined_out": [
        "write_to_box%0#0"
      ],
      "stack_out": [
        "write_to_box%0#0"
      ]
    },
    "213": {
      "op": "pop",
      "stack_out": []
    },
    "214": {
      "retsub": true,
      "op": "retsub"
    },
    "215": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.get_user",
      "params": {
        "user_id#0": "bytes"
      },
      "block": "get_user",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "218": {
      "block": "get_user_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "220": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.read_from_box",
      "op": "callsub read_from_box",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "223": {
      "retsub": true,
      "op": "retsub"
    }
  }
}