contract examples.struct_in_box.contract.ExampleContract:
    program approval:
        subroutine examples.struct_in_box.contract.ExampleContract.approval_program() -> bool:
            block@0: // L10
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@7
            block@1: // abi_routing_L10
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "add_user((string,uint64,uint64))void" => block@2, method "attach_asset_to_user(uint64,asset)void" => block@3, method "get_user(uint64)(string,uint64,uint64)" => block@4, * => block@5}
            block@2: // add_user_route_L31
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (== tmp%2#0 NoOp)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                examples.struct_in_box.contract.ExampleContract.add_user(tmp%5#0)
                return 1u
            block@3: // attach_asset_to_user_route_L36
                let tmp%6#0: uint64 = (txn OnCompletion)
                let tmp%7#0: bool = (== tmp%6#0 NoOp)
                (assert tmp%7#0) // OnCompletion is NoOp
                let tmp%8#0: bool = (txn ApplicationID)
                (assert tmp%8#0) // is not creating
                let tmp%9#0: bytes = (txna ApplicationArgs 1)
                let tmp%10#0: bytes = (txna ApplicationArgs 2)
                let tmp%11#0: uint64 = (btoi tmp%10#0)
                let tmp%12#0: uint64 = ((txnas Assets) tmp%11#0)
                examples.struct_in_box.contract.ExampleContract.attach_asset_to_user(tmp%9#0, tmp%12#0)
                return 1u
            block@4: // get_user_route_L42
                let tmp%13#0: uint64 = (txn OnCompletion)
                let tmp%14#0: bool = (== tmp%13#0 NoOp)
                (assert tmp%14#0) // OnCompletion is NoOp
                let tmp%15#0: bool = (txn ApplicationID)
                (assert tmp%15#0) // is not creating
                let tmp%16#0: bytes = (txna ApplicationArgs 1)
                let tmp%17#0: bytes = examples.struct_in_box.contract.ExampleContract.get_user(tmp%16#0)
                let tmp%18#0: bytes = (concat 0x151f7c75 tmp%17#0)
                (log tmp%18#0)
                return 1u
            block@5: // switch_case_default_L10
                goto block@6
            block@6: // switch_case_next_L10
                fail // reject transaction
            block@7: // bare_routing_L10
                let tmp%19#0: uint64 = (txn OnCompletion)
                switch tmp%19#0 {0u => block@8, * => block@9}
            block@8: // create_L10
                let tmp%20#0: bool = (txn ApplicationID)
                let tmp%21#0: bool = (! tmp%20#0)
                (assert tmp%21#0) // is creating
                return 1u
            block@9: // reject_bare_on_completion_L10
                fail // reject transaction
        
        subroutine examples.struct_in_box.contract.ExampleContract.add_user(user: bytes) -> void:
            block@0: // L31
                let tmp%0#0: bytes = (extract3 user#0 2u 8u) // on error: Index access is out of bounds
                let tmp%1#0: bool = examples.struct_in_box.contract.ExampleContract.box_exists(tmp%0#0)
                let tmp%2#0: bool = (! tmp%1#0)
                (assert tmp%2#0) // User with id must not exist
                let write_to_box%0#0: bytes = examples.struct_in_box.contract.ExampleContract.write_to_box(user#0)
                return 
        
        subroutine examples.struct_in_box.contract.ExampleContract.box_exists(user_id: bytes) -> bool:
            block@0: // L26
                let (tuple_assignment%0#0: bytes, tuple_assignment%1#0: bool) = (box_get user_id#0)
                let exists#0: bool = tuple_assignment%1#0
                return exists#0
        
        subroutine examples.struct_in_box.contract.ExampleContract.write_to_box(user: bytes) -> bytes:
            block@0: // L18
                let box_key#0: bytes = (extract3 user#0 2u 8u) // on error: Index access is out of bounds
                (box_del box_key#0)
                (box_put box_key#0 user#0)
                return user#0
        
        subroutine examples.struct_in_box.contract.ExampleContract.attach_asset_to_user(user_id: bytes, asset: uint64) -> void:
            block@0: // L36
                let user#0: bytes = examples.struct_in_box.contract.ExampleContract.read_from_box(user_id#0)
                let val_as_bytes%0#0: bytes = (itob asset#0)
                let assigned_value%0#0: bytes = val_as_bytes%0#0
                let updated_data%0#0: bytes = (replace3 user#0 10u assigned_value%0#0)
                let user#0: bytes = updated_data%0#0
                let write_to_box%0#0: bytes = examples.struct_in_box.contract.ExampleContract.write_to_box(user#0)
                return 
        
        subroutine examples.struct_in_box.contract.ExampleContract.read_from_box(user_id: bytes) -> bytes:
            block@0: // L12
                let (tuple_assignment%0#0: bytes, tuple_assignment%1#0: bool) = (box_get user_id#0)
                let box_data#0: bytes = tuple_assignment%0#0
                let exists#0: bool = tuple_assignment%1#0
                (assert exists#0) // User with that id does not exist
                return box_data#0
        
        subroutine examples.struct_in_box.contract.ExampleContract.get_user(user_id: bytes) -> bytes:
            block@0: // L42
                let tmp%0#0: bytes = examples.struct_in_box.contract.ExampleContract.read_from_box(user_id#0)
                return tmp%0#0
    
    program clear-state:
        subroutine examples.struct_in_box.contract.ExampleContract.clear_state_program() -> bool:
            block@0: // L10
                return 1u