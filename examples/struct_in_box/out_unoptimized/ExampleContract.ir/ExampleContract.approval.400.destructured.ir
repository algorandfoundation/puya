main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L10
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@8, 2u => block@11, 3u => block@12, 4u => block@13, 5u => block@14, 6u => block@15, 7u => block@16, 8u => block@17, 9u => block@18, 10u => block@19, 11u => block@20, * => block@21}
    block@2: // switch_case_0_L10
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "add_user((string,uint64,uint64))void" => block@3, method "attach_asset_to_user(uint64,uint64)void" => block@4, method "get_user(uint64)(string,uint64,uint64)" => block@5, * => block@6}
    block@3: // add_user_route_L30
        examples.struct_in_box.contract.ExampleContract.add_user[routing]()
        goto block@7
    block@4: // attach_asset_to_user_route_L35
        examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]()
        goto block@7
    block@5: // get_user_route_L41
        examples.struct_in_box.contract.ExampleContract.get_user[routing]()
        goto block@7
    block@6: // switch_case_default_L10
        goto block@7
    block@7: // switch_case_next_L10
        fail // this contract does not implement the given ABI method for call NoOp
    block@8: // switch_case_1_L10
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@9 : block@10
    block@9: // __algopy_default_create_L1
        goto block@23
    block@23: // L1
        goto block@24
    block@24: // after_inlined_examples.struct_in_box.contract.ExampleContract.__algopy_default_create_L1
        exit 1u
    block@10: // else_body_L10
        fail // this contract does not implement the given ABI method for create NoOp
    block@11: // switch_case_2_L10
        goto block@21
    block@12: // switch_case_3_L10
        goto block@21
    block@13: // switch_case_4_L10
        goto block@21
    block@14: // switch_case_5_L10
        goto block@21
    block@15: // switch_case_6_L10
        goto block@21
    block@16: // switch_case_7_L10
        goto block@21
    block@17: // switch_case_8_L10
        goto block@21
    block@18: // switch_case_9_L10
        goto block@21
    block@19: // switch_case_10_L10
        goto block@21
    block@20: // switch_case_11_L10
        goto block@21
    block@21: // switch_case_default_L10
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@22: // after_inlined_examples.struct_in_box.contract.ExampleContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine examples.struct_in_box.contract.ExampleContract.add_user[routing]() -> void:
    block@0: // L30
        let reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0: Encoded((len+utf8[]),uint64,uint64) = (txna ApplicationArgs 1)
        examples.struct_in_box.contract.ExampleContract.add_user(reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0)
        exit 1u

subroutine examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]() -> void:
    block@0: // L35
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%0#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        examples.struct_in_box.contract.ExampleContract.attach_asset_to_user(reinterpret_Encoded(uint64)%0#0, tmp%0#0)
        exit 1u

subroutine examples.struct_in_box.contract.ExampleContract.get_user[routing]() -> void:
    block@0: // L41
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%0#0: Encoded((len+utf8[]),uint64,uint64) = examples.struct_in_box.contract.ExampleContract.get_user(reinterpret_Encoded(uint64)%0#0)
        let tmp%1#0: bytes = (concat 0x151f7c75 tmp%0#0)
        (log tmp%1#0)
        exit 1u

subroutine examples.struct_in_box.contract.ExampleContract.read_from_box(user_id: Encoded(uint64)) -> Encoded((len+utf8[]),uint64,uint64):
    block@0: // L11
        let (tmp%0#0: bytes, tmp%1#0: bool) = (box_get user_id#0)
        let box_data#0: bytes = tmp%0#0
        let exists#0: bool = tmp%1#0
        (assert exists#0) // User with that id does not exist
        let reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0: Encoded((len+utf8[]),uint64,uint64) = box_data#0
        return reinterpret_Encoded((len+utf8[]),uint64,uint64)%0#0

subroutine examples.struct_in_box.contract.ExampleContract.write_to_box(user: Encoded((len+utf8[]),uint64,uint64)) -> Encoded((len+utf8[]),uint64,uint64):
    block@0: // L17
        let user%out#0: Encoded((len+utf8[]),uint64,uint64) = user#0
        let aggregate%extract%0#0: bytes = (extract3 user#0 2u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let box_key#0: bytes = tuple_item%0#0
        (box_del box_key#0)
        (box_put box_key#0 user#0)
        return user%out#0

subroutine examples.struct_in_box.contract.ExampleContract.box_exists(user_id: Encoded(uint64)) -> bool:
    block@0: // L25
        let (tmp%0#0: bytes, tmp%1#0: bool) = (box_get user_id#0)
        let exists#0: bool = tmp%1#0
        return exists#0

subroutine examples.struct_in_box.contract.ExampleContract.add_user(user: Encoded((len+utf8[]),uint64,uint64)) -> void:
    block@0: // L30
        let aggregate%extract%0#0: bytes = (extract3 user#0 2u 8u)
        let tuple_item%0#0: Encoded(uint64) = aggregate%extract%0#0
        let tmp%0#0: bool = examples.struct_in_box.contract.ExampleContract.box_exists(tuple_item%0#0)
        let tmp%1#0: bool = (! tmp%0#0)
        (assert tmp%1#0) // User with id must not exist
        let write_to_box%0#0: Encoded((len+utf8[]),uint64,uint64) = examples.struct_in_box.contract.ExampleContract.write_to_box(user#0)
        return 

subroutine examples.struct_in_box.contract.ExampleContract.attach_asset_to_user(user_id: Encoded(uint64), asset: uint64) -> void:
    block@0: // L35
        let tmp%0#0: Encoded((len+utf8[]),uint64,uint64) = examples.struct_in_box.contract.ExampleContract.read_from_box(user_id#0)
        let user#0: Encoded((len+utf8[]),uint64,uint64) = tmp%0#0
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let aggregate%updated_data%0#0: bytes = (replace3 user#0 10u tmp%1#0)
        let updated_tuple%0#0: Encoded((len+utf8[]),uint64,uint64) = aggregate%updated_data%0#0
        let user#0: Encoded((len+utf8[]),uint64,uint64) = updated_tuple%0#0
        let write_to_box%0#0: Encoded((len+utf8[]),uint64,uint64) = examples.struct_in_box.contract.ExampleContract.write_to_box(user#0)
        return 

subroutine examples.struct_in_box.contract.ExampleContract.get_user(user_id: Encoded(uint64)) -> Encoded((len+utf8[]),uint64,uint64):
    block@0: // L41
        let tmp%0#0: Encoded((len+utf8[]),uint64,uint64) = examples.struct_in_box.contract.ExampleContract.read_from_box(user_id#0)
        return tmp%0#0