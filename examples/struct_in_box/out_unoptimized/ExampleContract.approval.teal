#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 2 8 0
    b block@0

block@0:
    b block@1

block@1:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_0 // 1
    shl
    +
    intc_3 // 0
    intc_0 // 1
    intc_1 // 2
    pushint 3 // 3
    pushint 4 // 4
    pushint 5 // 5
    pushint 6 // 6
    pushint 7 // 7
    intc_2 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_ClearState:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_ClearState:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_OptIn:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_OptIn:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_NoOp:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    txn NumAppArgs
    intc_3 // 0
    ==
    bz else_body@10
    b __algopy_default_create@9

__algopy_default_create@9:
    b block@23

block@23:
    b after_inlined_examples.struct_in_box.contract.ExampleContract.__algopy_default_create@24

after_inlined_examples.struct_in_box.contract.ExampleContract.__algopy_default_create@24:
    intc_0 // 1
    return

else_body@10:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xda8534bd // method "add_user((string,uint64,uint64))void"
    pushbytes 0xb4633ddd // method "attach_asset_to_user(uint64,uint64)void"
    pushbytes 0x16545880 // method "get_user(uint64)(string,uint64,uint64)"
    uncover 3
    match add_user_route@3 attach_asset_to_user_route@4 get_user_route@5
    b switch_case_default@6

switch_case_default@6:
    b switch_case_next@7

switch_case_next@7:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    err // this contract does not implement the given ABI method for call NoOp

get_user_route@5:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    callsub get_user
    b switch_case_next@7

attach_asset_to_user_route@4:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    callsub attach_asset_to_user
    b switch_case_next@7

add_user_route@3:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    callsub add_user
    b switch_case_next@7


// examples.struct_in_box.contract.ExampleContract.add_user[routing]() -> void:
add_user:
    b add_user_block@0

add_user_block@0:
    // struct_in_box/contract.py:30
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub examples.struct_in_box.contract.ExampleContract.add_user
    intc_0 // 1
    return


// examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]() -> void:
attach_asset_to_user:
    b attach_asset_to_user_block@0

attach_asset_to_user_block@0:
    // struct_in_box/contract.py:35
    // @arc4.abimethod()
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    callsub examples.struct_in_box.contract.ExampleContract.attach_asset_to_user
    intc_0 // 1
    return


// examples.struct_in_box.contract.ExampleContract.get_user[routing]() -> void:
get_user:
    b get_user_block@0

get_user_block@0:
    // struct_in_box/contract.py:41
    // @arc4.abimethod()
    txna ApplicationArgs 1
    callsub examples.struct_in_box.contract.ExampleContract.get_user
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// examples.struct_in_box.contract.ExampleContract.read_from_box(user_id: bytes) -> bytes:
read_from_box:
    // struct_in_box/contract.py:11-12
    // @subroutine
    // def read_from_box(self, user_id: arc4.UInt64) -> UserStruct:
    proto 1 1
    b read_from_box_block@0

read_from_box_block@0:
    // struct_in_box/contract.py:13
    // box_data, exists = op.Box.get(user_id.bytes)
    frame_dig -1
    box_get
    // struct_in_box/contract.py:14
    // assert exists, "User with that id does not exist"
    assert // User with that id does not exist
    // struct_in_box/contract.py:15
    // return UserStruct.from_bytes(box_data)
    retsub


// examples.struct_in_box.contract.ExampleContract.write_to_box(user: bytes) -> bytes:
write_to_box:
    // struct_in_box/contract.py:17-18
    // @subroutine
    // def write_to_box(self, user: UserStruct) -> None:
    proto 1 1
    b write_to_box_block@0

write_to_box_block@0:
    frame_dig -1
    // struct_in_box/contract.py:19
    // box_key = user.id.bytes
    frame_dig -1
    intc_1 // 2
    intc_2 // 8
    extract3
    // struct_in_box/contract.py:20-21
    // # Delete existing data, so we don't have to worry about resizing the box
    // op.Box.delete(box_key)
    dup
    box_del
    pop
    // struct_in_box/contract.py:23
    // op.Box.put(box_key, user.bytes)
    frame_dig -1
    box_put
    retsub


// examples.struct_in_box.contract.ExampleContract.box_exists(user_id: bytes) -> uint64:
box_exists:
    // struct_in_box/contract.py:25-26
    // @subroutine
    // def box_exists(self, user_id: arc4.UInt64) -> bool:
    proto 1 1
    b box_exists_block@0

box_exists_block@0:
    // struct_in_box/contract.py:27
    // _data, exists = op.Box.get(user_id.bytes)
    frame_dig -1
    box_get
    // struct_in_box/contract.py:28
    // return exists
    uncover 1
    retsub


// examples.struct_in_box.contract.ExampleContract.add_user(user: bytes) -> void:
examples.struct_in_box.contract.ExampleContract.add_user:
    // struct_in_box/contract.py:30-31
    // @arc4.abimethod()
    // def add_user(self, user: UserStruct) -> None:
    proto 1 0
    b examples.struct_in_box.contract.ExampleContract.add_user_block@0

examples.struct_in_box.contract.ExampleContract.add_user_block@0:
    // struct_in_box/contract.py:32
    // assert not self.box_exists(user.id), "User with id must not exist"
    frame_dig -1
    intc_1 // 2
    intc_2 // 8
    extract3
    callsub box_exists
    !
    assert // User with id must not exist
    // struct_in_box/contract.py:33
    // self.write_to_box(user)
    frame_dig -1
    callsub write_to_box
    retsub


// examples.struct_in_box.contract.ExampleContract.attach_asset_to_user(user_id: bytes, asset: uint64) -> void:
examples.struct_in_box.contract.ExampleContract.attach_asset_to_user:
    // struct_in_box/contract.py:35-36
    // @arc4.abimethod()
    // def attach_asset_to_user(self, user_id: arc4.UInt64, asset: Asset) -> None:
    proto 2 0
    b examples.struct_in_box.contract.ExampleContract.attach_asset_to_user_block@0

examples.struct_in_box.contract.ExampleContract.attach_asset_to_user_block@0:
    // struct_in_box/contract.py:37
    // user = self.read_from_box(user_id)
    frame_dig -2
    callsub read_from_box
    // struct_in_box/contract.py:38
    // user.asset = arc4.UInt64(asset.id)
    frame_dig -1
    itob
    uncover 1
    pushint 10 // 10
    uncover 2
    replace3
    // struct_in_box/contract.py:39
    // self.write_to_box(user)
    callsub write_to_box
    retsub


// examples.struct_in_box.contract.ExampleContract.get_user(user_id: bytes) -> bytes:
examples.struct_in_box.contract.ExampleContract.get_user:
    // struct_in_box/contract.py:41-42
    // @arc4.abimethod()
    // def get_user(self, user_id: arc4.UInt64) -> UserStruct:
    proto 1 1
    b examples.struct_in_box.contract.ExampleContract.get_user_block@0

examples.struct_in_box.contract.ExampleContract.get_user_block@0:
    // struct_in_box/contract.py:43
    // return self.read_from_box(user_id)
    frame_dig -1
    callsub read_from_box
    retsub
