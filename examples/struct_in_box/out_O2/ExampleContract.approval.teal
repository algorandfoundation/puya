#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0xda8534bd 0x4eb4e9f1 0x16545880 // method "add_user((string,uint64,uint64))void", method "attach_asset_to_user(uint64,asset)void", method "get_user(uint64)(string,uint64,uint64)"
    txna ApplicationArgs 0
    match main_add_user_route@3 main_attach_asset_to_user_route@4 main_get_user_route@5

main_after_if_else@12:
    pushint 0 // 0
    return

main_get_user_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    box_get
    assert // User with that id does not exist
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_attach_asset_to_user_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    txnas Assets
    swap
    box_get
    assert // User with that id does not exist
    swap
    itob
    replace2 10
    dup
    extract 2 8 // on error: Index access is out of bounds
    dup
    box_del
    pop
    swap
    box_put
    intc_0 // 1
    return

main_add_user_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txna ApplicationArgs 1
    dup
    extract 2 8 // on error: Index access is out of bounds
    dup
    box_get
    bury 1
    !
    assert // User with id must not exist
    dup
    box_del
    pop
    swap
    box_put
    intc_0 // 1
    return

main_bare_routing@8:
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
