#pragma version 11
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 8 0
    txn NumAppArgs
    bz main___algopy_default_create@10
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xda8534bd 0xb4633ddd 0x16545880 // method "add_user((string,uint64,uint64))void", method "attach_asset_to_user(uint64,uint64)void", method "get_user(uint64)(string,uint64,uint64)"
    txna ApplicationArgs 0
    match main_add_user_route@4 main_attach_asset_to_user_route@5 main_get_user_route@6
    err

main_get_user_route@6:
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    box_get
    assert // User with that id does not exist
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_attach_asset_to_user_route@5:
    txna ApplicationArgs 1
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    txna ApplicationArgs 2
    dup
    len
    intc_1 // 8
    ==
    assert // invalid number of bytes for arc4.uint64
    swap
    box_get
    assert // User with that id does not exist
    swap
    replace2 10
    dup
    extract 2 8
    dup
    box_del
    pop
    swap
    box_put
    intc_0 // 1
    return

main_add_user_route@4:
    txna ApplicationArgs 1
    dup
    intc_2 // 0
    extract_uint16 // on error: invalid tuple encoding
    dup
    pushint 18 // 18
    ==
    assert // invalid tail pointer at index 0 of ((len+utf8[]),uint64,uint64)
    dig 1
    len
    dig 2
    uncover 2
    dig 2
    substring3
    intc_2 // 0
    extract_uint16 // on error: invalid array length header
    pushint 20 // 20
    +
    ==
    assert // invalid number of bytes for examples.struct_in_box.contract.UserStruct
    dup
    extract 2 8
    dup
    box_len
    bury 1
    !
    assert // User with id must not exist
    dup
    box_del
    pop
    swap
    box_put
    intc_0 // 1
    return

main___algopy_default_create@10:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    intc_0 // 1
    return
