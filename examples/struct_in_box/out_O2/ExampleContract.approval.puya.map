{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;AASA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;;AA+BK;;AAAA;AAAA;AAAA;;AAAA;AA/BL;;;AAG2B;AACnB;AA2BH;;;;;;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAzBL;;;AAAA;;;AAG2B;AACnB;AAwBA;AAAA;;AAnBU;AAAA;;;AAEV;AAAA;;AAEA;AAAA;AAYH;;AALA;;AAAA;AAAA;AAAA;;AAAA;AApBL;;;AAsBmC;AAAA;;;AALX;AAAA;AAAA;;AAKT;AAAP;AAXA;AAAA;;AAEA;AAAA;AAOH;;AApBL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "9": {
      "op": "pushbytess 0xda8534bd 0xb4633ddd 0x16545880 // method \"add_user((string,uint64,uint64))void\", method \"attach_asset_to_user(uint64,uint64)void\", method \"get_user(uint64)(string,uint64,uint64)\"",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))"
      ],
      "stack_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))"
      ]
    },
    "26": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))",
        "tmp%2#0"
      ]
    },
    "29": {
      "op": "match main_add_user_route@3 main_attach_asset_to_user_route@4 main_get_user_route@5",
      "stack_out": []
    },
    "37": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "39": {
      "op": "return",
      "stack_out": []
    },
    "40": {
      "block": "main_get_user_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "42": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "43": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "44": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "46": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "47": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "user_id#0"
      ],
      "stack_out": [
        "user_id#0"
      ]
    },
    "50": {
      "op": "box_get",
      "defined_out": [
        "box_data#0",
        "exists#0"
      ],
      "stack_out": [
        "box_data#0",
        "exists#0"
      ]
    },
    "51": {
      "error": "User with that id does not exist",
      "op": "assert // User with that id does not exist",
      "stack_out": [
        "box_data#0"
      ]
    },
    "52": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "box_data#0"
      ],
      "stack_out": [
        "box_data#0",
        "0x151f7c75"
      ]
    },
    "58": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "box_data#0"
      ]
    },
    "59": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "60": {
      "op": "log",
      "stack_out": []
    },
    "61": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "62": {
      "op": "return",
      "stack_out": []
    },
    "63": {
      "block": "main_attach_asset_to_user_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "65": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "66": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "67": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "69": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "70": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "73": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "user_id#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "user_id#0"
      ]
    },
    "76": {
      "op": "box_get",
      "defined_out": [
        "box_data#0",
        "exists#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box_data#0",
        "exists#0"
      ]
    },
    "77": {
      "error": "User with that id does not exist",
      "op": "assert // User with that id does not exist",
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box_data#0"
      ]
    },
    "78": {
      "op": "swap",
      "stack_out": [
        "box_data#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "79": {
      "op": "replace2 10",
      "defined_out": [
        "user#1"
      ],
      "stack_out": [
        "user#1"
      ]
    },
    "81": {
      "op": "dup",
      "defined_out": [
        "user#1",
        "user#1 (copy)"
      ],
      "stack_out": [
        "user#1",
        "user#1 (copy)"
      ]
    },
    "82": {
      "op": "extract 2 8",
      "defined_out": [
        "box_key#0",
        "user#1"
      ],
      "stack_out": [
        "user#1",
        "box_key#0"
      ]
    },
    "85": {
      "op": "dup",
      "defined_out": [
        "box_key#0",
        "box_key#0 (copy)",
        "user#1"
      ],
      "stack_out": [
        "user#1",
        "box_key#0",
        "box_key#0 (copy)"
      ]
    },
    "86": {
      "op": "box_del",
      "defined_out": [
        "box_key#0",
        "user#1",
        "{box_del}"
      ],
      "stack_out": [
        "user#1",
        "box_key#0",
        "{box_del}"
      ]
    },
    "87": {
      "op": "pop",
      "stack_out": [
        "user#1",
        "box_key#0"
      ]
    },
    "88": {
      "op": "swap",
      "stack_out": [
        "box_key#0",
        "user#1"
      ]
    },
    "89": {
      "op": "box_put",
      "stack_out": []
    },
    "90": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "91": {
      "op": "return",
      "stack_out": []
    },
    "92": {
      "block": "main_add_user_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "94": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "95": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "96": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "98": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "99": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "user#1"
      ],
      "stack_out": [
        "user#1"
      ]
    },
    "102": {
      "op": "dup",
      "defined_out": [
        "user#1",
        "user#1 (copy)"
      ],
      "stack_out": [
        "user#1",
        "user#1 (copy)"
      ]
    },
    "103": {
      "op": "extract 2 8",
      "defined_out": [
        "user#1",
        "user_id#0"
      ],
      "stack_out": [
        "user#1",
        "user_id#0"
      ]
    },
    "106": {
      "op": "dup",
      "defined_out": [
        "user#1",
        "user_id#0",
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user#1",
        "user_id#0",
        "user_id#0 (copy)"
      ]
    },
    "107": {
      "op": "box_len",
      "defined_out": [
        "_data#0",
        "exists#0",
        "user#1",
        "user_id#0"
      ],
      "stack_out": [
        "user#1",
        "user_id#0",
        "_data#0",
        "exists#0"
      ]
    },
    "108": {
      "op": "bury 1",
      "stack_out": [
        "user#1",
        "user_id#0",
        "exists#0"
      ]
    },
    "110": {
      "op": "!",
      "defined_out": [
        "tmp%1#2",
        "user#1",
        "user_id#0"
      ],
      "stack_out": [
        "user#1",
        "user_id#0",
        "tmp%1#2"
      ]
    },
    "111": {
      "error": "User with id must not exist",
      "op": "assert // User with id must not exist",
      "stack_out": [
        "user#1",
        "user_id#0"
      ]
    },
    "112": {
      "op": "dup",
      "stack_out": [
        "user#1",
        "user_id#0",
        "user_id#0 (copy)"
      ]
    },
    "113": {
      "op": "box_del",
      "defined_out": [
        "user#1",
        "user_id#0",
        "{box_del}"
      ],
      "stack_out": [
        "user#1",
        "user_id#0",
        "{box_del}"
      ]
    },
    "114": {
      "op": "pop",
      "stack_out": [
        "user#1",
        "user_id#0"
      ]
    },
    "115": {
      "op": "swap",
      "stack_out": [
        "user_id#0",
        "user#1"
      ]
    },
    "116": {
      "op": "box_put",
      "stack_out": []
    },
    "117": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "118": {
      "op": "return",
      "stack_out": []
    },
    "119": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "121": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "124": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "126": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "127": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "128": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "129": {
      "op": "return",
      "stack_out": []
    }
  }
}