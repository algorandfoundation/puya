{
    "name": "ExampleContract",
    "structs": {
        "UserStruct": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "asset",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "add_user",
            "args": [
                {
                    "type": "(string,uint64,uint64)",
                    "struct": "UserStruct",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "attach_asset_to_user",
            "args": [
                {
                    "type": "uint64",
                    "name": "user_id"
                },
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_user",
            "args": [
                {
                    "type": "uint64",
                    "name": "user_id"
                }
            ],
            "returns": {
                "type": "(string,uint64,uint64)",
                "struct": "UserStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        50,
                        65,
                        86
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        132
                    ],
                    "errorMessage": "User with id must not exist"
                },
                {
                    "pc": [
                        191
                    ],
                    "errorMessage": "User with that id does not exist"
                },
                {
                    "pc": [
                        115
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        53,
                        68,
                        89
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpleGFtcGxlcy5zdHJ1Y3RfaW5fYm94LmNvbnRyYWN0LkV4YW1wbGVDb250cmFjdC5hcHByb3ZhbF9wcm9ncmFtOgogICAgaW50Y2Jsb2NrIDEgMAogICAgY2FsbHN1YiBfX3B1eWFfYXJjNF9yb3V0ZXJfXwogICAgcmV0dXJuCgoKLy8gZXhhbXBsZXMuc3RydWN0X2luX2JveC5jb250cmFjdC5FeGFtcGxlQ29udHJhY3QuX19wdXlhX2FyYzRfcm91dGVyX18oKSAtPiB1aW50NjQ6Cl9fcHV5YV9hcmM0X3JvdXRlcl9fOgogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weToxMAogICAgLy8gY2xhc3MgRXhhbXBsZUNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICBwcm90byAwIDEKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19iYXJlX3JvdXRpbmdANwogICAgcHVzaGJ5dGVzcyAweGRhODUzNGJkIDB4NGViNGU5ZjEgMHgxNjU0NTg4MCAvLyBtZXRob2QgImFkZF91c2VyKChzdHJpbmcsdWludDY0LHVpbnQ2NCkpdm9pZCIsIG1ldGhvZCAiYXR0YWNoX2Fzc2V0X3RvX3VzZXIodWludDY0LGFzc2V0KXZvaWQiLCBtZXRob2QgImdldF91c2VyKHVpbnQ2NCkoc3RyaW5nLHVpbnQ2NCx1aW50NjQpIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggX19wdXlhX2FyYzRfcm91dGVyX19fYWRkX3VzZXJfcm91dGVAMiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19hdHRhY2hfYXNzZXRfdG9fdXNlcl9yb3V0ZUAzIF9fcHV5YV9hcmM0X3JvdXRlcl9fX2dldF91c2VyX3JvdXRlQDQKICAgIGludGNfMSAvLyAwCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2FkZF91c2VyX3JvdXRlQDI6CiAgICAvLyBzdHJ1Y3RfaW5fYm94L2NvbnRyYWN0LnB5OjMxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzdHJ1Y3RfaW5fYm94L2NvbnRyYWN0LnB5OjEwCiAgICAvLyBjbGFzcyBFeGFtcGxlQ29udHJhY3QoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHN0cnVjdF9pbl9ib3gvY29udHJhY3QucHk6MzEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFkZF91c2VyCiAgICBpbnRjXzAgLy8gMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19hdHRhY2hfYXNzZXRfdG9fdXNlcl9yb3V0ZUAzOgogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weTozNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weToxMAogICAgLy8gY2xhc3MgRXhhbXBsZUNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hcyBBc3NldHMKICAgIC8vIHN0cnVjdF9pbl9ib3gvY29udHJhY3QucHk6MzYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGF0dGFjaF9hc3NldF90b191c2VyCiAgICBpbnRjXzAgLy8gMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19nZXRfdXNlcl9yb3V0ZUA0OgogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weTo0MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weToxMAogICAgLy8gY2xhc3MgRXhhbXBsZUNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzdHJ1Y3RfaW5fYm94L2NvbnRyYWN0LnB5OjQyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBnZXRfdXNlcgogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19iYXJlX3JvdXRpbmdANzoKICAgIC8vIHN0cnVjdF9pbl9ib3gvY29udHJhY3QucHk6MTAKICAgIC8vIGNsYXNzIEV4YW1wbGVDb250cmFjdChBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IF9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTEKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19hZnRlcl9pZl9lbHNlQDExOgogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weToxMAogICAgLy8gY2xhc3MgRXhhbXBsZUNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzEgLy8gMAogICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMuc3RydWN0X2luX2JveC5jb250cmFjdC5FeGFtcGxlQ29udHJhY3QuYWRkX3VzZXIodXNlcjogYnl0ZXMpIC0+IHZvaWQ6CmFkZF91c2VyOgogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weTozMS0zMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBhZGRfdXNlcihzZWxmLCB1c2VyOiBVc2VyU3RydWN0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzdHJ1Y3RfaW5fYm94L2NvbnRyYWN0LnB5OjMzCiAgICAvLyBhc3NlcnQgbm90IHNlbGYuYm94X2V4aXN0cyh1c2VyLmlkKSwgIlVzZXIgd2l0aCBpZCBtdXN0IG5vdCBleGlzdCIKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAyIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBjYWxsc3ViIGJveF9leGlzdHMKICAgICEKICAgIGFzc2VydCAvLyBVc2VyIHdpdGggaWQgbXVzdCBub3QgZXhpc3QKICAgIC8vIHN0cnVjdF9pbl9ib3gvY29udHJhY3QucHk6MzQKICAgIC8vIHNlbGYud3JpdGVfdG9fYm94KHVzZXIpCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgd3JpdGVfdG9fYm94CiAgICBmcmFtZV9idXJ5IC0xCiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5zdHJ1Y3RfaW5fYm94LmNvbnRyYWN0LkV4YW1wbGVDb250cmFjdC5ib3hfZXhpc3RzKHVzZXJfaWQ6IGJ5dGVzKSAtPiB1aW50NjQ6CmJveF9leGlzdHM6CiAgICAvLyBzdHJ1Y3RfaW5fYm94L2NvbnRyYWN0LnB5OjI2LTI3CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGJveF9leGlzdHMoc2VsZiwgdXNlcl9pZDogYXJjNC5VSW50NjQpIC0+IGJvb2w6CiAgICBwcm90byAxIDEKICAgIC8vIHN0cnVjdF9pbl9ib3gvY29udHJhY3QucHk6MjgKICAgIC8vIF9kYXRhLCBleGlzdHMgPSBvcC5Cb3guZ2V0KHVzZXJfaWQuYnl0ZXMpCiAgICBmcmFtZV9kaWcgLTEKICAgIGJveF9nZXQKICAgIGJ1cnkgMQogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weToyOQogICAgLy8gcmV0dXJuIGV4aXN0cwogICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMuc3RydWN0X2luX2JveC5jb250cmFjdC5FeGFtcGxlQ29udHJhY3Qud3JpdGVfdG9fYm94KHVzZXI6IGJ5dGVzKSAtPiBieXRlczoKd3JpdGVfdG9fYm94OgogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weToxOC0xOQogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiB3cml0ZV90b19ib3goc2VsZiwgdXNlcjogVXNlclN0cnVjdCkgLT4gTm9uZToKICAgIHByb3RvIDEgMQogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weToyMAogICAgLy8gYm94X2tleSA9IHVzZXIuaWQuYnl0ZXMKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAyIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzdHJ1Y3RfaW5fYm94L2NvbnRyYWN0LnB5OjIxLTIyCiAgICAvLyAjIERlbGV0ZSBleGlzdGluZyBkYXRhLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHdvcnJ5IGFib3V0IHJlc2l6aW5nIHRoZSBib3gKICAgIC8vIG9wLkJveC5kZWxldGUoYm94X2tleSkKICAgIGR1cAogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBzdHJ1Y3RfaW5fYm94L2NvbnRyYWN0LnB5OjI0CiAgICAvLyBvcC5Cb3gucHV0KGJveF9rZXksIHVzZXIuYnl0ZXMpCiAgICBmcmFtZV9kaWcgLTEKICAgIGJveF9wdXQKICAgIGZyYW1lX2RpZyAtMQogICAgcmV0c3ViCgoKLy8gZXhhbXBsZXMuc3RydWN0X2luX2JveC5jb250cmFjdC5FeGFtcGxlQ29udHJhY3QuYXR0YWNoX2Fzc2V0X3RvX3VzZXIodXNlcl9pZDogYnl0ZXMsIGFzc2V0OiB1aW50NjQpIC0+IHZvaWQ6CmF0dGFjaF9hc3NldF90b191c2VyOgogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weTozNi0zNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBhdHRhY2hfYXNzZXRfdG9fdXNlcihzZWxmLCB1c2VyX2lkOiBhcmM0LlVJbnQ2NCwgYXNzZXQ6IEFzc2V0KSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBzdHJ1Y3RfaW5fYm94L2NvbnRyYWN0LnB5OjM4CiAgICAvLyB1c2VyID0gc2VsZi5yZWFkX2Zyb21fYm94KHVzZXJfaWQpCiAgICBmcmFtZV9kaWcgLTIKICAgIGNhbGxzdWIgcmVhZF9mcm9tX2JveAogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weTozOQogICAgLy8gdXNlci5hc3NldCA9IGFyYzQuVUludDY0KGFzc2V0LmlkKQogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICByZXBsYWNlMiAxMAogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weTo0MAogICAgLy8gc2VsZi53cml0ZV90b19ib3godXNlcikKICAgIGNhbGxzdWIgd3JpdGVfdG9fYm94CiAgICBwb3AKICAgIHJldHN1YgoKCi8vIGV4YW1wbGVzLnN0cnVjdF9pbl9ib3guY29udHJhY3QuRXhhbXBsZUNvbnRyYWN0LnJlYWRfZnJvbV9ib3godXNlcl9pZDogYnl0ZXMpIC0+IGJ5dGVzOgpyZWFkX2Zyb21fYm94OgogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weToxMi0xMwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiByZWFkX2Zyb21fYm94KHNlbGYsIHVzZXJfaWQ6IGFyYzQuVUludDY0KSAtPiBVc2VyU3RydWN0OgogICAgcHJvdG8gMSAxCiAgICAvLyBzdHJ1Y3RfaW5fYm94L2NvbnRyYWN0LnB5OjE0CiAgICAvLyBib3hfZGF0YSwgZXhpc3RzID0gb3AuQm94LmdldCh1c2VyX2lkLmJ5dGVzKQogICAgZnJhbWVfZGlnIC0xCiAgICBib3hfZ2V0CiAgICAvLyBzdHJ1Y3RfaW5fYm94L2NvbnRyYWN0LnB5OjE1CiAgICAvLyBhc3NlcnQgZXhpc3RzLCAiVXNlciB3aXRoIHRoYXQgaWQgZG9lcyBub3QgZXhpc3QiCiAgICBhc3NlcnQgLy8gVXNlciB3aXRoIHRoYXQgaWQgZG9lcyBub3QgZXhpc3QKICAgIC8vIHN0cnVjdF9pbl9ib3gvY29udHJhY3QucHk6MTYKICAgIC8vIHJldHVybiBVc2VyU3RydWN0LmZyb21fYnl0ZXMoYm94X2RhdGEpCiAgICByZXRzdWIKCgovLyBleGFtcGxlcy5zdHJ1Y3RfaW5fYm94LmNvbnRyYWN0LkV4YW1wbGVDb250cmFjdC5nZXRfdXNlcih1c2VyX2lkOiBieXRlcykgLT4gYnl0ZXM6CmdldF91c2VyOgogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weTo0Mi00MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBnZXRfdXNlcihzZWxmLCB1c2VyX2lkOiBhcmM0LlVJbnQ2NCkgLT4gVXNlclN0cnVjdDoKICAgIHByb3RvIDEgMQogICAgLy8gc3RydWN0X2luX2JveC9jb250cmFjdC5weTo0NAogICAgLy8gcmV0dXJuIHNlbGYucmVhZF9mcm9tX2JveCh1c2VyX2lkKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIHJlYWRfZnJvbV9ib3gKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpleGFtcGxlcy5zdHJ1Y3RfaW5fYm94LmNvbnRyYWN0LkV4YW1wbGVDb250cmFjdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiACAQCIAAFDigABMRtBAFqCAwTahTS9BE606fEEFlRYgDYaAI4DAAIAEQAmI4kxGRREMRhENhoBiAA8IokxGRREMRhENhoBNhoCF8AwiABWIokxGRREMRhENhoBiABhgAQVH3x1TFCwIokxGUAABjEYFEQiiSOJigEAi/9XAgiIAAoURIv/iAAMjP+JigEBi/++RQGJigEBi/9XAghJvEiL/7+L/4mKAgCL/ogACov/FlwKiP/fSImKAQGL/75EiYoBAYv/iP/wiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}