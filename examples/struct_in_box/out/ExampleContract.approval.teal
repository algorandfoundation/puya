#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@10
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0xda8534bd 0xb4633ddd 0x16545880 // method "add_user((string,uint64,uint64))void", method "attach_asset_to_user(uint64,uint64)void", method "get_user(uint64)(string,uint64,uint64)"
    txna ApplicationArgs 0
    match add_user attach_asset_to_user get_user
    err

main___algopy_default_create@10:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// examples.struct_in_box.contract.ExampleContract.add_user[routing]() -> void:
add_user:
    // struct_in_box/contract.py:30
    // @arc4.abimethod()
    txna ApplicationArgs 1
    // struct_in_box/contract.py:32
    // assert not self.box_exists(user.id), "User with id must not exist"
    dup
    extract 2 8
    // struct_in_box/contract.py:27
    // _data, exists = op.Box.get(user_id.bytes)
    dup
    box_len
    bury 1
    // struct_in_box/contract.py:32
    // assert not self.box_exists(user.id), "User with id must not exist"
    !
    assert // User with id must not exist
    // struct_in_box/contract.py:20-21
    // # Delete existing data, so we don't have to worry about resizing the box
    // op.Box.delete(box_key)
    dup
    box_del
    pop
    // struct_in_box/contract.py:23
    // op.Box.put(box_key, user.bytes)
    swap
    box_put
    // struct_in_box/contract.py:30
    // @arc4.abimethod()
    pushint 1 // 1
    return


// examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]() -> void:
attach_asset_to_user:
    // struct_in_box/contract.py:35
    // @arc4.abimethod()
    txna ApplicationArgs 2
    txna ApplicationArgs 1
    // struct_in_box/contract.py:13
    // box_data, exists = op.Box.get(user_id.bytes)
    box_get
    // struct_in_box/contract.py:14
    // assert exists, "User with that id does not exist"
    assert // User with that id does not exist
    // struct_in_box/contract.py:38
    // user.asset = arc4.UInt64(asset.id)
    swap
    replace2 10
    // struct_in_box/contract.py:19
    // box_key = user.id.bytes
    dup
    extract 2 8
    // struct_in_box/contract.py:20-21
    // # Delete existing data, so we don't have to worry about resizing the box
    // op.Box.delete(box_key)
    dup
    box_del
    pop
    // struct_in_box/contract.py:23
    // op.Box.put(box_key, user.bytes)
    swap
    box_put
    // struct_in_box/contract.py:35
    // @arc4.abimethod()
    pushint 1 // 1
    return


// examples.struct_in_box.contract.ExampleContract.get_user[routing]() -> void:
get_user:
    // struct_in_box/contract.py:41
    // @arc4.abimethod()
    txna ApplicationArgs 1
    // struct_in_box/contract.py:13
    // box_data, exists = op.Box.get(user_id.bytes)
    box_get
    // struct_in_box/contract.py:14
    // assert exists, "User with that id does not exist"
    assert // User with that id does not exist
    // struct_in_box/contract.py:41
    // @arc4.abimethod()
    pushbytes 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return
