contract ExampleContract extends (algopy.arc4.ARC4Contract)
{
  approval_program(): bool
  {
    return arc4_router()
  }
  
  baremethod __algopy_default_create(): void
  {
  }
  
  subroutine read_from_box(user_id: arc4.uint64): examples.struct_in_box.contract.UserStruct
  {
    (box_data, exists): tuple<bytes,bool> = box_get(reinterpret_cast<bytes>(user_id))
    assert(exists, comment="User with that id does not exist")
    return reinterpret_cast<examples.struct_in_box.contract.UserStruct>(box_data)
  }
  
  subroutine write_to_box(user: examples.struct_in_box.contract.UserStruct): void
  {
    box_key: bytes = reinterpret_cast<bytes>(user.id)
    box_del(box_key)
    box_put(box_key, reinterpret_cast<bytes>(user))
  }
  
  subroutine box_exists(user_id: arc4.uint64): bool
  {
    (_data, exists): tuple<bytes,bool> = box_get(reinterpret_cast<bytes>(user_id))
    return exists
  }
  
  abimethod add_user(user: examples.struct_in_box.contract.UserStruct): void
  {
    assert(!(this::box_exists(user.id)), comment="User with id must not exist")
    this::write_to_box(user)
  }
  
  abimethod attach_asset_to_user(user_id: arc4.uint64, asset: asset): void
  {
    user: examples.struct_in_box.contract.UserStruct = this::read_from_box(user_id)
    user.asset: arc4.uint64 = arc4_encode(reinterpret_cast<uint64>(asset), arc4.uint64)
    this::write_to_box(user)
  }
  
  abimethod get_user(user_id: arc4.uint64): examples.struct_in_box.contract.UserStruct
  {
    return this::read_from_box(user_id)
  }
}