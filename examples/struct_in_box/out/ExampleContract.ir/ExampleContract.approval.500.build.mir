// Op                                                                                   Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    block@0:
        // struct_in_box/contract.py:10
        // class ExampleContract(ARC4Contract):
        txn ApplicationID                                                               tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                                  tmp%0#1
        !                                                                               tmp%1#0
        v-store tmp%1#0
        txn OnCompletion                                                                tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                  tmp%2#0
        int 1                                                                           tmp%2#0,1
        shl                                                                             tmp%3#0
        v-store tmp%3#0
        v-load tmp%1#0                                                                  tmp%1#0
        v-load tmp%3#0                                                                  tmp%1#0,tmp%3#0
        +                                                                               tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                  tmp%4#0
        switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED ; b *NOT_IMPLEMENTED 

    call_NoOp:
        // struct_in_box/contract.py:10
        // class ExampleContract(ARC4Contract):
        txna ApplicationArgs 0                                                          tmp%5#0
        v-store tmp%5#0
        method add_user((string,uint64,uint64))void                                     Method(add_user((string,uint64,uint64))void)
        method attach_asset_to_user(uint64,uint64)void                                  Method(add_user((string,uint64,uint64))void),Method(attach_asset_to_user(uint64,uint64)void)
        method get_user(uint64)(string,uint64,uint64)                                   Method(add_user((string,uint64,uint64))void),Method(attach_asset_to_user(uint64,uint64)void),Method(get_user(uint64)(string,uint64,uint64))
        v-load tmp%5#0                                                                  Method(add_user((string,uint64,uint64))void),Method(attach_asset_to_user(uint64,uint64)void),Method(get_user(uint64)(string,uint64,uint64)),tmp%5#0
        match add_user_route@3 attach_asset_to_user_route@4 get_user_route@5 ; b switch_case_next@7 

    add_user_route@3:
        // struct_in_box/contract.py:10
        // class ExampleContract(ARC4Contract):
        callsub add_user
        b switch_case_next@7

    attach_asset_to_user_route@4:
        // struct_in_box/contract.py:10
        // class ExampleContract(ARC4Contract):
        callsub attach_asset_to_user
        b switch_case_next@7

    get_user_route@5:
        // struct_in_box/contract.py:10
        // class ExampleContract(ARC4Contract):
        callsub get_user
        b switch_case_next@7

    switch_case_next@7:
        // struct_in_box/contract.py:10
        // class ExampleContract(ARC4Contract):
        err // this contract does not implement the given ABI method for call NoOp

    create_NoOp:
        // struct_in_box/contract.py:10
        // class ExampleContract(ARC4Contract):
        txn NumAppArgs                                                                  tmp%6#0
        v-store tmp%6#0
        v-load tmp%6#0                                                                  tmp%6#0
        !                                                                               tmp%7#0
        v-store tmp%7#0
        v-load tmp%7#0                                                                  tmp%7#0
        assert // this contract does not implement the given ABI method for create NoOp
        int 1                                                                           1
        return

    *NOT_IMPLEMENTED:
        // struct_in_box/contract.py:10
        // class ExampleContract(ARC4Contract):
        err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID? 


// examples.struct_in_box.contract.ExampleContract.add_user[routing]() -> void:
subroutine add_user:
    add_user_block@0:
        // struct_in_box/contract.py:30
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          user#0
        v-store user#0
        // struct_in_box/contract.py:32
        // assert not self.box_exists(user.id), "User with id must not exist"
        v-load user#0                                                                   user#0
        extract 2 8                                                                     user_id#0
        v-store user_id#0
        // struct_in_box/contract.py:27
        // _data, exists = op.Box.get(user_id.bytes)
        v-load user_id#0                                                                user_id#0
        box_len                                                                         _data#0,exists#0
        v-store exists#0                                                                _data#0
        v-store _data#0
        // struct_in_box/contract.py:32
        // assert not self.box_exists(user.id), "User with id must not exist"
        v-load exists#0                                                                 exists#0
        !                                                                               tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                  tmp%1#0
        assert // User with id must not exist
        // struct_in_box/contract.py:21
        // op.Box.delete(box_key)
        v-load user_id#0                                                                user_id#0
        box_del                                                                         {box_del}
        pop 1
        // struct_in_box/contract.py:23
        // op.Box.put(box_key, user.bytes)
        v-load user_id#0                                                                user_id#0
        v-load user#0                                                                   user_id#0,user#0
        box_put
        // struct_in_box/contract.py:30
        // @arc4.abimethod()
        int 1                                                                           1
        return


// examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]() -> void:
subroutine attach_asset_to_user:
    attach_asset_to_user_block@0:
        // struct_in_box/contract.py:35
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          user_id#0
        v-store user_id#0
        txna ApplicationArgs 2                                                          reinterpret_Encoded(uint64)%1#0
        v-store reinterpret_Encoded(uint64)%1#0
        // struct_in_box/contract.py:13
        // box_data, exists = op.Box.get(user_id.bytes)
        v-load user_id#0                                                                user_id#0
        box_get                                                                         box_data#0,exists#0
        v-store exists#0                                                                box_data#0
        v-store box_data#0
        // struct_in_box/contract.py:14
        // assert exists, "User with that id does not exist"
        v-load exists#0                                                                 exists#0
        assert // User with that id does not exist
        // struct_in_box/contract.py:38
        // user.asset = arc4.UInt64(asset.id)
        v-load box_data#0                                                               box_data#0
        v-load reinterpret_Encoded(uint64)%1#0                                          box_data#0,reinterpret_Encoded(uint64)%1#0
        replace2 10                                                                     user#1
        v-store user#1
        // struct_in_box/contract.py:19
        // box_key = user.id.bytes
        v-load user#1                                                                   user#1
        extract 2 8                                                                     box_key#0
        v-store box_key#0
        // struct_in_box/contract.py:21
        // op.Box.delete(box_key)
        v-load box_key#0                                                                box_key#0
        box_del                                                                         {box_del}
        pop 1
        // struct_in_box/contract.py:23
        // op.Box.put(box_key, user.bytes)
        v-load box_key#0                                                                box_key#0
        v-load user#1                                                                   box_key#0,user#1
        box_put
        // struct_in_box/contract.py:35
        // @arc4.abimethod()
        int 1                                                                           1
        return


// examples.struct_in_box.contract.ExampleContract.get_user[routing]() -> void:
subroutine get_user:
    get_user_block@0:
        // struct_in_box/contract.py:41
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                          user_id#0
        v-store user_id#0
        // struct_in_box/contract.py:13
        // box_data, exists = op.Box.get(user_id.bytes)
        v-load user_id#0                                                                user_id#0
        box_get                                                                         box_data#0,exists#0
        v-store exists#0                                                                box_data#0
        v-store box_data#0
        // struct_in_box/contract.py:14
        // assert exists, "User with that id does not exist"
        v-load exists#0                                                                 exists#0
        assert // User with that id does not exist
        // struct_in_box/contract.py:41
        // @arc4.abimethod()
        byte 0x151f7c75                                                                 0x151f7c75
        v-load box_data#0                                                               0x151f7c75,box_data#0
        concat                                                                          tmp%1#0
        v-store tmp%1#0
        v-load tmp%1#0                                                                  tmp%1#0
        log
        int 1                                                                           1
        return


