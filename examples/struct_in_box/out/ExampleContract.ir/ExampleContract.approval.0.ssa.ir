main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__()
        return tmp%0#0

subroutine examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__() -> bool:
    block@0: // L10
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@7
    block@1: // abi_routing_L10
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "add_user((string,uint64,uint64))void" => block@2, method "attach_asset_to_user(uint64,asset)void" => block@3, method "get_user(uint64)(string,uint64,uint64)" => block@4, * => block@5}
    block@2: // add_user_route_L30
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded((len+utf8[],uint64,uint64))%0#0: Encoded((len+utf8[],uint64,uint64)) = (txna ApplicationArgs 1)
        examples.struct_in_box.contract.ExampleContract.add_user(reinterpret_Encoded((len+utf8[],uint64,uint64))%0#0)
        return 1u
    block@3: // attach_asset_to_user_route_L35
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (== tmp%7#0 NoOp)
        (assert tmp%8#0) // OnCompletion is not NoOp
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (!= tmp%9#0 0u)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 2)
        let tmp%11#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let tmp%12#0: uint64 = ((txnas Assets) tmp%11#0)
        examples.struct_in_box.contract.ExampleContract.attach_asset_to_user(reinterpret_Encoded(uint64)%0#0, tmp%12#0)
        return 1u
    block@4: // get_user_route_L41
        let tmp%13#0: uint64 = (txn OnCompletion)
        let tmp%14#0: bool = (== tmp%13#0 NoOp)
        (assert tmp%14#0) // OnCompletion is not NoOp
        let tmp%15#0: uint64 = (txn ApplicationID)
        let tmp%16#0: bool = (!= tmp%15#0 0u)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%17#0: Encoded((len+utf8[],uint64,uint64)) = examples.struct_in_box.contract.ExampleContract.get_user(reinterpret_Encoded(uint64)%1#0)
        let tmp%18#0: bytes = (concat 0x151f7c75 tmp%17#0)
        (log tmp%18#0)
        return 1u
    block@5: // switch_case_default_L10
        goto block@6
    block@6: // switch_case_next_L10
        goto block@11
    block@7: // bare_routing_L10
        let tmp%19#0: uint64 = (txn OnCompletion)
        switch tmp%19#0 {0u => block@8, * => block@9}
    block@8: // __algopy_default_create_L1
        let tmp%20#0: uint64 = (txn ApplicationID)
        let tmp%21#0: bool = (== tmp%20#0 0u)
        (assert tmp%21#0) // can only call when creating
        examples.struct_in_box.contract.ExampleContract.__algopy_default_create()
        return 1u
    block@9: // switch_case_default_L10
        goto block@10
    block@10: // switch_case_next_L10
        goto block@11
    block@11: // after_if_else_L10
        return 0u

subroutine examples.struct_in_box.contract.ExampleContract.read_from_box(user_id: Encoded(uint64)) -> Encoded((len+utf8[],uint64,uint64)):
    block@0: // L11
        let (materialized_values%0#0: bytes, materialized_values%1#0: bool) = (box_get user_id#0)
        let box_data#0: bytes = materialized_values%0#0
        let exists#0: bool = materialized_values%1#0
        (assert exists#0) // User with that id does not exist
        let reinterpret_Encoded((len+utf8[],uint64,uint64))%0#0: Encoded((len+utf8[],uint64,uint64)) = box_data#0
        return reinterpret_Encoded((len+utf8[],uint64,uint64))%0#0

subroutine examples.struct_in_box.contract.ExampleContract.write_to_box(user: Encoded((len+utf8[],uint64,uint64))) -> Encoded((len+utf8[],uint64,uint64)):
    block@0: // L17
        let user%is_original#0: bool = 1u
        let user%out#0: Encoded((len+utf8[],uint64,uint64)) = user#0
        let materialized_values%0#0: bytes = (extract3 user#0 2u 8u) // on error: Index access is out of bounds
        let box_key#0: bytes = materialized_values%0#0
        (box_del box_key#0)
        (box_put box_key#0 user#0)
        return user%out#0

subroutine examples.struct_in_box.contract.ExampleContract.box_exists(user_id: Encoded(uint64)) -> bool:
    block@0: // L25
        let (materialized_values%0#0: bytes, materialized_values%1#0: bool) = (box_get user_id#0)
        let _data#0: bytes = materialized_values%0#0
        let exists#0: bool = materialized_values%1#0
        return exists#0

subroutine examples.struct_in_box.contract.ExampleContract.add_user(user: Encoded((len+utf8[],uint64,uint64))) -> void:
    block@0: // L30
        let tmp%0#0: bytes = (extract3 user#0 2u 8u) // on error: Index access is out of bounds
        let tmp%1#0: bool = examples.struct_in_box.contract.ExampleContract.box_exists(tmp%0#0)
        let tmp%2#0: bool = (! tmp%1#0)
        (assert tmp%2#0) // User with id must not exist
        let write_to_box%0#0: Encoded((len+utf8[],uint64,uint64)) = examples.struct_in_box.contract.ExampleContract.write_to_box(user#0)
        let user#1: Encoded((len+utf8[],uint64,uint64)) = write_to_box%0#0
        return 

subroutine examples.struct_in_box.contract.ExampleContract.attach_asset_to_user(user_id: Encoded(uint64), asset: uint64) -> void:
    block@0: // L35
        let materialized_values%0#0: Encoded((len+utf8[],uint64,uint64)) = examples.struct_in_box.contract.ExampleContract.read_from_box(user_id#0)
        let user#0: Encoded((len+utf8[],uint64,uint64)) = materialized_values%0#0
        let val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let as_Encoded(uint64)%0#0: Encoded(uint64) = val_as_bytes%0#0
        let updated_data%0#0: bytes = (replace3 user#0 10u as_Encoded(uint64)%0#0)
        let user#1: Encoded((len+utf8[],uint64,uint64)) = updated_data%0#0
        let write_to_box%0#0: Encoded((len+utf8[],uint64,uint64)) = examples.struct_in_box.contract.ExampleContract.write_to_box(user#1)
        let user#2: Encoded((len+utf8[],uint64,uint64)) = write_to_box%0#0
        return 

subroutine examples.struct_in_box.contract.ExampleContract.get_user(user_id: Encoded(uint64)) -> Encoded((len+utf8[],uint64,uint64)):
    block@0: // L41
        let tmp%0#0: Encoded((len+utf8[],uint64,uint64)) = examples.struct_in_box.contract.ExampleContract.read_from_box(user_id#0)
        return tmp%0#0

subroutine examples.struct_in_box.contract.ExampleContract.__algopy_default_create() -> void:
    block@0: // L1
        return 