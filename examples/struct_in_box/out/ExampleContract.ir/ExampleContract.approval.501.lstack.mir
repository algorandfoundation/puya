// Op                                                                                    Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // struct_in_box/contract.py:10
        // class ExampleContract(ARC4Contract):
        txn NumAppArgs                                                                   tmp%0#1
        l-load tmp%0#1 0                                                                 tmp%0#1
        bz main___algopy_default_create@10 ; b main_abi_routing@2

    main_abi_routing@2:
        // struct_in_box/contract.py:10
        // class ExampleContract(ARC4Contract):
        txn OnCompletion                                                                 tmp%2#0
        l-load tmp%2#0 0                                                                 tmp%2#0
        !                                                                                tmp%3#0
        l-load tmp%3#0 0                                                                 tmp%3#0
        assert // OnCompletion must be NoOp
        txn ApplicationID                                                                tmp%4#0
        l-load tmp%4#0 0                                                                 tmp%4#0
        assert
        txna ApplicationArgs 0                                                           tmp%6#0
        method add_user((string,uint64,uint64))void                                      tmp%6#0,Method(add_user((string,uint64,uint64))void)
        method attach_asset_to_user(uint64,uint64)void                                   tmp%6#0,Method(add_user((string,uint64,uint64))void),Method(attach_asset_to_user(uint64,uint64)void)
        method get_user(uint64)(string,uint64,uint64)                                    tmp%6#0,Method(add_user((string,uint64,uint64))void),Method(attach_asset_to_user(uint64,uint64)void),Method(get_user(uint64)(string,uint64,uint64))
        l-load tmp%6#0 3                                                                 Method(add_user((string,uint64,uint64))void),Method(attach_asset_to_user(uint64,uint64)void),Method(get_user(uint64)(string,uint64,uint64)),tmp%6#0
        match main_add_user_route@4 main_attach_asset_to_user_route@5 main_get_user_route@6 ; b main_after_if_else@9 

    main_add_user_route@4:
        // struct_in_box/contract.py:30
        // @arc4.abimethod()
        callsub add_user
        b main_after_if_else@9

    main_attach_asset_to_user_route@5:
        // struct_in_box/contract.py:35
        // @arc4.abimethod()
        callsub attach_asset_to_user
        b main_after_if_else@9

    main_get_user_route@6:
        // struct_in_box/contract.py:41
        // @arc4.abimethod()
        callsub get_user
        b main_after_if_else@9

    main_after_if_else@9:
        // struct_in_box/contract.py:10
        // class ExampleContract(ARC4Contract):
        err

    main___algopy_default_create@10:
        txn OnCompletion                                                                 tmp%7#0
        l-load tmp%7#0 0                                                                 tmp%7#0
        !                                                                                tmp%8#0
        txn ApplicationID                                                                tmp%8#0,tmp%9#0
        l-load tmp%9#0 0                                                                 tmp%8#0,tmp%9#0
        !                                                                                tmp%8#0,tmp%10#0
        l-load tmp%8#0 1                                                                 tmp%10#0,tmp%8#0
        l-load tmp%10#0 1                                                                tmp%8#0,tmp%10#0
        &&                                                                               tmp%11#0
        l-load tmp%11#0 0                                                                tmp%11#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                                            1
        return


// examples.struct_in_box.contract.ExampleContract.add_user[routing]() -> void:
subroutine add_user:
    add_user_block@0:
        // struct_in_box/contract.py:30
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                           user#0
        l-load-copy user#0 0                                                             user#0,user#0 (copy)
        int 0                                                                            user#0,user#0 (copy),0
        extract_uint16 // on error: invalid tuple encoding                               user#0,extract_uint16%0#0
        l-load-copy extract_uint16%0#0 0                                                 user#0,extract_uint16%0#0,extract_uint16%0#0 (copy)
        int 18                                                                           user#0,extract_uint16%0#0,extract_uint16%0#0 (copy),18
        ==                                                                               user#0,extract_uint16%0#0,eq%0#0
        l-load eq%0#0 0                                                                  user#0,extract_uint16%0#0,eq%0#0
        assert // invalid tail pointer at index 0 of ((len+utf8[]),uint64,uint64)        user#0,extract_uint16%0#0
        l-load-copy user#0 1                                                             user#0,extract_uint16%0#0,user#0 (copy)
        len                                                                              user#0,extract_uint16%0#0,aggregate%len%0#0
        l-load-copy user#0 2                                                             user#0,extract_uint16%0#0,aggregate%len%0#0,user#0 (copy)
        l-load extract_uint16%0#0 2                                                      user#0,aggregate%len%0#0,user#0 (copy),extract_uint16%0#0
        l-load-copy aggregate%len%0#0 2                                                  user#0,aggregate%len%0#0,user#0 (copy),extract_uint16%0#0,aggregate%len%0#0 (copy)
        substring3                                                                       user#0,aggregate%len%0#0,aggregate%substring3%0#0
        l-load aggregate%substring3%0#0 0                                                user#0,aggregate%len%0#0,aggregate%substring3%0#0
        int 0                                                                            user#0,aggregate%len%0#0,aggregate%substring3%0#0,0
        extract_uint16 // on error: invalid array length header                          user#0,aggregate%len%0#0,aggregate%array_length%0#0
        l-load aggregate%array_length%0#0 0                                              user#0,aggregate%len%0#0,aggregate%array_length%0#0
        int 20                                                                           user#0,aggregate%len%0#0,aggregate%array_length%0#0,20
        +                                                                                user#0,aggregate%len%0#0,add%1#0
        l-load aggregate%len%0#0 1                                                       user#0,add%1#0,aggregate%len%0#0
        l-load add%1#0 1                                                                 user#0,aggregate%len%0#0,add%1#0
        ==                                                                               user#0,eq%1#0
        l-load eq%1#0 0                                                                  user#0,eq%1#0
        assert // invalid number of bytes for examples.struct_in_box.contract.UserStruct user#0
        // struct_in_box/contract.py:32
        // assert not self.box_exists(user.id), "User with id must not exist"
        l-load-copy user#0 0                                                             user#0,user#0 (copy)
        extract 2 8                                                                      user#0,user_id#0
        // struct_in_box/contract.py:27
        // _data, exists = op.Box.get(user_id.bytes)
        l-load-copy user_id#0 0                                                          user#0,user_id#0,user_id#0 (copy)
        box_len                                                                          user#0,user_id#0,_data#0,exists#0
        l-store exists#0 1                                                               user#0,user_id#0,exists#0,_data#0
        v-store _data#0                                                                  user#0,user_id#0,exists#0
        // struct_in_box/contract.py:32
        // assert not self.box_exists(user.id), "User with id must not exist"
        l-load exists#0 0                                                                user#0,user_id#0,exists#0
        !                                                                                user#0,user_id#0,tmp%1#1
        l-load tmp%1#1 0                                                                 user#0,user_id#0,tmp%1#1
        assert // User with id must not exist                                            user#0,user_id#0
        // struct_in_box/contract.py:21
        // op.Box.delete(box_key)
        l-load-copy user_id#0 0                                                          user#0,user_id#0,user_id#0 (copy)
        box_del                                                                          user#0,user_id#0,{box_del}
        pop 1                                                                            user#0,user_id#0
        // struct_in_box/contract.py:23
        // op.Box.put(box_key, user.bytes)
        l-load user_id#0 0                                                               user#0,user_id#0
        l-load user#0 1                                                                  user_id#0,user#0
        box_put
        // struct_in_box/contract.py:30
        // @arc4.abimethod()
        int 1                                                                            1
        return


// examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]() -> void:
subroutine attach_asset_to_user:
    attach_asset_to_user_block@0:
        // struct_in_box/contract.py:35
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                           user_id#0
        l-load-copy user_id#0 0                                                          user_id#0,user_id#0 (copy)
        len                                                                              user_id#0,len%0#0
        l-load len%0#0 0                                                                 user_id#0,len%0#0
        int 8                                                                            user_id#0,len%0#0,8
        ==                                                                               user_id#0,eq%0#0
        l-load eq%0#0 0                                                                  user_id#0,eq%0#0
        assert // invalid number of bytes for arc4.uint64                                user_id#0
        txna ApplicationArgs 2                                                           user_id#0,tmp%1#0
        l-load-copy tmp%1#0 0                                                            user_id#0,tmp%1#0,tmp%1#0 (copy)
        len                                                                              user_id#0,tmp%1#0,len%1#0
        l-load len%1#0 0                                                                 user_id#0,tmp%1#0,len%1#0
        int 8                                                                            user_id#0,tmp%1#0,len%1#0,8
        ==                                                                               user_id#0,tmp%1#0,eq%1#0
        l-load eq%1#0 0                                                                  user_id#0,tmp%1#0,eq%1#0
        assert // invalid number of bytes for arc4.uint64                                user_id#0,tmp%1#0
        // struct_in_box/contract.py:13
        // box_data, exists = op.Box.get(user_id.bytes)
        l-load user_id#0 1                                                               tmp%1#0,user_id#0
        box_get                                                                          tmp%1#0,box_data#0,exists#0
        // struct_in_box/contract.py:14
        // assert exists, "User with that id does not exist"
        l-load exists#0 0                                                                tmp%1#0,box_data#0,exists#0
        assert // User with that id does not exist                                       tmp%1#0,box_data#0
        // struct_in_box/contract.py:38
        // user.asset = arc4.UInt64(asset.id)
        l-load box_data#0 0                                                              tmp%1#0,box_data#0
        l-load tmp%1#0 1                                                                 box_data#0,tmp%1#0
        replace2 10                                                                      user#1
        // struct_in_box/contract.py:19
        // box_key = user.id.bytes
        l-load-copy user#1 0                                                             user#1,user#1 (copy)
        extract 2 8                                                                      user#1,box_key#0
        // struct_in_box/contract.py:21
        // op.Box.delete(box_key)
        l-load-copy box_key#0 0                                                          user#1,box_key#0,box_key#0 (copy)
        box_del                                                                          user#1,box_key#0,{box_del}
        pop 1                                                                            user#1,box_key#0
        // struct_in_box/contract.py:23
        // op.Box.put(box_key, user.bytes)
        l-load box_key#0 0                                                               user#1,box_key#0
        l-load user#1 1                                                                  box_key#0,user#1
        box_put
        // struct_in_box/contract.py:35
        // @arc4.abimethod()
        int 1                                                                            1
        return


// examples.struct_in_box.contract.ExampleContract.get_user[routing]() -> void:
subroutine get_user:
    get_user_block@0:
        // struct_in_box/contract.py:41
        // @arc4.abimethod()
        txna ApplicationArgs 1                                                           user_id#0
        l-load-copy user_id#0 0                                                          user_id#0,user_id#0 (copy)
        len                                                                              user_id#0,len%0#0
        l-load len%0#0 0                                                                 user_id#0,len%0#0
        int 8                                                                            user_id#0,len%0#0,8
        ==                                                                               user_id#0,eq%0#0
        l-load eq%0#0 0                                                                  user_id#0,eq%0#0
        assert // invalid number of bytes for arc4.uint64                                user_id#0
        // struct_in_box/contract.py:13
        // box_data, exists = op.Box.get(user_id.bytes)
        l-load user_id#0 0                                                               user_id#0
        box_get                                                                          box_data#0,exists#0
        // struct_in_box/contract.py:14
        // assert exists, "User with that id does not exist"
        l-load exists#0 0                                                                box_data#0,exists#0
        assert // User with that id does not exist                                       box_data#0
        // struct_in_box/contract.py:41
        // @arc4.abimethod()
        byte 0x151f7c75                                                                  box_data#0,0x151f7c75
        l-load box_data#0 1                                                              0x151f7c75,box_data#0
        concat                                                                           tmp%2#0
        l-load tmp%2#0 0                                                                 tmp%2#0
        log
        int 1                                                                            1
        return


