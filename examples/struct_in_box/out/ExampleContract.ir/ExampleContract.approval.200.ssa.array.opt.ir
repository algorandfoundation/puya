main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@17
    block@2: // abi_routing_L10
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "add_user((string,uint64,uint64))void" => block@6, method "attach_asset_to_user(uint64,uint64)void" => block@7, method "get_user(uint64)(string,uint64,uint64)" => block@8, * => block@9}
    block@6: // add_user_route_L30
        examples.struct_in_box.contract.ExampleContract.add_user[routing]()
        fail
    block@7: // attach_asset_to_user_route_L35
        examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]()
        fail
    block@8: // get_user_route_L41
        examples.struct_in_box.contract.ExampleContract.get_user[routing]()
        fail
    block@9: // switch_case_default_L10
        fail
    block@17: // bare_routing_L10
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit 1u

subroutine examples.struct_in_box.contract.ExampleContract.add_user[routing]() -> void:
    block@0: // L30
        let user#0: Encoded((len+utf8[]),uint64,uint64) = (txna ApplicationArgs 1)
        let user_id#0: Encoded(uint64) = ((extract 2 8) user#0)
        let (_data#0: uint64, exists#0: bool) = (box_len user_id#0)
        let tmp%1#0: bool = (! exists#0)
        (assert tmp%1#0) // User with id must not exist
        let user#1: Encoded((len+utf8[]),uint64,uint64) = examples.struct_in_box.contract.ExampleContract.write_to_box(user#0)
        exit 1u

subroutine examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]() -> void:
    block@0: // L35
        let user_id#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let (box_data#0: bytes, exists#0: bool) = (box_get user_id#0)
        (assert exists#0) // User with that id does not exist
        let user#1: Encoded((len+utf8[]),uint64,uint64) = ((replace2 10) box_data#0 reinterpret_Encoded(uint64)%1#0)
        let user#2: Encoded((len+utf8[]),uint64,uint64) = examples.struct_in_box.contract.ExampleContract.write_to_box(user#1)
        exit 1u

subroutine examples.struct_in_box.contract.ExampleContract.get_user[routing]() -> void:
    block@0: // L41
        let user_id#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let (box_data#0: bytes, exists#0: bool) = (box_get user_id#0)
        (assert exists#0) // User with that id does not exist
        let tmp%1#0: bytes = (concat 0x151f7c75 box_data#0)
        (log tmp%1#0)
        exit 1u

subroutine examples.struct_in_box.contract.ExampleContract.write_to_box(user: Encoded((len+utf8[]),uint64,uint64)) -> Encoded((len+utf8[]),uint64,uint64):
    block@0: // L17
        let box_key#0: bytes = ((extract 2 8) user#0)
        (box_del box_key#0)
        (box_put box_key#0 user#0)
        return user#0