main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L10
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "add_user((string,uint64,uint64))void" => block@3, method "attach_asset_to_user(uint64,asset)void" => block@4, method "get_user(uint64)(string,uint64,uint64)" => block@5, * => block@12}
    block@3: // add_user_route_L30
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let tmp%7#0: bytes = (txna ApplicationArgs 1)
        examples.struct_in_box.contract.ExampleContract.add_user(tmp%7#0)
        let examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__%0#0: bool = 1u
        goto block@13
    block@4: // attach_asset_to_user_route_L35
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // OnCompletion is not NoOp
        let tmp%10#0: uint64 = (txn ApplicationID)
        (assert tmp%10#0) // can only call when not creating
        let reinterpret_bytes[8]%0#0: bytes[8] = (txna ApplicationArgs 1)
        let reinterpret_bytes[1]%0#0: bytes[1] = (txna ApplicationArgs 2)
        let tmp%12#0: uint64 = (btoi reinterpret_bytes[1]%0#0)
        let tmp%13#0: uint64 = ((txnas Assets) tmp%12#0)
        examples.struct_in_box.contract.ExampleContract.attach_asset_to_user(reinterpret_bytes[8]%0#0, tmp%13#0)
        let examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__%0#1: bool = 1u
        goto block@13
    block@5: // get_user_route_L41
        let tmp%14#0: uint64 = (txn OnCompletion)
        let tmp%15#0: bool = (! tmp%14#0)
        (assert tmp%15#0) // OnCompletion is not NoOp
        let tmp%16#0: uint64 = (txn ApplicationID)
        (assert tmp%16#0) // can only call when not creating
        let reinterpret_bytes[8]%1#0: bytes[8] = (txna ApplicationArgs 1)
        let tmp%18#0: bytes = examples.struct_in_box.contract.ExampleContract.get_user(reinterpret_bytes[8]%1#0)
        let tmp%19#0: bytes = (concat 0x151f7c75 tmp%18#0)
        (log tmp%19#0)
        let examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__%0#2: bool = 1u
        goto block@13
    block@8: // bare_routing_L10
        let tmp%20#0: uint64 = (txn OnCompletion)
        goto tmp%20#0 ? block@12 : block@9
    block@9: // __algopy_default_create_L1
        let tmp%21#0: uint64 = (txn ApplicationID)
        let tmp%22#0: bool = (! tmp%21#0)
        (assert tmp%22#0) // can only call when creating
        let examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__%0#3: bool = 1u
        goto block@13
    block@12: // after_if_else_L10
        let examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__%0#4: bool = 0u
        goto block@13
    block@13: // after_inlined_examples.struct_in_box.contract.ExampleContract.__puya_arc4_router___L1
        let tmp%0#0: bool = Ï†(examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__%0#0 <- block@3, examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__%0#1 <- block@4, examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__%0#2 <- block@5, examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__%0#3 <- block@9, examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__%0#4 <- block@12)
        return tmp%0#0

subroutine examples.struct_in_box.contract.ExampleContract.add_user(user: bytes) -> void:
    block@0: // L30
        let user_id#0: bytes[8] = ((extract 2 8) user#0) // on error: Index access is out of bounds
        let (_data#0: bytes, exists#0: bool) = (box_get user_id#0)
        let tmp%2#0: bool = (! exists#0)
        (assert tmp%2#0) // User with id must not exist
        (box_del user_id#0)
        (box_put user_id#0 user#0)
        return 

subroutine examples.struct_in_box.contract.ExampleContract.attach_asset_to_user(user_id: bytes[8], asset: uint64) -> void:
    block@0: // L35
        let (box_data#0: bytes, exists#0: bool) = (box_get user_id#0)
        (assert exists#0) // User with that id does not exist
        let val_as_bytes%0#0: bytes[8] = (itob asset#0)
        let user#1: bytes = ((replace2 10) box_data#0 val_as_bytes%0#0)
        let box_key#0: bytes = ((extract 2 8) user#1) // on error: Index access is out of bounds
        (box_del box_key#0)
        (box_put box_key#0 user#1)
        return 

subroutine examples.struct_in_box.contract.ExampleContract.get_user(user_id: bytes[8]) -> bytes:
    block@0: // L41
        let (box_data#0: bytes, exists#0: bool) = (box_get user_id#0)
        (assert exists#0) // User with that id does not exist
        return box_data#0