{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;AASA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;;AA+BK;;AAAA;AAAA;AAAA;;AAAA;AA/BL;;;AA+BK;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAzBL;;;AAAA;;;AAAA;AAAA;;AAyBK;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AApBL;;;AAoBK;;;AAAA;;AApBL;;AAAA;;;;;;;;;AAoBA;;;AAEmC;;AAAA;;;AALX;AAAA;AAAA;;AAKT;AAAP;AAXA;AAAA;;AAEA;;AAAA;;AAYR;;;AAtB2B;;AAAA;AACnB;AAwBa;;AAAA;AAAb;;AAnBA;AAAU;;;AAEV;AAAA;;AAEA;AAAA;;AAkBR;;;AA5B2B;;AAAA;AACnB;AA6BA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "9": {
      "op": "pushbytess 0xda8534bd 0x4eb4e9f1 0x16545880 // method \"add_user((string,uint64,uint64))void\", method \"attach_asset_to_user(uint64,asset)void\", method \"get_user(uint64)(string,uint64,uint64)\""
    },
    "26": {
      "op": "txna ApplicationArgs 0"
    },
    "29": {
      "op": "match main_add_user_route@3 main_attach_asset_to_user_route@4 main_get_user_route@5"
    },
    "37": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "39": {
      "op": "return"
    },
    "40": {
      "block": "main_get_user_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "42": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "43": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "44": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "46": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "47": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "50": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.get_user",
      "op": "callsub get_user",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "53": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "59": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "60": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "61": {
      "op": "log",
      "stack_out": []
    },
    "62": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "63": {
      "op": "return"
    },
    "64": {
      "block": "main_attach_asset_to_user_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "66": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "67": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "68": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "70": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "71": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "74": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "77": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "78": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%12#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "80": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user",
      "op": "callsub attach_asset_to_user",
      "stack_out": []
    },
    "83": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "84": {
      "op": "return"
    },
    "85": {
      "block": "main_add_user_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "87": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "88": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "89": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "91": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "92": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "95": {
      "callsub": "examples.struct_in_box.contract.ExampleContract.add_user",
      "op": "callsub add_user",
      "stack_out": []
    },
    "98": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "99": {
      "op": "return"
    },
    "100": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "102": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "105": {
      "op": "txn ApplicationID"
    },
    "107": {
      "op": "!"
    },
    "108": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating"
    },
    "109": {
      "op": "intc_0 // 1"
    },
    "110": {
      "op": "return"
    },
    "111": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.add_user",
      "params": {
        "user#0": "bytes"
      },
      "block": "add_user",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "114": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "116": {
      "error": "Index access is out of bounds",
      "op": "extract 2 8 // on error: Index access is out of bounds",
      "defined_out": [
        "user_id#0"
      ],
      "stack_out": [
        "user_id#0"
      ]
    },
    "119": {
      "op": "dup",
      "defined_out": [
        "user_id#0",
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0",
        "user_id#0 (copy)"
      ]
    },
    "120": {
      "op": "box_get",
      "defined_out": [
        "_data#0",
        "exists#0",
        "user_id#0"
      ],
      "stack_out": [
        "user_id#0",
        "_data#0",
        "exists#0"
      ]
    },
    "121": {
      "op": "bury 1",
      "stack_out": [
        "user_id#0",
        "exists#0"
      ]
    },
    "123": {
      "op": "!",
      "defined_out": [
        "tmp%2#0",
        "user_id#0"
      ],
      "stack_out": [
        "user_id#0",
        "tmp%2#0"
      ]
    },
    "124": {
      "error": "User with id must not exist",
      "op": "assert // User with id must not exist",
      "stack_out": [
        "user_id#0"
      ]
    },
    "125": {
      "op": "dup",
      "stack_out": [
        "user_id#0",
        "user_id#0 (copy)"
      ]
    },
    "126": {
      "op": "box_del",
      "defined_out": [
        "user_id#0",
        "{box_del}"
      ],
      "stack_out": [
        "user_id#0",
        "{box_del}"
      ]
    },
    "127": {
      "op": "pop",
      "stack_out": [
        "user_id#0"
      ]
    },
    "128": {
      "op": "frame_dig -1",
      "stack_out": [
        "user_id#0",
        "user#0 (copy)"
      ]
    },
    "130": {
      "op": "box_put",
      "stack_out": []
    },
    "131": {
      "retsub": true,
      "op": "retsub"
    },
    "132": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user",
      "params": {
        "user_id#0": "bytes",
        "asset#0": "uint64"
      },
      "block": "attach_asset_to_user",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "135": {
      "op": "frame_dig -2",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "137": {
      "op": "box_get",
      "defined_out": [
        "box_data#0",
        "exists#0"
      ],
      "stack_out": [
        "box_data#0",
        "exists#0"
      ]
    },
    "138": {
      "error": "User with that id does not exist",
      "op": "assert // User with that id does not exist",
      "stack_out": [
        "box_data#0"
      ]
    },
    "139": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "box_data#0"
      ],
      "stack_out": [
        "box_data#0",
        "asset#0 (copy)"
      ]
    },
    "141": {
      "op": "itob",
      "defined_out": [
        "box_data#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "box_data#0",
        "val_as_bytes%0#0"
      ]
    },
    "142": {
      "op": "replace2 10",
      "defined_out": [
        "user#1"
      ],
      "stack_out": [
        "user#1"
      ]
    },
    "144": {
      "op": "dup",
      "defined_out": [
        "user#1",
        "user#1 (copy)"
      ],
      "stack_out": [
        "user#1",
        "user#1 (copy)"
      ]
    },
    "145": {
      "error": "Index access is out of bounds",
      "op": "extract 2 8 // on error: Index access is out of bounds",
      "defined_out": [
        "box_key#0",
        "user#1"
      ],
      "stack_out": [
        "user#1",
        "box_key#0"
      ]
    },
    "148": {
      "op": "dup",
      "defined_out": [
        "box_key#0",
        "box_key#0 (copy)",
        "user#1"
      ],
      "stack_out": [
        "user#1",
        "box_key#0",
        "box_key#0 (copy)"
      ]
    },
    "149": {
      "op": "box_del",
      "defined_out": [
        "box_key#0",
        "user#1",
        "{box_del}"
      ],
      "stack_out": [
        "user#1",
        "box_key#0",
        "{box_del}"
      ]
    },
    "150": {
      "op": "pop",
      "stack_out": [
        "user#1",
        "box_key#0"
      ]
    },
    "151": {
      "op": "swap",
      "stack_out": [
        "box_key#0",
        "user#1"
      ]
    },
    "152": {
      "op": "box_put",
      "stack_out": []
    },
    "153": {
      "retsub": true,
      "op": "retsub"
    },
    "154": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.get_user",
      "params": {
        "user_id#0": "bytes"
      },
      "block": "get_user",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "157": {
      "op": "frame_dig -1",
      "defined_out": [
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user_id#0 (copy)"
      ]
    },
    "159": {
      "op": "box_get",
      "defined_out": [
        "box_data#0",
        "exists#0"
      ],
      "stack_out": [
        "box_data#0",
        "exists#0"
      ]
    },
    "160": {
      "error": "User with that id does not exist",
      "op": "assert // User with that id does not exist",
      "stack_out": [
        "box_data#0"
      ]
    },
    "161": {
      "retsub": true,
      "op": "retsub"
    }
  }
}