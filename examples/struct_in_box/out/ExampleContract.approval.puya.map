{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;AASA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;AAoBK;;;AAE8B;AAAA;;;AALX;AAAA;AAAA;;AAKT;AAAP;AAXA;AAAA;;AAEA;AAAA;AAOH;AAAA;AAKA;;;AAAA;;;AAtBsB;AACnB;AAwBA;AAAA;;AAnBU;AAAA;;;AAEV;AAAA;;AAEA;AAAA;AAYH;AAAA;AAMA;;;AA5BsB;AACnB;AA2BH;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "7": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "9": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "10": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "11": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "12": {
      "op": "switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED",
      "stack_out": []
    },
    "38": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "39": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "41": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "42": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "op": "return // on error: this contract does not implement the given ABI method for create NoOp",
      "defined_out": [],
      "stack_out": []
    },
    "43": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "pushbytess 0xda8534bd 0xb4633ddd 0x16545880 // method \"add_user((string,uint64,uint64))void\", method \"attach_asset_to_user(uint64,uint64)void\", method \"get_user(uint64)(string,uint64,uint64)\"",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))"
      ],
      "stack_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))"
      ]
    },
    "60": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))",
        "tmp%5#0"
      ]
    },
    "63": {
      "op": "match add_user attach_asset_to_user get_user",
      "stack_out": []
    },
    "71": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "72": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.add_user[routing]",
      "params": {},
      "block": "add_user",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "user#0"
      ],
      "stack_out": [
        "user#0"
      ]
    },
    "75": {
      "op": "dup",
      "defined_out": [
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "user#0 (copy)"
      ]
    },
    "76": {
      "op": "extract 2 8",
      "defined_out": [
        "user#0",
        "user_id#0"
      ],
      "stack_out": [
        "user#0",
        "user_id#0"
      ]
    },
    "79": {
      "op": "dup",
      "defined_out": [
        "user#0",
        "user_id#0",
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "user_id#0",
        "user_id#0 (copy)"
      ]
    },
    "80": {
      "op": "box_len",
      "defined_out": [
        "_data#0",
        "exists#0",
        "user#0",
        "user_id#0"
      ],
      "stack_out": [
        "user#0",
        "user_id#0",
        "_data#0",
        "exists#0"
      ]
    },
    "81": {
      "op": "bury 1",
      "stack_out": [
        "user#0",
        "user_id#0",
        "exists#0"
      ]
    },
    "83": {
      "op": "!",
      "defined_out": [
        "tmp%1#0",
        "user#0",
        "user_id#0"
      ],
      "stack_out": [
        "user#0",
        "user_id#0",
        "tmp%1#0"
      ]
    },
    "84": {
      "error": "User with id must not exist",
      "op": "assert // User with id must not exist",
      "stack_out": [
        "user#0",
        "user_id#0"
      ]
    },
    "85": {
      "op": "dup",
      "stack_out": [
        "user#0",
        "user_id#0",
        "user_id#0 (copy)"
      ]
    },
    "86": {
      "op": "box_del",
      "defined_out": [
        "user#0",
        "user_id#0",
        "{box_del}"
      ],
      "stack_out": [
        "user#0",
        "user_id#0",
        "{box_del}"
      ]
    },
    "87": {
      "op": "pop",
      "stack_out": [
        "user#0",
        "user_id#0"
      ]
    },
    "88": {
      "op": "swap",
      "stack_out": [
        "user_id#0",
        "user#0"
      ]
    },
    "89": {
      "op": "box_put",
      "stack_out": []
    },
    "90": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "91": {
      "op": "return",
      "stack_out": []
    },
    "92": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]",
      "params": {},
      "block": "attach_asset_to_user",
      "stack_in": [],
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "95": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "user_id#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "user_id#0"
      ]
    },
    "98": {
      "op": "box_get",
      "defined_out": [
        "box_data#0",
        "exists#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box_data#0",
        "exists#0"
      ]
    },
    "99": {
      "error": "User with that id does not exist",
      "op": "assert // User with that id does not exist",
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box_data#0"
      ]
    },
    "100": {
      "op": "swap",
      "stack_out": [
        "box_data#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "101": {
      "op": "replace2 10",
      "defined_out": [
        "user#1"
      ],
      "stack_out": [
        "user#1"
      ]
    },
    "103": {
      "op": "dup",
      "defined_out": [
        "user#1",
        "user#1 (copy)"
      ],
      "stack_out": [
        "user#1",
        "user#1 (copy)"
      ]
    },
    "104": {
      "op": "extract 2 8",
      "defined_out": [
        "box_key#0",
        "user#1"
      ],
      "stack_out": [
        "user#1",
        "box_key#0"
      ]
    },
    "107": {
      "op": "dup",
      "defined_out": [
        "box_key#0",
        "box_key#0 (copy)",
        "user#1"
      ],
      "stack_out": [
        "user#1",
        "box_key#0",
        "box_key#0 (copy)"
      ]
    },
    "108": {
      "op": "box_del",
      "defined_out": [
        "box_key#0",
        "user#1",
        "{box_del}"
      ],
      "stack_out": [
        "user#1",
        "box_key#0",
        "{box_del}"
      ]
    },
    "109": {
      "op": "pop",
      "stack_out": [
        "user#1",
        "box_key#0"
      ]
    },
    "110": {
      "op": "swap",
      "stack_out": [
        "box_key#0",
        "user#1"
      ]
    },
    "111": {
      "op": "box_put",
      "stack_out": []
    },
    "112": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "113": {
      "op": "return",
      "stack_out": []
    },
    "114": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.get_user[routing]",
      "params": {},
      "block": "get_user",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "user_id#0"
      ],
      "stack_out": [
        "user_id#0"
      ]
    },
    "117": {
      "op": "box_get",
      "defined_out": [
        "box_data#0",
        "exists#0"
      ],
      "stack_out": [
        "box_data#0",
        "exists#0"
      ]
    },
    "118": {
      "error": "User with that id does not exist",
      "op": "assert // User with that id does not exist",
      "stack_out": [
        "box_data#0"
      ]
    },
    "119": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "box_data#0"
      ],
      "stack_out": [
        "box_data#0",
        "0x151f7c75"
      ]
    },
    "125": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "box_data#0"
      ]
    },
    "126": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "127": {
      "op": "log",
      "stack_out": []
    },
    "128": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "129": {
      "op": "return",
      "stack_out": []
    }
  }
}