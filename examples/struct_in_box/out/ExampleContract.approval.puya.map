{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;AASA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;AAAA;;AAAA;AAAA;;;;;;;AAoBK;;;AAE8B;AAAA;;;AALX;AAAA;AAAA;;AAKT;AAAP;AAXA;AAAA;;AAEA;AAAA;AAOH;AAAA;AAKA;;;AAAA;;;AAtBsB;AACnB;AAwBA;AAAA;;AAnBU;AAAA;;;AAEV;AAAA;;AAEA;AAAA;AAYH;AAAA;AAMA;;;AA5BsB;AACnB;AA2BH;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6": {
      "op": "bz main_bare_routing@17",
      "stack_out": []
    },
    "9": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "11": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "12": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "13": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "15": {
      "op": "assert",
      "stack_out": []
    },
    "16": {
      "op": "pushbytess 0xda8534bd 0xb4633ddd 0x16545880 // method \"add_user((string,uint64,uint64))void\", method \"attach_asset_to_user(uint64,uint64)void\", method \"get_user(uint64)(string,uint64,uint64)\"",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))"
      ],
      "stack_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))"
      ]
    },
    "33": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))",
        "tmp%7#0"
      ],
      "stack_out": [
        "Method(add_user((string,uint64,uint64))void)",
        "Method(attach_asset_to_user(uint64,uint64)void)",
        "Method(get_user(uint64)(string,uint64,uint64))",
        "tmp%7#0"
      ]
    },
    "36": {
      "op": "match add_user attach_asset_to_user get_user",
      "stack_out": []
    },
    "44": {
      "op": "err"
    },
    "45": {
      "block": "main_bare_routing@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "47": {
      "op": "!",
      "defined_out": [
        "not%tmp%9#0"
      ],
      "stack_out": [
        "not%tmp%9#0"
      ]
    },
    "48": {
      "op": "assert",
      "stack_out": []
    },
    "49": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "51": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "52": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "53": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "54": {
      "op": "return",
      "stack_out": []
    },
    "55": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.add_user[routing]",
      "params": {},
      "block": "add_user",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "user#0"
      ],
      "stack_out": [
        "user#0"
      ]
    },
    "58": {
      "op": "dup",
      "defined_out": [
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "user#0 (copy)"
      ]
    },
    "59": {
      "op": "extract 2 8",
      "defined_out": [
        "user#0",
        "user_id#0"
      ],
      "stack_out": [
        "user#0",
        "user_id#0"
      ]
    },
    "62": {
      "op": "dup",
      "defined_out": [
        "user#0",
        "user_id#0",
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "user_id#0",
        "user_id#0 (copy)"
      ]
    },
    "63": {
      "op": "box_len",
      "defined_out": [
        "_data#0",
        "exists#0",
        "user#0",
        "user_id#0"
      ],
      "stack_out": [
        "user#0",
        "user_id#0",
        "_data#0",
        "exists#0"
      ]
    },
    "64": {
      "op": "bury 1",
      "stack_out": [
        "user#0",
        "user_id#0",
        "exists#0"
      ]
    },
    "66": {
      "op": "!",
      "defined_out": [
        "tmp%1#0",
        "user#0",
        "user_id#0"
      ],
      "stack_out": [
        "user#0",
        "user_id#0",
        "tmp%1#0"
      ]
    },
    "67": {
      "error": "User with id must not exist",
      "op": "assert // User with id must not exist",
      "stack_out": [
        "user#0",
        "user_id#0"
      ]
    },
    "68": {
      "op": "dup",
      "stack_out": [
        "user#0",
        "user_id#0",
        "user_id#0 (copy)"
      ]
    },
    "69": {
      "op": "box_del",
      "defined_out": [
        "user#0",
        "user_id#0",
        "{box_del}"
      ],
      "stack_out": [
        "user#0",
        "user_id#0",
        "{box_del}"
      ]
    },
    "70": {
      "op": "pop",
      "stack_out": [
        "user#0",
        "user_id#0"
      ]
    },
    "71": {
      "op": "swap",
      "stack_out": [
        "user_id#0",
        "user#0"
      ]
    },
    "72": {
      "op": "box_put",
      "stack_out": []
    },
    "73": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "74": {
      "op": "return",
      "stack_out": []
    },
    "75": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.attach_asset_to_user[routing]",
      "params": {},
      "block": "attach_asset_to_user",
      "stack_in": [],
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "78": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "user_id#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "user_id#0"
      ]
    },
    "81": {
      "op": "box_get",
      "defined_out": [
        "box_data#0",
        "exists#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box_data#0",
        "exists#0"
      ]
    },
    "82": {
      "error": "User with that id does not exist",
      "op": "assert // User with that id does not exist",
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "box_data#0"
      ]
    },
    "83": {
      "op": "swap",
      "stack_out": [
        "box_data#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "84": {
      "op": "replace2 10",
      "defined_out": [
        "user#1"
      ],
      "stack_out": [
        "user#1"
      ]
    },
    "86": {
      "op": "dup",
      "defined_out": [
        "user#1",
        "user#1 (copy)"
      ],
      "stack_out": [
        "user#1",
        "user#1 (copy)"
      ]
    },
    "87": {
      "op": "extract 2 8",
      "defined_out": [
        "box_key#0",
        "user#1"
      ],
      "stack_out": [
        "user#1",
        "box_key#0"
      ]
    },
    "90": {
      "op": "dup",
      "defined_out": [
        "box_key#0",
        "box_key#0 (copy)",
        "user#1"
      ],
      "stack_out": [
        "user#1",
        "box_key#0",
        "box_key#0 (copy)"
      ]
    },
    "91": {
      "op": "box_del",
      "defined_out": [
        "box_key#0",
        "user#1",
        "{box_del}"
      ],
      "stack_out": [
        "user#1",
        "box_key#0",
        "{box_del}"
      ]
    },
    "92": {
      "op": "pop",
      "stack_out": [
        "user#1",
        "box_key#0"
      ]
    },
    "93": {
      "op": "swap",
      "stack_out": [
        "box_key#0",
        "user#1"
      ]
    },
    "94": {
      "op": "box_put",
      "stack_out": []
    },
    "95": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "96": {
      "op": "return",
      "stack_out": []
    },
    "97": {
      "subroutine": "examples.struct_in_box.contract.ExampleContract.get_user[routing]",
      "params": {},
      "block": "get_user",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "user_id#0"
      ],
      "stack_out": [
        "user_id#0"
      ]
    },
    "100": {
      "op": "box_get",
      "defined_out": [
        "box_data#0",
        "exists#0"
      ],
      "stack_out": [
        "box_data#0",
        "exists#0"
      ]
    },
    "101": {
      "error": "User with that id does not exist",
      "op": "assert // User with that id does not exist",
      "stack_out": [
        "box_data#0"
      ]
    },
    "102": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "box_data#0"
      ],
      "stack_out": [
        "box_data#0",
        "0x151f7c75"
      ]
    },
    "108": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "box_data#0"
      ]
    },
    "109": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "110": {
      "op": "log",
      "stack_out": []
    },
    "111": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "112": {
      "op": "return",
      "stack_out": []
    }
  }
}