// Op                                                                              Stack (out)
// examples.struct_in_box.contract.ExampleContract.approval_program() -> uint64:
main_block@0:
    callsub __puya_arc4_router__                                                   tmp%0#0
    return


// examples.struct_in_box.contract.ExampleContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    proto 0 1

__puya_arc4_router___block@0:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    txn NumAppArgs                                                                 tmp%0#0
    bz __puya_arc4_router___bare_routing@7
    // Implicit fall through to __puya_arc4_router___abi_routing@1

__puya_arc4_router___abi_routing@1:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    txna ApplicationArgs 0                                                         tmp%2#0
    method add_user((string,uint64,uint64))void                                    tmp%2#0,Method(add_user((string,uint64,uint64))void)
    method attach_asset_to_user(uint64,asset)void                                  tmp%2#0,Method(add_user((string,uint64,uint64))void),Method(attach_asset_to_user(uint64,asset)void)
    method get_user(uint64)(string,uint64,uint64)                                  tmp%2#0,Method(add_user((string,uint64,uint64))void),Method(attach_asset_to_user(uint64,asset)void),Method(get_user(uint64)(string,uint64,uint64))
    l-load tmp%2#0 3                                                               Method(add_user((string,uint64,uint64))void),Method(attach_asset_to_user(uint64,asset)void),Method(get_user(uint64)(string,uint64,uint64)),tmp%2#0
    match __puya_arc4_router___add_user_route@2 __puya_arc4_router___attach_asset_to_user_route@3 __puya_arc4_router___get_user_route@4 
    int 0                                                                          0
    retsub                                                                         0

__puya_arc4_router___add_user_route@2:
    // struct_in_box/contract.py:31
    // @arc4.abimethod()
    txn OnCompletion                                                               tmp%3#0
    !                                                                              tmp%4#0
    assert // OnCompletion is NoOp
    txn ApplicationID                                                              tmp%5#0
    assert // is not creating
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    txna ApplicationArgs 1                                                         tmp%7#0
    // struct_in_box/contract.py:31
    // @arc4.abimethod()
    callsub add_user
    int 1                                                                          1
    retsub                                                                         1

__puya_arc4_router___attach_asset_to_user_route@3:
    // struct_in_box/contract.py:36
    // @arc4.abimethod()
    txn OnCompletion                                                               tmp%8#0
    !                                                                              tmp%9#0
    assert // OnCompletion is NoOp
    txn ApplicationID                                                              tmp%10#0
    assert // is not creating
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    txna ApplicationArgs 1                                                         tmp%12#0
    txna ApplicationArgs 2                                                         tmp%12#0,tmp%13#0
    btoi                                                                           tmp%12#0,tmp%14#0
    txnas Assets                                                                   tmp%12#0,tmp%15#0
    // struct_in_box/contract.py:36
    // @arc4.abimethod()
    l-load tmp%12#0 1                                                              tmp%15#0,tmp%12#0
    l-load tmp%15#0 1                                                              tmp%12#0,tmp%15#0
    callsub attach_asset_to_user
    int 1                                                                          1
    retsub                                                                         1

__puya_arc4_router___get_user_route@4:
    // struct_in_box/contract.py:42
    // @arc4.abimethod()
    txn OnCompletion                                                               tmp%16#0
    !                                                                              tmp%17#0
    assert // OnCompletion is NoOp
    txn ApplicationID                                                              tmp%18#0
    assert // is not creating
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    txna ApplicationArgs 1                                                         tmp%20#0
    // struct_in_box/contract.py:42
    // @arc4.abimethod()
    callsub get_user                                                               tmp%21#0
    byte 0x151f7c75                                                                tmp%21#0,0x151f7c75
    l-load tmp%21#0 1                                                              0x151f7c75,tmp%21#0
    concat                                                                         tmp%22#0
    log
    int 1                                                                          1
    retsub                                                                         1

__puya_arc4_router___bare_routing@7:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    txn OnCompletion                                                               tmp%23#0
    bnz __puya_arc4_router___after_if_else@11
    // Implicit fall through to __puya_arc4_router_____algopy_default_create@8

__puya_arc4_router_____algopy_default_create@8:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    txn ApplicationID                                                              tmp%24#0
    !                                                                              tmp%25#0
    assert // is creating
    int 1                                                                          1
    retsub                                                                         1

__puya_arc4_router___after_if_else@11:
    // struct_in_box/contract.py:10
    // class ExampleContract(ARC4Contract):
    int 0                                                                          0
    retsub                                                                         0


// examples.struct_in_box.contract.ExampleContract.add_user(user: bytes) -> void:
add_user:                                                                          (洧도) user#0 |
    // struct_in_box/contract.py:31-32
    // @arc4.abimethod()
    // def add_user(self, user: UserStruct) -> None:
    proto 1 0                                                                      (洧도) user#0 |

add_user_block@0:                                                                  (洧도) user#0 |
    // struct_in_box/contract.py:33
    // assert not self.box_exists(user.id), "User with id must not exist"
    p-load user#0                                                                  (洧도) user#0 | user#0 (copy)
    extract 2 8 // on error: Index access is out of bounds                         (洧도) user#0 | tmp%0#0
    callsub box_exists                                                             (洧도) user#0 | tmp%1#0
    !                                                                              (洧도) user#0 | tmp%2#0
    assert // User with id must not exist                                          (洧도) user#0 |
    // struct_in_box/contract.py:34
    // self.write_to_box(user)
    p-load user#0                                                                  (洧도) user#0 | user#0 (copy)
    callsub write_to_box                                                           (洧도) user#0 | user#0
    p-store user#0                                                                 (洧도) user#0 |
    retsub


// examples.struct_in_box.contract.ExampleContract.box_exists(user_id: bytes) -> uint64:
box_exists:                                                                        (洧도) user_id#0 |
    // struct_in_box/contract.py:26-27
    // @subroutine
    // def box_exists(self, user_id: arc4.UInt64) -> bool:
    proto 1 1                                                                      (洧도) user_id#0 |

box_exists_block@0:                                                                (洧도) user_id#0 |
    // struct_in_box/contract.py:28
    // _data, exists = op.Box.get(user_id.bytes)
    p-load user_id#0                                                               (洧도) user_id#0 | user_id#0 (copy)
    box_get                                                                        (洧도) user_id#0 | _data#0,exists#0
    l-store exists#0 1                                                             (洧도) user_id#0 | exists#0,_data#0
    pop 1                                                                          (洧도) user_id#0 | exists#0
    // struct_in_box/contract.py:29
    // return exists
    l-load exists#0 0                                                              (洧도) user_id#0 | exists#0
    retsub                                                                         exists#0


// examples.struct_in_box.contract.ExampleContract.write_to_box(user: bytes) -> bytes:
write_to_box:                                                                      (洧도) user#0 |
    // struct_in_box/contract.py:18-19
    // @subroutine
    // def write_to_box(self, user: UserStruct) -> None:
    proto 1 1                                                                      (洧도) user#0 |

write_to_box_block@0:                                                              (洧도) user#0 |
    // struct_in_box/contract.py:20
    // box_key = user.id.bytes
    p-load user#0                                                                  (洧도) user#0 | user#0 (copy)
    extract 2 8 // on error: Index access is out of bounds                         (洧도) user#0 | box_key#0
    // struct_in_box/contract.py:22
    // op.Box.delete(box_key)
    l-load-copy box_key#0 0                                                        (洧도) user#0 | box_key#0,box_key#0 (copy)
    box_del                                                                        (洧도) user#0 | box_key#0,{box_del}
    pop 1                                                                          (洧도) user#0 | box_key#0
    // struct_in_box/contract.py:24
    // op.Box.put(box_key, user.bytes)
    l-load box_key#0 0                                                             (洧도) user#0 | box_key#0
    p-load user#0                                                                  (洧도) user#0 | box_key#0,user#0 (copy)
    box_put                                                                        (洧도) user#0 |
    p-load user#0                                                                  (洧도) user#0 | user#0 (copy)
    retsub                                                                         user#0 (copy)


// examples.struct_in_box.contract.ExampleContract.attach_asset_to_user(user_id: bytes, asset: uint64) -> void:
attach_asset_to_user:                                                              (洧도) user_id#0,asset#0 |
    // struct_in_box/contract.py:36-37
    // @arc4.abimethod()
    // def attach_asset_to_user(self, user_id: arc4.UInt64, asset: Asset) -> None:
    proto 2 0                                                                      (洧도) user_id#0,asset#0 |

attach_asset_to_user_block@0:                                                      (洧도) user_id#0,asset#0 |
    // struct_in_box/contract.py:38
    // user = self.read_from_box(user_id)
    p-load user_id#0                                                               (洧도) user_id#0,asset#0 | user_id#0 (copy)
    callsub read_from_box                                                          (洧도) user_id#0,asset#0 | user#0
    // struct_in_box/contract.py:39
    // user.asset = arc4.UInt64(asset.id)
    p-load asset#0                                                                 (洧도) user_id#0,asset#0 | user#0,asset#0 (copy)
    itob                                                                           (洧도) user_id#0,asset#0 | user#0,val_as_bytes%0#0
    l-load user#0 1                                                                (洧도) user_id#0,asset#0 | val_as_bytes%0#0,user#0
    l-load val_as_bytes%0#0 1                                                      (洧도) user_id#0,asset#0 | user#0,val_as_bytes%0#0
    replace2 10                                                                    (洧도) user_id#0,asset#0 | user#0
    // struct_in_box/contract.py:40
    // self.write_to_box(user)
    callsub write_to_box                                                           (洧도) user_id#0,asset#0 | user#0
    pop 1                                                                          (洧도) user_id#0,asset#0 |
    retsub


// examples.struct_in_box.contract.ExampleContract.read_from_box(user_id: bytes) -> bytes:
read_from_box:                                                                     (洧도) user_id#0 |
    // struct_in_box/contract.py:12-13
    // @subroutine
    // def read_from_box(self, user_id: arc4.UInt64) -> UserStruct:
    proto 1 1                                                                      (洧도) user_id#0 |

read_from_box_block@0:                                                             (洧도) user_id#0 |
    // struct_in_box/contract.py:14
    // box_data, exists = op.Box.get(user_id.bytes)
    p-load user_id#0                                                               (洧도) user_id#0 | user_id#0 (copy)
    box_get                                                                        (洧도) user_id#0 | box_data#0,exists#0
    // struct_in_box/contract.py:15
    // assert exists, "User with that id does not exist"
    assert // User with that id does not exist                                     (洧도) user_id#0 | box_data#0
    // struct_in_box/contract.py:16
    // return UserStruct.from_bytes(box_data)
    l-load box_data#0 0                                                            (洧도) user_id#0 | box_data#0
    retsub                                                                         box_data#0


// examples.struct_in_box.contract.ExampleContract.get_user(user_id: bytes) -> bytes:
get_user:                                                                          (洧도) user_id#0 |
    // struct_in_box/contract.py:42-43
    // @arc4.abimethod()
    // def get_user(self, user_id: arc4.UInt64) -> UserStruct:
    proto 1 1                                                                      (洧도) user_id#0 |

get_user_block@0:                                                                  (洧도) user_id#0 |
    // struct_in_box/contract.py:44
    // return self.read_from_box(user_id)
    p-load user_id#0                                                               (洧도) user_id#0 | user_id#0 (copy)
    callsub read_from_box                                                          (洧도) user_id#0 | tmp%0#0
    retsub                                                                         tmp%0#0


