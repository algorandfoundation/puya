{
  "version": 3,
  "sources": [
    "../local_state_with_offsets.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBW;;AAAsB;AAAtB;AAAX;;;AAAA;;;AACmB;AAAP;AACD;;AAAA;AAAA;;AAA0B;AAA1B;AAAA;;;AAAA;;;AAAA;;AAAiD;AAAjD;AAAA;;;AAAA;;;AACC;AACD;;AAAmB;AAAnB;AAAX;;;AAAA;;;AACY;AAEa;;;AAAR;AAAT;;AACS;;;AAAT;;AACG;;AAAoB;;AAApB;AAAX;;;AAAA;;;AACe;;AAAU;;;;;;;;;;;;;;;;;;;;;AAAV;AAAf;;;AAAA;;;AACoB;AAAA;;;AAAJ;;;;AAQG;AAAP;AAPK;;AAAU;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AAAA;;;AACoB;AAAA;;;AAAJ;;;;;;;AACC;;AAAU;;;;;;;;;;;;;AAAV;AAAjB;;;AAAA;;;AACgB;AAAA;;;AACI;;;;;;;;;AAAJ;;;;;;;AAEA;AAEH;;AAAoB;;AAApB;AAAb;;;AAAA;;;AACe;;AAAU;;;;;;;;;;AAAV;AAAf;;;AAAA;;;AACsC;;;AAAtB;;AAAA;;AAAA;;;;;;AAKG;AAAP;AAJK;;AAAU;;;;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AAAA;;;AACuD;;;AAAnC;;AAAA;;AAAA;;;AAAJ;;;;;;;AAEA;AAGJ;;;;;AAKP;;;;;;AAEU;;AAAA;AAAA;AAAA;AAAA;AAAP;AAEH;;;;;;AAEU;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAP;AAEH;;;;;;AAEoB;;AAAA;AAAA;AAAA;AACjB;AACA;AAEH;;;;;;AAEG;;AAAA;AAAA;;AAAA;;AAEH;;;;;;AAEG;;AAAI;AAAJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"local\" \"\""
    },
    "14": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method#0"
      ]
    },
    "15": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "16": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "17": {
      "op": "b main_block@0"
    },
    "20": {
      "block": "main_block@0",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%0#0"
      ]
    },
    "22": {
      "op": "bnz main_after_if_else@2",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "25": {
      "op": "b main_call___init__@1"
    },
    "28": {
      "block": "main_call___init__@1",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.__init__",
      "op": "callsub __init__"
    },
    "31": {
      "op": "b main_after_if_else@2"
    },
    "34": {
      "block": "main_after_if_else@2",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%1#0"
      ]
    },
    "36": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%1#0",
        "0"
      ]
    },
    "37": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%2#0"
      ]
    },
    "38": {
      "op": "bz main_after_if_else@4",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "41": {
      "op": "b main_if_body@3"
    },
    "44": {
      "block": "main_if_body@3",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "1"
      ]
    },
    "45": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "46": {
      "block": "main_after_if_else@4",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0"
      ]
    },
    "48": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "49": {
      "op": "bury 3",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0"
      ]
    },
    "51": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0",
        "NoOp"
      ]
    },
    "52": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%3#0"
      ]
    },
    "53": {
      "op": "bnz main_after_if_else@7",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "56": {
      "op": "b main_or_contd@5"
    },
    "59": {
      "block": "main_or_contd@5",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0"
      ]
    },
    "61": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0",
        "OptIn"
      ]
    },
    "62": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%4#0"
      ]
    },
    "63": {
      "op": "bnz main_after_if_else@7",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "66": {
      "op": "b main_if_body@6"
    },
    "69": {
      "block": "main_if_body@6",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "err",
      "defined_out": []
    },
    "70": {
      "block": "main_after_if_else@7",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%5#0"
      ]
    },
    "72": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%5#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%5#0",
        "1"
      ]
    },
    "73": {
      "op": "<",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%6#0"
      ]
    },
    "74": {
      "op": "bz main_after_if_else@9",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "77": {
      "op": "b main_if_body@8"
    },
    "80": {
      "block": "main_if_body@8",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "err",
      "defined_out": []
    },
    "81": {
      "block": "main_after_if_else@9",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%7#0"
      ]
    },
    "84": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%8#0"
      ]
    },
    "85": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "87": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%9#0"
      ]
    },
    "90": {
      "op": "bury 3",
      "defined_out": [],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "92": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%10#0"
      ]
    },
    "94": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%10#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%10#0",
        "2"
      ]
    },
    "96": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%11#0"
      ]
    },
    "97": {
      "op": "bz main_else_body@20",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "100": {
      "op": "b main_if_body@10"
    },
    "103": {
      "block": "main_if_body@10",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "105": {
      "op": "pushbytes 0x6765745f67756172616e746565645f64617461",
      "defined_out": [
        "0x6765745f67756172616e746565645f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x6765745f67756172616e746565645f64617461"
      ]
    },
    "126": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%12#0"
      ]
    },
    "127": {
      "op": "bz main_else_body@12",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "130": {
      "op": "b main_if_body@11"
    },
    "133": {
      "block": "main_if_body@11",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "dup",
      "defined_out": [
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "134": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data",
      "op": "callsub get_guaranteed_data",
      "defined_out": [
        "offset#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%13#0"
      ]
    },
    "137": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "138": {
      "op": "b main_after_if_else@19"
    },
    "141": {
      "block": "main_after_if_else@19",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "1"
      ]
    },
    "142": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "143": {
      "block": "main_else_body@12",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "145": {
      "op": "pushbytes 0x6765745f646174615f6f725f617373657274",
      "defined_out": [
        "0x6765745f646174615f6f725f617373657274",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x6765745f646174615f6f725f617373657274"
      ]
    },
    "165": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%14#0"
      ]
    },
    "166": {
      "op": "bz main_else_body@14",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "169": {
      "op": "b main_if_body@13"
    },
    "172": {
      "block": "main_if_body@13",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "dup",
      "defined_out": [
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "173": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert",
      "op": "callsub get_data_or_assert",
      "defined_out": [
        "offset#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%15#0"
      ]
    },
    "176": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "177": {
      "op": "b main_after_if_else@18"
    },
    "180": {
      "block": "main_after_if_else@18",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "b main_after_if_else@19"
    },
    "183": {
      "block": "main_else_body@14",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "185": {
      "op": "pushbytes 0x64656c6574655f64617461",
      "defined_out": [
        "0x64656c6574655f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x64656c6574655f64617461"
      ]
    },
    "198": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%16#0"
      ]
    },
    "199": {
      "op": "bz main_else_body@16",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "202": {
      "op": "b main_if_body@15"
    },
    "205": {
      "block": "main_if_body@15",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "dup",
      "defined_out": [
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "206": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.delete_data",
      "op": "callsub delete_data",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "209": {
      "op": "pushbytes \"Deleted\"",
      "defined_out": [
        "\"Deleted\"",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "\"Deleted\""
      ]
    },
    "218": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "219": {
      "op": "b main_after_if_else@17"
    },
    "222": {
      "block": "main_after_if_else@17",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "b main_after_if_else@18"
    },
    "225": {
      "block": "main_else_body@16",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "err",
      "defined_out": []
    },
    "226": {
      "block": "main_else_body@20",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%17#0"
      ]
    },
    "228": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%17#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%17#0",
        "3"
      ]
    },
    "230": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%18#0"
      ]
    },
    "231": {
      "op": "bz main_else_body@28",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "234": {
      "op": "b main_if_body@21"
    },
    "237": {
      "block": "main_if_body@21",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "239": {
      "op": "pushbytes 0x7365745f64617461",
      "defined_out": [
        "0x7365745f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x7365745f64617461"
      ]
    },
    "249": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%19#0"
      ]
    },
    "250": {
      "op": "bz main_else_body@23",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "253": {
      "op": "b main_if_body@22"
    },
    "256": {
      "block": "main_if_body@22",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%20#0"
      ]
    },
    "259": {
      "op": "dig 1",
      "defined_out": [
        "offset#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%20#0",
        "offset#0"
      ]
    },
    "261": {
      "op": "uncover 1",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0",
        "tmp%20#0"
      ]
    },
    "263": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.set_data",
      "op": "callsub set_data",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "266": {
      "op": "b main_after_if_else@27"
    },
    "269": {
      "block": "main_after_if_else@27",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "1"
      ]
    },
    "270": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "271": {
      "block": "main_else_body@23",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "273": {
      "op": "pushbytes 0x6765745f646174615f776974685f64656661756c74",
      "defined_out": [
        "0x6765745f646174615f776974685f64656661756c74",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x6765745f646174615f776974685f64656661756c74"
      ]
    },
    "296": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%21#0"
      ]
    },
    "297": {
      "op": "bz main_else_body@25",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "300": {
      "op": "b main_if_body@24"
    },
    "303": {
      "block": "main_if_body@24",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%22#0"
      ]
    },
    "306": {
      "op": "dig 1",
      "defined_out": [
        "offset#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%22#0",
        "offset#0"
      ]
    },
    "308": {
      "op": "uncover 1",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0",
        "tmp%22#0"
      ]
    },
    "310": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default",
      "op": "callsub get_data_with_default",
      "defined_out": [
        "offset#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%23#0"
      ]
    },
    "313": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "314": {
      "op": "b main_after_if_else@26"
    },
    "317": {
      "block": "main_after_if_else@26",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "b main_after_if_else@27"
    },
    "320": {
      "block": "main_else_body@25",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "err",
      "defined_out": []
    },
    "321": {
      "block": "main_else_body@28",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "err",
      "defined_out": []
    },
    "322": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "325": {
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "326": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data",
      "params": {
        "for_account#0": "uint64"
      },
      "block": "get_guaranteed_data",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "329": {
      "op": "b get_guaranteed_data_block@0"
    },
    "332": {
      "block": "get_guaranteed_data_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "334": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "335": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "336": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "337": {
      "error": "check self.local exists for account",
      "op": "assert // check self.local exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "338": {
      "retsub": true,
      "op": "retsub"
    },
    "339": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default",
      "params": {
        "for_account#0": "uint64",
        "default#0": "bytes"
      },
      "block": "get_data_with_default",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "342": {
      "op": "b get_data_with_default_block@0"
    },
    "345": {
      "block": "get_data_with_default_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "347": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "348": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "349": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "350": {
      "op": "cover 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "352": {
      "op": "frame_dig -1",
      "defined_out": [
        "default#0 (copy)",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "default#0 (copy)"
      ]
    },
    "354": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_exists%0#0",
        "default#0 (copy)",
        "maybe_value%0#0"
      ]
    },
    "356": {
      "op": "uncover 2",
      "stack_out": [
        "default#0 (copy)",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "358": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "359": {
      "retsub": true,
      "op": "retsub"
    },
    "360": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert",
      "params": {
        "for_account#0": "uint64"
      },
      "block": "get_data_or_assert",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "363": {
      "op": "b get_data_or_assert_block@0"
    },
    "366": {
      "block": "get_data_or_assert_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "368": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "369": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "370": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "exists#0"
      ]
    },
    "371": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "result#0"
      ]
    },
    "372": {
      "retsub": true,
      "op": "retsub"
    },
    "373": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.set_data",
      "params": {
        "for_account#0": "uint64",
        "value#0": "bytes"
      },
      "block": "set_data",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "376": {
      "op": "b set_data_block@0"
    },
    "379": {
      "block": "set_data_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "381": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local\""
      ]
    },
    "382": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"local\"",
        "for_account#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local\"",
        "value#0 (copy)"
      ]
    },
    "384": {
      "op": "app_local_put",
      "stack_out": []
    },
    "385": {
      "retsub": true,
      "op": "retsub"
    },
    "386": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.delete_data",
      "params": {
        "for_account#0": "uint64"
      },
      "block": "delete_data",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "389": {
      "op": "b delete_data_block@0"
    },
    "392": {
      "block": "delete_data_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "394": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local\""
      ]
    },
    "395": {
      "op": "app_local_del",
      "stack_out": []
    },
    "396": {
      "retsub": true,
      "op": "retsub"
    }
  }
}