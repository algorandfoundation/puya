{
  "version": 3,
  "sources": [
    "../local_state_with_offsets.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;;;AAGA;;;;;;;AACW;;AAAsB;AAAtB;AAAX;;;AACmB;AAAP;;AAAA;AACD;;AAAA;AAAA;;AAA0B;AAA1B;AAAA;;;AAAA;;AAAiD;AAAjD;AAAA;;;AACQ;AAAP;;AAAA;AACD;;AAAmB;AAAnB;AAAX;;;AACmB;AAAP;;AAAA;AAEa;;;AAAR;AAAT;;AACS;;;AAAT;;AACG;;AAAoB;;AAApB;AAAX;;;AACe;;AAAU;;;;;;;;;;;;;;;;;;;;;AAAV;AAAf;;;AACoB;;AAAA;;;AAAJ;AAQG;AAAP;;AAAA;AAPK;;AAAU;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AACoB;;AAAA;;;AAAJ;;;;AACC;;AAAU;;;;;;;;;;;;;AAAV;AAAjB;;;AACgB;;AAAA;;;AACI;;;;;;;;;AAAJ;;;;AAEO;AAAP;;AAAA;AAEH;;AAAoB;;AAApB;AAAb;;;AACe;;AAAU;;;;;;;;;;AAAV;AAAf;;;AACsC;;;AAAtB;;AAAA;AAAA;;;AAKG;AAAP;;AAAA;AAJK;;AAAU;;;;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AACuD;;;AAAnC;;AAAA;AAAA;;;AAAJ;;;;AAEO;AAAP;;AAAA;AAGG;AAAP;;AAAA;AAKZ;;;AAEe;;AAAA;AAAA;AAAA;AAAA;AAAP;AAMR;;;AAEyB;;AAAA;AAAA;AAAA;AACjB;AACA;AAMR;;;AAEQ;;AAAI;AAAJ;;AANR;;;AAEQ;;AAAA;AAAA;;AAAA;;AAZR;;;AAEe;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"local\""
    },
    "13": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "15": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "18": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.__init__",
      "op": "callsub __init__"
    },
    "21": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "24": {
      "op": "return",
      "stack_out": []
    },
    "25": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "28": {
      "retsub": true,
      "op": "retsub"
    },
    "29": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "32": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method#0"
      ]
    },
    "33": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "35": {
      "op": "dup",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "36": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%0#0"
      ]
    },
    "38": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%0#0",
        "0"
      ]
    },
    "39": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%1#0"
      ]
    },
    "40": {
      "op": "bz approval_program_after_if_else@2",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "43": {
      "block": "approval_program_if_body@1",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "1"
      ]
    },
    "44": {
      "op": "frame_bury 0"
    },
    "46": {
      "retsub": true,
      "op": "retsub"
    },
    "47": {
      "block": "approval_program_after_if_else@2",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0"
      ]
    },
    "49": {
      "op": "dup",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "50": {
      "op": "frame_bury 1",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0"
      ]
    },
    "52": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0",
        "NoOp"
      ]
    },
    "53": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%2#0"
      ]
    },
    "54": {
      "op": "bnz approval_program_after_if_else@5",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "57": {
      "block": "approval_program_or_contd@3",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0"
      ]
    },
    "59": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0",
        "OptIn"
      ]
    },
    "60": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%3#0"
      ]
    },
    "61": {
      "op": "bnz approval_program_after_if_else@5",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "64": {
      "block": "approval_program_if_body@4",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "0"
      ]
    },
    "65": {
      "op": "frame_bury 0"
    },
    "67": {
      "retsub": true,
      "op": "retsub"
    },
    "68": {
      "block": "approval_program_after_if_else@5",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%4#0"
      ]
    },
    "70": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%4#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%4#0",
        "1"
      ]
    },
    "71": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%5#0"
      ]
    },
    "72": {
      "op": "bz approval_program_after_if_else@7",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "75": {
      "block": "approval_program_if_body@6",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "0"
      ]
    },
    "76": {
      "op": "frame_bury 0"
    },
    "78": {
      "retsub": true,
      "op": "retsub"
    },
    "79": {
      "block": "approval_program_after_if_else@7",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%6#0"
      ]
    },
    "82": {
      "op": "btoi",
      "defined_out": [
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "83": {
      "op": "frame_bury 2",
      "defined_out": [
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "85": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "88": {
      "op": "frame_bury 0",
      "defined_out": [
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "90": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "method#0",
        "offset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%7#0"
      ]
    },
    "92": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "method#0",
        "offset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%7#0",
        "2"
      ]
    },
    "94": {
      "op": "==",
      "defined_out": [
        "method#0",
        "offset#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%8#0"
      ]
    },
    "95": {
      "op": "bz approval_program_else_body@18",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "98": {
      "block": "approval_program_if_body@8",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "100": {
      "op": "pushbytes 0x6765745f67756172616e746565645f64617461",
      "defined_out": [
        "0x6765745f67756172616e746565645f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x6765745f67756172616e746565645f64617461"
      ]
    },
    "121": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%9#0"
      ]
    },
    "122": {
      "op": "bz approval_program_else_body@10",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "125": {
      "block": "approval_program_if_body@9",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "127": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data",
      "op": "callsub get_guaranteed_data",
      "defined_out": [
        "offset#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%10#0"
      ]
    },
    "130": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "131": {
      "block": "approval_program_after_if_else@17",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "1"
      ]
    },
    "132": {
      "op": "frame_bury 0"
    },
    "134": {
      "retsub": true,
      "op": "retsub"
    },
    "135": {
      "block": "approval_program_else_body@10",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "137": {
      "op": "pushbytes 0x6765745f646174615f6f725f617373657274",
      "defined_out": [
        "0x6765745f646174615f6f725f617373657274",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x6765745f646174615f6f725f617373657274"
      ]
    },
    "157": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%11#0"
      ]
    },
    "158": {
      "op": "bz approval_program_else_body@12",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "161": {
      "block": "approval_program_if_body@11",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "163": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert",
      "op": "callsub get_data_or_assert",
      "defined_out": [
        "offset#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%12#0"
      ]
    },
    "166": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "167": {
      "block": "approval_program_after_if_else@16",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "b approval_program_after_if_else@17"
    },
    "170": {
      "block": "approval_program_else_body@12",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "172": {
      "op": "pushbytes 0x64656c6574655f64617461",
      "defined_out": [
        "0x64656c6574655f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x64656c6574655f64617461"
      ]
    },
    "185": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%13#0"
      ]
    },
    "186": {
      "op": "bz approval_program_else_body@14",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "189": {
      "block": "approval_program_if_body@13",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "191": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.delete_data",
      "op": "callsub delete_data",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "194": {
      "op": "pushbytes \"Deleted\"",
      "defined_out": [
        "\"Deleted\"",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "\"Deleted\""
      ]
    },
    "203": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "204": {
      "block": "approval_program_after_if_else@15",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "b approval_program_after_if_else@16"
    },
    "207": {
      "block": "approval_program_else_body@14",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "0"
      ]
    },
    "208": {
      "op": "frame_bury 0"
    },
    "210": {
      "retsub": true,
      "op": "retsub"
    },
    "211": {
      "block": "approval_program_else_body@18",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%14#0"
      ]
    },
    "213": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%14#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%14#0",
        "3"
      ]
    },
    "215": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%15#0"
      ]
    },
    "216": {
      "op": "bz approval_program_else_body@26",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "219": {
      "block": "approval_program_if_body@19",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "221": {
      "op": "pushbytes 0x7365745f64617461",
      "defined_out": [
        "0x7365745f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x7365745f64617461"
      ]
    },
    "231": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%16#0"
      ]
    },
    "232": {
      "op": "bz approval_program_else_body@21",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "235": {
      "block": "approval_program_if_body@20",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%17#0"
      ]
    },
    "238": {
      "op": "frame_dig 2",
      "defined_out": [
        "offset#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%17#0",
        "offset#0"
      ]
    },
    "240": {
      "op": "swap",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0",
        "tmp%17#0"
      ]
    },
    "241": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.set_data",
      "op": "callsub set_data",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "244": {
      "block": "approval_program_after_if_else@25",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "1"
      ]
    },
    "245": {
      "op": "frame_bury 0"
    },
    "247": {
      "retsub": true,
      "op": "retsub"
    },
    "248": {
      "block": "approval_program_else_body@21",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "250": {
      "op": "pushbytes 0x6765745f646174615f776974685f64656661756c74",
      "defined_out": [
        "0x6765745f646174615f776974685f64656661756c74",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x6765745f646174615f776974685f64656661756c74"
      ]
    },
    "273": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%18#0"
      ]
    },
    "274": {
      "op": "bz approval_program_else_body@23",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "277": {
      "block": "approval_program_if_body@22",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%19#0"
      ]
    },
    "280": {
      "op": "frame_dig 2",
      "defined_out": [
        "offset#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%19#0",
        "offset#0"
      ]
    },
    "282": {
      "op": "swap",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0",
        "tmp%19#0"
      ]
    },
    "283": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default",
      "op": "callsub get_data_with_default",
      "defined_out": [
        "offset#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%20#0"
      ]
    },
    "286": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "287": {
      "block": "approval_program_after_if_else@24",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "b approval_program_after_if_else@25"
    },
    "290": {
      "block": "approval_program_else_body@23",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "0"
      ]
    },
    "291": {
      "op": "frame_bury 0"
    },
    "293": {
      "retsub": true,
      "op": "retsub"
    },
    "294": {
      "block": "approval_program_else_body@26",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "0"
      ]
    },
    "295": {
      "op": "frame_bury 0"
    },
    "297": {
      "retsub": true,
      "op": "retsub"
    },
    "298": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data",
      "params": {
        "for_account#0": "uint64"
      },
      "block": "get_guaranteed_data",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "301": {
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "303": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "304": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "305": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "306": {
      "error": "check self.local exists for account",
      "op": "assert // check self.local exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "307": {
      "retsub": true,
      "op": "retsub"
    },
    "308": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert",
      "params": {
        "for_account#0": "uint64"
      },
      "block": "get_data_or_assert",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "311": {
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "313": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "314": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "315": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "exists#0"
      ]
    },
    "316": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "result#0"
      ]
    },
    "317": {
      "retsub": true,
      "op": "retsub"
    },
    "318": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.delete_data",
      "params": {
        "for_account#0": "uint64"
      },
      "block": "delete_data",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "321": {
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "323": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local\""
      ]
    },
    "324": {
      "op": "app_local_del",
      "stack_out": []
    },
    "325": {
      "retsub": true,
      "op": "retsub"
    },
    "326": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.set_data",
      "params": {
        "for_account#0": "uint64",
        "value#0": "bytes"
      },
      "block": "set_data",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "329": {
      "op": "frame_dig -2",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "331": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local\""
      ]
    },
    "332": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"local\"",
        "for_account#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local\"",
        "value#0 (copy)"
      ]
    },
    "334": {
      "op": "app_local_put",
      "stack_out": []
    },
    "335": {
      "retsub": true,
      "op": "retsub"
    },
    "336": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default",
      "params": {
        "for_account#0": "uint64",
        "default#0": "bytes"
      },
      "block": "get_data_with_default",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "339": {
      "op": "frame_dig -2",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "341": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "342": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "343": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "344": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "345": {
      "op": "frame_dig -1",
      "defined_out": [
        "default#0 (copy)",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "default#0 (copy)"
      ]
    },
    "347": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "default#0 (copy)",
        "maybe_value%0#0"
      ]
    },
    "348": {
      "op": "uncover 2",
      "stack_out": [
        "default#0 (copy)",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "350": {
      "op": "select",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "351": {
      "retsub": true,
      "op": "retsub"
    }
  }
}