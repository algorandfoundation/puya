{
  "version": 3,
  "sources": [
    "../local_state_with_offsets.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;AACW;;AAAsB;AAAtB;AAAX;;;AAAA;;;AACmB;AAAP;;AAAA;AACD;;AAAA;AAAA;;AAA0B;AAA1B;AAAA;;;AAAA;;;AAAA;;AAAiD;AAAjD;AAAA;;;AAAA;;;AACQ;AAAP;;AAAA;AACD;;AAAmB;AAAnB;AAAX;;;AAAA;;;AACmB;AAAP;;AAAA;AAEa;;;AAAR;AAAT;;AACS;;;AAAT;;AACG;;AAAoB;;AAApB;AAAX;;;AAAA;;;AACe;;AAAU;;;;;;;;;;;;;;;;;;;;;AAAV;AAAf;;;AAAA;;;AACoB;;AAAA;;;AAAJ;;;;AAQG;AAAP;;AAAA;AAPK;;AAAU;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AAAA;;;AACoB;;AAAA;;;AAAJ;;;;;;;AACC;;AAAU;;;;;;;;;;;;;AAAV;AAAjB;;;AAAA;;;AACgB;;AAAA;;;AACI;;;;;;;;;AAAJ;;;;;;;AAEO;AAAP;;AAAA;AAEH;;AAAoB;;AAApB;AAAb;;;AAAA;;;AACe;;AAAU;;;;;;;;;;AAAV;AAAf;;;AAAA;;;AACsC;;;AAAtB;;AAAA;;AAAA;;;;;;AAKG;AAAP;;AAAA;AAJK;;AAAU;;;;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AAAA;;;AACuD;;;AAAnC;;AAAA;;AAAA;;;AAAJ;;;;;;;AAEO;AAAP;;AAAA;AAGG;AAAP;;AAAA;AAKZ;;;;;;AAEe;;AAAA;AAAA;AAAA;AAAA;AAAP;AAER;;;;;;AAEe;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAP;AAER;;;;;;AAEyB;;AAAA;AAAA;AAAA;AACjB;AACA;AAER;;;;;;AAEQ;;AAAA;AAAA;;AAAA;;AAER;;;;;;AAEQ;;AAAI;AAAJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"local\" \"\""
    },
    "14": {
      "op": "b main_block@0"
    },
    "17": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "19": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "22": {
      "op": "b main_call___init__@1"
    },
    "25": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.__init__",
      "op": "callsub __init__"
    },
    "28": {
      "op": "b main_after_if_else@2"
    },
    "31": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "34": {
      "op": "return",
      "stack_out": []
    },
    "35": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "38": {
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "39": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "42": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method#0"
      ]
    },
    "43": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "44": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "45": {
      "op": "b approval_program_block@0"
    },
    "48": {
      "block": "approval_program_block@0",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%0#0"
      ]
    },
    "50": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%0#0",
        "0"
      ]
    },
    "51": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%1#0"
      ]
    },
    "52": {
      "op": "bz approval_program_after_if_else@2",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "55": {
      "op": "b approval_program_if_body@1"
    },
    "58": {
      "block": "approval_program_if_body@1",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "1"
      ]
    },
    "59": {
      "op": "frame_bury 0"
    },
    "61": {
      "retsub": true,
      "op": "retsub"
    },
    "62": {
      "block": "approval_program_after_if_else@2",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0"
      ]
    },
    "64": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "65": {
      "op": "frame_bury 1",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0"
      ]
    },
    "67": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0",
        "NoOp"
      ]
    },
    "68": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%2#0"
      ]
    },
    "69": {
      "op": "bnz approval_program_after_if_else@5",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "72": {
      "op": "b approval_program_or_contd@3"
    },
    "75": {
      "block": "approval_program_or_contd@3",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0"
      ]
    },
    "77": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0",
        "OptIn"
      ]
    },
    "78": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%3#0"
      ]
    },
    "79": {
      "op": "bnz approval_program_after_if_else@5",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "82": {
      "op": "b approval_program_if_body@4"
    },
    "85": {
      "block": "approval_program_if_body@4",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "0"
      ]
    },
    "86": {
      "op": "frame_bury 0"
    },
    "88": {
      "retsub": true,
      "op": "retsub"
    },
    "89": {
      "block": "approval_program_after_if_else@5",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%4#0"
      ]
    },
    "91": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%4#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%4#0",
        "1"
      ]
    },
    "92": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%5#0"
      ]
    },
    "93": {
      "op": "bz approval_program_after_if_else@7",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "96": {
      "op": "b approval_program_if_body@6"
    },
    "99": {
      "block": "approval_program_if_body@6",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "0"
      ]
    },
    "100": {
      "op": "frame_bury 0"
    },
    "102": {
      "retsub": true,
      "op": "retsub"
    },
    "103": {
      "block": "approval_program_after_if_else@7",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%6#0"
      ]
    },
    "106": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%7#0"
      ]
    },
    "107": {
      "op": "frame_bury 2",
      "defined_out": [],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "109": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%8#0"
      ]
    },
    "112": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "114": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%9#0"
      ]
    },
    "116": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%9#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%9#0",
        "2"
      ]
    },
    "118": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%10#0"
      ]
    },
    "119": {
      "op": "bz approval_program_else_body@18",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "122": {
      "op": "b approval_program_if_body@8"
    },
    "125": {
      "block": "approval_program_if_body@8",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "127": {
      "op": "pushbytes 0x6765745f67756172616e746565645f64617461",
      "defined_out": [
        "0x6765745f67756172616e746565645f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x6765745f67756172616e746565645f64617461"
      ]
    },
    "148": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%11#0"
      ]
    },
    "149": {
      "op": "bz approval_program_else_body@10",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "152": {
      "op": "b approval_program_if_body@9"
    },
    "155": {
      "block": "approval_program_if_body@9",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "157": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data",
      "op": "callsub get_guaranteed_data",
      "defined_out": [
        "offset#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%12#0"
      ]
    },
    "160": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "161": {
      "op": "b approval_program_after_if_else@17"
    },
    "164": {
      "block": "approval_program_after_if_else@17",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "1"
      ]
    },
    "165": {
      "op": "frame_bury 0"
    },
    "167": {
      "retsub": true,
      "op": "retsub"
    },
    "168": {
      "block": "approval_program_else_body@10",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "170": {
      "op": "pushbytes 0x6765745f646174615f6f725f617373657274",
      "defined_out": [
        "0x6765745f646174615f6f725f617373657274",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x6765745f646174615f6f725f617373657274"
      ]
    },
    "190": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%13#0"
      ]
    },
    "191": {
      "op": "bz approval_program_else_body@12",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "194": {
      "op": "b approval_program_if_body@11"
    },
    "197": {
      "block": "approval_program_if_body@11",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "199": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert",
      "op": "callsub get_data_or_assert",
      "defined_out": [
        "offset#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%14#0"
      ]
    },
    "202": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "203": {
      "op": "b approval_program_after_if_else@16"
    },
    "206": {
      "block": "approval_program_after_if_else@16",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "b approval_program_after_if_else@17"
    },
    "209": {
      "block": "approval_program_else_body@12",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "211": {
      "op": "pushbytes 0x64656c6574655f64617461",
      "defined_out": [
        "0x64656c6574655f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x64656c6574655f64617461"
      ]
    },
    "224": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%15#0"
      ]
    },
    "225": {
      "op": "bz approval_program_else_body@14",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "228": {
      "op": "b approval_program_if_body@13"
    },
    "231": {
      "block": "approval_program_if_body@13",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "233": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.delete_data",
      "op": "callsub delete_data",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "236": {
      "op": "pushbytes \"Deleted\"",
      "defined_out": [
        "\"Deleted\"",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "\"Deleted\""
      ]
    },
    "245": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "246": {
      "op": "b approval_program_after_if_else@15"
    },
    "249": {
      "block": "approval_program_after_if_else@15",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "b approval_program_after_if_else@16"
    },
    "252": {
      "block": "approval_program_else_body@14",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "0"
      ]
    },
    "253": {
      "op": "frame_bury 0"
    },
    "255": {
      "retsub": true,
      "op": "retsub"
    },
    "256": {
      "block": "approval_program_else_body@18",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%16#0"
      ]
    },
    "258": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%16#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%16#0",
        "3"
      ]
    },
    "260": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%17#0"
      ]
    },
    "261": {
      "op": "bz approval_program_else_body@26",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "264": {
      "op": "b approval_program_if_body@19"
    },
    "267": {
      "block": "approval_program_if_body@19",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "269": {
      "op": "pushbytes 0x7365745f64617461",
      "defined_out": [
        "0x7365745f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x7365745f64617461"
      ]
    },
    "279": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%18#0"
      ]
    },
    "280": {
      "op": "bz approval_program_else_body@21",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "283": {
      "op": "b approval_program_if_body@20"
    },
    "286": {
      "block": "approval_program_if_body@20",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%19#0"
      ]
    },
    "289": {
      "op": "frame_dig 2",
      "defined_out": [
        "offset#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%19#0",
        "offset#0"
      ]
    },
    "291": {
      "op": "uncover 1",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0",
        "tmp%19#0"
      ]
    },
    "293": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.set_data",
      "op": "callsub set_data",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "296": {
      "op": "b approval_program_after_if_else@25"
    },
    "299": {
      "block": "approval_program_after_if_else@25",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "1"
      ]
    },
    "300": {
      "op": "frame_bury 0"
    },
    "302": {
      "retsub": true,
      "op": "retsub"
    },
    "303": {
      "block": "approval_program_else_body@21",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "305": {
      "op": "pushbytes 0x6765745f646174615f776974685f64656661756c74",
      "defined_out": [
        "0x6765745f646174615f776974685f64656661756c74",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x6765745f646174615f776974685f64656661756c74"
      ]
    },
    "328": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%20#0"
      ]
    },
    "329": {
      "op": "bz approval_program_else_body@23",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "332": {
      "op": "b approval_program_if_body@22"
    },
    "335": {
      "block": "approval_program_if_body@22",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%21#0"
      ]
    },
    "338": {
      "op": "frame_dig 2",
      "defined_out": [
        "offset#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%21#0",
        "offset#0"
      ]
    },
    "340": {
      "op": "uncover 1",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0",
        "tmp%21#0"
      ]
    },
    "342": {
      "callsub": "examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default",
      "op": "callsub get_data_with_default",
      "defined_out": [
        "offset#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%22#0"
      ]
    },
    "345": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "346": {
      "op": "b approval_program_after_if_else@24"
    },
    "349": {
      "block": "approval_program_after_if_else@24",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "b approval_program_after_if_else@25"
    },
    "352": {
      "block": "approval_program_else_body@23",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "0"
      ]
    },
    "353": {
      "op": "frame_bury 0"
    },
    "355": {
      "retsub": true,
      "op": "retsub"
    },
    "356": {
      "block": "approval_program_else_body@26",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "0"
      ]
    },
    "357": {
      "op": "frame_bury 0"
    },
    "359": {
      "retsub": true,
      "op": "retsub"
    },
    "360": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data",
      "params": {
        "for_account#0": "uint64"
      },
      "block": "get_guaranteed_data",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "363": {
      "op": "b get_guaranteed_data_block@0"
    },
    "366": {
      "block": "get_guaranteed_data_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "368": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "369": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "370": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "371": {
      "error": "check self.local exists for account",
      "op": "assert // check self.local exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "372": {
      "retsub": true,
      "op": "retsub"
    },
    "373": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default",
      "params": {
        "for_account#0": "uint64",
        "default#0": "bytes"
      },
      "block": "get_data_with_default",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "376": {
      "op": "b get_data_with_default_block@0"
    },
    "379": {
      "block": "get_data_with_default_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "381": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "382": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "383": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "384": {
      "op": "cover 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "386": {
      "op": "frame_dig -1",
      "defined_out": [
        "default#0 (copy)",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "default#0 (copy)"
      ]
    },
    "388": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_exists%0#0",
        "default#0 (copy)",
        "maybe_value%0#0"
      ]
    },
    "390": {
      "op": "uncover 2",
      "stack_out": [
        "default#0 (copy)",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "392": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "393": {
      "retsub": true,
      "op": "retsub"
    },
    "394": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert",
      "params": {
        "for_account#0": "uint64"
      },
      "block": "get_data_or_assert",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "397": {
      "op": "b get_data_or_assert_block@0"
    },
    "400": {
      "block": "get_data_or_assert_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "402": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "403": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "404": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "exists#0"
      ]
    },
    "405": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "result#0"
      ]
    },
    "406": {
      "retsub": true,
      "op": "retsub"
    },
    "407": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.set_data",
      "params": {
        "for_account#0": "uint64",
        "value#0": "bytes"
      },
      "block": "set_data",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "410": {
      "op": "b set_data_block@0"
    },
    "413": {
      "block": "set_data_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "415": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local\""
      ]
    },
    "416": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"local\"",
        "for_account#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local\"",
        "value#0 (copy)"
      ]
    },
    "418": {
      "op": "app_local_put",
      "stack_out": []
    },
    "419": {
      "retsub": true,
      "op": "retsub"
    },
    "420": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.delete_data",
      "params": {
        "for_account#0": "uint64"
      },
      "block": "delete_data",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "423": {
      "op": "b delete_data_block@0"
    },
    "426": {
      "block": "delete_data_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "428": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local\""
      ]
    },
    "429": {
      "op": "app_local_del",
      "stack_out": []
    },
    "430": {
      "retsub": true,
      "op": "retsub"
    }
  }
}