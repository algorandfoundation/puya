{
  "version": 3,
  "sources": [
    "../local_state_contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA;;;;;;AAEW;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AAGJ;;;;;;AAEW;;AAAA;AAAA;;AAAA;AAAP;;AAAA;AAGJ;;;;;;AAEW;;AAAA;AAAA;;AAAA;AAAA;AAAP;;;;;AA5EJ;;;;;;;;;AACW;;AAAsB;AAAtB;AAAX;;;AAAA;;;AACmB;AAAP;;AAAA;AACD;;AAAA;AAAA;;AAA0B;AAA1B;AAAA;;;AAAA;;;AAAA;;AAAiD;AAAjD;AAAA;;;AAAA;;;AACQ;AAAP;;AAAA;AACD;;AAAoB;AAApB;AAAX;;;AAAA;;;AACmB;AAAP;;AAAA;AAEK;;;AAAT;;AACG;;AAAoB;AAApB;AAAX;;;AAAA;;;AACe;;AAAU;;;;;;;;;;;;;;;;;;;;;AAAV;AAAf;;;AAAA;;;AAC6C;;AAAzB;;;AAAJ;;;;AAQG;AAAP;;AAAA;AAPK;;AAAU;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AAAA;;;AAC4C;;AAAxB;;;AAAJ;;;;;;;AACC;;AAAU;;;;;;;;;;;;;AAAV;AAAjB;;;AAAA;;;AACiC;;AAAjB;;;AACI;;;;;;;;;AAAJ;;;;;;;AAEO;AAAP;;AAAA;AAEH;;AAAoB;;AAApB;AAAb;;;AAAA;;;AACe;;AAAU;;;;;;;;;;AAAV;AAAf;;;AAAA;;;AAC8B;;AAAY;;;AAA1B;;;;;;AAKG;AAAP;;AAAA;AAJK;;AAAU;;;;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AAAA;;;AAC+C;;AAAY;;;AAAvC;;;AAAJ;;;;;;;AAEO;AAAP;;AAAA;AAGG;AAAP;;AAAA;AAKZ;;;;;;AAEiB;;AAAA;AAAA;AAAA;AAAA;AAEF;AAAA;AAAwC;AAAvB;;AAAA;;;AAAjB;AAAP;AAEO;;AAAgC;AAAhC;;;AAAP;AACO;;AAA8B;AAA9B;;;AAAA;;AAAA;AAAP;AACA;AAER;;;;;;AAGe;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAP;AAER;;;;;;AAEyB;;AAAA;AAAA;AAAA;AACjB;AACA;AAER;;;;;;AAEQ;;AAAA;AAAA;;AAAA;;AAER;;;;;;AAEQ;;AAAI;AAAJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.local_state.local_state_contract.LocalStateContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x6c6f63616c"
    },
    "13": {
      "op": "b main_block@0"
    },
    "16": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "18": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "21": {
      "op": "b main_call___init__@1"
    },
    "24": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "examples.local_state.local_state_contract.LocalStateContract.__init__",
      "op": "callsub __init__"
    },
    "27": {
      "op": "b main_after_if_else@2"
    },
    "30": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "examples.local_state.local_state_contract.LocalStateContract.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "33": {
      "op": "return",
      "stack_out": []
    },
    "34": {
      "subroutine": "examples.local_state.local_state_contract.get_local_state_length",
      "params": {
        "state#0": "bytes",
        "account#0": "bytes"
      },
      "block": "get_local_state_length",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "37": {
      "op": "b get_local_state_length_block@0"
    },
    "40": {
      "block": "get_local_state_length_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "42": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "0"
      ]
    },
    "43": {
      "op": "frame_dig -2",
      "defined_out": [
        "0",
        "account#0 (copy)",
        "state#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "0",
        "state#0 (copy)"
      ]
    },
    "45": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "46": {
      "error": "check LocalState exists for account",
      "op": "assert // check LocalState exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "47": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "48": {
      "retsub": true,
      "op": "retsub"
    },
    "49": {
      "subroutine": "examples.local_state.local_state_contract.local_bytes_exists",
      "params": {
        "account#0": "bytes",
        "key#0": "bytes"
      },
      "block": "local_bytes_exists",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "52": {
      "op": "b local_bytes_exists_block@0"
    },
    "55": {
      "block": "local_bytes_exists_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "57": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "0"
      ]
    },
    "58": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "account#0 (copy)",
        "key#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "0",
        "key#0 (copy)"
      ]
    },
    "60": {
      "op": "app_local_get_ex",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "61": {
      "op": "uncover 1"
    },
    "63": {
      "retsub": true,
      "op": "retsub"
    },
    "64": {
      "subroutine": "examples.local_state.local_state_contract.read_local_bytes",
      "params": {
        "account#0": "bytes",
        "key#0": "bytes"
      },
      "block": "read_local_bytes",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "67": {
      "op": "b read_local_bytes_block@0"
    },
    "70": {
      "block": "read_local_bytes_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "72": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "0"
      ]
    },
    "73": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "account#0 (copy)",
        "key#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "0",
        "key#0 (copy)"
      ]
    },
    "75": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "76": {
      "error": "check LocalState exists for account",
      "op": "assert // check LocalState exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "77": {
      "retsub": true,
      "op": "retsub"
    },
    "78": {
      "subroutine": "examples.local_state.local_state_contract.LocalStateContract.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "81": {
      "block": "__init___block@0",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "82": {
      "subroutine": "examples.local_state.local_state_contract.LocalStateContract.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "85": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method#0"
      ]
    },
    "86": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "88": {
      "op": "b approval_program_block@0"
    },
    "91": {
      "block": "approval_program_block@0",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "93": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "94": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "95": {
      "op": "bz approval_program_after_if_else@2",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "98": {
      "op": "b approval_program_if_body@1"
    },
    "101": {
      "block": "approval_program_if_body@1",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "1"
      ]
    },
    "102": {
      "op": "frame_bury 0"
    },
    "104": {
      "retsub": true,
      "op": "retsub"
    },
    "105": {
      "block": "approval_program_after_if_else@2",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "107": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "108": {
      "op": "frame_bury 1",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "110": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "NoOp"
      ]
    },
    "111": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "112": {
      "op": "bnz approval_program_after_if_else@5",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "115": {
      "op": "b approval_program_or_contd@3"
    },
    "118": {
      "block": "approval_program_or_contd@3",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "120": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "OptIn"
      ]
    },
    "121": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "122": {
      "op": "bnz approval_program_after_if_else@5",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "125": {
      "op": "b approval_program_if_body@4"
    },
    "128": {
      "block": "approval_program_if_body@4",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "0"
      ]
    },
    "129": {
      "op": "frame_bury 0"
    },
    "131": {
      "retsub": true,
      "op": "retsub"
    },
    "132": {
      "block": "approval_program_after_if_else@5",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "134": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%4#0",
        "0"
      ]
    },
    "135": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "136": {
      "op": "bz approval_program_after_if_else@7",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "139": {
      "op": "b approval_program_if_body@6"
    },
    "142": {
      "block": "approval_program_if_body@6",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "0"
      ]
    },
    "143": {
      "op": "frame_bury 0"
    },
    "145": {
      "retsub": true,
      "op": "retsub"
    },
    "146": {
      "block": "approval_program_after_if_else@7",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "149": {
      "op": "frame_bury 0",
      "defined_out": [],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "151": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%7#0"
      ]
    },
    "153": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%7#0",
        "1"
      ]
    },
    "154": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%8#0"
      ]
    },
    "155": {
      "op": "bz approval_program_else_body@18",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "158": {
      "op": "b approval_program_if_body@8"
    },
    "161": {
      "block": "approval_program_if_body@8",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "163": {
      "op": "pushbytes 0x6765745f67756172616e746565645f64617461",
      "defined_out": [
        "0x6765745f67756172616e746565645f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x6765745f67756172616e746565645f64617461"
      ]
    },
    "184": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "185": {
      "op": "bz approval_program_else_body@10",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "188": {
      "op": "b approval_program_if_body@9"
    },
    "191": {
      "block": "approval_program_if_body@9",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%10#0"
      ]
    },
    "193": {
      "callsub": "examples.local_state.local_state_contract.LocalStateContract.get_guaranteed_data",
      "op": "callsub get_guaranteed_data",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%11#0"
      ]
    },
    "196": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "197": {
      "op": "b approval_program_after_if_else@17"
    },
    "200": {
      "block": "approval_program_after_if_else@17",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "1"
      ]
    },
    "201": {
      "op": "frame_bury 0"
    },
    "203": {
      "retsub": true,
      "op": "retsub"
    },
    "204": {
      "block": "approval_program_else_body@10",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "206": {
      "op": "pushbytes 0x6765745f646174615f6f725f617373657274",
      "defined_out": [
        "0x6765745f646174615f6f725f617373657274",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x6765745f646174615f6f725f617373657274"
      ]
    },
    "226": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%12#0"
      ]
    },
    "227": {
      "op": "bz approval_program_else_body@12",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "230": {
      "op": "b approval_program_if_body@11"
    },
    "233": {
      "block": "approval_program_if_body@11",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%13#0"
      ]
    },
    "235": {
      "callsub": "examples.local_state.local_state_contract.LocalStateContract.get_data_or_assert",
      "op": "callsub get_data_or_assert",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%14#0"
      ]
    },
    "238": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "239": {
      "op": "b approval_program_after_if_else@16"
    },
    "242": {
      "block": "approval_program_after_if_else@16",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "b approval_program_after_if_else@17"
    },
    "245": {
      "block": "approval_program_else_body@12",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "247": {
      "op": "pushbytes 0x64656c6574655f64617461",
      "defined_out": [
        "0x64656c6574655f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x64656c6574655f64617461"
      ]
    },
    "260": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%15#0"
      ]
    },
    "261": {
      "op": "bz approval_program_else_body@14",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "264": {
      "op": "b approval_program_if_body@13"
    },
    "267": {
      "block": "approval_program_if_body@13",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%16#0"
      ]
    },
    "269": {
      "callsub": "examples.local_state.local_state_contract.LocalStateContract.delete_data",
      "op": "callsub delete_data",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "272": {
      "op": "pushbytes \"Deleted\"",
      "defined_out": [
        "\"Deleted\""
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "\"Deleted\""
      ]
    },
    "281": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "282": {
      "op": "b approval_program_after_if_else@15"
    },
    "285": {
      "block": "approval_program_after_if_else@15",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "b approval_program_after_if_else@16"
    },
    "288": {
      "block": "approval_program_else_body@14",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "0"
      ]
    },
    "289": {
      "op": "frame_bury 0"
    },
    "291": {
      "retsub": true,
      "op": "retsub"
    },
    "292": {
      "block": "approval_program_else_body@18",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%17#0"
      ]
    },
    "294": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%17#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%17#0",
        "2"
      ]
    },
    "296": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%18#0"
      ]
    },
    "297": {
      "op": "bz approval_program_else_body@26",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "300": {
      "op": "b approval_program_if_body@19"
    },
    "303": {
      "block": "approval_program_if_body@19",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "305": {
      "op": "pushbytes 0x7365745f64617461",
      "defined_out": [
        "0x7365745f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x7365745f64617461"
      ]
    },
    "315": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%19#0"
      ]
    },
    "316": {
      "op": "bz approval_program_else_body@21",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "319": {
      "op": "b approval_program_if_body@20"
    },
    "322": {
      "block": "approval_program_if_body@20",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%20#0"
      ]
    },
    "324": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "327": {
      "callsub": "examples.local_state.local_state_contract.LocalStateContract.set_data",
      "op": "callsub set_data",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "330": {
      "op": "b approval_program_after_if_else@25"
    },
    "333": {
      "block": "approval_program_after_if_else@25",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "1"
      ]
    },
    "334": {
      "op": "frame_bury 0"
    },
    "336": {
      "retsub": true,
      "op": "retsub"
    },
    "337": {
      "block": "approval_program_else_body@21",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "339": {
      "op": "pushbytes 0x6765745f646174615f776974685f64656661756c74",
      "defined_out": [
        "0x6765745f646174615f776974685f64656661756c74",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x6765745f646174615f776974685f64656661756c74"
      ]
    },
    "362": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%22#0"
      ]
    },
    "363": {
      "op": "bz approval_program_else_body@23",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "366": {
      "op": "b approval_program_if_body@22"
    },
    "369": {
      "block": "approval_program_if_body@22",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%23#0"
      ]
    },
    "371": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "374": {
      "callsub": "examples.local_state.local_state_contract.LocalStateContract.get_data_with_default",
      "op": "callsub get_data_with_default",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%25#0"
      ]
    },
    "377": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "378": {
      "op": "b approval_program_after_if_else@24"
    },
    "381": {
      "block": "approval_program_after_if_else@24",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "b approval_program_after_if_else@25"
    },
    "384": {
      "block": "approval_program_else_body@23",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "0"
      ]
    },
    "385": {
      "op": "frame_bury 0"
    },
    "387": {
      "retsub": true,
      "op": "retsub"
    },
    "388": {
      "block": "approval_program_else_body@26",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "0"
      ]
    },
    "389": {
      "op": "frame_bury 0"
    },
    "391": {
      "retsub": true,
      "op": "retsub"
    },
    "392": {
      "subroutine": "examples.local_state.local_state_contract.LocalStateContract.get_guaranteed_data",
      "params": {
        "for_account#0": "bytes"
      },
      "block": "get_guaranteed_data",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "395": {
      "op": "b get_guaranteed_data_block@0"
    },
    "398": {
      "block": "get_guaranteed_data_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "400": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "401": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "402": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "403": {
      "error": "check self.local exists for account",
      "op": "assert // check self.local exists for account",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "404": {
      "op": "dup",
      "defined_out": [
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "result#0 (copy)"
      ]
    },
    "405": {
      "op": "len",
      "defined_out": [
        "result#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%0#0"
      ]
    },
    "406": {
      "op": "bytec_0 // \"local\"",
      "stack_out": [
        "result#0",
        "tmp%0#0",
        "\"local\""
      ]
    },
    "407": {
      "op": "frame_dig -1",
      "stack_out": [
        "result#0",
        "tmp%0#0",
        "\"local\"",
        "for_account#0 (copy)"
      ]
    },
    "409": {
      "callsub": "examples.local_state.local_state_contract.get_local_state_length",
      "op": "callsub get_local_state_length",
      "defined_out": [
        "result#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "412": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%2#0"
      ]
    },
    "413": {
      "op": "assert",
      "stack_out": [
        "result#0"
      ]
    },
    "414": {
      "op": "frame_dig -1",
      "stack_out": [
        "result#0",
        "for_account#0 (copy)"
      ]
    },
    "416": {
      "op": "bytec_0 // 0x6c6f63616c",
      "defined_out": [
        "0x6c6f63616c",
        "for_account#0 (copy)",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0 (copy)",
        "0x6c6f63616c"
      ]
    },
    "417": {
      "callsub": "examples.local_state.local_state_contract.local_bytes_exists",
      "op": "callsub local_bytes_exists",
      "defined_out": [
        "result#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%3#0"
      ]
    },
    "420": {
      "op": "assert",
      "stack_out": [
        "result#0"
      ]
    },
    "421": {
      "op": "frame_dig -1",
      "stack_out": [
        "result#0",
        "for_account#0 (copy)"
      ]
    },
    "423": {
      "op": "bytec_0 // \"local\"",
      "stack_out": [
        "result#0",
        "for_account#0 (copy)",
        "\"local\""
      ]
    },
    "424": {
      "callsub": "examples.local_state.local_state_contract.read_local_bytes",
      "op": "callsub read_local_bytes",
      "defined_out": [
        "result#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%4#0"
      ]
    },
    "427": {
      "op": "dig 1",
      "stack_out": [
        "result#0",
        "tmp%4#0",
        "result#0 (copy)"
      ]
    },
    "429": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "result#0",
        "tmp%5#0"
      ]
    },
    "430": {
      "op": "assert",
      "stack_out": [
        "result#0"
      ]
    },
    "431": {
      "retsub": true,
      "op": "retsub"
    },
    "432": {
      "subroutine": "examples.local_state.local_state_contract.LocalStateContract.get_data_with_default",
      "params": {
        "for_account#0": "bytes",
        "default#0": "bytes"
      },
      "block": "get_data_with_default",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "435": {
      "op": "b get_data_with_default_block@0"
    },
    "438": {
      "block": "get_data_with_default_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "440": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "441": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "442": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "443": {
      "op": "cover 1",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "445": {
      "op": "frame_dig -1",
      "defined_out": [
        "default#0 (copy)",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "default#0 (copy)"
      ]
    },
    "447": {
      "op": "uncover 1",
      "stack_out": [
        "maybe_exists%0#0",
        "default#0 (copy)",
        "maybe_value%0#0"
      ]
    },
    "449": {
      "op": "uncover 2",
      "stack_out": [
        "default#0 (copy)",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "451": {
      "op": "select",
      "defined_out": [
        "state_get%0#0"
      ],
      "stack_out": [
        "state_get%0#0"
      ]
    },
    "452": {
      "retsub": true,
      "op": "retsub"
    },
    "453": {
      "subroutine": "examples.local_state.local_state_contract.LocalStateContract.get_data_or_assert",
      "params": {
        "for_account#0": "bytes"
      },
      "block": "get_data_or_assert",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "456": {
      "op": "b get_data_or_assert_block@0"
    },
    "459": {
      "block": "get_data_or_assert_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "461": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0"
      ]
    },
    "462": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "463": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "exists#0"
      ]
    },
    "464": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "result#0"
      ]
    },
    "465": {
      "retsub": true,
      "op": "retsub"
    },
    "466": {
      "subroutine": "examples.local_state.local_state_contract.LocalStateContract.set_data",
      "params": {
        "for_account#0": "bytes",
        "value#0": "bytes"
      },
      "block": "set_data",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "469": {
      "op": "b set_data_block@0"
    },
    "472": {
      "block": "set_data_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "474": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local\""
      ]
    },
    "475": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"local\"",
        "for_account#0 (copy)",
        "value#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local\"",
        "value#0 (copy)"
      ]
    },
    "477": {
      "op": "app_local_put",
      "stack_out": []
    },
    "478": {
      "retsub": true,
      "op": "retsub"
    },
    "479": {
      "subroutine": "examples.local_state.local_state_contract.LocalStateContract.delete_data",
      "params": {
        "for_account#0": "bytes"
      },
      "block": "delete_data",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "482": {
      "op": "b delete_data_block@0"
    },
    "485": {
      "block": "delete_data_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)"
      ]
    },
    "487": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "for_account#0 (copy)"
      ],
      "stack_out": [
        "for_account#0 (copy)",
        "\"local\""
      ]
    },
    "488": {
      "op": "app_local_del",
      "stack_out": []
    },
    "489": {
      "retsub": true,
      "op": "retsub"
    }
  }
}