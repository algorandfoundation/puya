#pragma version 11
#pragma typetrack false

// examples.local_state.local_state_with_offsets.LocalStateContract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock "local" ""
    intc_0 // 0
    bytec_1 // ""
    bytec_1 // ""
    b main_block@0

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2
    b main_call___init__@1

main_call___init__@1:
    callsub __init__
    b main_after_if_else@2

main_after_if_else@2:
    // local_state/local_state_with_offsets.py:19
    // if Txn.application_id == 0:
    txn ApplicationID
    intc_0 // 0
    ==
    bz main_after_if_else@4
    b main_if_body@3

main_if_body@3:
    // local_state/local_state_with_offsets.py:20
    // return True
    intc_1 // 1
    return

main_after_if_else@4:
    // local_state/local_state_with_offsets.py:21
    // if Txn.on_completion not in (OnCompleteAction.NoOp, OnCompleteAction.OptIn):
    txn OnCompletion
    dup
    bury 3
    intc_0 // NoOp
    ==
    bnz main_after_if_else@7
    b main_or_contd@5

main_or_contd@5:
    // local_state/local_state_with_offsets.py:21
    // if Txn.on_completion not in (OnCompleteAction.NoOp, OnCompleteAction.OptIn):
    dig 1
    intc_1 // OptIn
    ==
    bnz main_after_if_else@7
    b main_if_body@6

main_if_body@6:
    // local_state/local_state_with_offsets.py:22
    // return False
    err

main_after_if_else@7:
    // local_state/local_state_with_offsets.py:23
    // if Txn.num_app_args < 1:
    txn NumAppArgs
    intc_1 // 1
    <
    bz main_after_if_else@9
    b main_if_body@8

main_if_body@8:
    // local_state/local_state_with_offsets.py:24
    // return False
    err

main_after_if_else@9:
    // local_state/local_state_with_offsets.py:26
    // offset = op.btoi(Txn.application_args(0))
    txna ApplicationArgs 0
    btoi
    bury 1
    // local_state/local_state_with_offsets.py:27
    // method = Txn.application_args(1)
    txna ApplicationArgs 1
    bury 3
    // local_state/local_state_with_offsets.py:28
    // if Txn.num_app_args == 2:
    txn NumAppArgs
    pushint 2 // 2
    ==
    bz main_else_body@20
    b main_if_body@10

main_if_body@10:
    // local_state/local_state_with_offsets.py:29
    // if method == b"get_guaranteed_data":
    dig 2
    pushbytes 0x6765745f67756172616e746565645f64617461
    ==
    bz main_else_body@12
    b main_if_body@11

main_if_body@11:
    // local_state/local_state_with_offsets.py:30
    // log(self.get_guaranteed_data(offset))
    dup
    callsub get_guaranteed_data
    log
    b main_after_if_else@19

main_after_if_else@19:
    // local_state/local_state_with_offsets.py:38
    // return True
    intc_1 // 1
    return

main_else_body@12:
    // local_state/local_state_with_offsets.py:31
    // elif method == b"get_data_or_assert":
    dig 2
    pushbytes 0x6765745f646174615f6f725f617373657274
    ==
    bz main_else_body@14
    b main_if_body@13

main_if_body@13:
    // local_state/local_state_with_offsets.py:32
    // log(self.get_data_or_assert(offset))
    dup
    callsub get_data_or_assert
    log
    b main_after_if_else@18

main_after_if_else@18:
    b main_after_if_else@19

main_else_body@14:
    // local_state/local_state_with_offsets.py:33
    // elif method == b"delete_data":
    dig 2
    pushbytes 0x64656c6574655f64617461
    ==
    bz main_else_body@16
    b main_if_body@15

main_if_body@15:
    // local_state/local_state_with_offsets.py:34
    // self.delete_data(offset)
    dup
    callsub delete_data
    // local_state/local_state_with_offsets.py:35
    // log("Deleted")
    pushbytes "Deleted"
    log
    b main_after_if_else@17

main_after_if_else@17:
    b main_after_if_else@18

main_else_body@16:
    // local_state/local_state_with_offsets.py:37
    // return False
    err

main_else_body@20:
    // local_state/local_state_with_offsets.py:39
    // elif Txn.num_app_args == 3:
    txn NumAppArgs
    pushint 3 // 3
    ==
    bz main_else_body@28
    b main_if_body@21

main_if_body@21:
    // local_state/local_state_with_offsets.py:40
    // if method == b"set_data":
    dig 2
    pushbytes 0x7365745f64617461
    ==
    bz main_else_body@23
    b main_if_body@22

main_if_body@22:
    // local_state/local_state_with_offsets.py:41
    // self.set_data(offset, Txn.application_args(2))
    txna ApplicationArgs 2
    dig 1
    uncover 1
    callsub set_data
    b main_after_if_else@27

main_after_if_else@27:
    // local_state/local_state_with_offsets.py:46
    // return True
    intc_1 // 1
    return

main_else_body@23:
    // local_state/local_state_with_offsets.py:42
    // elif method == b"get_data_with_default":
    dig 2
    pushbytes 0x6765745f646174615f776974685f64656661756c74
    ==
    bz main_else_body@25
    b main_if_body@24

main_if_body@24:
    // local_state/local_state_with_offsets.py:43
    // log(self.get_data_with_default(offset, Txn.application_args(2)))
    txna ApplicationArgs 2
    dig 1
    uncover 1
    callsub get_data_with_default
    log
    b main_after_if_else@26

main_after_if_else@26:
    b main_after_if_else@27

main_else_body@25:
    // local_state/local_state_with_offsets.py:45
    // return False
    err

main_else_body@28:
    // local_state/local_state_with_offsets.py:48
    // return False
    err


// examples.local_state.local_state_with_offsets.LocalStateContract.__init__() -> void:
__init__:
    b __init___block@0

__init___block@0:
    retsub


// examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data(for_account: uint64) -> bytes:
get_guaranteed_data:
    // local_state/local_state_with_offsets.py:53-54
    // @subroutine
    // def get_guaranteed_data(self, for_account: UInt64) -> Bytes:
    proto 1 1
    b get_guaranteed_data_block@0

get_guaranteed_data_block@0:
    // local_state/local_state_with_offsets.py:55
    // return self.local[for_account]
    frame_dig -1
    intc_0 // 0
    bytec_0 // "local"
    app_local_get_ex
    assert // check self.local exists for account
    retsub


// examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default(for_account: uint64, default: bytes) -> bytes:
get_data_with_default:
    // local_state/local_state_with_offsets.py:57-58
    // @subroutine
    // def get_data_with_default(self, for_account: UInt64, default: Bytes) -> Bytes:
    proto 2 1
    b get_data_with_default_block@0

get_data_with_default_block@0:
    // local_state/local_state_with_offsets.py:59
    // return self.local.get(for_account, default)
    frame_dig -2
    intc_0 // 0
    bytec_0 // "local"
    app_local_get_ex
    cover 1
    frame_dig -1
    uncover 1
    uncover 2
    select
    retsub


// examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert(for_account: uint64) -> bytes:
get_data_or_assert:
    // local_state/local_state_with_offsets.py:61-62
    // @subroutine
    // def get_data_or_assert(self, for_account: UInt64) -> Bytes:
    proto 1 1
    b get_data_or_assert_block@0

get_data_or_assert_block@0:
    // local_state/local_state_with_offsets.py:63
    // result, exists = self.local.maybe(for_account)
    frame_dig -1
    intc_0 // 0
    bytec_0 // "local"
    app_local_get_ex
    // local_state/local_state_with_offsets.py:64
    // assert exists, "no data for account"
    assert // no data for account
    // local_state/local_state_with_offsets.py:65
    // return result
    retsub


// examples.local_state.local_state_with_offsets.LocalStateContract.set_data(for_account: uint64, value: bytes) -> void:
set_data:
    // local_state/local_state_with_offsets.py:67-68
    // @subroutine
    // def set_data(self, for_account: UInt64, value: Bytes) -> None:
    proto 2 0
    b set_data_block@0

set_data_block@0:
    // local_state/local_state_with_offsets.py:69
    // self.local[for_account] = value
    frame_dig -2
    bytec_0 // "local"
    frame_dig -1
    app_local_put
    retsub


// examples.local_state.local_state_with_offsets.LocalStateContract.delete_data(for_account: uint64) -> void:
delete_data:
    // local_state/local_state_with_offsets.py:71-72
    // @subroutine
    // def delete_data(self, for_account: UInt64) -> None:
    proto 1 0
    b delete_data_block@0

delete_data_block@0:
    // local_state/local_state_with_offsets.py:73
    // del self.local[for_account]
    frame_dig -1
    bytec_0 // "local"
    app_local_del
    retsub
