debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=False, output_arc56=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, output_teal_intermediates=False, output_op_statistics=True, debug_level=1, optimization_level=1, target_avm_version=11, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, optimizations_override=immutabledict({}), expand_all_bytes=False, validate_abi_values=True, validate_abi_dynamic_severity=<LogLevel.warning: 30>, paths=['local_state'], resource_encoding='value', output_awst=True, output_awst_json=False, output_source_annotations_json=False, output_client=True, log_level=<LogLevel.debug: 10>)
info: writing local_state/out/module.awst
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Terminated block@3
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@5
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2) in block@2
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let required_budget_with_buffer#3: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@3
debug: Added required_budget_with_buffer#3 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#3 <- block@3) in block@3
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@4
debug: Created Phi assignment: let required_budget_with_buffer#4: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@4
debug: Added required_budget_with_buffer#4 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#3 <- block@3, required_budget_with_buffer#4 <- block@4) in block@4
debug: Added required_budget_with_buffer#2 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#2 <- block@5) in block@5
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@5
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2) in block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let fee_source#3: uint64 = undefined while trying to resolve 'fee_source' in block@3
debug: Added fee_source#3 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#3 <- block@3) in block@3
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@4
debug: Created Phi assignment: let fee_source#4: uint64 = undefined while trying to resolve 'fee_source' in block@4
debug: Added fee_source#4 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#3 <- block@3, fee_source#4 <- block@4) in block@4
debug: Added fee_source#2 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#2 <- block@5) in block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#3) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2)
debug: Replaced trivial Phi node: let required_budget_with_buffer#3: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#3) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#3: uint64 = φ(fee_source#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let fee_source#3: uint64 = φ(fee_source#1 <- block@2) (fee_source#3) with fee_source#1
debug: Deleting Phi assignment: let fee_source#3: uint64 = φ(fee_source#1 <- block@2)
debug: Replaced trivial Phi node: let fee_source#3: uint64 = φ(fee_source#1 <- block@2) (fee_source#3) with fee_source#1 in current definition for 1 blocks
debug: Sealing block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#4) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2)
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4)
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#4: uint64 = φ(required_budget_with_buffer#1 <- block@2) (required_budget_with_buffer#4) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@2, required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 5 blocks
debug: Added fee_source#1 to Phi node: let fee_source#4: uint64 = φ(fee_source#1 <- block@2) in block@2
debug: Replacing trivial Phi node: let fee_source#4: uint64 = φ(fee_source#1 <- block@2) (fee_source#4) with fee_source#1
debug: Deleting Phi assignment: let fee_source#4: uint64 = φ(fee_source#1 <- block@2)
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#1 <- block@3, fee_source#1 <- block@4) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#1 <- block@3, fee_source#1 <- block@4)
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@5) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#4: uint64 = φ(fee_source#1 <- block@2) (fee_source#4) with fee_source#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@2, fee_source#1 <- block@3, fee_source#1 <- block@4) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@5) (fee_source#1) with fee_source#0 in current definition for 5 blocks
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'value_internal%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let value_internal%0#1: uint64 = undefined while trying to resolve 'value_internal%0' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added value_internal%0#0 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0) in block@0
debug: Added value_internal%0#2 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'value_internal%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let value_internal%0#1: uint64 = undefined while trying to resolve 'value_internal%0' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added value_internal%0#0 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0) in block@0
debug: Added value_internal%0#2 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'value_internal%1' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let value_internal%1#1: uint64 = undefined while trying to resolve 'value_internal%1' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'head_and_tail_length' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_and_tail_length#1: uint64 = undefined while trying to resolve 'head_and_tail_length' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added value_internal%1#0 to Phi node: let value_internal%1#1: uint64 = φ(value_internal%1#0 <- block@4) in block@4
debug: Added value_internal%1#2 to Phi node: let value_internal%1#1: uint64 = φ(value_internal%1#0 <- block@4, value_internal%1#2 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added head_and_tail_length#0 to Phi node: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4) in block@4
debug: Added head_and_tail_length#1 to Phi node: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4, head_and_tail_length#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4, head_and_tail_length#1 <- block@7) (head_and_tail_length#1) with head_and_tail_length#0
debug: Deleting Phi assignment: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4, head_and_tail_length#1 <- block@7)
debug: Replaced trivial Phi node: let head_and_tail_length#1: uint64 = φ(head_and_tail_length#0 <- block@4, head_and_tail_length#1 <- block@7) (head_and_tail_length#1) with head_and_tail_length#0 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'value_internal%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let value_internal%0#1: uint64 = undefined while trying to resolve 'value_internal%0' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added value_internal%0#0 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0) in block@0
debug: Added value_internal%0#2 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'value_internal%0' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let value_internal%0#1: uint64 = undefined while trying to resolve 'value_internal%0' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added value_internal%0#0 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0) in block@0
debug: Added value_internal%0#2 to Phi node: let value_internal%0#1: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function examples.local_state.local_state_contract.get_local_state_length
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_contract.local_bytes_exists
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_contract.read_local_bytes
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_with_offsets.LocalStateContract.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
debug: Terminated block@20
debug: Sealing block@21
debug: Terminated block@21
debug: Sealing block@22
debug: Terminated block@22
debug: Sealing block@23
debug: Terminated block@23
debug: Sealing block@24
debug: Terminated block@24
debug: Sealing block@25
debug: Terminated block@25
debug: Sealing block@26
debug: Terminated block@26
debug: Sealing block@27
debug: Terminated block@27
debug: Sealing block@28
debug: Terminated block@28
debug: Building IR for function examples.local_state.local_state_with_offsets.LocalStateContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_with_offsets.LocalStateContract.set_data
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_with_offsets.LocalStateContract.delete_data
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy._contract.Contract.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
debug: Terminated block@20
debug: Sealing block@21
debug: Terminated block@21
debug: Sealing block@22
debug: Terminated block@22
debug: Sealing block@23
debug: Terminated block@23
debug: Sealing block@24
debug: Terminated block@24
debug: Sealing block@25
debug: Terminated block@25
debug: Sealing block@26
debug: Terminated block@26
debug: Sealing block@27
debug: Terminated block@27
debug: Sealing block@28
debug: Terminated block@28
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine examples.local_state.local_state_contract.get_local_state_length
debug: removing unused subroutine examples.local_state.local_state_contract.local_bytes_exists
debug: removing unused subroutine examples.local_state.local_state_contract.read_local_bytes
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.clear_state_program
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: Building IR for function examples.local_state.local_state_with_offsets.LocalStateContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine examples.local_state.local_state_contract.get_local_state_length
debug: removing unused subroutine examples.local_state.local_state_contract.local_bytes_exists
debug: removing unused subroutine examples.local_state.local_state_contract.read_local_bytes
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.__init__
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.clear_state_program
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.set_data
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.delete_data
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: Building IR for function examples.local_state.local_state_contract.LocalStateContract.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
debug: Terminated block@20
debug: Sealing block@21
debug: Terminated block@21
debug: Sealing block@22
debug: Terminated block@22
debug: Sealing block@23
debug: Terminated block@23
debug: Sealing block@24
debug: Terminated block@24
debug: Sealing block@25
debug: Terminated block@25
debug: Sealing block@26
debug: Terminated block@26
debug: Sealing block@27
debug: Terminated block@27
debug: Sealing block@28
debug: Terminated block@28
debug: Building IR for function examples.local_state.local_state_contract.LocalStateContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_contract.LocalStateContract.get_guaranteed_data
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_contract.LocalStateContract.get_data_with_default
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_contract.LocalStateContract.get_data_or_assert
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_contract.LocalStateContract.set_data
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_contract.LocalStateContract.delete_data
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function algopy._contract.Contract.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Sealing block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Terminated block@10
debug: Sealing block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@20
debug: Terminated block@20
debug: Sealing block@21
debug: Terminated block@21
debug: Sealing block@22
debug: Terminated block@22
debug: Sealing block@23
debug: Terminated block@23
debug: Sealing block@24
debug: Terminated block@24
debug: Sealing block@25
debug: Terminated block@25
debug: Sealing block@26
debug: Terminated block@26
debug: Sealing block@27
debug: Terminated block@27
debug: Sealing block@28
debug: Terminated block@28
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.clear_state_program
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: Building IR for function examples.local_state.local_state_contract.LocalStateContract.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine examples.local_state.local_state_contract.get_local_state_length
debug: removing unused subroutine examples.local_state.local_state_contract.local_bytes_exists
debug: removing unused subroutine examples.local_state.local_state_contract.read_local_bytes
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.__init__
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.clear_state_program
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.get_guaranteed_data
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.get_data_with_default
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.get_data_or_assert
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.set_data
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.delete_data
debug: removing unused subroutine algopy._contract.Contract.__init__
debug: Output IR to local_state/out/LocalStateWithOffsets.ir/LocalStateWithOffsets.approval.000.ssa.ir
debug: Output IR to local_state/out/LocalStateWithOffsets.ir/LocalStateWithOffsets.clear.000.ssa.ir
debug: optimizing approval program of examples.local_state.local_state_with_offsets.LocalStateContract at level 1
debug: Begin optimization pass 1/100
debug: marking trivial method examples.local_state.local_state_with_offsets.LocalStateContract.__init__ as inlineable
debug: marking single-use function examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data for inlining
debug: marking single-use function examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default for inlining
debug: marking single-use function examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert for inlining
debug: marking trivial method examples.local_state.local_state_with_offsets.LocalStateContract.set_data as inlineable
debug: marking trivial method examples.local_state.local_state_with_offsets.LocalStateContract.delete_data as inlineable
debug: Optimizing subroutine examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
local_state/local_state_with_offsets.py:43:21 debug: inlining call to examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default in examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
local_state/local_state_with_offsets.py:41:17 debug: inlining call to examples.local_state.local_state_with_offsets.LocalStateContract.set_data in examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
local_state/local_state_with_offsets.py:34:17 debug: inlining call to examples.local_state.local_state_with_offsets.LocalStateContract.delete_data in examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
local_state/local_state_with_offsets.py:32:21 debug: inlining call to examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert in examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
local_state/local_state_with_offsets.py:30:21 debug: inlining call to examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data in examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
debug: inlining call to examples.local_state.local_state_with_offsets.LocalStateContract.__init__ in examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%8#0, offset#0, for_account#4, for_account#3, for_account#2, for_account#1, for_account#0
debug: selected offset#0 from equivalence set
debug: Found equivalence set: tmp%9#0, method#0
debug: selected method#0 from equivalence set
debug: Found equivalence set: maybe_value%0#2, tmp%13#0
debug: selected maybe_value%0#2 from equivalence set
debug: Found equivalence set: maybe_value%0#1, result#0, tmp%15#0
debug: selected result#0 from equivalence set
debug: Found equivalence set: maybe_exists%0#1, exists#0
debug: selected exists#0 from equivalence set
debug: Found equivalence set: tmp%20#0, value#0
debug: selected value#0 from equivalence set
debug: Found equivalence set: tmp%22#0, default#0
debug: selected default#0 from equivalence set
debug: Found equivalence set: state_get%0#0, tmp%23#0
debug: selected state_get%0#0 from equivalence set
debug: Copy propagation made 14 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%1#0 0u) to (! tmp%1#0)
debug: Simplified (== awst_tmp%0#0 NoOp) to (! awst_tmp%0#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplified branch on !tmp%2#0 by swapping zero and non-zero targets
debug: simplified terminator of block@2 from goto tmp%2#0 ? block@3 : block@4 to goto tmp%1#0 ? block@4 : block@3
debug: simplified branch on !tmp%3#0 by swapping zero and non-zero targets
debug: simplified terminator of block@4 from goto tmp%3#0 ? block@7 : block@5 to goto awst_tmp%0#0 ? block@5 : block@7
debug: Optimizer: Merge Blocks
debug: Replaced predecessor block@39 with block@1 in block@40
debug: Merged linear block@39 into block@1
debug: Replaced predecessor block@40 with block@1 in block@2
debug: Merged linear block@40 into block@1
debug: Replaced predecessor block@37 with block@11 in block@38
debug: Merged linear block@37 into block@11
debug: Replaced predecessor block@38 with block@11 in block@19
debug: Merged linear block@38 into block@11
debug: Replaced predecessor block@35 with block@13 in block@36
debug: Merged linear block@35 into block@13
debug: Replaced predecessor block@36 with block@13 in block@18
debug: Merged linear block@36 into block@13
debug: Replaced predecessor block@33 with block@15 in block@34
debug: Merged linear block@33 into block@15
debug: Replaced predecessor block@34 with block@15 in block@17
debug: Merged linear block@34 into block@15
debug: Replaced predecessor block@17 with block@15 in block@18
debug: Merged linear block@17 into block@15
debug: Replaced predecessor block@31 with block@22 in block@32
debug: Merged linear block@31 into block@22
debug: Replaced predecessor block@32 with block@22 in block@27
debug: Merged linear block@32 into block@22
debug: Replaced predecessor block@29 with block@24 in block@30
debug: Merged linear block@29 into block@24
debug: Replaced predecessor block@30 with block@24 in block@26
debug: Merged linear block@30 into block@24
debug: Replaced predecessor block@26 with block@24 in block@27
debug: Merged linear block@26 into block@24
debug: Optimizer: Remove Linear Jumps
debug: Removing jump block block@1
debug: Removing jump block block@18
debug: branching to block@1 will be replaced with block@2
debug: replaced goto tmp%0#0 ? block@2 : block@2 with goto block@2
debug: branching to block@18 will be replaced with block@19
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_with_offsets.LocalStateContract.__init__
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: maybe_value%0#0, result#0
debug: selected result#0 from equivalence set
debug: Found equivalence set: maybe_exists%0#0, exists#0
debug: selected exists#0 from equivalence set
debug: Copy propagation made 2 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_with_offsets.LocalStateContract.set_data
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_with_offsets.LocalStateContract.delete_data
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.__init__
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.set_data
debug: removing unused subroutine examples.local_state.local_state_with_offsets.LocalStateContract.delete_data
debug: Unused subroutines removed
debug: Output IR to local_state/out/LocalStateWithOffsets.ir/LocalStateWithOffsets.approval.001.ssa.opt.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Replaced predecessor block@2 with block@0 in block@3
debug: Replaced predecessor block@2 with block@0 in block@4
debug: Merged linear block@2 into block@0
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Output IR to local_state/out/LocalStateWithOffsets.ir/LocalStateWithOffsets.approval.002.ssa.opt.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 3, ending loop
debug: optimizing clear program of examples.local_state.local_state_with_offsets.LocalStateContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.local_state.local_state_with_offsets.LocalStateContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of examples.local_state.local_state_with_offsets.LocalStateContract
debug: Output IR to local_state/out/LocalStateWithOffsets.ir/LocalStateWithOffsets.approval.100.ssa.array.ir
debug: lowering array IR nodes in clear program of examples.local_state.local_state_with_offsets.LocalStateContract
debug: Output IR to local_state/out/LocalStateWithOffsets.ir/LocalStateWithOffsets.clear.100.ssa.array.ir
debug: optimizing approval program of examples.local_state.local_state_with_offsets.LocalStateContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of examples.local_state.local_state_with_offsets.LocalStateContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.local_state.local_state_with_offsets.LocalStateContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of examples.local_state.local_state_with_offsets.LocalStateContract
local_state/local_state_with_offsets.py:18:5 debug: auto reserving slots in examples.local_state.local_state_with_offsets.LocalStateContract.approval_program, []
debug: Slot allocation not required
debug: Output IR to local_state/out/LocalStateWithOffsets.ir/LocalStateWithOffsets.approval.300.ssa.slot.ir
debug: removing local static slots in clear program of examples.local_state.local_state_with_offsets.LocalStateContract
local_state/local_state_with_offsets.py:50:5 debug: auto reserving slots in examples.local_state.local_state_with_offsets.LocalStateContract.clear_state_program, []
debug: Slot allocation not required
debug: Output IR to local_state/out/LocalStateWithOffsets.ir/LocalStateWithOffsets.clear.300.ssa.slot.ir
debug: Performing SSA IR destructuring for examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
debug: splitting critical edge block@4->block@7
debug: Replaced predecessor block@4 with block@29 in block@7
debug: splitting critical edge block@5->block@7
debug: Replaced predecessor block@5 with block@30 in block@7
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in examples.local_state.local_state_with_offsets.LocalStateContract.approval_program using strategy 'root_operand'
debug: Coalescing maybe_value%0#0 with [maybe_value%0#2]
debug: Coalescing maybe_exists%0#0 with [maybe_exists%0#2]
debug: Coalescing resulted in 4 replacement/s
debug: Sequentializing parallel copies in examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
debug: Performing post-SSA optimizations at level 1
debug: Removing jump block block@29
debug: Removing jump block block@30
debug: branching to block@29 will be replaced with block@7
debug: branching to block@30 will be replaced with block@7
debug: Output IR to local_state/out/LocalStateWithOffsets.ir/LocalStateWithOffsets.approval.400.destructured.ir
debug: Performing SSA IR destructuring for examples.local_state.local_state_with_offsets.LocalStateContract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in examples.local_state.local_state_with_offsets.LocalStateContract.clear_state_program using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in examples.local_state.local_state_with_offsets.LocalStateContract.clear_state_program
debug: Performing post-SSA optimizations at level 1
debug: Output IR to local_state/out/LocalStateWithOffsets.ir/LocalStateWithOffsets.clear.400.destructured.ir
debug: Inserted main_block@0.ops[1]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_block@0.ops[3]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_after_if_else@4.ops[1]: 'l-store-copy awst_tmp%0#0 0'
debug: Replaced main_after_if_else@4.ops[3]: 'v-load awst_tmp%0#0' with 'l-load awst_tmp%0#0'
debug: Inserted main_or_contd@5.ops[3]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_or_contd@5.ops[5]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_after_if_else@7.ops[1]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_after_if_else@7.ops[3]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_after_if_else@7.ops[6]: 'l-store-copy tmp%6#0 0'
debug: Replaced main_after_if_else@7.ops[8]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main_after_if_else@9.ops[1]: 'l-store-copy tmp%7#0 0'
debug: Replaced main_after_if_else@9.ops[3]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main_after_if_else@9.ops[9]: 'l-store-copy tmp%10#0 0'
debug: Replaced main_after_if_else@9.ops[11]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main_after_if_else@9.ops[14]: 'l-store-copy tmp%11#0 0'
debug: Replaced main_after_if_else@9.ops[16]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted main_if_body@10.ops[3]: 'l-store-copy tmp%12#0 0'
debug: Replaced main_if_body@10.ops[5]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main_if_body@11.ops[4]: 'l-store-copy maybe_exists%0#0 1'
debug: Replaced main_if_body@11.ops[7]: 'v-load maybe_exists%0#0' with 'l-load maybe_exists%0#0'
debug: Inserted main_if_body@11.ops[6]: 'l-store-copy maybe_value%0#0 1'
debug: Replaced main_if_body@11.ops[10]: 'v-load maybe_value%0#0' with 'l-load maybe_value%0#0'
debug: Inserted main_else_body@12.ops[3]: 'l-store-copy tmp%14#0 0'
debug: Replaced main_else_body@12.ops[5]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted main_if_body@13.ops[4]: 'l-store-copy exists#0 1'
debug: Replaced main_if_body@13.ops[7]: 'v-load exists#0' with 'l-load exists#0'
debug: Inserted main_if_body@13.ops[6]: 'l-store-copy result#0 1'
debug: Replaced main_if_body@13.ops[10]: 'v-load result#0' with 'l-load result#0'
debug: Inserted main_else_body@14.ops[3]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_else_body@14.ops[5]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_else_body@20.ops[1]: 'l-store-copy tmp%17#0 0'
debug: Replaced main_else_body@20.ops[3]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main_else_body@20.ops[6]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_else_body@20.ops[8]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_if_body@21.ops[3]: 'l-store-copy tmp%19#0 0'
debug: Replaced main_if_body@21.ops[5]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted main_if_body@22.ops[1]: 'l-store-copy value#0 0'
debug: Replaced main_if_body@22.ops[5]: 'v-load value#0' with 'l-load value#0'
debug: Inserted main_else_body@23.ops[3]: 'l-store-copy tmp%21#0 0'
debug: Replaced main_else_body@23.ops[5]: 'v-load tmp%21#0' with 'l-load tmp%21#0'
debug: Inserted main_if_body@24.ops[12]: 'l-store-copy state_get%0#0 0'
debug: Replaced main_if_body@24.ops[14]: 'v-load state_get%0#0' with 'l-load state_get%0#0'
debug: Inserted main_if_body@24.ops[7]: 'l-store-copy maybe_value%0#0 0'
debug: Replaced main_if_body@24.ops[10]: 'v-load maybe_value%0#0' with 'l-load maybe_value%0#0'
debug: Inserted main_if_body@24.ops[6]: 'l-store-copy maybe_exists%0#0 1'
debug: Replaced main_if_body@24.ops[12]: 'v-load maybe_exists%0#0' with 'l-load maybe_exists%0#0'
debug: Inserted main_if_body@24.ops[1]: 'l-store-copy default#0 0'
debug: Replaced main_if_body@24.ops[11]: 'v-load default#0' with 'l-load default#0'
debug: Found 12 edge set/s for examples.local_state.local_state_with_offsets.LocalStateContract.approval_program
debug: examples.local_state.local_state_with_offsets.LocalStateContract.approval_program f-stack entry: ['method#0', 'awst_tmp%0#0', 'offset#0']
debug: examples.local_state.local_state_with_offsets.LocalStateContract.approval_program f-stack on first store: []
local_state/local_state_with_offsets.py:18:5 debug: optimizing TEAL subroutine ops examples.local_state.local_state_with_offsets.LocalStateContract.approval_program() -> uint64:
local_state/local_state_with_offsets.py:18:5 debug: optimizing TEAL subroutine blocks examples.local_state.local_state_with_offsets.LocalStateContract.approval_program() -> uint64:
debug: inlining single reference block main_block@0 into main
debug: inlining single reference block main_if_body@3 into main
debug: inlining single reference block main_or_contd@5 into main_after_if_else@4
debug: inlining single reference block main_if_body@6 into main_after_if_else@4
debug: inlining single reference block main_if_body@8 into main_after_if_else@7
debug: inlining single reference block main_if_body@10 into main_after_if_else@9
debug: inlining single reference block main_if_body@11 into main_after_if_else@9
debug: inlining single reference block main_if_body@13 into main_else_body@12
debug: inlining single reference block main_if_body@15 into main_else_body@14
debug: inlining single reference block main_if_body@21 into main_else_body@20
debug: inlining single reference block main_if_body@22 into main_else_body@20
debug: inlining single reference block main_if_body@24 into main_else_body@23
debug: removing explicit jump to fall-through block main_after_if_else@19
debug: removing explicit jump to fall-through block main_after_if_else@27
local_state/local_state_with_offsets.py:50:5 debug: optimizing TEAL subroutine ops examples.local_state.local_state_with_offsets.LocalStateContract.clear_state_program() -> uint64:
local_state/local_state_with_offsets.py:50:5 debug: optimizing TEAL subroutine blocks examples.local_state.local_state_with_offsets.LocalStateContract.clear_state_program() -> uint64:
debug: inlining single reference block main_block@0 into main
debug: Output IR to local_state/out/LocalStateContract.ir/LocalStateContract.approval.000.ssa.ir
debug: Output IR to local_state/out/LocalStateContract.ir/LocalStateContract.clear.000.ssa.ir
debug: optimizing approval program of examples.local_state.local_state_contract.LocalStateContract at level 1
debug: Begin optimization pass 1/100
debug: marking single-use function examples.local_state.local_state_contract.get_local_state_length for inlining
debug: marking single-use function examples.local_state.local_state_contract.local_bytes_exists for inlining
debug: marking single-use function examples.local_state.local_state_contract.read_local_bytes for inlining
debug: marking trivial method examples.local_state.local_state_contract.LocalStateContract.__init__ as inlineable
debug: marking single-use function examples.local_state.local_state_contract.LocalStateContract.get_guaranteed_data for inlining
debug: marking single-use function examples.local_state.local_state_contract.LocalStateContract.get_data_with_default for inlining
debug: marking single-use function examples.local_state.local_state_contract.LocalStateContract.get_data_or_assert for inlining
debug: marking trivial method examples.local_state.local_state_contract.LocalStateContract.set_data as inlineable
debug: marking trivial method examples.local_state.local_state_contract.LocalStateContract.delete_data as inlineable
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
local_state/local_state_contract.py:44:21 debug: inlining call to examples.local_state.local_state_contract.LocalStateContract.get_data_with_default in examples.local_state.local_state_contract.LocalStateContract.approval_program
local_state/local_state_contract.py:42:17 debug: inlining call to examples.local_state.local_state_contract.LocalStateContract.set_data in examples.local_state.local_state_contract.LocalStateContract.approval_program
local_state/local_state_contract.py:35:17 debug: inlining call to examples.local_state.local_state_contract.LocalStateContract.delete_data in examples.local_state.local_state_contract.LocalStateContract.approval_program
local_state/local_state_contract.py:33:21 debug: inlining call to examples.local_state.local_state_contract.LocalStateContract.get_data_or_assert in examples.local_state.local_state_contract.LocalStateContract.approval_program
local_state/local_state_contract.py:31:21 debug: inlining call to examples.local_state.local_state_contract.LocalStateContract.get_guaranteed_data in examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: inlining call to examples.local_state.local_state_contract.LocalStateContract.__init__ in examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tmp%7#0, method#0
debug: selected method#0 from equivalence set
debug: Found equivalence set: tmp%11#0, for_account#4
debug: selected for_account#4 from equivalence set
debug: Found equivalence set: maybe_value%0#2, result#1, tmp%12#0
debug: selected result#1 from equivalence set
debug: Found equivalence set: tmp%14#0, for_account#3
debug: selected for_account#3 from equivalence set
debug: Found equivalence set: maybe_value%0#1, result#0, tmp%15#0
debug: selected result#0 from equivalence set
debug: Found equivalence set: maybe_exists%0#1, exists#0
debug: selected exists#0 from equivalence set
debug: Found equivalence set: tmp%17#0, for_account#2
debug: selected for_account#2 from equivalence set
debug: Found equivalence set: tmp%21#0, for_account#1
debug: selected for_account#1 from equivalence set
debug: Found equivalence set: tmp%22#0, value#0
debug: selected value#0 from equivalence set
debug: Found equivalence set: tmp%24#0, for_account#0
debug: selected for_account#0 from equivalence set
debug: Found equivalence set: tmp%25#0, default#0
debug: selected default#0 from equivalence set
debug: Found equivalence set: state_get%0#0, tmp%26#0
debug: selected state_get%0#0 from equivalence set
debug: Copy propagation made 14 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%1#0 0u) to (! tmp%1#0)
debug: Simplified (== awst_tmp%0#0 NoOp) to (! awst_tmp%0#0)
debug: Simplified (== tmp%5#0 0u) to (! tmp%5#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: simplified branch on !tmp%2#0 by swapping zero and non-zero targets
debug: simplified terminator of block@2 from goto tmp%2#0 ? block@3 : block@4 to goto tmp%1#0 ? block@4 : block@3
debug: simplified branch on !tmp%3#0 by swapping zero and non-zero targets
debug: simplified terminator of block@4 from goto tmp%3#0 ? block@7 : block@5 to goto awst_tmp%0#0 ? block@5 : block@7
debug: simplified branch on !tmp%6#0 by swapping zero and non-zero targets
debug: simplified terminator of block@7 from goto tmp%6#0 ? block@8 : block@9 to goto tmp%5#0 ? block@9 : block@8
debug: Optimizer: Merge Blocks
debug: Replaced predecessor block@39 with block@1 in block@40
debug: Merged linear block@39 into block@1
debug: Replaced predecessor block@40 with block@1 in block@2
debug: Merged linear block@40 into block@1
debug: Replaced predecessor block@37 with block@11 in block@38
debug: Merged linear block@37 into block@11
debug: Replaced predecessor block@38 with block@11 in block@19
debug: Merged linear block@38 into block@11
debug: Replaced predecessor block@35 with block@13 in block@36
debug: Merged linear block@35 into block@13
debug: Replaced predecessor block@36 with block@13 in block@18
debug: Merged linear block@36 into block@13
debug: Replaced predecessor block@33 with block@15 in block@34
debug: Merged linear block@33 into block@15
debug: Replaced predecessor block@34 with block@15 in block@17
debug: Merged linear block@34 into block@15
debug: Replaced predecessor block@17 with block@15 in block@18
debug: Merged linear block@17 into block@15
debug: Replaced predecessor block@31 with block@22 in block@32
debug: Merged linear block@31 into block@22
debug: Replaced predecessor block@32 with block@22 in block@27
debug: Merged linear block@32 into block@22
debug: Replaced predecessor block@29 with block@24 in block@30
debug: Merged linear block@29 into block@24
debug: Replaced predecessor block@30 with block@24 in block@26
debug: Merged linear block@30 into block@24
debug: Replaced predecessor block@26 with block@24 in block@27
debug: Merged linear block@26 into block@24
debug: Optimizer: Remove Linear Jumps
debug: Removing jump block block@1
debug: Removing jump block block@18
debug: branching to block@1 will be replaced with block@2
debug: replaced goto tmp%0#0 ? block@2 : block@2 with goto block@2
debug: branching to block@18 will be replaced with block@19
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_contract.get_local_state_length
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_contract.local_bytes_exists
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_contract.read_local_bytes
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.__init__
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.get_guaranteed_data
debug: Optimizer: Perform Subroutine Inlining
local_state/local_state_contract.py:58:33 debug: inlining call to examples.local_state.local_state_contract.get_local_state_length in examples.local_state.local_state_contract.LocalStateContract.get_guaranteed_data
local_state/local_state_contract.py:60:16 debug: inlining call to examples.local_state.local_state_contract.local_bytes_exists in examples.local_state.local_state_contract.LocalStateContract.get_guaranteed_data
local_state/local_state_contract.py:61:16 debug: inlining call to examples.local_state.local_state_contract.read_local_bytes in examples.local_state.local_state_contract.LocalStateContract.get_guaranteed_data
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: maybe_value%0#0, result#0
debug: selected result#0 from equivalence set
debug: Found equivalence set: for_account#0, account#0, account#1, account#2
debug: selected for_account#0 from equivalence set
debug: Found equivalence set: tmp%0#1, tmp%1#0
debug: selected tmp%0#1 from equivalence set
debug: Found equivalence set: maybe_exists%0#2, tmp%3#0
debug: selected maybe_exists%0#2 from equivalence set
debug: Found equivalence set: maybe_value%0#2, tmp%4#0
debug: selected maybe_value%0#2 from equivalence set
debug: Copy propagation made 7 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable state#0
debug: Removing unused variable key#0
debug: Removing unused variable key#1
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Replaced predecessor block@1 with block@0 in block@2
debug: Merged linear block@1 into block@0
debug: Replaced predecessor block@2 with block@0 in block@3
debug: Merged linear block@2 into block@0
debug: Replaced predecessor block@3 with block@0 in block@4
debug: Merged linear block@3 into block@0
debug: Replaced predecessor block@4 with block@0 in block@5
debug: Merged linear block@4 into block@0
debug: Replaced predecessor block@5 with block@0 in block@6
debug: Merged linear block@5 into block@0
debug: Merged linear block@6 into block@0
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
local_state/local_state_contract.py:86:12 debug: replacing app_local read with cached value for key: (for_account#0,"local")
local_state/local_state_contract.py:91:12 debug: replacing app_local read with cached value for key: (for_account#0,0x6c6f63616c)
local_state/local_state_contract.py:96:12 debug: replacing app_local read with cached value for key: (for_account#0,"local")
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.get_data_with_default
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.get_data_or_assert
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: maybe_value%0#0, result#0
debug: selected result#0 from equivalence set
debug: Found equivalence set: maybe_exists%0#0, exists#0
debug: selected exists#0 from equivalence set
debug: Copy propagation made 2 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.set_data
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.delete_data
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.__init__
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.get_guaranteed_data
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.get_data_with_default
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.get_data_or_assert
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.set_data
debug: removing unused subroutine examples.local_state.local_state_contract.LocalStateContract.delete_data
debug: Unused subroutines removed
debug: Output IR to local_state/out/LocalStateContract.ir/LocalStateContract.approval.001.ssa.opt.ir
debug: Begin optimization pass 2/100
debug: marking single-use function examples.local_state.local_state_contract.get_local_state_length for inlining
debug: marking single-use function examples.local_state.local_state_contract.local_bytes_exists for inlining
debug: marking single-use function examples.local_state.local_state_contract.read_local_bytes for inlining
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
local_state/local_state_contract.py:58:33 debug: inlining call to examples.local_state.local_state_contract.get_local_state_length in examples.local_state.local_state_contract.LocalStateContract.approval_program
local_state/local_state_contract.py:60:16 debug: inlining call to examples.local_state.local_state_contract.local_bytes_exists in examples.local_state.local_state_contract.LocalStateContract.approval_program
local_state/local_state_contract.py:61:16 debug: inlining call to examples.local_state.local_state_contract.read_local_bytes in examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: for_account#4, account#0, account#1, account#2
debug: selected for_account#4 from equivalence set
debug: Found equivalence set: tmp%0#2, tmp%1#1
debug: selected tmp%0#2 from equivalence set
debug: Found equivalence set: maybe_exists%0#4, tmp%3#1
debug: selected maybe_exists%0#4 from equivalence set
debug: Found equivalence set: maybe_value%0#2, tmp%4#1
debug: selected maybe_value%0#2 from equivalence set
debug: Copy propagation made 6 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable state#0
debug: Removing unused variable key#0
debug: Removing unused variable key#1
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Replaced predecessor block@2 with block@0 in block@3
debug: Replaced predecessor block@2 with block@0 in block@4
debug: Merged linear block@2 into block@0
debug: Replaced predecessor block@29 with block@11 in block@30
debug: Merged linear block@29 into block@11
debug: Replaced predecessor block@30 with block@11 in block@31
debug: Merged linear block@30 into block@11
debug: Replaced predecessor block@31 with block@11 in block@32
debug: Merged linear block@31 into block@11
debug: Replaced predecessor block@32 with block@11 in block@33
debug: Merged linear block@32 into block@11
debug: Replaced predecessor block@33 with block@11 in block@34
debug: Merged linear block@33 into block@11
debug: Replaced predecessor block@34 with block@11 in block@19
debug: Merged linear block@34 into block@11
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
local_state/local_state_contract.py:86:12 debug: replacing app_local read with cached value for key: (for_account#4,"local")
local_state/local_state_contract.py:91:12 debug: replacing app_local read with cached value for key: (for_account#4,0x6c6f63616c)
local_state/local_state_contract.py:96:12 debug: replacing app_local read with cached value for key: (for_account#4,"local")
debug: Optimizing subroutine examples.local_state.local_state_contract.get_local_state_length
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_contract.local_bytes_exists
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine examples.local_state.local_state_contract.read_local_bytes
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine examples.local_state.local_state_contract.get_local_state_length
debug: removing unused subroutine examples.local_state.local_state_contract.local_bytes_exists
debug: removing unused subroutine examples.local_state.local_state_contract.read_local_bytes
debug: Unused subroutines removed
debug: Output IR to local_state/out/LocalStateContract.ir/LocalStateContract.approval.002.ssa.opt.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: result#1, maybe_value%0#1, _%0#0, maybe_value%0#2
debug: selected result#1 from equivalence set
debug: Found equivalence set: maybe_exists%0#2, maybe_exists%0#3, maybe_exists%0#4, maybe_exists%0#5
debug: selected maybe_exists%0#2 from equivalence set
debug: Copy propagation made 5 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== result#1 result#1) to 1u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Removing redundant assert of maybe_exists%0#2
debug: Replacing redundant declaration let tmp%0#2: uint64 = (len result#1) with copy of existing registers [Register(source_location=local_state/local_state_contract.py:58:15-28, ir_type=uint64, name='tmp%0', version=1)]
debug: Removing redundant assert of maybe_exists%0#2
debug: Removing redundant assert of maybe_exists%0#2
debug: Found equivalence set: tmp%0#1, tmp%0#2
debug: selected tmp%0#1 from equivalence set
debug: Copy propagation made 1 modifications
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Output IR to local_state/out/LocalStateContract.ir/LocalStateContract.approval.003.ssa.opt.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%5#1
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%0#1 tmp%0#1) to 1u
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Output IR to local_state/out/LocalStateContract.ir/LocalStateContract.approval.004.ssa.opt.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#1
debug: Removing unused variable tmp%2#1
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Output IR to local_state/out/LocalStateContract.ir/LocalStateContract.approval.005.ssa.opt.ir
debug: Begin optimization pass 6/100
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 6, ending loop
debug: optimizing clear program of examples.local_state.local_state_contract.LocalStateContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of examples.local_state.local_state_contract.LocalStateContract
debug: Output IR to local_state/out/LocalStateContract.ir/LocalStateContract.approval.100.ssa.array.ir
debug: lowering array IR nodes in clear program of examples.local_state.local_state_contract.LocalStateContract
debug: Output IR to local_state/out/LocalStateContract.ir/LocalStateContract.clear.100.ssa.array.ir
debug: optimizing approval program of examples.local_state.local_state_contract.LocalStateContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of examples.local_state.local_state_contract.LocalStateContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine examples.local_state.local_state_contract.LocalStateContract.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Merge Blocks
debug: Optimizer: Remove Linear Jumps
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Encode Decode Pair Elimination
debug: Optimizer: Merge Chained Aggregate Reads
debug: Optimizer: Replace Aggregate Box Ops
debug: Optimizer: Minimize Box Exist Asserts
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of examples.local_state.local_state_contract.LocalStateContract
local_state/local_state_contract.py:20:5 debug: auto reserving slots in examples.local_state.local_state_contract.LocalStateContract.approval_program, []
debug: Slot allocation not required
debug: Output IR to local_state/out/LocalStateContract.ir/LocalStateContract.approval.300.ssa.slot.ir
debug: removing local static slots in clear program of examples.local_state.local_state_contract.LocalStateContract
local_state/local_state_contract.py:51:5 debug: auto reserving slots in examples.local_state.local_state_contract.LocalStateContract.clear_state_program, []
debug: Slot allocation not required
debug: Output IR to local_state/out/LocalStateContract.ir/LocalStateContract.clear.300.ssa.slot.ir
debug: Performing SSA IR destructuring for examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: splitting critical edge block@4->block@7
debug: Replaced predecessor block@4 with block@29 in block@7
debug: splitting critical edge block@5->block@7
debug: Replaced predecessor block@5 with block@30 in block@7
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in examples.local_state.local_state_contract.LocalStateContract.approval_program using strategy 'root_operand'
debug: Coalescing for_account#0 with [for_account#4, for_account#3, for_account#2, for_account#1]
debug: Coalescing result#0 with [result#1]
debug: Coalescing maybe_exists%0#0 with [maybe_exists%0#2]
debug: Coalescing resulted in 12 replacement/s
debug: Sequentializing parallel copies in examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: Performing post-SSA optimizations at level 1
debug: Removing jump block block@29
debug: Removing jump block block@30
debug: branching to block@29 will be replaced with block@7
debug: branching to block@30 will be replaced with block@7
debug: Output IR to local_state/out/LocalStateContract.ir/LocalStateContract.approval.400.destructured.ir
debug: Performing SSA IR destructuring for examples.local_state.local_state_contract.LocalStateContract.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in examples.local_state.local_state_contract.LocalStateContract.clear_state_program using strategy 'root_operand'
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in examples.local_state.local_state_contract.LocalStateContract.clear_state_program
debug: Performing post-SSA optimizations at level 1
debug: Output IR to local_state/out/LocalStateContract.ir/LocalStateContract.clear.400.destructured.ir
debug: Inserted main_block@0.ops[1]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_block@0.ops[3]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_after_if_else@4.ops[1]: 'l-store-copy awst_tmp%0#0 0'
debug: Replaced main_after_if_else@4.ops[3]: 'v-load awst_tmp%0#0' with 'l-load awst_tmp%0#0'
debug: Inserted main_or_contd@5.ops[3]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_or_contd@5.ops[5]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_after_if_else@7.ops[1]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_after_if_else@7.ops[3]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_after_if_else@9.ops[3]: 'l-store-copy tmp%8#0 0'
debug: Replaced main_after_if_else@9.ops[5]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted main_after_if_else@9.ops[8]: 'l-store-copy tmp%9#0 0'
debug: Replaced main_after_if_else@9.ops[10]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main_if_body@10.ops[3]: 'l-store-copy tmp%10#0 0'
debug: Replaced main_if_body@10.ops[5]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main_if_body@11.ops[1]: 'l-store-copy for_account#0 0'
debug: Replaced main_if_body@11.ops[3]: 'v-load for_account#0' with 'l-load for_account#0'
debug: Inserted main_if_body@11.ops[7]: 'l-store-copy maybe_exists%0#0 1'
debug: Replaced main_if_body@11.ops[10]: 'v-load maybe_exists%0#0' with 'l-load maybe_exists%0#0'
debug: Inserted main_if_body@11.ops[9]: 'l-store-copy result#0 1'
debug: Replaced main_if_body@11.ops[13]: 'v-load result#0' with 'l-load result#0'
debug: Inserted main_else_body@12.ops[3]: 'l-store-copy tmp%13#0 0'
debug: Replaced main_else_body@12.ops[5]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted main_if_body@13.ops[1]: 'l-store-copy for_account#0 0'
debug: Replaced main_if_body@13.ops[3]: 'v-load for_account#0' with 'l-load for_account#0'
debug: Inserted main_if_body@13.ops[7]: 'l-store-copy exists#0 1'
debug: Replaced main_if_body@13.ops[10]: 'v-load exists#0' with 'l-load exists#0'
debug: Inserted main_if_body@13.ops[9]: 'l-store-copy result#0 1'
debug: Replaced main_if_body@13.ops[13]: 'v-load result#0' with 'l-load result#0'
debug: Inserted main_else_body@14.ops[3]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_else_body@14.ops[5]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_if_body@15.ops[1]: 'l-store-copy for_account#0 0'
debug: Replaced main_if_body@15.ops[3]: 'v-load for_account#0' with 'l-load for_account#0'
debug: Inserted main_else_body@20.ops[1]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_else_body@20.ops[3]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_else_body@20.ops[6]: 'l-store-copy tmp%19#0 0'
debug: Replaced main_else_body@20.ops[8]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted main_if_body@21.ops[3]: 'l-store-copy tmp%20#0 0'
debug: Replaced main_if_body@21.ops[5]: 'v-load tmp%20#0' with 'l-load tmp%20#0'
debug: Inserted main_if_body@22.ops[1]: 'l-store-copy for_account#0 0'
debug: Replaced main_if_body@22.ops[5]: 'v-load for_account#0' with 'l-load for_account#0'
debug: Inserted main_if_body@22.ops[4]: 'l-store-copy value#0 1'
debug: Replaced main_if_body@22.ops[8]: 'v-load value#0' with 'l-load value#0'
debug: Inserted main_else_body@23.ops[3]: 'l-store-copy tmp%23#0 0'
debug: Replaced main_else_body@23.ops[5]: 'v-load tmp%23#0' with 'l-load tmp%23#0'
debug: Inserted main_if_body@24.ops[14]: 'l-store-copy state_get%0#0 0'
debug: Replaced main_if_body@24.ops[16]: 'v-load state_get%0#0' with 'l-load state_get%0#0'
debug: Inserted main_if_body@24.ops[9]: 'l-store-copy maybe_value%0#0 0'
debug: Replaced main_if_body@24.ops[12]: 'v-load maybe_value%0#0' with 'l-load maybe_value%0#0'
debug: Inserted main_if_body@24.ops[1]: 'l-store-copy for_account#0 0'
debug: Replaced main_if_body@24.ops[5]: 'v-load for_account#0' with 'l-load for_account#0'
debug: Inserted main_if_body@24.ops[9]: 'l-store-copy maybe_exists%0#0 1'
debug: Replaced main_if_body@24.ops[15]: 'v-load maybe_exists%0#0' with 'l-load maybe_exists%0#0'
debug: Inserted main_if_body@24.ops[4]: 'l-store-copy default#0 1'
debug: Replaced main_if_body@24.ops[14]: 'v-load default#0' with 'l-load default#0'
debug: Found 12 edge set/s for examples.local_state.local_state_contract.LocalStateContract.approval_program
debug: examples.local_state.local_state_contract.LocalStateContract.approval_program f-stack entry: ['method#0', 'awst_tmp%0#0']
debug: examples.local_state.local_state_contract.LocalStateContract.approval_program f-stack on first store: []
local_state/local_state_contract.py:20:5 debug: optimizing TEAL subroutine ops examples.local_state.local_state_contract.LocalStateContract.approval_program() -> uint64:
local_state/local_state_contract.py:20:5 debug: optimizing TEAL subroutine blocks examples.local_state.local_state_contract.LocalStateContract.approval_program() -> uint64:
debug: inlining single reference block main_block@0 into main
debug: inlining single reference block main_if_body@3 into main
debug: inlining single reference block main_or_contd@5 into main_after_if_else@4
debug: inlining single reference block main_if_body@6 into main_after_if_else@4
debug: inlining single reference block main_if_body@8 into main_after_if_else@7
debug: inlining single reference block main_if_body@10 into main_after_if_else@9
debug: inlining single reference block main_if_body@11 into main_after_if_else@9
debug: inlining single reference block main_if_body@13 into main_else_body@12
debug: inlining single reference block main_if_body@15 into main_else_body@14
debug: inlining single reference block main_if_body@21 into main_else_body@20
debug: inlining single reference block main_if_body@22 into main_else_body@20
debug: inlining single reference block main_if_body@24 into main_else_body@23
debug: removing explicit jump to fall-through block main_after_if_else@19
debug: removing explicit jump to fall-through block main_after_if_else@27
local_state/local_state_contract.py:51:5 debug: optimizing TEAL subroutine ops examples.local_state.local_state_contract.LocalStateContract.clear_state_program() -> uint64:
local_state/local_state_contract.py:51:5 debug: optimizing TEAL subroutine blocks examples.local_state.local_state_contract.LocalStateContract.clear_state_program() -> uint64:
debug: inlining single reference block main_block@0 into main
info: Writing local_state/out/LocalStateWithOffsets.approval.teal
info: Writing local_state/out/LocalStateWithOffsets.clear.teal
info: Writing local_state/out/LocalStateWithOffsets.approval.bin
info: Writing local_state/out/LocalStateWithOffsets.clear.bin
info: Writing local_state/out/LocalStateWithOffsets.approval.stats.txt
info: Writing local_state/out/LocalStateWithOffsets.clear.stats.txt
info: Writing local_state/out/LocalStateWithOffsets.approval.puya.map
info: Writing local_state/out/LocalStateWithOffsets.clear.puya.map
info: Writing local_state/out/LocalStateContract.approval.teal
info: Writing local_state/out/LocalStateContract.clear.teal
info: Writing local_state/out/LocalStateContract.approval.bin
info: Writing local_state/out/LocalStateContract.clear.bin
info: Writing local_state/out/LocalStateContract.approval.stats.txt
info: Writing local_state/out/LocalStateContract.clear.stats.txt
info: Writing local_state/out/LocalStateContract.approval.puya.map
info: Writing local_state/out/LocalStateContract.clear.puya.map