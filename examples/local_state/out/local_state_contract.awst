contract LocalStateContract
{
  locals {
    ['local']: bytes
    ['local_bool']: bool
  }
  
  constructor()
  {
  }
  
  approval_program(): bool
  {
    if (txn<ApplicationID>() == reinterpret_cast<application>(0u)) {
      return true
    }
    if (!(txn<OnCompletion>() IS IN (NoOp, OptIn))) {
      return false
    }
    if (txn<NumAppArgs>() == 0u) {
      return false
    }
    method: bytes = txna<ApplicationArgs, 0>()
    if (txn<NumAppArgs>() == 1u) {
      if (method == 'get_guaranteed_data') {
        log(this::get_guaranteed_data(txn<Sender>()))
      } else {
        if (method == 'get_data_or_assert') {
          log(this::get_data_or_assert(txn<Sender>()))
        } else {
          if (method == 'delete_data') {
            this::delete_data(txn<Sender>())
            log('Deleted')
          } else {
            return false
          }
        }
      }
      return true
    } else {
      if (txn<NumAppArgs>() == 2u) {
        if (method == 'set_data') {
          this::set_data(txn<Sender>(), txna<ApplicationArgs, 1>())
        } else {
          if (method == 'get_data_with_default') {
            log(this::get_data_with_default(txn<Sender>(), txna<ApplicationArgs, 1>()))
          } else {
            return false
          }
        }
        return true
      } else {
        return false
      }
    }
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine get_guaranteed_data(for_account: account): bytes
  {
    return this.local[for_account]
  }
  
  subroutine get_data_with_default(for_account: account, default: bytes): bytes
  {
    return STATE_GET(this.local[for_account], default=default)
  }
  
  subroutine get_data_or_assert(for_account: account): bytes
  {
    (result, exists): tuple<bytes,bool> = STATE_GET_EX(this.local[for_account])
    assert(exists, comment="no data for account")
    return result
  }
  
  subroutine set_data(for_account: account, value: bytes): void
  {
    this.local[for_account]: bytes = value
  }
  
  subroutine delete_data(for_account: account): void
  {
    STATE_DELETE(this.local[for_account])
  }
}