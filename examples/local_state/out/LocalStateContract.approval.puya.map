{
  "version": 3,
  "sources": [
    "../local_state_contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAoBW;;AAAX;;;AACmB;AAAP;AACD;;AAAA;AAAA;;AAAA;;;AAAA;AAAiD;AAAjD;AAAA;;;AACC;AACD;;AAAX;;;AACY;AAEK;;;AAAA;;AACN;;AAAoB;AAApB;AAAX;;;AACe;;AAAU;;;;;;;;;;;;;;;;;;;;;AAAV;AAAf;;;AAC6C;;AAyB5B;AAAA;AAAA;AAAA;AAzBD;AAQG;AAAP;AAPK;;AAAU;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AAC4C;;AAsCnB;AAAA;AAAA;AACjB;AAvCQ;;;;AACC;;AAAU;;;;;;;;;;;;;AAAV;AAAjB;;;AACiC;;AA8CrB;AAAJ;AA7CY;;;;;;;;;AAAJ;;;;AAEA;AAEH;;AAAoB;;AAApB;AAAb;;;AACe;;AAAU;;;;;;;;;;AAAV;AAAf;;;AAC8B;;AAmCtB;AAnCkC;;;AAmClC;AA9BW;AAAP;AAJK;;AAAU;;;;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AAC2D;;;AAAZ;;AAuBhC;AAAA;AAAA;AAAA;AAvBC;;;;AAEA;AAGJ",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.local_state.local_state_contract.LocalStateContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"local\""
    },
    "13": {
      "op": "intc_1 // 0",
      "stack_out": [
        "method#0"
      ]
    },
    "14": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "16": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "18": {
      "op": "bnz main_after_if_else@4",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "21": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "1"
      ]
    },
    "22": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "23": {
      "block": "main_after_if_else@4",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn OnCompletion"
    },
    "25": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "26": {
      "op": "bury 2",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "28": {
      "op": "bz main_after_if_else@7",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "31": {
      "op": "dup",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "32": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "OptIn"
      ]
    },
    "33": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "34": {
      "op": "bnz main_after_if_else@7",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "37": {
      "op": "err"
    },
    "38": {
      "block": "main_after_if_else@7",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%5#0"
      ]
    },
    "40": {
      "op": "bnz main_after_if_else@9",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "43": {
      "op": "err",
      "defined_out": []
    },
    "44": {
      "block": "main_after_if_else@9",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "47": {
      "op": "bury 2",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "49": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "method#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%8#0"
      ]
    },
    "51": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "method#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%8#0",
        "1"
      ]
    },
    "52": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%9#0"
      ]
    },
    "53": {
      "op": "bz main_else_body@20",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "56": {
      "op": "dig 1",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "58": {
      "op": "pushbytes 0x6765745f67756172616e746565645f64617461",
      "defined_out": [
        "0x6765745f67756172616e746565645f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x6765745f67756172616e746565645f64617461"
      ]
    },
    "79": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%10#0"
      ]
    },
    "80": {
      "op": "bz main_else_body@12",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "83": {
      "op": "txn Sender",
      "defined_out": [
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0"
      ]
    },
    "85": {
      "op": "intc_1 // 0",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "0"
      ]
    },
    "86": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "0",
        "\"local\""
      ]
    },
    "87": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "method#0",
        "result#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0",
        "maybe_exists%0#0"
      ]
    },
    "88": {
      "error": "check self.local exists for account",
      "op": "assert // check self.local exists for account",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0"
      ]
    },
    "89": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "90": {
      "block": "main_after_if_else@19",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "1"
      ]
    },
    "91": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "92": {
      "block": "main_else_body@12",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "94": {
      "op": "pushbytes 0x6765745f646174615f6f725f617373657274",
      "defined_out": [
        "0x6765745f646174615f6f725f617373657274",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x6765745f646174615f6f725f617373657274"
      ]
    },
    "114": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%13#0"
      ]
    },
    "115": {
      "op": "bz main_else_body@14",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "118": {
      "op": "txn Sender",
      "defined_out": [
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0"
      ]
    },
    "120": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "0"
      ]
    },
    "121": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "0",
        "\"local\""
      ]
    },
    "122": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "method#0",
        "result#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0",
        "exists#0"
      ]
    },
    "123": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0"
      ]
    },
    "124": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "125": {
      "op": "b main_after_if_else@19"
    },
    "128": {
      "block": "main_else_body@14",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "130": {
      "op": "pushbytes 0x64656c6574655f64617461",
      "defined_out": [
        "0x64656c6574655f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x64656c6574655f64617461"
      ]
    },
    "143": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%16#0"
      ]
    },
    "144": {
      "op": "bz main_else_body@16",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "147": {
      "op": "txn Sender",
      "defined_out": [
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0"
      ]
    },
    "149": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "\"local\""
      ]
    },
    "150": {
      "op": "app_local_del",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "151": {
      "op": "pushbytes \"Deleted\"",
      "defined_out": [
        "\"Deleted\"",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "\"Deleted\""
      ]
    },
    "160": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "161": {
      "op": "b main_after_if_else@19"
    },
    "164": {
      "block": "main_else_body@16",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "err",
      "defined_out": []
    },
    "165": {
      "block": "main_else_body@20",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%18#0"
      ]
    },
    "167": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%18#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%18#0",
        "2"
      ]
    },
    "169": {
      "op": "==",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%19#0"
      ]
    },
    "170": {
      "op": "bz main_else_body@28",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "173": {
      "op": "dig 1",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "175": {
      "op": "pushbytes 0x7365745f64617461",
      "defined_out": [
        "0x7365745f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x7365745f64617461"
      ]
    },
    "185": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%20#0"
      ]
    },
    "186": {
      "op": "bz main_else_body@23",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "189": {
      "op": "txn Sender",
      "defined_out": [
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0"
      ]
    },
    "191": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "\"local\""
      ]
    },
    "192": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"local\"",
        "for_account#0",
        "method#0",
        "value#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "\"local\"",
        "value#0"
      ]
    },
    "195": {
      "op": "app_local_put",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "196": {
      "block": "main_after_if_else@27",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "1"
      ]
    },
    "197": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "198": {
      "block": "main_else_body@23",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "200": {
      "op": "pushbytes 0x6765745f646174615f776974685f64656661756c74",
      "defined_out": [
        "0x6765745f646174615f776974685f64656661756c74",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x6765745f646174615f776974685f64656661756c74"
      ]
    },
    "223": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%23#0"
      ]
    },
    "224": {
      "op": "bz main_else_body@25",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "227": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "default#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "default#0"
      ]
    },
    "230": {
      "op": "txn Sender",
      "defined_out": [
        "default#0",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "default#0",
        "for_account#0"
      ]
    },
    "232": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "default#0",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "default#0",
        "for_account#0",
        "0"
      ]
    },
    "233": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "default#0",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "default#0",
        "for_account#0",
        "0",
        "\"local\""
      ]
    },
    "234": {
      "op": "app_local_get_ex",
      "defined_out": [
        "default#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "default#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "235": {
      "op": "select",
      "defined_out": [
        "method#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "state_get%0#0"
      ]
    },
    "236": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "237": {
      "op": "b main_after_if_else@27"
    },
    "240": {
      "block": "main_else_body@25",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "err",
      "defined_out": []
    },
    "241": {
      "block": "main_else_body@28",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "err",
      "defined_out": []
    }
  }
}