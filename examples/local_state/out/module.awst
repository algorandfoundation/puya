contract LocalStateWithOffsets
{
  method_resolution_order: (
  )
  locals {
    ['local']: bytes
  }
  
  subroutine examples.local_state.local_state_with_offsets.LocalStateContract.__algopy_entrypoint_with_init(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return this::approval_program()
  }
  
  subroutine examples.local_state.local_state_with_offsets.LocalStateContract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine examples.local_state.local_state_with_offsets.LocalStateContract.__init__(): void
  {
  }
  
  subroutine examples.local_state.local_state_with_offsets.LocalStateContract.approval_program(): bool
  {
    if (txn<ApplicationID>() == reinterpret_cast<application>(0u)) {
      return true
    }
    if (!(SINGLE_EVAL(id=0, source=txn<OnCompletion>()) == SINGLE_EVAL(id=1, source=(NoOp, OptIn))[0] or SINGLE_EVAL(id=0) == SINGLE_EVAL(id=1)[1])) {
      return false
    }
    if (txn<NumAppArgs>() < 1u) {
      return false
    }
    offset: uint64 = btoi(txna<ApplicationArgs, 0>())
    method: bytes = txna<ApplicationArgs, 1>()
    if (txn<NumAppArgs>() == 2u) {
      if (method == hex<"6765745F67756172616E746565645F64617461">) {
        log(this::get_guaranteed_data(offset))
      } else {
        if (method == hex<"6765745F646174615F6F725F617373657274">) {
          log(this::get_data_or_assert(offset))
        } else {
          if (method == hex<"64656C6574655F64617461">) {
            this::delete_data(offset)
            log('Deleted')
          } else {
            return false
          }
        }
      }
      return true
    } else {
      if (txn<NumAppArgs>() == 3u) {
        if (method == hex<"7365745F64617461">) {
          this::set_data(offset, txna<ApplicationArgs, 2>())
        } else {
          if (method == hex<"6765745F646174615F776974685F64656661756C74">) {
            log(this::get_data_with_default(offset, txna<ApplicationArgs, 2>()))
          } else {
            return false
          }
        }
        return true
      } else {
        return false
      }
    }
  }
  
  subroutine examples.local_state.local_state_with_offsets.LocalStateContract.get_guaranteed_data(for_account: uint64): bytes
  {
    return LocalState['local', for_account]
  }
  
  subroutine examples.local_state.local_state_with_offsets.LocalStateContract.get_data_with_default(for_account: uint64, default: bytes): bytes
  {
    return STATE_GET(LocalState['local', for_account], default=default)
  }
  
  subroutine examples.local_state.local_state_with_offsets.LocalStateContract.get_data_or_assert(for_account: uint64): bytes
  {
    (result, exists): tuple<bytes,bool> = STATE_GET_EX(LocalState['local', for_account])
    assert(exists, comment="no data for account")
    return result
  }
  
  subroutine examples.local_state.local_state_with_offsets.LocalStateContract.set_data(for_account: uint64, value: bytes): void
  {
    LocalState['local', for_account]: bytes = value
  }
  
  subroutine examples.local_state.local_state_with_offsets.LocalStateContract.delete_data(for_account: uint64): void
  {
    STATE_DELETE(LocalState['local', for_account])
  }
}

contract LocalStateContract
{
  method_resolution_order: (
  )
  locals {
    ['local']: bytes
    ['local_bool']: bool
  }
  
  subroutine examples.local_state.local_state_contract.LocalStateContract.__algopy_entrypoint_with_init(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return this::approval_program()
  }
  
  subroutine examples.local_state.local_state_contract.LocalStateContract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine examples.local_state.local_state_contract.LocalStateContract.__init__(): void
  {
  }
  
  subroutine examples.local_state.local_state_contract.LocalStateContract.approval_program(): bool
  {
    if (txn<ApplicationID>() == reinterpret_cast<application>(0u)) {
      return true
    }
    if (!(SINGLE_EVAL(id=2, source=txn<OnCompletion>()) == SINGLE_EVAL(id=3, source=(NoOp, OptIn))[0] or SINGLE_EVAL(id=2) == SINGLE_EVAL(id=3)[1])) {
      return false
    }
    if (txn<NumAppArgs>() == 0u) {
      return false
    }
    method: bytes = txna<ApplicationArgs, 0>()
    if (txn<NumAppArgs>() == 1u) {
      if (method == hex<"6765745F67756172616E746565645F64617461">) {
        log(this::get_guaranteed_data(txn<Sender>()))
      } else {
        if (method == hex<"6765745F646174615F6F725F617373657274">) {
          log(this::get_data_or_assert(txn<Sender>()))
        } else {
          if (method == hex<"64656C6574655F64617461">) {
            this::delete_data(txn<Sender>())
            log('Deleted')
          } else {
            return false
          }
        }
      }
      return true
    } else {
      if (txn<NumAppArgs>() == 2u) {
        if (method == hex<"7365745F64617461">) {
          this::set_data(txn<Sender>(), txna<ApplicationArgs, 1>())
        } else {
          if (method == hex<"6765745F646174615F776974685F64656661756C74">) {
            log(this::get_data_with_default(txn<Sender>(), txna<ApplicationArgs, 1>()))
          } else {
            return false
          }
        }
        return true
      } else {
        return false
      }
    }
  }
  
  subroutine examples.local_state.local_state_contract.LocalStateContract.get_guaranteed_data(for_account: account): bytes
  {
    result: bytes = LocalState['local', for_account]
    assert(len(result) == examples.local_state.local_state_contract.get_local_state_length('local', for_account))
    assert(examples.local_state.local_state_contract.local_bytes_exists(for_account, hex<"6C6F63616C">))
    assert(examples.local_state.local_state_contract.read_local_bytes(for_account, 'local') == result)
    return result
  }
  
  subroutine examples.local_state.local_state_contract.LocalStateContract.get_data_with_default(for_account: account, default: bytes): bytes
  {
    return STATE_GET(LocalState['local', for_account], default=default)
  }
  
  subroutine examples.local_state.local_state_contract.LocalStateContract.get_data_or_assert(for_account: account): bytes
  {
    (result, exists): tuple<bytes,bool> = STATE_GET_EX(LocalState['local', for_account])
    assert(exists, comment="no data for account")
    return result
  }
  
  subroutine examples.local_state.local_state_contract.LocalStateContract.set_data(for_account: account, value: bytes): void
  {
    LocalState['local', for_account]: bytes = value
  }
  
  subroutine examples.local_state.local_state_contract.LocalStateContract.delete_data(for_account: account): void
  {
    STATE_DELETE(LocalState['local', for_account])
  }
}

subroutine get_local_state_length(state: state_key, account: account): uint64
{
  return len(LocalState[state, account])
}

subroutine local_bytes_exists(account: account, key: bytes): bool
{
  return STATE_EXISTS(LocalState[reinterpret_cast<state_key>(key), account])
}

subroutine read_local_bytes(account: account, key: string): bytes
{
  return LocalState[reinterpret_cast<state_key>(reinterpret_cast<bytes>(key)), account]
}