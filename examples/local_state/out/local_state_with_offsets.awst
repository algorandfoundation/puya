contract LocalStateContract
{
  locals {
    ['local']: algopy.Bytes
  }
  
  constructor()
  {
  }
  
  approval_program(): bool
  {
    if (txn<ApplicationID>() == reinterpret_cast<algopy.Application>(0u)) {
      return true
    }
    if (!(txn<OnCompletion>() IS IN (NoOp, OptIn))) {
      return false
    }
    if (txn<NumAppArgs>() < 1u) {
      return false
    }
    offset: algopy.UInt64 = btoi(txna<ApplicationArgs, 0>())
    method: algopy.Bytes = txna<ApplicationArgs, 1>()
    if (txn<NumAppArgs>() == 2u) {
      if (method == 'get_guaranteed_data') {
        log(this::get_guaranteed_data(offset))
      } else {
        if (method == 'get_data_or_assert') {
          log(this::get_data_or_assert(offset))
        } else {
          if (method == 'delete_data') {
            this::delete_data(offset)
            log('Deleted')
          } else {
            return false
          }
        }
      }
      return true
    } else {
      if (txn<NumAppArgs>() == 3u) {
        if (method == 'set_data') {
          this::set_data(offset, txna<ApplicationArgs, 2>())
        } else {
          if (method == 'get_data_with_default') {
            log(this::get_data_with_default(offset, txna<ApplicationArgs, 2>()))
          } else {
            return false
          }
        }
        return true
      } else {
        return false
      }
    }
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine get_guaranteed_data(for_account: algopy.UInt64): algopy.Bytes
  {
    return this.local[for_account]
  }
  
  subroutine get_data_with_default(for_account: algopy.UInt64, default: algopy.Bytes): algopy.Bytes
  {
    return STATE_GET(this.local[for_account], default=default)
  }
  
  subroutine get_data_or_assert(for_account: algopy.UInt64): algopy.Bytes
  {
    (result, exists): tuple[algopy.Bytes, bool] = STATE_GET_EX(this.local[for_account])
    assert(exists, comment="no data for account")
    return result
  }
  
  subroutine set_data(for_account: algopy.UInt64, value: algopy.Bytes): None
  {
    this.local[for_account]: algopy.Bytes = value
  }
  
  subroutine delete_data(for_account: algopy.UInt64): None
  {
    STATE_DELETE(this.local[for_account])
  }
}