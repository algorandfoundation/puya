contract LocalStateContract
{
  locals {
    ['local']: bytes
  }
  
  constructor()
  {
  }
  
  approval_program(): bool
  {
    if (txn<ApplicationID>() == reinterpret_cast<application>(0u)) {
      return true
    }
    if (!(txn<OnCompletion>() IS IN (NoOp, OptIn))) {
      return false
    }
    if (txn<NumAppArgs>() < 1u) {
      return false
    }
    offset: uint64 = btoi(txna<ApplicationArgs, 0>())
    method: bytes = txna<ApplicationArgs, 1>()
    if (txn<NumAppArgs>() == 2u) {
      if (method == hex<"6765745F67756172616E746565645F64617461">) {
        log(this::get_guaranteed_data(offset))
      } else {
        if (method == hex<"6765745F646174615F6F725F617373657274">) {
          log(this::get_data_or_assert(offset))
        } else {
          if (method == hex<"64656C6574655F64617461">) {
            this::delete_data(offset)
            log('Deleted')
          } else {
            return false
          }
        }
      }
      return true
    } else {
      if (txn<NumAppArgs>() == 3u) {
        if (method == hex<"7365745F64617461">) {
          this::set_data(offset, txna<ApplicationArgs, 2>())
        } else {
          if (method == hex<"6765745F646174615F776974685F64656661756C74">) {
            log(this::get_data_with_default(offset, txna<ApplicationArgs, 2>()))
          } else {
            return false
          }
        }
        return true
      } else {
        return false
      }
    }
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine get_guaranteed_data(for_account: uint64): bytes
  {
    return LocalState[<bound method BytesConstant.accept of BytesConstant(source_location=local_state/local_state_with_offsets.py:16:8-18, wtype=WType(name='state_key', scalar_type=<AVMType.bytes: 1>, bounds=SizeBounds(min_size=0, max_size=64), ephemeral=False, immutable=True), value=b'local', encoding=<BytesEncoding.utf8: 'utf8'>)>, for_account]
  }
  
  subroutine get_data_with_default(for_account: uint64, default: bytes): bytes
  {
    return STATE_GET(LocalState[<bound method BytesConstant.accept of BytesConstant(source_location=local_state/local_state_with_offsets.py:16:8-18, wtype=WType(name='state_key', scalar_type=<AVMType.bytes: 1>, bounds=SizeBounds(min_size=0, max_size=64), ephemeral=False, immutable=True), value=b'local', encoding=<BytesEncoding.utf8: 'utf8'>)>, for_account], default=default)
  }
  
  subroutine get_data_or_assert(for_account: uint64): bytes
  {
    (result, exists): tuple<bytes,bool> = STATE_GET_EX(LocalState[<bound method BytesConstant.accept of BytesConstant(source_location=local_state/local_state_with_offsets.py:16:8-18, wtype=WType(name='state_key', scalar_type=<AVMType.bytes: 1>, bounds=SizeBounds(min_size=0, max_size=64), ephemeral=False, immutable=True), value=b'local', encoding=<BytesEncoding.utf8: 'utf8'>)>, for_account])
    assert(exists, comment="no data for account")
    return result
  }
  
  subroutine set_data(for_account: uint64, value: bytes): void
  {
    LocalState[<bound method BytesConstant.accept of BytesConstant(source_location=local_state/local_state_with_offsets.py:16:8-18, wtype=WType(name='state_key', scalar_type=<AVMType.bytes: 1>, bounds=SizeBounds(min_size=0, max_size=64), ephemeral=False, immutable=True), value=b'local', encoding=<BytesEncoding.utf8: 'utf8'>)>, for_account]: bytes = value
  }
  
  subroutine delete_data(for_account: uint64): void
  {
    STATE_DELETE(LocalState[<bound method BytesConstant.accept of BytesConstant(source_location=local_state/local_state_with_offsets.py:16:8-18, wtype=WType(name='state_key', scalar_type=<AVMType.bytes: 1>, bounds=SizeBounds(min_size=0, max_size=64), ephemeral=False, immutable=True), value=b'local', encoding=<BytesEncoding.utf8: 'utf8'>)>, for_account])
  }
}