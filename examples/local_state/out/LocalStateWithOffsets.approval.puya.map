{
  "version": 3,
  "sources": [
    "../local_state_with_offsets.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;AAkBW;;AAAX;;;AACmB;;AACR;;AAAA;AAAA;;AAAA;;;AAAA;;AAAiD;AAAjD;AAAA;;;AACQ;;AACR;;AAAmB;AAAnB;AAAX;;;AACmB;;AAEM;;;AAAR;AAAT;;AACS;;;AAAT;;AACG;;AAAoB;;AAApB;AAAX;;;AACe;;AAAU;;;;;;;;;;;;;;;;;;;;;AAAV;AAAf;;;AA0Be;AAAA;AAAA;AAAA;AAAA;AAzBC;AAQG;;AAPF;;AAAU;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AAgCyB;AAAA;AAAA;AAAA;AACjB;AAhCQ;;;;AACC;;AAAU;;;;;;;;;;;;;AAAV;AAAjB;;;AAwCQ;AAAI;AAAJ;AAtCY;;;;;;;;;AAAJ;;;;AAEO;;AAEV;;AAAoB;;AAApB;AAAb;;;AACe;;AAAU;;;;;;;;;;AAAV;AAAf;;;AACsC;;;AA4B9B;;AAAA;AAAA;;AAAA;AAvBW;;AAJF;;AAAU;;;;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AACuD;;;AAgBxC;;AAAA;AAAA;AAAA;AAAA;AAhBC;;;;AAEO;;AAGJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.local_state.local_state_with_offsets.LocalStateContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"local\""
    },
    "13": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method#0"
      ]
    },
    "14": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "16": {
      "op": "dup",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "17": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%0#1"
      ]
    },
    "19": {
      "op": "bnz main_after_if_else@5",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "22": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%1#0"
      ]
    },
    "23": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "24": {
      "block": "main_after_if_else@5",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn OnCompletion"
    },
    "26": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "27": {
      "op": "bury 3",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0"
      ]
    },
    "29": {
      "op": "bz main_after_if_else@8",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "32": {
      "op": "dig 1",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0"
      ]
    },
    "34": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "awst_tmp%0#0",
        "OptIn"
      ]
    },
    "35": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%3#0"
      ]
    },
    "36": {
      "op": "bnz main_after_if_else@8",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "39": {
      "op": "intc_0 // 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%1#0"
      ]
    },
    "40": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "41": {
      "block": "main_after_if_else@8",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%4#0"
      ]
    },
    "43": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%4#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%4#0",
        "1"
      ]
    },
    "44": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%5#0"
      ]
    },
    "45": {
      "op": "bz main_after_if_else@10",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "48": {
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%1#0"
      ]
    },
    "49": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "50": {
      "block": "main_after_if_else@10",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%6#0"
      ]
    },
    "53": {
      "op": "btoi",
      "defined_out": [
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "54": {
      "op": "bury 1",
      "defined_out": [
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "56": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "59": {
      "op": "bury 3",
      "defined_out": [
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "61": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "method#0",
        "offset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%7#0"
      ]
    },
    "63": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "method#0",
        "offset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%7#0",
        "2"
      ]
    },
    "65": {
      "op": "==",
      "defined_out": [
        "method#0",
        "offset#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%8#0"
      ]
    },
    "66": {
      "op": "bz main_else_body@21",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "69": {
      "op": "dig 2",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "71": {
      "op": "pushbytes 0x6765745f67756172616e746565645f64617461",
      "defined_out": [
        "0x6765745f67756172616e746565645f64617461",
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x6765745f67756172616e746565645f64617461"
      ]
    },
    "92": {
      "op": "==",
      "defined_out": [
        "method#0",
        "offset#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%9#0"
      ]
    },
    "93": {
      "op": "bz main_else_body@13",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "96": {
      "op": "dup",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "97": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0",
        "0"
      ]
    },
    "98": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0",
        "0",
        "\"local\""
      ]
    },
    "99": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "100": {
      "error": "check self.local exists for account",
      "op": "assert // check self.local exists for account",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "maybe_value%0#0"
      ]
    },
    "101": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "102": {
      "block": "main_after_if_else@20",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%1#0"
      ]
    },
    "103": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "104": {
      "block": "main_else_body@13",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "106": {
      "op": "pushbytes 0x6765745f646174615f6f725f617373657274",
      "defined_out": [
        "0x6765745f646174615f6f725f617373657274",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x6765745f646174615f6f725f617373657274"
      ]
    },
    "126": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%11#0"
      ]
    },
    "127": {
      "op": "bz main_else_body@15",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "130": {
      "op": "dup",
      "defined_out": [
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "131": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0",
        "0"
      ]
    },
    "132": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0",
        "0",
        "\"local\""
      ]
    },
    "133": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "method#0",
        "offset#0",
        "result#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "result#0",
        "exists#0"
      ]
    },
    "134": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "result#0"
      ]
    },
    "135": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "136": {
      "op": "b main_after_if_else@20"
    },
    "139": {
      "block": "main_else_body@15",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "141": {
      "op": "pushbytes 0x64656c6574655f64617461",
      "defined_out": [
        "0x64656c6574655f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x64656c6574655f64617461"
      ]
    },
    "154": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%13#0"
      ]
    },
    "155": {
      "op": "bz main_else_body@17",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "158": {
      "op": "dup",
      "defined_out": [
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0"
      ]
    },
    "159": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0",
        "\"local\""
      ]
    },
    "160": {
      "op": "app_local_del",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "161": {
      "op": "pushbytes \"Deleted\"",
      "defined_out": [
        "\"Deleted\"",
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "\"Deleted\""
      ]
    },
    "170": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "171": {
      "op": "b main_after_if_else@20"
    },
    "174": {
      "block": "main_else_body@17",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%1#0"
      ]
    },
    "175": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "176": {
      "block": "main_else_body@21",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%14#0"
      ]
    },
    "178": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%14#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%14#0",
        "3"
      ]
    },
    "180": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%15#0"
      ]
    },
    "181": {
      "op": "bz main_else_body@29",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "184": {
      "op": "dig 2",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "186": {
      "op": "pushbytes 0x7365745f64617461",
      "defined_out": [
        "0x7365745f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x7365745f64617461"
      ]
    },
    "196": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%16#0"
      ]
    },
    "197": {
      "op": "bz main_else_body@24",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "200": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "method#0",
        "value#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "value#0"
      ]
    },
    "203": {
      "op": "dig 1",
      "defined_out": [
        "method#0",
        "offset#0",
        "value#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "value#0",
        "offset#0"
      ]
    },
    "205": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "method#0",
        "offset#0",
        "value#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "value#0",
        "offset#0",
        "\"local\""
      ]
    },
    "206": {
      "op": "uncover 2",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "offset#0",
        "\"local\"",
        "value#0"
      ]
    },
    "208": {
      "op": "app_local_put",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "209": {
      "block": "main_after_if_else@28",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%1#0"
      ]
    },
    "210": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "211": {
      "block": "main_else_body@24",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0"
      ]
    },
    "213": {
      "op": "pushbytes 0x6765745f646174615f776974685f64656661756c74",
      "defined_out": [
        "0x6765745f646174615f776974685f64656661756c74",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "method#0",
        "0x6765745f646174615f776974685f64656661756c74"
      ]
    },
    "236": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%18#0"
      ]
    },
    "237": {
      "op": "bz main_else_body@26",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "240": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "default#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "default#0"
      ]
    },
    "243": {
      "op": "dig 1",
      "defined_out": [
        "default#0",
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "default#0",
        "offset#0"
      ]
    },
    "245": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "default#0",
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "default#0",
        "offset#0",
        "0"
      ]
    },
    "246": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "default#0",
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "default#0",
        "offset#0",
        "0",
        "\"local\""
      ]
    },
    "247": {
      "op": "app_local_get_ex",
      "defined_out": [
        "default#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "method#0",
        "offset#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "default#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "248": {
      "op": "select",
      "defined_out": [
        "method#0",
        "offset#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "state_get%0#0"
      ]
    },
    "249": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "250": {
      "op": "b main_after_if_else@28"
    },
    "253": {
      "block": "main_else_body@26",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%1#0"
      ]
    },
    "254": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    },
    "255": {
      "block": "main_else_body@29",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0",
        "tmp%1#0"
      ]
    },
    "256": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "offset#0"
      ]
    }
  }
}