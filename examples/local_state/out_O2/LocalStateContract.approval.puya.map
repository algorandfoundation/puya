{
  "version": 3,
  "sources": [
    "../local_state_contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAoBW;;AAAX;;;AACmB;;AACR;;AAAA;AAAA;;AAAA;;;AAAA;AAAiD;AAAjD;AAAA;;;AACQ;;AACR;;AAAX;;;AAGiB;;;AAAT;;AACG;;AAAoB;AAApB;AAAX;;;AACe;;AAAU;;;;;;;;;;;;;;;;;;;;;AAAV;AAAf;;;AAC6C;;AAyB5B;AAAA;AAAA;AAAA;AAAA;AAEF;AAAA;AA4BJ;;AAAA;AA5B4C;AA4B5C;AAAA;AAAA;AA5BI;AAAP;AAiCG;;AAAA;AA/BoC;AA+BpC;AAAA;;AA/BH;AAoCG;AAAA;AAnCkC;AAmClC;AAAA;AAnCI;;AAAA;AAAP;AA9BQ;;;;AACC;;AAAU;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AAC4C;;AAsCnB;AAAA;AAAA;AACjB;AAvCQ;;;;AACC;;AAAU;;;;;;;;;;;;;AAAV;AAAjB;;;AACiC;;AA8CrB;AAAJ;AA7CY;;;;;;;;;AAAJ;;;;AAIH;;AAAoB;;AAApB;AAAb;;;AACe;;AAAU;;;;;;;;;;AAAV;AAAf;;;AAC8B;;AAmCtB;AAnCkC;;;AAmClC;;;;AAlCS;;AAAU;;;;;;;;;;;;;;;;;;;;;;;AAAV;AAAjB;;;AAC2D;;;AAAZ;;AAuBhC;AAAA;AAAA;AAAA;AAvBC;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "examples.local_state.local_state_contract.LocalStateContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x6c6f63616c"
    },
    "13": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method#0"
      ]
    },
    "14": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "16": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%0#1"
      ]
    },
    "18": {
      "op": "bnz main_after_if_else@5",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "21": {
      "block": "main_if_body@4",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "22": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "23": {
      "block": "main_after_if_else@5",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn OnCompletion"
    },
    "25": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "26": {
      "op": "bury 2",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "28": {
      "op": "bz main_after_if_else@8",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "31": {
      "op": "dup",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "32": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "OptIn"
      ]
    },
    "33": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "34": {
      "op": "bnz main_after_if_else@8",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "37": {
      "block": "main_if_body@7",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "38": {
      "op": "return",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "39": {
      "block": "main_after_if_else@8",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "41": {
      "op": "bz main_if_body@7",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "44": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "47": {
      "op": "bury 2",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "49": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "method#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%6#0"
      ]
    },
    "51": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "method#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%6#0",
        "1"
      ]
    },
    "52": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%7#0"
      ]
    },
    "53": {
      "op": "bz main_else_body@21",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "56": {
      "op": "dig 1",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "58": {
      "op": "pushbytes 0x6765745f67756172616e746565645f64617461",
      "defined_out": [
        "0x6765745f67756172616e746565645f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x6765745f67756172616e746565645f64617461"
      ]
    },
    "79": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%8#0"
      ]
    },
    "80": {
      "op": "bz main_else_body@13",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "83": {
      "op": "txn Sender",
      "defined_out": [
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0"
      ]
    },
    "85": {
      "op": "dup",
      "defined_out": [
        "for_account#0",
        "for_account#0 (copy)",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "for_account#0 (copy)"
      ]
    },
    "86": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "87": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0",
        "for_account#0 (copy)",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "88": {
      "op": "app_local_get_ex",
      "defined_out": [
        "for_account#0",
        "maybe_exists%0#0",
        "method#0",
        "result#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "maybe_exists%0#0"
      ]
    },
    "89": {
      "error": "check self.local exists for account",
      "op": "assert // check self.local exists for account",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0"
      ]
    },
    "90": {
      "op": "dup",
      "defined_out": [
        "for_account#0",
        "method#0",
        "result#0",
        "result#0 (copy)"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "result#0 (copy)"
      ]
    },
    "91": {
      "op": "len",
      "defined_out": [
        "for_account#0",
        "method#0",
        "result#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "tmp%0#1"
      ]
    },
    "92": {
      "op": "dig 2",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "tmp%0#1",
        "for_account#0 (copy)"
      ]
    },
    "94": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "tmp%0#1",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "95": {
      "op": "bytec_0 // \"local\"",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "tmp%0#1",
        "for_account#0 (copy)",
        "0",
        "\"local\""
      ]
    },
    "96": {
      "op": "app_local_get_ex",
      "defined_out": [
        "for_account#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "method#0",
        "result#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "97": {
      "error": "check LocalState exists for account",
      "op": "assert // check LocalState exists for account",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "98": {
      "op": "len",
      "defined_out": [
        "for_account#0",
        "method#0",
        "result#0",
        "tmp%0#1",
        "tmp%0#3"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "tmp%0#1",
        "tmp%0#3"
      ]
    },
    "99": {
      "op": "==",
      "defined_out": [
        "for_account#0",
        "method#0",
        "result#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "tmp%2#1"
      ]
    },
    "100": {
      "op": "assert",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0"
      ]
    },
    "101": {
      "op": "dig 1",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "for_account#0 (copy)"
      ]
    },
    "103": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "for_account#0 (copy)",
        "0"
      ]
    },
    "104": {
      "op": "bytec_0 // 0x6c6f63616c",
      "defined_out": [
        "0",
        "0x6c6f63616c",
        "for_account#0",
        "for_account#0 (copy)",
        "method#0",
        "result#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "for_account#0 (copy)",
        "0",
        "0x6c6f63616c"
      ]
    },
    "105": {
      "op": "app_local_get_ex",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "106": {
      "op": "bury 1",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0",
        "maybe_exists%0#0"
      ]
    },
    "108": {
      "op": "assert",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "result#0"
      ]
    },
    "109": {
      "op": "swap",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0",
        "for_account#0"
      ]
    },
    "110": {
      "op": "intc_0 // 0",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0",
        "for_account#0",
        "0"
      ]
    },
    "111": {
      "op": "bytec_0 // \"local\"",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0",
        "for_account#0",
        "0",
        "\"local\""
      ]
    },
    "112": {
      "op": "app_local_get_ex",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "113": {
      "error": "check LocalState exists for account",
      "op": "assert // check LocalState exists for account",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0",
        "maybe_value%0#0"
      ]
    },
    "114": {
      "op": "dig 1",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0",
        "maybe_value%0#0",
        "result#0 (copy)"
      ]
    },
    "116": {
      "op": "==",
      "defined_out": [
        "method#0",
        "result#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0",
        "tmp%5#1"
      ]
    },
    "117": {
      "op": "assert",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0"
      ]
    },
    "118": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "119": {
      "op": "b main_if_body@4"
    },
    "122": {
      "block": "main_else_body@13",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "124": {
      "op": "pushbytes 0x6765745f646174615f6f725f617373657274",
      "defined_out": [
        "0x6765745f646174615f6f725f617373657274",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x6765745f646174615f6f725f617373657274"
      ]
    },
    "144": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%11#0"
      ]
    },
    "145": {
      "op": "bz main_else_body@15",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "148": {
      "op": "txn Sender",
      "defined_out": [
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0"
      ]
    },
    "150": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "0"
      ]
    },
    "151": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "0",
        "\"local\""
      ]
    },
    "152": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "method#0",
        "result#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0",
        "exists#0"
      ]
    },
    "153": {
      "error": "no data for account",
      "op": "assert // no data for account",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "result#0"
      ]
    },
    "154": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "155": {
      "op": "b main_if_body@4"
    },
    "158": {
      "block": "main_else_body@15",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "160": {
      "op": "pushbytes 0x64656c6574655f64617461",
      "defined_out": [
        "0x64656c6574655f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x64656c6574655f64617461"
      ]
    },
    "173": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%14#0"
      ]
    },
    "174": {
      "op": "bz main_if_body@7",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "177": {
      "op": "txn Sender",
      "defined_out": [
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0"
      ]
    },
    "179": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "\"local\""
      ]
    },
    "180": {
      "op": "app_local_del",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "181": {
      "op": "pushbytes \"Deleted\"",
      "defined_out": [
        "\"Deleted\"",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "\"Deleted\""
      ]
    },
    "190": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "191": {
      "op": "b main_if_body@4"
    },
    "194": {
      "block": "main_else_body@21",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%16#0"
      ]
    },
    "196": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%16#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%16#0",
        "2"
      ]
    },
    "198": {
      "op": "==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%17#0"
      ]
    },
    "199": {
      "op": "bz main_if_body@7",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "202": {
      "op": "dig 1",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "204": {
      "op": "pushbytes 0x7365745f64617461",
      "defined_out": [
        "0x7365745f64617461",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x7365745f64617461"
      ]
    },
    "214": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%18#0"
      ]
    },
    "215": {
      "op": "bz main_else_body@24",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "218": {
      "op": "txn Sender",
      "defined_out": [
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0"
      ]
    },
    "220": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "\"local\""
      ]
    },
    "221": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"local\"",
        "for_account#0",
        "method#0",
        "value#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "for_account#0",
        "\"local\"",
        "value#0"
      ]
    },
    "224": {
      "op": "app_local_put",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "225": {
      "op": "b main_if_body@4"
    },
    "228": {
      "block": "main_else_body@24",
      "stack_in": [
        "method#0",
        "awst_tmp%0#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0"
      ]
    },
    "230": {
      "op": "pushbytes 0x6765745f646174615f776974685f64656661756c74",
      "defined_out": [
        "0x6765745f646174615f776974685f64656661756c74",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "method#0",
        "0x6765745f646174615f776974685f64656661756c74"
      ]
    },
    "253": {
      "op": "==",
      "defined_out": [
        "method#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "tmp%21#0"
      ]
    },
    "254": {
      "op": "bz main_if_body@7",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "257": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "default#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "default#0"
      ]
    },
    "260": {
      "op": "txn Sender",
      "defined_out": [
        "default#0",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "default#0",
        "for_account#0"
      ]
    },
    "262": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "default#0",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "default#0",
        "for_account#0",
        "0"
      ]
    },
    "263": {
      "op": "bytec_0 // \"local\"",
      "defined_out": [
        "\"local\"",
        "0",
        "default#0",
        "for_account#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "default#0",
        "for_account#0",
        "0",
        "\"local\""
      ]
    },
    "264": {
      "op": "app_local_get_ex",
      "defined_out": [
        "default#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "method#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "default#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "265": {
      "op": "select",
      "defined_out": [
        "method#0",
        "state_get%0#0"
      ],
      "stack_out": [
        "method#0",
        "awst_tmp%0#0",
        "state_get%0#0"
      ]
    },
    "266": {
      "op": "log",
      "stack_out": [
        "method#0",
        "awst_tmp%0#0"
      ]
    },
    "267": {
      "op": "b main_if_body@4"
    }
  }
}