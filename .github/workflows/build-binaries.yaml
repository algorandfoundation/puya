name: Build, Test and Publish Pyinstaller Binaries

on:
  workflow_call:
    inputs:
      production_release:
        required: true
        type: string
      python_version:
        required: true
        type: string
      release_version:
        required: false
        type: string

jobs:
  generate-smoke-test-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.release_version != '' && format('v{0}', inputs.release_version) || '' }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Set up Poetry
        uses: ./.github/actions/setup-poetry

      - name: Install dependencies
        run: poetry install --no-interaction --without=dev

      - name: Binary smoke test
        shell: bash
        run: |
          # Build example inputs
          poetry run puyapy --output-awst-json examples/hello_world_arc4
          echo '{"compilation_set":{"examples.hello_world_arc4.contract.HelloWorldContract": "."}, "output_teal": true}' > options.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-smoke-test-inputs
          if-no-files-found: error
          path: |
            module.awst.json
            options.json

  build-binaries:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Continue with other matrix jobs even if one fails
      matrix:
        # macos-14 is the Apple Silicon M1 runner (mac os 14)
        # macos-13 is the last available Intel Mac runner (mac os 13)
        # See https://github.com/actions/runner-images?tab=readme-ov-file#available-images
        os: [ubuntu-22.04, ubuntu-22.04-arm, windows-latest, macos-13, macos-14]
    outputs:
      package-prefix: ${{ steps.configure.outputs.package_prefix }}

    steps:
      - name: Set signing condition
        id: signing
        shell: bash
        run: |
          # Allow signing on main branch non-PR events (regardless of production_release value)
          if [[ "${{ github.event_name }}" != "pull_request" && \
                "${{ github.ref_name }}" == "main" ]]; then
            echo "allowed=true" >> $GITHUB_OUTPUT
          else
            echo "allowed=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.release_version != '' && format('v{0}', inputs.release_version) || '' }}

      - name: Configure build environment
        id: configure
        shell: bash
        run: |
          artifacts_dir="${{ github.workspace }}/dist/artifacts"
          mkdir -p $artifacts_dir
          package_name_version="${{ inputs.release_version != '' && format('-{0}', inputs.release_version) || '' }}"
          package_prefix="puya${package_name_version}"
          echo "package_prefix=${package_prefix}" >> "$GITHUB_OUTPUT"
          package_name="${package_prefix}-${{ runner.os }}_${{ runner.arch }}"
          echo "PACKAGE_NAME=`echo $package_name | tr '[:upper:]' '[:lower:]'`" >> $GITHUB_ENV
          echo "ARTIFACTS_DIR=${artifacts_dir}" >> $GITHUB_ENV

      - name: Build linux binary
        if: ${{ runner.os == 'Linux' }}
        uses: ./.github/actions/build-binaries/linux
        with:
          package_name: ${{ env.PACKAGE_NAME }}
          artifacts_dir: ${{ env.ARTIFACTS_DIR }}
          with_codesign: ${{ steps.signing.outputs.allowed == 'true' }}
          gpg-signing-private-key: ${{ steps.signing.outputs.allowed == 'true' && secrets.GPG_SIGNING_PRIVATE_KEY || '' }}
          gpg-signing-private-key-password: ${{ steps.signing.outputs.allowed == 'true' && secrets.GPG_SIGNING_PRIVATE_KEY_PASSWORD || '' }}
          gpg-key-id: ${{ steps.signing.outputs.allowed == 'true' && secrets.GPG_KEY_ID || '' }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Set up Poetry
        uses: ./.github/actions/setup-poetry

      - name: Install dependencies
        run: poetry install --no-interaction --with=cicd --no-root

      - name: Build windows binary
        if: ${{ runner.os == 'Windows' }}
        uses: ./.github/actions/build-binaries/windows
        with:
          package_name: ${{ env.PACKAGE_NAME }}
          artifacts_dir: ${{ env.ARTIFACTS_DIR }}
          with_codesign: ${{ steps.signing.outputs.allowed == 'true' }}
          azure_tenant_id: ${{ steps.signing.outputs.allowed == 'true' && secrets.AZURE_TENANT_ID || '' }}
          azure_client_id: ${{ steps.signing.outputs.allowed == 'true' && secrets.AZURE_CLIENT_ID || '' }}
          azure_client_secret: ${{ steps.signing.outputs.allowed == 'true' && secrets.AZURE_CLIENT_SECRET || '' }}

      - name: Install Apple Developer Id Cert
        if: ${{ runner.os == 'macOS' && steps.signing.outputs.allowed == 'true' }}
        uses: ./.github/actions/install-apple-dev-id-cert
        with:
          cert_data: ${{ secrets.APPLE_CERT_DATA }}
          cert_password: ${{ secrets.APPLE_CERT_PASSWORD }}

      - name: Build macOS binary
        if: ${{ runner.os == 'macOS' }}
        uses: ./.github/actions/build-binaries/macos
        with:
          package_name: ${{ env.PACKAGE_NAME }}
          artifacts_dir: ${{ env.ARTIFACTS_DIR }}
          with_codesign: ${{ steps.signing.outputs.allowed == 'true' }}
          apple_team_id: ${{ steps.signing.outputs.allowed == 'true' && secrets.APPLE_TEAM_ID || '' }}
          apple_bundle_id: ${{ inputs.production_release == 'true' && secrets.APPLE_BUNDLE_ID || format('beta.{0}', secrets.APPLE_BUNDLE_ID) }}
          apple_cert_id: ${{ steps.signing.outputs.allowed == 'true' && secrets.APPLE_CERT_ID || '' }}
          apple_notary_user: ${{ steps.signing.outputs.allowed == 'true' && secrets.APPLE_NOTARY_USER || '' }}
          apple_notary_password: ${{ steps.signing.outputs.allowed == 'true' && secrets.APPLE_NOTARY_PASSWORD || '' }}

      - name: Download smoke test data
        uses: actions/download-artifact@v4
        with:
          name: binary-smoke-test-inputs

      - name: Binary smoke test
        shell: bash
        run: |
          # Run a basic test to verify the binary works
          ./dist/puya/puya --version
          
          # Run the binary tests
          ./dist/puya/puya --options options.json --awst module.awst.json 
          
          cat HelloWorldContract.approval.teal

      - name: Adjust artifacts directory for softprops/action-gh-release
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          $adjusted = '${{ env.ARTIFACTS_DIR }}' -replace '\\','/'
          echo "ARTIFACTS_DIR=$adjusted" >> $env:GITHUB_ENV

      - name: Append artifacts to release
        if: ${{ inputs.production_release == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          files: |
            ${{ env.ARTIFACTS_DIR }}/*.*
          tag_name: ${{ format('v{0}', inputs.release_version) }}
          prerelease: ${{ contains(inputs.release_version, 'beta') }}

  test-linux-compatibility:
    needs: build-binaries
    uses: ./.github/workflows/test-linux-distros.yaml
    with:
      package_prefix: ${{ needs.build-binaries.outputs.package-prefix }}
