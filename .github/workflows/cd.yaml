name: Continuous Delivery of Python package

on:
  workflow_dispatch:
    inputs:
      compiler_wheel:
        description: "Include compiler wheel?"
        type: boolean
        required: true
        default: true
      stubs_wheel:
        description: "Include stubs wheel?"
        type: boolean
        required: true
        default: true
      bump_version:
        description: "Bump version, set to false to re-publish with current version"
        type: boolean
        required: true
        default: true
      publish_github:
        description: "Publish to Github?"
        type: boolean
        required: true
        default: true
      publish_pypi:
        description: "Publish to PyPi?"
        type: boolean
        required: true
        default: true
      publish_docs:
        description: "Publish Docs?"
        type: boolean
        required: true
        default: true
      run_checks:
        description: "Run checks?"
        type: boolean
        required: true
        default: true
      dry_run:
        description: "Dry Run? If true, won't commit or publish anything"
        type: boolean
        required: true
        default: false

concurrency: release

permissions:
  contents: write
  packages: read

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    env:
      DRY_RUN: ${{ inputs.dry_run && '--noop' || '' }}
    outputs:
      version_number: ${{ steps.get_version_info.outputs.version_number }}
      version_tag: ${{ steps.get_version_info.outputs.version_tag }}
      branch_name: ${{ steps.get_branch.outputs.branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch entire repository history so we can determine version number from it
          fetch-depth: 0
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install --no-interaction --with cicd

      - name: pre-commit and pytest
        if: inputs.run_checks
        run: |
            set -o pipefail
            source $(poetry env info --path)/bin/activate
            pre-commit run --all-files && git diff --exit-code
            algokit localnet start
            pytest

      - name: Get branch name
        id: get_branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Set Git user as GitHub actions
        run: |
          git config --global user.email "actions@github.com" 
          git config --global user.name "github-actions"

      - name: Update version
        if: inputs.bump_version
        run: poetry run semantic-release $DRY_RUN --strict version
        env:
            GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}

      - name: Create Compiler Wheel
        if: inputs.compiler_wheel
        run: poetry build --format wheel

      - name: Create Stubs Wheel
        if: inputs.stubs_wheel
        working-directory: ./stubs
        run: poetry build --format wheel

      - uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist
            stubs/dist

      - name: Get version info
        id: get_version_info
        run: |
          echo "version_tag=$(poetry run semantic-release version --print-last-released-tag)" >> $GITHUB_OUTPUT
          echo "version_number=$(poetry run semantic-release version --print-last-released)" >> $GITHUB_OUTPUT

  build-and-upload-binaries:
    name: Build and Upload Binaries
    needs: prepare-release
    if: needs.prepare-release.outputs.branch_name == 'main' && !inputs.dry_run
    uses: ./.github/workflows/build-binaries.yaml
    with:
      production_release: true
      python_version: "3.12"
      version_number: ${{ needs.prepare-release.outputs.version_number }}
      version_tag: ${{ needs.prepare-release.outputs.version_tag }}
    secrets: inherit

  publish-to-github:
    name: Publish to GitHub
    needs: [prepare-release, build-and-upload-binaries]
    if: needs.prepare-release.outputs.branch_name == 'main' && !inputs.dry_run && inputs.publish_github
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    env:
      DRY_RUN: ${{ inputs.dry_run && '--noop' || '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install --no-interaction --with cicd

      - name: Publish to GitHub
        run: poetry run semantic-release $DRY_RUN publish
        env:
            GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}

  append-binaries-to-release:
    name: Append Binaries to GitHub Release
    needs: [prepare-release, publish-to-github, build-and-upload-binaries]
    if: needs.prepare-release.outputs.branch_name == 'main' && !inputs.dry_run && inputs.publish_github
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          pattern: binary-artifacts-*
          merge-multiple: true

      - name: Display structure of downloaded files
        run: find all-artifacts -type f | sort
          
      - name: Append artifacts to release
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          files: all-artifacts/**/*
          tag_name: ${{ format('v{0}', needs.prepare-release.outputs.version_number) }}

  publish-to-pypi:
    name: Publish to PyPI
    needs: [prepare-release, append-binaries-to-release]
    if: needs.prepare-release.outputs.branch_name == 'main' && !inputs.dry_run && inputs.publish_pypi
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts

      - name: Publish to PyPI - Compiler
        if: inputs.compiler_wheel
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: release-artifacts/dist

      - name: Publish to PyPI - Stubs
        if: inputs.stubs_wheel
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: release-artifacts/stubs/dist

  publish-docs:
    name: Publish Docs
    needs: [prepare-release]
    if: needs.prepare-release.outputs.branch_name == 'main' && !inputs.dry_run && inputs.publish_docs
    uses: ./.github/workflows/gh-pages.yaml
    permissions:
      contents: read
      pages: write
      id-token: write
