name: Continuous Delivery of Python package

on:
  workflow_dispatch:
    inputs:
      compiler_wheel:
        description: "Include compiler wheel?"
        type: boolean
        required: true
        default: true
      stubs_wheel:
        description: "Include stubs wheel?"
        type: boolean
        required: true
        default: true
      bump_version:
        description: "Bump version, set to false to re-publish with current version"
        type: boolean
        required: true
        default: true
      publish_github:
        description: "Publish to Github?"
        type: boolean
        required: true
        default: true
      publish_pypi:
        description: "Publish to PyPi?"
        type: boolean
        required: true
        default: true
      publish_docs:
        description: "Publish Docs?"
        type: boolean
        required: true
        default: true
      run_checks:
        description: "Run checks?"
        type: boolean
        required: true
        default: true
      dry_run:
        description: "Dry Run? If true, won't commit or publish anything"
        type: boolean
        required: true
        default: false

concurrency: release

permissions:
  contents: write
  packages: read
env:
  SEMANTIC_RELEASE_DRY_RUN: ${{ inputs.dry_run && '--noop' || '' }}
jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    outputs:
      version_number: ${{ steps.get_version_info.outputs.version_number }}
      version_tag: ${{ steps.get_version_info.outputs.version_tag }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          # Fetch entire repository history so we can determine version number from it
          fetch-depth: 0
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}

      - name: Setup Python venv
        uses: ./.github/actions/setup-python-venv
        with:
          poetry_install_args: "--with cicd"

      - name: pre-commit and pytest
        if: inputs.run_checks
        run: |
            pre-commit run --all-files && git diff --exit-code
            algokit localnet start
            pytest

      - name: Set git user as GitHub Actions
        run: |
          git config --global user.email "actions@github.com" 
          git config --global user.name "github-actions"

      - name: Collect change log
        if: inputs.bump_version
        run: scriv collect --add
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}

      - name: Update version
        if: inputs.bump_version
        run: semantic-release $SEMANTIC_RELEASE_DRY_RUN --strict version --no-changelog
        env:
            GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}

      - name: Get version info
        id: get_version_info
        run: |
          echo "version_tag=$(semantic-release version --print-last-released-tag)" >> $GITHUB_OUTPUT
          echo "version_number=$(semantic-release version --print-last-released)" >> $GITHUB_OUTPUT

      - name: Create puyapy wheel
        if: inputs.compiler_wheel
        run: poetry build --format wheel

      - name: Create algorand-python wheel
        if: inputs.stubs_wheel
        working-directory: ./stubs
        run: poetry build --format wheel

      - uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist
            stubs/dist

  build-binaries:
    needs: prepare-release
    uses: ./.github/workflows/build-binaries.yaml
    with:
      python_version: "3.12"
      package_prefix: "puya-${{ needs.prepare-release.outputs.version_number }}"
      allow_signing: ${{ github.ref_name == 'main' }}
      git_ref: ${{ needs.prepare-release.outputs.version_tag }}
    secrets: inherit

  publish-to-github:
    name: Publish to GitHub
    needs: [ prepare-release, build-binaries ]
    if: github.ref_name == 'main' && inputs.publish_github
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    env:
      VERSION_TAG: ${{ needs.prepare-release.outputs.version_tag }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download wheels
        if: ${{ inputs.compiler_wheel || inputs.stubs_wheel }}
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: bdist
          pattern: binary-artifacts-*
          merge-multiple: true

      - name: Setup Python venv
        uses: ./.github/actions/setup-python-venv
        with:
          poetry_install_args: "--with cicd"

      - name: Publish to GitHub
        run: semantic-release $SEMANTIC_RELEASE_DRY_RUN publish --tag $VERSION_TAG
        env:
            GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}

  publish-to-pypi:
    name: Publish to PyPI
    needs: [ prepare-release, publish-to-github ]
    if: github.ref_name == 'main' && !inputs.dry_run && inputs.publish_pypi
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts

      - name: Publish to PyPI - Compiler
        if: inputs.compiler_wheel
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: release-artifacts/dist

      - name: Publish to PyPI - Stubs
        if: inputs.stubs_wheel
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: release-artifacts/stubs/dist

  publish-docs:
    name: Publish docs
    needs: [ prepare-release ]
    if: github.ref_name == 'main' && !inputs.dry_run && inputs.publish_docs
    uses: ./.github/workflows/gh-pages.yaml
    permissions:
      contents: read
      pages: write
      id-token: write
