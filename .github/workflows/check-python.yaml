name: Check Python Code

on:
  workflow_call:
  pull_request:

jobs:
  build-and-upload-binaries: # TODO: REMOVE ME
    name: Build and Upload Binaries
    uses: ./.github/workflows/build-binaries.yaml
    with:
      production_release: false
      python_version: "3.12"
      version_number: "4.4.4"
      version_tag: ""
    secrets: inherit

  check-python:
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install --no-interaction --with cicd --with doc

      - name: Check pre-commits
        run: poetry run pre-commit run --all-files && git diff --exit-code

      - name: Check generated code
        run: poetry run poe gen && git diff --exit-code

      - name: Check documentation
        run: poetry run poe docs

      - name: Check compiler wheel can be built
        run: poetry build --format wheel

      - name: Check stubs wheel can be built
        run: poetry build --format wheel
        working-directory: stubs

  tests:
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install --no-interaction --with cicd

      - name: Start LocalNet
        run: poetry run algokit localnet start

      - name: pytest + coverage
        shell: bash # sets pipefail etc
        run: poetry run pytest --junitxml=pytest-junit.xml --cov | tee pytest-coverage.txt
        env:
          COVERAGE_CORE: sysmon

      - name: pytest coverage comment
        continue-on-error: true # forks fail to add a comment, so continue any way
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest-junit.xml

  compile-all:
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Compile all
        run: poetry run poe compile_all

      - name: Check for any changes
        # this checks for empty output of porcelain status, if there's no output there's no diff
        run: test -z "$(git status --porcelain examples/ test_cases/)"

      - name: Show changed files summary
        if: failure()
        run: git status --porcelain examples/ test_cases/

      - name: Show diff
        if: failure()
        run: git diff examples/ test_cases/


  compile-all-windows:
    runs-on: "windows-latest"
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Compile all
        shell: bash
        run: poetry run poe compile_all

      # simple diff check here as line endings mess with git status
      - name: Check diff
        run: git diff --exit-code examples/ test_cases/

  # run a test in all Windows
  run-puyapy-windows:
    name: "Run PuyaPy on Windows via ${{ matrix.shell }}"
    runs-on: "windows-latest"
    strategy:
      fail-fast: false # Continue with other matrix jobs even if one fails
      matrix:
        shell: [cmd, pwsh, bash]
    defaults:
      run:
        shell: ${{ matrix.shell }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Compile AMM via compile_all
        run: poetry run poe compile_all examples/amm

      - name: Compile AMM directly
        run: poetry run puyapy --log-level=debug examples/amm
