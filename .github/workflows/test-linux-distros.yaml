name: Test Linux Distros with manylinux puya binary

on:
  workflow_call:
    inputs:
      release_version:
        required: false
        type: string
      artifact_name_prefix:
        description: "Prefix for the artifact name to download"
        required: true
        type: string

jobs:
  test-linux-distros:
    runs-on: ${{ matrix.arch.runner }}
    strategy:
      fail-fast: false
      matrix:
        arch:
          - { runner: "ubuntu-22.04", name: "amd64" }
          - { runner: "ubuntu-22.04-arm", name: "arm64" }
        distro:
          # Debian family (glibc 2.28+)
          - { name: "Debian 10", image: "debian:10" }
          - { name: "Debian 11", image: "debian:11" }
          - { name: "Debian 12", image: "debian:12" }
          # Ubuntu family (glibc 2.31+)
          - { name: "Ubuntu 20.04", image: "ubuntu:20.04" }
          - { name: "Ubuntu 22.04", image: "ubuntu:22.04" }
          - { name: "Ubuntu 24.04", image: "ubuntu:24.04" }
          # Fedora family (glibc 2.28+)
          - { name: "Fedora 38", image: "fedora:38" }
          - { name: "Fedora 39", image: "fedora:39" }
          - { name: "Fedora 40", image: "fedora:40" }
          # RHEL family (glibc 2.28+)
          - { name: "CentOS Stream 8", image: "quay.io/centos/centos:stream8" }
          - { name: "CentOS Stream 9", image: "quay.io/centos/centos:stream9" }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.release_version != '' && format('v{0}', inputs.release_version) || '' }}

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build example inputs
        run: |
          poetry run puyapy --output-awst-json examples/hello_world_arc4
          echo '{"compilation_set":{"examples.hello_world_arc4.contract.HelloWorldContract": "."}, "output_teal": true}' > options.json

      - name: Configure package name
        shell: bash
        run: |
          package_name_version="${{ inputs.release_version != '' && format('-{0}', inputs.release_version) || '' }}"
          os_name="Linux"
          arch_name="${{ matrix.arch.name == 'amd64' && 'X64' || 'ARM64' }}"
          package_name="${{ inputs.artifact_name_prefix }}${package_name_version}-${os_name}_${arch_name}"
          echo "PACKAGE_NAME=`echo $package_name | tr '[:upper:]' '[:lower:]'`" >> $GITHUB_ENV

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}

      - name: Create test script
        run: |
          # First create a setup script
          cat > test.sh << EOF
          set -e  # Exit immediately if a command fails
      
          # Print glibc version
          ldd --version
      
          # extract the binary
          cd /workspace
          tar -xzf ${PACKAGE_NAME}.tar.gz               

          # Run a basic test to verify the binary works
          ./puya --version
          
          # Run the binary tests
          ./puya --options options.json --awst module.awst.json 
          
          cat HelloWorldContract.approval.teal 
          EOF

      - name: Run portability tests on ${{ matrix.distro.name }} (${{ matrix.arch.name }})
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            --platform linux/${{ matrix.arch.name }} \
            --env PACKAGE_NAME=${{ env.PACKAGE_NAME }} \
            ${{ matrix.distro.image }} \
            bash /workspace/test.sh
