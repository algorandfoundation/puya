name: Test Linux Distros with manylinux puya binary

on:
  workflow_call:
    inputs:
      production_release:
        required: true
        type: string
      python_version:
        required: true
        type: string
      release_version:
        required: false
        type: string
      artifact_name_prefix:
        description: "Prefix for the artifact name to download"
        required: true
        type: string

jobs:
  test-linux-distros:
    runs-on: ${{ matrix.arch.runner }}
    strategy:
      fail-fast: false
      matrix:
        arch:
          - { runner: "ubuntu-22.04", name: "amd64" }
          - { runner: "ubuntu-22.04-arm", name: "arm64" }
        distro:
          # Debian family (glibc 2.28+)
          - { name: "Debian 10", image: "debian:10", pkg_manager: "apt-get" }
          - { name: "Debian 11", image: "debian:11", pkg_manager: "apt-get" }
          - { name: "Debian 12", image: "debian:12", pkg_manager: "apt-get" }

          # Ubuntu family (glibc 2.31+)
          - {
              name: "Ubuntu 20.04",
              image: "ubuntu:20.04",
              pkg_manager: "apt-get",
            }
          - {
              name: "Ubuntu 22.04",
              image: "ubuntu:22.04",
              pkg_manager: "apt-get",
            }
          - {
              name: "Ubuntu 24.04",
              image: "ubuntu:24.04",
              pkg_manager: "apt-get",
            }

          # Fedora family (glibc 2.28+)
          - { name: "Fedora 38", image: "fedora:38", pkg_manager: "dnf" }
          - { name: "Fedora 39", image: "fedora:39", pkg_manager: "dnf" }
          - { name: "Fedora 40", image: "fedora:40", pkg_manager: "dnf" }

          # RHEL family (glibc 2.28+)
          - {
              name: "CentOS Stream 8",
              image: "quay.io/centos/centos:stream8",
              pkg_manager: "dnf",
            }
          - {
              name: "CentOS Stream 9",
              image: "quay.io/centos/centos:stream9",
              pkg_manager: "dnf",
            }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.release_version != '' && format('v{0}', inputs.release_version) || '' }}

      - name: Configure package name
        shell: bash
        run: |
          package_name_version="${{ inputs.release_version != '' && format('-{0}', inputs.release_version) || '' }}"
          os_name="Linux"
          arch_name="${{ matrix.arch.name == 'amd64' && 'X64' || 'ARM64' }}"
          package_name="${{ inputs.artifact_name_prefix }}${package_name_version}-${os_name}_${arch_name}"
          echo "PACKAGE_NAME=`echo $package_name | tr '[:upper:]' '[:lower:]'`" >> $GITHUB_ENV

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ./binary

      - name: Extract binary artifact
        run: cd ./binary && tar -xzf ${{ env.PACKAGE_NAME }}.tar.gz

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker registry login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Prepare cache tag
        id: cache-tag
        run: |
          # Create a sanitized tag name from the distro name
          DISTRO_TAG=$(echo "${{ matrix.distro.name }}" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
          ARCH_TAG="${{ matrix.arch.name }}"
          CACHE_TAG="ghcr.io/${{ github.repository }}/test-env-${DISTRO_TAG}-${ARCH_TAG}:latest"
          echo "tag=${CACHE_TAG}" >> $GITHUB_OUTPUT

      - name: Create Dockerfile
        run: |
          # First create a setup script
          cat > setup.sh << 'SETUPEOF'
          #!/bin/bash
          set -e

          # Function to install dependencies based on the distribution
          setup_environment() {
            if [[ "$DISTRO" == *"centos:stream9"* ]]; then
              # CentOS Stream 9 specific handling
              if [ -f /etc/yum.repos.d/centos.repo ]; then
                sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/centos.repo
                sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/centos.repo
              fi
              
              # Enable repositories and install dependencies with --allowerasing flag to handle package conflicts
              dnf -y install dnf-plugins-core
              dnf -y config-manager --set-enabled crb || true
              dnf -y install epel-release || dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(rpm -E %rhel).noarch.rpm
              
              # Use --allowerasing flag to handle curl conflicts
              dnf -y --allowerasing install git curl make gcc zlib-devel openssl-devel bzip2 \
                bzip2-devel readline-devel sqlite-devel tk-devel libffi-devel \
                xz-devel libuuid-devel
            elif [[ "$DISTRO" == *"centos:stream8"* ]]; then
              # CentOS Stream 8 specific handling
              if ls /etc/yum.repos.d/CentOS-*.repo &>/dev/null; then
                sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*.repo
                sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*.repo
              fi
              
              # Enable repositories directly
              dnf -y install dnf-plugins-core
              dnf -y config-manager --set-enabled powertools || true
              dnf -y install epel-release || dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(rpm -E %rhel).noarch.rpm
              dnf -y install git curl make gcc zlib-devel openssl-devel bzip2 \
                bzip2-devel readline-devel sqlite-devel tk-devel libffi-devel \
                xz-devel libuuid-devel
            elif command -v apt-get &> /dev/null; then
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              apt-get install -y git curl make gcc zlib1g-dev \
                libssl-dev libbz2-dev libreadline-dev libsqlite3-dev tk-dev \
                libffi-dev liblzma-dev uuid-dev
            elif command -v dnf &> /dev/null; then
              dnf install -y dnf-plugins-core
              dnf config-manager --set-enabled crb || dnf config-manager --set-enabled powertools || true
              dnf install -y --allowerasing git curl make gcc zlib-devel openssl-devel bzip2 \
                bzip2-devel readline-devel sqlite-devel tk-devel libffi-devel \
                xz-devel libuuid-devel
            fi
          }

          # Run the setup
          setup_environment
          SETUPEOF

          chmod +x setup.sh

          # Now create the Dockerfile that uses this script
          cat > Dockerfile.test << EOF
          FROM ${{ matrix.distro.image }}

          # Copy setup script
          COPY setup.sh /setup.sh

          # Set the DISTRO environment variable and run setup
          ENV DISTRO="${{ matrix.distro.image }}"
          RUN /setup.sh

          # Install pyenv
          ENV PYENV_ROOT="/root/.pyenv"
          ENV PATH="\$PYENV_ROOT/bin:\$PYENV_ROOT/shims:\$PATH"

          RUN git clone https://github.com/pyenv/pyenv.git \$PYENV_ROOT && \
              cd \$PYENV_ROOT && git checkout master

          # Install Python 3.12 using pyenv
          RUN PYTHON_VERSION="3.12.9" && \
              CONFIGURE_OPTS="--enable-shared" pyenv install \$PYTHON_VERSION && \
              pyenv global \$PYTHON_VERSION

          # Install poetry
          RUN pip install poetry

          # Create workspace directory
          RUN mkdir -p /workspace
          WORKDIR /workspace
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_SUMMARY: false
        with:
          context: .
          file: Dockerfile.test
          platforms: linux/${{ matrix.arch.name }}
          push: true
          load: true
          tags: ${{ steps.cache-tag.outputs.tag }}
          cache-from: type=registry,ref=${{ steps.cache-tag.outputs.tag }}
          cache-to: type=registry,ref=${{ steps.cache-tag.outputs.tag }},mode=max

      - name: Run portability tests on ${{ matrix.distro.name }} (${{ matrix.arch.name }})
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            --platform linux/${{ matrix.arch.name }} \
            ${{ steps.cache-tag.outputs.tag }} \
            bash -c '
              cd /workspace
              set -e  # Exit immediately if a command fails
              
              # Set up binary and add to PATH
              chmod +x /workspace/binary/puya
              
              # Create directory for binaries and add to PATH
              mkdir -p /root/bin
              ln -sf /workspace/binary/puya /root/bin/puya
              export PATH="/root/bin:$PATH"
              
              # Configure git (required for some tests)
              git config --global user.email "actions@github.com"
              git config --global user.name "github-actions"
              
              # Print glibc version
              ldd --version

              # Run a basic test to verify the binary works
              puya --version
              
              # Run the binary tests
              poetry install --no-interaction 
              poetry run pytest tests/ -m pyinstaller_binary_tests -v -s --log-cli-level=INFO -n0
            '
