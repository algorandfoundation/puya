name: "Build Windows Binary Artifacts"
description: "Build Windows specific pyinstaller binary artifacts"
inputs:
  package_name:
    description: "The name of the package"
    required: true
  artifacts_dir:
    description: "The directory to write artifacts you want to publish"
    required: true
  with_codesign:
    description: "Flag to determine if we should sign the binary"
    required: true
    type: boolean
  azure_tenant_id:
    description: "The Microsoft Entra tenant (directory) ID."
    required: true
  azure_client_id:
    description: "The client (application) ID of an App Registration in the tenant."
    required: true
  azure_client_secret:
    description: "A client secret that was generated for the App Registration."
    required: true
  python_version:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Configure build environment
      shell: bash
      run: |
        echo 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64' >> $GITHUB_PATH
        echo 'BINARY_BUILD_DIR=dist\puya' >> $GITHUB_ENV

    - name: Install poetry
      shell: bash
      run: pipx install poetry

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python_version }}
        cache: "poetry"

    - name: Install dependencies
      shell: bash
      run: poetry install --no-interaction --without=dev --with=cicd

    - name: Build binary
      shell: bash
      run: |
        poetry run pyinstaller \
          --clean \
          --onedir \
          --name puya \
          --noconfirm src/puya/__main__.py \
          --add-data './src/puya/ir/_puya_lib.awst.json:puya/ir/' \
          --exclude-module mypy_extensions \
          --optimize=2 \
          --hidden-import colorama \
          --runtime-hook scripts/distribution/hook_puya.py

    - name: Sign executable
      if: ${{ inputs.with_codesign == 'true' }}
      uses: azure/trusted-signing-action@v0.3.20
      with:
        azure-tenant-id: ${{ inputs.azure_tenant_id }}
        azure-client-id: ${{ inputs.azure_client_id }}
        azure-client-secret: ${{ inputs.azure_client_secret }}
        endpoint: https://weu.codesigning.azure.net/
        trusted-signing-account-name: algokit-signing
        certificate-profile-name: algokit
        files-folder: ${{ env.BINARY_BUILD_DIR }}
        files-folder-filter: exe
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256

    # Create tar.gz archive in the artifacts directory for GitHub releases
    - name: Package binary for release
      shell: pwsh
      working-directory: dist/puya
      run: tar -czf "${{ inputs.artifacts_dir }}\${{ inputs.package_name }}.tar.gz" *

    # Generate SHA-256 checksum for the release archive
    - name: Generate SHA-256 checksum
      shell: pwsh
      working-directory: ${{ inputs.artifacts_dir }}
      run: |
        $hash = Get-FileHash -Algorithm SHA256 -Path "${{ inputs.package_name }}.tar.gz"
        "$($hash.Hash.ToLower())  ${{ inputs.package_name }}.tar.gz" | Out-File -Encoding utf8 "${{ inputs.package_name }}.sha256.txt"
        Get-Content "${{ inputs.package_name }}.sha256.txt"

    # Upload the tar.gz archive as GitHub Actions artifact
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.package_name }}
        path: ${{ inputs.artifacts_dir }}/${{ inputs.package_name }}.tar.gz
        if-no-files-found: error

    # Upload checksum as a separate artifact
    - name: Upload checksum artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.package_name }}-sha256
        path: ${{ inputs.artifacts_dir }}/${{ inputs.package_name }}.sha256.txt
        if-no-files-found: error
