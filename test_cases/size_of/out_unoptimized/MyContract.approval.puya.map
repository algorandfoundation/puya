{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAUA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;AAAA;AAAA;;;;;;;;;AACK;;;AAAA;AAAA;;;;AAEU;AAAwB;AAAxB;AAAP;AACO;AAAmB;AAAnB;AAAP;AACO;AAAyB;AAAzB;AAAP;AACO;AAAoB;AAApB;AAAP;AACO;AAAwB;AAAxB;AAAP;AACO;AAAkB;AAAlB;AAAP;AACO;AAAiB;AAAjB;AAAP;AACO;AAAwB;AAAxB;AAAP;AACO;AAAkE;AAAlE;AAAP;AACO;AAAwE;AAAxE;AAAP;AACO;;AAAwB;;AAAxB;AAAP;AACO;;AAA2D;;AAA3D;AAAP;AACO;AAAuD;AAAvD;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 8 1 2 32"
    },
    "7": {
      "op": "b block@0"
    },
    "10": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "13": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "15": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "16": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "18": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "19": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "20": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "21": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "23": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "24": {
      "op": "intc_2 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "25": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "27": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "29": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "31": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "33": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "35": {
      "op": "intc_0 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "36": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "38": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "40": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "42": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "44": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "70": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "73": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "74": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "77": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "80": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "83": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "86": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "89": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "92": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "95": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "98": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "101": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "104": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "106": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "108": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "109": {
      "op": "bz else_body@8",
      "stack_out": []
    },
    "112": {
      "op": "b __algopy_default_create@7"
    },
    "115": {
      "block": "__algopy_default_create@7",
      "stack_in": [],
      "op": "b block@21"
    },
    "118": {
      "block": "block@21",
      "stack_in": [],
      "op": "b after_inlined_test_cases.size_of.contract.MyContract.__algopy_default_create@22"
    },
    "121": {
      "block": "after_inlined_test_cases.size_of.contract.MyContract.__algopy_default_create@22",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "122": {
      "op": "return",
      "stack_out": []
    },
    "123": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "else_body@8",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "124": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "127": {
      "op": "pushbytes 0xa78000de // method \"test()void\"",
      "defined_out": [
        "Method(test()void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(test()void)"
      ]
    },
    "133": {
      "op": "uncover 1",
      "stack_out": [
        "Method(test()void)",
        "tmp%5#0"
      ]
    },
    "135": {
      "op": "match test_route@3",
      "stack_out": []
    },
    "139": {
      "op": "b switch_case_default@4"
    },
    "142": {
      "block": "switch_case_default@4",
      "stack_in": [],
      "op": "b switch_case_next@5"
    },
    "145": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@5",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "146": {
      "block": "test_route@3",
      "stack_in": [],
      "callsub": "test_cases.size_of.contract.MyContract.test[routing]",
      "op": "callsub test"
    },
    "149": {
      "op": "b switch_case_next@5"
    },
    "152": {
      "subroutine": "test_cases.size_of.contract.MyContract.test[routing]",
      "params": {},
      "block": "test",
      "stack_in": [],
      "op": "b test_block@0"
    },
    "155": {
      "block": "test_block@0",
      "stack_in": [],
      "callsub": "test_cases.size_of.contract.MyContract.test",
      "op": "callsub test_cases.size_of.contract.MyContract.test"
    },
    "158": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "159": {
      "op": "return",
      "stack_out": []
    },
    "160": {
      "subroutine": "test_cases.size_of.contract.MyContract.test",
      "params": {},
      "block": "test_cases.size_of.contract.MyContract.test",
      "stack_in": [],
      "op": "b test_cases.size_of.contract.MyContract.test_block@0"
    },
    "163": {
      "block": "test_cases.size_of.contract.MyContract.test_block@0",
      "stack_in": [],
      "op": "intc_0 // 8",
      "defined_out": [
        "8"
      ],
      "stack_out": [
        "8"
      ]
    },
    "164": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8",
        "8"
      ]
    },
    "165": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "166": {
      "op": "assert",
      "stack_out": []
    },
    "167": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8"
      ]
    },
    "168": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8",
        "8"
      ]
    },
    "169": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "170": {
      "op": "assert",
      "stack_out": []
    },
    "171": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32"
      ],
      "stack_out": [
        "32"
      ]
    },
    "172": {
      "op": "intc_3 // 32",
      "stack_out": [
        "32",
        "32"
      ]
    },
    "173": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "174": {
      "op": "assert",
      "stack_out": []
    },
    "175": {
      "op": "intc_3 // 32",
      "stack_out": [
        "32"
      ]
    },
    "176": {
      "op": "intc_3 // 32",
      "stack_out": [
        "32",
        "32"
      ]
    },
    "177": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "178": {
      "op": "assert",
      "stack_out": []
    },
    "179": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8"
      ]
    },
    "180": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8",
        "8"
      ]
    },
    "181": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "182": {
      "op": "assert",
      "stack_out": []
    },
    "183": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8"
      ]
    },
    "184": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8",
        "8"
      ]
    },
    "185": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "186": {
      "op": "assert",
      "stack_out": []
    },
    "187": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8"
      ]
    },
    "188": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8",
        "8"
      ]
    },
    "189": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "190": {
      "op": "assert",
      "stack_out": []
    },
    "191": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "192": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "193": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "194": {
      "op": "assert",
      "stack_out": []
    },
    "195": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "196": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "197": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "198": {
      "op": "assert",
      "stack_out": []
    },
    "199": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "200": {
      "op": "intc_2 // 2",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "201": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "202": {
      "op": "assert",
      "stack_out": []
    },
    "203": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9"
      ],
      "stack_out": [
        "9"
      ]
    },
    "205": {
      "op": "pushint 9 // 9",
      "stack_out": [
        "9",
        "9"
      ]
    },
    "207": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "208": {
      "op": "assert",
      "stack_out": []
    },
    "209": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7"
      ],
      "stack_out": [
        "7"
      ]
    },
    "211": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "7",
        "7"
      ]
    },
    "213": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "214": {
      "op": "assert",
      "stack_out": []
    },
    "215": {
      "op": "intc_2 // 2",
      "stack_out": [
        "2"
      ]
    },
    "216": {
      "op": "intc_2 // 2",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "217": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "218": {
      "op": "assert",
      "stack_out": []
    },
    "219": {
      "retsub": true,
      "op": "retsub"
    }
  }
}