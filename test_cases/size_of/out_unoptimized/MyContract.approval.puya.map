{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;AAUA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;;;;AAAA;;;;;;;;;AAAA;AACK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;;AAEU;AAAwB;AAAxB;AAAP;AACO;AAAmB;AAAnB;AAAP;AACO;AAAyB;AAAzB;AAAP;AACO;AAAoB;AAApB;AAAP;AACO;AAAwB;AAAxB;AAAP;AACO;AAAkB;AAAlB;AAAP;AACO;AAAiB;AAAjB;AAAP;AACO;AAAwB;AAAxB;AAAP;AACO;AAAkE;AAAlE;AAAP;AACO;;AAAwE;;AAAxE;AAAP;AACO;;AAAwB;;AAAxB;AAAP;AACO;;AAA2D;;AAA3D;AAAP;AACO;;AAAuD;;AAAvD;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 8 1 0 32"
    },
    "7": {
      "op": "b main_block@0"
    },
    "10": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "13": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "16": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "17": {
      "op": "bz main___algopy_default_create@6",
      "stack_out": []
    },
    "20": {
      "op": "b main_abi_routing@2"
    },
    "23": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "26": {
      "op": "pushbytes 0xa78000de // method \"test()void\"",
      "defined_out": [
        "Method(test()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(test()void)"
      ]
    },
    "32": {
      "op": "uncover 1",
      "stack_out": [
        "Method(test()void)",
        "tmp%2#0"
      ]
    },
    "34": {
      "op": "match main_test_route@3",
      "stack_out": []
    },
    "38": {
      "op": "b main_switch_case_default@4"
    },
    "41": {
      "block": "main_switch_case_default@4",
      "stack_in": [],
      "op": "b main_switch_case_next@5"
    },
    "44": {
      "block": "main_switch_case_next@5",
      "stack_in": [],
      "op": "b main_after_if_else@7"
    },
    "47": {
      "block": "main_after_if_else@7",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "48": {
      "block": "main_test_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "50": {
      "op": "intc_2 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "51": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "52": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "54": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0"
      ]
    },
    "55": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "56": {
      "op": "&&",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "57": {
      "error": "OnCompletion must be NoOp && can only call when not creating",
      "op": "assert // OnCompletion must be NoOp && can only call when not creating",
      "stack_out": []
    },
    "58": {
      "callsub": "test_cases.size_of.contract.MyContract.test[routing]",
      "op": "callsub test"
    },
    "61": {
      "op": "b main_switch_case_next@5"
    },
    "64": {
      "block": "main___algopy_default_create@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "66": {
      "op": "intc_2 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "NoOp"
      ]
    },
    "67": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "68": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "70": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "0"
      ]
    },
    "71": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "72": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "73": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "74": {
      "op": "b main_block@9"
    },
    "77": {
      "block": "main_block@9",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.size_of.contract.MyContract.__algopy_default_create@10"
    },
    "80": {
      "block": "main_after_inlined_test_cases.size_of.contract.MyContract.__algopy_default_create@10",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "81": {
      "op": "return",
      "stack_out": []
    },
    "82": {
      "subroutine": "test_cases.size_of.contract.MyContract.test[routing]",
      "params": {},
      "block": "test",
      "stack_in": [],
      "op": "b test_block@0"
    },
    "85": {
      "block": "test_block@0",
      "stack_in": [],
      "callsub": "test_cases.size_of.contract.MyContract.test",
      "op": "callsub test_cases.size_of.contract.MyContract.test"
    },
    "88": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "89": {
      "op": "return",
      "stack_out": []
    },
    "90": {
      "subroutine": "test_cases.size_of.contract.MyContract.test",
      "params": {},
      "block": "test_cases.size_of.contract.MyContract.test",
      "stack_in": [],
      "op": "b test_cases.size_of.contract.MyContract.test_block@0"
    },
    "93": {
      "block": "test_cases.size_of.contract.MyContract.test_block@0",
      "stack_in": [],
      "op": "intc_0 // 8",
      "defined_out": [
        "8"
      ],
      "stack_out": [
        "8"
      ]
    },
    "94": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8",
        "8"
      ]
    },
    "95": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "96": {
      "op": "assert",
      "stack_out": []
    },
    "97": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8"
      ]
    },
    "98": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8",
        "8"
      ]
    },
    "99": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "100": {
      "op": "assert",
      "stack_out": []
    },
    "101": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32"
      ],
      "stack_out": [
        "32"
      ]
    },
    "102": {
      "op": "intc_3 // 32",
      "stack_out": [
        "32",
        "32"
      ]
    },
    "103": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "104": {
      "op": "assert",
      "stack_out": []
    },
    "105": {
      "op": "intc_3 // 32",
      "stack_out": [
        "32"
      ]
    },
    "106": {
      "op": "intc_3 // 32",
      "stack_out": [
        "32",
        "32"
      ]
    },
    "107": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "108": {
      "op": "assert",
      "stack_out": []
    },
    "109": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8"
      ]
    },
    "110": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8",
        "8"
      ]
    },
    "111": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "112": {
      "op": "assert",
      "stack_out": []
    },
    "113": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8"
      ]
    },
    "114": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8",
        "8"
      ]
    },
    "115": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "116": {
      "op": "assert",
      "stack_out": []
    },
    "117": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8"
      ]
    },
    "118": {
      "op": "intc_0 // 8",
      "stack_out": [
        "8",
        "8"
      ]
    },
    "119": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "120": {
      "op": "assert",
      "stack_out": []
    },
    "121": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "122": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "124": {
      "op": "assert",
      "stack_out": []
    },
    "125": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "126": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "127": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "128": {
      "op": "assert",
      "stack_out": []
    },
    "129": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "131": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "133": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "134": {
      "op": "assert",
      "stack_out": []
    },
    "135": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9"
      ],
      "stack_out": [
        "9"
      ]
    },
    "137": {
      "op": "pushint 9 // 9",
      "stack_out": [
        "9",
        "9"
      ]
    },
    "139": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "140": {
      "op": "assert",
      "stack_out": []
    },
    "141": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7"
      ],
      "stack_out": [
        "7"
      ]
    },
    "143": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "7",
        "7"
      ]
    },
    "145": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "146": {
      "op": "assert",
      "stack_out": []
    },
    "147": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "2"
      ]
    },
    "149": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "2",
        "2"
      ]
    },
    "151": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "152": {
      "op": "assert",
      "stack_out": []
    },
    "153": {
      "retsub": true,
      "op": "retsub"
    }
  }
}