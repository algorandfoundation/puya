#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 8 1 2 32
    b block@0

block@0:
    b block@1

block@1:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_1 // 1
    shl
    +
    pushint 0 // 0
    intc_1 // 1
    intc_2 // 2
    pushint 3 // 3
    pushint 4 // 4
    pushint 5 // 5
    pushint 6 // 6
    pushint 7 // 7
    intc_0 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_ClearState:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_ClearState:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_OptIn:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

call_OptIn:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    b *NOT_IMPLEMENTED

create_NoOp:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    txn NumAppArgs
    pushint 0 // 0
    ==
    bz else_body@8
    b __algopy_default_create@7

__algopy_default_create@7:
    b block@21

block@21:
    b after_inlined_test_cases.size_of.contract.MyContract.__algopy_default_create@22

after_inlined_test_cases.size_of.contract.MyContract.__algopy_default_create@22:
    intc_1 // 1
    return

else_body@8:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xa78000de // method "test()void"
    uncover 1
    match test_route@3
    b switch_case_default@4

switch_case_default@4:
    b switch_case_next@5

switch_case_next@5:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    err // this contract does not implement the given ABI method for call NoOp

test_route@3:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    callsub test
    b switch_case_next@5


// test_cases.size_of.contract.MyContract.test[routing]() -> void:
test:
    b test_block@0

test_block@0:
    // size_of/contract.py:12
    // @arc4.abimethod()
    callsub test_cases.size_of.contract.MyContract.test
    intc_1 // 1
    return


// test_cases.size_of.contract.MyContract.test() -> void:
test_cases.size_of.contract.MyContract.test:
    b test_cases.size_of.contract.MyContract.test_block@0

test_cases.size_of.contract.MyContract.test_block@0:
    // size_of/contract.py:14
    // assert size_of(arc4.UInt64) == 8
    intc_0 // 8
    intc_0 // 8
    ==
    assert
    // size_of/contract.py:15
    // assert size_of(UInt64) == 8
    intc_0 // 8
    intc_0 // 8
    ==
    assert
    // size_of/contract.py:16
    // assert size_of(arc4.Address) == 32
    intc_3 // 32
    intc_3 // 32
    ==
    assert
    // size_of/contract.py:17
    // assert size_of(Account) == 32
    intc_3 // 32
    intc_3 // 32
    ==
    assert
    // size_of/contract.py:18
    // assert size_of(Application) == 8
    intc_0 // 8
    intc_0 // 8
    ==
    assert
    // size_of/contract.py:19
    // assert size_of(Asset) == 8
    intc_0 // 8
    intc_0 // 8
    ==
    assert
    // size_of/contract.py:20
    // assert size_of(bool) == 8
    intc_0 // 8
    intc_0 // 8
    ==
    assert
    // size_of/contract.py:21
    // assert size_of(tuple[bool]) == 1
    intc_1 // 1
    intc_1 // 1
    ==
    assert
    // size_of/contract.py:22
    // assert size_of(tuple[bool, bool, bool, bool, bool, bool, bool, bool]) == 1
    intc_1 // 1
    intc_1 // 1
    ==
    assert
    // size_of/contract.py:23
    // assert size_of(tuple[bool, bool, bool, bool, bool, bool, bool, bool, bool]) == 2
    intc_2 // 2
    intc_2 // 2
    ==
    assert
    // size_of/contract.py:24
    // assert size_of(WhatsMySize) == 9
    pushint 9 // 9
    pushint 9 // 9
    ==
    assert
    // size_of/contract.py:25
    // assert size_of(arc4.StaticArray[arc4.Byte, typing.Literal[7]]) == 7
    pushint 7 // 7
    pushint 7 // 7
    ==
    assert
    // size_of/contract.py:26
    // assert size_of(arc4.StaticArray(arc4.Byte(), arc4.Byte())) == 2
    intc_2 // 2
    intc_2 // 2
    ==
    assert
    retsub
