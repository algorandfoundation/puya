#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 8 1 32

main_block@0:

main_block@1:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6

main_abi_routing@2:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xa78000de // method "test()void"
    swap
    match main_test_route@3

main_switch_case_default@4:

main_switch_case_next@5:

main_after_if_else@10:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.size_of.contract.MyContract.__puya_arc4_router__@11:
    return

main_test_route@3:
    // size_of/contract.py:12
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub test
    intc_2 // 1
    b main_after_inlined_test_cases.size_of.contract.MyContract.__puya_arc4_router__@11

main_bare_routing@6:
    // size_of/contract.py:11
    // class MyContract(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@7

main_switch_case_default@8:

main_switch_case_next@9:
    b main_after_if_else@10

main___algopy_default_create@7:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@12:

main_after_inlined_test_cases.size_of.contract.MyContract.__algopy_default_create@13:
    intc_2 // 1
    b main_after_inlined_test_cases.size_of.contract.MyContract.__puya_arc4_router__@11


// test_cases.size_of.contract.MyContract.test() -> void:
test:

test_block@0:
    // size_of/contract.py:14
    // assert size_of(arc4.UInt64) == 8
    intc_1 // 8
    dup
    ==
    assert
    // size_of/contract.py:15
    // assert size_of(UInt64) == 8
    intc_1 // 8
    dup
    ==
    assert
    // size_of/contract.py:16
    // assert size_of(arc4.Address) == 32
    intc_3 // 32
    dup
    ==
    assert
    // size_of/contract.py:17
    // assert size_of(Account) == 32
    intc_3 // 32
    dup
    ==
    assert
    // size_of/contract.py:18
    // assert size_of(Application) == 8
    intc_1 // 8
    dup
    ==
    assert
    // size_of/contract.py:19
    // assert size_of(Asset) == 8
    intc_1 // 8
    dup
    ==
    assert
    // size_of/contract.py:20
    // assert size_of(bool) == 8
    intc_1 // 8
    dup
    ==
    assert
    // size_of/contract.py:21
    // assert size_of(tuple[bool]) == 1
    intc_2 // 1
    dup
    ==
    assert
    // size_of/contract.py:22
    // assert size_of(tuple[bool, bool, bool, bool, bool, bool, bool, bool]) == 1
    intc_2 // 1
    dup
    ==
    assert
    // size_of/contract.py:23
    // assert size_of(tuple[bool, bool, bool, bool, bool, bool, bool, bool, bool]) == 2
    pushint 2 // 2
    dup
    ==
    assert
    // size_of/contract.py:24
    // assert size_of(WhatsMySize) == 9
    pushint 9 // 9
    dup
    ==
    assert
    // size_of/contract.py:25
    // assert size_of(arc4.StaticArray[arc4.Byte, typing.Literal[7]]) == 7
    pushint 7 // 7
    dup
    ==
    assert
    // size_of/contract.py:26
    // assert size_of(arc4.StaticArray(arc4.Byte(), arc4.Byte())) == 2
    pushint 2 // 2
    dup
    ==
    assert
    retsub
