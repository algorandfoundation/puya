contract MyContract
{
  method_resolution_order: (
    algopy.arc4.ARC4Contract,
  )
  
  subroutine algopy.arc4.ARC4Contract.approval_program(): bool
  {
    return arc4_router()
  }
  
  subroutine algopy.arc4.ARC4Contract.clear_state_program(): bool
  {
    return true
  }
  
  abimethod test_cases.size_of.contract.MyContract.test(): void
  {
    assert(size_of(arc4.uint64) == 8u)
    assert(size_of(uint64) == 8u)
    assert(size_of(arc4.static_array<arc4.uint8, 32>) == 32u)
    assert(size_of(account) == 32u)
    assert(size_of(application) == 8u)
    assert(size_of(asset) == 8u)
    assert(size_of(bool) == 8u)
    assert(size_of(tuple<bool>) == 1u)
    assert(size_of(tuple<bool,bool,bool,bool,bool,bool,bool,bool>) == 1u)
    assert(size_of(tuple<bool,bool,bool,bool,bool,bool,bool,bool,bool>) == 2u)
    assert(size_of(test_cases.size_of.contract.WhatsMySize) == 9u)
    assert(size_of(arc4.static_array<arc4.uint8, 7>) == 7u)
    assert(size_of(arc4.static_array<arc4.uint8, 2>) == 2u)
  }
  
  baremethod test_cases.size_of.contract.MyContract.__algopy_default_create(): void
  {
  }
}