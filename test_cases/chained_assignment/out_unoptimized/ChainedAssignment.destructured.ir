contract test_cases.chained_assignment.contract.ChainedAssignment:
    program approval:
        subroutine test_cases.chained_assignment.contract.ChainedAssignment.approval_program() -> bool:
            block@0: // L20
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L17
                test_cases.chained_assignment.contract.ChainedAssignment.__init__()
                goto block@2
            block@2: // entrypoint_L17
                return 1u
        
        subroutine test_cases.chained_assignment.contract.ChainedAssignment.__init__() -> void:
            block@0: // L17
                test_cases.chained_assignment.contract.BaseContract.__init__()
                return 
        
        subroutine test_cases.chained_assignment.contract.BaseContract.__init__() -> void:
            block@0: // L9
                let awst_tmp%0#0: bytes = test_cases.chained_assignment.contract.join_log_and_return(0x48656c6c6f2c20776f726c6421, 0xf09f918b)
                (app_global_put "state2" awst_tmp%0#0)
                (app_global_put "state1" awst_tmp%0#0)
                return 
        
        subroutine test_cases.chained_assignment.contract.join_log_and_return(left: bytes, right: bytes) -> bytes:
            block@0: // L27
                let tmp%0#0: bytes = (concat left#0 " ")
                let result#0: bytes = (concat tmp%0#0 right#0)
                (log result#0)
                return result#0
    
    program clear-state:
        subroutine test_cases.chained_assignment.contract.ChainedAssignment.clear_state_program() -> bool:
            block@0: // L23
                return 1u