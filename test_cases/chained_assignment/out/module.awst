contract ChainedAssignment
{
  method_resolution_order: (
    test_cases.chained_assignment.contract.BaseContract,
  )
  globals {
    ['state1']: bytes
    ['state2']: bytes
  }
  
  subroutine test_cases.chained_assignment.contract.ChainedAssignment.approval_program(): bool
  {
    if (!(txn<ApplicationID>())) {
      this::__init__()
    }
    return true
  }
  
  subroutine test_cases.chained_assignment.contract.ChainedAssignment.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.chained_assignment.contract.ChainedAssignment.__init__(): void
  {
    super::__init__()
  }
  
  subroutine test_cases.chained_assignment.contract.ChainedAssignment.approval_program(): bool
  {
    return true
  }
  
  subroutine test_cases.chained_assignment.contract.BaseContract.__init__(): void
  {
    GlobalState['state2']: bytes = SINGLE_EVAL(id=0, source=test_cases.chained_assignment.contract.join_log_and_return(left=hex<"48656C6C6F2C20776F726C6421">, right=hex<"F09F918B">))
    GlobalState['state1']: bytes = SINGLE_EVAL(id=0)
  }
}

subroutine join_log_and_return(left: bytes, right: bytes): bytes
{
  result: bytes = left + hex<"20"> + right
  log(result)
  return result
}