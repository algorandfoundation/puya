WAVE = b'\xf0\x9f\x91\x8b'

abstract contract BaseContract
{
  globals {
    ['state1']: bytes
    ['state2']: bytes
  }
  
  constructor()
  {
    this.state2: bytes = SINGLE_EVAL(id=0, source=test_cases.chained_assignment.contract::join_log_and_return(right=hex<"F09F918B">, left=hex<"48656C6C6F2C20776F726C6421">))
    this.state1: bytes = SINGLE_EVAL(id=0, source=test_cases.chained_assignment.contract::join_log_and_return(right=hex<"F09F918B">, left=hex<"48656C6C6F2C20776F726C6421">))
  }
}

contract ChainedAssignment extends (test_cases.chained_assignment.contract::BaseContract)
{
  constructor()
  {
    test_cases.chained_assignment.contract::BaseContract::__init__()
  }
  
  approval_program(): bool
  {
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
}

subroutine join_log_and_return(left: bytes, right: bytes): bytes
{
  result: bytes = left + ' ' + right
  log(result)
  return result
}