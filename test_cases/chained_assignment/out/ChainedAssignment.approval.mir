// Op                                             //                                               Op Description                           Stack (out)                               X stack                                                                    Source code                                                                                          Source line

#pragma version 10

// test_cases.chained_assignment.contract.ChainedAssignment.approval_program() -> uint64:
main_block@0:
    txn ApplicationID                             //                                                                                        {txn}
    //                                            virtual: store app_id%0#0 to l-stack (no copy)   app_id%0#0
    //                                            virtual: load app_id%0#0 from l-stack (no copy)  app_id%0#0
    bnz main_entrypoint@2                         //
    // Implicit fall through to main_on_create@1  //

main_on_create@1:
    callsub __init__                              //
    // Implicit fall through to main_entrypoint@2 //

main_entrypoint@2:
    int 1                                         //                                                                                        1                                                                                                                    True                                                                                                 chained_assignment/contract.py:21
    return                                        //                                                                                                                                                                                                             return True                                                                                          chained_assignment/contract.py:21


// test_cases.chained_assignment.contract.ChainedAssignment.__init__() -> void:
__init__:
    proto 0 0                                     //                                                                                                                                                                                                             def __init__(self) -> None:                                                                          chained_assignment/contract.py:17

__init___block@0:
    callsub BaseContract.__init__                 //                                                                                                                                                                                                             super().__init__()                                                                                   chained_assignment/contract.py:18
    retsub                                        //


// test_cases.chained_assignment.contract.BaseContract.__init__() -> void:
BaseContract.__init__:
    proto 0 0                                     //                                                                                                                                                                                                             def __init__(self) -> None:                                                                          chained_assignment/contract.py:9

BaseContract.__init___block@0:
    byte "Hello, world!"                          //                                                                                        "Hello, world!"                                                                                                      b"Hello, world!"                                                                                     chained_assignment/contract.py:12
    byte "\xf0\x9f\x91\x8b"                       //                                                                                        "Hello, world!","\xf0\x9f\x91\x8b"                                                                                   WAVE                                                                                                 chained_assignment/contract.py:11
    callsub join_log_and_return                   //                                                                                        {join_log_and_return}                                                                                                join_log_and_return(\nright=Bytes(WAVE),\nleft=Bytes(b"Hello, world!"),\n)                           chained_assignment/contract.py:10-13
    //                                            virtual: store awst_tmp%0#0 to l-stack (no copy) awst_tmp%0#0                                                                       join_log_and_return(\nright=Bytes(WAVE),\nleft=Bytes(b"Hello, world!"),\n) chained_assignment/contract.py:10-13
    byte "state2"                                 //                                                                                        awst_tmp%0#0,"state2"                                                                                                self.state2                                                                                          chained_assignment/contract.py:10
    dig 1                                         //                                               load awst_tmp%0#0 from l-stack (copy)    awst_tmp%0#0,"state2",awst_tmp%0#0                                                                                   self.state1 = self.state2 = join_log_and_return(\nright=Bytes(WAVE),\nleft=Bytes(b"Hello, world!"... chained_assignment/contract.py:10-13
    app_global_put                                //                                                                                        awst_tmp%0#0                                                                                                         self.state1 = self.state2 = join_log_and_return(\nright=Bytes(WAVE),\nleft=Bytes(b"Hello, world!"... chained_assignment/contract.py:10-13
    byte "state1"                                 //                                                                                        awst_tmp%0#0,"state1"                                                                                                self.state1                                                                                          chained_assignment/contract.py:10
    uncover 1                                     //                                               load awst_tmp%0#0 from l-stack (no copy) "state1",awst_tmp%0#0                                                                                                self.state1 = self.state2 = join_log_and_return(\nright=Bytes(WAVE),\nleft=Bytes(b"Hello, world!"... chained_assignment/contract.py:10-13
    app_global_put                                //                                                                                                                                                                                                             self.state1 = self.state2 = join_log_and_return(\nright=Bytes(WAVE),\nleft=Bytes(b"Hello, world!"... chained_assignment/contract.py:10-13
    retsub                                        //


// test_cases.chained_assignment.contract.join_log_and_return(left: bytes, right: bytes) -> bytes:
join_log_and_return:
    proto 2 1                                     //                                                                                        (洧도) left#0,right#0 |                                                                                                 @subroutine\ndef join_log_and_return(*, left: Bytes, right: Bytes) -> Bytes:                         chained_assignment/contract.py:27-28

join_log_and_return_block@0:
    frame_dig -2                                  //                                               load left#0 from parameters              (洧도) left#0,right#0 | left#0                                                                                          left + b" "                                                                                          chained_assignment/contract.py:29
    byte " "                                      //                                                                                        (洧도) left#0,right#0 | left#0," "                                                                                      b" "                                                                                                 chained_assignment/contract.py:29
    concat                                        //                                                                                        (洧도) left#0,right#0 | {concat}                                                                                        left + b" "                                                                                          chained_assignment/contract.py:29
    //                                            virtual: store tmp%0#0 to l-stack (no copy)      (洧도) left#0,right#0 | tmp%0#0                                                       left + b" "                                                                chained_assignment/contract.py:29
    //                                            virtual: load tmp%0#0 from l-stack (no copy)     (洧도) left#0,right#0 | tmp%0#0                                                       result = left + b" " + right                                               chained_assignment/contract.py:29
    frame_dig -1                                  //                                               load right#0 from parameters             (洧도) left#0,right#0 | tmp%0#0,right#0                                                                                 result = left + b" " + right                                                                         chained_assignment/contract.py:29
    concat                                        //                                                                                        (洧도) left#0,right#0 | {concat}                                                                                        left + b" " + right                                                                                  chained_assignment/contract.py:29
    //                                            virtual: store result#0 to l-stack (no copy)     (洧도) left#0,right#0 | result#0                                                      result = left + b" " + right                                               chained_assignment/contract.py:29
    dup                                           //                                               load result#0 from l-stack (copy)        (洧도) left#0,right#0 | result#0,result#0                                                                               log(result)                                                                                          chained_assignment/contract.py:30
    log                                           //                                                                                        (洧도) left#0,right#0 | result#0                                                                                        log(result)                                                                                          chained_assignment/contract.py:30
    //                                            virtual: load result#0 from l-stack (no copy)    (洧도) left#0,right#0 | result#0                                                      return result                                                              chained_assignment/contract.py:31
    retsub                                        //                                                                                        result#0                                                                                                             return result                                                                                        chained_assignment/contract.py:31

