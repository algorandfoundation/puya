// Op                                                                    Stack (out)
// test_cases.chained_assignment.contract.ChainedAssignment.approval_program() -> uint64:
main_block@0:
    txn ApplicationID                                                    app_id%0#0
    bnz main_after_if_else@2
    // Implicit fall through to main_on_create@1

main_on_create@1:
    callsub __init__
    // Implicit fall through to main_after_if_else@2

main_after_if_else@2:
    // chained_assignment/contract.py:21
    // return True
    int 1                                                                1
    return


// test_cases.chained_assignment.contract.ChainedAssignment.__init__() -> void:
__init__:
    // chained_assignment/contract.py:17
    // def __init__(self) -> None:
    proto 0 0

__init___block@0:
    // chained_assignment/contract.py:18
    // super().__init__()
    callsub test_cases.chained_assignment.contract.BaseContract.__init__
    retsub


// test_cases.chained_assignment.contract.BaseContract.__init__() -> void:
test_cases.chained_assignment.contract.BaseContract.__init__:
    // chained_assignment/contract.py:9
    // def __init__(self) -> None:
    proto 0 0

test_cases.chained_assignment.contract.BaseContract.__init___block@0:
    // chained_assignment/contract.py:12
    // left=Bytes(b"Hello, world!"),
    byte 0x48656c6c6f2c20776f726c6421                                    0x48656c6c6f2c20776f726c6421
    // chained_assignment/contract.py:11
    // right=Bytes(WAVE),
    byte 0xf09f918b                                                      0x48656c6c6f2c20776f726c6421,0xf09f918b
    // chained_assignment/contract.py:10-13
    // self.state1 = self.state2 = join_log_and_return(
    //     right=Bytes(WAVE),
    //     left=Bytes(b"Hello, world!"),
    // )
    callsub join_log_and_return                                          awst_tmp%0#0
    // chained_assignment/contract.py:10
    // self.state1 = self.state2 = join_log_and_return(
    byte "state2"                                                        awst_tmp%0#0,"state2"
    // chained_assignment/contract.py:10-13
    // self.state1 = self.state2 = join_log_and_return(
    //     right=Bytes(WAVE),
    //     left=Bytes(b"Hello, world!"),
    // )
    l-load-copy awst_tmp%0#0 1                                           awst_tmp%0#0,"state2",awst_tmp%0#0 (copy)
    app_global_put                                                       awst_tmp%0#0
    // chained_assignment/contract.py:10
    // self.state1 = self.state2 = join_log_and_return(
    byte "state1"                                                        awst_tmp%0#0,"state1"
    // chained_assignment/contract.py:10-13
    // self.state1 = self.state2 = join_log_and_return(
    //     right=Bytes(WAVE),
    //     left=Bytes(b"Hello, world!"),
    // )
    l-load awst_tmp%0#0 1                                                "state1",awst_tmp%0#0
    app_global_put
    retsub


// test_cases.chained_assignment.contract.join_log_and_return(left: bytes, right: bytes) -> bytes:
join_log_and_return:                                                     (洧도) left#0,right#0 |
    // chained_assignment/contract.py:27-28
    // @subroutine
    // def join_log_and_return(*, left: Bytes, right: Bytes) -> Bytes:
    proto 2 1                                                            (洧도) left#0,right#0 |

join_log_and_return_block@0:                                             (洧도) left#0,right#0 |
    // chained_assignment/contract.py:29
    // result = left + b" " + right
    p-load left#0                                                        (洧도) left#0,right#0 | left#0 (copy)
    byte 0x20                                                            (洧도) left#0,right#0 | left#0 (copy),0x20
    concat                                                               (洧도) left#0,right#0 | tmp%0#0
    p-load right#0                                                       (洧도) left#0,right#0 | tmp%0#0,right#0 (copy)
    concat                                                               (洧도) left#0,right#0 | result#0
    // chained_assignment/contract.py:30
    // log(result)
    l-load-copy result#0 0                                               (洧도) left#0,right#0 | result#0,result#0 (copy)
    log                                                                  (洧도) left#0,right#0 | result#0
    // chained_assignment/contract.py:31
    // return result
    l-load result#0 0                                                    (洧도) left#0,right#0 | result#0
    retsub                                                               result#0


