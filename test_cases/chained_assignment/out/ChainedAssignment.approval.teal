#pragma version 10

test_cases.chained_assignment.contract.ChainedAssignment.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // chained_assignment/contract.py:19
    // return True
    int 1
    return


// test_cases.chained_assignment.contract.ChainedAssignment.__init__() -> void:
__init__:
    // chained_assignment/contract.py:15
    // def __init__(self) -> None:
    proto 0 0
    // chained_assignment/contract.py:16
    // super().__init__()
    callsub BaseContract.__init__
    retsub


// test_cases.chained_assignment.contract.BaseContract.__init__() -> void:
BaseContract.__init__:
    // chained_assignment/contract.py:7
    // def __init__(self) -> None:
    proto 0 0
    // chained_assignment/contract.py:10
    // left=Bytes(b"Hello, world!"),
    byte "Hello, world!"
    // chained_assignment/contract.py:9
    // right=Bytes(WAVE),
    byte "\xf0\x9f\x91\x8b"
    // chained_assignment/contract.py:8-11
    // self.state1 = self.state2 = join_log_and_return(
    //     right=Bytes(WAVE),
    //     left=Bytes(b"Hello, world!"),
    // )
    callsub join_log_and_return
    // chained_assignment/contract.py:8
    // self.state1 = self.state2 = join_log_and_return(
    byte "state2"
    // chained_assignment/contract.py:8-11
    // self.state1 = self.state2 = join_log_and_return(
    //     right=Bytes(WAVE),
    //     left=Bytes(b"Hello, world!"),
    // )
    dig 1
    app_global_put
    // chained_assignment/contract.py:8
    // self.state1 = self.state2 = join_log_and_return(
    byte "state1"
    // chained_assignment/contract.py:8-11
    // self.state1 = self.state2 = join_log_and_return(
    //     right=Bytes(WAVE),
    //     left=Bytes(b"Hello, world!"),
    // )
    swap
    app_global_put
    retsub


// test_cases.chained_assignment.contract.join_log_and_return(left: bytes, right: bytes) -> bytes:
join_log_and_return:
    // chained_assignment/contract.py:25-26
    // @subroutine
    // def join_log_and_return(*, left: Bytes, right: Bytes) -> Bytes:
    proto 2 1
    // chained_assignment/contract.py:27
    // result = left + b" " + right
    frame_dig -2
    byte " "
    concat
    frame_dig -1
    concat
    // chained_assignment/contract.py:28
    // log(result)
    dup
    log
    // chained_assignment/contract.py:29
    // return result
    retsub
