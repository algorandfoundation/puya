debug: PuyaOptions(paths=(PosixPath('nested_loops'),), output_teal=True, output_arc32=True, output_awst=False, output_ssa_ir=True, output_optimization_ir=True, output_cssa_ir=True, output_post_ssa_ir=True, output_parallel_copies_ir=True, output_final_ir=True, out_dir=None, debug_level=0, optimization_level=1, log_level=<LogLevel.info: 20>)
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L7
debug: Terminated block@0: // L7
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L11
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L11
debug: Terminated block@1: // for_header_L11
debug: Sealing block@None: // for_body_L11
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@1: // for_header_L11
debug: Created Phi assignment: let n#1: uint64 = undefined while trying to resolve 'n' in block@1: // for_header_L11
debug: Terminated block@2: // for_body_L11
debug: Looking for 'range_item%2' in an unsealed block creating an incomplete Phi: block@3: // for_header_L12
debug: Created Phi assignment: let range_item%2#1: uint64 = undefined while trying to resolve 'range_item%2' in block@3: // for_header_L12
debug: Terminated block@3: // for_header_L12
debug: Sealing block@None: // for_body_L12
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@3: // for_header_L12
debug: Created Phi assignment: let n#2: uint64 = undefined while trying to resolve 'n' in block@3: // for_header_L12
debug: Terminated block@4: // for_body_L12
debug: Looking for 'range_item%4' in an unsealed block creating an incomplete Phi: block@5: // for_header_L13
debug: Created Phi assignment: let range_item%4#1: uint64 = undefined while trying to resolve 'range_item%4' in block@5: // for_header_L13
debug: Terminated block@5: // for_header_L13
debug: Sealing block@None: // for_body_L13
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@5: // for_header_L13
debug: Created Phi assignment: let n#3: uint64 = undefined while trying to resolve 'n' in block@5: // for_header_L13
debug: Terminated block@6: // for_body_L13
debug: Looking for 'range_item%6' in an unsealed block creating an incomplete Phi: block@7: // for_header_L14
debug: Created Phi assignment: let range_item%6#1: uint64 = undefined while trying to resolve 'range_item%6' in block@7: // for_header_L14
debug: Terminated block@7: // for_header_L14
debug: Sealing block@None: // for_body_L14
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@7: // for_header_L14
debug: Created Phi assignment: let n#4: uint64 = undefined while trying to resolve 'n' in block@7: // for_header_L14
debug: Terminated block@8: // for_body_L14
debug: Looking for 'range_item%8' in an unsealed block creating an incomplete Phi: block@9: // for_header_L15
debug: Created Phi assignment: let range_item%8#1: uint64 = undefined while trying to resolve 'range_item%8' in block@9: // for_header_L15
debug: Terminated block@9: // for_header_L15
debug: Sealing block@None: // for_body_L15
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@9: // for_header_L15
debug: Created Phi assignment: let n#5: uint64 = undefined while trying to resolve 'n' in block@9: // for_header_L15
debug: Terminated block@10: // for_body_L15
debug: Looking for 'range_item%10' in an unsealed block creating an incomplete Phi: block@11: // for_header_L16
debug: Created Phi assignment: let range_item%10#1: uint64 = undefined while trying to resolve 'range_item%10' in block@11: // for_header_L16
debug: Terminated block@11: // for_header_L16
debug: Sealing block@None: // for_body_L16
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@11: // for_header_L16
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@11: // for_header_L16
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@11: // for_header_L16
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@11: // for_header_L16
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@11: // for_header_L16
debug: Created Phi assignment: let b#1: uint64 = undefined while trying to resolve 'b' in block@11: // for_header_L16
debug: Looking for 'c' in an unsealed block creating an incomplete Phi: block@11: // for_header_L16
debug: Created Phi assignment: let c#1: uint64 = undefined while trying to resolve 'c' in block@11: // for_header_L16
debug: Looking for 'd' in an unsealed block creating an incomplete Phi: block@11: // for_header_L16
debug: Created Phi assignment: let d#1: uint64 = undefined while trying to resolve 'd' in block@11: // for_header_L16
debug: Looking for 'e' in an unsealed block creating an incomplete Phi: block@11: // for_header_L16
debug: Created Phi assignment: let e#1: uint64 = undefined while trying to resolve 'e' in block@11: // for_header_L16
debug: Terminated block@12: // for_body_L16
debug: Sealing block@13: // for_footer_L16
debug: Sealing block@None: // after_for_L16
debug: Terminated block@13: // for_footer_L16
debug: Sealing block@11: // for_header_L16
debug: Added range_item%10#0 to Phi node: let range_item%10#1: uint64 = φ(range_item%10#0 <- block@10) in block@10: // for_body_L15
debug: Added range_item%10#2 to Phi node: let range_item%10#1: uint64 = φ(range_item%10#0 <- block@10, range_item%10#2 <- block@13) in block@13: // for_footer_L16
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@9: // for_header_L15
debug: Created Phi assignment: let x#3: uint64 = undefined while trying to resolve 'x' in block@9: // for_header_L15
debug: Added x#3 to Phi node: let x#1: uint64 = φ(x#3 <- block@10) in block@10: // for_body_L15
debug: Added x#2 to Phi node: let x#1: uint64 = φ(x#3 <- block@10, x#2 <- block@13) in block@13: // for_footer_L16
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@9: // for_header_L15
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@9: // for_header_L15
debug: Added a#2 to Phi node: let a#1: uint64 = φ(a#2 <- block@10) in block@10: // for_body_L15
debug: Added a#1 to Phi node: let a#1: uint64 = φ(a#2 <- block@10, a#1 <- block@13) in block@13: // for_footer_L16
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#2 <- block@10, a#1 <- block@13) (a#1) with a#2
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#2 <- block@10, a#1 <- block@13)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#2 <- block@10, a#1 <- block@13) (a#1) with a#2 in current definition for 3 blocks
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@9: // for_header_L15
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@9: // for_header_L15
debug: Added b#2 to Phi node: let b#1: uint64 = φ(b#2 <- block@10) in block@10: // for_body_L15
debug: Added b#1 to Phi node: let b#1: uint64 = φ(b#2 <- block@10, b#1 <- block@13) in block@13: // for_footer_L16
debug: Replacing trivial Phi node: let b#1: uint64 = φ(b#2 <- block@10, b#1 <- block@13) (b#1) with b#2
debug: Deleting Phi assignment: let b#1: uint64 = φ(b#2 <- block@10, b#1 <- block@13)
debug: Replaced trivial Phi node: let b#1: uint64 = φ(b#2 <- block@10, b#1 <- block@13) (b#1) with b#2 in current definition for 3 blocks
debug: Looking for 'c' in an unsealed block creating an incomplete Phi: block@9: // for_header_L15
debug: Created Phi assignment: let c#2: uint64 = undefined while trying to resolve 'c' in block@9: // for_header_L15
debug: Added c#2 to Phi node: let c#1: uint64 = φ(c#2 <- block@10) in block@10: // for_body_L15
debug: Added c#1 to Phi node: let c#1: uint64 = φ(c#2 <- block@10, c#1 <- block@13) in block@13: // for_footer_L16
debug: Replacing trivial Phi node: let c#1: uint64 = φ(c#2 <- block@10, c#1 <- block@13) (c#1) with c#2
debug: Deleting Phi assignment: let c#1: uint64 = φ(c#2 <- block@10, c#1 <- block@13)
debug: Replaced trivial Phi node: let c#1: uint64 = φ(c#2 <- block@10, c#1 <- block@13) (c#1) with c#2 in current definition for 3 blocks
debug: Looking for 'd' in an unsealed block creating an incomplete Phi: block@9: // for_header_L15
debug: Created Phi assignment: let d#2: uint64 = undefined while trying to resolve 'd' in block@9: // for_header_L15
debug: Added d#2 to Phi node: let d#1: uint64 = φ(d#2 <- block@10) in block@10: // for_body_L15
debug: Added d#1 to Phi node: let d#1: uint64 = φ(d#2 <- block@10, d#1 <- block@13) in block@13: // for_footer_L16
debug: Replacing trivial Phi node: let d#1: uint64 = φ(d#2 <- block@10, d#1 <- block@13) (d#1) with d#2
debug: Deleting Phi assignment: let d#1: uint64 = φ(d#2 <- block@10, d#1 <- block@13)
debug: Replaced trivial Phi node: let d#1: uint64 = φ(d#2 <- block@10, d#1 <- block@13) (d#1) with d#2 in current definition for 3 blocks
debug: Added e#0 to Phi node: let e#1: uint64 = φ(e#0 <- block@10) in block@10: // for_body_L15
debug: Added e#1 to Phi node: let e#1: uint64 = φ(e#0 <- block@10, e#1 <- block@13) in block@13: // for_footer_L16
debug: Replacing trivial Phi node: let e#1: uint64 = φ(e#0 <- block@10, e#1 <- block@13) (e#1) with e#0
debug: Deleting Phi assignment: let e#1: uint64 = φ(e#0 <- block@10, e#1 <- block@13)
debug: Replaced trivial Phi node: let e#1: uint64 = φ(e#0 <- block@10, e#1 <- block@13) (e#1) with e#0 in current definition for 3 blocks
debug: Terminated block@14: // after_for_L16
debug: Sealing block@15: // for_footer_L15
debug: Sealing block@None: // after_for_L15
debug: Created Phi assignment: let range_item%8#2: uint64 = undefined while trying to resolve 'range_item%8' in block@11: // for_header_L16
debug: Added range_item%8#1 to Phi node: let range_item%8#2: uint64 = φ(range_item%8#1 <- block@10) in block@10: // for_body_L15
debug: Added range_item%8#2 to Phi node: let range_item%8#2: uint64 = φ(range_item%8#1 <- block@10, range_item%8#2 <- block@13) in block@13: // for_footer_L16
debug: Replacing trivial Phi node: let range_item%8#2: uint64 = φ(range_item%8#1 <- block@10, range_item%8#2 <- block@13) (range_item%8#2) with range_item%8#1
debug: Deleting Phi assignment: let range_item%8#2: uint64 = φ(range_item%8#1 <- block@10, range_item%8#2 <- block@13)
debug: Replaced trivial Phi node: let range_item%8#2: uint64 = φ(range_item%8#1 <- block@10, range_item%8#2 <- block@13) (range_item%8#2) with range_item%8#1 in current definition for 3 blocks
debug: Terminated block@15: // for_footer_L15
debug: Sealing block@9: // for_header_L15
debug: Added range_item%8#0 to Phi node: let range_item%8#1: uint64 = φ(range_item%8#0 <- block@8) in block@8: // for_body_L14
debug: Added range_item%8#3 to Phi node: let range_item%8#1: uint64 = φ(range_item%8#0 <- block@8, range_item%8#3 <- block@15) in block@15: // for_footer_L15
debug: Added n#4 to Phi node: let n#5: uint64 = φ(n#4 <- block@8) in block@8: // for_body_L14
debug: Created Phi assignment: let n#6: uint64 = undefined while trying to resolve 'n' in block@11: // for_header_L16
debug: Added n#5 to Phi node: let n#6: uint64 = φ(n#5 <- block@10) in block@10: // for_body_L15
debug: Added n#6 to Phi node: let n#6: uint64 = φ(n#5 <- block@10, n#6 <- block@13) in block@13: // for_footer_L16
debug: Replacing trivial Phi node: let n#6: uint64 = φ(n#5 <- block@10, n#6 <- block@13) (n#6) with n#5
debug: Deleting Phi assignment: let n#6: uint64 = φ(n#5 <- block@10, n#6 <- block@13)
debug: Replaced trivial Phi node: let n#6: uint64 = φ(n#5 <- block@10, n#6 <- block@13) (n#6) with n#5 in current definition for 3 blocks
debug: Added n#5 to Phi node: let n#5: uint64 = φ(n#4 <- block@8, n#5 <- block@15) in block@15: // for_footer_L15
debug: Replacing trivial Phi node: let n#5: uint64 = φ(n#4 <- block@8, n#5 <- block@15) (n#5) with n#4
debug: Deleting Phi assignment: let n#5: uint64 = φ(n#4 <- block@8, n#5 <- block@15)
debug: Replaced trivial Phi node: let n#5: uint64 = φ(n#4 <- block@8, n#5 <- block@15) (n#5) with n#4 in current definition for 7 blocks
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@7: // for_header_L14
debug: Created Phi assignment: let x#4: uint64 = undefined while trying to resolve 'x' in block@7: // for_header_L14
debug: Added x#4 to Phi node: let x#3: uint64 = φ(x#4 <- block@8) in block@8: // for_body_L14
debug: Added x#1 to Phi node: let x#3: uint64 = φ(x#4 <- block@8, x#1 <- block@15) in block@15: // for_footer_L15
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@7: // for_header_L14
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@7: // for_header_L14
debug: Added a#3 to Phi node: let a#2: uint64 = φ(a#3 <- block@8) in block@8: // for_body_L14
debug: Added a#2 to Phi node: let a#2: uint64 = φ(a#3 <- block@8, a#2 <- block@15) in block@15: // for_footer_L15
debug: Replacing trivial Phi node: let a#2: uint64 = φ(a#3 <- block@8, a#2 <- block@15) (a#2) with a#3
debug: Deleting Phi assignment: let a#2: uint64 = φ(a#3 <- block@8, a#2 <- block@15)
debug: Replaced trivial Phi node: let a#2: uint64 = φ(a#3 <- block@8, a#2 <- block@15) (a#2) with a#3 in current definition for 7 blocks
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@7: // for_header_L14
debug: Created Phi assignment: let b#3: uint64 = undefined while trying to resolve 'b' in block@7: // for_header_L14
debug: Added b#3 to Phi node: let b#2: uint64 = φ(b#3 <- block@8) in block@8: // for_body_L14
debug: Added b#2 to Phi node: let b#2: uint64 = φ(b#3 <- block@8, b#2 <- block@15) in block@15: // for_footer_L15
debug: Replacing trivial Phi node: let b#2: uint64 = φ(b#3 <- block@8, b#2 <- block@15) (b#2) with b#3
debug: Deleting Phi assignment: let b#2: uint64 = φ(b#3 <- block@8, b#2 <- block@15)
debug: Replaced trivial Phi node: let b#2: uint64 = φ(b#3 <- block@8, b#2 <- block@15) (b#2) with b#3 in current definition for 7 blocks
debug: Looking for 'c' in an unsealed block creating an incomplete Phi: block@7: // for_header_L14
debug: Created Phi assignment: let c#3: uint64 = undefined while trying to resolve 'c' in block@7: // for_header_L14
debug: Added c#3 to Phi node: let c#2: uint64 = φ(c#3 <- block@8) in block@8: // for_body_L14
debug: Added c#2 to Phi node: let c#2: uint64 = φ(c#3 <- block@8, c#2 <- block@15) in block@15: // for_footer_L15
debug: Replacing trivial Phi node: let c#2: uint64 = φ(c#3 <- block@8, c#2 <- block@15) (c#2) with c#3
debug: Deleting Phi assignment: let c#2: uint64 = φ(c#3 <- block@8, c#2 <- block@15)
debug: Replaced trivial Phi node: let c#2: uint64 = φ(c#3 <- block@8, c#2 <- block@15) (c#2) with c#3 in current definition for 7 blocks
debug: Added d#0 to Phi node: let d#2: uint64 = φ(d#0 <- block@8) in block@8: // for_body_L14
debug: Added d#2 to Phi node: let d#2: uint64 = φ(d#0 <- block@8, d#2 <- block@15) in block@15: // for_footer_L15
debug: Replacing trivial Phi node: let d#2: uint64 = φ(d#0 <- block@8, d#2 <- block@15) (d#2) with d#0
debug: Deleting Phi assignment: let d#2: uint64 = φ(d#0 <- block@8, d#2 <- block@15)
debug: Replaced trivial Phi node: let d#2: uint64 = φ(d#0 <- block@8, d#2 <- block@15) (d#2) with d#0 in current definition for 7 blocks
debug: Terminated block@16: // after_for_L15
debug: Sealing block@17: // for_footer_L14
debug: Sealing block@None: // after_for_L14
debug: Created Phi assignment: let range_item%6#2: uint64 = undefined while trying to resolve 'range_item%6' in block@9: // for_header_L15
debug: Added range_item%6#1 to Phi node: let range_item%6#2: uint64 = φ(range_item%6#1 <- block@8) in block@8: // for_body_L14
debug: Created Phi assignment: let range_item%6#3: uint64 = undefined while trying to resolve 'range_item%6' in block@11: // for_header_L16
debug: Added range_item%6#2 to Phi node: let range_item%6#3: uint64 = φ(range_item%6#2 <- block@10) in block@10: // for_body_L15
debug: Added range_item%6#3 to Phi node: let range_item%6#3: uint64 = φ(range_item%6#2 <- block@10, range_item%6#3 <- block@13) in block@13: // for_footer_L16
debug: Replacing trivial Phi node: let range_item%6#3: uint64 = φ(range_item%6#2 <- block@10, range_item%6#3 <- block@13) (range_item%6#3) with range_item%6#2
debug: Deleting Phi assignment: let range_item%6#3: uint64 = φ(range_item%6#2 <- block@10, range_item%6#3 <- block@13)
debug: Replaced trivial Phi node: let range_item%6#3: uint64 = φ(range_item%6#2 <- block@10, range_item%6#3 <- block@13) (range_item%6#3) with range_item%6#2 in current definition for 3 blocks
debug: Added range_item%6#2 to Phi node: let range_item%6#2: uint64 = φ(range_item%6#1 <- block@8, range_item%6#2 <- block@15) in block@15: // for_footer_L15
debug: Replacing trivial Phi node: let range_item%6#2: uint64 = φ(range_item%6#1 <- block@8, range_item%6#2 <- block@15) (range_item%6#2) with range_item%6#1
debug: Deleting Phi assignment: let range_item%6#2: uint64 = φ(range_item%6#1 <- block@8, range_item%6#2 <- block@15)
debug: Replaced trivial Phi node: let range_item%6#2: uint64 = φ(range_item%6#1 <- block@8, range_item%6#2 <- block@15) (range_item%6#2) with range_item%6#1 in current definition for 7 blocks
debug: Terminated block@17: // for_footer_L14
debug: Sealing block@7: // for_header_L14
debug: Added range_item%6#0 to Phi node: let range_item%6#1: uint64 = φ(range_item%6#0 <- block@6) in block@6: // for_body_L13
debug: Added range_item%6#4 to Phi node: let range_item%6#1: uint64 = φ(range_item%6#0 <- block@6, range_item%6#4 <- block@17) in block@17: // for_footer_L14
debug: Added n#3 to Phi node: let n#4: uint64 = φ(n#3 <- block@6) in block@6: // for_body_L13
debug: Added n#4 to Phi node: let n#4: uint64 = φ(n#3 <- block@6, n#4 <- block@17) in block@17: // for_footer_L14
debug: Replacing trivial Phi node: let n#4: uint64 = φ(n#3 <- block@6, n#4 <- block@17) (n#4) with n#3
debug: Deleting Phi assignment: let n#4: uint64 = φ(n#3 <- block@6, n#4 <- block@17)
debug: Replaced trivial Phi node: let n#4: uint64 = φ(n#3 <- block@6, n#4 <- block@17) (n#4) with n#3 in current definition for 11 blocks
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@5: // for_header_L13
debug: Created Phi assignment: let x#5: uint64 = undefined while trying to resolve 'x' in block@5: // for_header_L13
debug: Added x#5 to Phi node: let x#4: uint64 = φ(x#5 <- block@6) in block@6: // for_body_L13
debug: Added x#3 to Phi node: let x#4: uint64 = φ(x#5 <- block@6, x#3 <- block@17) in block@17: // for_footer_L14
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@5: // for_header_L13
debug: Created Phi assignment: let a#4: uint64 = undefined while trying to resolve 'a' in block@5: // for_header_L13
debug: Added a#4 to Phi node: let a#3: uint64 = φ(a#4 <- block@6) in block@6: // for_body_L13
debug: Added a#3 to Phi node: let a#3: uint64 = φ(a#4 <- block@6, a#3 <- block@17) in block@17: // for_footer_L14
debug: Replacing trivial Phi node: let a#3: uint64 = φ(a#4 <- block@6, a#3 <- block@17) (a#3) with a#4
debug: Deleting Phi assignment: let a#3: uint64 = φ(a#4 <- block@6, a#3 <- block@17)
debug: Replaced trivial Phi node: let a#3: uint64 = φ(a#4 <- block@6, a#3 <- block@17) (a#3) with a#4 in current definition for 11 blocks
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@5: // for_header_L13
debug: Created Phi assignment: let b#4: uint64 = undefined while trying to resolve 'b' in block@5: // for_header_L13
debug: Added b#4 to Phi node: let b#3: uint64 = φ(b#4 <- block@6) in block@6: // for_body_L13
debug: Added b#3 to Phi node: let b#3: uint64 = φ(b#4 <- block@6, b#3 <- block@17) in block@17: // for_footer_L14
debug: Replacing trivial Phi node: let b#3: uint64 = φ(b#4 <- block@6, b#3 <- block@17) (b#3) with b#4
debug: Deleting Phi assignment: let b#3: uint64 = φ(b#4 <- block@6, b#3 <- block@17)
debug: Replaced trivial Phi node: let b#3: uint64 = φ(b#4 <- block@6, b#3 <- block@17) (b#3) with b#4 in current definition for 11 blocks
debug: Added c#0 to Phi node: let c#3: uint64 = φ(c#0 <- block@6) in block@6: // for_body_L13
debug: Added c#3 to Phi node: let c#3: uint64 = φ(c#0 <- block@6, c#3 <- block@17) in block@17: // for_footer_L14
debug: Replacing trivial Phi node: let c#3: uint64 = φ(c#0 <- block@6, c#3 <- block@17) (c#3) with c#0
debug: Deleting Phi assignment: let c#3: uint64 = φ(c#0 <- block@6, c#3 <- block@17)
debug: Replaced trivial Phi node: let c#3: uint64 = φ(c#0 <- block@6, c#3 <- block@17) (c#3) with c#0 in current definition for 11 blocks
debug: Terminated block@18: // after_for_L14
debug: Sealing block@19: // for_footer_L13
debug: Sealing block@None: // after_for_L13
debug: Created Phi assignment: let range_item%4#2: uint64 = undefined while trying to resolve 'range_item%4' in block@7: // for_header_L14
debug: Added range_item%4#1 to Phi node: let range_item%4#2: uint64 = φ(range_item%4#1 <- block@6) in block@6: // for_body_L13
debug: Created Phi assignment: let range_item%4#3: uint64 = undefined while trying to resolve 'range_item%4' in block@9: // for_header_L15
debug: Added range_item%4#2 to Phi node: let range_item%4#3: uint64 = φ(range_item%4#2 <- block@8) in block@8: // for_body_L14
debug: Created Phi assignment: let range_item%4#4: uint64 = undefined while trying to resolve 'range_item%4' in block@11: // for_header_L16
debug: Added range_item%4#3 to Phi node: let range_item%4#4: uint64 = φ(range_item%4#3 <- block@10) in block@10: // for_body_L15
debug: Added range_item%4#4 to Phi node: let range_item%4#4: uint64 = φ(range_item%4#3 <- block@10, range_item%4#4 <- block@13) in block@13: // for_footer_L16
debug: Replacing trivial Phi node: let range_item%4#4: uint64 = φ(range_item%4#3 <- block@10, range_item%4#4 <- block@13) (range_item%4#4) with range_item%4#3
debug: Deleting Phi assignment: let range_item%4#4: uint64 = φ(range_item%4#3 <- block@10, range_item%4#4 <- block@13)
debug: Replaced trivial Phi node: let range_item%4#4: uint64 = φ(range_item%4#3 <- block@10, range_item%4#4 <- block@13) (range_item%4#4) with range_item%4#3 in current definition for 3 blocks
debug: Added range_item%4#3 to Phi node: let range_item%4#3: uint64 = φ(range_item%4#2 <- block@8, range_item%4#3 <- block@15) in block@15: // for_footer_L15
debug: Replacing trivial Phi node: let range_item%4#3: uint64 = φ(range_item%4#2 <- block@8, range_item%4#3 <- block@15) (range_item%4#3) with range_item%4#2
debug: Deleting Phi assignment: let range_item%4#3: uint64 = φ(range_item%4#2 <- block@8, range_item%4#3 <- block@15)
debug: Replaced trivial Phi node: let range_item%4#3: uint64 = φ(range_item%4#2 <- block@8, range_item%4#3 <- block@15) (range_item%4#3) with range_item%4#2 in current definition for 7 blocks
debug: Added range_item%4#2 to Phi node: let range_item%4#2: uint64 = φ(range_item%4#1 <- block@6, range_item%4#2 <- block@17) in block@17: // for_footer_L14
debug: Replacing trivial Phi node: let range_item%4#2: uint64 = φ(range_item%4#1 <- block@6, range_item%4#2 <- block@17) (range_item%4#2) with range_item%4#1
debug: Deleting Phi assignment: let range_item%4#2: uint64 = φ(range_item%4#1 <- block@6, range_item%4#2 <- block@17)
debug: Replaced trivial Phi node: let range_item%4#2: uint64 = φ(range_item%4#1 <- block@6, range_item%4#2 <- block@17) (range_item%4#2) with range_item%4#1 in current definition for 11 blocks
debug: Terminated block@19: // for_footer_L13
debug: Sealing block@5: // for_header_L13
debug: Added range_item%4#0 to Phi node: let range_item%4#1: uint64 = φ(range_item%4#0 <- block@4) in block@4: // for_body_L12
debug: Added range_item%4#5 to Phi node: let range_item%4#1: uint64 = φ(range_item%4#0 <- block@4, range_item%4#5 <- block@19) in block@19: // for_footer_L13
debug: Added n#2 to Phi node: let n#3: uint64 = φ(n#2 <- block@4) in block@4: // for_body_L12
debug: Added n#3 to Phi node: let n#3: uint64 = φ(n#2 <- block@4, n#3 <- block@19) in block@19: // for_footer_L13
debug: Replacing trivial Phi node: let n#3: uint64 = φ(n#2 <- block@4, n#3 <- block@19) (n#3) with n#2
debug: Deleting Phi assignment: let n#3: uint64 = φ(n#2 <- block@4, n#3 <- block@19)
debug: Replaced trivial Phi node: let n#3: uint64 = φ(n#2 <- block@4, n#3 <- block@19) (n#3) with n#2 in current definition for 15 blocks
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@3: // for_header_L12
debug: Created Phi assignment: let x#6: uint64 = undefined while trying to resolve 'x' in block@3: // for_header_L12
debug: Added x#6 to Phi node: let x#5: uint64 = φ(x#6 <- block@4) in block@4: // for_body_L12
debug: Added x#4 to Phi node: let x#5: uint64 = φ(x#6 <- block@4, x#4 <- block@19) in block@19: // for_footer_L13
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@3: // for_header_L12
debug: Created Phi assignment: let a#5: uint64 = undefined while trying to resolve 'a' in block@3: // for_header_L12
debug: Added a#5 to Phi node: let a#4: uint64 = φ(a#5 <- block@4) in block@4: // for_body_L12
debug: Added a#4 to Phi node: let a#4: uint64 = φ(a#5 <- block@4, a#4 <- block@19) in block@19: // for_footer_L13
debug: Replacing trivial Phi node: let a#4: uint64 = φ(a#5 <- block@4, a#4 <- block@19) (a#4) with a#5
debug: Deleting Phi assignment: let a#4: uint64 = φ(a#5 <- block@4, a#4 <- block@19)
debug: Replaced trivial Phi node: let a#4: uint64 = φ(a#5 <- block@4, a#4 <- block@19) (a#4) with a#5 in current definition for 15 blocks
debug: Added b#0 to Phi node: let b#4: uint64 = φ(b#0 <- block@4) in block@4: // for_body_L12
debug: Added b#4 to Phi node: let b#4: uint64 = φ(b#0 <- block@4, b#4 <- block@19) in block@19: // for_footer_L13
debug: Replacing trivial Phi node: let b#4: uint64 = φ(b#0 <- block@4, b#4 <- block@19) (b#4) with b#0
debug: Deleting Phi assignment: let b#4: uint64 = φ(b#0 <- block@4, b#4 <- block@19)
debug: Replaced trivial Phi node: let b#4: uint64 = φ(b#0 <- block@4, b#4 <- block@19) (b#4) with b#0 in current definition for 15 blocks
debug: Terminated block@20: // after_for_L13
debug: Sealing block@21: // for_footer_L12
debug: Sealing block@None: // after_for_L12
debug: Created Phi assignment: let range_item%2#2: uint64 = undefined while trying to resolve 'range_item%2' in block@5: // for_header_L13
debug: Added range_item%2#1 to Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@4) in block@4: // for_body_L12
debug: Created Phi assignment: let range_item%2#3: uint64 = undefined while trying to resolve 'range_item%2' in block@7: // for_header_L14
debug: Added range_item%2#2 to Phi node: let range_item%2#3: uint64 = φ(range_item%2#2 <- block@6) in block@6: // for_body_L13
debug: Created Phi assignment: let range_item%2#4: uint64 = undefined while trying to resolve 'range_item%2' in block@9: // for_header_L15
debug: Added range_item%2#3 to Phi node: let range_item%2#4: uint64 = φ(range_item%2#3 <- block@8) in block@8: // for_body_L14
debug: Created Phi assignment: let range_item%2#5: uint64 = undefined while trying to resolve 'range_item%2' in block@11: // for_header_L16
debug: Added range_item%2#4 to Phi node: let range_item%2#5: uint64 = φ(range_item%2#4 <- block@10) in block@10: // for_body_L15
debug: Added range_item%2#5 to Phi node: let range_item%2#5: uint64 = φ(range_item%2#4 <- block@10, range_item%2#5 <- block@13) in block@13: // for_footer_L16
debug: Replacing trivial Phi node: let range_item%2#5: uint64 = φ(range_item%2#4 <- block@10, range_item%2#5 <- block@13) (range_item%2#5) with range_item%2#4
debug: Deleting Phi assignment: let range_item%2#5: uint64 = φ(range_item%2#4 <- block@10, range_item%2#5 <- block@13)
debug: Replaced trivial Phi node: let range_item%2#5: uint64 = φ(range_item%2#4 <- block@10, range_item%2#5 <- block@13) (range_item%2#5) with range_item%2#4 in current definition for 3 blocks
debug: Added range_item%2#4 to Phi node: let range_item%2#4: uint64 = φ(range_item%2#3 <- block@8, range_item%2#4 <- block@15) in block@15: // for_footer_L15
debug: Replacing trivial Phi node: let range_item%2#4: uint64 = φ(range_item%2#3 <- block@8, range_item%2#4 <- block@15) (range_item%2#4) with range_item%2#3
debug: Deleting Phi assignment: let range_item%2#4: uint64 = φ(range_item%2#3 <- block@8, range_item%2#4 <- block@15)
debug: Replaced trivial Phi node: let range_item%2#4: uint64 = φ(range_item%2#3 <- block@8, range_item%2#4 <- block@15) (range_item%2#4) with range_item%2#3 in current definition for 7 blocks
debug: Added range_item%2#3 to Phi node: let range_item%2#3: uint64 = φ(range_item%2#2 <- block@6, range_item%2#3 <- block@17) in block@17: // for_footer_L14
debug: Replacing trivial Phi node: let range_item%2#3: uint64 = φ(range_item%2#2 <- block@6, range_item%2#3 <- block@17) (range_item%2#3) with range_item%2#2
debug: Deleting Phi assignment: let range_item%2#3: uint64 = φ(range_item%2#2 <- block@6, range_item%2#3 <- block@17)
debug: Replaced trivial Phi node: let range_item%2#3: uint64 = φ(range_item%2#2 <- block@6, range_item%2#3 <- block@17) (range_item%2#3) with range_item%2#2 in current definition for 11 blocks
debug: Added range_item%2#2 to Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@4, range_item%2#2 <- block@19) in block@19: // for_footer_L13
debug: Replacing trivial Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@4, range_item%2#2 <- block@19) (range_item%2#2) with range_item%2#1
debug: Deleting Phi assignment: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@4, range_item%2#2 <- block@19)
debug: Replaced trivial Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@4, range_item%2#2 <- block@19) (range_item%2#2) with range_item%2#1 in current definition for 15 blocks
debug: Terminated block@21: // for_footer_L12
debug: Sealing block@3: // for_header_L12
debug: Added range_item%2#0 to Phi node: let range_item%2#1: uint64 = φ(range_item%2#0 <- block@2) in block@2: // for_body_L11
debug: Added range_item%2#6 to Phi node: let range_item%2#1: uint64 = φ(range_item%2#0 <- block@2, range_item%2#6 <- block@21) in block@21: // for_footer_L12
debug: Added n#1 to Phi node: let n#2: uint64 = φ(n#1 <- block@2) in block@2: // for_body_L11
debug: Added n#2 to Phi node: let n#2: uint64 = φ(n#1 <- block@2, n#2 <- block@21) in block@21: // for_footer_L12
debug: Replacing trivial Phi node: let n#2: uint64 = φ(n#1 <- block@2, n#2 <- block@21) (n#2) with n#1
debug: Deleting Phi assignment: let n#2: uint64 = φ(n#1 <- block@2, n#2 <- block@21)
debug: Replaced trivial Phi node: let n#2: uint64 = φ(n#1 <- block@2, n#2 <- block@21) (n#2) with n#1 in current definition for 19 blocks
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@1: // for_header_L11
debug: Created Phi assignment: let x#7: uint64 = undefined while trying to resolve 'x' in block@1: // for_header_L11
debug: Added x#7 to Phi node: let x#6: uint64 = φ(x#7 <- block@2) in block@2: // for_body_L11
debug: Added x#5 to Phi node: let x#6: uint64 = φ(x#7 <- block@2, x#5 <- block@21) in block@21: // for_footer_L12
debug: Added a#0 to Phi node: let a#5: uint64 = φ(a#0 <- block@2) in block@2: // for_body_L11
debug: Added a#5 to Phi node: let a#5: uint64 = φ(a#0 <- block@2, a#5 <- block@21) in block@21: // for_footer_L12
debug: Replacing trivial Phi node: let a#5: uint64 = φ(a#0 <- block@2, a#5 <- block@21) (a#5) with a#0
debug: Deleting Phi assignment: let a#5: uint64 = φ(a#0 <- block@2, a#5 <- block@21)
debug: Replaced trivial Phi node: let a#5: uint64 = φ(a#0 <- block@2, a#5 <- block@21) (a#5) with a#0 in current definition for 19 blocks
debug: Terminated block@22: // after_for_L12
debug: Sealing block@23: // for_footer_L11
debug: Sealing block@None: // after_for_L11
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@3: // for_header_L12
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@2) in block@2: // for_body_L11
debug: Created Phi assignment: let range_item%0#3: uint64 = undefined while trying to resolve 'range_item%0' in block@5: // for_header_L13
debug: Added range_item%0#2 to Phi node: let range_item%0#3: uint64 = φ(range_item%0#2 <- block@4) in block@4: // for_body_L12
debug: Created Phi assignment: let range_item%0#4: uint64 = undefined while trying to resolve 'range_item%0' in block@7: // for_header_L14
debug: Added range_item%0#3 to Phi node: let range_item%0#4: uint64 = φ(range_item%0#3 <- block@6) in block@6: // for_body_L13
debug: Created Phi assignment: let range_item%0#5: uint64 = undefined while trying to resolve 'range_item%0' in block@9: // for_header_L15
debug: Added range_item%0#4 to Phi node: let range_item%0#5: uint64 = φ(range_item%0#4 <- block@8) in block@8: // for_body_L14
debug: Created Phi assignment: let range_item%0#6: uint64 = undefined while trying to resolve 'range_item%0' in block@11: // for_header_L16
debug: Added range_item%0#5 to Phi node: let range_item%0#6: uint64 = φ(range_item%0#5 <- block@10) in block@10: // for_body_L15
debug: Added range_item%0#6 to Phi node: let range_item%0#6: uint64 = φ(range_item%0#5 <- block@10, range_item%0#6 <- block@13) in block@13: // for_footer_L16
debug: Replacing trivial Phi node: let range_item%0#6: uint64 = φ(range_item%0#5 <- block@10, range_item%0#6 <- block@13) (range_item%0#6) with range_item%0#5
debug: Deleting Phi assignment: let range_item%0#6: uint64 = φ(range_item%0#5 <- block@10, range_item%0#6 <- block@13)
debug: Replaced trivial Phi node: let range_item%0#6: uint64 = φ(range_item%0#5 <- block@10, range_item%0#6 <- block@13) (range_item%0#6) with range_item%0#5 in current definition for 3 blocks
debug: Added range_item%0#5 to Phi node: let range_item%0#5: uint64 = φ(range_item%0#4 <- block@8, range_item%0#5 <- block@15) in block@15: // for_footer_L15
debug: Replacing trivial Phi node: let range_item%0#5: uint64 = φ(range_item%0#4 <- block@8, range_item%0#5 <- block@15) (range_item%0#5) with range_item%0#4
debug: Deleting Phi assignment: let range_item%0#5: uint64 = φ(range_item%0#4 <- block@8, range_item%0#5 <- block@15)
debug: Replaced trivial Phi node: let range_item%0#5: uint64 = φ(range_item%0#4 <- block@8, range_item%0#5 <- block@15) (range_item%0#5) with range_item%0#4 in current definition for 7 blocks
debug: Added range_item%0#4 to Phi node: let range_item%0#4: uint64 = φ(range_item%0#3 <- block@6, range_item%0#4 <- block@17) in block@17: // for_footer_L14
debug: Replacing trivial Phi node: let range_item%0#4: uint64 = φ(range_item%0#3 <- block@6, range_item%0#4 <- block@17) (range_item%0#4) with range_item%0#3
debug: Deleting Phi assignment: let range_item%0#4: uint64 = φ(range_item%0#3 <- block@6, range_item%0#4 <- block@17)
debug: Replaced trivial Phi node: let range_item%0#4: uint64 = φ(range_item%0#3 <- block@6, range_item%0#4 <- block@17) (range_item%0#4) with range_item%0#3 in current definition for 11 blocks
debug: Added range_item%0#3 to Phi node: let range_item%0#3: uint64 = φ(range_item%0#2 <- block@4, range_item%0#3 <- block@19) in block@19: // for_footer_L13
debug: Replacing trivial Phi node: let range_item%0#3: uint64 = φ(range_item%0#2 <- block@4, range_item%0#3 <- block@19) (range_item%0#3) with range_item%0#2
debug: Deleting Phi assignment: let range_item%0#3: uint64 = φ(range_item%0#2 <- block@4, range_item%0#3 <- block@19)
debug: Replaced trivial Phi node: let range_item%0#3: uint64 = φ(range_item%0#2 <- block@4, range_item%0#3 <- block@19) (range_item%0#3) with range_item%0#2 in current definition for 15 blocks
debug: Added range_item%0#2 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@2, range_item%0#2 <- block@21) in block@21: // for_footer_L12
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@2, range_item%0#2 <- block@21) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@2, range_item%0#2 <- block@21)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@2, range_item%0#2 <- block@21) (range_item%0#2) with range_item%0#1 in current definition for 19 blocks
debug: Terminated block@23: // for_footer_L11
debug: Sealing block@1: // for_header_L11
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L7
debug: Added range_item%0#7 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#7 <- block@23) in block@23: // for_footer_L11
debug: Added n#0 to Phi node: let n#1: uint64 = φ(n#0 <- block@0) in block@0: // L7
debug: Added n#1 to Phi node: let n#1: uint64 = φ(n#0 <- block@0, n#1 <- block@23) in block@23: // for_footer_L11
debug: Replacing trivial Phi node: let n#1: uint64 = φ(n#0 <- block@0, n#1 <- block@23) (n#1) with n#0
debug: Deleting Phi assignment: let n#1: uint64 = φ(n#0 <- block@0, n#1 <- block@23)
debug: Replaced trivial Phi node: let n#1: uint64 = φ(n#0 <- block@0, n#1 <- block@23) (n#1) with n#0 in current definition for 23 blocks
debug: Added x#0 to Phi node: let x#7: uint64 = φ(x#0 <- block@0) in block@0: // L7
debug: Added x#6 to Phi node: let x#7: uint64 = φ(x#0 <- block@0, x#6 <- block@23) in block@23: // for_footer_L11
debug: Terminated block@24: // after_for_L11
debug: Looking for 'range_item%18' in an unsealed block creating an incomplete Phi: block@25: // for_header_L25
debug: Created Phi assignment: let range_item%18#1: uint64 = undefined while trying to resolve 'range_item%18' in block@25: // for_header_L25
debug: Terminated block@25: // for_header_L25
debug: Sealing block@None: // for_body_L25
debug: Looking for 'range_index%19' in an unsealed block creating an incomplete Phi: block@25: // for_header_L25
debug: Created Phi assignment: let range_index%19#1: uint64 = undefined while trying to resolve 'range_index%19' in block@25: // for_header_L25
debug: Looking for 'y' in an unsealed block creating an incomplete Phi: block@25: // for_header_L25
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@25: // for_header_L25
debug: Terminated block@26: // for_body_L25
debug: Sealing block@27: // for_footer_L25
debug: Sealing block@None: // after_for_L25
debug: Terminated block@27: // for_footer_L25
debug: Sealing block@25: // for_header_L25
debug: Added range_item%18#0 to Phi node: let range_item%18#1: uint64 = φ(range_item%18#0 <- block@24) in block@24: // after_for_L11
debug: Added range_item%18#2 to Phi node: let range_item%18#1: uint64 = φ(range_item%18#0 <- block@24, range_item%18#2 <- block@27) in block@27: // for_footer_L25
debug: Added range_index%19#0 to Phi node: let range_index%19#1: uint64 = φ(range_index%19#0 <- block@24) in block@24: // after_for_L11
debug: Added range_index%19#2 to Phi node: let range_index%19#1: uint64 = φ(range_index%19#0 <- block@24, range_index%19#2 <- block@27) in block@27: // for_footer_L25
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@24) in block@24: // after_for_L11
debug: Added y#2 to Phi node: let y#1: uint64 = φ(y#0 <- block@24, y#2 <- block@27) in block@27: // for_footer_L25
debug: Created Phi assignment: let x#8: uint64 = undefined while trying to resolve 'x' in block@25: // for_header_L25
debug: Added x#7 to Phi node: let x#8: uint64 = φ(x#7 <- block@24) in block@24: // after_for_L11
debug: Added x#8 to Phi node: let x#8: uint64 = φ(x#7 <- block@24, x#8 <- block@27) in block@27: // for_footer_L25
debug: Replacing trivial Phi node: let x#8: uint64 = φ(x#7 <- block@24, x#8 <- block@27) (x#8) with x#7
debug: Deleting Phi assignment: let x#8: uint64 = φ(x#7 <- block@24, x#8 <- block@27)
debug: Replaced trivial Phi node: let x#8: uint64 = φ(x#7 <- block@24, x#8 <- block@27) (x#8) with x#7 in current definition for 3 blocks
debug: Terminated block@28: // after_for_L25
debug: Sealing block@0: // L31
debug: Terminated block@0: // L31
debug: Output IR to nested_loops/out/contract_Nested.ssa.ir
info: Optimizing test_cases.nested_loops.contract.Nested at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.nested_loops.contract.Nested.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: range_item%0#1, a#0
debug: Replacing {range_item%0#1} with a#0 made 3 modifications
debug: Found equivalence set: range_item%18#1, item#0
debug: Replacing {range_item%18#1} with item#0 made 3 modifications
debug: Found equivalence set: range_index%19#1, index#0
debug: Replacing {range_index%19#1} with index#0 made 2 modifications
debug: Found equivalence set: range_item%2#1, b#0
debug: Replacing {range_item%2#1} with b#0 made 3 modifications
debug: Found equivalence set: range_item%4#1, c#0
debug: Replacing {range_item%4#1} with c#0 made 3 modifications
debug: Found equivalence set: range_item%6#1, d#0
debug: Replacing {range_item%6#1} with d#0 made 3 modifications
debug: Found equivalence set: range_item%8#1, e#0
debug: Replacing {range_item%8#1} with e#0 made 3 modifications
debug: Found equivalence set: range_item%10#1, f#0
debug: Replacing {range_item%10#1} with f#0 made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable n#0
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@13: // for_footer_L16 with block@12: // for_body_L16 in block@11: // for_header_L16
debug: Merged linear block@13: // for_footer_L16 into block@12: // for_body_L16
debug: Replaced predecessor block@15: // for_footer_L15 with block@14: // after_for_L16 in block@9: // for_header_L15
debug: Merged linear block@15: // for_footer_L15 into block@14: // after_for_L16
debug: Replaced predecessor block@17: // for_footer_L14 with block@16: // after_for_L15 in block@7: // for_header_L14
debug: Merged linear block@17: // for_footer_L14 into block@16: // after_for_L15
debug: Replaced predecessor block@19: // for_footer_L13 with block@18: // after_for_L14 in block@5: // for_header_L13
debug: Merged linear block@19: // for_footer_L13 into block@18: // after_for_L14
debug: Replaced predecessor block@21: // for_footer_L12 with block@20: // after_for_L13 in block@3: // for_header_L12
debug: Merged linear block@21: // for_footer_L12 into block@20: // after_for_L13
debug: Replaced predecessor block@23: // for_footer_L11 with block@22: // after_for_L12 in block@1: // for_header_L11
debug: Merged linear block@23: // for_footer_L11 into block@22: // after_for_L12
debug: Replaced predecessor block@27: // for_footer_L25 with block@26: // for_body_L25 in block@25: // for_header_L25
debug: Merged linear block@27: // for_footer_L25 into block@26: // for_body_L25
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.nested_loops.contract.Nested.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to nested_loops/out/contract_Nested.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.nested_loops.contract.Nested.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.nested_loops.contract.Nested.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Conditional Branches
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to nested_loops/out/contract_Nested.cssa.ir
debug: Removing Phis from test_cases.nested_loops.contract.Nested.approval_program
debug: Removing Phis from test_cases.nested_loops.contract.Nested.clear_state_program
debug: Output IR to nested_loops/out/contract_Nested.post_ssa.ir
debug: Sequentializing parallel copies in test_cases.nested_loops.contract.Nested.approval_program
debug: loc: {x#10=None, a#7=None, x#0=x#0, range_item%0#0=range_item%0#0}
debug: pred: {x#10=x#0, a#7=range_item%0#0}
debug: ready: x#10, a#7
debug: to_do: x#10, a#7
debug: * avail a#7
debug: * avail range_item%0#0
debug: * avail x#10
debug: * avail x#0
debug: * to_do a#7
debug: * to_do x#10
debug: loc: {x#7=None, a#0=None, x#10=x#10, a#7=a#7}
debug: pred: {x#7=x#10, a#0=a#7}
debug: ready: x#7, a#0
debug: to_do: x#7, a#0
debug: * avail a#0
debug: * avail a#7
debug: * avail x#7
debug: * avail x#10
debug: * to_do a#0
debug: * to_do x#7
debug: loc: {x#13=None, b#1=None, x#7=x#7, range_item%2#0=range_item%2#0}
debug: pred: {x#13=x#7, b#1=range_item%2#0}
debug: ready: x#13, b#1
debug: to_do: x#13, b#1
debug: * avail b#1
debug: * avail range_item%2#0
debug: * avail x#13
debug: * avail x#7
debug: * to_do b#1
debug: * to_do x#13
debug: loc: {x#6=None, b#0=None, x#13=x#13, b#1=b#1}
debug: pred: {x#6=x#13, b#0=b#1}
debug: ready: x#6, b#0
debug: to_do: x#6, b#0
debug: * avail b#0
debug: * avail b#1
debug: * avail x#6
debug: * avail x#13
debug: * to_do b#0
debug: * to_do x#6
debug: loc: {x#16=None, c#1=None, x#6=x#6, range_item%4#0=range_item%4#0}
debug: pred: {x#16=x#6, c#1=range_item%4#0}
debug: ready: x#16, c#1
debug: to_do: x#16, c#1
debug: * avail c#1
debug: * avail range_item%4#0
debug: * avail x#16
debug: * avail x#6
debug: * to_do c#1
debug: * to_do x#16
debug: loc: {x#5=None, c#0=None, x#16=x#16, c#1=c#1}
debug: pred: {x#5=x#16, c#0=c#1}
debug: ready: x#5, c#0
debug: to_do: x#5, c#0
debug: * avail c#0
debug: * avail c#1
debug: * avail x#5
debug: * avail x#16
debug: * to_do c#0
debug: * to_do x#5
debug: loc: {x#19=None, d#1=None, x#5=x#5, range_item%6#0=range_item%6#0}
debug: pred: {x#19=x#5, d#1=range_item%6#0}
debug: ready: x#19, d#1
debug: to_do: x#19, d#1
debug: * avail d#1
debug: * avail range_item%6#0
debug: * avail x#19
debug: * avail x#5
debug: * to_do d#1
debug: * to_do x#19
debug: loc: {x#4=None, d#0=None, x#19=x#19, d#1=d#1}
debug: pred: {x#4=x#19, d#0=d#1}
debug: ready: x#4, d#0
debug: to_do: x#4, d#0
debug: * avail d#0
debug: * avail d#1
debug: * avail x#4
debug: * avail x#19
debug: * to_do d#0
debug: * to_do x#4
debug: loc: {x#22=None, e#1=None, x#4=x#4, range_item%8#0=range_item%8#0}
debug: pred: {x#22=x#4, e#1=range_item%8#0}
debug: ready: x#22, e#1
debug: to_do: x#22, e#1
debug: * avail e#1
debug: * avail range_item%8#0
debug: * avail x#22
debug: * avail x#4
debug: * to_do e#1
debug: * to_do x#22
debug: loc: {x#3=None, e#0=None, x#22=x#22, e#1=e#1}
debug: pred: {x#3=x#22, e#0=e#1}
debug: ready: x#3, e#0
debug: to_do: x#3, e#0
debug: * avail e#0
debug: * avail e#1
debug: * avail x#3
debug: * avail x#22
debug: * to_do e#0
debug: * to_do x#3
debug: loc: {x#25=None, f#1=None, x#3=x#3, range_item%10#0=range_item%10#0}
debug: pred: {x#25=x#3, f#1=range_item%10#0}
debug: ready: x#25, f#1
debug: to_do: x#25, f#1
debug: * avail f#1
debug: * avail range_item%10#0
debug: * avail x#25
debug: * avail x#3
debug: * to_do f#1
debug: * to_do x#25
debug: loc: {x#1=None, f#0=None, x#25=x#25, f#1=f#1}
debug: pred: {x#1=x#25, f#0=f#1}
debug: ready: x#1, f#0
debug: to_do: x#1, f#0
debug: * avail f#0
debug: * avail f#1
debug: * avail x#1
debug: * avail x#25
debug: * to_do f#0
debug: * to_do x#1
debug: loc: {x#25=None, f#1=None, x#2=x#2, range_item%10#2=range_item%10#2}
debug: pred: {x#25=x#2, f#1=range_item%10#2}
debug: ready: x#25, f#1
debug: to_do: x#25, f#1
debug: * avail f#1
debug: * avail range_item%10#2
debug: * avail x#25
debug: * avail x#2
debug: * to_do f#1
debug: * to_do x#25
debug: loc: {x#22=None, e#1=None, x#1=x#1, range_item%8#3=range_item%8#3}
debug: pred: {x#22=x#1, e#1=range_item%8#3}
debug: ready: x#22, e#1
debug: to_do: x#22, e#1
debug: * avail e#1
debug: * avail range_item%8#3
debug: * avail x#22
debug: * avail x#1
debug: * to_do e#1
debug: * to_do x#22
debug: loc: {x#19=None, d#1=None, x#3=x#3, range_item%6#4=range_item%6#4}
debug: pred: {x#19=x#3, d#1=range_item%6#4}
debug: ready: x#19, d#1
debug: to_do: x#19, d#1
debug: * avail d#1
debug: * avail range_item%6#4
debug: * avail x#19
debug: * avail x#3
debug: * to_do d#1
debug: * to_do x#19
debug: loc: {x#16=None, c#1=None, x#4=x#4, range_item%4#5=range_item%4#5}
debug: pred: {x#16=x#4, c#1=range_item%4#5}
debug: ready: x#16, c#1
debug: to_do: x#16, c#1
debug: * avail c#1
debug: * avail range_item%4#5
debug: * avail x#16
debug: * avail x#4
debug: * to_do c#1
debug: * to_do x#16
debug: loc: {x#13=None, b#1=None, x#5=x#5, range_item%2#6=range_item%2#6}
debug: pred: {x#13=x#5, b#1=range_item%2#6}
debug: ready: x#13, b#1
debug: to_do: x#13, b#1
debug: * avail b#1
debug: * avail range_item%2#6
debug: * avail x#13
debug: * avail x#5
debug: * to_do b#1
debug: * to_do x#13
debug: loc: {x#10=None, a#7=None, x#6=x#6, range_item%0#7=range_item%0#7}
debug: pred: {x#10=x#6, a#7=range_item%0#7}
debug: ready: x#10, a#7
debug: to_do: x#10, a#7
debug: * avail a#7
debug: * avail range_item%0#7
debug: * avail x#10
debug: * avail x#6
debug: * to_do a#7
debug: * to_do x#10
debug: loc: {y#5=None, index#1=None, item#1=None, y#0=y#0, range_index%19#0=range_index%19#0, range_item%18#0=range_item%18#0}
debug: pred: {y#5=y#0, index#1=range_index%19#0, item#1=range_item%18#0}
debug: ready: y#5, index#1, item#1
debug: to_do: y#5, index#1, item#1
debug: * avail item#1
debug: * avail range_item%18#0
debug: * avail index#1
debug: * avail range_index%19#0
debug: * avail y#5
debug: * avail y#0
debug: * to_do item#1
debug: * to_do index#1
debug: * to_do y#5
debug: loc: {y#1=None, index#0=None, item#0=None, y#5=y#5, index#1=index#1, item#1=item#1}
debug: pred: {y#1=y#5, index#0=index#1, item#0=item#1}
debug: ready: y#1, index#0, item#0
debug: to_do: y#1, index#0, item#0
debug: * avail item#0
debug: * avail item#1
debug: * avail index#0
debug: * avail index#1
debug: * avail y#1
debug: * avail y#5
debug: * to_do item#0
debug: * to_do index#0
debug: * to_do y#1
debug: loc: {y#5=None, index#1=None, item#1=None, y#2=y#2, range_index%19#2=range_index%19#2, range_item%18#2=range_item%18#2}
debug: pred: {y#5=y#2, index#1=range_index%19#2, item#1=range_item%18#2}
debug: ready: y#5, index#1, item#1
debug: to_do: y#5, index#1, item#1
debug: * avail item#1
debug: * avail range_item%18#2
debug: * avail index#1
debug: * avail range_index%19#2
debug: * avail y#5
debug: * avail y#2
debug: * to_do item#1
debug: * to_do index#1
debug: * to_do y#5
debug: Sequentializing parallel copies in test_cases.nested_loops.contract.Nested.clear_state_program
debug: Output IR to nested_loops/out/contract_Nested.parallel_copies.ir
debug: Coalescing local variables in test_cases.nested_loops.contract.Nested.approval_program using strategy RootOperandGrouping
debug: Coalescing x#0 with [x#10, x#7, x#13, x#6, x#16, x#5, x#19, x#4, x#22, x#3, x#25, x#1, x#2]
debug: Coalescing range_item%0#0 with [range_item%0#7]
debug: Coalescing a#0 with [a#7]
debug: Coalescing range_item%2#0 with [range_item%2#6]
debug: Coalescing b#0 with [b#1]
debug: Coalescing range_item%4#0 with [range_item%4#5]
debug: Coalescing c#0 with [c#1]
debug: Coalescing range_item%6#0 with [range_item%6#4]
debug: Coalescing d#0 with [d#1]
debug: Coalescing range_item%8#0 with [range_item%8#3]
debug: Coalescing e#0 with [e#1]
debug: Coalescing range_item%10#0 with [range_item%10#2]
debug: Coalescing f#0 with [f#1]
debug: Coalescing y#0 with [y#5, y#1, y#2]
debug: Coalescing range_item%18#0 with [range_item%18#2]
debug: Coalescing range_index%19#0 with [range_index%19#2]
debug: Coalescing item#0 with [item#1]
debug: Coalescing index#0 with [index#1]
debug: Coalescing resulted in 87 replacement/s
debug: Coalescing local variables in test_cases.nested_loops.contract.Nested.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to nested_loops/out/contract_Nested.final.ir
debug: Inserted main_block@0.ops[3]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[5]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Inserted main_for_header@1.ops[3]: 'store continue_looping%1#0 to l-stack (copy)'
debug: Replaced main_for_header@1.ops[5]: 'load continue_looping%1#0' with 'load continue_looping%1#0 from l-stack (no copy)'
debug: Inserted main_for_body@2.ops[1]: 'store range_item%2#0 to l-stack (copy)'
debug: Replaced main_for_body@2.ops[3]: 'load range_item%2#0' with 'load range_item%2#0 from l-stack (no copy)'
debug: Inserted main_for_header@3.ops[3]: 'store continue_looping%3#0 to l-stack (copy)'
debug: Replaced main_for_header@3.ops[5]: 'load continue_looping%3#0' with 'load continue_looping%3#0 from l-stack (no copy)'
debug: Inserted main_for_body@4.ops[1]: 'store range_item%4#0 to l-stack (copy)'
debug: Replaced main_for_body@4.ops[3]: 'load range_item%4#0' with 'load range_item%4#0 from l-stack (no copy)'
debug: Inserted main_for_header@5.ops[3]: 'store continue_looping%5#0 to l-stack (copy)'
debug: Replaced main_for_header@5.ops[5]: 'load continue_looping%5#0' with 'load continue_looping%5#0 from l-stack (no copy)'
debug: Inserted main_for_body@6.ops[1]: 'store range_item%6#0 to l-stack (copy)'
debug: Replaced main_for_body@6.ops[3]: 'load range_item%6#0' with 'load range_item%6#0 from l-stack (no copy)'
debug: Inserted main_for_header@7.ops[3]: 'store continue_looping%7#0 to l-stack (copy)'
debug: Replaced main_for_header@7.ops[5]: 'load continue_looping%7#0' with 'load continue_looping%7#0 from l-stack (no copy)'
debug: Inserted main_for_body@8.ops[1]: 'store range_item%8#0 to l-stack (copy)'
debug: Replaced main_for_body@8.ops[3]: 'load range_item%8#0' with 'load range_item%8#0 from l-stack (no copy)'
debug: Inserted main_for_header@9.ops[3]: 'store continue_looping%9#0 to l-stack (copy)'
debug: Replaced main_for_header@9.ops[5]: 'load continue_looping%9#0' with 'load continue_looping%9#0 from l-stack (no copy)'
debug: Inserted main_for_body@10.ops[1]: 'store range_item%10#0 to l-stack (copy)'
debug: Replaced main_for_body@10.ops[3]: 'load range_item%10#0' with 'load range_item%10#0 from l-stack (no copy)'
debug: Inserted main_for_header@11.ops[3]: 'store continue_looping%11#0 to l-stack (copy)'
debug: Replaced main_for_header@11.ops[5]: 'load continue_looping%11#0' with 'load continue_looping%11#0 from l-stack (no copy)'
debug: Inserted main_for_body@12.ops[3]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_for_body@12.ops[5]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_for_body@12.ops[8]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_for_body@12.ops[10]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_for_body@12.ops[13]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_for_body@12.ops[15]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_for_body@12.ops[18]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_for_body@12.ops[20]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_for_body@12.ops[31]: 'store range_item%10#0 to l-stack (copy)'
debug: Replaced main_for_body@12.ops[33]: 'load range_item%10#0' with 'load range_item%10#0 from l-stack (no copy)'
debug: Inserted main_for_body@12.ops[23]: 'store tmp%16#0 to l-stack (copy)'
debug: Replaced main_for_body@12.ops[26]: 'load tmp%16#0' with 'load tmp%16#0 from l-stack (no copy)'
debug: Inserted main_for_body@12.ops[22]: 'store f#0 to l-stack (copy)'
debug: Replaced main_for_body@12.ops[30]: 'load f#0' with 'load f#0 from l-stack (no copy)'
debug: Inserted main_after_for@14.ops[3]: 'store range_item%8#0 to l-stack (copy)'
debug: Replaced main_after_for@14.ops[5]: 'load range_item%8#0' with 'load range_item%8#0 from l-stack (no copy)'
debug: Inserted main_after_for@16.ops[3]: 'store range_item%6#0 to l-stack (copy)'
debug: Replaced main_after_for@16.ops[5]: 'load range_item%6#0' with 'load range_item%6#0 from l-stack (no copy)'
debug: Inserted main_after_for@18.ops[3]: 'store range_item%4#0 to l-stack (copy)'
debug: Replaced main_after_for@18.ops[5]: 'load range_item%4#0' with 'load range_item%4#0 from l-stack (no copy)'
debug: Inserted main_after_for@20.ops[3]: 'store range_item%2#0 to l-stack (copy)'
debug: Replaced main_after_for@20.ops[5]: 'load range_item%2#0' with 'load range_item%2#0 from l-stack (no copy)'
debug: Inserted main_after_for@22.ops[7]: 'store range_item%0#0 to l-stack (copy)'
debug: Replaced main_after_for@22.ops[9]: 'load range_item%0#0' with 'load range_item%0#0 from l-stack (no copy)'
debug: Inserted main_after_for@22.ops[1]: 'store a#0 to l-stack (copy)'
debug: Replaced main_after_for@22.ops[5]: 'load a#0' with 'load a#0 from l-stack (no copy)'
debug: Inserted main_after_for@24.ops[2]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced main_after_for@24.ops[4]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted main_after_for@24.ops[9]: 'store range_item%18#0 to l-stack (copy)'
debug: Replaced main_after_for@24.ops[13]: 'load range_item%18#0' with 'load range_item%18#0 from l-stack (no copy)'
debug: Inserted main_after_for@24.ops[12]: 'store range_index%19#0 to l-stack (copy)'
debug: Replaced main_after_for@24.ops[16]: 'load range_index%19#0' with 'load range_index%19#0 from l-stack (no copy)'
debug: Inserted main_for_header@25.ops[3]: 'store continue_looping%20#0 to l-stack (copy)'
debug: Replaced main_for_header@25.ops[5]: 'load continue_looping%20#0' with 'load continue_looping%20#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[3]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[6]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[16]: 'store range_index%19#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[20]: 'load range_index%19#0' with 'load range_index%19#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[12]: 'store range_item%18#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[19]: 'load range_item%18#0' with 'load range_item%18#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[1]: 'store item#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[10]: 'load item#0' with 'load item#0 from l-stack (no copy)'
debug: Inserted main_for_body@26.ops[3]: 'store index#0 to l-stack (copy)'
debug: Replaced main_for_body@26.ops[16]: 'load index#0' with 'load index#0 from l-stack (no copy)'
debug: Inserted main_after_for@28.ops[2]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_after_for@28.ops[4]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Found 14 edge set/s for test_cases.nested_loops.contract.Nested.approval_program
debug: test_cases.nested_loops.contract.Nested.approval_program f-stack entry: ['b#0', 'c#0', 'd#0', 'e#0', 'f#0', 'index#0', 'item#0', 'y#0']
debug: test_cases.nested_loops.contract.Nested.approval_program f-stack on first store: ['x#0', 'a#0']
info: Writing nested_loops/out/contract.approval.teal
info: Writing nested_loops/out/contract.approval.debug.teal
info: Writing nested_loops/out/contract.clear.teal
info: Writing nested_loops/out/contract.clear.debug.teal