debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=True, output_arc56=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, output_teal_intermediates=False, debug_level=1, optimization_level=1, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, _disabled_optimizations=(), paths=['nested_loops'], output_awst=True, output_awst_json=False, output_client=True, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
info: writing nested_loops/out/module.awst
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.nested_loops.contract.Nested.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.nested_loops.contract.Nested.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let n#1: uint64 = undefined while trying to resolve 'n' in block@1
debug: Terminated block@2
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let b#1: uint64 = undefined while trying to resolve 'b' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let n#2: uint64 = undefined while trying to resolve 'n' in block@3
debug: Terminated block@4
debug: Looking for 'c' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let c#1: uint64 = undefined while trying to resolve 'c' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let n#3: uint64 = undefined while trying to resolve 'n' in block@5
debug: Terminated block@6
debug: Looking for 'd' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let d#1: uint64 = undefined while trying to resolve 'd' in block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let n#4: uint64 = undefined while trying to resolve 'n' in block@7
debug: Terminated block@8
debug: Looking for 'e' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let e#1: uint64 = undefined while trying to resolve 'e' in block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let n#5: uint64 = undefined while trying to resolve 'n' in block@9
debug: Terminated block@10
debug: Looking for 'f' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let f#1: uint64 = undefined while trying to resolve 'f' in block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@11
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@11
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@11
debug: Looking for 'c' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let c#2: uint64 = undefined while trying to resolve 'c' in block@11
debug: Looking for 'd' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let d#2: uint64 = undefined while trying to resolve 'd' in block@11
debug: Looking for 'e' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let e#2: uint64 = undefined while trying to resolve 'e' in block@11
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@11
debug: Added f#0 to Phi node: let f#1: uint64 = φ(f#0 <- block@10) in block@10
debug: Added f#2 to Phi node: let f#1: uint64 = φ(f#0 <- block@10, f#2 <- block@13) in block@13
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let x#3: uint64 = undefined while trying to resolve 'x' in block@9
debug: Added x#3 to Phi node: let x#1: uint64 = φ(x#3 <- block@10) in block@10
debug: Added x#2 to Phi node: let x#1: uint64 = φ(x#3 <- block@10, x#2 <- block@13) in block@13
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@9
debug: Added a#3 to Phi node: let a#2: uint64 = φ(a#3 <- block@10) in block@10
debug: Added a#2 to Phi node: let a#2: uint64 = φ(a#3 <- block@10, a#2 <- block@13) in block@13
debug: Replacing trivial Phi node: let a#2: uint64 = φ(a#3 <- block@10, a#2 <- block@13) (a#2) with a#3
debug: Deleting Phi assignment: let a#2: uint64 = φ(a#3 <- block@10, a#2 <- block@13)
debug: Replaced trivial Phi node: let a#2: uint64 = φ(a#3 <- block@10, a#2 <- block@13) (a#2) with a#3 in current definition for 3 blocks
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let b#3: uint64 = undefined while trying to resolve 'b' in block@9
debug: Added b#3 to Phi node: let b#2: uint64 = φ(b#3 <- block@10) in block@10
debug: Added b#2 to Phi node: let b#2: uint64 = φ(b#3 <- block@10, b#2 <- block@13) in block@13
debug: Replacing trivial Phi node: let b#2: uint64 = φ(b#3 <- block@10, b#2 <- block@13) (b#2) with b#3
debug: Deleting Phi assignment: let b#2: uint64 = φ(b#3 <- block@10, b#2 <- block@13)
debug: Replaced trivial Phi node: let b#2: uint64 = φ(b#3 <- block@10, b#2 <- block@13) (b#2) with b#3 in current definition for 3 blocks
debug: Looking for 'c' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let c#3: uint64 = undefined while trying to resolve 'c' in block@9
debug: Added c#3 to Phi node: let c#2: uint64 = φ(c#3 <- block@10) in block@10
debug: Added c#2 to Phi node: let c#2: uint64 = φ(c#3 <- block@10, c#2 <- block@13) in block@13
debug: Replacing trivial Phi node: let c#2: uint64 = φ(c#3 <- block@10, c#2 <- block@13) (c#2) with c#3
debug: Deleting Phi assignment: let c#2: uint64 = φ(c#3 <- block@10, c#2 <- block@13)
debug: Replaced trivial Phi node: let c#2: uint64 = φ(c#3 <- block@10, c#2 <- block@13) (c#2) with c#3 in current definition for 3 blocks
debug: Looking for 'd' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let d#3: uint64 = undefined while trying to resolve 'd' in block@9
debug: Added d#3 to Phi node: let d#2: uint64 = φ(d#3 <- block@10) in block@10
debug: Added d#2 to Phi node: let d#2: uint64 = φ(d#3 <- block@10, d#2 <- block@13) in block@13
debug: Replacing trivial Phi node: let d#2: uint64 = φ(d#3 <- block@10, d#2 <- block@13) (d#2) with d#3
debug: Deleting Phi assignment: let d#2: uint64 = φ(d#3 <- block@10, d#2 <- block@13)
debug: Replaced trivial Phi node: let d#2: uint64 = φ(d#3 <- block@10, d#2 <- block@13) (d#2) with d#3 in current definition for 3 blocks
debug: Added e#1 to Phi node: let e#2: uint64 = φ(e#1 <- block@10) in block@10
debug: Added e#2 to Phi node: let e#2: uint64 = φ(e#1 <- block@10, e#2 <- block@13) in block@13
debug: Replacing trivial Phi node: let e#2: uint64 = φ(e#1 <- block@10, e#2 <- block@13) (e#2) with e#1
debug: Deleting Phi assignment: let e#2: uint64 = φ(e#1 <- block@10, e#2 <- block@13)
debug: Replaced trivial Phi node: let e#2: uint64 = φ(e#1 <- block@10, e#2 <- block@13) (e#2) with e#1 in current definition for 3 blocks
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@9
debug: Added e#0 to Phi node: let e#1: uint64 = φ(e#0 <- block@8) in block@8
debug: Added e#3 to Phi node: let e#1: uint64 = φ(e#0 <- block@8, e#3 <- block@15) in block@15
debug: Added n#4 to Phi node: let n#5: uint64 = φ(n#4 <- block@8) in block@8
debug: Created Phi assignment: let n#6: uint64 = undefined while trying to resolve 'n' in block@11
debug: Added n#5 to Phi node: let n#6: uint64 = φ(n#5 <- block@10) in block@10
debug: Added n#6 to Phi node: let n#6: uint64 = φ(n#5 <- block@10, n#6 <- block@13) in block@13
debug: Replacing trivial Phi node: let n#6: uint64 = φ(n#5 <- block@10, n#6 <- block@13) (n#6) with n#5
debug: Deleting Phi assignment: let n#6: uint64 = φ(n#5 <- block@10, n#6 <- block@13)
debug: Replaced trivial Phi node: let n#6: uint64 = φ(n#5 <- block@10, n#6 <- block@13) (n#6) with n#5 in current definition for 3 blocks
debug: Added n#5 to Phi node: let n#5: uint64 = φ(n#4 <- block@8, n#5 <- block@15) in block@15
debug: Replacing trivial Phi node: let n#5: uint64 = φ(n#4 <- block@8, n#5 <- block@15) (n#5) with n#4
debug: Deleting Phi assignment: let n#5: uint64 = φ(n#4 <- block@8, n#5 <- block@15)
debug: Replaced trivial Phi node: let n#5: uint64 = φ(n#4 <- block@8, n#5 <- block@15) (n#5) with n#4 in current definition for 7 blocks
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let x#4: uint64 = undefined while trying to resolve 'x' in block@7
debug: Added x#4 to Phi node: let x#3: uint64 = φ(x#4 <- block@8) in block@8
debug: Added x#1 to Phi node: let x#3: uint64 = φ(x#4 <- block@8, x#1 <- block@15) in block@15
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let a#4: uint64 = undefined while trying to resolve 'a' in block@7
debug: Added a#4 to Phi node: let a#3: uint64 = φ(a#4 <- block@8) in block@8
debug: Added a#3 to Phi node: let a#3: uint64 = φ(a#4 <- block@8, a#3 <- block@15) in block@15
debug: Replacing trivial Phi node: let a#3: uint64 = φ(a#4 <- block@8, a#3 <- block@15) (a#3) with a#4
debug: Deleting Phi assignment: let a#3: uint64 = φ(a#4 <- block@8, a#3 <- block@15)
debug: Replaced trivial Phi node: let a#3: uint64 = φ(a#4 <- block@8, a#3 <- block@15) (a#3) with a#4 in current definition for 7 blocks
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let b#4: uint64 = undefined while trying to resolve 'b' in block@7
debug: Added b#4 to Phi node: let b#3: uint64 = φ(b#4 <- block@8) in block@8
debug: Added b#3 to Phi node: let b#3: uint64 = φ(b#4 <- block@8, b#3 <- block@15) in block@15
debug: Replacing trivial Phi node: let b#3: uint64 = φ(b#4 <- block@8, b#3 <- block@15) (b#3) with b#4
debug: Deleting Phi assignment: let b#3: uint64 = φ(b#4 <- block@8, b#3 <- block@15)
debug: Replaced trivial Phi node: let b#3: uint64 = φ(b#4 <- block@8, b#3 <- block@15) (b#3) with b#4 in current definition for 7 blocks
debug: Looking for 'c' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let c#4: uint64 = undefined while trying to resolve 'c' in block@7
debug: Added c#4 to Phi node: let c#3: uint64 = φ(c#4 <- block@8) in block@8
debug: Added c#3 to Phi node: let c#3: uint64 = φ(c#4 <- block@8, c#3 <- block@15) in block@15
debug: Replacing trivial Phi node: let c#3: uint64 = φ(c#4 <- block@8, c#3 <- block@15) (c#3) with c#4
debug: Deleting Phi assignment: let c#3: uint64 = φ(c#4 <- block@8, c#3 <- block@15)
debug: Replaced trivial Phi node: let c#3: uint64 = φ(c#4 <- block@8, c#3 <- block@15) (c#3) with c#4 in current definition for 7 blocks
debug: Added d#1 to Phi node: let d#3: uint64 = φ(d#1 <- block@8) in block@8
debug: Added d#3 to Phi node: let d#3: uint64 = φ(d#1 <- block@8, d#3 <- block@15) in block@15
debug: Replacing trivial Phi node: let d#3: uint64 = φ(d#1 <- block@8, d#3 <- block@15) (d#3) with d#1
debug: Deleting Phi assignment: let d#3: uint64 = φ(d#1 <- block@8, d#3 <- block@15)
debug: Replaced trivial Phi node: let d#3: uint64 = φ(d#1 <- block@8, d#3 <- block@15) (d#3) with d#1 in current definition for 7 blocks
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@7
debug: Added d#0 to Phi node: let d#1: uint64 = φ(d#0 <- block@6) in block@6
debug: Added d#4 to Phi node: let d#1: uint64 = φ(d#0 <- block@6, d#4 <- block@17) in block@17
debug: Added n#3 to Phi node: let n#4: uint64 = φ(n#3 <- block@6) in block@6
debug: Added n#4 to Phi node: let n#4: uint64 = φ(n#3 <- block@6, n#4 <- block@17) in block@17
debug: Replacing trivial Phi node: let n#4: uint64 = φ(n#3 <- block@6, n#4 <- block@17) (n#4) with n#3
debug: Deleting Phi assignment: let n#4: uint64 = φ(n#3 <- block@6, n#4 <- block@17)
debug: Replaced trivial Phi node: let n#4: uint64 = φ(n#3 <- block@6, n#4 <- block@17) (n#4) with n#3 in current definition for 11 blocks
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let x#5: uint64 = undefined while trying to resolve 'x' in block@5
debug: Added x#5 to Phi node: let x#4: uint64 = φ(x#5 <- block@6) in block@6
debug: Added x#3 to Phi node: let x#4: uint64 = φ(x#5 <- block@6, x#3 <- block@17) in block@17
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let a#5: uint64 = undefined while trying to resolve 'a' in block@5
debug: Added a#5 to Phi node: let a#4: uint64 = φ(a#5 <- block@6) in block@6
debug: Added a#4 to Phi node: let a#4: uint64 = φ(a#5 <- block@6, a#4 <- block@17) in block@17
debug: Replacing trivial Phi node: let a#4: uint64 = φ(a#5 <- block@6, a#4 <- block@17) (a#4) with a#5
debug: Deleting Phi assignment: let a#4: uint64 = φ(a#5 <- block@6, a#4 <- block@17)
debug: Replaced trivial Phi node: let a#4: uint64 = φ(a#5 <- block@6, a#4 <- block@17) (a#4) with a#5 in current definition for 11 blocks
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let b#5: uint64 = undefined while trying to resolve 'b' in block@5
debug: Added b#5 to Phi node: let b#4: uint64 = φ(b#5 <- block@6) in block@6
debug: Added b#4 to Phi node: let b#4: uint64 = φ(b#5 <- block@6, b#4 <- block@17) in block@17
debug: Replacing trivial Phi node: let b#4: uint64 = φ(b#5 <- block@6, b#4 <- block@17) (b#4) with b#5
debug: Deleting Phi assignment: let b#4: uint64 = φ(b#5 <- block@6, b#4 <- block@17)
debug: Replaced trivial Phi node: let b#4: uint64 = φ(b#5 <- block@6, b#4 <- block@17) (b#4) with b#5 in current definition for 11 blocks
debug: Added c#1 to Phi node: let c#4: uint64 = φ(c#1 <- block@6) in block@6
debug: Added c#4 to Phi node: let c#4: uint64 = φ(c#1 <- block@6, c#4 <- block@17) in block@17
debug: Replacing trivial Phi node: let c#4: uint64 = φ(c#1 <- block@6, c#4 <- block@17) (c#4) with c#1
debug: Deleting Phi assignment: let c#4: uint64 = φ(c#1 <- block@6, c#4 <- block@17)
debug: Replaced trivial Phi node: let c#4: uint64 = φ(c#1 <- block@6, c#4 <- block@17) (c#4) with c#1 in current definition for 11 blocks
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@5
debug: Added c#0 to Phi node: let c#1: uint64 = φ(c#0 <- block@4) in block@4
debug: Added c#5 to Phi node: let c#1: uint64 = φ(c#0 <- block@4, c#5 <- block@19) in block@19
debug: Added n#2 to Phi node: let n#3: uint64 = φ(n#2 <- block@4) in block@4
debug: Added n#3 to Phi node: let n#3: uint64 = φ(n#2 <- block@4, n#3 <- block@19) in block@19
debug: Replacing trivial Phi node: let n#3: uint64 = φ(n#2 <- block@4, n#3 <- block@19) (n#3) with n#2
debug: Deleting Phi assignment: let n#3: uint64 = φ(n#2 <- block@4, n#3 <- block@19)
debug: Replaced trivial Phi node: let n#3: uint64 = φ(n#2 <- block@4, n#3 <- block@19) (n#3) with n#2 in current definition for 15 blocks
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let x#6: uint64 = undefined while trying to resolve 'x' in block@3
debug: Added x#6 to Phi node: let x#5: uint64 = φ(x#6 <- block@4) in block@4
debug: Added x#4 to Phi node: let x#5: uint64 = φ(x#6 <- block@4, x#4 <- block@19) in block@19
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let a#6: uint64 = undefined while trying to resolve 'a' in block@3
debug: Added a#6 to Phi node: let a#5: uint64 = φ(a#6 <- block@4) in block@4
debug: Added a#5 to Phi node: let a#5: uint64 = φ(a#6 <- block@4, a#5 <- block@19) in block@19
debug: Replacing trivial Phi node: let a#5: uint64 = φ(a#6 <- block@4, a#5 <- block@19) (a#5) with a#6
debug: Deleting Phi assignment: let a#5: uint64 = φ(a#6 <- block@4, a#5 <- block@19)
debug: Replaced trivial Phi node: let a#5: uint64 = φ(a#6 <- block@4, a#5 <- block@19) (a#5) with a#6 in current definition for 15 blocks
debug: Added b#1 to Phi node: let b#5: uint64 = φ(b#1 <- block@4) in block@4
debug: Added b#5 to Phi node: let b#5: uint64 = φ(b#1 <- block@4, b#5 <- block@19) in block@19
debug: Replacing trivial Phi node: let b#5: uint64 = φ(b#1 <- block@4, b#5 <- block@19) (b#5) with b#1
debug: Deleting Phi assignment: let b#5: uint64 = φ(b#1 <- block@4, b#5 <- block@19)
debug: Replaced trivial Phi node: let b#5: uint64 = φ(b#1 <- block@4, b#5 <- block@19) (b#5) with b#1 in current definition for 15 blocks
debug: Sealing block@20
debug: Terminated block@20
debug: Sealing block@21
debug: Terminated block@21
debug: Sealing block@3
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@2) in block@2
debug: Added b#6 to Phi node: let b#1: uint64 = φ(b#0 <- block@2, b#6 <- block@21) in block@21
debug: Added n#1 to Phi node: let n#2: uint64 = φ(n#1 <- block@2) in block@2
debug: Added n#2 to Phi node: let n#2: uint64 = φ(n#1 <- block@2, n#2 <- block@21) in block@21
debug: Replacing trivial Phi node: let n#2: uint64 = φ(n#1 <- block@2, n#2 <- block@21) (n#2) with n#1
debug: Deleting Phi assignment: let n#2: uint64 = φ(n#1 <- block@2, n#2 <- block@21)
debug: Replaced trivial Phi node: let n#2: uint64 = φ(n#1 <- block@2, n#2 <- block@21) (n#2) with n#1 in current definition for 19 blocks
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let x#7: uint64 = undefined while trying to resolve 'x' in block@1
debug: Added x#7 to Phi node: let x#6: uint64 = φ(x#7 <- block@2) in block@2
debug: Added x#5 to Phi node: let x#6: uint64 = φ(x#7 <- block@2, x#5 <- block@21) in block@21
debug: Added a#1 to Phi node: let a#6: uint64 = φ(a#1 <- block@2) in block@2
debug: Added a#6 to Phi node: let a#6: uint64 = φ(a#1 <- block@2, a#6 <- block@21) in block@21
debug: Replacing trivial Phi node: let a#6: uint64 = φ(a#1 <- block@2, a#6 <- block@21) (a#6) with a#1
debug: Deleting Phi assignment: let a#6: uint64 = φ(a#1 <- block@2, a#6 <- block@21)
debug: Replaced trivial Phi node: let a#6: uint64 = φ(a#1 <- block@2, a#6 <- block@21) (a#6) with a#1 in current definition for 19 blocks
debug: Sealing block@22
debug: Terminated block@22
debug: Sealing block@23
debug: Terminated block@23
debug: Sealing block@1
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@0) in block@0
debug: Added a#8 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#8 <- block@23) in block@23
debug: Added n#0 to Phi node: let n#1: uint64 = φ(n#0 <- block@0) in block@0
debug: Added n#1 to Phi node: let n#1: uint64 = φ(n#0 <- block@0, n#1 <- block@23) in block@23
debug: Replacing trivial Phi node: let n#1: uint64 = φ(n#0 <- block@0, n#1 <- block@23) (n#1) with n#0
debug: Deleting Phi assignment: let n#1: uint64 = φ(n#0 <- block@0, n#1 <- block@23)
debug: Replaced trivial Phi node: let n#1: uint64 = φ(n#0 <- block@0, n#1 <- block@23) (n#1) with n#0 in current definition for 23 blocks
debug: Added x#0 to Phi node: let x#7: uint64 = φ(x#0 <- block@0) in block@0
debug: Added x#6 to Phi node: let x#7: uint64 = φ(x#0 <- block@0, x#6 <- block@23) in block@23
debug: Sealing block@24
debug: Terminated block@24
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@25
debug: Created Phi assignment: let item#1: uint64 = undefined while trying to resolve 'item' in block@25
debug: Looking for 'index' in an unsealed block creating an incomplete Phi: block@25
debug: Created Phi assignment: let index#1: uint64 = undefined while trying to resolve 'index' in block@25
debug: Terminated block@25
debug: Sealing block@26
debug: Looking for 'y' in an unsealed block creating an incomplete Phi: block@25
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@25
debug: Terminated block@26
debug: Sealing block@27
debug: Terminated block@27
debug: Sealing block@25
debug: Added item#0 to Phi node: let item#1: uint64 = φ(item#0 <- block@24) in block@24
debug: Added item#2 to Phi node: let item#1: uint64 = φ(item#0 <- block@24, item#2 <- block@27) in block@27
debug: Added index#0 to Phi node: let index#1: uint64 = φ(index#0 <- block@24) in block@24
debug: Added index#2 to Phi node: let index#1: uint64 = φ(index#0 <- block@24, index#2 <- block@27) in block@27
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@24) in block@24
debug: Added y#2 to Phi node: let y#1: uint64 = φ(y#0 <- block@24, y#2 <- block@27) in block@27
debug: Sealing block@28
debug: Created Phi assignment: let x#8: uint64 = undefined while trying to resolve 'x' in block@25
debug: Added x#7 to Phi node: let x#8: uint64 = φ(x#7 <- block@24) in block@24
debug: Added x#8 to Phi node: let x#8: uint64 = φ(x#7 <- block@24, x#8 <- block@27) in block@27
debug: Replacing trivial Phi node: let x#8: uint64 = φ(x#7 <- block@24, x#8 <- block@27) (x#8) with x#7
debug: Deleting Phi assignment: let x#8: uint64 = φ(x#7 <- block@24, x#8 <- block@27)
debug: Replaced trivial Phi node: let x#8: uint64 = φ(x#7 <- block@24, x#8 <- block@27) (x#8) with x#7 in current definition for 3 blocks
debug: Terminated block@28
debug: Building IR for function test_cases.nested_loops.contract.Nested.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.nested_loops.contract.Nested.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let n#1: uint64 = undefined while trying to resolve 'n' in block@1
debug: Terminated block@2
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let b#1: uint64 = undefined while trying to resolve 'b' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let n#2: uint64 = undefined while trying to resolve 'n' in block@3
debug: Terminated block@4
debug: Looking for 'c' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let c#1: uint64 = undefined while trying to resolve 'c' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let n#3: uint64 = undefined while trying to resolve 'n' in block@5
debug: Terminated block@6
debug: Looking for 'd' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let d#1: uint64 = undefined while trying to resolve 'd' in block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let n#4: uint64 = undefined while trying to resolve 'n' in block@7
debug: Terminated block@8
debug: Looking for 'e' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let e#1: uint64 = undefined while trying to resolve 'e' in block@9
debug: Terminated block@9
debug: Sealing block@10
debug: Looking for 'n' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let n#5: uint64 = undefined while trying to resolve 'n' in block@9
debug: Terminated block@10
debug: Looking for 'f' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let f#1: uint64 = undefined while trying to resolve 'f' in block@11
debug: Terminated block@11
debug: Sealing block@12
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let x#1: uint64 = undefined while trying to resolve 'x' in block@11
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let a#2: uint64 = undefined while trying to resolve 'a' in block@11
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@11
debug: Looking for 'c' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let c#2: uint64 = undefined while trying to resolve 'c' in block@11
debug: Looking for 'd' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let d#2: uint64 = undefined while trying to resolve 'd' in block@11
debug: Looking for 'e' in an unsealed block creating an incomplete Phi: block@11
debug: Created Phi assignment: let e#2: uint64 = undefined while trying to resolve 'e' in block@11
debug: Terminated block@12
debug: Sealing block@13
debug: Terminated block@13
debug: Sealing block@11
debug: Added f#0 to Phi node: let f#1: uint64 = φ(f#0 <- block@10) in block@10
debug: Added f#2 to Phi node: let f#1: uint64 = φ(f#0 <- block@10, f#2 <- block@13) in block@13
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let x#3: uint64 = undefined while trying to resolve 'x' in block@9
debug: Added x#3 to Phi node: let x#1: uint64 = φ(x#3 <- block@10) in block@10
debug: Added x#2 to Phi node: let x#1: uint64 = φ(x#3 <- block@10, x#2 <- block@13) in block@13
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let a#3: uint64 = undefined while trying to resolve 'a' in block@9
debug: Added a#3 to Phi node: let a#2: uint64 = φ(a#3 <- block@10) in block@10
debug: Added a#2 to Phi node: let a#2: uint64 = φ(a#3 <- block@10, a#2 <- block@13) in block@13
debug: Replacing trivial Phi node: let a#2: uint64 = φ(a#3 <- block@10, a#2 <- block@13) (a#2) with a#3
debug: Deleting Phi assignment: let a#2: uint64 = φ(a#3 <- block@10, a#2 <- block@13)
debug: Replaced trivial Phi node: let a#2: uint64 = φ(a#3 <- block@10, a#2 <- block@13) (a#2) with a#3 in current definition for 3 blocks
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let b#3: uint64 = undefined while trying to resolve 'b' in block@9
debug: Added b#3 to Phi node: let b#2: uint64 = φ(b#3 <- block@10) in block@10
debug: Added b#2 to Phi node: let b#2: uint64 = φ(b#3 <- block@10, b#2 <- block@13) in block@13
debug: Replacing trivial Phi node: let b#2: uint64 = φ(b#3 <- block@10, b#2 <- block@13) (b#2) with b#3
debug: Deleting Phi assignment: let b#2: uint64 = φ(b#3 <- block@10, b#2 <- block@13)
debug: Replaced trivial Phi node: let b#2: uint64 = φ(b#3 <- block@10, b#2 <- block@13) (b#2) with b#3 in current definition for 3 blocks
debug: Looking for 'c' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let c#3: uint64 = undefined while trying to resolve 'c' in block@9
debug: Added c#3 to Phi node: let c#2: uint64 = φ(c#3 <- block@10) in block@10
debug: Added c#2 to Phi node: let c#2: uint64 = φ(c#3 <- block@10, c#2 <- block@13) in block@13
debug: Replacing trivial Phi node: let c#2: uint64 = φ(c#3 <- block@10, c#2 <- block@13) (c#2) with c#3
debug: Deleting Phi assignment: let c#2: uint64 = φ(c#3 <- block@10, c#2 <- block@13)
debug: Replaced trivial Phi node: let c#2: uint64 = φ(c#3 <- block@10, c#2 <- block@13) (c#2) with c#3 in current definition for 3 blocks
debug: Looking for 'd' in an unsealed block creating an incomplete Phi: block@9
debug: Created Phi assignment: let d#3: uint64 = undefined while trying to resolve 'd' in block@9
debug: Added d#3 to Phi node: let d#2: uint64 = φ(d#3 <- block@10) in block@10
debug: Added d#2 to Phi node: let d#2: uint64 = φ(d#3 <- block@10, d#2 <- block@13) in block@13
debug: Replacing trivial Phi node: let d#2: uint64 = φ(d#3 <- block@10, d#2 <- block@13) (d#2) with d#3
debug: Deleting Phi assignment: let d#2: uint64 = φ(d#3 <- block@10, d#2 <- block@13)
debug: Replaced trivial Phi node: let d#2: uint64 = φ(d#3 <- block@10, d#2 <- block@13) (d#2) with d#3 in current definition for 3 blocks
debug: Added e#1 to Phi node: let e#2: uint64 = φ(e#1 <- block@10) in block@10
debug: Added e#2 to Phi node: let e#2: uint64 = φ(e#1 <- block@10, e#2 <- block@13) in block@13
debug: Replacing trivial Phi node: let e#2: uint64 = φ(e#1 <- block@10, e#2 <- block@13) (e#2) with e#1
debug: Deleting Phi assignment: let e#2: uint64 = φ(e#1 <- block@10, e#2 <- block@13)
debug: Replaced trivial Phi node: let e#2: uint64 = φ(e#1 <- block@10, e#2 <- block@13) (e#2) with e#1 in current definition for 3 blocks
debug: Sealing block@14
debug: Terminated block@14
debug: Sealing block@15
debug: Terminated block@15
debug: Sealing block@9
debug: Added e#0 to Phi node: let e#1: uint64 = φ(e#0 <- block@8) in block@8
debug: Added e#3 to Phi node: let e#1: uint64 = φ(e#0 <- block@8, e#3 <- block@15) in block@15
debug: Added n#4 to Phi node: let n#5: uint64 = φ(n#4 <- block@8) in block@8
debug: Created Phi assignment: let n#6: uint64 = undefined while trying to resolve 'n' in block@11
debug: Added n#5 to Phi node: let n#6: uint64 = φ(n#5 <- block@10) in block@10
debug: Added n#6 to Phi node: let n#6: uint64 = φ(n#5 <- block@10, n#6 <- block@13) in block@13
debug: Replacing trivial Phi node: let n#6: uint64 = φ(n#5 <- block@10, n#6 <- block@13) (n#6) with n#5
debug: Deleting Phi assignment: let n#6: uint64 = φ(n#5 <- block@10, n#6 <- block@13)
debug: Replaced trivial Phi node: let n#6: uint64 = φ(n#5 <- block@10, n#6 <- block@13) (n#6) with n#5 in current definition for 3 blocks
debug: Added n#5 to Phi node: let n#5: uint64 = φ(n#4 <- block@8, n#5 <- block@15) in block@15
debug: Replacing trivial Phi node: let n#5: uint64 = φ(n#4 <- block@8, n#5 <- block@15) (n#5) with n#4
debug: Deleting Phi assignment: let n#5: uint64 = φ(n#4 <- block@8, n#5 <- block@15)
debug: Replaced trivial Phi node: let n#5: uint64 = φ(n#4 <- block@8, n#5 <- block@15) (n#5) with n#4 in current definition for 7 blocks
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let x#4: uint64 = undefined while trying to resolve 'x' in block@7
debug: Added x#4 to Phi node: let x#3: uint64 = φ(x#4 <- block@8) in block@8
debug: Added x#1 to Phi node: let x#3: uint64 = φ(x#4 <- block@8, x#1 <- block@15) in block@15
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let a#4: uint64 = undefined while trying to resolve 'a' in block@7
debug: Added a#4 to Phi node: let a#3: uint64 = φ(a#4 <- block@8) in block@8
debug: Added a#3 to Phi node: let a#3: uint64 = φ(a#4 <- block@8, a#3 <- block@15) in block@15
debug: Replacing trivial Phi node: let a#3: uint64 = φ(a#4 <- block@8, a#3 <- block@15) (a#3) with a#4
debug: Deleting Phi assignment: let a#3: uint64 = φ(a#4 <- block@8, a#3 <- block@15)
debug: Replaced trivial Phi node: let a#3: uint64 = φ(a#4 <- block@8, a#3 <- block@15) (a#3) with a#4 in current definition for 7 blocks
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let b#4: uint64 = undefined while trying to resolve 'b' in block@7
debug: Added b#4 to Phi node: let b#3: uint64 = φ(b#4 <- block@8) in block@8
debug: Added b#3 to Phi node: let b#3: uint64 = φ(b#4 <- block@8, b#3 <- block@15) in block@15
debug: Replacing trivial Phi node: let b#3: uint64 = φ(b#4 <- block@8, b#3 <- block@15) (b#3) with b#4
debug: Deleting Phi assignment: let b#3: uint64 = φ(b#4 <- block@8, b#3 <- block@15)
debug: Replaced trivial Phi node: let b#3: uint64 = φ(b#4 <- block@8, b#3 <- block@15) (b#3) with b#4 in current definition for 7 blocks
debug: Looking for 'c' in an unsealed block creating an incomplete Phi: block@7
debug: Created Phi assignment: let c#4: uint64 = undefined while trying to resolve 'c' in block@7
debug: Added c#4 to Phi node: let c#3: uint64 = φ(c#4 <- block@8) in block@8
debug: Added c#3 to Phi node: let c#3: uint64 = φ(c#4 <- block@8, c#3 <- block@15) in block@15
debug: Replacing trivial Phi node: let c#3: uint64 = φ(c#4 <- block@8, c#3 <- block@15) (c#3) with c#4
debug: Deleting Phi assignment: let c#3: uint64 = φ(c#4 <- block@8, c#3 <- block@15)
debug: Replaced trivial Phi node: let c#3: uint64 = φ(c#4 <- block@8, c#3 <- block@15) (c#3) with c#4 in current definition for 7 blocks
debug: Added d#1 to Phi node: let d#3: uint64 = φ(d#1 <- block@8) in block@8
debug: Added d#3 to Phi node: let d#3: uint64 = φ(d#1 <- block@8, d#3 <- block@15) in block@15
debug: Replacing trivial Phi node: let d#3: uint64 = φ(d#1 <- block@8, d#3 <- block@15) (d#3) with d#1
debug: Deleting Phi assignment: let d#3: uint64 = φ(d#1 <- block@8, d#3 <- block@15)
debug: Replaced trivial Phi node: let d#3: uint64 = φ(d#1 <- block@8, d#3 <- block@15) (d#3) with d#1 in current definition for 7 blocks
debug: Sealing block@16
debug: Terminated block@16
debug: Sealing block@17
debug: Terminated block@17
debug: Sealing block@7
debug: Added d#0 to Phi node: let d#1: uint64 = φ(d#0 <- block@6) in block@6
debug: Added d#4 to Phi node: let d#1: uint64 = φ(d#0 <- block@6, d#4 <- block@17) in block@17
debug: Added n#3 to Phi node: let n#4: uint64 = φ(n#3 <- block@6) in block@6
debug: Added n#4 to Phi node: let n#4: uint64 = φ(n#3 <- block@6, n#4 <- block@17) in block@17
debug: Replacing trivial Phi node: let n#4: uint64 = φ(n#3 <- block@6, n#4 <- block@17) (n#4) with n#3
debug: Deleting Phi assignment: let n#4: uint64 = φ(n#3 <- block@6, n#4 <- block@17)
debug: Replaced trivial Phi node: let n#4: uint64 = φ(n#3 <- block@6, n#4 <- block@17) (n#4) with n#3 in current definition for 11 blocks
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let x#5: uint64 = undefined while trying to resolve 'x' in block@5
debug: Added x#5 to Phi node: let x#4: uint64 = φ(x#5 <- block@6) in block@6
debug: Added x#3 to Phi node: let x#4: uint64 = φ(x#5 <- block@6, x#3 <- block@17) in block@17
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let a#5: uint64 = undefined while trying to resolve 'a' in block@5
debug: Added a#5 to Phi node: let a#4: uint64 = φ(a#5 <- block@6) in block@6
debug: Added a#4 to Phi node: let a#4: uint64 = φ(a#5 <- block@6, a#4 <- block@17) in block@17
debug: Replacing trivial Phi node: let a#4: uint64 = φ(a#5 <- block@6, a#4 <- block@17) (a#4) with a#5
debug: Deleting Phi assignment: let a#4: uint64 = φ(a#5 <- block@6, a#4 <- block@17)
debug: Replaced trivial Phi node: let a#4: uint64 = φ(a#5 <- block@6, a#4 <- block@17) (a#4) with a#5 in current definition for 11 blocks
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let b#5: uint64 = undefined while trying to resolve 'b' in block@5
debug: Added b#5 to Phi node: let b#4: uint64 = φ(b#5 <- block@6) in block@6
debug: Added b#4 to Phi node: let b#4: uint64 = φ(b#5 <- block@6, b#4 <- block@17) in block@17
debug: Replacing trivial Phi node: let b#4: uint64 = φ(b#5 <- block@6, b#4 <- block@17) (b#4) with b#5
debug: Deleting Phi assignment: let b#4: uint64 = φ(b#5 <- block@6, b#4 <- block@17)
debug: Replaced trivial Phi node: let b#4: uint64 = φ(b#5 <- block@6, b#4 <- block@17) (b#4) with b#5 in current definition for 11 blocks
debug: Added c#1 to Phi node: let c#4: uint64 = φ(c#1 <- block@6) in block@6
debug: Added c#4 to Phi node: let c#4: uint64 = φ(c#1 <- block@6, c#4 <- block@17) in block@17
debug: Replacing trivial Phi node: let c#4: uint64 = φ(c#1 <- block@6, c#4 <- block@17) (c#4) with c#1
debug: Deleting Phi assignment: let c#4: uint64 = φ(c#1 <- block@6, c#4 <- block@17)
debug: Replaced trivial Phi node: let c#4: uint64 = φ(c#1 <- block@6, c#4 <- block@17) (c#4) with c#1 in current definition for 11 blocks
debug: Sealing block@18
debug: Terminated block@18
debug: Sealing block@19
debug: Terminated block@19
debug: Sealing block@5
debug: Added c#0 to Phi node: let c#1: uint64 = φ(c#0 <- block@4) in block@4
debug: Added c#5 to Phi node: let c#1: uint64 = φ(c#0 <- block@4, c#5 <- block@19) in block@19
debug: Added n#2 to Phi node: let n#3: uint64 = φ(n#2 <- block@4) in block@4
debug: Added n#3 to Phi node: let n#3: uint64 = φ(n#2 <- block@4, n#3 <- block@19) in block@19
debug: Replacing trivial Phi node: let n#3: uint64 = φ(n#2 <- block@4, n#3 <- block@19) (n#3) with n#2
debug: Deleting Phi assignment: let n#3: uint64 = φ(n#2 <- block@4, n#3 <- block@19)
debug: Replaced trivial Phi node: let n#3: uint64 = φ(n#2 <- block@4, n#3 <- block@19) (n#3) with n#2 in current definition for 15 blocks
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let x#6: uint64 = undefined while trying to resolve 'x' in block@3
debug: Added x#6 to Phi node: let x#5: uint64 = φ(x#6 <- block@4) in block@4
debug: Added x#4 to Phi node: let x#5: uint64 = φ(x#6 <- block@4, x#4 <- block@19) in block@19
debug: Looking for 'a' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let a#6: uint64 = undefined while trying to resolve 'a' in block@3
debug: Added a#6 to Phi node: let a#5: uint64 = φ(a#6 <- block@4) in block@4
debug: Added a#5 to Phi node: let a#5: uint64 = φ(a#6 <- block@4, a#5 <- block@19) in block@19
debug: Replacing trivial Phi node: let a#5: uint64 = φ(a#6 <- block@4, a#5 <- block@19) (a#5) with a#6
debug: Deleting Phi assignment: let a#5: uint64 = φ(a#6 <- block@4, a#5 <- block@19)
debug: Replaced trivial Phi node: let a#5: uint64 = φ(a#6 <- block@4, a#5 <- block@19) (a#5) with a#6 in current definition for 15 blocks
debug: Added b#1 to Phi node: let b#5: uint64 = φ(b#1 <- block@4) in block@4
debug: Added b#5 to Phi node: let b#5: uint64 = φ(b#1 <- block@4, b#5 <- block@19) in block@19
debug: Replacing trivial Phi node: let b#5: uint64 = φ(b#1 <- block@4, b#5 <- block@19) (b#5) with b#1
debug: Deleting Phi assignment: let b#5: uint64 = φ(b#1 <- block@4, b#5 <- block@19)
debug: Replaced trivial Phi node: let b#5: uint64 = φ(b#1 <- block@4, b#5 <- block@19) (b#5) with b#1 in current definition for 15 blocks
debug: Sealing block@20
debug: Terminated block@20
debug: Sealing block@21
debug: Terminated block@21
debug: Sealing block@3
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@2) in block@2
debug: Added b#6 to Phi node: let b#1: uint64 = φ(b#0 <- block@2, b#6 <- block@21) in block@21
debug: Added n#1 to Phi node: let n#2: uint64 = φ(n#1 <- block@2) in block@2
debug: Added n#2 to Phi node: let n#2: uint64 = φ(n#1 <- block@2, n#2 <- block@21) in block@21
debug: Replacing trivial Phi node: let n#2: uint64 = φ(n#1 <- block@2, n#2 <- block@21) (n#2) with n#1
debug: Deleting Phi assignment: let n#2: uint64 = φ(n#1 <- block@2, n#2 <- block@21)
debug: Replaced trivial Phi node: let n#2: uint64 = φ(n#1 <- block@2, n#2 <- block@21) (n#2) with n#1 in current definition for 19 blocks
debug: Looking for 'x' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let x#7: uint64 = undefined while trying to resolve 'x' in block@1
debug: Added x#7 to Phi node: let x#6: uint64 = φ(x#7 <- block@2) in block@2
debug: Added x#5 to Phi node: let x#6: uint64 = φ(x#7 <- block@2, x#5 <- block@21) in block@21
debug: Added a#1 to Phi node: let a#6: uint64 = φ(a#1 <- block@2) in block@2
debug: Added a#6 to Phi node: let a#6: uint64 = φ(a#1 <- block@2, a#6 <- block@21) in block@21
debug: Replacing trivial Phi node: let a#6: uint64 = φ(a#1 <- block@2, a#6 <- block@21) (a#6) with a#1
debug: Deleting Phi assignment: let a#6: uint64 = φ(a#1 <- block@2, a#6 <- block@21)
debug: Replaced trivial Phi node: let a#6: uint64 = φ(a#1 <- block@2, a#6 <- block@21) (a#6) with a#1 in current definition for 19 blocks
debug: Sealing block@22
debug: Terminated block@22
debug: Sealing block@23
debug: Terminated block@23
debug: Sealing block@1
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@0) in block@0
debug: Added a#8 to Phi node: let a#1: uint64 = φ(a#0 <- block@0, a#8 <- block@23) in block@23
debug: Added n#0 to Phi node: let n#1: uint64 = φ(n#0 <- block@0) in block@0
debug: Added n#1 to Phi node: let n#1: uint64 = φ(n#0 <- block@0, n#1 <- block@23) in block@23
debug: Replacing trivial Phi node: let n#1: uint64 = φ(n#0 <- block@0, n#1 <- block@23) (n#1) with n#0
debug: Deleting Phi assignment: let n#1: uint64 = φ(n#0 <- block@0, n#1 <- block@23)
debug: Replaced trivial Phi node: let n#1: uint64 = φ(n#0 <- block@0, n#1 <- block@23) (n#1) with n#0 in current definition for 23 blocks
debug: Added x#0 to Phi node: let x#7: uint64 = φ(x#0 <- block@0) in block@0
debug: Added x#6 to Phi node: let x#7: uint64 = φ(x#0 <- block@0, x#6 <- block@23) in block@23
debug: Sealing block@24
debug: Terminated block@24
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@25
debug: Created Phi assignment: let item#1: uint64 = undefined while trying to resolve 'item' in block@25
debug: Looking for 'index' in an unsealed block creating an incomplete Phi: block@25
debug: Created Phi assignment: let index#1: uint64 = undefined while trying to resolve 'index' in block@25
debug: Terminated block@25
debug: Sealing block@26
debug: Looking for 'y' in an unsealed block creating an incomplete Phi: block@25
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@25
debug: Terminated block@26
debug: Sealing block@27
debug: Terminated block@27
debug: Sealing block@25
debug: Added item#0 to Phi node: let item#1: uint64 = φ(item#0 <- block@24) in block@24
debug: Added item#2 to Phi node: let item#1: uint64 = φ(item#0 <- block@24, item#2 <- block@27) in block@27
debug: Added index#0 to Phi node: let index#1: uint64 = φ(index#0 <- block@24) in block@24
debug: Added index#2 to Phi node: let index#1: uint64 = φ(index#0 <- block@24, index#2 <- block@27) in block@27
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@24) in block@24
debug: Added y#2 to Phi node: let y#1: uint64 = φ(y#0 <- block@24, y#2 <- block@27) in block@27
debug: Sealing block@28
debug: Created Phi assignment: let x#8: uint64 = undefined while trying to resolve 'x' in block@25
debug: Added x#7 to Phi node: let x#8: uint64 = φ(x#7 <- block@24) in block@24
debug: Added x#8 to Phi node: let x#8: uint64 = φ(x#7 <- block@24, x#8 <- block@27) in block@27
debug: Replacing trivial Phi node: let x#8: uint64 = φ(x#7 <- block@24, x#8 <- block@27) (x#8) with x#7
debug: Deleting Phi assignment: let x#8: uint64 = φ(x#7 <- block@24, x#8 <- block@27)
debug: Replaced trivial Phi node: let x#8: uint64 = φ(x#7 <- block@24, x#8 <- block@27) (x#8) with x#7 in current definition for 3 blocks
debug: Terminated block@28
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.nested_loops.contract.Nested.__puya_arc4_router__
debug: removing unused subroutine test_cases.nested_loops.contract.Nested.approval_program
debug: removing unused subroutine test_cases.nested_loops.contract.Nested.clear_state_program
debug: Building IR for function test_cases.nested_loops.contract.Nested.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.nested_loops.contract.Nested.__puya_arc4_router__
debug: removing unused subroutine test_cases.nested_loops.contract.Nested.approval_program
debug: removing unused subroutine test_cases.nested_loops.contract.Nested.clear_state_program
debug: Output IR to nested_loops/out/Nested.ir/Nested.approval.0.ssa.ir
debug: Output IR to nested_loops/out/Nested.ir/Nested.clear.0.ssa.ir
debug: optimizing approval program of test_cases.nested_loops.contract.Nested at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.nested_loops.contract.Nested.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: materialized_values%0#0, x#2
debug: selected x#2 from equivalence set
debug: Found equivalence set: materialized_values%1#0, a#7
debug: selected a#7 from equivalence set
debug: Found equivalence set: materialized_values%2#0, y#2
debug: selected y#2 from equivalence set
debug: Copy propagation made 3 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable n#0
debug: Removing unused variable a#7
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@13 with block@12 in block@11
debug: Merged linear block@13 into block@12
debug: Replaced predecessor block@15 with block@14 in block@9
debug: Merged linear block@15 into block@14
debug: Replaced predecessor block@17 with block@16 in block@7
debug: Merged linear block@17 into block@16
debug: Replaced predecessor block@19 with block@18 in block@5
debug: Merged linear block@19 into block@18
debug: Replaced predecessor block@21 with block@20 in block@3
debug: Merged linear block@21 into block@20
debug: Replaced predecessor block@23 with block@22 in block@1
debug: Merged linear block@23 into block@22
debug: Replaced predecessor block@27 with block@26 in block@25
debug: Merged linear block@27 into block@26
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Output IR to nested_loops/out/Nested.ir/Nested.approval.1.ssa.opt.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.nested_loops.contract.Nested.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 2, ending loop
debug: optimizing clear program of test_cases.nested_loops.contract.Nested at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.nested_loops.contract.Nested.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of test_cases.nested_loops.contract.Nested
debug: Output IR to nested_loops/out/Nested.ir/Nested.approval.2.ssa.array.ir
debug: lowering array IR nodes in clear program of test_cases.nested_loops.contract.Nested
debug: Output IR to nested_loops/out/Nested.ir/Nested.clear.1.ssa.array.ir
debug: optimizing approval program of test_cases.nested_loops.contract.Nested at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.nested_loops.contract.Nested.approval_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of test_cases.nested_loops.contract.Nested at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.nested_loops.contract.Nested.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.nested_loops.contract.Nested
nested_loops/contract.py:7 debug: auto reserving slots in test_cases.nested_loops.contract.Nested.approval_program, []
debug: Slot allocation not required
debug: Output IR to nested_loops/out/Nested.ir/Nested.approval.3.ssa.slot.ir
debug: removing local static slots in clear program of test_cases.nested_loops.contract.Nested
nested_loops/contract.py:31 debug: auto reserving slots in test_cases.nested_loops.contract.Nested.clear_state_program, []
debug: Slot allocation not required
debug: Output IR to nested_loops/out/Nested.ir/Nested.clear.2.ssa.slot.ir
debug: Performing SSA IR destructuring for test_cases.nested_loops.contract.Nested.approval_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.nested_loops.contract.Nested.approval_program using strategy RootOperandGrouping
debug: Coalescing x#0 with [x#10, x#7, x#13, x#6, x#16, x#5, x#19, x#4, x#22, x#3, x#25, x#1, x#2]
debug: Coalescing a#0 with [a#11, a#1, a#8]
debug: Coalescing b#0 with [b#9, b#1, b#6]
debug: Coalescing c#0 with [c#8, c#1, c#5]
debug: Coalescing d#0 with [d#7, d#1, d#4]
debug: Coalescing e#0 with [e#6, e#1, e#3]
debug: Coalescing f#0 with [f#5, f#1, f#2]
debug: Coalescing y#0 with [y#5, y#1, y#2]
debug: Coalescing item#0 with [item#5, item#1, item#2]
debug: Coalescing index#0 with [index#5, index#1, index#2]
debug: Coalescing resulted in 118 replacement/s
debug: Sequentializing parallel copies in test_cases.nested_loops.contract.Nested.approval_program
debug: loc: {a#0=a#0, x#0=x#0}
debug: pred: {a#0=a#0, x#0=x#0}
debug: ready: 
debug: to_do: a#0, x#0
debug: * to_do x#0
debug: * to_do a#0
debug: loc: {a#0=a#0, x#0=x#0}
debug: pred: {a#0=a#0, x#0=x#0}
debug: ready: 
debug: to_do: a#0, x#0
debug: * to_do x#0
debug: * to_do a#0
debug: loc: {b#0=b#0, x#0=x#0}
debug: pred: {b#0=b#0, x#0=x#0}
debug: ready: 
debug: to_do: b#0, x#0
debug: * to_do x#0
debug: * to_do b#0
debug: loc: {b#0=b#0, x#0=x#0}
debug: pred: {b#0=b#0, x#0=x#0}
debug: ready: 
debug: to_do: b#0, x#0
debug: * to_do x#0
debug: * to_do b#0
debug: loc: {c#0=c#0, x#0=x#0}
debug: pred: {c#0=c#0, x#0=x#0}
debug: ready: 
debug: to_do: c#0, x#0
debug: * to_do x#0
debug: * to_do c#0
debug: loc: {c#0=c#0, x#0=x#0}
debug: pred: {c#0=c#0, x#0=x#0}
debug: ready: 
debug: to_do: c#0, x#0
debug: * to_do x#0
debug: * to_do c#0
debug: loc: {d#0=d#0, x#0=x#0}
debug: pred: {d#0=d#0, x#0=x#0}
debug: ready: 
debug: to_do: d#0, x#0
debug: * to_do x#0
debug: * to_do d#0
debug: loc: {d#0=d#0, x#0=x#0}
debug: pred: {d#0=d#0, x#0=x#0}
debug: ready: 
debug: to_do: d#0, x#0
debug: * to_do x#0
debug: * to_do d#0
debug: loc: {e#0=e#0, x#0=x#0}
debug: pred: {e#0=e#0, x#0=x#0}
debug: ready: 
debug: to_do: e#0, x#0
debug: * to_do x#0
debug: * to_do e#0
debug: loc: {e#0=e#0, x#0=x#0}
debug: pred: {e#0=e#0, x#0=x#0}
debug: ready: 
debug: to_do: e#0, x#0
debug: * to_do x#0
debug: * to_do e#0
debug: loc: {f#0=f#0, x#0=x#0}
debug: pred: {f#0=f#0, x#0=x#0}
debug: ready: 
debug: to_do: f#0, x#0
debug: * to_do x#0
debug: * to_do f#0
debug: loc: {f#0=f#0, x#0=x#0}
debug: pred: {f#0=f#0, x#0=x#0}
debug: ready: 
debug: to_do: f#0, x#0
debug: * to_do x#0
debug: * to_do f#0
debug: loc: {f#0=f#0, x#0=x#0}
debug: pred: {f#0=f#0, x#0=x#0}
debug: ready: 
debug: to_do: f#0, x#0
debug: * to_do x#0
debug: * to_do f#0
debug: loc: {e#0=e#0, x#0=x#0}
debug: pred: {e#0=e#0, x#0=x#0}
debug: ready: 
debug: to_do: e#0, x#0
debug: * to_do x#0
debug: * to_do e#0
debug: loc: {d#0=d#0, x#0=x#0}
debug: pred: {d#0=d#0, x#0=x#0}
debug: ready: 
debug: to_do: d#0, x#0
debug: * to_do x#0
debug: * to_do d#0
debug: loc: {c#0=c#0, x#0=x#0}
debug: pred: {c#0=c#0, x#0=x#0}
debug: ready: 
debug: to_do: c#0, x#0
debug: * to_do x#0
debug: * to_do c#0
debug: loc: {b#0=b#0, x#0=x#0}
debug: pred: {b#0=b#0, x#0=x#0}
debug: ready: 
debug: to_do: b#0, x#0
debug: * to_do x#0
debug: * to_do b#0
debug: loc: {a#0=a#0, x#0=x#0}
debug: pred: {a#0=a#0, x#0=x#0}
debug: ready: 
debug: to_do: a#0, x#0
debug: * to_do x#0
debug: * to_do a#0
debug: loc: {item#0=item#0, index#0=index#0, y#0=y#0}
debug: pred: {item#0=item#0, index#0=index#0, y#0=y#0}
debug: ready: 
debug: to_do: item#0, index#0, y#0
debug: * to_do y#0
debug: * to_do index#0
debug: * to_do item#0
debug: loc: {item#0=item#0, index#0=index#0, y#0=y#0}
debug: pred: {item#0=item#0, index#0=index#0, y#0=y#0}
debug: ready: 
debug: to_do: item#0, index#0, y#0
debug: * to_do y#0
debug: * to_do index#0
debug: * to_do item#0
debug: loc: {item#0=item#0, index#0=index#0, y#0=y#0}
debug: pred: {item#0=item#0, index#0=index#0, y#0=y#0}
debug: ready: 
debug: to_do: item#0, index#0, y#0
debug: * to_do y#0
debug: * to_do index#0
debug: * to_do item#0
debug: Performing post-SSA optimizations at level 1
debug: Output IR to nested_loops/out/Nested.ir/Nested.approval.4.destructured.ir
debug: Performing SSA IR destructuring for test_cases.nested_loops.contract.Nested.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.nested_loops.contract.Nested.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.nested_loops.contract.Nested.clear_state_program
debug: Performing post-SSA optimizations at level 1
debug: Output IR to nested_loops/out/Nested.ir/Nested.clear.3.destructured.ir
debug: Inserted main_for_header@1.ops[3]: 'l-store-copy continue_looping%0#0 0'
debug: Replaced main_for_header@1.ops[5]: 'v-load continue_looping%0#0' with 'l-load continue_looping%0#0'
debug: Inserted main_for_header@3.ops[3]: 'l-store-copy continue_looping%1#0 0'
debug: Replaced main_for_header@3.ops[5]: 'v-load continue_looping%1#0' with 'l-load continue_looping%1#0'
debug: Inserted main_for_header@5.ops[3]: 'l-store-copy continue_looping%2#0 0'
debug: Replaced main_for_header@5.ops[5]: 'v-load continue_looping%2#0' with 'l-load continue_looping%2#0'
debug: Inserted main_for_header@7.ops[3]: 'l-store-copy continue_looping%3#0 0'
debug: Replaced main_for_header@7.ops[5]: 'v-load continue_looping%3#0' with 'l-load continue_looping%3#0'
debug: Inserted main_for_header@9.ops[3]: 'l-store-copy continue_looping%4#0 0'
debug: Replaced main_for_header@9.ops[5]: 'v-load continue_looping%4#0' with 'l-load continue_looping%4#0'
debug: Inserted main_for_header@11.ops[3]: 'l-store-copy continue_looping%5#0 0'
debug: Replaced main_for_header@11.ops[5]: 'v-load continue_looping%5#0' with 'l-load continue_looping%5#0'
debug: Inserted main_for_body@12.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_for_body@12.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_for_body@12.ops[8]: 'l-store-copy tmp%1#0 0'
debug: Replaced main_for_body@12.ops[10]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted main_for_body@12.ops[13]: 'l-store-copy tmp%2#0 0'
debug: Replaced main_for_body@12.ops[15]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main_for_body@12.ops[18]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_for_body@12.ops[20]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_for_body@12.ops[23]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_for_body@12.ops[26]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_for_body@12.ops[22]: 'l-store-copy f#0 1'
debug: Replaced main_for_body@12.ops[30]: 'v-load f#0' with 'l-load f#0'
debug: Inserted main_after_for@24.ops[2]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_after_for@24.ops[4]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_for_header@25.ops[3]: 'l-store-copy continue_looping%6#0 0'
debug: Replaced main_for_header@25.ops[5]: 'v-load continue_looping%6#0' with 'l-load continue_looping%6#0'
debug: Inserted main_for_body@26.ops[3]: 'l-store-copy tmp%6#0 0'
debug: Replaced main_for_body@26.ops[6]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main_for_body@26.ops[1]: 'l-store-copy item#0 0'
debug: Replaced main_for_body@26.ops[10]: 'v-load item#0' with 'l-load item#0'
debug: Inserted main_for_body@26.ops[3]: 'l-store-copy index#0 2'
debug: Replaced main_for_body@26.ops[15]: 'v-load index#0' with 'l-load index#0'
debug: Inserted main_after_for@28.ops[2]: 'l-store-copy tmp%7#0 0'
debug: Replaced main_after_for@28.ops[4]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Found 14 edge set/s for test_cases.nested_loops.contract.Nested.approval_program
debug: test_cases.nested_loops.contract.Nested.approval_program f-stack entry: ['b#0', 'c#0', 'd#0', 'e#0', 'f#0', 'index#0', 'item#0', 'y#0']
debug: test_cases.nested_loops.contract.Nested.approval_program f-stack on first store: ['x#0', 'a#0']
nested_loops/contract.py:7 debug: optimizing TEAL subroutine ops test_cases.nested_loops.contract.Nested.approval_program() -> uint64:
nested_loops/contract.py:7 debug: optimizing TEAL subroutine blocks test_cases.nested_loops.contract.Nested.approval_program() -> uint64:
debug: inlining single reference block main_block@0 into main
debug: inlining single reference block main_for_body@2 into main_for_header@1
debug: inlining single reference block main_for_body@4 into main_for_header@3
debug: inlining single reference block main_for_body@6 into main_for_header@5
debug: inlining single reference block main_for_body@8 into main_for_header@7
debug: inlining single reference block main_for_body@10 into main_for_header@9
debug: inlining single reference block main_for_body@12 into main_for_header@11
debug: inlining single reference block main_for_body@26 into main_for_header@25
debug: removing explicit jump to fall-through block main_for_header@1
debug: removing explicit jump to fall-through block main_for_header@3
debug: removing explicit jump to fall-through block main_for_header@5
debug: removing explicit jump to fall-through block main_for_header@7
debug: removing explicit jump to fall-through block main_for_header@9
debug: removing explicit jump to fall-through block main_for_header@11
debug: removing explicit jump to fall-through block main_for_header@25
nested_loops/contract.py:31 debug: optimizing TEAL subroutine ops test_cases.nested_loops.contract.Nested.clear_state_program() -> uint64:
nested_loops/contract.py:31 debug: optimizing TEAL subroutine blocks test_cases.nested_loops.contract.Nested.clear_state_program() -> uint64:
debug: inlining single reference block main_block@0 into main
info: Writing nested_loops/out/Nested.approval.teal
info: Writing nested_loops/out/Nested.clear.teal
info: Writing nested_loops/out/Nested.approval.bin
info: Writing nested_loops/out/Nested.clear.bin
info: Writing nested_loops/out/Nested.approval.puya.map
info: Writing nested_loops/out/Nested.clear.puya.map