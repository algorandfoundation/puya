contract test_cases.nested_loops.contract.Nested:
    program approval:
        subroutine test_cases.nested_loops.contract.Nested.approval_program() -> uint64:
            block@0: // L7
                let x#0: uint64 = 0u
                let range_item%0#0: uint64 = 0u
                let (range_item%0#9: uint64, x#14: uint64) = (range_item%0#0, x#0)
                goto block@1
            block@1: // for_header_L11
                let a#1: uint64 = φ(range_item%0#9 <- block@0, range_item%0#10 <- block@27)
                let x#16: uint64 = φ(x#14 <- block@0, x#15 <- block@27)
                let (a#0: uint64, x#13: uint64) = (a#1, x#16)
                let continue_looping%1#0: uint64 = (< a#0 2u)
                goto continue_looping%1#0 ? block@2 : block@30
            block@2: // for_body_L11
                let range_item%2#0: uint64 = 0u
                let (range_item%2#8: uint64, x#17: uint64) = (range_item%2#0, x#13)
                goto block@3
            block@3: // for_header_L12
                let b#1: uint64 = φ(range_item%2#8 <- block@2, range_item%2#9 <- block@24)
                let x#19: uint64 = φ(x#17 <- block@2, x#18 <- block@24)
                let (b#0: uint64, x#11: uint64) = (b#1, x#19)
                let continue_looping%3#0: uint64 = (< b#0 2u)
                goto continue_looping%3#0 ? block@4 : block@27
            block@4: // for_body_L12
                let range_item%4#0: uint64 = 0u
                let (range_item%4#7: uint64, x#20: uint64) = (range_item%4#0, x#11)
                goto block@5
            block@5: // for_header_L13
                let c#1: uint64 = φ(range_item%4#7 <- block@4, range_item%4#8 <- block@21)
                let x#22: uint64 = φ(x#20 <- block@4, x#21 <- block@21)
                let (c#0: uint64, x#9: uint64) = (c#1, x#22)
                let continue_looping%5#0: uint64 = (< c#0 2u)
                goto continue_looping%5#0 ? block@6 : block@24
            block@6: // for_body_L13
                let range_item%6#0: uint64 = 0u
                let (range_item%6#6: uint64, x#23: uint64) = (range_item%6#0, x#9)
                goto block@7
            block@7: // for_header_L14
                let d#1: uint64 = φ(range_item%6#6 <- block@6, range_item%6#7 <- block@18)
                let x#25: uint64 = φ(x#23 <- block@6, x#24 <- block@18)
                let (d#0: uint64, x#7: uint64) = (d#1, x#25)
                let continue_looping%7#0: uint64 = (< d#0 2u)
                goto continue_looping%7#0 ? block@8 : block@21
            block@8: // for_body_L14
                let range_item%8#0: uint64 = 0u
                let (range_item%8#5: uint64, x#26: uint64) = (range_item%8#0, x#7)
                goto block@9
            block@9: // for_header_L15
                let e#1: uint64 = φ(range_item%8#5 <- block@8, range_item%8#6 <- block@15)
                let x#28: uint64 = φ(x#26 <- block@8, x#27 <- block@15)
                let (e#0: uint64, x#5: uint64) = (e#1, x#28)
                let continue_looping%9#0: uint64 = (< e#0 2u)
                goto continue_looping%9#0 ? block@10 : block@18
            block@10: // for_body_L15
                let range_item%10#0: uint64 = 0u
                let (range_item%10#4: uint64, x#29: uint64) = (range_item%10#0, x#5)
                goto block@11
            block@11: // for_header_L16
                let f#1: uint64 = φ(range_item%10#4 <- block@10, range_item%10#5 <- block@12)
                let x#31: uint64 = φ(x#29 <- block@10, x#30 <- block@12)
                let (f#0: uint64, x#3: uint64) = (f#1, x#31)
                let continue_looping%11#0: uint64 = (< f#0 2u)
                goto continue_looping%11#0 ? block@12 : block@15
            block@12: // for_body_L16
                let tmp%12#0: uint64 = (+ a#0 b#0)
                let tmp%13#0: uint64 = (+ tmp%12#0 c#0)
                let tmp%14#0: uint64 = (+ tmp%13#0 d#0)
                let tmp%15#0: uint64 = (+ tmp%14#0 e#0)
                let tmp%16#0: uint64 = (+ tmp%15#0 f#0)
                let x#2: uint64 = (+ x#3 tmp%16#0)
                let range_item%10#3: uint64 = (+ f#0 1u)
                let (range_item%10#5: uint64, x#30: uint64) = (range_item%10#3, x#2)
                goto block@11
            block@15: // after_for_L16
                let range_item%8#4: uint64 = (+ e#0 1u)
                let (range_item%8#6: uint64, x#27: uint64) = (range_item%8#4, x#3)
                goto block@9
            block@18: // after_for_L15
                let range_item%6#5: uint64 = (+ d#0 1u)
                let (range_item%6#7: uint64, x#24: uint64) = (range_item%6#5, x#5)
                goto block@7
            block@21: // after_for_L14
                let range_item%4#6: uint64 = (+ c#0 1u)
                let (range_item%4#8: uint64, x#21: uint64) = (range_item%4#6, x#7)
                goto block@5
            block@24: // after_for_L13
                let range_item%2#7: uint64 = (+ b#0 1u)
                let (range_item%2#9: uint64, x#18: uint64) = (range_item%2#7, x#9)
                goto block@3
            block@27: // after_for_L12
                let range_item%0#8: uint64 = (+ a#0 1u)
                let (range_item%0#10: uint64, x#15: uint64) = (range_item%0#8, x#11)
                goto block@1
            block@30: // after_for_L11
                let tmp%17#0: bytes = (itob x#13)
                (log tmp%17#0)
                let y#0: uint64 = 0u
                let range_item%18#0: uint64 = 0u
                let range_index%19#0: uint64 = 0u
                let (range_item%18#4: uint64, range_index%19#3: uint64, y#4: uint64) = (range_item%18#0, range_index%19#0, y#0)
                goto block@31
            block@31: // for_header_L25
                let item#1: uint64 = φ(range_item%18#4 <- block@30, range_item%18#5 <- block@32)
                let index#1: uint64 = φ(range_index%19#3 <- block@30, range_index%19#4 <- block@32)
                let y#6: uint64 = φ(y#4 <- block@30, y#5 <- block@32)
                let (item#0: uint64, index#0: uint64, y#3: uint64) = (item#1, index#1, y#6)
                let continue_looping%20#0: uint64 = (< item#0 10u)
                goto continue_looping%20#0 ? block@32 : block@35
            block@32: // for_body_L25
                let tmp%21#0: uint64 = (* item#0 index#0)
                let y#2: uint64 = (+ y#3 tmp%21#0)
                let range_item%18#3: uint64 = (+ item#0 1u)
                let range_index%19#2: uint64 = (+ index#0 1u)
                let (range_item%18#5: uint64, range_index%19#4: uint64, y#5: uint64) = (range_item%18#3, range_index%19#2, y#2)
                goto block@31
            block@35: // after_for_L25
                let tmp%22#0: bytes = (itob y#3)
                (log tmp%22#0)
                return x#13
    
    program clear-state:
        subroutine test_cases.nested_loops.contract.Nested.clear_state_program() -> uint64:
            block@0: // L31
                return 1u