contract test_cases.nested_loops.contract.Nested:
    program approval:
        subroutine test_cases.nested_loops.contract.Nested.approval_program() -> uint64:
            block@0: // L7
                let n#0: uint64 = 2u
                let x#0: uint64 = 0u
                (assert 1u) // Step cannot be zero
                let should_loop%0#0: uint64 = (< 0u n#0)
                goto should_loop%0#0 ? block@1 : block@36
            block@1: // for_preamble_L11
                let range_item%1#0: uint64 = 0u
                goto block@2
            block@2: // for_header_L11
                let range_item%1#1: uint64 = φ(range_item%1#0 <- block@1, range_item%1#13 <- block@35)
                let x#17: uint64 = φ(x#0 <- block@1, x#18 <- block@35)
                let continue_looping%2#0: uint64 = (< range_item%1#1 n#0)
                goto continue_looping%2#0 ? block@3 : block@36
            block@3: // for_body_L11
                let a#0: uint64 = range_item%1#1
                (assert 1u) // Step cannot be zero
                let should_loop%3#0: uint64 = (< 0u n#0)
                goto should_loop%3#0 ? block@4 : block@33
            block@4: // for_preamble_L12
                let range_item%4#0: uint64 = 0u
                goto block@5
            block@5: // for_header_L12
                let range_item%4#1: uint64 = φ(range_item%4#0 <- block@4, range_item%4#11 <- block@32)
                let x#14: uint64 = φ(x#17 <- block@4, x#16 <- block@32)
                let continue_looping%5#0: uint64 = (< range_item%4#1 n#0)
                goto continue_looping%5#0 ? block@6 : block@33
            block@6: // for_body_L12
                let b#0: uint64 = range_item%4#1
                (assert 1u) // Step cannot be zero
                let should_loop%6#0: uint64 = (< 0u n#0)
                goto should_loop%6#0 ? block@7 : block@30
            block@7: // for_preamble_L13
                let range_item%7#0: uint64 = 0u
                goto block@8
            block@8: // for_header_L13
                let range_item%7#1: uint64 = φ(range_item%7#0 <- block@7, range_item%7#9 <- block@29)
                let x#11: uint64 = φ(x#14 <- block@7, x#13 <- block@29)
                let continue_looping%8#0: uint64 = (< range_item%7#1 n#0)
                goto continue_looping%8#0 ? block@9 : block@30
            block@9: // for_body_L13
                let c#0: uint64 = range_item%7#1
                (assert 1u) // Step cannot be zero
                let should_loop%9#0: uint64 = (< 0u n#0)
                goto should_loop%9#0 ? block@10 : block@27
            block@10: // for_preamble_L14
                let range_item%10#0: uint64 = 0u
                goto block@11
            block@11: // for_header_L14
                let range_item%10#1: uint64 = φ(range_item%10#0 <- block@10, range_item%10#7 <- block@26)
                let x#8: uint64 = φ(x#11 <- block@10, x#10 <- block@26)
                let continue_looping%11#0: uint64 = (< range_item%10#1 n#0)
                goto continue_looping%11#0 ? block@12 : block@27
            block@12: // for_body_L14
                let d#0: uint64 = range_item%10#1
                (assert 1u) // Step cannot be zero
                let should_loop%12#0: uint64 = (< 0u n#0)
                goto should_loop%12#0 ? block@13 : block@24
            block@13: // for_preamble_L15
                let range_item%13#0: uint64 = 0u
                goto block@14
            block@14: // for_header_L15
                let range_item%13#1: uint64 = φ(range_item%13#0 <- block@13, range_item%13#5 <- block@23)
                let x#5: uint64 = φ(x#8 <- block@13, x#7 <- block@23)
                let continue_looping%14#0: uint64 = (< range_item%13#1 n#0)
                goto continue_looping%14#0 ? block@15 : block@24
            block@15: // for_body_L15
                let e#0: uint64 = range_item%13#1
                (assert 1u) // Step cannot be zero
                let should_loop%15#0: uint64 = (< 0u n#0)
                goto should_loop%15#0 ? block@16 : block@21
            block@16: // for_preamble_L16
                let range_item%16#0: uint64 = 0u
                goto block@17
            block@17: // for_header_L16
                let range_item%16#1: uint64 = φ(range_item%16#0 <- block@16, range_item%16#3 <- block@20)
                let x#3: uint64 = φ(x#5 <- block@16, x#2 <- block@20)
                let continue_looping%17#0: uint64 = (< range_item%16#1 n#0)
                goto continue_looping%17#0 ? block@18 : block@21
            block@18: // for_body_L16
                let f#0: uint64 = range_item%16#1
                let tmp%18#0: uint64 = (+ a#0 b#0)
                let tmp%19#0: uint64 = (+ tmp%18#0 c#0)
                let tmp%20#0: uint64 = (+ tmp%19#0 d#0)
                let tmp%21#0: uint64 = (+ tmp%20#0 e#0)
                let tmp%22#0: uint64 = (+ tmp%21#0 f#0)
                let x#2: uint64 = (+ x#3 tmp%22#0)
                goto block@19
            block@19: // for_footer_L16
                goto block@20
            block@20: // for_increment_L16
                let range_item%16#3: uint64 = (+ range_item%16#1 1u)
                goto block@17
            block@21: // after_for_L16
                let x#7: uint64 = φ(x#5 <- block@15, x#3 <- block@17)
                goto block@22
            block@22: // for_footer_L15
                goto block@23
            block@23: // for_increment_L15
                let range_item%13#5: uint64 = (+ range_item%13#1 1u)
                goto block@14
            block@24: // after_for_L15
                let x#10: uint64 = φ(x#8 <- block@12, x#5 <- block@14)
                goto block@25
            block@25: // for_footer_L14
                goto block@26
            block@26: // for_increment_L14
                let range_item%10#7: uint64 = (+ range_item%10#1 1u)
                goto block@11
            block@27: // after_for_L14
                let x#13: uint64 = φ(x#11 <- block@9, x#8 <- block@11)
                goto block@28
            block@28: // for_footer_L13
                goto block@29
            block@29: // for_increment_L13
                let range_item%7#9: uint64 = (+ range_item%7#1 1u)
                goto block@8
            block@30: // after_for_L13
                let x#16: uint64 = φ(x#14 <- block@6, x#11 <- block@8)
                goto block@31
            block@31: // for_footer_L12
                goto block@32
            block@32: // for_increment_L12
                let range_item%4#11: uint64 = (+ range_item%4#1 1u)
                goto block@5
            block@33: // after_for_L12
                let x#18: uint64 = φ(x#17 <- block@3, x#14 <- block@5)
                let a#16: uint64 = (+ a#0 n#0)
                goto block@34
            block@34: // for_footer_L11
                goto block@35
            block@35: // for_increment_L11
                let range_item%1#13: uint64 = (+ range_item%1#1 1u)
                goto block@2
            block@36: // after_for_L11
                let x#19: uint64 = φ(x#0 <- block@0, x#17 <- block@2)
                let tmp%23#0: bytes = (itob x#19)
                (log tmp%23#0)
                let y#0: uint64 = 0u
                (assert 1u) // Step cannot be zero
                let should_loop%24#0: uint64 = (< 0u 10u)
                goto should_loop%24#0 ? block@37 : block@42
            block@37: // for_preamble_L25
                let range_item%25#0: uint64 = 0u
                let range_index%26#0: uint64 = 0u
                goto block@38
            block@38: // for_header_L25
                let range_item%25#1: uint64 = φ(range_item%25#0 <- block@37, range_item%25#3 <- block@41)
                let range_index%26#3: uint64 = φ(range_index%26#0 <- block@37, range_index%26#2 <- block@41)
                let y#3: uint64 = φ(y#0 <- block@37, y#2 <- block@41)
                let continue_looping%27#0: uint64 = (< range_item%25#1 10u)
                goto continue_looping%27#0 ? block@39 : block@42
            block@39: // for_body_L25
                let item#0: uint64 = range_item%25#1
                let index#0: uint64 = range_index%26#3
                let tmp%28#0: uint64 = (* item#0 index#0)
                let y#2: uint64 = (+ y#3 tmp%28#0)
                goto block@40
            block@40: // for_footer_L25
                goto block@41
            block@41: // for_increment_L25
                let range_item%25#3: uint64 = (+ range_item%25#1 1u)
                let range_index%26#2: uint64 = (+ range_index%26#3 1u)
                goto block@38
            block@42: // after_for_L25
                let y#4: uint64 = φ(y#0 <- block@36, y#3 <- block@38)
                let tmp%29#0: bytes = (itob y#4)
                (log tmp%29#0)
                return x#19
    
    program clear-state:
        subroutine test_cases.nested_loops.contract.Nested.clear_state_program() -> uint64:
            block@0: // L31
                return 1u