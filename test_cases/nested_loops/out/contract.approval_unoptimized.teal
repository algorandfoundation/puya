#pragma version 8

// test_cases.nested_loops.contract.Nested.approval_program() -> uint64:
main:
        byte ""
        dupn 12

main_block@0:
        int 2
        int 0
        int 1
        assert // Step cannot be zero
        int 0

main_for_header@1:
        dup
        dig 3
        <
        bz main_after_for@30

main_for_body@2:
        dup
        bury 16
        int 1
        assert // Step cannot be zero
        int 0
        bury 8

main_for_header@3:
        dig 7
        dig 3
        <
        bz main_after_for@27

main_for_body@4:
        dig 7
        bury 15
        int 1
        assert // Step cannot be zero
        int 0
        bury 7

main_for_header@5:
        dig 6
        dig 3
        <
        bz main_after_for@24

main_for_body@6:
        dig 6
        bury 14
        int 1
        assert // Step cannot be zero
        int 0
        bury 6

main_for_header@7:
        dig 5
        dig 3
        <
        bz main_after_for@21

main_for_body@8:
        dig 5
        bury 13
        int 1
        assert // Step cannot be zero
        int 0
        bury 5

main_for_header@9:
        dig 4
        dig 3
        <
        bz main_after_for@18

main_for_body@10:
        dig 4
        bury 12
        int 1
        assert // Step cannot be zero
        int 0
        bury 10

main_for_header@11:
        dig 9
        dig 3
        <
        bz main_after_for@15

main_for_body@12:
        dig 9
        dig 16
        dig 16
        +
        dig 15
        +
        dig 14
        +
        dig 13
        +
        +
        dig 2
        +
        bury 2

main_for_footer@13:

main_for_increment@14:
        dig 9
        int 1
        +
        bury 10
        b main_for_header@11

main_after_for@15:

main_for_footer@16:

main_for_increment@17:
        dig 4
        int 1
        +
        bury 5
        b main_for_header@9

main_after_for@18:

main_for_footer@19:

main_for_increment@20:
        dig 5
        int 1
        +
        bury 6
        b main_for_header@7

main_after_for@21:

main_for_footer@22:

main_for_increment@23:
        dig 6
        int 1
        +
        bury 7
        b main_for_header@5

main_after_for@24:

main_for_footer@25:

main_for_increment@26:
        dig 7
        int 1
        +
        bury 8
        b main_for_header@3

main_after_for@27:
        dig 15
        dig 3
        +
        pop

main_for_footer@28:

main_for_increment@29:
        dup
        int 1
        +
        bury 1
        b main_for_header@1

main_after_for@30:
        dig 1
        itob
        log
        int 0
        bury 4
        int 1
        assert // Step cannot be zero
        int 0
        bury 9
        int 0
        bury 11

main_for_header@31:
        dig 8
        int 10
        <
        bz main_after_for@35

main_for_body@32:
        dig 8
        dig 11
        *
        dig 4
        +
        bury 4

main_for_footer@33:

main_for_increment@34:
        dig 8
        int 1
        +
        bury 9
        dig 10
        int 1
        +
        bury 11
        b main_for_header@31

main_after_for@35:
        dig 3
        itob
        log
        dig 1
        return

