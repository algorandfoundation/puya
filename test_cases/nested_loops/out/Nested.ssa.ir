contract test_cases.nested_loops.contract.Nested:
    program approval:
        subroutine test_cases.nested_loops.contract.Nested.approval_program() -> uint64:
            block@0: // L7
                let n#0: uint64 = 2u
                let x#0: uint64 = 0u
                (assert 1u) // Step cannot be zero
                let range_item%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L11
                let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#8 <- block@29)
                let x#13: uint64 = φ(x#0 <- block@0, x#11 <- block@29)
                let continue_looping%0#0: bool = (< range_item%0#1 n#0)
                goto continue_looping%0#0 ? block@2 : block@30
            block@2: // for_body_L11
                let a#0: uint64 = range_item%0#1
                (assert 1u) // Step cannot be zero
                let range_item%1#0: uint64 = 0u
                goto block@3
            block@3: // for_header_L12
                let range_item%1#1: uint64 = φ(range_item%1#0 <- block@2, range_item%1#7 <- block@26)
                let x#11: uint64 = φ(x#13 <- block@2, x#9 <- block@26)
                let continue_looping%1#0: bool = (< range_item%1#1 n#0)
                goto continue_looping%1#0 ? block@4 : block@27
            block@4: // for_body_L12
                let b#0: uint64 = range_item%1#1
                (assert 1u) // Step cannot be zero
                let range_item%2#0: uint64 = 0u
                goto block@5
            block@5: // for_header_L13
                let range_item%2#1: uint64 = φ(range_item%2#0 <- block@4, range_item%2#6 <- block@23)
                let x#9: uint64 = φ(x#11 <- block@4, x#7 <- block@23)
                let continue_looping%2#0: bool = (< range_item%2#1 n#0)
                goto continue_looping%2#0 ? block@6 : block@24
            block@6: // for_body_L13
                let c#0: uint64 = range_item%2#1
                (assert 1u) // Step cannot be zero
                let range_item%3#0: uint64 = 0u
                goto block@7
            block@7: // for_header_L14
                let range_item%3#1: uint64 = φ(range_item%3#0 <- block@6, range_item%3#5 <- block@20)
                let x#7: uint64 = φ(x#9 <- block@6, x#5 <- block@20)
                let continue_looping%3#0: bool = (< range_item%3#1 n#0)
                goto continue_looping%3#0 ? block@8 : block@21
            block@8: // for_body_L14
                let d#0: uint64 = range_item%3#1
                (assert 1u) // Step cannot be zero
                let range_item%4#0: uint64 = 0u
                goto block@9
            block@9: // for_header_L15
                let range_item%4#1: uint64 = φ(range_item%4#0 <- block@8, range_item%4#4 <- block@17)
                let x#5: uint64 = φ(x#7 <- block@8, x#3 <- block@17)
                let continue_looping%4#0: bool = (< range_item%4#1 n#0)
                goto continue_looping%4#0 ? block@10 : block@18
            block@10: // for_body_L15
                let e#0: uint64 = range_item%4#1
                (assert 1u) // Step cannot be zero
                let range_item%5#0: uint64 = 0u
                goto block@11
            block@11: // for_header_L16
                let range_item%5#1: uint64 = φ(range_item%5#0 <- block@10, range_item%5#3 <- block@14)
                let x#3: uint64 = φ(x#5 <- block@10, x#2 <- block@14)
                let continue_looping%5#0: bool = (< range_item%5#1 n#0)
                goto continue_looping%5#0 ? block@12 : block@15
            block@12: // for_body_L16
                let f#0: uint64 = range_item%5#1
                let tmp%0#0: uint64 = (+ a#0 b#0)
                let tmp%1#0: uint64 = (+ tmp%0#0 c#0)
                let tmp%2#0: uint64 = (+ tmp%1#0 d#0)
                let tmp%3#0: uint64 = (+ tmp%2#0 e#0)
                let tmp%4#0: uint64 = (+ tmp%3#0 f#0)
                let x#2: uint64 = (+ x#3 tmp%4#0)
                goto block@13
            block@13: // for_footer_L16
                goto block@14
            block@14: // for_increment_L16
                let range_item%5#3: uint64 = (+ range_item%5#1 1u)
                goto block@11
            block@15: // after_for_L16
                goto block@16
            block@16: // for_footer_L15
                goto block@17
            block@17: // for_increment_L15
                let range_item%4#4: uint64 = (+ range_item%4#1 1u)
                goto block@9
            block@18: // after_for_L15
                goto block@19
            block@19: // for_footer_L14
                goto block@20
            block@20: // for_increment_L14
                let range_item%3#5: uint64 = (+ range_item%3#1 1u)
                goto block@7
            block@21: // after_for_L14
                goto block@22
            block@22: // for_footer_L13
                goto block@23
            block@23: // for_increment_L13
                let range_item%2#6: uint64 = (+ range_item%2#1 1u)
                goto block@5
            block@24: // after_for_L13
                goto block@25
            block@25: // for_footer_L12
                goto block@26
            block@26: // for_increment_L12
                let range_item%1#7: uint64 = (+ range_item%1#1 1u)
                goto block@3
            block@27: // after_for_L12
                let a#11: uint64 = (+ a#0 n#0)
                goto block@28
            block@28: // for_footer_L11
                goto block@29
            block@29: // for_increment_L11
                let range_item%0#8: uint64 = (+ range_item%0#1 1u)
                goto block@1
            block@30: // after_for_L11
                let tmp%5#0: bytes = (itob x#13)
                (log tmp%5#0)
                let y#0: uint64 = 0u
                (assert 1u) // Step cannot be zero
                let range_item%6#0: uint64 = 0u
                let range_index%0#0: uint64 = 0u
                goto block@31
            block@31: // for_header_L25
                let range_item%6#1: uint64 = φ(range_item%6#0 <- block@30, range_item%6#3 <- block@34)
                let range_index%0#3: uint64 = φ(range_index%0#0 <- block@30, range_index%0#2 <- block@34)
                let y#3: uint64 = φ(y#0 <- block@30, y#2 <- block@34)
                let continue_looping%6#0: bool = (< range_item%6#1 10u)
                goto continue_looping%6#0 ? block@32 : block@35
            block@32: // for_body_L25
                let item#0: uint64 = range_item%6#1
                let index#0: uint64 = range_index%0#3
                let tmp%6#0: uint64 = (* item#0 index#0)
                let y#2: uint64 = (+ y#3 tmp%6#0)
                goto block@33
            block@33: // for_footer_L25
                goto block@34
            block@34: // for_increment_L25
                let range_item%6#3: uint64 = (+ range_item%6#1 1u)
                let range_index%0#2: uint64 = (+ range_index%0#3 1u)
                goto block@31
            block@35: // after_for_L25
                let tmp%7#0: bytes = (itob y#3)
                (log tmp%7#0)
                return x#13
    
    program clear-state:
        subroutine test_cases.nested_loops.contract.Nested.clear_state_program() -> uint64:
            block@0: // L31
                return 1u