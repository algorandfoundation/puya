contract test_cases.nested_loops.contract.Nested:
    program approval:
        subroutine test_cases.nested_loops.contract.Nested.approval_program() -> uint64:
            block@0: // L7
                let x#0: uint64 = 0u
                let range_item%0#0: uint64 = 0u
                let a#7: uint64 = range_item%0#0
                let x#10: uint64 = x#0
                goto block@1
            block@1: // for_header_L11
                let a#0: uint64 = a#7
                let x#7: uint64 = x#10
                let continue_looping%1#0: uint64 = (< a#0 2u)
                goto continue_looping%1#0 ? block@2 : block@24
            block@2: // for_body_L11
                let range_item%2#0: uint64 = 0u
                let b#1: uint64 = range_item%2#0
                let x#13: uint64 = x#7
                goto block@3
            block@3: // for_header_L12
                let b#0: uint64 = b#1
                let x#6: uint64 = x#13
                let continue_looping%3#0: uint64 = (< b#0 2u)
                goto continue_looping%3#0 ? block@4 : block@22
            block@4: // for_body_L12
                let range_item%4#0: uint64 = 0u
                let c#1: uint64 = range_item%4#0
                let x#16: uint64 = x#6
                goto block@5
            block@5: // for_header_L13
                let c#0: uint64 = c#1
                let x#5: uint64 = x#16
                let continue_looping%5#0: uint64 = (< c#0 2u)
                goto continue_looping%5#0 ? block@6 : block@20
            block@6: // for_body_L13
                let range_item%6#0: uint64 = 0u
                let d#1: uint64 = range_item%6#0
                let x#19: uint64 = x#5
                goto block@7
            block@7: // for_header_L14
                let d#0: uint64 = d#1
                let x#4: uint64 = x#19
                let continue_looping%7#0: uint64 = (< d#0 2u)
                goto continue_looping%7#0 ? block@8 : block@18
            block@8: // for_body_L14
                let range_item%8#0: uint64 = 0u
                let e#1: uint64 = range_item%8#0
                let x#22: uint64 = x#4
                goto block@9
            block@9: // for_header_L15
                let e#0: uint64 = e#1
                let x#3: uint64 = x#22
                let continue_looping%9#0: uint64 = (< e#0 2u)
                goto continue_looping%9#0 ? block@10 : block@16
            block@10: // for_body_L15
                let range_item%10#0: uint64 = 0u
                let f#1: uint64 = range_item%10#0
                let x#25: uint64 = x#3
                goto block@11
            block@11: // for_header_L16
                let f#0: uint64 = f#1
                let x#1: uint64 = x#25
                let continue_looping%11#0: uint64 = (< f#0 2u)
                goto continue_looping%11#0 ? block@12 : block@14
            block@12: // for_body_L16
                let tmp%12#0: uint64 = (+ a#0 b#0)
                let tmp%13#0: uint64 = (+ tmp%12#0 c#0)
                let tmp%14#0: uint64 = (+ tmp%13#0 d#0)
                let tmp%15#0: uint64 = (+ tmp%14#0 e#0)
                let tmp%16#0: uint64 = (+ tmp%15#0 f#0)
                let x#2: uint64 = (+ x#1 tmp%16#0)
                let range_item%10#2: uint64 = (+ f#0 1u)
                let f#1: uint64 = range_item%10#2
                let x#25: uint64 = x#2
                goto block@11
            block@14: // after_for_L16
                let range_item%8#3: uint64 = (+ e#0 1u)
                let e#1: uint64 = range_item%8#3
                let x#22: uint64 = x#1
                goto block@9
            block@16: // after_for_L15
                let range_item%6#4: uint64 = (+ d#0 1u)
                let d#1: uint64 = range_item%6#4
                let x#19: uint64 = x#3
                goto block@7
            block@18: // after_for_L14
                let range_item%4#5: uint64 = (+ c#0 1u)
                let c#1: uint64 = range_item%4#5
                let x#16: uint64 = x#4
                goto block@5
            block@20: // after_for_L13
                let range_item%2#6: uint64 = (+ b#0 1u)
                let b#1: uint64 = range_item%2#6
                let x#13: uint64 = x#5
                goto block@3
            block@22: // after_for_L12
                let a#6: uint64 = (+ a#0 2u)
                let range_item%0#7: uint64 = (+ a#0 1u)
                let a#7: uint64 = range_item%0#7
                let x#10: uint64 = x#6
                goto block@1
            block@24: // after_for_L11
                let tmp%17#0: bytes = (itob x#7)
                (log tmp%17#0)
                let y#0: uint64 = 0u
                let range_item%18#0: uint64 = 0u
                let range_index%19#0: uint64 = 0u
                let item#1: uint64 = range_item%18#0
                let index#1: uint64 = range_index%19#0
                let y#5: uint64 = y#0
                goto block@25
            block@25: // for_header_L25
                let item#0: uint64 = item#1
                let index#0: uint64 = index#1
                let y#1: uint64 = y#5
                let continue_looping%20#0: uint64 = (< item#0 10u)
                goto continue_looping%20#0 ? block@26 : block@28
            block@26: // for_body_L25
                let tmp%21#0: uint64 = (* item#0 index#0)
                let y#2: uint64 = (+ y#1 tmp%21#0)
                let range_item%18#2: uint64 = (+ item#0 1u)
                let range_index%19#2: uint64 = (+ index#0 1u)
                let item#1: uint64 = range_item%18#2
                let index#1: uint64 = range_index%19#2
                let y#5: uint64 = y#2
                goto block@25
            block@28: // after_for_L25
                let tmp%22#0: bytes = (itob y#1)
                (log tmp%22#0)
                return x#7
    
    program clear-state:
        subroutine test_cases.nested_loops.contract.Nested.clear_state_program() -> uint64:
            block@0: // L31
                return 1u