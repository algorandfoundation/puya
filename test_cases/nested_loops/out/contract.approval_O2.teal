#pragma version 10

test_cases.nested_loops.contract.Nested.approval_program:
    byte ""
    dupn 7
    // nested_loops/contract.py:9
    // x = UInt64(0)
    int 0
    // nested_loops/contract.py:11
    // for a in urange(n):
    int 0

main_for_header@1:
    // nested_loops/contract.py:11
    // for a in urange(n):
    dup
    // nested_loops/contract.py:8
    // n = UInt64(LOOP_ITERATIONS)
    int 2
    // nested_loops/contract.py:11
    // for a in urange(n):
    <
    bz main_after_for@30
    // nested_loops/contract.py:12
    // for b in urange(n):
    int 0
    bury 10

main_for_header@3:
    // nested_loops/contract.py:12
    // for b in urange(n):
    dig 9
    // nested_loops/contract.py:8
    // n = UInt64(LOOP_ITERATIONS)
    int 2
    // nested_loops/contract.py:12
    // for b in urange(n):
    <
    bz main_after_for@27
    // nested_loops/contract.py:13
    // for c in urange(n):
    int 0
    bury 9

main_for_header@5:
    // nested_loops/contract.py:13
    // for c in urange(n):
    dig 8
    // nested_loops/contract.py:8
    // n = UInt64(LOOP_ITERATIONS)
    int 2
    // nested_loops/contract.py:13
    // for c in urange(n):
    <
    bz main_after_for@24
    // nested_loops/contract.py:14
    // for d in urange(n):
    int 0
    bury 8

main_for_header@7:
    // nested_loops/contract.py:14
    // for d in urange(n):
    dig 7
    // nested_loops/contract.py:8
    // n = UInt64(LOOP_ITERATIONS)
    int 2
    // nested_loops/contract.py:14
    // for d in urange(n):
    <
    bz main_after_for@21
    // nested_loops/contract.py:15
    // for e in urange(n):
    int 0
    bury 7

main_for_header@9:
    // nested_loops/contract.py:15
    // for e in urange(n):
    dig 6
    // nested_loops/contract.py:8
    // n = UInt64(LOOP_ITERATIONS)
    int 2
    // nested_loops/contract.py:15
    // for e in urange(n):
    <
    bz main_after_for@18
    // nested_loops/contract.py:16
    // for f in urange(n):
    int 0
    bury 6

main_for_header@11:
    // nested_loops/contract.py:16
    // for f in urange(n):
    dig 5
    // nested_loops/contract.py:8
    // n = UInt64(LOOP_ITERATIONS)
    int 2
    // nested_loops/contract.py:16
    // for f in urange(n):
    <
    bz main_after_for@15
    // nested_loops/contract.py:17
    // x += a + b + c + d + e + f
    dup
    dig 10
    +
    dig 9
    +
    dig 8
    +
    dig 7
    +
    dig 6
    dup
    cover 2
    +
    dig 3
    +
    bury 3
    // nested_loops/contract.py:16
    // for f in urange(n):
    int 1
    +
    bury 6
    b main_for_header@11

main_after_for@15:
    // nested_loops/contract.py:15
    // for e in urange(n):
    dig 6
    int 1
    +
    bury 7
    b main_for_header@9

main_after_for@18:
    // nested_loops/contract.py:14
    // for d in urange(n):
    dig 7
    int 1
    +
    bury 8
    b main_for_header@7

main_after_for@21:
    // nested_loops/contract.py:13
    // for c in urange(n):
    dig 8
    int 1
    +
    bury 9
    b main_for_header@5

main_after_for@24:
    // nested_loops/contract.py:12
    // for b in urange(n):
    dig 9
    int 1
    +
    bury 10
    b main_for_header@3

main_after_for@27:
    // nested_loops/contract.py:11
    // for a in urange(n):
    dup
    int 1
    +
    bury 1
    b main_for_header@1

main_after_for@30:
    // nested_loops/contract.py:22
    // log(itob(x))
    dig 1
    itob
    log
    // nested_loops/contract.py:24
    // y = UInt64(0)
    int 0
    bury 3
    // nested_loops/contract.py:25
    // for index, item in uenumerate(urange(UInt64(10))):
    int 0
    int 0
    bury 6
    bury 4

main_for_header@31:
    // nested_loops/contract.py:25
    // for index, item in uenumerate(urange(UInt64(10))):
    dig 3
    int 10
    <
    bz main_after_for@35
    // nested_loops/contract.py:26
    // y += item * index
    dig 3
    dup
    dig 6
    dup
    cover 3
    *
    dig 5
    +
    bury 5
    // nested_loops/contract.py:25
    // for index, item in uenumerate(urange(UInt64(10))):
    int 1
    +
    swap
    int 1
    +
    bury 6
    bury 4
    b main_for_header@31

main_after_for@35:
    // nested_loops/contract.py:28
    // log(itob(y))
    dig 2
    itob
    log
    // nested_loops/contract.py:29
    // return x
    dig 1
    return
