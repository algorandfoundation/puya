main test_cases.nested_loops.contract.Nested.approval_program:
    block@0: // L7
        let n#0: uint64 = 2u
        let x#0: uint64 = 0u
        (assert 1u) // Step cannot be zero
        let a#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L11
        let a#1: uint64 = φ(a#0 <- block@0, a#8 <- block@23)
        let x#7: uint64 = φ(x#0 <- block@0, x#6 <- block@23)
        let continue_looping%0#0: bool = (< a#1 n#0)
        goto continue_looping%0#0 ? block@2 : block@24
    block@2: // for_body_L12
        (assert 1u) // Step cannot be zero
        let b#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L12
        let b#1: uint64 = φ(b#0 <- block@2, b#6 <- block@21)
        let x#6: uint64 = φ(x#7 <- block@2, x#5 <- block@21)
        let continue_looping%1#0: bool = (< b#1 n#0)
        goto continue_looping%1#0 ? block@4 : block@22
    block@4: // for_body_L13
        (assert 1u) // Step cannot be zero
        let c#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L13
        let c#1: uint64 = φ(c#0 <- block@4, c#5 <- block@19)
        let x#5: uint64 = φ(x#6 <- block@4, x#4 <- block@19)
        let continue_looping%2#0: bool = (< c#1 n#0)
        goto continue_looping%2#0 ? block@6 : block@20
    block@6: // for_body_L14
        (assert 1u) // Step cannot be zero
        let d#0: uint64 = 0u
        goto block@7
    block@7: // for_header_L14
        let d#1: uint64 = φ(d#0 <- block@6, d#4 <- block@17)
        let x#4: uint64 = φ(x#5 <- block@6, x#3 <- block@17)
        let continue_looping%3#0: bool = (< d#1 n#0)
        goto continue_looping%3#0 ? block@8 : block@18
    block@8: // for_body_L15
        (assert 1u) // Step cannot be zero
        let e#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L15
        let e#1: uint64 = φ(e#0 <- block@8, e#3 <- block@15)
        let x#3: uint64 = φ(x#4 <- block@8, x#1 <- block@15)
        let continue_looping%4#0: bool = (< e#1 n#0)
        goto continue_looping%4#0 ? block@10 : block@16
    block@10: // for_body_L16
        (assert 1u) // Step cannot be zero
        let f#0: uint64 = 0u
        goto block@11
    block@11: // for_header_L16
        let f#1: uint64 = φ(f#0 <- block@10, f#2 <- block@13)
        let x#1: uint64 = φ(x#3 <- block@10, x#2 <- block@13)
        let continue_looping%5#0: bool = (< f#1 n#0)
        goto continue_looping%5#0 ? block@12 : block@14
    block@12: // for_body_L17
        let tmp%0#0: uint64 = (+ a#1 b#1)
        let tmp%1#0: uint64 = (+ tmp%0#0 c#1)
        let tmp%2#0: uint64 = (+ tmp%1#0 d#1)
        let tmp%3#0: uint64 = (+ tmp%2#0 e#1)
        let tmp%4#0: uint64 = (+ tmp%3#0 f#1)
        let tmp%5#0: uint64 = (+ x#1 tmp%4#0)
        let x#2: uint64 = tmp%5#0
        goto block@13
    block@13: // for_footer_L16
        let f#2: uint64 = (+ f#1 1u)
        goto block@11
    block@14: // after_for_L16
        goto block@15
    block@15: // for_footer_L15
        let e#3: uint64 = (+ e#1 1u)
        goto block@9
    block@16: // after_for_L15
        goto block@17
    block@17: // for_footer_L14
        let d#4: uint64 = (+ d#1 1u)
        goto block@7
    block@18: // after_for_L14
        goto block@19
    block@19: // for_footer_L13
        let c#5: uint64 = (+ c#1 1u)
        goto block@5
    block@20: // after_for_L13
        goto block@21
    block@21: // for_footer_L12
        let b#6: uint64 = (+ b#1 1u)
        goto block@3
    block@22: // after_for_L12
        let tmp%6#0: uint64 = (+ a#1 n#0)
        let a#7: uint64 = tmp%6#0
        goto block@23
    block@23: // for_footer_L11
        let a#8: uint64 = (+ a#1 1u)
        goto block@1
    block@24: // after_for_L11
        let tmp%7#0: bytes = (itob x#7)
        (log tmp%7#0)
        let y#0: uint64 = 0u
        (assert 1u) // Step cannot be zero
        let item#0: uint64 = 0u
        let index#0: uint64 = 0u
        goto block@25
    block@25: // for_header_L25
        let item#1: uint64 = φ(item#0 <- block@24, item#2 <- block@27)
        let index#1: uint64 = φ(index#0 <- block@24, index#2 <- block@27)
        let y#1: uint64 = φ(y#0 <- block@24, y#2 <- block@27)
        let continue_looping%6#0: bool = (< item#1 10u)
        goto continue_looping%6#0 ? block@26 : block@28
    block@26: // for_body_L26
        let tmp%8#0: uint64 = (* item#1 index#1)
        let tmp%9#0: uint64 = (+ y#1 tmp%8#0)
        let y#2: uint64 = tmp%9#0
        goto block@27
    block@27: // for_footer_L25
        let item#2: uint64 = (+ item#1 1u)
        let index#2: uint64 = (+ index#1 1u)
        goto block@25
    block@28: // after_for_L25
        let tmp%10#0: bytes = (itob y#1)
        (log tmp%10#0)
        return x#7