main test_cases.nested_loops.contract.Nested.approval_program:
    block@0: // L7
        let x#0: uint64 = 0u
        let value_internal%0#0: uint64 = 0u
        goto block@1
    block@1: // for_header_L11
        let a#0: uint64 = φ(value_internal%0#0 <- block@0, value_internal%0#2 <- block@22)
        let x#7: uint64 = φ(x#0 <- block@0, x#6 <- block@22)
        let continue_looping%0#0: bool = (< a#0 2u)
        goto continue_looping%0#0 ? block@2 : block@24
    block@2: // for_body_L12
        let value_internal%1#0: uint64 = 0u
        goto block@3
    block@3: // for_header_L12
        let b#0: uint64 = φ(value_internal%1#0 <- block@2, value_internal%1#2 <- block@20)
        let x#6: uint64 = φ(x#7 <- block@2, x#5 <- block@20)
        let continue_looping%1#0: bool = (< b#0 2u)
        goto continue_looping%1#0 ? block@4 : block@22
    block@4: // for_body_L13
        let value_internal%2#0: uint64 = 0u
        goto block@5
    block@5: // for_header_L13
        let c#0: uint64 = φ(value_internal%2#0 <- block@4, value_internal%2#2 <- block@18)
        let x#5: uint64 = φ(x#6 <- block@4, x#4 <- block@18)
        let continue_looping%2#0: bool = (< c#0 2u)
        goto continue_looping%2#0 ? block@6 : block@20
    block@6: // for_body_L14
        let value_internal%3#0: uint64 = 0u
        goto block@7
    block@7: // for_header_L14
        let d#0: uint64 = φ(value_internal%3#0 <- block@6, value_internal%3#2 <- block@16)
        let x#4: uint64 = φ(x#5 <- block@6, x#3 <- block@16)
        let continue_looping%3#0: bool = (< d#0 2u)
        goto continue_looping%3#0 ? block@8 : block@18
    block@8: // for_body_L15
        let value_internal%4#0: uint64 = 0u
        goto block@9
    block@9: // for_header_L15
        let e#0: uint64 = φ(value_internal%4#0 <- block@8, value_internal%4#2 <- block@14)
        let x#3: uint64 = φ(x#4 <- block@8, x#1 <- block@14)
        let continue_looping%4#0: bool = (< e#0 2u)
        goto continue_looping%4#0 ? block@10 : block@16
    block@10: // for_body_L16
        let value_internal%5#0: uint64 = 0u
        goto block@11
    block@11: // for_header_L16
        let f#0: uint64 = φ(value_internal%5#0 <- block@10, value_internal%5#2 <- block@12)
        let x#1: uint64 = φ(x#3 <- block@10, x#2 <- block@12)
        let continue_looping%5#0: bool = (< f#0 2u)
        goto continue_looping%5#0 ? block@12 : block@14
    block@12: // for_body_L17
        let tmp%0#0: uint64 = (+ a#0 b#0)
        let tmp%1#0: uint64 = (+ tmp%0#0 c#0)
        let tmp%2#0: uint64 = (+ tmp%1#0 d#0)
        let tmp%3#0: uint64 = (+ tmp%2#0 e#0)
        let tmp%4#0: uint64 = (+ tmp%3#0 f#0)
        let x#2: uint64 = (+ x#1 tmp%4#0)
        let value_internal%5#2: uint64 = (+ f#0 1u)
        goto block@11
    block@14: // after_for_L16
        let value_internal%4#2: uint64 = (+ e#0 1u)
        goto block@9
    block@16: // after_for_L15
        let value_internal%3#2: uint64 = (+ d#0 1u)
        goto block@7
    block@18: // after_for_L14
        let value_internal%2#2: uint64 = (+ c#0 1u)
        goto block@5
    block@20: // after_for_L13
        let value_internal%1#2: uint64 = (+ b#0 1u)
        goto block@3
    block@22: // after_for_L12
        let value_internal%0#2: uint64 = (+ a#0 1u)
        goto block@1
    block@24: // after_for_L11
        let tmp%7#0: bytes = (itob x#7)
        (log tmp%7#0)
        let y#0: uint64 = 0u
        let value_internal%6#0: uint64 = 0u
        let item_index_internal%0#0: uint64 = 0u
        goto block@25
    block@25: // for_header_L25
        let item#0: uint64 = φ(value_internal%6#0 <- block@24, value_internal%6#2 <- block@26)
        let index#0: uint64 = φ(item_index_internal%0#0 <- block@24, item_index_internal%0#2 <- block@26)
        let y#1: uint64 = φ(y#0 <- block@24, y#2 <- block@26)
        let continue_looping%6#0: bool = (< item#0 10u)
        goto continue_looping%6#0 ? block@26 : block@28
    block@26: // for_body_L26
        let tmp%8#0: uint64 = (* item#0 index#0)
        let y#2: uint64 = (+ y#1 tmp%8#0)
        let value_internal%6#2: uint64 = (+ item#0 1u)
        let item_index_internal%0#2: uint64 = (+ index#0 1u)
        goto block@25
    block@28: // after_for_L25
        let tmp%10#0: bytes = (itob y#1)
        (log tmp%10#0)
        return x#7