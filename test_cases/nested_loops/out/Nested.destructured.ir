contract test_cases.nested_loops.contract.Nested:
    program approval:
        subroutine test_cases.nested_loops.contract.Nested.approval_program() -> uint64:
            block@0: // L7
                let x#0: uint64 = 0u
                let range_item%0#0: uint64 = 0u
                let a#0: uint64 = range_item%0#0
                goto block@1
            block@1: // for_header_L11
                let continue_looping%0#0: bool = (< a#0 2u)
                goto continue_looping%0#0 ? block@2 : block@24
            block@2: // for_body_L12
                let range_item%1#0: uint64 = 0u
                let b#0: uint64 = range_item%1#0
                goto block@3
            block@3: // for_header_L12
                let continue_looping%1#0: bool = (< b#0 2u)
                goto continue_looping%1#0 ? block@4 : block@22
            block@4: // for_body_L13
                let range_item%2#0: uint64 = 0u
                let c#0: uint64 = range_item%2#0
                goto block@5
            block@5: // for_header_L13
                let continue_looping%2#0: bool = (< c#0 2u)
                goto continue_looping%2#0 ? block@6 : block@20
            block@6: // for_body_L14
                let range_item%3#0: uint64 = 0u
                let d#0: uint64 = range_item%3#0
                goto block@7
            block@7: // for_header_L14
                let continue_looping%3#0: bool = (< d#0 2u)
                goto continue_looping%3#0 ? block@8 : block@18
            block@8: // for_body_L15
                let range_item%4#0: uint64 = 0u
                let e#0: uint64 = range_item%4#0
                goto block@9
            block@9: // for_header_L15
                let continue_looping%4#0: bool = (< e#0 2u)
                goto continue_looping%4#0 ? block@10 : block@16
            block@10: // for_body_L16
                let range_item%5#0: uint64 = 0u
                let f#0: uint64 = range_item%5#0
                goto block@11
            block@11: // for_header_L16
                let continue_looping%5#0: bool = (< f#0 2u)
                goto continue_looping%5#0 ? block@12 : block@14
            block@12: // for_body_L17
                let tmp%0#0: uint64 = (+ a#0 b#0)
                let tmp%1#0: uint64 = (+ tmp%0#0 c#0)
                let tmp%2#0: uint64 = (+ tmp%1#0 d#0)
                let tmp%3#0: uint64 = (+ tmp%2#0 e#0)
                let tmp%4#0: uint64 = (+ tmp%3#0 f#0)
                let x#0: uint64 = (+ x#0 tmp%4#0)
                let range_item%5#0: uint64 = (+ f#0 1u)
                let f#0: uint64 = range_item%5#0
                goto block@11
            block@14: // after_for_L16
                let range_item%4#0: uint64 = (+ e#0 1u)
                let e#0: uint64 = range_item%4#0
                goto block@9
            block@16: // after_for_L15
                let range_item%3#0: uint64 = (+ d#0 1u)
                let d#0: uint64 = range_item%3#0
                goto block@7
            block@18: // after_for_L14
                let range_item%2#0: uint64 = (+ c#0 1u)
                let c#0: uint64 = range_item%2#0
                goto block@5
            block@20: // after_for_L13
                let range_item%1#0: uint64 = (+ b#0 1u)
                let b#0: uint64 = range_item%1#0
                goto block@3
            block@22: // after_for_L12
                let range_item%0#0: uint64 = (+ a#0 1u)
                let a#0: uint64 = range_item%0#0
                goto block@1
            block@24: // after_for_L11
                let tmp%5#0: bytes = (itob x#0)
                (log tmp%5#0)
                let y#0: uint64 = 0u
                let range_item%6#0: uint64 = 0u
                let range_index%6#0: uint64 = 0u
                let index#0: uint64 = range_index%6#0
                let item#0: uint64 = range_item%6#0
                goto block@25
            block@25: // for_header_L25
                let continue_looping%6#0: bool = (< item#0 10u)
                goto continue_looping%6#0 ? block@26 : block@28
            block@26: // for_body_L26
                let tmp%6#0: uint64 = (* item#0 index#0)
                let y#0: uint64 = (+ y#0 tmp%6#0)
                let range_item%6#0: uint64 = (+ item#0 1u)
                let range_index%6#0: uint64 = (+ index#0 1u)
                let index#0: uint64 = range_index%6#0
                let item#0: uint64 = range_item%6#0
                goto block@25
            block@28: // after_for_L25
                let tmp%7#0: bytes = (itob y#0)
                (log tmp%7#0)
                return x#0
    
    program clear-state:
        subroutine test_cases.nested_loops.contract.Nested.clear_state_program() -> uint64:
            block@0: // L31
                return 1u