contract test_cases.nested_loops.contract.Nested:
    program approval:
        subroutine test_cases.nested_loops.contract.Nested.approval_program() -> uint64:
            block@0: // L7
                let x#0: uint64 = 0u
                let range_item%1#0: uint64 = 0u
                let (x#20: uint64, a#17: uint64) = (x#0, range_item%1#0)
                goto block@2
            block@2: // for_header_L11
                let (x#17: uint64, a#0: uint64) = (x#20, a#17)
                let continue_looping%2#0: uint64 = (< a#0 2u)
                goto continue_looping%2#0 ? block@3 : block@36
            block@3: // for_body_L11
                let range_item%4#0: uint64 = 0u
                let (x#23: uint64, b#1: uint64) = (x#17, range_item%4#0)
                goto block@5
            block@5: // for_header_L12
                let (x#14: uint64, b#0: uint64) = (x#23, b#1)
                let continue_looping%5#0: uint64 = (< b#0 2u)
                goto continue_looping%5#0 ? block@6 : block@33
            block@6: // for_body_L12
                let range_item%7#0: uint64 = 0u
                let (x#26: uint64, c#1: uint64) = (x#14, range_item%7#0)
                goto block@8
            block@8: // for_header_L13
                let (x#11: uint64, c#0: uint64) = (x#26, c#1)
                let continue_looping%8#0: uint64 = (< c#0 2u)
                goto continue_looping%8#0 ? block@9 : block@30
            block@9: // for_body_L13
                let range_item%10#0: uint64 = 0u
                let (x#29: uint64, d#1: uint64) = (x#11, range_item%10#0)
                goto block@11
            block@11: // for_header_L14
                let (x#8: uint64, d#0: uint64) = (x#29, d#1)
                let continue_looping%11#0: uint64 = (< d#0 2u)
                goto continue_looping%11#0 ? block@12 : block@27
            block@12: // for_body_L14
                let range_item%13#0: uint64 = 0u
                let (x#32: uint64, e#1: uint64) = (x#8, range_item%13#0)
                goto block@14
            block@14: // for_header_L15
                let (x#5: uint64, e#0: uint64) = (x#32, e#1)
                let continue_looping%14#0: uint64 = (< e#0 2u)
                goto continue_looping%14#0 ? block@15 : block@24
            block@15: // for_body_L15
                let range_item%16#0: uint64 = 0u
                let (x#35: uint64, f#1: uint64) = (x#5, range_item%16#0)
                goto block@17
            block@17: // for_header_L16
                let (x#3: uint64, f#0: uint64) = (x#35, f#1)
                let continue_looping%17#0: uint64 = (< f#0 2u)
                goto continue_looping%17#0 ? block@18 : block@21
            block@18: // for_body_L16
                let tmp%18#0: uint64 = (+ a#0 b#0)
                let tmp%19#0: uint64 = (+ tmp%18#0 c#0)
                let tmp%20#0: uint64 = (+ tmp%19#0 d#0)
                let tmp%21#0: uint64 = (+ tmp%20#0 e#0)
                let tmp%22#0: uint64 = (+ tmp%21#0 f#0)
                let x#2: uint64 = (+ x#3 tmp%22#0)
                let range_item%16#3: uint64 = (+ f#0 1u)
                let (x#35: uint64, f#1: uint64) = (x#2, range_item%16#3)
                goto block@17
            block@21: // after_for_L16
                let range_item%13#5: uint64 = (+ e#0 1u)
                let (x#32: uint64, e#1: uint64) = (x#3, range_item%13#5)
                goto block@14
            block@24: // after_for_L15
                let range_item%10#7: uint64 = (+ d#0 1u)
                let (x#29: uint64, d#1: uint64) = (x#5, range_item%10#7)
                goto block@11
            block@27: // after_for_L14
                let range_item%7#9: uint64 = (+ c#0 1u)
                let (x#26: uint64, c#1: uint64) = (x#8, range_item%7#9)
                goto block@8
            block@30: // after_for_L13
                let range_item%4#11: uint64 = (+ b#0 1u)
                let (x#23: uint64, b#1: uint64) = (x#11, range_item%4#11)
                goto block@5
            block@33: // after_for_L12
                let a#16: uint64 = (+ a#0 2u)
                let range_item%1#13: uint64 = (+ a#0 1u)
                let (x#20: uint64, a#17: uint64) = (x#14, range_item%1#13)
                goto block@2
            block@36: // after_for_L11
                let tmp%23#0: bytes = (itob x#17)
                (log tmp%23#0)
                let y#0: uint64 = 0u
                let range_item%25#0: uint64 = 0u
                let range_index%26#0: uint64 = 0u
                let (y#6: uint64, index#1: uint64, item#1: uint64) = (y#0, range_index%26#0, range_item%25#0)
                goto block@38
            block@38: // for_header_L25
                let (y#3: uint64, index#0: uint64, item#0: uint64) = (y#6, index#1, item#1)
                let continue_looping%27#0: uint64 = (< item#0 10u)
                goto continue_looping%27#0 ? block@39 : block@42
            block@39: // for_body_L25
                let tmp%28#0: uint64 = (* item#0 index#0)
                let y#2: uint64 = (+ y#3 tmp%28#0)
                let range_item%25#3: uint64 = (+ item#0 1u)
                let range_index%26#2: uint64 = (+ index#0 1u)
                let (y#6: uint64, index#1: uint64, item#1: uint64) = (y#2, range_index%26#2, range_item%25#3)
                goto block@38
            block@42: // after_for_L25
                let tmp%29#0: bytes = (itob y#3)
                (log tmp%29#0)
                return x#17
    
    program clear-state:
        subroutine test_cases.nested_loops.contract.Nested.clear_state_program() -> uint64:
            block@0: // L31
                return 1u