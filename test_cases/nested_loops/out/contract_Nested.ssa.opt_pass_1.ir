contract test_cases.nested_loops.contract.Nested:
    program approval:
        subroutine test_cases.nested_loops.contract.Nested.approval_program() -> uint64:
            block@0: // L7
                let x#0: uint64 = 0u
                let range_item%0#0: uint64 = 0u
                goto block@1
            block@1: // for_header_L11
                let a#0: uint64 = φ(range_item%0#0 <- block@0, range_item%0#8 <- block@27)
                let x#13: uint64 = φ(x#0 <- block@0, x#11 <- block@27)
                let continue_looping%1#0: uint64 = (< a#0 2u)
                goto continue_looping%1#0 ? block@2 : block@30
            block@2: // for_body_L11
                let range_item%2#0: uint64 = 0u
                goto block@3
            block@3: // for_header_L12
                let b#0: uint64 = φ(range_item%2#0 <- block@2, range_item%2#7 <- block@24)
                let x#11: uint64 = φ(x#13 <- block@2, x#9 <- block@24)
                let continue_looping%3#0: uint64 = (< b#0 2u)
                goto continue_looping%3#0 ? block@4 : block@27
            block@4: // for_body_L12
                let range_item%4#0: uint64 = 0u
                goto block@5
            block@5: // for_header_L13
                let c#0: uint64 = φ(range_item%4#0 <- block@4, range_item%4#6 <- block@21)
                let x#9: uint64 = φ(x#11 <- block@4, x#7 <- block@21)
                let continue_looping%5#0: uint64 = (< c#0 2u)
                goto continue_looping%5#0 ? block@6 : block@24
            block@6: // for_body_L13
                let range_item%6#0: uint64 = 0u
                goto block@7
            block@7: // for_header_L14
                let d#0: uint64 = φ(range_item%6#0 <- block@6, range_item%6#5 <- block@18)
                let x#7: uint64 = φ(x#9 <- block@6, x#5 <- block@18)
                let continue_looping%7#0: uint64 = (< d#0 2u)
                goto continue_looping%7#0 ? block@8 : block@21
            block@8: // for_body_L14
                let range_item%8#0: uint64 = 0u
                goto block@9
            block@9: // for_header_L15
                let e#0: uint64 = φ(range_item%8#0 <- block@8, range_item%8#4 <- block@15)
                let x#5: uint64 = φ(x#7 <- block@8, x#3 <- block@15)
                let continue_looping%9#0: uint64 = (< e#0 2u)
                goto continue_looping%9#0 ? block@10 : block@18
            block@10: // for_body_L15
                let range_item%10#0: uint64 = 0u
                goto block@11
            block@11: // for_header_L16
                let f#0: uint64 = φ(range_item%10#0 <- block@10, range_item%10#3 <- block@12)
                let x#3: uint64 = φ(x#5 <- block@10, x#2 <- block@12)
                let continue_looping%11#0: uint64 = (< f#0 2u)
                goto continue_looping%11#0 ? block@12 : block@15
            block@12: // for_body_L16
                let tmp%12#0: uint64 = (+ a#0 b#0)
                let tmp%13#0: uint64 = (+ tmp%12#0 c#0)
                let tmp%14#0: uint64 = (+ tmp%13#0 d#0)
                let tmp%15#0: uint64 = (+ tmp%14#0 e#0)
                let tmp%16#0: uint64 = (+ tmp%15#0 f#0)
                let x#2: uint64 = (+ x#3 tmp%16#0)
                let range_item%10#3: uint64 = (+ f#0 1u)
                goto block@11
            block@15: // after_for_L16
                let range_item%8#4: uint64 = (+ e#0 1u)
                goto block@9
            block@18: // after_for_L15
                let range_item%6#5: uint64 = (+ d#0 1u)
                goto block@7
            block@21: // after_for_L14
                let range_item%4#6: uint64 = (+ c#0 1u)
                goto block@5
            block@24: // after_for_L13
                let range_item%2#7: uint64 = (+ b#0 1u)
                goto block@3
            block@27: // after_for_L12
                let a#11: uint64 = (+ a#0 2u)
                let range_item%0#8: uint64 = (+ a#0 1u)
                goto block@1
            block@30: // after_for_L11
                let tmp%17#0: bytes = (itob x#13)
                (log tmp%17#0)
                let y#0: uint64 = 0u
                let range_item%18#0: uint64 = 0u
                let range_index%19#0: uint64 = 0u
                goto block@31
            block@31: // for_header_L25
                let item#0: uint64 = φ(range_item%18#0 <- block@30, range_item%18#3 <- block@32)
                let index#0: uint64 = φ(range_index%19#0 <- block@30, range_index%19#2 <- block@32)
                let y#3: uint64 = φ(y#0 <- block@30, y#2 <- block@32)
                let continue_looping%20#0: uint64 = (< item#0 10u)
                goto continue_looping%20#0 ? block@32 : block@35
            block@32: // for_body_L25
                let tmp%21#0: uint64 = (* item#0 index#0)
                let y#2: uint64 = (+ y#3 tmp%21#0)
                let range_item%18#3: uint64 = (+ item#0 1u)
                let range_index%19#2: uint64 = (+ index#0 1u)
                goto block@31
            block@35: // after_for_L25
                let tmp%22#0: bytes = (itob y#3)
                (log tmp%22#0)
                return x#13
    
    program clear-state:
        subroutine test_cases.nested_loops.contract.Nested.clear_state_program() -> uint64:
            block@0: // L31
                return 1u