#pragma version 10
#pragma typetrack false

// test_cases.nested_loops.contract.Nested.approval_program() -> uint64:
main:
    intcblock 0 1 2
    pushbytes ""
    dupn 7
    intc_0 // 0
    dup

for_header@1:
    dup
    intc_2 // 2
    <
    bz after_for@24
    intc_0 // 0
    bury 10

for_header@3:
    dig 9
    intc_2 // 2
    <
    bz after_for@22
    intc_0 // 0
    bury 9

for_header@5:
    dig 8
    intc_2 // 2
    <
    bz after_for@20
    intc_0 // 0
    bury 8

for_header@7:
    dig 7
    intc_2 // 2
    <
    bz after_for@18
    intc_0 // 0
    bury 7

for_header@9:
    dig 6
    intc_2 // 2
    <
    bz after_for@16
    intc_0 // 0
    bury 6

for_header@11:
    dig 5
    intc_2 // 2
    <
    bz after_for@14
    dup
    dig 10
    +
    dig 9
    +
    dig 8
    +
    dig 7
    +
    dig 6
    dup
    cover 2
    +
    dig 3
    +
    bury 3
    intc_1 // 1
    +
    bury 6
    b for_header@11

after_for@14:
    dig 6
    intc_1 // 1
    +
    bury 7
    b for_header@9

after_for@16:
    dig 7
    intc_1 // 1
    +
    bury 8
    b for_header@7

after_for@18:
    dig 8
    intc_1 // 1
    +
    bury 9
    b for_header@5

after_for@20:
    dig 9
    intc_1 // 1
    +
    bury 10
    b for_header@3

after_for@22:
    dup
    intc_1 // 1
    +
    bury 1
    b for_header@1

after_for@24:
    dig 1
    itob
    log
    intc_0 // 0
    bury 3
    intc_0 // 0
    bury 4
    intc_0 // 0
    bury 5

for_header@25:
    dig 3
    pushint 10 // 10
    <
    bz after_for@28
    dig 3
    dup
    dig 6
    dup
    cover 3
    *
    dig 5
    +
    bury 5
    intc_1 // 1
    +
    bury 5
    intc_1 // 1
    +
    bury 5
    b for_header@25

after_for@28:
    dig 2
    itob
    log
    dig 1
    return
