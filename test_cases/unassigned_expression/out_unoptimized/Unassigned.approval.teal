#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    b block@0

block@0:
    b block@1

block@1:
    // unassigned_expression/contract.py:4
    // class Unassigned(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __algopy_default_create@11
    b abi_routing@2

abi_routing@2:
    // unassigned_expression/contract.py:4
    // class Unassigned(ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz create_NoOp@9
    b call_NoOp@3

call_NoOp@3:
    // unassigned_expression/contract.py:4
    // class Unassigned(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xbbd6169c // method "discard_op()void"
    pushbytes 0xb667bc14 // method "discard_subroutine()void"
    pushbytes 0x0756dbf1 // method "discard_constants()void"
    uncover 3
    match discard_op_route@4 discard_subroutine_route@5 discard_constants_route@6
    b switch_case_default@7

switch_case_default@7:
    b switch_case_next@8

switch_case_next@8:
    b after_if_else@10

after_if_else@10:
    b after_if_else@12

after_if_else@12:
    // unassigned_expression/contract.py:4
    // class Unassigned(ARC4Contract):
    err

discard_constants_route@6:
    // unassigned_expression/contract.py:13
    // @arc4.abimethod()
    callsub discard_constants
    b switch_case_next@8

discard_subroutine_route@5:
    // unassigned_expression/contract.py:9
    // @arc4.abimethod()
    callsub discard_subroutine
    b switch_case_next@8

discard_op_route@4:
    // unassigned_expression/contract.py:5
    // @arc4.abimethod()
    callsub discard_op
    b switch_case_next@8

create_NoOp@9:
    b after_if_else@10

__algopy_default_create@11:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b block@14

block@14:
    b after_inlined_test_cases.unassigned_expression.contract.Unassigned.__algopy_default_create@15

after_inlined_test_cases.unassigned_expression.contract.Unassigned.__algopy_default_create@15:
    intc_1 // 1
    return


// test_cases.unassigned_expression.contract.get_a_value() -> uint64:
get_a_value:
    b get_a_value_block@0

get_a_value_block@0:
    // unassigned_expression/contract.py:22
    // return UInt64(42)
    pushint 42 // 42
    retsub


// test_cases.unassigned_expression.contract.Unassigned.discard_op[routing]() -> void:
discard_op:
    b discard_op_block@0

discard_op_block@0:
    // unassigned_expression/contract.py:5
    // @arc4.abimethod()
    callsub test_cases.unassigned_expression.contract.Unassigned.discard_op
    intc_1 // 1
    return


// test_cases.unassigned_expression.contract.Unassigned.discard_subroutine[routing]() -> void:
discard_subroutine:
    b discard_subroutine_block@0

discard_subroutine_block@0:
    // unassigned_expression/contract.py:9
    // @arc4.abimethod()
    callsub test_cases.unassigned_expression.contract.Unassigned.discard_subroutine
    intc_1 // 1
    return


// test_cases.unassigned_expression.contract.Unassigned.discard_constants[routing]() -> void:
discard_constants:
    b discard_constants_block@0

discard_constants_block@0:
    // unassigned_expression/contract.py:13
    // @arc4.abimethod()
    callsub test_cases.unassigned_expression.contract.Unassigned.discard_constants
    intc_1 // 1
    return


// test_cases.unassigned_expression.contract.Unassigned.discard_op() -> void:
test_cases.unassigned_expression.contract.Unassigned.discard_op:
    b test_cases.unassigned_expression.contract.Unassigned.discard_op_block@0

test_cases.unassigned_expression.contract.Unassigned.discard_op_block@0:
    // unassigned_expression/contract.py:7
    // op.bzero(10)
    pushint 10 // 10
    bzero
    pop
    retsub


// test_cases.unassigned_expression.contract.Unassigned.discard_subroutine() -> void:
test_cases.unassigned_expression.contract.Unassigned.discard_subroutine:
    b test_cases.unassigned_expression.contract.Unassigned.discard_subroutine_block@0

test_cases.unassigned_expression.contract.Unassigned.discard_subroutine_block@0:
    // unassigned_expression/contract.py:11
    // get_a_value()
    callsub get_a_value
    pop
    retsub


// test_cases.unassigned_expression.contract.Unassigned.discard_constants() -> void:
test_cases.unassigned_expression.contract.Unassigned.discard_constants:
    b test_cases.unassigned_expression.contract.Unassigned.discard_constants_block@0

test_cases.unassigned_expression.contract.Unassigned.discard_constants_block@0:
    retsub
