contract test_cases.group_side_effects.contract.AppExpectingEffects:
    program approval:
        subroutine test_cases.group_side_effects.contract.AppExpectingEffects.approval_program() -> bool:
            block@0: // L4
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@6
            block@1: // abi_routing_L4
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "create_group(acfg,appl)(uint64,uint64)" => block@2, method "log_group(appl)void" => block@3, * => block@4}
            block@2: // create_group_route_L5
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (== tmp%2#0 NoOp)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: uint64 = (txn GroupIndex)
                let awst_tmp%0#0: uint64 = (- tmp%5#0 2u)
                let tmp%6#0: uint64 = ((gtxns TypeEnum) awst_tmp%0#0)
                let tmp%7#0: bool = (== tmp%6#0 acfg)
                (assert tmp%7#0) // transaction type is acfg
                let tmp%8#0: uint64 = (txn GroupIndex)
                let awst_tmp%1#0: uint64 = (- tmp%8#0 1u)
                let tmp%9#0: uint64 = ((gtxns TypeEnum) awst_tmp%1#0)
                let tmp%10#0: bool = (== tmp%9#0 appl)
                (assert tmp%10#0) // transaction type is appl
                let (awst_tmp%2#0: uint64, awst_tmp%3#0: uint64) = test_cases.group_side_effects.contract.AppExpectingEffects.create_group(awst_tmp%0#0, awst_tmp%1#0)
                let val_as_bytes%0#0: bytes = (itob awst_tmp%2#0)
                let val_as_bytes%1#0: bytes = (itob awst_tmp%3#0)
                let encoded_tuple_buffer%1#0: bytes = (concat 0x val_as_bytes%0#0)
                let encoded_tuple_buffer%2#0: bytes = (concat encoded_tuple_buffer%1#0 val_as_bytes%1#0)
                let tmp%11#0: bytes = (concat 0x151f7c75 encoded_tuple_buffer%2#0)
                (log tmp%11#0)
                return 1u
            block@3: // log_group_route_L22
                let tmp%12#0: uint64 = (txn OnCompletion)
                let tmp%13#0: bool = (== tmp%12#0 NoOp)
                (assert tmp%13#0) // OnCompletion is NoOp
                let tmp%14#0: bool = (txn ApplicationID)
                (assert tmp%14#0) // is not creating
                let tmp%15#0: uint64 = (txn GroupIndex)
                let awst_tmp%4#0: uint64 = (- tmp%15#0 1u)
                let tmp%16#0: uint64 = ((gtxns TypeEnum) awst_tmp%4#0)
                let tmp%17#0: bool = (== tmp%16#0 appl)
                (assert tmp%17#0) // transaction type is appl
                test_cases.group_side_effects.contract.AppExpectingEffects.log_group(awst_tmp%4#0)
                return 1u
            block@4: // switch_case_default_L4
                goto block@5
            block@5: // switch_case_next_L4
                fail // reject transaction
            block@6: // bare_routing_L4
                let tmp%18#0: uint64 = (txn OnCompletion)
                switch tmp%18#0 {0u => block@7, * => block@8}
            block@7: // create_L4
                let tmp%19#0: bool = (txn ApplicationID)
                let tmp%20#0: bool = (! tmp%19#0)
                (assert tmp%20#0) // is creating
                return 1u
            block@8: // reject_bare_on_completion_L4
                fail // reject transaction
        
        subroutine test_cases.group_side_effects.contract.AppExpectingEffects.create_group(asset_create: uint64, app_create: uint64) -> <uint64, uint64>:
            block@0: // L5
                let tmp%0#0: uint64 = ((gtxns CreatedAssetID) asset_create#0)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                (assert tmp%1#0) // expected asset created
                let tmp%2#0: uint64 = ((gtxns GroupIndex) asset_create#0)
                let tmp%3#0: uint64 = (gaids tmp%2#0)
                let tmp%4#0: uint64 = ((gtxns CreatedAssetID) asset_create#0)
                let tmp%5#0: bool = (== tmp%3#0 tmp%4#0)
                (assert tmp%5#0) // expected correct asset id
                let tmp%6#0: uint64 = ((gtxns CreatedApplicationID) app_create#0)
                let tmp%7#0: bool = (!= tmp%6#0 0u)
                (assert tmp%7#0) // expected app created
                let tmp%8#0: uint64 = ((gtxns GroupIndex) app_create#0)
                let tmp%9#0: uint64 = (gaids tmp%8#0)
                let tmp%10#0: uint64 = ((gtxns CreatedApplicationID) app_create#0)
                let tmp%11#0: bool = (== tmp%9#0 tmp%10#0)
                (assert tmp%11#0) // expected correct app id
                let tmp%12#0: uint64 = ((gtxns CreatedAssetID) asset_create#0)
                let tmp%13#0: uint64 = ((gtxns CreatedApplicationID) app_create#0)
                return tmp%12#0 tmp%13#0
        
        subroutine test_cases.group_side_effects.contract.AppExpectingEffects.log_group(app_call: uint64) -> void:
            block@0: // L22
                let tmp%0#0: bytes = ((gtxnsas ApplicationArgs) app_call#0 0u)
                let tmp%1#0: bool = (== tmp%0#0 method "some_value()uint64")
                (assert tmp%1#0) // expected correct method called
                let tmp%2#0: uint64 = ((gtxns NumLogs) app_call#0)
                let tmp%3#0: bool = (== tmp%2#0 1u)
                (assert tmp%3#0) // expected logs
                let awst_tmp%0#0: bytes = ((gtxns LastLog) app_call#0)
                let tmp%4#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%5#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
                (assert tmp%6#0) // ARC4 prefix is valid
                let reinterpret_biguint%0#0: biguint = tmp%4#0
                let tmp%7#0: uint64 = ((gtxns GroupIndex) app_call#0)
                let tmp%8#0: uint64 = (+ tmp%7#0 1u)
                let tmp%9#0: uint64 = (global GroupSize)
                let tmp%10#0: uint64 = (* tmp%8#0 tmp%9#0)
                let tmp%11#0: biguint = (itob tmp%10#0)
                let tmp%12#0: bool = (b== reinterpret_biguint%0#0 tmp%11#0)
                (assert tmp%12#0)
                return 
    
    program clear-state:
        subroutine test_cases.group_side_effects.contract.AppExpectingEffects.clear_state_program() -> bool:
            block@0: // L4
                return 1u