{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;;;;;;;;;;;AAAA;AAkBK;;;;;;AAjBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAiBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAjBL;;;;;;AAMe;;AAAA;;AAAA;AAAA;AAAP;AAEY;;AAAA;;AAAR;AAAqC;;AAAA;;AAArC;AADJ;AAGO;;AAAA;;AAAA;AAAA;AAAP;AAEY;;AAAA;;AAAR;AAAmC;;AAAA;;AAAnC;AADJ;AAIO;;AAAA;;AAA+B;;AAAA;;AAAtC;AAER;;;;;;AAEe;;AAAkB;AAAlB;;AAAwB;;;;;;AAAxB;AAAP;AAGO;;AAAA;;AAAqB;AAArB;AAAP;AAEyB;;AAAA;;AAArB;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AACI;;AAAA;;AAAuB;AAAvB;AAA4B;;AAA7B;AADH;AAAA;AADJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 6"
    },
    "6": {
      "op": "bytecblock 0x151f7c75"
    },
    "13": {
      "op": "b main_block@0"
    },
    "16": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "19": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "21": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "22": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "23": {
      "op": "bz main___algopy_default_create@10",
      "stack_out": []
    },
    "26": {
      "op": "b main_abi_routing@2"
    },
    "29": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "31": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "32": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "33": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "34": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "36": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "37": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "38": {
      "op": "bz main_create_NoOp@8",
      "stack_out": []
    },
    "41": {
      "op": "b main_call_NoOp@3"
    },
    "44": {
      "block": "main_call_NoOp@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "47": {
      "op": "pushbytes 0x6d3a0439 // method \"create_group(acfg,appl)(uint64,uint64)\"",
      "defined_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create_group(acfg,appl)(uint64,uint64))"
      ]
    },
    "53": {
      "op": "pushbytes 0x62a0ef62 // method \"log_group(appl)void\"",
      "defined_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)"
      ]
    },
    "59": {
      "op": "uncover 2",
      "stack_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)",
        "tmp%6#0"
      ]
    },
    "61": {
      "op": "match main_create_group_route@4 main_log_group_route@5",
      "stack_out": []
    },
    "67": {
      "op": "b main_switch_case_default@6"
    },
    "70": {
      "block": "main_switch_case_default@6",
      "stack_in": [],
      "op": "b main_switch_case_next@7"
    },
    "73": {
      "block": "main_switch_case_next@7",
      "stack_in": [],
      "op": "b main_after_if_else@9"
    },
    "76": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "b main_after_if_else@11"
    },
    "79": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "80": {
      "block": "main_log_group_route@5",
      "stack_in": [],
      "callsub": "test_cases.group_side_effects.contract.AppExpectingEffects.log_group[routing]",
      "op": "callsub log_group"
    },
    "83": {
      "op": "b main_switch_case_next@7"
    },
    "86": {
      "block": "main_create_group_route@4",
      "stack_in": [],
      "callsub": "test_cases.group_side_effects.contract.AppExpectingEffects.create_group[routing]",
      "op": "callsub create_group"
    },
    "89": {
      "op": "b main_switch_case_next@7"
    },
    "92": {
      "block": "main_create_NoOp@8",
      "stack_in": [],
      "op": "b main_after_if_else@9"
    },
    "95": {
      "block": "main___algopy_default_create@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "97": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "98": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "99": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "101": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "102": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "103": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "104": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "105": {
      "op": "b main_block@13"
    },
    "108": {
      "block": "main_block@13",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.group_side_effects.contract.AppExpectingEffects.__algopy_default_create@14"
    },
    "111": {
      "block": "main_after_inlined_test_cases.group_side_effects.contract.AppExpectingEffects.__algopy_default_create@14",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "112": {
      "op": "return",
      "stack_out": []
    },
    "113": {
      "subroutine": "test_cases.group_side_effects.contract.AppExpectingEffects.create_group[routing]",
      "params": {},
      "block": "create_group",
      "stack_in": [],
      "op": "b create_group_block@0"
    },
    "116": {
      "block": "create_group_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "118": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "120": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "121": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "122": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "124": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "126": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "127": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "128": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0"
      ]
    },
    "130": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "131": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "132": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "133": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "135": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "appl"
      ]
    },
    "136": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "137": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "138": {
      "callsub": "test_cases.group_side_effects.contract.AppExpectingEffects.create_group",
      "op": "callsub test_cases.group_side_effects.contract.AppExpectingEffects.create_group",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "141": {
      "op": "cover 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%2#0"
      ]
    },
    "143": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "144": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%as_Encoded(uint64)%0#0",
        "0x"
      ]
    },
    "146": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%3#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#0"
      ]
    },
    "148": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%head%0#0"
      ]
    },
    "149": {
      "op": "uncover 1",
      "stack_out": [
        "aggregate%head%0#0",
        "tmp%3#0"
      ]
    },
    "151": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "aggregate%as_Encoded(uint64)%1#0"
      ]
    },
    "152": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "153": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "154": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%4#0"
      ]
    },
    "156": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "157": {
      "op": "log",
      "stack_out": []
    },
    "158": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "159": {
      "op": "return",
      "stack_out": []
    },
    "160": {
      "subroutine": "test_cases.group_side_effects.contract.AppExpectingEffects.log_group[routing]",
      "params": {},
      "block": "log_group",
      "stack_in": [],
      "op": "b log_group_block@0"
    },
    "163": {
      "block": "log_group_block@0",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "165": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "166": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "167": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "168": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "170": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "appl"
      ]
    },
    "171": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "172": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "173": {
      "callsub": "test_cases.group_side_effects.contract.AppExpectingEffects.log_group",
      "op": "callsub test_cases.group_side_effects.contract.AppExpectingEffects.log_group",
      "stack_out": []
    },
    "176": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "177": {
      "op": "return",
      "stack_out": []
    },
    "178": {
      "subroutine": "test_cases.group_side_effects.contract.AppExpectingEffects.create_group",
      "params": {
        "asset_create#0": "uint64",
        "app_create#0": "uint64"
      },
      "block": "test_cases.group_side_effects.contract.AppExpectingEffects.create_group",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "181": {
      "op": "b test_cases.group_side_effects.contract.AppExpectingEffects.create_group_block@0"
    },
    "184": {
      "block": "test_cases.group_side_effects.contract.AppExpectingEffects.create_group_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "asset_create#0 (copy)"
      ],
      "stack_out": [
        "asset_create#0 (copy)"
      ]
    },
    "186": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "188": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "189": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "190": {
      "error": "expected asset created",
      "op": "assert // expected asset created",
      "stack_out": []
    },
    "191": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_create#0 (copy)"
      ]
    },
    "193": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "195": {
      "op": "gaids",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "196": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%3#0",
        "asset_create#0 (copy)"
      ]
    },
    "198": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "200": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "201": {
      "error": "expected correct asset id",
      "op": "assert // expected correct asset id",
      "stack_out": []
    },
    "202": {
      "op": "frame_dig -1",
      "defined_out": [
        "app_create#0 (copy)"
      ],
      "stack_out": [
        "app_create#0 (copy)"
      ]
    },
    "204": {
      "op": "gtxns CreatedApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "206": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "207": {
      "op": "!=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "208": {
      "error": "expected app created",
      "op": "assert // expected app created",
      "stack_out": []
    },
    "209": {
      "op": "frame_dig -1",
      "stack_out": [
        "app_create#0 (copy)"
      ]
    },
    "211": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "213": {
      "op": "gaids",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "214": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%9#0",
        "app_create#0 (copy)"
      ]
    },
    "216": {
      "op": "gtxns CreatedApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "218": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "219": {
      "error": "expected correct app id",
      "op": "assert // expected correct app id",
      "stack_out": []
    },
    "220": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_create#0 (copy)"
      ]
    },
    "222": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "224": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "app_create#0 (copy)"
      ]
    },
    "226": {
      "op": "gtxns CreatedApplicationID",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "228": {
      "retsub": true,
      "op": "retsub"
    },
    "229": {
      "subroutine": "test_cases.group_side_effects.contract.AppExpectingEffects.log_group",
      "params": {
        "app_call#0": "uint64"
      },
      "block": "test_cases.group_side_effects.contract.AppExpectingEffects.log_group",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "232": {
      "op": "b test_cases.group_side_effects.contract.AppExpectingEffects.log_group_block@0"
    },
    "235": {
      "block": "test_cases.group_side_effects.contract.AppExpectingEffects.log_group_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "app_call#0 (copy)"
      ],
      "stack_out": [
        "app_call#0 (copy)"
      ]
    },
    "237": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app_call#0 (copy)"
      ],
      "stack_out": [
        "app_call#0 (copy)",
        "0"
      ]
    },
    "238": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "240": {
      "op": "pushbytes 0xd3479e65 // method \"some_value()uint64\"",
      "defined_out": [
        "Method(some_value()uint64)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Method(some_value()uint64)"
      ]
    },
    "246": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "247": {
      "error": "expected correct method called",
      "op": "assert // expected correct method called",
      "stack_out": []
    },
    "248": {
      "op": "frame_dig -1",
      "stack_out": [
        "app_call#0 (copy)"
      ]
    },
    "250": {
      "op": "gtxns NumLogs",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "252": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "253": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "254": {
      "error": "expected logs",
      "op": "assert // expected logs",
      "stack_out": []
    },
    "255": {
      "op": "frame_dig -1",
      "stack_out": [
        "app_call#0 (copy)"
      ]
    },
    "257": {
      "op": "gtxns LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "259": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "260": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "263": {
      "op": "cover 1",
      "stack_out": [
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "265": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "268": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "269": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "270": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "271": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%0#0",
        "app_call#0 (copy)"
      ]
    },
    "273": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%7#0"
      ]
    },
    "275": {
      "op": "intc_1 // 1",
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%7#0",
        "1"
      ]
    },
    "276": {
      "op": "+",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%8#0"
      ]
    },
    "277": {
      "op": "global GroupSize",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "279": {
      "op": "*",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%10#0"
      ]
    },
    "280": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%11#0"
      ]
    },
    "281": {
      "op": "b==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "282": {
      "op": "assert",
      "stack_out": []
    },
    "283": {
      "retsub": true,
      "op": "retsub"
    }
  }
}