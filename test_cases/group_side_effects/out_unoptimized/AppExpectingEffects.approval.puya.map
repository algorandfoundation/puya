{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;AAGA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;AAAA;;AAkBK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAlBL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBK;;;AAAA;;;;AAjBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AADL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AACA;;;AAMe;;AAAA;;AAAA;AAAA;AAAP;AAEY;;AAAA;;AAAR;AAAqC;;AAAA;;AAArC;AADJ;AAGO;;AAAA;;AAAA;AAAA;AAAP;AAEY;;AAAA;;AAAR;AAAmC;;AAAA;;AAAnC;AADJ;AAIO;;AAAA;;AAA+B;;AAAA;;AAAtC;AAER;;;AAEe;;AAAkB;AAAlB;;AAAwB;;;;;;AAAxB;AAAP;AAGO;;AAAA;;AAAqB;AAArB;AAAP;AAEyB;;AAAA;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACI;;AAAA;;AAAuB;AAAvB;AAA4B;;AAA7B;AADH;AAAA;AADJ;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 6"
    },
    "6": {
      "op": "bytecblock 0x 0x151f7c75"
    },
    "14": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "16": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "17": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "18": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "21": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "24": {
      "op": "pushbytes 0x6d3a0439 // method \"create_group(acfg,appl)(uint64,uint64)\"",
      "defined_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_group(acfg,appl)(uint64,uint64))"
      ]
    },
    "30": {
      "op": "pushbytes 0x62a0ef62 // method \"log_group(appl)void\"",
      "defined_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)"
      ]
    },
    "36": {
      "op": "uncover 2",
      "stack_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)",
        "tmp%2#0"
      ]
    },
    "38": {
      "op": "match main_create_group_route@3 main_log_group_route@4",
      "stack_out": []
    },
    "44": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "45": {
      "block": "main_after_inlined_test_cases.group_side_effects.contract.AppExpectingEffects.__puya_arc4_router__@12",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "46": {
      "block": "main_log_group_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "48": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "NoOp"
      ]
    },
    "49": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "50": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "51": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "53": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "54": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "55": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "56": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "58": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "1"
      ]
    },
    "59": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "60": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "61": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "63": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "appl"
      ]
    },
    "64": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "65": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "66": {
      "callsub": "test_cases.group_side_effects.contract.AppExpectingEffects.log_group",
      "op": "callsub log_group",
      "stack_out": []
    },
    "69": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "70": {
      "op": "b main_after_inlined_test_cases.group_side_effects.contract.AppExpectingEffects.__puya_arc4_router__@12"
    },
    "73": {
      "block": "main_create_group_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "75": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "76": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "77": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "78": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "80": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "81": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "82": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "83": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "85": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "2"
      ]
    },
    "87": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "88": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "89": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "91": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "93": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "94": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "95": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%8#0"
      ]
    },
    "97": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%8#0",
        "1"
      ]
    },
    "98": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "99": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "100": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "102": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl",
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "appl"
      ]
    },
    "103": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "104": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "105": {
      "callsub": "test_cases.group_side_effects.contract.AppExpectingEffects.create_group",
      "op": "callsub create_group",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "108": {
      "op": "swap",
      "stack_out": [
        "tmp%10#0",
        "tmp%9#0"
      ]
    },
    "109": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%0#1",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "aggregate%as_Encoded(uint64)%0#1"
      ]
    },
    "110": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "aggregate%as_Encoded(uint64)%0#1",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "aggregate%as_Encoded(uint64)%0#1",
        "0x"
      ]
    },
    "111": {
      "op": "swap",
      "stack_out": [
        "tmp%10#0",
        "0x",
        "aggregate%as_Encoded(uint64)%0#1"
      ]
    },
    "112": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%0#1",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "aggregate%encoded%0#1"
      ]
    },
    "113": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded%0#1",
        "tmp%10#0"
      ]
    },
    "114": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_Encoded(uint64)%1#1",
        "aggregate%encoded%0#1"
      ],
      "stack_out": [
        "aggregate%encoded%0#1",
        "aggregate%as_Encoded(uint64)%1#1"
      ]
    },
    "115": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded%1#1"
      ],
      "stack_out": [
        "aggregate%encoded%1#1"
      ]
    },
    "116": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "aggregate%encoded%1#1",
        "0x"
      ]
    },
    "117": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "118": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "120": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "121": {
      "op": "log",
      "stack_out": []
    },
    "122": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "123": {
      "op": "b main_after_inlined_test_cases.group_side_effects.contract.AppExpectingEffects.__puya_arc4_router__@12"
    },
    "126": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "128": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0"
      ]
    },
    "129": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%18#0"
      ]
    },
    "130": {
      "op": "match main___algopy_default_create@8",
      "stack_out": []
    },
    "134": {
      "block": "main_switch_case_next@10",
      "stack_in": [],
      "op": "b main_after_if_else@11"
    },
    "137": {
      "block": "main___algopy_default_create@8",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "139": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0"
      ]
    },
    "140": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "141": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "142": {
      "block": "main_after_inlined_test_cases.group_side_effects.contract.AppExpectingEffects.__algopy_default_create@14",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "143": {
      "op": "b main_after_inlined_test_cases.group_side_effects.contract.AppExpectingEffects.__puya_arc4_router__@12"
    },
    "146": {
      "subroutine": "test_cases.group_side_effects.contract.AppExpectingEffects.create_group",
      "params": {
        "asset_create#0": "uint64",
        "app_create#0": "uint64"
      },
      "block": "create_group",
      "stack_in": [],
      "op": "proto 2 2"
    },
    "149": {
      "block": "create_group_block@0",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "asset_create#0 (copy)"
      ],
      "stack_out": [
        "asset_create#0 (copy)"
      ]
    },
    "151": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "153": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "154": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "155": {
      "error": "expected asset created",
      "op": "assert // expected asset created",
      "stack_out": []
    },
    "156": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_create#0 (copy)"
      ]
    },
    "158": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "160": {
      "op": "gaids",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "161": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%3#0",
        "asset_create#0 (copy)"
      ]
    },
    "163": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "165": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "166": {
      "error": "expected correct asset id",
      "op": "assert // expected correct asset id",
      "stack_out": []
    },
    "167": {
      "op": "frame_dig -1",
      "defined_out": [
        "app_create#0 (copy)"
      ],
      "stack_out": [
        "app_create#0 (copy)"
      ]
    },
    "169": {
      "op": "gtxns CreatedApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "171": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "172": {
      "op": "!=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "173": {
      "error": "expected app created",
      "op": "assert // expected app created",
      "stack_out": []
    },
    "174": {
      "op": "frame_dig -1",
      "stack_out": [
        "app_create#0 (copy)"
      ]
    },
    "176": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "178": {
      "op": "gaids",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "179": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%9#0",
        "app_create#0 (copy)"
      ]
    },
    "181": {
      "op": "gtxns CreatedApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "183": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "184": {
      "error": "expected correct app id",
      "op": "assert // expected correct app id",
      "stack_out": []
    },
    "185": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_create#0 (copy)"
      ]
    },
    "187": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "189": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "app_create#0 (copy)"
      ]
    },
    "191": {
      "op": "gtxns CreatedApplicationID",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "193": {
      "retsub": true,
      "op": "retsub"
    },
    "194": {
      "subroutine": "test_cases.group_side_effects.contract.AppExpectingEffects.log_group",
      "params": {
        "app_call#0": "uint64"
      },
      "block": "log_group",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "197": {
      "block": "log_group_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "app_call#0 (copy)"
      ],
      "stack_out": [
        "app_call#0 (copy)"
      ]
    },
    "199": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app_call#0 (copy)"
      ],
      "stack_out": [
        "app_call#0 (copy)",
        "0"
      ]
    },
    "200": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "202": {
      "op": "pushbytes 0xd3479e65 // method \"some_value()uint64\"",
      "defined_out": [
        "Method(some_value()uint64)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "Method(some_value()uint64)"
      ]
    },
    "208": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "209": {
      "error": "expected correct method called",
      "op": "assert // expected correct method called",
      "stack_out": []
    },
    "210": {
      "op": "frame_dig -1",
      "stack_out": [
        "app_call#0 (copy)"
      ]
    },
    "212": {
      "op": "gtxns NumLogs",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "214": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "1"
      ]
    },
    "215": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "216": {
      "error": "expected logs",
      "op": "assert // expected logs",
      "stack_out": []
    },
    "217": {
      "op": "frame_dig -1",
      "stack_out": [
        "app_call#0 (copy)"
      ]
    },
    "219": {
      "op": "gtxns LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "221": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "222": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "225": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "226": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "229": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "230": {
      "op": "==",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "231": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "232": {
      "op": "frame_dig -1",
      "stack_out": [
        "reinterpret_biguint%0#0",
        "app_call#0 (copy)"
      ]
    },
    "234": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%7#0"
      ]
    },
    "236": {
      "op": "intc_1 // 1",
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%7#0",
        "1"
      ]
    },
    "237": {
      "op": "+",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%8#0"
      ]
    },
    "238": {
      "op": "global GroupSize",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "240": {
      "op": "*",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%10#0"
      ]
    },
    "241": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "tmp%11#0"
      ]
    },
    "242": {
      "op": "b==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "243": {
      "op": "assert",
      "stack_out": []
    },
    "244": {
      "retsub": true,
      "op": "retsub"
    }
  }
}