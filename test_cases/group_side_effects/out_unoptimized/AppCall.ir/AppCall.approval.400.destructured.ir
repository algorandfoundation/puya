main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L4
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "some_value()uint64" => block@3, * => block@4}
    block@3: // some_value_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        test_cases.group_side_effects.other.AppCall.some_value[routing]()
        goto block@5
    block@4: // switch_case_default_L4
        goto block@5
    block@5: // switch_case_next_L4
        goto block@10
    block@6: // bare_routing_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        switch tmp%7#0 {0u => block@7, * => block@8}
    block@7: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (== tmp%8#0 0u)
        (assert tmp%9#0) // can only call when creating
        goto block@12
    block@12: // L1
        goto block@13
    block@13: // after_inlined_test_cases.group_side_effects.other.AppCall.__algopy_default_create_L1
        exit 1u
    block@8: // switch_case_default_L4
        goto block@9
    block@9: // switch_case_next_L4
        goto block@10
    block@10: // after_if_else_L4
        exit 0u
    block@11: // after_inlined_test_cases.group_side_effects.other.AppCall.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.group_side_effects.other.AppCall.some_value[routing]() -> void:
    block@0: // L5
        let tmp%0#0: uint64 = test_cases.group_side_effects.other.AppCall.some_value()
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%1#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%2#0: bytes = (concat 0x151f7c75 tmp%1#0)
        (log tmp%2#0)
        exit 1u

subroutine test_cases.group_side_effects.other.AppCall.some_value() -> uint64:
    block@0: // L5
        let tmp%0#0: uint64 = (global GroupSize)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let tmp%2#0: uint64 = (+ tmp%1#0 1u)
        let tmp%3#0: uint64 = (* tmp%0#0 tmp%2#0)
        return tmp%3#0