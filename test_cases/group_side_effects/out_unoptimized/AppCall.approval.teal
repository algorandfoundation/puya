#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1

main_block@1:
    // group_side_effects/other.py:4
    // class AppCall(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6

main_abi_routing@2:
    // group_side_effects/other.py:4
    // class AppCall(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xd3479e65 // method "some_value()uint64"
    swap
    match main_some_value_route@3

main_switch_case_default@4:

main_switch_case_next@5:

main_after_if_else@10:
    // group_side_effects/other.py:4
    // class AppCall(ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.group_side_effects.other.AppCall.__puya_arc4_router__@11:
    return

main_some_value_route@3:
    // group_side_effects/other.py:5
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    callsub some_value
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.group_side_effects.other.AppCall.__puya_arc4_router__@11

main_bare_routing@6:
    // group_side_effects/other.py:4
    // class AppCall(ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@7

main_switch_case_default@8:

main_switch_case_next@9:
    b main_after_if_else@10

main___algopy_default_create@7:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@12:

main_after_inlined_test_cases.group_side_effects.other.AppCall.__algopy_default_create@13:
    intc_1 // 1
    b main_after_inlined_test_cases.group_side_effects.other.AppCall.__puya_arc4_router__@11


// test_cases.group_side_effects.other.AppCall.some_value() -> uint64:
some_value:
    // group_side_effects/other.py:5-6
    // @arc4.abimethod()
    // def some_value(self) -> UInt64:
    proto 0 1
    // group_side_effects/other.py:7
    // return Global.group_size * (Txn.group_index + 1)
    global GroupSize
    txn GroupIndex
    intc_1 // 1
    +
    *
    retsub
