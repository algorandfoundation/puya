#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1
    b block@0

block@0:
    b block@1

block@1:
    // group_side_effects/other.py:4
    // class AppCall(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __algopy_default_create@6
    b abi_routing@2

abi_routing@2:
    // group_side_effects/other.py:4
    // class AppCall(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xd3479e65 // method "some_value()uint64"
    uncover 1
    match some_value_route@3
    b switch_case_default@4

switch_case_default@4:
    b switch_case_next@5

switch_case_next@5:
    b after_if_else@7

after_if_else@7:
    // group_side_effects/other.py:4
    // class AppCall(ARC4Contract):
    err

some_value_route@3:
    // group_side_effects/other.py:5
    // @arc4.abimethod()
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    !=
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    callsub some_value
    b switch_case_next@5

__algopy_default_create@6:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b block@9

block@9:
    b after_inlined_test_cases.group_side_effects.other.AppCall.__algopy_default_create@10

after_inlined_test_cases.group_side_effects.other.AppCall.__algopy_default_create@10:
    intc_1 // 1
    return


// test_cases.group_side_effects.other.AppCall.some_value[routing]() -> void:
some_value:
    b some_value_block@0

some_value_block@0:
    // group_side_effects/other.py:5
    // @arc4.abimethod()
    callsub test_cases.group_side_effects.other.AppCall.some_value
    itob
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    intc_1 // 1
    return


// test_cases.group_side_effects.other.AppCall.some_value() -> uint64:
test_cases.group_side_effects.other.AppCall.some_value:
    b test_cases.group_side_effects.other.AppCall.some_value_block@0

test_cases.group_side_effects.other.AppCall.some_value_block@0:
    // group_side_effects/other.py:7
    // return Global.group_size * (Txn.group_index + 1)
    global GroupSize
    txn GroupIndex
    intc_1 // 1
    +
    *
    retsub
