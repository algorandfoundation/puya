#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 6 2
    bytecblock 0x151f7c75
    b block@0

block@0:
    b block@1

block@1:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_0 // 1
    shl
    +
    intc_1 // 0
    intc_0 // 1
    intc_3 // 2
    pushint 3 // 3
    pushint 4 // 4
    pushint 5 // 5
    intc_2 // 6
    pushint 7 // 7
    pushint 8 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    b *NOT_IMPLEMENTED

create_ClearState:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    b *NOT_IMPLEMENTED

call_ClearState:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    b *NOT_IMPLEMENTED

create_OptIn:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    b *NOT_IMPLEMENTED

call_OptIn:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    b *NOT_IMPLEMENTED

create_NoOp:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    txn NumAppArgs
    intc_1 // 0
    ==
    bz else_body@9
    b __algopy_default_create@8

__algopy_default_create@8:
    b block@22

block@22:
    b after_inlined_test_cases.group_side_effects.contract.AppExpectingEffects.__algopy_default_create@23

after_inlined_test_cases.group_side_effects.contract.AppExpectingEffects.__algopy_default_create@23:
    intc_0 // 1
    return

else_body@9:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x6d3a0439 // method "create_group(acfg,appl)(uint64,uint64)"
    pushbytes 0x62a0ef62 // method "log_group(appl)void"
    uncover 2
    match create_group_route@3 log_group_route@4
    b switch_case_default@5

switch_case_default@5:
    b switch_case_next@6

switch_case_next@6:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    err // this contract does not implement the given ABI method for call NoOp

log_group_route@4:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    callsub log_group
    b switch_case_next@6

create_group_route@3:
    // group_side_effects/contract.py:4
    // class AppExpectingEffects(ARC4Contract):
    callsub create_group
    b switch_case_next@6


// test_cases.group_side_effects.contract.AppExpectingEffects.create_group[routing]() -> void:
create_group:
    b create_group_block@0

create_group_block@0:
    // group_side_effects/contract.py:5
    // @arc4.abimethod
    txn GroupIndex
    intc_3 // 2
    -
    dup
    gtxns TypeEnum
    pushint 3 // acfg
    ==
    assert // transaction type is acfg
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // appl
    ==
    assert // transaction type is appl
    callsub test_cases.group_side_effects.contract.AppExpectingEffects.create_group
    cover 1
    itob
    pushbytes 0x
    uncover 1
    concat
    uncover 1
    itob
    concat
    bytec_0 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.group_side_effects.contract.AppExpectingEffects.log_group[routing]() -> void:
log_group:
    b log_group_block@0

log_group_block@0:
    // group_side_effects/contract.py:22
    // @arc4.abimethod
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // appl
    ==
    assert // transaction type is appl
    callsub test_cases.group_side_effects.contract.AppExpectingEffects.log_group
    intc_0 // 1
    return


// test_cases.group_side_effects.contract.AppExpectingEffects.create_group(asset_create: uint64, app_create: uint64) -> uint64, uint64:
test_cases.group_side_effects.contract.AppExpectingEffects.create_group:
    // group_side_effects/contract.py:5-10
    // @arc4.abimethod
    // def create_group(
    //     self,
    //     asset_create: gtxn.AssetConfigTransaction,
    //     app_create: gtxn.ApplicationCallTransaction,
    // ) -> tuple[UInt64, UInt64]:
    proto 2 2
    b test_cases.group_side_effects.contract.AppExpectingEffects.create_group_block@0

test_cases.group_side_effects.contract.AppExpectingEffects.create_group_block@0:
    // group_side_effects/contract.py:11
    // assert asset_create.created_asset.id, "expected asset created"
    frame_dig -2
    gtxns CreatedAssetID
    intc_1 // 0
    !=
    assert // expected asset created
    // group_side_effects/contract.py:13
    // op.gaid(asset_create.group_index) == asset_create.created_asset.id
    frame_dig -2
    gtxns GroupIndex
    gaids
    frame_dig -2
    gtxns CreatedAssetID
    ==
    // group_side_effects/contract.py:12-14
    // assert (
    //     op.gaid(asset_create.group_index) == asset_create.created_asset.id
    // ), "expected correct asset id"
    assert // expected correct asset id
    // group_side_effects/contract.py:15
    // assert app_create.created_app.id, "expected app created"
    frame_dig -1
    gtxns CreatedApplicationID
    intc_1 // 0
    !=
    assert // expected app created
    // group_side_effects/contract.py:17
    // op.gaid(app_create.group_index) == app_create.created_app.id
    frame_dig -1
    gtxns GroupIndex
    gaids
    frame_dig -1
    gtxns CreatedApplicationID
    ==
    // group_side_effects/contract.py:16-18
    // assert (
    //     op.gaid(app_create.group_index) == app_create.created_app.id
    // ), "expected correct app id"
    assert // expected correct app id
    // group_side_effects/contract.py:20
    // return asset_create.created_asset.id, app_create.created_app.id
    frame_dig -2
    gtxns CreatedAssetID
    frame_dig -1
    gtxns CreatedApplicationID
    retsub


// test_cases.group_side_effects.contract.AppExpectingEffects.log_group(app_call: uint64) -> void:
test_cases.group_side_effects.contract.AppExpectingEffects.log_group:
    // group_side_effects/contract.py:22-23
    // @arc4.abimethod
    // def log_group(self, app_call: gtxn.ApplicationCallTransaction) -> None:
    proto 1 0
    b test_cases.group_side_effects.contract.AppExpectingEffects.log_group_block@0

test_cases.group_side_effects.contract.AppExpectingEffects.log_group_block@0:
    // group_side_effects/contract.py:24
    // assert app_call.app_args(0) == arc4.arc4_signature(
    frame_dig -1
    intc_1 // 0
    gtxnsas ApplicationArgs
    // group_side_effects/contract.py:24-26
    // assert app_call.app_args(0) == arc4.arc4_signature(
    //     "some_value()uint64"
    // ), "expected correct method called"
    pushbytes 0xd3479e65 // method "some_value()uint64"
    ==
    assert // expected correct method called
    // group_side_effects/contract.py:27
    // assert app_call.num_logs == 1, "expected logs"
    frame_dig -1
    gtxns NumLogs
    intc_0 // 1
    ==
    assert // expected logs
    // group_side_effects/contract.py:29
    // arc4.UInt64.from_log(app_call.last_log)
    frame_dig -1
    gtxns LastLog
    dup
    extract 4 0
    cover 1
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    // group_side_effects/contract.py:30
    // == (app_call.group_index + 1) * Global.group_size
    frame_dig -1
    gtxns GroupIndex
    intc_0 // 1
    +
    global GroupSize
    *
    // group_side_effects/contract.py:29-30
    // arc4.UInt64.from_log(app_call.last_log)
    // == (app_call.group_index + 1) * Global.group_size
    itob
    b==
    // group_side_effects/contract.py:28-31
    // assert (
    //     arc4.UInt64.from_log(app_call.last_log)
    //     == (app_call.group_index + 1) * Global.group_size
    // )
    assert
    retsub
