contract test_cases.group_side_effects.other.AppCall:
    program approval:
        subroutine test_cases.group_side_effects.other.AppCall.approval_program() -> bool:
            block@0: // L4
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@5
            block@1: // abi_routing_L4
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "some_value()uint64" => block@2, * => block@3}
            block@2: // some_value_route_L5
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (== tmp%2#0 NoOp)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                let tmp%5#0: uint64 = test_cases.group_side_effects.other.AppCall.some_value()
                let val_as_bytes%0#0: bytes = (itob tmp%5#0)
                let tmp%6#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
                (log tmp%6#0)
                return 1u
            block@3: // switch_case_default_L4
                goto block@4
            block@4: // switch_case_next_L4
                fail // reject transaction
            block@5: // bare_routing_L4
                let tmp%7#0: uint64 = (txn OnCompletion)
                switch tmp%7#0 {0u => block@6, * => block@7}
            block@6: // __algopy_default_create_L4
                let tmp%8#0: bool = (txn ApplicationID)
                let tmp%9#0: bool = (! tmp%8#0)
                (assert tmp%9#0) // is creating
                test_cases.group_side_effects.other.AppCall.__algopy_default_create()
                return 1u
            block@7: // reject_bare_on_completion_L4
                fail // reject transaction
        
        subroutine test_cases.group_side_effects.other.AppCall.some_value() -> uint64:
            block@0: // L5
                let tmp%0#0: uint64 = (global GroupSize)
                let tmp%1#0: uint64 = (txn GroupIndex)
                let tmp%2#0: uint64 = (+ tmp%1#0 1u)
                let tmp%3#0: uint64 = (* tmp%0#0 tmp%2#0)
                return tmp%3#0
        
        subroutine test_cases.group_side_effects.other.AppCall.__algopy_default_create() -> void:
            block@0: // L4
                return 
    
    program clear-state:
        subroutine test_cases.group_side_effects.other.AppCall.clear_state_program() -> bool:
            block@0: // L4
                return 1u