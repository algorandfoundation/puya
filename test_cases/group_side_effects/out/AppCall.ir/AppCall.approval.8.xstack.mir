// Op                                                                                   Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    // group_side_effects/other.py:4
    // class AppCall(ARC4Contract):
    txn NumAppArgs                                                                      tmp%0#1
    bz main_bare_routing@6 ; b main_abi_routing@2

main_abi_routing@2:
    // group_side_effects/other.py:4
    // class AppCall(ARC4Contract):
    txna ApplicationArgs 0                                                              tmp%2#0
    method some_value()uint64                                                           tmp%2#0,Method(some_value()uint64)
    l-load tmp%2#0 1                                                                    Method(some_value()uint64),tmp%2#0
    match main_some_value_route@3 ; b main_after_if_else@10

main_some_value_route@3:
    // group_side_effects/other.py:5
    // @arc4.abimethod()
    txn OnCompletion                                                                    tmp%3#0
    !                                                                                   tmp%4#0
    assert // OnCompletion is not NoOp
    txn ApplicationID                                                                   tmp%5#0
    assert // can only call when not creating
    callsub some_value                                                                  to_encode%0#0
    itob                                                                                val_as_bytes%0#0
    byte 0x151f7c75                                                                     val_as_bytes%0#0,0x151f7c75
    l-load val_as_bytes%0#0 1                                                           0x151f7c75,val_as_bytes%0#0
    concat                                                                              tmp%7#0
    log
    int 1                                                                               test_cases.group_side_effects.other.AppCall.__puya_arc4_router__%0#0
    x-store tmp%0#0                                                                     (𝕏) tmp%0#0 |
    b main_after_inlined_test_cases.group_side_effects.other.AppCall.__puya_arc4_router__@11 (𝕏) tmp%0#0 | 

main_bare_routing@6:
    // group_side_effects/other.py:4
    // class AppCall(ARC4Contract):
    txn OnCompletion                                                                    tmp%8#0
    bz main___algopy_default_create@7 ; b main_after_if_else@10

main___algopy_default_create@7:
    txn ApplicationID                                                                   tmp%9#0
    !                                                                                   tmp%10#0
    assert // can only call when creating
    int 1                                                                               test_cases.group_side_effects.other.AppCall.__puya_arc4_router__%0#0
    x-store tmp%0#0                                                                     (𝕏) tmp%0#0 |
    b main_after_inlined_test_cases.group_side_effects.other.AppCall.__puya_arc4_router__@11 (𝕏) tmp%0#0 | 

main_after_if_else@10:
    // group_side_effects/other.py:4
    // class AppCall(ARC4Contract):
    int 0                                                                               test_cases.group_side_effects.other.AppCall.__puya_arc4_router__%0#0
    x-store tmp%0#0                                                                     (𝕏) tmp%0#0 |
    b main_after_inlined_test_cases.group_side_effects.other.AppCall.__puya_arc4_router__@11 (𝕏) tmp%0#0 | 

main_after_inlined_test_cases.group_side_effects.other.AppCall.__puya_arc4_router__@11: (𝕏) tmp%0#0 |
    x-load tmp%0#0                                                                      tmp%0#0
    return


// test_cases.group_side_effects.other.AppCall.some_value() -> uint64:
some_value:
    // group_side_effects/other.py:7
    // return Global.group_size * (Txn.group_index + 1)
    global GroupSize                                                                    tmp%0#0
    txn GroupIndex                                                                      tmp%0#0,tmp%1#0
    int 1                                                                               tmp%0#0,tmp%1#0,1
    +                                                                                   tmp%0#0,tmp%2#0
    l-load tmp%0#0 1                                                                    tmp%2#0,tmp%0#0
    l-load tmp%2#0 1                                                                    tmp%0#0,tmp%2#0
    *                                                                                   tmp%3#0
    retsub                                                                              tmp%3#0


