main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@6
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "some_value()uint64" => block@3, * => block@10}
    block@3: // some_value_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        test_cases.group_side_effects.other.AppCall.some_value[routing]()
        goto block@10
    block@6: // bare_routing_L4
        let tmp%7#0: uint64 = (txn OnCompletion)
        let not%tmp%7#0: bool = (! tmp%7#0)
        (assert not%tmp%7#0)
        let tmp%8#0: uint64 = (txn ApplicationID)
        let tmp%9#0: bool = (! tmp%8#0)
        (assert tmp%9#0) // can only call when creating
        exit 1u
    block@10: // after_if_else_L4
        fail

subroutine test_cases.group_side_effects.other.AppCall.some_value[routing]() -> void:
    block@0: // L5
        let tmp%0#1: uint64 = (global GroupSize)
        let tmp%1#1: uint64 = (txn GroupIndex)
        let tmp%2#1: uint64 = (+ tmp%1#1 1u)
        let tmp%3#0: uint64 = (* tmp%0#1 tmp%2#1)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%3#0)
        let tmp%2#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%2#0)
        exit 1u