main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L4
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%4#0 ? block@3 : block@8
    block@3: // call_NoOp_L4
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "create_group(acfg,appl)(uint64,uint64)" => block@4, method "log_group(appl)void" => block@5, * => block@8}
    block@4: // create_group_route_L5
        test_cases.group_side_effects.contract.AppExpectingEffects.create_group[routing]()
        goto block@8
    block@5: // log_group_route_L22
        test_cases.group_side_effects.contract.AppExpectingEffects.log_group[routing]()
        goto block@8
    block@8: // after_if_else_L4
        fail
    block@9: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.group_side_effects.contract.AppExpectingEffects.__algopy_default_create()
        exit 1u

subroutine test_cases.group_side_effects.contract.AppExpectingEffects.create_group[routing]() -> void:
    block@0: // L5
        let tmp%0#0: uint64 = (txn GroupIndex)
        let asset_create#0: uint64 = (- tmp%0#0 2u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) asset_create#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 acfg)
        (assert gtxn_type_matches%0#0) // transaction type is acfg
        let tmp%1#0: uint64 = (txn GroupIndex)
        let app_create#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) app_create#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 appl)
        (assert gtxn_type_matches%1#0) // transaction type is appl
        let tmp%0#1: uint64 = ((gtxns CreatedAssetID) asset_create#0)
        let tmp%1#1: bool = (!= tmp%0#1 0u)
        (assert tmp%0#1) // expected asset created
        let tmp%2#1: uint64 = ((gtxns GroupIndex) asset_create#0)
        let tmp%3#1: uint64 = (gaids tmp%2#1)
        let tmp%5#1: bool = (== tmp%3#1 tmp%0#1)
        (assert tmp%5#1) // expected correct asset id
        let tmp%6#0: uint64 = ((gtxns CreatedApplicationID) app_create#0)
        let tmp%7#0: bool = (!= tmp%6#0 0u)
        (assert tmp%6#0) // expected app created
        let tmp%8#0: uint64 = ((gtxns GroupIndex) app_create#0)
        let tmp%9#0: uint64 = (gaids tmp%8#0)
        let tmp%11#0: bool = (== tmp%9#0 tmp%6#0)
        (assert tmp%11#0) // expected correct app id
        let tmp%4#0: Encoded(uint64,uint64) = bytes_encode<(uint64,uint64)>(tmp%0#1, tmp%6#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.group_side_effects.contract.AppExpectingEffects.log_group[routing]() -> void:
    block@0: // L22
        let tmp%0#0: uint64 = (txn GroupIndex)
        let app_call#0: uint64 = (- tmp%0#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) app_call#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 appl)
        (assert gtxn_type_matches%0#0) // transaction type is appl
        let tmp%0#1: bytes = ((gtxnsas ApplicationArgs) app_call#0 0u)
        let tmp%1#0: bool = (== tmp%0#1 method "some_value()uint64")
        (assert tmp%1#0) // expected correct method called
        let tmp%2#0: uint64 = ((gtxns NumLogs) app_call#0)
        let tmp%3#0: bool = (== tmp%2#0 1u)
        (assert tmp%3#0) // expected logs
        let awst_tmp%0#0: bytes = ((gtxns LastLog) app_call#0)
        let tmp%4#0: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%5#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%6#0: bool = (== tmp%5#0 0x151f7c75)
        (assert tmp%6#0) // application log value is not the result of an ABI return
        let tmp%7#0: uint64 = ((gtxns GroupIndex) app_call#0)
        let tmp%8#0: uint64 = (+ tmp%7#0 1u)
        let tmp%9#0: uint64 = (global GroupSize)
        let tmp%10#0: uint64 = (* tmp%8#0 tmp%9#0)
        let tmp%11#0: biguint = (itob tmp%10#0)
        let tmp%12#0: bool = (b== tmp%4#0 tmp%11#0)
        (assert tmp%12#0)
        exit 1u

subroutine test_cases.group_side_effects.contract.AppExpectingEffects.__algopy_default_create() -> void:
    block@0: // L1
        return 