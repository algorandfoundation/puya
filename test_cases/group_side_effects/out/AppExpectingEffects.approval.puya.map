{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;;;;AACK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMU;;AAAA;;AAAP;AAAA;AAEY;;AAAA;;AAAR;AAAA;;AAAA;AADJ;AAGO;;AAAA;;AAAP;AAAA;AAEY;;AAAA;;AAAR;AAAA;;AAAA;AADJ;AAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEU;AAAkB;;AAAlB;;AAAwB;;;;;;AAAxB;AAAP;AAGO;AAAA;;AAAqB;AAArB;AAAP;AAEyB;AAAA;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACI;AAAA;;AAAuB;AAAvB;AAA4B;;AAA7B;AADH;AAAA;AAPP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 6"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "bz main___algopy_default_create@9",
      "stack_out": []
    },
    "17": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "19": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "20": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "21": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "23": {
      "op": "assert",
      "stack_out": []
    },
    "24": {
      "op": "pushbytess 0x6d3a0439 0x62a0ef62 // method \"create_group(acfg,appl)(uint64,uint64)\", method \"log_group(appl)void\"",
      "defined_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)"
      ],
      "stack_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)"
      ]
    },
    "36": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)",
        "tmp%6#0"
      ]
    },
    "39": {
      "op": "match create_group log_group",
      "stack_out": []
    },
    "45": {
      "op": "err"
    },
    "46": {
      "block": "main___algopy_default_create@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "48": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "49": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "51": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "52": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "53": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "54": {
      "subroutine": "test_cases.group_side_effects.contract.AppExpectingEffects.create_group[routing]",
      "params": {},
      "block": "create_group",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "56": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "58": {
      "op": "-",
      "defined_out": [
        "asset_create#0"
      ],
      "stack_out": [
        "asset_create#0"
      ]
    },
    "59": {
      "op": "dup",
      "defined_out": [
        "asset_create#0",
        "asset_create#0 (copy)"
      ],
      "stack_out": [
        "asset_create#0",
        "asset_create#0 (copy)"
      ]
    },
    "60": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asset_create#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset_create#0",
        "gtxn_type%0#0"
      ]
    },
    "62": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg",
        "asset_create#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset_create#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "64": {
      "op": "==",
      "defined_out": [
        "asset_create#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asset_create#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "65": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "asset_create#0"
      ]
    },
    "66": {
      "op": "txn GroupIndex",
      "defined_out": [
        "asset_create#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "asset_create#0",
        "tmp%1#0"
      ]
    },
    "68": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "asset_create#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "asset_create#0",
        "tmp%1#0",
        "1"
      ]
    },
    "69": {
      "op": "-",
      "defined_out": [
        "app_create#0",
        "asset_create#0"
      ],
      "stack_out": [
        "asset_create#0",
        "app_create#0"
      ]
    },
    "70": {
      "op": "dup",
      "defined_out": [
        "app_create#0",
        "app_create#0 (copy)",
        "asset_create#0"
      ],
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "app_create#0 (copy)"
      ]
    },
    "71": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "app_create#0",
        "asset_create#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "gtxn_type%1#0"
      ]
    },
    "73": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app_create#0",
        "appl",
        "asset_create#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "gtxn_type%1#0",
        "appl"
      ]
    },
    "74": {
      "op": "==",
      "defined_out": [
        "app_create#0",
        "asset_create#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "75": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "asset_create#0",
        "app_create#0"
      ]
    },
    "76": {
      "op": "dig 1",
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "asset_create#0 (copy)"
      ]
    },
    "78": {
      "op": "gtxns CreatedAssetID",
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "tmp%0#0"
      ]
    },
    "80": {
      "op": "dup",
      "defined_out": [
        "app_create#0",
        "asset_create#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "81": {
      "error": "expected asset created",
      "op": "assert // expected asset created",
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "tmp%0#0"
      ]
    },
    "82": {
      "op": "uncover 2",
      "stack_out": [
        "app_create#0",
        "tmp%0#0",
        "asset_create#0"
      ]
    },
    "84": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "app_create#0",
        "tmp%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "app_create#0",
        "tmp%0#0",
        "tmp%2#1"
      ]
    },
    "86": {
      "op": "gaids",
      "defined_out": [
        "app_create#0",
        "tmp%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "app_create#0",
        "tmp%0#0",
        "tmp%3#1"
      ]
    },
    "87": {
      "op": "dig 1",
      "stack_out": [
        "app_create#0",
        "tmp%0#0",
        "tmp%3#1",
        "tmp%0#0 (copy)"
      ]
    },
    "89": {
      "op": "==",
      "defined_out": [
        "app_create#0",
        "tmp%0#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "app_create#0",
        "tmp%0#0",
        "tmp%5#1"
      ]
    },
    "90": {
      "error": "expected correct asset id",
      "op": "assert // expected correct asset id",
      "stack_out": [
        "app_create#0",
        "tmp%0#0"
      ]
    },
    "91": {
      "op": "dig 1",
      "stack_out": [
        "app_create#0",
        "tmp%0#0",
        "app_create#0 (copy)"
      ]
    },
    "93": {
      "op": "gtxns CreatedApplicationID",
      "defined_out": [
        "app_create#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "app_create#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "95": {
      "op": "dup",
      "defined_out": [
        "app_create#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "app_create#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "96": {
      "error": "expected app created",
      "op": "assert // expected app created",
      "stack_out": [
        "app_create#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "97": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "app_create#0"
      ]
    },
    "99": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "101": {
      "op": "gaids",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "102": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%9#0",
        "tmp%6#0 (copy)"
      ]
    },
    "104": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%11#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%11#0"
      ]
    },
    "105": {
      "error": "expected correct app id",
      "op": "assert // expected correct app id",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "106": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "tmp%0#0"
      ]
    },
    "107": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "108": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%6#0"
      ]
    },
    "109": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "110": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "111": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "0x151f7c75"
      ]
    },
    "112": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%1#0"
      ]
    },
    "113": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "114": {
      "op": "log",
      "stack_out": []
    },
    "115": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "116": {
      "op": "return",
      "stack_out": []
    },
    "117": {
      "subroutine": "test_cases.group_side_effects.contract.AppExpectingEffects.log_group[routing]",
      "params": {},
      "block": "log_group",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "119": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "120": {
      "op": "-",
      "defined_out": [
        "app_call#0"
      ],
      "stack_out": [
        "app_call#0"
      ]
    },
    "121": {
      "op": "dup",
      "defined_out": [
        "app_call#0",
        "app_call#0 (copy)"
      ],
      "stack_out": [
        "app_call#0",
        "app_call#0 (copy)"
      ]
    },
    "122": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "app_call#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "app_call#0",
        "gtxn_type%0#0"
      ]
    },
    "124": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app_call#0",
        "appl",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "app_call#0",
        "gtxn_type%0#0",
        "appl"
      ]
    },
    "125": {
      "op": "==",
      "defined_out": [
        "app_call#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "app_call#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "126": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "app_call#0"
      ]
    },
    "127": {
      "op": "dup",
      "stack_out": [
        "app_call#0",
        "app_call#0 (copy)"
      ]
    },
    "128": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "app_call#0",
        "app_call#0 (copy)"
      ],
      "stack_out": [
        "app_call#0",
        "app_call#0 (copy)",
        "0"
      ]
    },
    "130": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "app_call#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%0#1"
      ]
    },
    "132": {
      "op": "pushbytes 0xd3479e65 // method \"some_value()uint64\"",
      "defined_out": [
        "Method(some_value()uint64)",
        "app_call#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%0#1",
        "Method(some_value()uint64)"
      ]
    },
    "138": {
      "op": "==",
      "defined_out": [
        "app_call#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%1#0"
      ]
    },
    "139": {
      "error": "expected correct method called",
      "op": "assert // expected correct method called",
      "stack_out": [
        "app_call#0"
      ]
    },
    "140": {
      "op": "dup",
      "stack_out": [
        "app_call#0",
        "app_call#0 (copy)"
      ]
    },
    "141": {
      "op": "gtxns NumLogs",
      "defined_out": [
        "app_call#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%2#0"
      ]
    },
    "143": {
      "op": "intc_0 // 1",
      "stack_out": [
        "app_call#0",
        "tmp%2#0",
        "1"
      ]
    },
    "144": {
      "op": "==",
      "defined_out": [
        "app_call#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%3#0"
      ]
    },
    "145": {
      "error": "expected logs",
      "op": "assert // expected logs",
      "stack_out": [
        "app_call#0"
      ]
    },
    "146": {
      "op": "dup",
      "stack_out": [
        "app_call#0",
        "app_call#0 (copy)"
      ]
    },
    "147": {
      "op": "gtxns LastLog",
      "defined_out": [
        "app_call#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app_call#0",
        "awst_tmp%0#0"
      ]
    },
    "149": {
      "op": "dup",
      "defined_out": [
        "app_call#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app_call#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "150": {
      "op": "extract 4 0",
      "defined_out": [
        "app_call#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "app_call#0",
        "awst_tmp%0#0",
        "tmp%4#0"
      ]
    },
    "153": {
      "op": "swap",
      "stack_out": [
        "app_call#0",
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "154": {
      "op": "extract 0 4",
      "defined_out": [
        "app_call#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "157": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "app_call#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%4#0",
        "tmp%5#0",
        "0x151f7c75"
      ]
    },
    "158": {
      "op": "==",
      "defined_out": [
        "app_call#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "159": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app_call#0",
        "tmp%4#0"
      ]
    },
    "160": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "app_call#0"
      ]
    },
    "161": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "163": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0",
        "1"
      ]
    },
    "164": {
      "op": "+",
      "defined_out": [
        "tmp%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0"
      ]
    },
    "165": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%4#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "167": {
      "op": "*",
      "defined_out": [
        "tmp%10#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%10#0"
      ]
    },
    "168": {
      "op": "itob",
      "defined_out": [
        "tmp%11#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%11#0"
      ]
    },
    "169": {
      "op": "b==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "170": {
      "op": "return",
      "stack_out": []
    }
  }
}