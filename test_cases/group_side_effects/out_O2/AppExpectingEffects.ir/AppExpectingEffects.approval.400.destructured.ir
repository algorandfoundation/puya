main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let lifted%return#0: bool = 1u
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@16
    block@2: // abi_routing_L4
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "create_group(acfg,appl)(uint64,uint64)" => block@6, method "log_group(appl)void" => block@7, * => block@8}
    block@6: // create_group_route_L5
        let tmp%0#1: uint64 = (txn GroupIndex)
        let asset_create#0: uint64 = (- tmp%0#1 2u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) asset_create#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 acfg)
        (assert gtxn_type_matches%0#0) // transaction type is acfg
        let tmp%1#2: uint64 = (txn GroupIndex)
        let app_create#0: uint64 = (- tmp%1#2 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) app_create#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 appl)
        (assert gtxn_type_matches%1#0) // transaction type is appl
        let tmp%0#1: uint64 = ((gtxns CreatedAssetID) asset_create#0)
        (assert tmp%0#1) // expected asset created
        let tmp%2#1: uint64 = ((gtxns GroupIndex) asset_create#0)
        let tmp%3#0: uint64 = (gaids tmp%2#1)
        let tmp%5#3: bool = (== tmp%3#0 tmp%0#1)
        (assert tmp%5#3) // expected correct asset id
        let tmp%6#2: uint64 = ((gtxns CreatedApplicationID) app_create#0)
        (assert tmp%6#2) // expected app created
        let tmp%8#1: uint64 = ((gtxns GroupIndex) app_create#0)
        let tmp%9#0: uint64 = (gaids tmp%8#1)
        let tmp%11#0: bool = (== tmp%9#0 tmp%6#2)
        (assert tmp%11#0) // expected correct app id
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%0#1)
        let aggregate%val_as_bytes%1#0: bytes[8] = (itob tmp%6#2)
        let aggregate%head%1#0: bytes = (concat aggregate%val_as_bytes%0#0 aggregate%val_as_bytes%1#0)
        let tmp%5#1: bytes = (concat 0x151f7c75 aggregate%head%1#0)
        (log tmp%5#1)
        exit lifted%return#0
    block@7: // log_group_route_L22
        let tmp%0#1: uint64 = (txn GroupIndex)
        let app_call#0: uint64 = (- tmp%0#1 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) app_call#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 appl)
        (assert gtxn_type_matches%0#0) // transaction type is appl
        let tmp%0#3: bytes = ((gtxnsas ApplicationArgs) app_call#0 0u)
        let tmp%1#1: bool = (== tmp%0#3 method "some_value()uint64")
        (assert tmp%1#1) // expected correct method called
        let tmp%2#1: uint64 = ((gtxns NumLogs) app_call#0)
        let tmp%3#1: bool = (== tmp%2#1 1u)
        (assert tmp%3#1) // expected logs
        let awst_tmp%0#0: bytes = ((gtxns LastLog) app_call#0)
        let tmp%4#1: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%5#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%6#0: bool = (== tmp%5#1 0x151f7c75)
        (assert tmp%6#0) // application log value is not the result of an ABI return
        let tmp%7#1: uint64 = ((gtxns GroupIndex) app_call#0)
        let tmp%8#1: uint64 = (+ tmp%7#1 1u)
        let tmp%9#0: uint64 = (global GroupSize)
        let tmp%10#0: uint64 = (* tmp%8#1 tmp%9#0)
        let tmp%11#1: biguint = (itob tmp%10#0)
        let tmp%12#0: bool = (b== tmp%4#1 tmp%11#1)
        (assert tmp%12#0)
        exit lifted%return#0
    block@8: // switch_case_default_L4
        fail
    block@16: // bare_routing_L4
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit lifted%return#0