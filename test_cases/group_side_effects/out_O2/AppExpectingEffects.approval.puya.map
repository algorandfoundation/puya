{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;AAkBK;;AAAA;AAAA;AAAA;;AAAA;AAlBL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoBe;AAAkB;;AAAlB;;AAAwB;;;;;;AAAxB;AAAP;AAGO;AAAA;;AAAqB;AAArB;AAAP;AAEyB;AAAA;;AAArB;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AACI;AAAA;;AAAuB;AAAvB;AAA4B;;AAA7B;AADH;AAAA;AADJ;AANH;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AADL;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOe;;AAAA;;AAAP;AAAA;AAEY;;AAAA;;AAAR;AAAA;;AAAA;AADJ;AAGO;;AAAA;;AAAP;AAAA;AAEY;;AAAA;;AAAR;AAAA;;AAAA;AADJ;AAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 6"
    },
    "5": {
      "op": "bytecblock 0x151f7c75"
    },
    "12": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "14": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "17": {
      "op": "pushbytess 0x6d3a0439 0x62a0ef62 // method \"create_group(acfg,appl)(uint64,uint64)\", method \"log_group(appl)void\"",
      "defined_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)"
      ],
      "stack_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)"
      ]
    },
    "29": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_group(acfg,appl)(uint64,uint64))",
        "Method(log_group(appl)void)",
        "tmp%2#0"
      ]
    },
    "32": {
      "op": "match main_create_group_route@3 main_log_group_route@4",
      "stack_out": []
    },
    "38": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "39": {
      "block": "main_log_group_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "41": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "42": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "43": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "45": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "46": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "48": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "1"
      ]
    },
    "49": {
      "op": "-",
      "defined_out": [
        "app_call#0"
      ],
      "stack_out": [
        "app_call#0"
      ]
    },
    "50": {
      "op": "dup",
      "defined_out": [
        "app_call#0",
        "app_call#0 (copy)"
      ],
      "stack_out": [
        "app_call#0",
        "app_call#0 (copy)"
      ]
    },
    "51": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "app_call#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "app_call#0",
        "gtxn_type%2#0"
      ]
    },
    "53": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app_call#0",
        "appl",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "app_call#0",
        "gtxn_type%2#0",
        "appl"
      ]
    },
    "54": {
      "op": "==",
      "defined_out": [
        "app_call#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "app_call#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "55": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "app_call#0"
      ]
    },
    "56": {
      "op": "dup",
      "stack_out": [
        "app_call#0",
        "app_call#0 (copy)"
      ]
    },
    "57": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "app_call#0",
        "app_call#0 (copy)"
      ],
      "stack_out": [
        "app_call#0",
        "app_call#0 (copy)",
        "0"
      ]
    },
    "59": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "app_call#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%0#2"
      ]
    },
    "61": {
      "op": "pushbytes 0xd3479e65 // method \"some_value()uint64\"",
      "defined_out": [
        "Method(some_value()uint64)",
        "app_call#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%0#2",
        "Method(some_value()uint64)"
      ]
    },
    "67": {
      "op": "==",
      "defined_out": [
        "app_call#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%1#1"
      ]
    },
    "68": {
      "error": "expected correct method called",
      "op": "assert // expected correct method called",
      "stack_out": [
        "app_call#0"
      ]
    },
    "69": {
      "op": "dup",
      "stack_out": [
        "app_call#0",
        "app_call#0 (copy)"
      ]
    },
    "70": {
      "op": "gtxns NumLogs",
      "defined_out": [
        "app_call#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%2#1"
      ]
    },
    "72": {
      "op": "intc_0 // 1",
      "stack_out": [
        "app_call#0",
        "tmp%2#1",
        "1"
      ]
    },
    "73": {
      "op": "==",
      "defined_out": [
        "app_call#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%3#1"
      ]
    },
    "74": {
      "error": "expected logs",
      "op": "assert // expected logs",
      "stack_out": [
        "app_call#0"
      ]
    },
    "75": {
      "op": "dup",
      "stack_out": [
        "app_call#0",
        "app_call#0 (copy)"
      ]
    },
    "76": {
      "op": "gtxns LastLog",
      "defined_out": [
        "app_call#0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "app_call#0",
        "awst_tmp%0#0"
      ]
    },
    "78": {
      "op": "dup",
      "defined_out": [
        "app_call#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "app_call#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "79": {
      "op": "extract 4 0",
      "defined_out": [
        "app_call#0",
        "awst_tmp%0#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "app_call#0",
        "awst_tmp%0#0",
        "tmp%4#1"
      ]
    },
    "82": {
      "op": "swap",
      "stack_out": [
        "app_call#0",
        "tmp%4#1",
        "awst_tmp%0#0"
      ]
    },
    "83": {
      "op": "extract 0 4",
      "defined_out": [
        "app_call#0",
        "tmp%4#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%4#1",
        "tmp%5#1"
      ]
    },
    "86": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "app_call#0",
        "tmp%4#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%4#1",
        "tmp%5#1",
        "0x151f7c75"
      ]
    },
    "87": {
      "op": "==",
      "defined_out": [
        "app_call#0",
        "tmp%4#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "app_call#0",
        "tmp%4#1",
        "tmp%6#1"
      ]
    },
    "88": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "app_call#0",
        "tmp%4#1"
      ]
    },
    "89": {
      "op": "swap",
      "stack_out": [
        "tmp%4#1",
        "app_call#0"
      ]
    },
    "90": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "tmp%4#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#1",
        "tmp%7#0"
      ]
    },
    "92": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#1",
        "tmp%7#0",
        "1"
      ]
    },
    "93": {
      "op": "+",
      "defined_out": [
        "tmp%4#1",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%4#1",
        "tmp%8#0"
      ]
    },
    "94": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%4#1",
        "tmp%8#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "tmp%4#1",
        "tmp%8#0",
        "tmp%9#1"
      ]
    },
    "96": {
      "op": "*",
      "defined_out": [
        "tmp%10#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1",
        "tmp%10#1"
      ]
    },
    "97": {
      "op": "itob",
      "defined_out": [
        "tmp%11#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1",
        "tmp%11#1"
      ]
    },
    "98": {
      "op": "b==",
      "defined_out": [
        "tmp%12#1"
      ],
      "stack_out": [
        "tmp%12#1"
      ]
    },
    "99": {
      "op": "assert",
      "stack_out": []
    },
    "100": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "101": {
      "op": "return",
      "stack_out": []
    },
    "102": {
      "block": "main_create_group_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "104": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "105": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "106": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "108": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "109": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "111": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "2"
      ]
    },
    "113": {
      "op": "-",
      "defined_out": [
        "asset_create#0"
      ],
      "stack_out": [
        "asset_create#0"
      ]
    },
    "114": {
      "op": "dup",
      "defined_out": [
        "asset_create#0",
        "asset_create#0 (copy)"
      ],
      "stack_out": [
        "asset_create#0",
        "asset_create#0 (copy)"
      ]
    },
    "115": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asset_create#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset_create#0",
        "gtxn_type%0#0"
      ]
    },
    "117": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg",
        "asset_create#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset_create#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "119": {
      "op": "==",
      "defined_out": [
        "asset_create#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asset_create#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "120": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "asset_create#0"
      ]
    },
    "121": {
      "op": "txn GroupIndex",
      "defined_out": [
        "asset_create#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "asset_create#0",
        "tmp%8#0"
      ]
    },
    "123": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "asset_create#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "asset_create#0",
        "tmp%8#0",
        "1"
      ]
    },
    "124": {
      "op": "-",
      "defined_out": [
        "app_create#0",
        "asset_create#0"
      ],
      "stack_out": [
        "asset_create#0",
        "app_create#0"
      ]
    },
    "125": {
      "op": "dup",
      "defined_out": [
        "app_create#0",
        "app_create#0 (copy)",
        "asset_create#0"
      ],
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "app_create#0 (copy)"
      ]
    },
    "126": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "app_create#0",
        "asset_create#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "gtxn_type%1#0"
      ]
    },
    "128": {
      "op": "intc_1 // appl",
      "defined_out": [
        "app_create#0",
        "appl",
        "asset_create#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "gtxn_type%1#0",
        "appl"
      ]
    },
    "129": {
      "op": "==",
      "defined_out": [
        "app_create#0",
        "asset_create#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "130": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "asset_create#0",
        "app_create#0"
      ]
    },
    "131": {
      "op": "dig 1",
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "asset_create#0 (copy)"
      ]
    },
    "133": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "app_create#0",
        "asset_create#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "tmp%0#1"
      ]
    },
    "135": {
      "op": "dup",
      "defined_out": [
        "app_create#0",
        "asset_create#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "136": {
      "error": "expected asset created",
      "op": "assert // expected asset created",
      "stack_out": [
        "asset_create#0",
        "app_create#0",
        "tmp%0#1"
      ]
    },
    "137": {
      "op": "uncover 2",
      "stack_out": [
        "app_create#0",
        "tmp%0#1",
        "asset_create#0"
      ]
    },
    "139": {
      "op": "gtxns GroupIndex",
      "defined_out": [
        "app_create#0",
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "app_create#0",
        "tmp%0#1",
        "tmp%2#1"
      ]
    },
    "141": {
      "op": "gaids",
      "stack_out": [
        "app_create#0",
        "tmp%0#1",
        "tmp%3#0"
      ]
    },
    "142": {
      "op": "dig 1",
      "stack_out": [
        "app_create#0",
        "tmp%0#1",
        "tmp%3#0",
        "tmp%0#1 (copy)"
      ]
    },
    "144": {
      "op": "==",
      "defined_out": [
        "app_create#0",
        "tmp%0#1",
        "tmp%5#2"
      ],
      "stack_out": [
        "app_create#0",
        "tmp%0#1",
        "tmp%5#2"
      ]
    },
    "145": {
      "error": "expected correct asset id",
      "op": "assert // expected correct asset id",
      "stack_out": [
        "app_create#0",
        "tmp%0#1"
      ]
    },
    "146": {
      "op": "dig 1",
      "stack_out": [
        "app_create#0",
        "tmp%0#1",
        "app_create#0 (copy)"
      ]
    },
    "148": {
      "op": "gtxns CreatedApplicationID",
      "defined_out": [
        "app_create#0",
        "tmp%0#1",
        "tmp%6#2"
      ],
      "stack_out": [
        "app_create#0",
        "tmp%0#1",
        "tmp%6#2"
      ]
    },
    "150": {
      "op": "dup",
      "defined_out": [
        "app_create#0",
        "tmp%0#1",
        "tmp%6#2",
        "tmp%6#2 (copy)"
      ],
      "stack_out": [
        "app_create#0",
        "tmp%0#1",
        "tmp%6#2",
        "tmp%6#2 (copy)"
      ]
    },
    "151": {
      "error": "expected app created",
      "op": "assert // expected app created",
      "stack_out": [
        "app_create#0",
        "tmp%0#1",
        "tmp%6#2"
      ]
    },
    "152": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#1",
        "tmp%6#2",
        "app_create#0"
      ]
    },
    "154": {
      "op": "gtxns GroupIndex",
      "stack_out": [
        "tmp%0#1",
        "tmp%6#2",
        "tmp%8#0"
      ]
    },
    "156": {
      "op": "gaids",
      "defined_out": [
        "tmp%0#1",
        "tmp%6#2",
        "tmp%9#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%6#2",
        "tmp%9#1"
      ]
    },
    "157": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#1",
        "tmp%6#2",
        "tmp%9#1",
        "tmp%6#2 (copy)"
      ]
    },
    "159": {
      "op": "==",
      "defined_out": [
        "tmp%0#1",
        "tmp%11#2",
        "tmp%6#2"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%6#2",
        "tmp%11#2"
      ]
    },
    "160": {
      "error": "expected correct app id",
      "op": "assert // expected correct app id",
      "stack_out": [
        "tmp%0#1",
        "tmp%6#2"
      ]
    },
    "161": {
      "op": "swap",
      "stack_out": [
        "tmp%6#2",
        "tmp%0#1"
      ]
    },
    "162": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%6#2"
      ],
      "stack_out": [
        "tmp%6#2",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "163": {
      "op": "swap",
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%6#2"
      ]
    },
    "164": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "165": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "166": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "0x151f7c75"
      ]
    },
    "167": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%head%1#0"
      ]
    },
    "168": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "169": {
      "op": "log",
      "stack_out": []
    },
    "170": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "171": {
      "op": "return",
      "stack_out": []
    },
    "172": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "174": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "177": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "179": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "180": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "181": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "182": {
      "op": "return",
      "stack_out": []
    }
  }
}