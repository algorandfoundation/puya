#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 6
    bytecblock 0x151f7c75
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x6d3a0439 0x62a0ef62 // method "create_group(acfg,appl)(uint64,uint64)", method "log_group(appl)void"
    txna ApplicationArgs 0
    match main_create_group_route@3 main_log_group_route@4

main_after_if_else@11:
    intc_1 // 0
    return

main_log_group_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // appl
    ==
    assert // transaction type is appl
    dup
    intc_1 // 0
    gtxnsas ApplicationArgs
    pushbytes 0xd3479e65 // method "some_value()uint64"
    ==
    assert // expected correct method called
    dup
    gtxns NumLogs
    intc_0 // 1
    ==
    assert // expected logs
    dup
    gtxns LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    swap
    gtxns GroupIndex
    intc_0 // 1
    +
    global GroupSize
    *
    itob
    b==
    assert
    intc_0 // 1
    return

main_create_group_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    pushint 3 // acfg
    ==
    assert // transaction type is acfg
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // appl
    ==
    assert // transaction type is appl
    dig 1
    gtxns CreatedAssetID
    dup
    assert // expected asset created
    uncover 2
    gtxns GroupIndex
    gaids
    dig 1
    ==
    assert // expected correct asset id
    dig 1
    gtxns CreatedApplicationID
    dup
    assert // expected app created
    uncover 2
    gtxns GroupIndex
    gaids
    dig 1
    ==
    assert // expected correct app id
    swap
    itob
    swap
    itob
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@7:
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return
