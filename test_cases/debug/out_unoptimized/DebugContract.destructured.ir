contract test_cases.debug.contract.DebugContract:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = test_cases.debug.contract.DebugContract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.debug.contract.DebugContract.__puya_arc4_router__() -> bool:
            block@0: // L4
                let tmp%0#0: uint64 = (txn NumAppArgs)
                let tmp%1#0: bool = (!= tmp%0#0 0u)
                goto tmp%1#0 ? block@1 : block@5
            block@1: // abi_routing_L4
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "test(uint64,uint64,uint64)uint64" => block@2, * => block@3}
            block@2: // test_route_L5
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (== tmp%3#0 NoOp)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                let tmp%6#0: bool = (!= tmp%5#0 0u)
                (assert tmp%6#0) // is not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: uint64 = (btoi tmp%7#0)
                let tmp%9#0: bytes = (txna ApplicationArgs 2)
                let tmp%10#0: uint64 = (btoi tmp%9#0)
                let tmp%11#0: bytes = (txna ApplicationArgs 3)
                let tmp%12#0: uint64 = (btoi tmp%11#0)
                let to_encode%0#0: uint64 = test_cases.debug.contract.DebugContract.test(tmp%8#0, tmp%10#0, tmp%12#0)
                let val_as_bytes%0#0: bytes = (itob to_encode%0#0)
                let tmp%13#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
                (log tmp%13#0)
                return 1u
            block@3: // switch_case_default_L4
                goto block@4
            block@4: // switch_case_next_L4
                goto block@9
            block@5: // bare_routing_L4
                let tmp%14#0: uint64 = (txn OnCompletion)
                switch tmp%14#0 {0u => block@6, * => block@7}
            block@6: // __algopy_default_create_L1
                let tmp%15#0: uint64 = (txn ApplicationID)
                let tmp%16#0: bool = (== tmp%15#0 0u)
                (assert tmp%16#0) // is creating
                test_cases.debug.contract.DebugContract.__algopy_default_create()
                return 1u
            block@7: // switch_case_default_L4
                goto block@8
            block@8: // switch_case_next_L4
                goto block@9
            block@9: // after_if_else_L4
                return 0u
        
        subroutine test_cases.debug.contract.DebugContract.test(x: uint64, y: uint64, z: uint64) -> uint64:
            block@0: // L5
                let a#0: uint64 = (* x#0 TemplateVar[uint64](TMPL_A_MULT))
                let b#0: uint64 = (+ x#0 y#0)
                let c#0: uint64 = (* b#0 z#0)
                let tmp%0#0: bool = (< b#0 c#0)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // if_body_L12
                let a#0: uint64 = (+ a#0 y#0)
                goto block@11
            block@2: // else_body_L13
                let tmp%1#0: bool = (< a#0 c#0)
                goto tmp%1#0 ? block@3 : block@4
            block@3: // if_body_L14
                let a#0: uint64 = (+ a#0 z#0)
                goto block@10
            block@4: // else_body_L15
                let tmp%2#0: bool = (< b#0 a#0)
                goto tmp%2#0 ? block@5 : block@6
            block@5: // if_body_L16
                let a#0: uint64 = (* a#0 3u)
                goto block@9
            block@6: // else_body_L17
                let tmp%3#0: bool = (> b#0 a#0)
                let b#10: uint64 = b#0
                goto tmp%3#0 ? block@7 : block@8
            block@7: // if_body_L18
                let b#0: uint64 = (+ b#0 a#0)
                let b#10: uint64 = b#0
                goto block@8
            block@8: // after_if_else_L17
                let b#0: uint64 = b#10
                goto block@9
            block@9: // after_if_else_L15
                goto block@10
            block@10: // after_if_else_L13
                goto block@11
            block@11: // after_if_else_L11
                let tmp%4#0: uint64 = (+ a#0 b#0)
                let tmp%5#0: bool = (< tmp%4#0 c#0)
                goto tmp%5#0 ? block@12 : block@13
            block@12: // if_body_L21
                let tmp%6#0: uint64 = test_cases.debug.contract.some_func(a#0, y#0)
                let a#0: uint64 = (* a#0 tmp%6#0)
                goto block@14
            block@13: // else_body_L23
                let tmp%7#0: uint64 = test_cases.debug.contract.some_func(b#0, z#0)
                let b#0: uint64 = (* b#0 tmp%7#0)
                goto block@14
            block@14: // after_if_else_L20
                let bee#0: bytes = test_cases.debug.contract.itoa(b#0)
                let c#0: uint64 = (+ a#0 b#0)
                let cea#0: bytes = test_cases.debug.contract.itoa(c#0)
                let tmp%8#0: bool = (< a#0 c#0)
                let a#30: uint64 = a#0
                goto tmp%8#0 ? block@15 : block@16
            block@15: // if_body_L30
                let a#0: uint64 = (+ a#0 c#0)
                let a#30: uint64 = a#0
                goto block@16
            block@16: // after_if_else_L29
                let a#0: uint64 = a#30
                let tmp%9#0: bool = (< a#0 b#0)
                let a#30: uint64 = a#0
                goto tmp%9#0 ? block@17 : block@18
            block@17: // if_body_L32
                let a#0: uint64 = (+ a#0 b#0)
                let a#30: uint64 = a#0
                goto block@18
            block@18: // after_if_else_L31
                let a#0: uint64 = a#30
                let tmp%10#0: uint64 = (+ b#0 c#0)
                let tmp%11#0: bool = (< a#0 tmp%10#0)
                let a#30: uint64 = a#0
                goto tmp%11#0 ? block@19 : block@20
            block@19: // if_body_L34
                let a#0: uint64 = (* a#0 z#0)
                let a#30: uint64 = a#0
                goto block@20
            block@20: // after_if_else_L33
                let a#0: uint64 = a#30
                let aye#0: bytes = test_cases.debug.contract.itoa(a#0)
                let tmp%12#0: bytes = (concat aye#0 " ")
                let tmp%13#0: bytes = (concat tmp%12#0 bee#0)
                let tmp%14#0: bytes = (concat tmp%13#0 " ")
                let tmp%15#0: bytes = (concat tmp%14#0 cea#0)
                (log tmp%15#0)
                return a#0
        
        subroutine test_cases.debug.contract.some_func(a: uint64, b: uint64) -> uint64:
            block@0: // L42
                let a#0: uint64 = (+ a#0 b#0)
                let b#0: uint64 = (* b#0 a#0)
                let a#0: uint64 = (+ a#0 b#0)
                let a#0: uint64 = (* a#0 2u)
                let x#0: uint64 = (+ a#0 b#0)
                let y#0: uint64 = (* a#0 b#0)
                let tmp%0#0: bool = (< x#0 y#0)
                let tmp%1#0: uint64 = (select y#0 x#0 tmp%0#0)
                return tmp%1#0
        
        subroutine test_cases.debug.contract.itoa(i: uint64) -> bytes:
            block@0: // L53
                let radix#0: uint64 = (len 0x30313233343536373839)
                let tmp%0#0: bool = (< i#0 radix#0)
                goto tmp%0#0 ? block@1 : block@2
            block@1: // if_body_L58
                let index_plus_1%0#0: uint64 = (+ i#0 1u)
                let tmp%1#0: bytes = (substring3 0x30313233343536373839 i#0 index_plus_1%0#0)
                return tmp%1#0
            block@2: // after_if_else_L57
                let tmp%2#0: uint64 = (/ i#0 radix#0)
                let tmp%3#0: bytes = test_cases.debug.contract.itoa(tmp%2#0)
                let tmp%4#0: uint64 = (% i#0 radix#0)
                let index_plus_1%1#0: uint64 = (+ tmp%4#0 1u)
                let tmp%5#0: bytes = (substring3 0x30313233343536373839 tmp%4#0 index_plus_1%1#0)
                let tmp%6#0: bytes = (concat tmp%3#0 tmp%5#0)
                return tmp%6#0
        
        subroutine test_cases.debug.contract.DebugContract.__algopy_default_create() -> void:
            block@0: // L1
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u