#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 TMPL_A_MULT
    bytecblock 0x30313233343536373839 " "

main_block@0:

main_block@1:
    // debug/contract.py:4
    // class DebugContract(arc4.ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_bare_routing@6

main_abi_routing@2:
    // debug/contract.py:4
    // class DebugContract(arc4.ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x53574bff // method "test(uint64,uint64,uint64)uint64"
    swap
    match main_test_route@3

main_switch_case_default@4:

main_switch_case_next@5:

main_after_if_else@10:
    // debug/contract.py:4
    // class DebugContract(arc4.ARC4Contract):
    intc_0 // 0

main_after_inlined_test_cases.debug.contract.DebugContract.__puya_arc4_router__@11:
    return

main_test_route@3:
    // debug/contract.py:5
    // @arc4.abimethod
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion is not NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    assert // can only call when not creating
    // debug/contract.py:4
    // class DebugContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // debug/contract.py:5
    // @arc4.abimethod
    uncover 2
    uncover 2
    uncover 2
    callsub test
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    b main_after_inlined_test_cases.debug.contract.DebugContract.__puya_arc4_router__@11

main_bare_routing@6:
    // debug/contract.py:4
    // class DebugContract(arc4.ARC4Contract):
    txn OnCompletion
    intc_0 // 0
    swap
    match main___algopy_default_create@7

main_switch_case_default@8:

main_switch_case_next@9:
    b main_after_if_else@10

main___algopy_default_create@7:
    txn ApplicationID
    intc_0 // 0
    ==
    assert // can only call when creating

main_block@12:

main_after_inlined_test_cases.debug.contract.DebugContract.__algopy_default_create@13:
    intc_1 // 1
    b main_after_inlined_test_cases.debug.contract.DebugContract.__puya_arc4_router__@11


// test_cases.debug.contract.some_func(a: uint64, b: uint64) -> uint64:
some_func:
    // debug/contract.py:41-42
    // @subroutine
    // def some_func(a: UInt64, b: UInt64) -> UInt64:
    proto 2 1

some_func_block@0:
    // debug/contract.py:43
    // a += b
    frame_dig -2
    frame_dig -1
    +
    frame_bury -2
    // debug/contract.py:44
    // b *= a
    frame_dig -1
    frame_dig -2
    *
    frame_bury -1
    // debug/contract.py:45
    // a += b
    frame_dig -2
    frame_dig -1
    +
    dup
    frame_bury -2
    // debug/contract.py:46
    // a *= 2
    pushint 2 // 2
    *
    dup
    frame_bury -2
    // debug/contract.py:47
    // x = a + b
    frame_dig -1
    +
    // debug/contract.py:48
    // y = a * b
    frame_dig -2
    frame_dig -1
    *
    // debug/contract.py:49
    // return x if x < y else y
    dup2
    <
    swap
    uncover 2
    uncover 2
    select
    retsub


// test_cases.debug.contract.itoa(i: uint64) -> bytes:
itoa:
    // debug/contract.py:52-53
    // @subroutine
    // def itoa(i: UInt64) -> Bytes:
    proto 1 1

itoa_block@0:
    // debug/contract.py:54
    // digits = Bytes(b"0123456789")
    bytec_0 // 0x30313233343536373839
    // debug/contract.py:55
    // radix = digits.length
    len
    dup
    // debug/contract.py:56
    // if i < radix:
    frame_dig -1
    >
    bz itoa_after_if_else@2

itoa_if_body@1:
    // debug/contract.py:54
    // digits = Bytes(b"0123456789")
    bytec_0 // 0x30313233343536373839
    // debug/contract.py:57
    // return digits[i]
    frame_dig -1
    intc_1 // 1
    extract3 // on error: Index access is out of bounds
    swap
    retsub

itoa_after_if_else@2:
    // debug/contract.py:58
    // return itoa(i // radix) + digits[i % radix]
    frame_dig -1
    frame_dig 0
    dup
    cover 2
    /
    callsub itoa
    swap
    frame_dig -1
    swap
    %
    // debug/contract.py:54
    // digits = Bytes(b"0123456789")
    bytec_0 // 0x30313233343536373839
    // debug/contract.py:58
    // return itoa(i // radix) + digits[i % radix]
    swap
    intc_1 // 1
    extract3 // on error: Index access is out of bounds
    concat
    swap
    retsub


// test_cases.debug.contract.DebugContract.test(x: uint64, y: uint64, z: uint64) -> uint64:
test:
    // debug/contract.py:5-6
    // @arc4.abimethod
    // def test(self, x: UInt64, y: UInt64, z: UInt64) -> UInt64:
    proto 3 1
    intc_0 // 0
    dup
    pushbytes ""
    dup

test_block@0:
    // debug/contract.py:7
    // a = x * TemplateVar[UInt64]("A_MULT")
    frame_dig -3
    intc_2 // TMPL_A_MULT
    *
    // debug/contract.py:8
    // b = x + y
    frame_dig -3
    frame_dig -2
    +
    dupn 2
    // debug/contract.py:9
    // c = b * z
    frame_dig -1
    *
    dup
    cover 2
    // debug/contract.py:10
    // if b < c:
    <
    bz test_else_body@2

test_if_body@1:
    // debug/contract.py:11
    // a = a + y
    frame_dig 4
    frame_dig -2
    +
    frame_bury 4

test_after_if_else@11:
    // debug/contract.py:19
    // if a + b < c:
    frame_dig 4
    frame_dig 5
    +
    frame_dig 6
    <
    bz test_else_body@13

test_if_body@12:
    // debug/contract.py:20
    // a *= some_func(a, y)
    frame_dig 4
    dup
    frame_dig -2
    callsub some_func
    *
    frame_bury 4

test_after_if_else@14:
    // debug/contract.py:24
    // bee = itoa(b)
    frame_dig 5
    dup
    callsub itoa
    frame_bury 0
    // debug/contract.py:25
    // c = a + b
    frame_dig 4
    dup
    cover 2
    +
    dup
    frame_bury 6
    // debug/contract.py:26
    // cea = itoa(c)
    dup
    callsub itoa
    frame_bury 1
    // debug/contract.py:28
    // if a < c:
    dig 1
    >
    swap
    frame_bury 2
    bz test_after_if_else@16

test_if_body@15:
    // debug/contract.py:29
    // a += c
    frame_dig 4
    frame_dig 6
    +
    frame_bury 2

test_after_if_else@16:
    frame_dig 2
    dup
    frame_bury 4
    // debug/contract.py:30
    // if a < b:
    dup
    frame_dig 5
    <
    swap
    frame_bury 2
    bz test_after_if_else@18

test_if_body@17:
    // debug/contract.py:31
    // a += b
    frame_dig 4
    frame_dig 5
    +
    frame_bury 2

test_after_if_else@18:
    frame_dig 2
    dup
    frame_bury 4
    // debug/contract.py:32
    // if a < b + c:
    frame_dig 5
    frame_dig 6
    +
    dig 1
    >
    swap
    frame_bury 2
    bz test_after_if_else@20

test_if_body@19:
    // debug/contract.py:33
    // a = a * z
    frame_dig 4
    frame_dig -1
    *
    frame_bury 2

test_after_if_else@20:
    frame_dig 2
    // debug/contract.py:35
    // aye = itoa(a)
    dup
    callsub itoa
    // debug/contract.py:36
    // log(aye, bee, cea, sep=" ")
    bytec_1 // " "
    concat
    frame_dig 0
    concat
    bytec_1 // " "
    concat
    frame_dig 1
    concat
    log
    // debug/contract.py:38
    // return a
    frame_bury 0
    retsub

test_else_body@13:
    // debug/contract.py:22
    // b *= some_func(b, z)
    frame_dig 5
    dup
    frame_dig -1
    callsub some_func
    *
    frame_bury 5
    b test_after_if_else@14

test_else_body@2:
    // debug/contract.py:12
    // elif a < c:
    frame_dig 4
    frame_dig 6
    <
    bz test_else_body@4

test_if_body@3:
    // debug/contract.py:13
    // a = a + z
    frame_dig 4
    frame_dig -1
    +
    frame_bury 4

test_after_if_else@10:
    b test_after_if_else@11

test_else_body@4:
    // debug/contract.py:14
    // elif b < a:
    frame_dig 5
    frame_dig 4
    <
    bz test_else_body@6

test_if_body@5:
    // debug/contract.py:15
    // a = a * 3
    frame_dig 4
    pushint 3 // 3
    *
    frame_bury 4

test_after_if_else@9:
    b test_after_if_else@10

test_else_body@6:
    // debug/contract.py:16
    // elif b > a:
    frame_dig 5
    dup
    frame_dig 4
    >
    swap
    frame_bury 3
    bz test_after_if_else@8

test_if_body@7:
    // debug/contract.py:17
    // b = b + a
    frame_dig 5
    frame_dig 4
    +
    frame_bury 3

test_after_if_else@8:
    frame_dig 3
    frame_bury 5
    b test_after_if_else@9
