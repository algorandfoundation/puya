#pragma version 10

test_cases.debug.contract.DebugContract.approval_program:
    intcblock TMPL_A_MULT
    callsub __puya_arc4_router__
    return


// test_cases.debug.contract.DebugContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // debug/contract.py:4
    // class DebugContract(arc4.ARC4Contract):
    proto 0 1
    txn NumAppArgs
    pushint 0 // 0
    !=
    bz __puya_arc4_router___bare_routing@5
    txna ApplicationArgs 0
    pushbytes 0x53574bff // method "test(uint64,uint64,uint64)uint64"
    uncover 1
    match __puya_arc4_router___test_route@2
    b __puya_arc4_router___switch_case_default@3

__puya_arc4_router___test_route@2:
    // debug/contract.py:5
    // @arc4.abimethod
    txn OnCompletion
    pushint 0 // NoOp
    ==
    assert // OnCompletion is NoOp
    txn ApplicationID
    pushint 0 // 0
    !=
    assert // is not creating
    // debug/contract.py:4
    // class DebugContract(arc4.ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // debug/contract.py:5
    // @arc4.abimethod
    uncover 2
    uncover 2
    uncover 2
    callsub test
    itob
    pushbytes 0x151f7c75
    uncover 1
    concat
    log
    pushint 1 // 1
    retsub

__puya_arc4_router___switch_case_default@3:
    b __puya_arc4_router___after_if_else@9

__puya_arc4_router___bare_routing@5:
    // debug/contract.py:4
    // class DebugContract(arc4.ARC4Contract):
    txn OnCompletion
    pushint 0 // 0
    uncover 1
    match __puya_arc4_router_____algopy_default_create@6
    b __puya_arc4_router___switch_case_default@7

__puya_arc4_router_____algopy_default_create@6:
    // debug/contract.py:4
    // class DebugContract(arc4.ARC4Contract):
    txn ApplicationID
    pushint 0 // 0
    ==
    assert // is creating
    callsub __algopy_default_create
    pushint 1 // 1
    retsub

__puya_arc4_router___switch_case_default@7:

__puya_arc4_router___after_if_else@9:
    // debug/contract.py:4
    // class DebugContract(arc4.ARC4Contract):
    pushint 0 // 0
    retsub


// test_cases.debug.contract.DebugContract.test(x: uint64, y: uint64, z: uint64) -> uint64:
test:
    // debug/contract.py:5-6
    // @arc4.abimethod
    // def test(self, x: UInt64, y: UInt64, z: UInt64) -> UInt64:
    proto 3 1
    pushint 0 // 0
    pushint 0 // 0
    pushbytes ""
    pushbytes ""
    // debug/contract.py:8
    // a = x * TemplateVar[UInt64]("A_MULT")
    frame_dig -3
    intc_0 // TMPL_A_MULT
    *
    // debug/contract.py:9
    // b = x + y
    frame_dig -3
    frame_dig -2
    +
    dup
    cover 1
    cover 1
    // debug/contract.py:10
    // c = b * z
    dig 0
    frame_dig -1
    *
    dup
    cover 1
    cover 2
    // debug/contract.py:11
    // if b < c:
    <
    bz test_else_body@2
    // debug/contract.py:12
    // a = a + y
    frame_dig 4
    frame_dig -2
    +
    frame_bury 4
    b test_after_if_else@11

test_else_body@2:
    // debug/contract.py:13
    // elif a < c:
    frame_dig 4
    frame_dig 6
    <
    bz test_else_body@4
    // debug/contract.py:14
    // a = a + z
    frame_dig 4
    frame_dig -1
    +
    frame_bury 4
    b test_after_if_else@10

test_else_body@4:
    // debug/contract.py:15
    // elif b < a:
    frame_dig 5
    frame_dig 4
    <
    bz test_else_body@6
    // debug/contract.py:16
    // a = a * 3
    frame_dig 4
    pushint 3 // 3
    *
    frame_bury 4
    b test_after_if_else@9

test_else_body@6:
    // debug/contract.py:17
    // elif b > a:
    frame_dig 5
    dup
    cover 1
    frame_dig 4
    >
    uncover 1
    frame_bury 3
    bz test_after_if_else@8
    // debug/contract.py:18
    // b = b + a
    frame_dig 5
    frame_dig 4
    +
    frame_bury 3

test_after_if_else@8:
    frame_dig 3
    frame_bury 5

test_after_if_else@9:

test_after_if_else@10:

test_after_if_else@11:
    // debug/contract.py:20
    // if a + b < c:
    frame_dig 4
    frame_dig 5
    +
    frame_dig 6
    <
    bz test_else_body@13
    // debug/contract.py:21
    // a *= some_func(a, y)
    frame_dig 4
    dup
    cover 1
    frame_dig -2
    callsub some_func
    *
    frame_bury 4
    b test_after_if_else@14

test_else_body@13:
    // debug/contract.py:23
    // b *= some_func(b, z)
    frame_dig 5
    dup
    cover 1
    frame_dig -1
    callsub some_func
    *
    frame_bury 5

test_after_if_else@14:
    // debug/contract.py:25
    // bee = itoa(b)
    frame_dig 5
    dup
    cover 1
    callsub itoa
    frame_bury 0
    // debug/contract.py:26
    // c = a + b
    frame_dig 4
    dup
    cover 2
    uncover 1
    +
    dup
    cover 1
    frame_bury 6
    // debug/contract.py:27
    // cea = itoa(c)
    dig 0
    callsub itoa
    frame_bury 1
    // debug/contract.py:29
    // if a < c:
    dig 1
    uncover 1
    <
    uncover 1
    frame_bury 2
    bz test_after_if_else@16
    // debug/contract.py:30
    // a += c
    frame_dig 4
    frame_dig 6
    +
    frame_bury 2

test_after_if_else@16:
    frame_dig 2
    dup
    cover 1
    frame_bury 4
    // debug/contract.py:31
    // if a < b:
    dig 0
    frame_dig 5
    <
    uncover 1
    frame_bury 2
    bz test_after_if_else@18
    // debug/contract.py:32
    // a += b
    frame_dig 4
    frame_dig 5
    +
    frame_bury 2

test_after_if_else@18:
    frame_dig 2
    dup
    cover 1
    frame_bury 4
    // debug/contract.py:33
    // if a < b + c:
    frame_dig 5
    frame_dig 6
    +
    dig 1
    uncover 1
    <
    uncover 1
    frame_bury 2
    bz test_after_if_else@20
    // debug/contract.py:34
    // a = a * z
    frame_dig 4
    frame_dig -1
    *
    frame_bury 2

test_after_if_else@20:
    frame_dig 2
    // debug/contract.py:36
    // aye = itoa(a)
    dig 0
    callsub itoa
    // debug/contract.py:37
    // log(aye, bee, cea, sep=" ")
    pushbytes " "
    concat
    frame_dig 0
    concat
    pushbytes " "
    concat
    frame_dig 1
    concat
    log
    // debug/contract.py:39
    // return a
    frame_bury 0
    retsub


// test_cases.debug.contract.some_func(a: uint64, b: uint64) -> uint64:
some_func:
    // debug/contract.py:42-43
    // @subroutine
    // def some_func(a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // debug/contract.py:44
    // a += b
    frame_dig -2
    frame_dig -1
    +
    frame_bury -2
    // debug/contract.py:45
    // b *= a
    frame_dig -1
    frame_dig -2
    *
    frame_bury -1
    // debug/contract.py:46
    // a += b
    frame_dig -2
    frame_dig -1
    +
    frame_bury -2
    // debug/contract.py:47
    // a *= 2
    frame_dig -2
    pushint 2 // 2
    *
    frame_bury -2
    // debug/contract.py:48
    // x = a + b
    frame_dig -2
    frame_dig -1
    +
    // debug/contract.py:49
    // y = a * b
    frame_dig -2
    frame_dig -1
    *
    // debug/contract.py:50
    // return x if x < y else y
    dig 1
    dig 1
    <
    cover 1
    uncover 2
    uncover 2
    select
    retsub


// test_cases.debug.contract.itoa(i: uint64) -> bytes:
itoa:
    // debug/contract.py:53-54
    // @subroutine
    // def itoa(i: UInt64) -> Bytes:
    proto 1 1
    // debug/contract.py:55
    // digits = Bytes(b"0123456789")
    pushbytes 0x30313233343536373839
    // debug/contract.py:56
    // radix = digits.length
    len
    dup
    cover 1
    cover 1
    // debug/contract.py:57
    // if i < radix:
    frame_dig -1
    uncover 1
    <
    bz itoa_after_if_else@2
    // debug/contract.py:58
    // return digits[i]
    frame_dig -1
    pushint 1 // 1
    +
    // debug/contract.py:55
    // digits = Bytes(b"0123456789")
    pushbytes 0x30313233343536373839
    // debug/contract.py:58
    // return digits[i]
    frame_dig -1
    uncover 2
    substring3
    uncover 1
    retsub

itoa_after_if_else@2:
    // debug/contract.py:59
    // return itoa(i // radix) + digits[i % radix]
    frame_dig -1
    frame_dig 0
    dup
    cover 2
    /
    callsub itoa
    cover 1
    frame_dig -1
    uncover 1
    %
    dig 0
    pushint 1 // 1
    +
    // debug/contract.py:55
    // digits = Bytes(b"0123456789")
    pushbytes 0x30313233343536373839
    // debug/contract.py:59
    // return itoa(i // radix) + digits[i % radix]
    uncover 2
    uncover 2
    substring3
    concat
    uncover 1
    retsub


// test_cases.debug.contract.DebugContract.__algopy_default_create() -> void:
__algopy_default_create:
    // debug/contract.py:4
    // class DebugContract(arc4.ARC4Contract):
    proto 0 0
    retsub
