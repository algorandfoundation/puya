debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=True, output_arc56=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, debug_level=1, optimization_level=1, target_avm_version=10, cli_template_definitions={'A_MULT': 1}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, paths=['debug'], output_awst=True, output_awst_json=False, output_client=True, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
info: writing debug/out/module.awst
debug: Sealing block@0: // L12
debug: Terminated block@0: // L12
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@2: // while_body_L21
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L21
debug: Sealing block@3: // switch_case_0_L28
debug: Terminated block@3: // switch_case_0_L28
debug: Sealing block@4: // switch_case_1_L30
debug: Terminated block@4: // switch_case_1_L30
debug: Sealing block@5: // switch_case_default_L26
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L12
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L12
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@2: // while_body_L12
debug: Terminated block@2: // while_body_L12
debug: Sealing block@3: // if_body_L13
debug: Terminated block@3: // if_body_L13
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L110
debug: Terminated block@1: // for_header_L110
debug: Sealing block@2: // for_body_L111
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1: // for_header_L110
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L110
debug: Terminated block@2: // for_body_L111
debug: Sealing block@3: // for_footer_L110
debug: Terminated block@3: // for_footer_L110
debug: Sealing block@1: // for_header_L110
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L92
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L110
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0: // L92
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L92
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L110
debug: Sealing block@4: // after_for_L110
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1: // for_header_L110
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0: // L92
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1: // for_header_L110
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0: // L92
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1: // for_header_L110
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0: // L92
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1: // for_header_L110
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0: // L92
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3: // for_footer_L110
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L110
debug: Sealing block@0: // L124
debug: Terminated block@0: // L124
debug: Sealing block@1: // if_body_L147
debug: Terminated block@1: // if_body_L147
debug: Sealing block@2: // after_if_else_L146
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L146
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L124
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L146
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L124
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L146
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L124
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L146
debug: Looking for 'i' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let i#1: uint64 = undefined while trying to resolve 'i' in block@3: // for_header_L150
debug: Terminated block@3: // for_header_L150
debug: Sealing block@4: // for_body_L151
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3: // for_header_L150
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3: // for_header_L150
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3: // for_header_L150
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3: // for_header_L150
debug: Terminated block@4: // for_body_L151
debug: Sealing block@5: // for_footer_L150
debug: Terminated block@5: // for_footer_L150
debug: Sealing block@3: // for_header_L150
debug: Added i#0 to Phi node: let i#1: uint64 = φ(i#0 <- block@2) in block@2: // after_if_else_L146
debug: Added i#2 to Phi node: let i#1: uint64 = φ(i#0 <- block@2, i#2 <- block@5) in block@5: // for_footer_L150
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L146
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0: // L124
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L147
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2: // after_if_else_L146
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@5) in block@5: // for_footer_L150
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2: // after_if_else_L146
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@5) in block@5: // for_footer_L150
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L146
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L124
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L147
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2: // after_if_else_L146
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) in block@5: // for_footer_L150
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@5) (new_items_bytes#1) with new_items_bytes#0 in current definition for 3 blocks
debug: Sealing block@6: // after_for_L150
debug: Terminated block@6: // after_for_L150
debug: Sealing block@0: // L157
debug: Terminated block@0: // L157
debug: Sealing block@0: // L189
debug: Terminated block@0: // L189
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L199
debug: Terminated block@1: // for_header_L199
debug: Sealing block@2: // for_body_L200
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L199
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L199
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1: // for_header_L199
debug: Terminated block@2: // for_body_L200
debug: Sealing block@3: // for_footer_L199
debug: Terminated block@3: // for_footer_L199
debug: Sealing block@1: // for_header_L199
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L189
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L199
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0: // L189
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3: // for_footer_L199
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0: // L189
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L199
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1: // for_header_L199
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L189
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4: // after_for_L199
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5: // for_header_L204
debug: Terminated block@5: // for_header_L204
debug: Sealing block@6: // for_body_L205
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5: // for_header_L204
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5: // for_header_L204
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5: // for_header_L204
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5: // for_header_L204
debug: Terminated block@6: // for_body_L205
debug: Sealing block@7: // for_footer_L204
debug: Terminated block@7: // for_footer_L204
debug: Sealing block@5: // for_header_L204
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4: // after_for_L199
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7: // for_footer_L204
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L199
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4: // after_for_L199
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7: // for_footer_L204
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4: // after_for_L199
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8: // after_for_L204
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5: // for_header_L204
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1: // for_header_L199
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0: // L189
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3: // for_footer_L199
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // for_header_L204
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4: // after_for_L199
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5: // for_header_L204
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4: // after_for_L199
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7: // for_footer_L204
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8: // after_for_L204
debug: Sealing block@0: // L217
debug: Terminated block@0: // L217
debug: Sealing block@0: // L240
debug: Terminated block@0: // L240
debug: Sealing block@0: // L252
debug: Terminated block@0: // L252
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L269
debug: Terminated block@1: // for_header_L269
debug: Sealing block@2: // for_body_L270
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L269
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1: // for_header_L269
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1: // for_header_L269
debug: Terminated block@2: // for_body_L270
debug: Sealing block@3: // for_footer_L269
debug: Terminated block@3: // for_footer_L269
debug: Sealing block@1: // for_header_L269
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L252
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L252
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3: // for_footer_L269
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0: // L252
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0: // L252
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3: // for_footer_L269
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4: // after_for_L269
debug: Terminated block@4: // after_for_L269
debug: Sealing block@0: // L278
debug: Terminated block@0: // L278
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1: // for_header_L327
debug: Terminated block@1: // for_header_L327
debug: Sealing block@2: // for_body_L328
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1: // for_header_L327
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L327
debug: Terminated block@2: // for_body_L328
debug: Sealing block@3: // for_footer_L327
debug: Terminated block@3: // for_footer_L327
debug: Sealing block@1: // for_header_L327
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0: // L306
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3: // for_footer_L327
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0: // L306
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3: // for_footer_L327
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L306
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3: // for_footer_L327
debug: Sealing block@4: // after_for_L327
debug: Terminated block@4: // after_for_L327
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Sealing block@1: // abi_routing_L4
debug: Terminated block@1: // abi_routing_L4
debug: Sealing block@2: // test_route_L5
debug: Terminated block@2: // test_route_L5
debug: Sealing block@3: // switch_case_default_L4
debug: Terminated block@3: // switch_case_default_L4
debug: Sealing block@4: // switch_case_next_L4
debug: Terminated block@4: // switch_case_next_L4
debug: Sealing block@5: // bare_routing_L4
debug: Terminated block@5: // bare_routing_L4
debug: Sealing block@6: // __algopy_default_create_L1
debug: Terminated block@6: // __algopy_default_create_L1
debug: Sealing block@7: // switch_case_default_L4
debug: Terminated block@7: // switch_case_default_L4
debug: Sealing block@8: // switch_case_next_L4
debug: Terminated block@8: // switch_case_next_L4
debug: Sealing block@9: // after_if_else_L4
debug: Terminated block@9: // after_if_else_L4
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@1: // if_body_L11
debug: Terminated block@1: // if_body_L11
debug: Sealing block@2: // else_body_L12
debug: Terminated block@2: // else_body_L12
debug: Sealing block@3: // if_body_L13
debug: Terminated block@3: // if_body_L13
debug: Sealing block@4: // else_body_L14
debug: Terminated block@4: // else_body_L14
debug: Sealing block@5: // if_body_L15
debug: Terminated block@5: // if_body_L15
debug: Sealing block@6: // else_body_L16
debug: Terminated block@6: // else_body_L16
debug: Sealing block@7: // if_body_L17
debug: Terminated block@7: // if_body_L17
debug: Sealing block@8: // after_if_else_L16
debug: Terminated block@8: // after_if_else_L16
debug: Sealing block@9: // after_if_else_L14
debug: Terminated block@9: // after_if_else_L14
debug: Sealing block@10: // after_if_else_L12
debug: Terminated block@10: // after_if_else_L12
debug: Sealing block@11: // after_if_else_L10
debug: Created Phi assignment: let a#4: uint64 = undefined while trying to resolve 'a' in block@11: // after_if_else_L10
debug: Added a#1 to Phi node: let a#4: uint64 = φ(a#1 <- block@1) in block@1: // if_body_L11
debug: Created Phi assignment: let a#5: uint64 = undefined while trying to resolve 'a' in block@10: // after_if_else_L12
debug: Added a#2 to Phi node: let a#5: uint64 = φ(a#2 <- block@3) in block@3: // if_body_L13
debug: Created Phi assignment: let a#6: uint64 = undefined while trying to resolve 'a' in block@9: // after_if_else_L14
debug: Added a#3 to Phi node: let a#6: uint64 = φ(a#3 <- block@5) in block@5: // if_body_L15
debug: Created Phi assignment: let a#7: uint64 = undefined while trying to resolve 'a' in block@8: // after_if_else_L16
debug: Added a#0 to Phi node: let a#7: uint64 = φ(a#0 <- block@6) in block@6: // else_body_L16
debug: Added a#0 to Phi node: let a#7: uint64 = φ(a#0 <- block@6, a#0 <- block@7) in block@7: // if_body_L17
debug: Replacing trivial Phi node: let a#7: uint64 = φ(a#0 <- block@6, a#0 <- block@7) (a#7) with a#0
debug: Deleting Phi assignment: let a#7: uint64 = φ(a#0 <- block@6, a#0 <- block@7)
debug: Replaced trivial Phi node: let a#7: uint64 = φ(a#0 <- block@6, a#0 <- block@7) (a#7) with a#0 in current definition for 1 blocks
debug: Added a#0 to Phi node: let a#6: uint64 = φ(a#3 <- block@5, a#0 <- block@8) in block@8: // after_if_else_L16
debug: Added a#6 to Phi node: let a#5: uint64 = φ(a#2 <- block@3, a#6 <- block@9) in block@9: // after_if_else_L14
debug: Added a#5 to Phi node: let a#4: uint64 = φ(a#1 <- block@1, a#5 <- block@10) in block@10: // after_if_else_L12
debug: Created Phi assignment: let b#2: uint64 = undefined while trying to resolve 'b' in block@11: // after_if_else_L10
debug: Added b#0 to Phi node: let b#2: uint64 = φ(b#0 <- block@1) in block@1: // if_body_L11
debug: Created Phi assignment: let b#3: uint64 = undefined while trying to resolve 'b' in block@10: // after_if_else_L12
debug: Added b#0 to Phi node: let b#3: uint64 = φ(b#0 <- block@3) in block@3: // if_body_L13
debug: Created Phi assignment: let b#4: uint64 = undefined while trying to resolve 'b' in block@9: // after_if_else_L14
debug: Added b#0 to Phi node: let b#4: uint64 = φ(b#0 <- block@5) in block@5: // if_body_L15
debug: Created Phi assignment: let b#5: uint64 = undefined while trying to resolve 'b' in block@8: // after_if_else_L16
debug: Added b#0 to Phi node: let b#5: uint64 = φ(b#0 <- block@6) in block@6: // else_body_L16
debug: Added b#1 to Phi node: let b#5: uint64 = φ(b#0 <- block@6, b#1 <- block@7) in block@7: // if_body_L17
debug: Added b#5 to Phi node: let b#4: uint64 = φ(b#0 <- block@5, b#5 <- block@8) in block@8: // after_if_else_L16
debug: Added b#4 to Phi node: let b#3: uint64 = φ(b#0 <- block@3, b#4 <- block@9) in block@9: // after_if_else_L14
debug: Added b#3 to Phi node: let b#2: uint64 = φ(b#0 <- block@1, b#3 <- block@10) in block@10: // after_if_else_L12
debug: Created Phi assignment: let c#1: uint64 = undefined while trying to resolve 'c' in block@11: // after_if_else_L10
debug: Added c#0 to Phi node: let c#1: uint64 = φ(c#0 <- block@1) in block@1: // if_body_L11
debug: Created Phi assignment: let c#2: uint64 = undefined while trying to resolve 'c' in block@10: // after_if_else_L12
debug: Added c#0 to Phi node: let c#2: uint64 = φ(c#0 <- block@3) in block@3: // if_body_L13
debug: Created Phi assignment: let c#3: uint64 = undefined while trying to resolve 'c' in block@9: // after_if_else_L14
debug: Added c#0 to Phi node: let c#3: uint64 = φ(c#0 <- block@5) in block@5: // if_body_L15
debug: Created Phi assignment: let c#4: uint64 = undefined while trying to resolve 'c' in block@8: // after_if_else_L16
debug: Added c#0 to Phi node: let c#4: uint64 = φ(c#0 <- block@6) in block@6: // else_body_L16
debug: Added c#0 to Phi node: let c#4: uint64 = φ(c#0 <- block@6, c#0 <- block@7) in block@7: // if_body_L17
debug: Replacing trivial Phi node: let c#4: uint64 = φ(c#0 <- block@6, c#0 <- block@7) (c#4) with c#0
debug: Deleting Phi assignment: let c#4: uint64 = φ(c#0 <- block@6, c#0 <- block@7)
debug: Replaced trivial Phi node: let c#4: uint64 = φ(c#0 <- block@6, c#0 <- block@7) (c#4) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#3: uint64 = φ(c#0 <- block@5, c#0 <- block@8) in block@8: // after_if_else_L16
debug: Replacing trivial Phi node: let c#3: uint64 = φ(c#0 <- block@5, c#0 <- block@8) (c#3) with c#0
debug: Deleting Phi assignment: let c#3: uint64 = φ(c#0 <- block@5, c#0 <- block@8)
debug: Replaced trivial Phi node: let c#3: uint64 = φ(c#0 <- block@5, c#0 <- block@8) (c#3) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#2: uint64 = φ(c#0 <- block@3, c#0 <- block@9) in block@9: // after_if_else_L14
debug: Replacing trivial Phi node: let c#2: uint64 = φ(c#0 <- block@3, c#0 <- block@9) (c#2) with c#0
debug: Deleting Phi assignment: let c#2: uint64 = φ(c#0 <- block@3, c#0 <- block@9)
debug: Replaced trivial Phi node: let c#2: uint64 = φ(c#0 <- block@3, c#0 <- block@9) (c#2) with c#0 in current definition for 1 blocks
debug: Added c#0 to Phi node: let c#1: uint64 = φ(c#0 <- block@1, c#0 <- block@10) in block@10: // after_if_else_L12
debug: Replacing trivial Phi node: let c#1: uint64 = φ(c#0 <- block@1, c#0 <- block@10) (c#1) with c#0
debug: Deleting Phi assignment: let c#1: uint64 = φ(c#0 <- block@1, c#0 <- block@10)
debug: Replaced trivial Phi node: let c#1: uint64 = φ(c#0 <- block@1, c#0 <- block@10) (c#1) with c#0 in current definition for 1 blocks
debug: Terminated block@11: // after_if_else_L10
debug: Sealing block@12: // if_body_L20
debug: Created Phi assignment: let y#1: uint64 = undefined while trying to resolve 'y' in block@11: // after_if_else_L10
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@1) in block@1: // if_body_L11
debug: Created Phi assignment: let y#2: uint64 = undefined while trying to resolve 'y' in block@10: // after_if_else_L12
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@3) in block@3: // if_body_L13
debug: Created Phi assignment: let y#3: uint64 = undefined while trying to resolve 'y' in block@9: // after_if_else_L14
debug: Added y#0 to Phi node: let y#3: uint64 = φ(y#0 <- block@5) in block@5: // if_body_L15
debug: Created Phi assignment: let y#4: uint64 = undefined while trying to resolve 'y' in block@8: // after_if_else_L16
debug: Added y#0 to Phi node: let y#4: uint64 = φ(y#0 <- block@6) in block@6: // else_body_L16
debug: Added y#0 to Phi node: let y#4: uint64 = φ(y#0 <- block@6, y#0 <- block@7) in block@7: // if_body_L17
debug: Replacing trivial Phi node: let y#4: uint64 = φ(y#0 <- block@6, y#0 <- block@7) (y#4) with y#0
debug: Deleting Phi assignment: let y#4: uint64 = φ(y#0 <- block@6, y#0 <- block@7)
debug: Replaced trivial Phi node: let y#4: uint64 = φ(y#0 <- block@6, y#0 <- block@7) (y#4) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#3: uint64 = φ(y#0 <- block@5, y#0 <- block@8) in block@8: // after_if_else_L16
debug: Replacing trivial Phi node: let y#3: uint64 = φ(y#0 <- block@5, y#0 <- block@8) (y#3) with y#0
debug: Deleting Phi assignment: let y#3: uint64 = φ(y#0 <- block@5, y#0 <- block@8)
debug: Replaced trivial Phi node: let y#3: uint64 = φ(y#0 <- block@5, y#0 <- block@8) (y#3) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#2: uint64 = φ(y#0 <- block@3, y#0 <- block@9) in block@9: // after_if_else_L14
debug: Replacing trivial Phi node: let y#2: uint64 = φ(y#0 <- block@3, y#0 <- block@9) (y#2) with y#0
debug: Deleting Phi assignment: let y#2: uint64 = φ(y#0 <- block@3, y#0 <- block@9)
debug: Replaced trivial Phi node: let y#2: uint64 = φ(y#0 <- block@3, y#0 <- block@9) (y#2) with y#0 in current definition for 1 blocks
debug: Added y#0 to Phi node: let y#1: uint64 = φ(y#0 <- block@1, y#0 <- block@10) in block@10: // after_if_else_L12
debug: Replacing trivial Phi node: let y#1: uint64 = φ(y#0 <- block@1, y#0 <- block@10) (y#1) with y#0
debug: Deleting Phi assignment: let y#1: uint64 = φ(y#0 <- block@1, y#0 <- block@10)
debug: Replaced trivial Phi node: let y#1: uint64 = φ(y#0 <- block@1, y#0 <- block@10) (y#1) with y#0 in current definition for 1 blocks
debug: Terminated block@12: // if_body_L20
debug: Sealing block@13: // else_body_L22
debug: Created Phi assignment: let z#1: uint64 = undefined while trying to resolve 'z' in block@11: // after_if_else_L10
debug: Added z#0 to Phi node: let z#1: uint64 = φ(z#0 <- block@1) in block@1: // if_body_L11
debug: Created Phi assignment: let z#2: uint64 = undefined while trying to resolve 'z' in block@10: // after_if_else_L12
debug: Added z#0 to Phi node: let z#2: uint64 = φ(z#0 <- block@3) in block@3: // if_body_L13
debug: Created Phi assignment: let z#3: uint64 = undefined while trying to resolve 'z' in block@9: // after_if_else_L14
debug: Added z#0 to Phi node: let z#3: uint64 = φ(z#0 <- block@5) in block@5: // if_body_L15
debug: Created Phi assignment: let z#4: uint64 = undefined while trying to resolve 'z' in block@8: // after_if_else_L16
debug: Added z#0 to Phi node: let z#4: uint64 = φ(z#0 <- block@6) in block@6: // else_body_L16
debug: Added z#0 to Phi node: let z#4: uint64 = φ(z#0 <- block@6, z#0 <- block@7) in block@7: // if_body_L17
debug: Replacing trivial Phi node: let z#4: uint64 = φ(z#0 <- block@6, z#0 <- block@7) (z#4) with z#0
debug: Deleting Phi assignment: let z#4: uint64 = φ(z#0 <- block@6, z#0 <- block@7)
debug: Replaced trivial Phi node: let z#4: uint64 = φ(z#0 <- block@6, z#0 <- block@7) (z#4) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#3: uint64 = φ(z#0 <- block@5, z#0 <- block@8) in block@8: // after_if_else_L16
debug: Replacing trivial Phi node: let z#3: uint64 = φ(z#0 <- block@5, z#0 <- block@8) (z#3) with z#0
debug: Deleting Phi assignment: let z#3: uint64 = φ(z#0 <- block@5, z#0 <- block@8)
debug: Replaced trivial Phi node: let z#3: uint64 = φ(z#0 <- block@5, z#0 <- block@8) (z#3) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#2: uint64 = φ(z#0 <- block@3, z#0 <- block@9) in block@9: // after_if_else_L14
debug: Replacing trivial Phi node: let z#2: uint64 = φ(z#0 <- block@3, z#0 <- block@9) (z#2) with z#0
debug: Deleting Phi assignment: let z#2: uint64 = φ(z#0 <- block@3, z#0 <- block@9)
debug: Replaced trivial Phi node: let z#2: uint64 = φ(z#0 <- block@3, z#0 <- block@9) (z#2) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#1: uint64 = φ(z#0 <- block@1, z#0 <- block@10) in block@10: // after_if_else_L12
debug: Replacing trivial Phi node: let z#1: uint64 = φ(z#0 <- block@1, z#0 <- block@10) (z#1) with z#0
debug: Deleting Phi assignment: let z#1: uint64 = φ(z#0 <- block@1, z#0 <- block@10)
debug: Replaced trivial Phi node: let z#1: uint64 = φ(z#0 <- block@1, z#0 <- block@10) (z#1) with z#0 in current definition for 1 blocks
debug: Terminated block@13: // else_body_L22
debug: Sealing block@14: // after_if_else_L19
debug: Created Phi assignment: let b#7: uint64 = undefined while trying to resolve 'b' in block@14: // after_if_else_L19
debug: Added b#2 to Phi node: let b#7: uint64 = φ(b#2 <- block@12) in block@12: // if_body_L20
debug: Added b#6 to Phi node: let b#7: uint64 = φ(b#2 <- block@12, b#6 <- block@13) in block@13: // else_body_L22
debug: Created Phi assignment: let a#9: uint64 = undefined while trying to resolve 'a' in block@14: // after_if_else_L19
debug: Added a#8 to Phi node: let a#9: uint64 = φ(a#8 <- block@12) in block@12: // if_body_L20
debug: Added a#4 to Phi node: let a#9: uint64 = φ(a#8 <- block@12, a#4 <- block@13) in block@13: // else_body_L22
debug: Terminated block@14: // after_if_else_L19
debug: Sealing block@15: // if_body_L29
debug: Terminated block@15: // if_body_L29
debug: Sealing block@16: // after_if_else_L28
debug: Created Phi assignment: let a#11: uint64 = undefined while trying to resolve 'a' in block@16: // after_if_else_L28
debug: Added a#9 to Phi node: let a#11: uint64 = φ(a#9 <- block@14) in block@14: // after_if_else_L19
debug: Added a#10 to Phi node: let a#11: uint64 = φ(a#9 <- block@14, a#10 <- block@15) in block@15: // if_body_L29
debug: Created Phi assignment: let b#8: uint64 = undefined while trying to resolve 'b' in block@16: // after_if_else_L28
debug: Added b#7 to Phi node: let b#8: uint64 = φ(b#7 <- block@14) in block@14: // after_if_else_L19
debug: Added b#7 to Phi node: let b#8: uint64 = φ(b#7 <- block@14, b#7 <- block@15) in block@15: // if_body_L29
debug: Replacing trivial Phi node: let b#8: uint64 = φ(b#7 <- block@14, b#7 <- block@15) (b#8) with b#7
debug: Deleting Phi assignment: let b#8: uint64 = φ(b#7 <- block@14, b#7 <- block@15)
debug: Replaced trivial Phi node: let b#8: uint64 = φ(b#7 <- block@14, b#7 <- block@15) (b#8) with b#7 in current definition for 1 blocks
debug: Terminated block@16: // after_if_else_L28
debug: Sealing block@17: // if_body_L31
debug: Terminated block@17: // if_body_L31
debug: Sealing block@18: // after_if_else_L30
debug: Created Phi assignment: let a#13: uint64 = undefined while trying to resolve 'a' in block@18: // after_if_else_L30
debug: Added a#11 to Phi node: let a#13: uint64 = φ(a#11 <- block@16) in block@16: // after_if_else_L28
debug: Added a#12 to Phi node: let a#13: uint64 = φ(a#11 <- block@16, a#12 <- block@17) in block@17: // if_body_L31
debug: Created Phi assignment: let b#9: uint64 = undefined while trying to resolve 'b' in block@18: // after_if_else_L30
debug: Added b#7 to Phi node: let b#9: uint64 = φ(b#7 <- block@16) in block@16: // after_if_else_L28
debug: Added b#7 to Phi node: let b#9: uint64 = φ(b#7 <- block@16, b#7 <- block@17) in block@17: // if_body_L31
debug: Replacing trivial Phi node: let b#9: uint64 = φ(b#7 <- block@16, b#7 <- block@17) (b#9) with b#7
debug: Deleting Phi assignment: let b#9: uint64 = φ(b#7 <- block@16, b#7 <- block@17)
debug: Replaced trivial Phi node: let b#9: uint64 = φ(b#7 <- block@16, b#7 <- block@17) (b#9) with b#7 in current definition for 1 blocks
debug: Created Phi assignment: let c#6: uint64 = undefined while trying to resolve 'c' in block@18: // after_if_else_L30
debug: Created Phi assignment: let c#7: uint64 = undefined while trying to resolve 'c' in block@16: // after_if_else_L28
debug: Added c#5 to Phi node: let c#7: uint64 = φ(c#5 <- block@14) in block@14: // after_if_else_L19
debug: Added c#5 to Phi node: let c#7: uint64 = φ(c#5 <- block@14, c#5 <- block@15) in block@15: // if_body_L29
debug: Replacing trivial Phi node: let c#7: uint64 = φ(c#5 <- block@14, c#5 <- block@15) (c#7) with c#5
debug: Deleting Phi assignment: let c#7: uint64 = φ(c#5 <- block@14, c#5 <- block@15)
debug: Replaced trivial Phi node: let c#7: uint64 = φ(c#5 <- block@14, c#5 <- block@15) (c#7) with c#5 in current definition for 1 blocks
debug: Added c#5 to Phi node: let c#6: uint64 = φ(c#5 <- block@16) in block@16: // after_if_else_L28
debug: Added c#5 to Phi node: let c#6: uint64 = φ(c#5 <- block@16, c#5 <- block@17) in block@17: // if_body_L31
debug: Replacing trivial Phi node: let c#6: uint64 = φ(c#5 <- block@16, c#5 <- block@17) (c#6) with c#5
debug: Deleting Phi assignment: let c#6: uint64 = φ(c#5 <- block@16, c#5 <- block@17)
debug: Replaced trivial Phi node: let c#6: uint64 = φ(c#5 <- block@16, c#5 <- block@17) (c#6) with c#5 in current definition for 1 blocks
debug: Terminated block@18: // after_if_else_L30
debug: Sealing block@19: // if_body_L33
debug: Created Phi assignment: let z#5: uint64 = undefined while trying to resolve 'z' in block@18: // after_if_else_L30
debug: Created Phi assignment: let z#6: uint64 = undefined while trying to resolve 'z' in block@16: // after_if_else_L28
debug: Created Phi assignment: let z#7: uint64 = undefined while trying to resolve 'z' in block@14: // after_if_else_L19
debug: Added z#0 to Phi node: let z#7: uint64 = φ(z#0 <- block@12) in block@12: // if_body_L20
debug: Added z#0 to Phi node: let z#7: uint64 = φ(z#0 <- block@12, z#0 <- block@13) in block@13: // else_body_L22
debug: Replacing trivial Phi node: let z#7: uint64 = φ(z#0 <- block@12, z#0 <- block@13) (z#7) with z#0
debug: Deleting Phi assignment: let z#7: uint64 = φ(z#0 <- block@12, z#0 <- block@13)
debug: Replaced trivial Phi node: let z#7: uint64 = φ(z#0 <- block@12, z#0 <- block@13) (z#7) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#6: uint64 = φ(z#0 <- block@14) in block@14: // after_if_else_L19
debug: Added z#0 to Phi node: let z#6: uint64 = φ(z#0 <- block@14, z#0 <- block@15) in block@15: // if_body_L29
debug: Replacing trivial Phi node: let z#6: uint64 = φ(z#0 <- block@14, z#0 <- block@15) (z#6) with z#0
debug: Deleting Phi assignment: let z#6: uint64 = φ(z#0 <- block@14, z#0 <- block@15)
debug: Replaced trivial Phi node: let z#6: uint64 = φ(z#0 <- block@14, z#0 <- block@15) (z#6) with z#0 in current definition for 1 blocks
debug: Added z#0 to Phi node: let z#5: uint64 = φ(z#0 <- block@16) in block@16: // after_if_else_L28
debug: Added z#0 to Phi node: let z#5: uint64 = φ(z#0 <- block@16, z#0 <- block@17) in block@17: // if_body_L31
debug: Replacing trivial Phi node: let z#5: uint64 = φ(z#0 <- block@16, z#0 <- block@17) (z#5) with z#0
debug: Deleting Phi assignment: let z#5: uint64 = φ(z#0 <- block@16, z#0 <- block@17)
debug: Replaced trivial Phi node: let z#5: uint64 = φ(z#0 <- block@16, z#0 <- block@17) (z#5) with z#0 in current definition for 1 blocks
debug: Terminated block@19: // if_body_L33
debug: Sealing block@20: // after_if_else_L32
debug: Created Phi assignment: let a#15: uint64 = undefined while trying to resolve 'a' in block@20: // after_if_else_L32
debug: Added a#13 to Phi node: let a#15: uint64 = φ(a#13 <- block@18) in block@18: // after_if_else_L30
debug: Added a#14 to Phi node: let a#15: uint64 = φ(a#13 <- block@18, a#14 <- block@19) in block@19: // if_body_L33
debug: Created Phi assignment: let bee#1: bytes = undefined while trying to resolve 'bee' in block@20: // after_if_else_L32
debug: Created Phi assignment: let bee#2: bytes = undefined while trying to resolve 'bee' in block@18: // after_if_else_L30
debug: Created Phi assignment: let bee#3: bytes = undefined while trying to resolve 'bee' in block@16: // after_if_else_L28
debug: Added bee#0 to Phi node: let bee#3: bytes = φ(bee#0 <- block@14) in block@14: // after_if_else_L19
debug: Added bee#0 to Phi node: let bee#3: bytes = φ(bee#0 <- block@14, bee#0 <- block@15) in block@15: // if_body_L29
debug: Replacing trivial Phi node: let bee#3: bytes = φ(bee#0 <- block@14, bee#0 <- block@15) (bee#3) with bee#0
debug: Deleting Phi assignment: let bee#3: bytes = φ(bee#0 <- block@14, bee#0 <- block@15)
debug: Replaced trivial Phi node: let bee#3: bytes = φ(bee#0 <- block@14, bee#0 <- block@15) (bee#3) with bee#0 in current definition for 1 blocks
debug: Added bee#0 to Phi node: let bee#2: bytes = φ(bee#0 <- block@16) in block@16: // after_if_else_L28
debug: Added bee#0 to Phi node: let bee#2: bytes = φ(bee#0 <- block@16, bee#0 <- block@17) in block@17: // if_body_L31
debug: Replacing trivial Phi node: let bee#2: bytes = φ(bee#0 <- block@16, bee#0 <- block@17) (bee#2) with bee#0
debug: Deleting Phi assignment: let bee#2: bytes = φ(bee#0 <- block@16, bee#0 <- block@17)
debug: Replaced trivial Phi node: let bee#2: bytes = φ(bee#0 <- block@16, bee#0 <- block@17) (bee#2) with bee#0 in current definition for 1 blocks
debug: Added bee#0 to Phi node: let bee#1: bytes = φ(bee#0 <- block@18) in block@18: // after_if_else_L30
debug: Added bee#0 to Phi node: let bee#1: bytes = φ(bee#0 <- block@18, bee#0 <- block@19) in block@19: // if_body_L33
debug: Replacing trivial Phi node: let bee#1: bytes = φ(bee#0 <- block@18, bee#0 <- block@19) (bee#1) with bee#0
debug: Deleting Phi assignment: let bee#1: bytes = φ(bee#0 <- block@18, bee#0 <- block@19)
debug: Replaced trivial Phi node: let bee#1: bytes = φ(bee#0 <- block@18, bee#0 <- block@19) (bee#1) with bee#0 in current definition for 1 blocks
debug/contract.py:36:32 debug: encountered already materialized expression (' '), reusing result: " "
debug: Created Phi assignment: let cea#1: bytes = undefined while trying to resolve 'cea' in block@20: // after_if_else_L32
debug: Created Phi assignment: let cea#2: bytes = undefined while trying to resolve 'cea' in block@18: // after_if_else_L30
debug: Created Phi assignment: let cea#3: bytes = undefined while trying to resolve 'cea' in block@16: // after_if_else_L28
debug: Added cea#0 to Phi node: let cea#3: bytes = φ(cea#0 <- block@14) in block@14: // after_if_else_L19
debug: Added cea#0 to Phi node: let cea#3: bytes = φ(cea#0 <- block@14, cea#0 <- block@15) in block@15: // if_body_L29
debug: Replacing trivial Phi node: let cea#3: bytes = φ(cea#0 <- block@14, cea#0 <- block@15) (cea#3) with cea#0
debug: Deleting Phi assignment: let cea#3: bytes = φ(cea#0 <- block@14, cea#0 <- block@15)
debug: Replaced trivial Phi node: let cea#3: bytes = φ(cea#0 <- block@14, cea#0 <- block@15) (cea#3) with cea#0 in current definition for 1 blocks
debug: Added cea#0 to Phi node: let cea#2: bytes = φ(cea#0 <- block@16) in block@16: // after_if_else_L28
debug: Added cea#0 to Phi node: let cea#2: bytes = φ(cea#0 <- block@16, cea#0 <- block@17) in block@17: // if_body_L31
debug: Replacing trivial Phi node: let cea#2: bytes = φ(cea#0 <- block@16, cea#0 <- block@17) (cea#2) with cea#0
debug: Deleting Phi assignment: let cea#2: bytes = φ(cea#0 <- block@16, cea#0 <- block@17)
debug: Replaced trivial Phi node: let cea#2: bytes = φ(cea#0 <- block@16, cea#0 <- block@17) (cea#2) with cea#0 in current definition for 1 blocks
debug: Added cea#0 to Phi node: let cea#1: bytes = φ(cea#0 <- block@18) in block@18: // after_if_else_L30
debug: Added cea#0 to Phi node: let cea#1: bytes = φ(cea#0 <- block@18, cea#0 <- block@19) in block@19: // if_body_L33
debug: Replacing trivial Phi node: let cea#1: bytes = φ(cea#0 <- block@18, cea#0 <- block@19) (cea#1) with cea#0
debug: Deleting Phi assignment: let cea#1: bytes = φ(cea#0 <- block@18, cea#0 <- block@19)
debug: Replaced trivial Phi node: let cea#1: bytes = φ(cea#0 <- block@18, cea#0 <- block@19) (cea#1) with cea#0 in current definition for 1 blocks
debug: Terminated block@20: // after_if_else_L32
debug: Sealing block@0: // L41
debug: Terminated block@0: // L41
debug: Sealing block@0: // L52
debug: Terminated block@0: // L52
debug: Sealing block@1: // if_body_L57
debug: Terminated block@1: // if_body_L57
debug: Sealing block@2: // after_if_else_L56
debug: Terminated block@2: // after_if_else_L56
debug: Sealing block@0: // L1
debug: Terminated block@0: // L1
debug: Sealing block@0: // L1
debug: Terminated block@0: // L1
debug: Sealing block@0: // L1
debug: Terminated block@0: // L1
debug: Output IR to debug/out/DebugContract.ssa.ir
info: optimizing test_cases.debug.contract.DebugContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.debug.contract.DebugContract.__puya_arc4_router__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== tmp%3#0 NoOp) to (! tmp%3#0)
debug: Simplified (== tmp%15#0 0u) to (! tmp%15#0)
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%6#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: inlining the default target of a switch/goto nth
debug: adding block@1: // abi_routing_L4 as a predecessor of block@4: // switch_case_next_L4 due to inlining of block@3: // switch_case_default_L4
debug: simplified terminator of block@1: // abi_routing_L4 from switch tmp%2#0 {method "test(uint64,uint64,uint64)uint64" => block@2, * => block@3} to switch tmp%2#0 {method "test(uint64,uint64,uint64)uint64" => block@2, * => block@4}
debug: simplifying a switch with constants into goto nth
debug: simplified terminator of block@5: // bare_routing_L4 from switch tmp%14#0 {0u => block@6, * => block@7} to goto_nth [block@6][tmp%14#0] else goto block@7
debug: inlining the default target of a switch/goto nth
debug: adding block@1: // abi_routing_L4 as a predecessor of block@9: // after_if_else_L4 due to inlining of block@4: // switch_case_next_L4
debug: simplified terminator of block@1: // abi_routing_L4 from switch tmp%2#0 {method "test(uint64,uint64,uint64)uint64" => block@2, * => block@4} to switch tmp%2#0 {method "test(uint64,uint64,uint64)uint64" => block@2, * => block@9}
debug: simplifying a goto nth with two targets into a conditional branch
debug: simplified terminator of block@5: // bare_routing_L4 from goto_nth [block@6][tmp%14#0] else goto block@7 to goto tmp%14#0 ? block@7 : block@6
debug: inlining the default target of a switch/goto nth
debug: simplified terminator of block@1: // abi_routing_L4 from switch tmp%2#0 {method "test(uint64,uint64,uint64)uint64" => block@2, * => block@9} to switch tmp%2#0 {method "test(uint64,uint64,uint64)uint64" => block@2, * => return 0u}
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@4: // switch_case_next_L4 with block@3: // switch_case_default_L4 in block@9: // after_if_else_L4
debug: Merged linear block@4: // switch_case_next_L4 into block@3: // switch_case_default_L4
debug: Replaced predecessor block@8: // switch_case_next_L4 with block@7: // switch_case_default_L4 in block@9: // after_if_else_L4
debug: Merged linear block@8: // switch_case_next_L4 into block@7: // switch_case_default_L4
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@3: // switch_case_default_L4
debug: Removed empty block: block@7: // switch_case_default_L4
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.debug.contract.DebugContract.test
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.debug.contract.some_func
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.debug.contract.itoa
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (len 0x30313233343536373839) to 10u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable digits#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.debug.contract.DebugContract.__algopy_default_create
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to debug/out/DebugContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.debug.contract.DebugContract.__puya_arc4_router__
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.debug.contract.DebugContract.test
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.debug.contract.some_func
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.debug.contract.itoa
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable radix#0
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Output IR to debug/out/DebugContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine algopy.arc4.ARC4Contract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.debug.contract.DebugContract.__puya_arc4_router__
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.debug.contract.DebugContract.test
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.debug.contract.some_func
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine test_cases.debug.contract.itoa
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: Optimizing subroutine algopy.arc4.ARC4Contract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Remove Unused Ops
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Remove Calls To No Op Subroutines
debug: No optimizations performed in pass 3, ending loop
debug: Removing Phis from algopy.arc4.ARC4Contract.approval_program
debug: Removing Phis from test_cases.debug.contract.DebugContract.__puya_arc4_router__
debug: Removing Phis from test_cases.debug.contract.DebugContract.test
debug: Removing Phis from test_cases.debug.contract.some_func
debug: Removing Phis from test_cases.debug.contract.itoa
debug: Removing Phis from algopy.arc4.ARC4Contract.clear_state_program
debug: Coalescing local variables in algopy.arc4.ARC4Contract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.debug.contract.DebugContract.__puya_arc4_router__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.debug.contract.DebugContract.test using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#1, a#24, a#2, a#21, a#3, a#18, a#6, a#5, a#4, a#8, a#27, a#9, a#10, a#11, a#12, a#13, a#14, a#15]
debug: Coalescing a#30 with [a#33, a#36]
debug: Coalescing b#0 with [b#19, b#16, b#13, b#1, b#5, b#4, b#3, b#2, b#22, b#6, b#7]
debug: Coalescing c#0 with [c#5]
debug: Coalescing resulted in 95 replacement/s
debug: Coalescing local variables in test_cases.debug.contract.some_func using strategy RootOperandGrouping
debug: Coalescing a#0 with [a#1, a#2, a#3]
debug: Coalescing b#0 with [b#1]
debug: Coalescing resulted in 12 replacement/s
debug: Coalescing local variables in test_cases.debug.contract.itoa using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in algopy.arc4.ARC4Contract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in algopy.arc4.ARC4Contract.approval_program
debug: Sequentializing parallel copies in test_cases.debug.contract.DebugContract.__puya_arc4_router__
debug: Sequentializing parallel copies in test_cases.debug.contract.DebugContract.test
debug: loc: {a#0=a#0, b#0=b#0}
debug: pred: {a#0=a#0, b#0=b#0}
debug: ready: 
debug: to_do: a#0, b#0
debug: * to_do b#0
debug: * to_do a#0
debug: loc: {a#0=a#0, b#0=b#0}
debug: pred: {a#0=a#0, b#0=b#0}
debug: ready: 
debug: to_do: a#0, b#0
debug: * to_do b#0
debug: * to_do a#0
debug: loc: {a#0=a#0, b#0=b#0}
debug: pred: {a#0=a#0, b#0=b#0}
debug: ready: 
debug: to_do: a#0, b#0
debug: * to_do b#0
debug: * to_do a#0
debug: loc: {a#0=a#0, b#0=b#0}
debug: pred: {a#0=a#0, b#0=b#0}
debug: ready: 
debug: to_do: a#0, b#0
debug: * to_do b#0
debug: * to_do a#0
debug: loc: {a#0=a#0, b#0=b#0}
debug: pred: {a#0=a#0, b#0=b#0}
debug: ready: 
debug: to_do: a#0, b#0
debug: * to_do b#0
debug: * to_do a#0
debug: loc: {a#0=a#0, b#0=b#0}
debug: pred: {a#0=a#0, b#0=b#0}
debug: ready: 
debug: to_do: a#0, b#0
debug: * to_do b#0
debug: * to_do a#0
debug: loc: {a#0=a#0, b#0=b#0}
debug: pred: {a#0=a#0, b#0=b#0}
debug: ready: 
debug: to_do: a#0, b#0
debug: * to_do b#0
debug: * to_do a#0
debug: loc: {a#0=a#0, b#0=b#0}
debug: pred: {a#0=a#0, b#0=b#0}
debug: ready: 
debug: to_do: a#0, b#0
debug: * to_do b#0
debug: * to_do a#0
debug: loc: {a#0=a#0, b#0=b#0}
debug: pred: {a#0=a#0, b#0=b#0}
debug: ready: 
debug: to_do: a#0, b#0
debug: * to_do b#0
debug: * to_do a#0
debug: loc: {b#0=b#0, a#0=a#0}
debug: pred: {b#0=b#0, a#0=a#0}
debug: ready: 
debug: to_do: b#0, a#0
debug: * to_do a#0
debug: * to_do b#0
debug: loc: {b#0=b#0, a#0=a#0}
debug: pred: {b#0=b#0, a#0=a#0}
debug: ready: 
debug: to_do: b#0, a#0
debug: * to_do a#0
debug: * to_do b#0
debug: loc: {b#0=b#0, a#0=a#0}
debug: pred: {b#0=b#0, a#0=a#0}
debug: ready: 
debug: to_do: b#0, a#0
debug: * to_do a#0
debug: * to_do b#0
debug: Sequentializing parallel copies in test_cases.debug.contract.some_func
debug: Sequentializing parallel copies in test_cases.debug.contract.itoa
debug: Sequentializing parallel copies in algopy.arc4.ARC4Contract.clear_state_program
debug: Performing post-SSA optimizations
debug: Removing jump block block@9: // after_if_else_L14
debug: Removing jump block block@10: // after_if_else_L12
debug: branching to block@9: // after_if_else_L14 will be replaced with block@11: // after_if_else_L10
debug: branching to block@10: // after_if_else_L12 will be replaced with block@11: // after_if_else_L10
debug: Output IR to debug/out/DebugContract.destructured.ir
debug: Inserted main_block@0.ops[1]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_block@0.ops[3]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted __puya_arc4_router___block@0.ops[1]: 'l-store-copy tmp%0#0 0'
debug: Replaced __puya_arc4_router___block@0.ops[3]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted __puya_arc4_router___abi_routing@1.ops[1]: 'l-store-copy tmp%2#0 0'
debug: Replaced __puya_arc4_router___abi_routing@1.ops[4]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted __puya_arc4_router___test_route@2.ops[1]: 'l-store-copy tmp%3#0 0'
debug: Replaced __puya_arc4_router___test_route@2.ops[3]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted __puya_arc4_router___test_route@2.ops[5]: 'l-store-copy tmp%4#0 0'
debug: Replaced __puya_arc4_router___test_route@2.ops[7]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted __puya_arc4_router___test_route@2.ops[10]: 'l-store-copy tmp%5#0 0'
debug: Replaced __puya_arc4_router___test_route@2.ops[12]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted __puya_arc4_router___test_route@2.ops[15]: 'l-store-copy tmp%7#0 0'
debug: Replaced __puya_arc4_router___test_route@2.ops[17]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted __puya_arc4_router___test_route@2.ops[21]: 'l-store-copy tmp%9#0 0'
debug: Replaced __puya_arc4_router___test_route@2.ops[23]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted __puya_arc4_router___test_route@2.ops[27]: 'l-store-copy tmp%11#0 0'
debug: Replaced __puya_arc4_router___test_route@2.ops[29]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted __puya_arc4_router___test_route@2.ops[36]: 'l-store-copy to_encode%0#0 0'
debug: Replaced __puya_arc4_router___test_route@2.ops[38]: 'v-load to_encode%0#0' with 'l-load to_encode%0#0'
debug: Inserted __puya_arc4_router___test_route@2.ops[44]: 'l-store-copy tmp%13#0 0'
debug: Replaced __puya_arc4_router___test_route@2.ops[46]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted __puya_arc4_router___test_route@2.ops[40]: 'l-store-copy val_as_bytes%0#0 0'
debug: Replaced __puya_arc4_router___test_route@2.ops[43]: 'v-load val_as_bytes%0#0' with 'l-load val_as_bytes%0#0'
debug: Inserted __puya_arc4_router___test_route@2.ops[31]: 'l-store-copy tmp%12#0 0'
debug: Replaced __puya_arc4_router___test_route@2.ops[35]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted __puya_arc4_router___test_route@2.ops[25]: 'l-store-copy tmp%10#0 0'
debug: Replaced __puya_arc4_router___test_route@2.ops[35]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted __puya_arc4_router___test_route@2.ops[19]: 'l-store-copy tmp%8#0 0'
debug: Replaced __puya_arc4_router___test_route@2.ops[35]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted __puya_arc4_router___bare_routing@5.ops[1]: 'l-store-copy tmp%14#0 0'
debug: Replaced __puya_arc4_router___bare_routing@5.ops[3]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted __puya_arc4_router_____algopy_default_create@6.ops[1]: 'l-store-copy tmp%15#0 0'
debug: Replaced __puya_arc4_router_____algopy_default_create@6.ops[3]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted __puya_arc4_router_____algopy_default_create@6.ops[5]: 'l-store-copy tmp%16#0 0'
debug: Replaced __puya_arc4_router_____algopy_default_create@6.ops[7]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted test_block@0.ops[7]: 'l-store-copy b#0 0'
debug: Replaced test_block@0.ops[9]: 'v-load b#0' with 'l-load b#0'
debug: Inserted test_block@0.ops[16]: 'l-store-copy tmp%0#0 0'
debug: Replaced test_block@0.ops[18]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted test_block@0.ops[12]: 'l-store-copy c#0 0'
debug: Replaced test_block@0.ops[15]: 'v-load c#0' with 'l-load c#0'
debug: Inserted test_block@0.ops[10]: 'l-store-copy b#0 0'
debug: Replaced test_block@0.ops[15]: 'v-load b#0' with 'l-load b#0'
debug: Inserted test_else_body@2.ops[3]: 'l-store-copy tmp%1#0 0'
debug: Replaced test_else_body@2.ops[5]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted test_else_body@4.ops[3]: 'l-store-copy tmp%2#0 0'
debug: Replaced test_else_body@4.ops[5]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted test_else_body@6.ops[3]: 'l-store-copy tmp%3#0 0'
debug: Replaced test_else_body@6.ops[7]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted test_else_body@6.ops[1]: 'l-store-copy b#0 0'
debug: Replaced test_else_body@6.ops[6]: 'v-load b#0' with 'l-load b#0'
debug: Inserted test_if_body@7.ops[3]: 'l-store-copy b#0 0'
debug: Replaced test_if_body@7.ops[5]: 'v-load b#0' with 'l-load b#0'
debug: Inserted test_after_if_else@11.ops[3]: 'l-store-copy tmp%4#0 0'
debug: Replaced test_after_if_else@11.ops[5]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted test_after_if_else@11.ops[8]: 'l-store-copy tmp%5#0 0'
debug: Replaced test_after_if_else@11.ops[10]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted test_if_body@12.ops[3]: 'l-store-copy tmp%6#0 0'
debug: Replaced test_if_body@12.ops[6]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted test_if_body@12.ops[1]: 'l-store-copy a#0 0'
debug: Replaced test_if_body@12.ops[6]: 'v-load a#0' with 'l-load a#0'
debug: Inserted test_else_body@13.ops[3]: 'l-store-copy tmp%7#0 0'
debug: Replaced test_else_body@13.ops[6]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted test_else_body@13.ops[1]: 'l-store-copy b#0 0'
debug: Replaced test_else_body@13.ops[6]: 'v-load b#0' with 'l-load b#0'
debug: Inserted test_after_if_else@14.ops[6]: 'l-store-copy c#0 0'
debug: Replaced test_after_if_else@14.ops[8]: 'v-load c#0' with 'l-load c#0'
debug: Inserted test_after_if_else@14.ops[14]: 'l-store-copy tmp%8#0 0'
debug: Replaced test_after_if_else@14.ops[18]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted test_after_if_else@14.ops[1]: 'l-store-copy b#0 0'
debug: Replaced test_after_if_else@14.ops[5]: 'v-load b#0' with 'l-load b#0'
debug: Inserted test_after_if_else@14.ops[10]: 'l-store-copy c#0 0'
debug: Replaced test_after_if_else@14.ops[14]: 'v-load c#0' with 'l-load c#0'
debug: Inserted test_after_if_else@14.ops[14]: 'l-store-copy a#0 1'
debug: Replaced test_after_if_else@14.ops[19]: 'v-load a#0' with 'l-load a#0'
debug: Inserted test_after_if_else@14.ops[5]: 'l-store-copy a#0 1'
debug: Replaced test_after_if_else@14.ops[14]: 'v-load a#0' with 'l-load a#0'
debug: Inserted test_if_body@15.ops[3]: 'l-store-copy a#0 0'
debug: Replaced test_if_body@15.ops[5]: 'v-load a#0' with 'l-load a#0'
debug: Inserted test_after_if_else@16.ops[1]: 'l-store-copy a#0 0'
debug: Replaced test_after_if_else@16.ops[3]: 'v-load a#0' with 'l-load a#0'
debug: Inserted test_after_if_else@16.ops[6]: 'l-store-copy tmp%9#0 0'
debug: Replaced test_after_if_else@16.ops[10]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted test_after_if_else@16.ops[4]: 'l-store-copy a#0 0'
debug: Replaced test_after_if_else@16.ops[9]: 'v-load a#0' with 'l-load a#0'
debug: Inserted test_if_body@17.ops[3]: 'l-store-copy a#0 0'
debug: Replaced test_if_body@17.ops[5]: 'v-load a#0' with 'l-load a#0'
debug: Inserted test_after_if_else@18.ops[5]: 'l-store-copy tmp%10#0 0'
debug: Replaced test_after_if_else@18.ops[8]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted test_after_if_else@18.ops[10]: 'l-store-copy tmp%11#0 0'
debug: Replaced test_after_if_else@18.ops[14]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted test_after_if_else@18.ops[8]: 'l-store-copy a#0 1'
debug: Replaced test_after_if_else@18.ops[13]: 'v-load a#0' with 'l-load a#0'
debug: Inserted test_after_if_else@18.ops[1]: 'l-store-copy a#0 0'
debug: Replaced test_after_if_else@18.ops[8]: 'v-load a#0' with 'l-load a#0'
debug: Inserted test_if_body@19.ops[3]: 'l-store-copy a#0 0'
debug: Replaced test_if_body@19.ops[5]: 'v-load a#0' with 'l-load a#0'
debug: Inserted test_after_if_else@20.ops[1]: 'l-store-copy a#0 0'
debug: Replaced test_after_if_else@20.ops[3]: 'v-load a#0' with 'l-load a#0'
debug: Inserted test_after_if_else@20.ops[5]: 'l-store-copy aye#0 0'
debug: Replaced test_after_if_else@20.ops[7]: 'v-load aye#0' with 'l-load aye#0'
debug: Inserted test_after_if_else@20.ops[10]: 'l-store-copy tmp%12#0 0'
debug: Replaced test_after_if_else@20.ops[12]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted test_after_if_else@20.ops[15]: 'l-store-copy tmp%13#0 0'
debug: Replaced test_after_if_else@20.ops[17]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted test_after_if_else@20.ops[20]: 'l-store-copy tmp%14#0 0'
debug: Replaced test_after_if_else@20.ops[22]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted test_after_if_else@20.ops[25]: 'l-store-copy tmp%15#0 0'
debug: Replaced test_after_if_else@20.ops[27]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted test_after_if_else@20.ops[4]: 'l-store-copy a#0 0'
debug: Replaced test_after_if_else@20.ops[30]: 'v-load a#0' with 'l-load a#0'
debug: Inserted some_func_block@0.ops[32]: 'l-store-copy tmp%1#0 0'
debug: Replaced some_func_block@0.ops[34]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted some_func_block@0.ops[23]: 'l-store-copy y#0 0'
debug: Replaced some_func_block@0.ops[26]: 'v-load y#0' with 'l-load y#0'
debug: Inserted some_func_block@0.ops[27]: 'l-store-copy y#0 1'
debug: Replaced some_func_block@0.ops[30]: 'v-load y#0' with 'l-load y#0'
debug: Inserted some_func_block@0.ops[29]: 'l-store-copy tmp%0#0 1'
debug: Replaced some_func_block@0.ops[33]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted some_func_block@0.ops[19]: 'l-store-copy x#0 0'
debug: Replaced some_func_block@0.ops[26]: 'v-load x#0' with 'l-load x#0'
debug: Inserted some_func_block@0.ops[27]: 'l-store-copy x#0 1'
debug: Replaced some_func_block@0.ops[34]: 'v-load x#0' with 'l-load x#0'
debug: Inserted itoa_block@0.ops[3]: 'l-store-copy tmp%0#0 0'
debug: Replaced itoa_block@0.ops[5]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted itoa_if_body@1.ops[4]: 'l-store-copy tmp%1#0 0'
debug: Replaced itoa_if_body@1.ops[6]: 'v-load tmp%1#0' with 'l-load tmp%1#0'
debug: Inserted itoa_after_if_else@2.ops[3]: 'l-store-copy tmp%2#0 0'
debug: Replaced itoa_after_if_else@2.ops[5]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted itoa_after_if_else@2.ops[20]: 'l-store-copy tmp%6#0 0'
debug: Replaced itoa_after_if_else@2.ops[22]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted itoa_after_if_else@2.ops[11]: 'l-store-copy tmp%4#0 0'
debug: Replaced itoa_after_if_else@2.ops[14]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted itoa_after_if_else@2.ops[17]: 'l-store-copy tmp%5#0 0'
debug: Replaced itoa_after_if_else@2.ops[20]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted itoa_after_if_else@2.ops[7]: 'l-store-copy tmp%3#0 0'
debug: Replaced itoa_after_if_else@2.ops[20]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Found 3 edge set/s for test_cases.debug.contract.DebugContract.__puya_arc4_router__
debug: Found 10 edge set/s for test_cases.debug.contract.DebugContract.test
debug: Found 1 edge set/s for test_cases.debug.contract.itoa
debug: test_cases.debug.contract.DebugContract.test f-stack entry: ['bee#0', 'cea#0', 'a#30', 'b#10']
debug: test_cases.debug.contract.DebugContract.test f-stack on first store: ['a#0', 'b#0', 'c#0']
info: Writing debug/out/DebugContract.arc32.json
info: Writing debug/out/DebugContract.arc56.json
info: Writing debug/out/DebugContract.approval.teal
info: Writing debug/out/DebugContract.clear.teal
info: Writing debug/out/DebugContract.approval.bin
info: Writing debug/out/DebugContract.clear.bin
info: Writing debug/out/DebugContract.approval.puya.map
info: Writing debug/out/DebugContract.clear.puya.map
info: writing debug/out/client_DebugContract.py