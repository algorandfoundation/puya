{
    "name": "DebugContract",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                },
                {
                    "type": "uint64",
                    "name": "y"
                },
                {
                    "type": "uint64",
                    "name": "z"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        52
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        91
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        55
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLmRlYnVnLmNvbnRyYWN0LkRlYnVnQ29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQAKASYCASAKMDEyMzQ1Njc4OYgAAUOKAAExG0EAMYAEU1dL/zYaAI4BAAIjiTEZFEQxGEQ2GgEXNhoCFzYaAxeIABkWgAQVH3x1TFCwIokxGUAABjEYFEQiiSOJigMBI0mAAEmL/SULi/2L/ghHAov/C0lOAgxBAAqLBIv+CIwEQgA7iwSLBgxBAAqLBIv/CIwEQgApiwWLBAxBAAqLBIEDC4wEQgAXiwVJiwQNTIwDQQAHiwWLBAiMA4sDjAWLBIsFCIsGDEEADosESYv+iAB8C4wEQgALiwVJi/+IAG4LjAWLBUmIAJOMAIsESU8CCEmMBkmIAISMAUsBDUyMAkEAB4sEiwYIjAKLAkmMBEmLBQxMjAJBAAeLBIsFCIwCiwJJjASLBYsGCEsBDUyMAkEAB4sEi/8LjAKLAkmIADwoUIsAUChQiwFQsIwAiYoCAYv+i/8IjP6L/4v+C4z/i/6L/whJjP6BAgtJjP6L/wiL/ov/C0oMTE4CTYmKAQGL/yQMQQALi/8iCCmL/08CUomL/yQKiP/ki/8kGEkiCClOAlJQiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {
        "A_MULT": {
            "type": "AVMUint64",
            "value": "AAAAAAAAAAE="
        }
    }
}