{
    "name": "DebugContract",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                },
                {
                    "type": "uint64",
                    "name": "y"
                },
                {
                    "type": "uint64",
                    "name": "z"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        58
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        47
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                },
                {
                    "pc": [
                        150,
                        159,
                        171
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAQoIASYCCjAxMjM0NTY3ODkBIDEbQQAYgARTV0v/NhoAjgEAAQAxGRQxGBBEQgBZMRkUMRgUEEQiQ4oCAYv+i/8IjP6L/4v+C4z/i/6L/whJjP6BAgtJjP6L/wiL/ov/C0oMTE4CTYmKAQGL/yMMQQAGKIv/IliJi/8jCoj/6Yv/IxgoTCJYUImBAEk2GgFJFSQSRBc2GgJJFSQSRBdJTgI2GgNJFSQSRBdJTgNLAiULTgNOAghJTgJJTwILSU4CDEEAiEsCSwUIRQNLAksCCEsBDEEAaEsCSUsGiP9cC0UDSwFJiP+BRQhLA0lPAghJRQNJiP9yRQgMQQAHSwJLAQhFA0sCSwIMQQAHSwJLAghFA0oISwMNQQAHSwJLBAtFA0sCSYj/QSlQSwhQKVBLB1CwFoAEFR98dUxQsCJDSwFJSwWI/vQLRQJC/5VLAksBDEEACksCSwQIRQNC/21LAUsDDEEACksCgQMLRQNC/1tLAUsDDUH/U0sBSwMIRQJC/0k=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {
        "A_MULT": {
            "type": "AVMUint64",
            "value": "AAAAAAAAAAE="
        }
    }
}