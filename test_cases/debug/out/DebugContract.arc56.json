{
    "name": "DebugContract",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                },
                {
                    "type": "uint64",
                    "name": "y"
                },
                {
                    "type": "uint64",
                    "name": "z"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        147,
                        163
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        45
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        84
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        48
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQoAASYCCjAxMjM0NTY3ODkBIDEbQQAxgARTV0v/NhoAjgEAAiRDMRkURDEYRDYaARc2GgIXNhoDF4gAZhaABBUffHVMULAiQzEZQP/XMRgURCJDigIBi/6L/wiM/ov/i/4LjP+L/ov/CEmM/oECC0mM/ov/CIv+i/8LSgxMTgJNiYoBAYv/IwxBAAYoi/8iWImL/yMKiP/pi/8jGChMIlhQiYoDASRJgABJi/0lC4v9i/4IRwKL/wtJTgIMQQCWiwSL/giMBIsEiwUIiwYMQQB2iwRJi/6I/3oLjASLBUmI/5+MAIsESU8CCEmMBkmI/5CMAUsBDUyMAkEAB4sEiwYIjAKLAkmMBEmLBQxMjAJBAAeLBIsFCIwCiwJJjASLBYsGCEsBDUyMAkEAB4sEi/8LjAKLAkmI/0gpUIsAUClQiwFQsIwAiYsFSYv/iP8EC4wFQv+HiwSLBgxBAAqLBIv/CIwEQv9fiwWLBAxBAAqLBIEDC4wEQv9NiwVJiwQNTIwDQQAHiwWLBAiMA4sDjAVC/zM=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {
        "A_MULT": {
            "type": "AVMUint64",
            "value": "AAAAAAAAAAE="
        }
    }
}