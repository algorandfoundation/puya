{
    "name": "DebugContract",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                },
                {
                    "type": "uint64",
                    "name": "y"
                },
                {
                    "type": "uint64",
                    "name": "z"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        55
                    ],
                    "errorMessage": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
                },
                {
                    "pc": [
                        73
                    ],
                    "errorMessage": "this contract does not implement the given ABI method for call NoOp"
                },
                {
                    "pc": [
                        59
                    ],
                    "errorMessage": "this contract does not implement the given ABI method for create NoOp"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAQoBJgIKMDEyMzQ1Njc4OQEgMRgUMRkikAiNDAAFAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAxGxRDgARTV0v/NhoAjgEAUACKAgGL/ov/CIz+i/+L/guM/4v+i/8ISYz+gQILSYz+i/8Ii/6L/wtKDExOAk2JigEBi/8jDEEABiiL/yJYiYv/IwqI/+mL/yMYKEwiWFCJgQBJgABJNhoBFzYaAhdJTwI2GgMXSU4DSwEkC04DTE8CCElOAklPAgtJTgIMQQCfSwJLBQhFA0sCSwIISwEMQQB/SwJJSwaI/2cLRQNLAUmI/4xFCksDSU8CCElFA0mI/31FCksBDUxFCEEAB0sCSwEIRQdLBklFBElLAwxMRQhBAAdLAksCCEUHSwZJRQRLAksCCEsBDUxFCEEAB0sCSwQLRQdLBkmI/zUpUEsKUClQSwlQsBaABBUffHVMULAiQ0sBSUsFiP7oC0UCQv9+SwJLAQxBAApLAksECEUDQv9WSwFLAwxBAApLAoEDC0UDQv9ESwFJSwQNTEUHQQAHSwFLAwhFBksFRQJC/yo=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {
        "A_MULT": {
            "type": "AVMUint64",
            "value": "AAAAAAAAAAE="
        }
    }
}