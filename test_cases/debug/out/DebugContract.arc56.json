{
    "name": "DebugContract",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                },
                {
                    "type": "uint64",
                    "name": "y"
                },
                {
                    "type": "uint64",
                    "name": "z"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        57
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        46
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADCgEBJgIKMDEyMzQ1Njc4OQEgMRtBABiABFNXS/82GgCOAQABADEZFDEYEERCAFcxGRQxGBQQQ4oCAYv+i/8IjP6L/4v+C4z/i/6L/whJjP6BAgtJjP6L/wiL/ov/C0oMTE4CTYmKAQGL/yIMQQAGKIv/I1iJi/8iCoj/6Yv/IhgoTCNYUImBAEmAAEk2GgEXNhoCF0lPAjYaAxdJTgNLASQLTgNMTwIISU4CSU8CC0lOAgxBAJ9LAksFCEUDSwJLAghLAQxBAH9LAklLBoj/ZwtFA0sBSYj/jEUKSwNJTwIISUUDSYj/fUUKSwENTEUIQQAHSwJLAQhFB0sGSUUESUsDDExFCEEAB0sCSwIIRQdLBklFBEsCSwIISwENTEUIQQAHSwJLBAtFB0sGSYj/NSlQSwpQKVBLCVCwFoAEFR98dUxQsCNDSwFJSwWI/ugLRQJC/35LAksBDEEACksCSwQIRQNC/1ZLAUsDDEEACksCgQMLRQNC/0RLAUlLBA1MRQdBAAdLAUsDCEUGSwVFAkL/Kg==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {
        "A_MULT": {
            "type": "AVMUint64",
            "value": "AAAAAAAAAAE="
        }
    }
}