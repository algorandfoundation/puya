{
    "name": "DebugContract",
    "structs": {},
    "methods": [
        {
            "name": "test",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                },
                {
                    "type": "uint64",
                    "name": "y"
                },
                {
                    "type": "uint64",
                    "name": "z"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        58
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        47
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when not creating"
                },
                {
                    "pc": [
                        148,
                        157,
                        169
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAECgEIASYCCjAxMjM0NTY3ODkBIDEbQQAYgARTV0v/NhoAjgEAAQAxGRQxGBBEQgBXMRkUMRgUEEOKAgGL/ov/CIz+i/+L/guM/4v+i/8ISYz+gQILSYz+i/8Ii/6L/wtKDExOAk2JigEBi/8iDEEABiiL/yNYiYv/IgqI/+mL/yIYKEwjWFCJgQBJNhoBSRUkEkQXNhoCSRUkEkQXSU4CNhoDSRUkEkQXSU4DSwIlC04DTgIISU4CSU8CC0lOAgxBAIhLAksFCEUDSwJLAghLAQxBAGhLAklLBoj/XAtFA0sBSYj/gUUISwNJTwIISUUDSYj/ckUIDEEAB0sCSwEIRQNLAksCDEEAB0sCSwIIRQNKCEsDDUEAB0sCSwQLRQNLAkmI/0EpUEsIUClQSwdQsBaABBUffHVMULAjQ0sBSUsFiP70C0UCQv+VSwJLAQxBAApLAksECEUDQv9tSwFLAwxBAApLAoEDC0UDQv9bSwFLAw1B/1NLAUsDCEUCQv9J",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {
        "A_MULT": {
            "type": "AVMUint64",
            "value": "AAAAAAAAAAE="
        }
    }
}