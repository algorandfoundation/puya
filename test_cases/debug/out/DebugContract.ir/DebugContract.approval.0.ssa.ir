main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.debug.contract.DebugContract.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.debug.contract.some_func(a: uint64, b: uint64) -> uint64:
    block@0: // L41
        let a#1: uint64 = (+ a#0 b#0)
        let b#1: uint64 = (* b#0 a#1)
        let a#2: uint64 = (+ a#1 b#1)
        let a#3: uint64 = (* a#2 2u)
        let x#0: uint64 = (+ a#3 b#1)
        let y#0: uint64 = (* a#3 b#1)
        let tmp%0#0: bool = (< x#0 y#0)
        let select%0#0: uint64 = (select y#0 x#0 tmp%0#0)
        return select%0#0

subroutine test_cases.debug.contract.itoa(i: uint64) -> bytes:
    block@0: // L52
        let digits#0: bytes = 0x30313233343536373839
        let radix#0: uint64 = (len digits#0)
        let tmp%0#0: bool = (< i#0 radix#0)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L57
        let read_bytes%0#0: bytes = (extract3 digits#0 i#0 1u) // on error: Index access is out of bounds
        return read_bytes%0#0
    block@2: // after_if_else_L56
        let tmp%1#0: uint64 = (/ i#0 radix#0)
        let tmp%2#0: bytes = test_cases.debug.contract.itoa(tmp%1#0)
        let tmp%3#0: uint64 = (% i#0 radix#0)
        let read_bytes%1#0: bytes = (extract3 digits#0 tmp%3#0 1u) // on error: Index access is out of bounds
        let tmp%4#0: bytes = (concat tmp%2#0 read_bytes%1#0)
        return tmp%4#0

subroutine test_cases.debug.contract.DebugContract.__puya_arc4_router__() -> bool:
    block@0: // L4
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        goto tmp%1#0 ? block@1 : block@5
    block@1: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64,uint64,uint64)uint64" => block@2, * => block@3}
    block@2: // test_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%6#0: bool = (!= tmp%5#0 0u)
        (assert tmp%6#0) // can only call when not creating
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 1)
        let tmp%7#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        let reinterpret_Encoded(uint64)%1#0: Encoded(uint64) = (txna ApplicationArgs 2)
        let tmp%8#0: uint64 = (btoi reinterpret_Encoded(uint64)%1#0)
        let reinterpret_Encoded(uint64)%2#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%9#0: uint64 = (btoi reinterpret_Encoded(uint64)%2#0)
        let to_encode%0#0: uint64 = test_cases.debug.contract.DebugContract.test(tmp%7#0, tmp%8#0, tmp%9#0)
        let val_as_bytes%0#0: bytes[8] = (itob to_encode%0#0)
        let tmp%10#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%10#0)
        return 1u
    block@3: // switch_case_default_L4
        goto block@4
    block@4: // switch_case_next_L4
        goto block@9
    block@5: // bare_routing_L4
        let tmp%11#0: uint64 = (txn OnCompletion)
        switch tmp%11#0 {0u => block@6, * => block@7}
    block@6: // __algopy_default_create_L1
        let tmp%12#0: uint64 = (txn ApplicationID)
        let tmp%13#0: bool = (== tmp%12#0 0u)
        (assert tmp%13#0) // can only call when creating
        test_cases.debug.contract.DebugContract.__algopy_default_create()
        return 1u
    block@7: // switch_case_default_L4
        goto block@8
    block@8: // switch_case_next_L4
        goto block@9
    block@9: // after_if_else_L4
        return 0u

subroutine test_cases.debug.contract.DebugContract.test(x: uint64, y: uint64, z: uint64) -> uint64:
    block@0: // L5
        let a#0: uint64 = (* x#0 TemplateVar[uint64](TMPL_A_MULT))
        let b#0: uint64 = (+ x#0 y#0)
        let c#0: uint64 = (* b#0 z#0)
        let tmp%0#0: bool = (< b#0 c#0)
        goto tmp%0#0 ? block@1 : block@2
    block@1: // if_body_L11
        let a#1: uint64 = (+ a#0 y#0)
        goto block@11
    block@2: // else_body_L12
        let tmp%1#0: bool = (< a#0 c#0)
        goto tmp%1#0 ? block@3 : block@4
    block@3: // if_body_L13
        let a#2: uint64 = (+ a#0 z#0)
        goto block@10
    block@4: // else_body_L14
        let tmp%2#0: bool = (< b#0 a#0)
        goto tmp%2#0 ? block@5 : block@6
    block@5: // if_body_L15
        let a#3: uint64 = (* a#0 3u)
        goto block@9
    block@6: // else_body_L16
        let tmp%3#0: bool = (> b#0 a#0)
        goto tmp%3#0 ? block@7 : block@8
    block@7: // if_body_L17
        let b#1: uint64 = (+ b#0 a#0)
        goto block@8
    block@8: // after_if_else_L16
        let b#5: uint64 = φ(b#0 <- block@6, b#1 <- block@7)
        goto block@9
    block@9: // after_if_else_L14
        let a#6: uint64 = φ(a#3 <- block@5, a#0 <- block@8)
        let b#4: uint64 = φ(b#0 <- block@5, b#5 <- block@8)
        goto block@10
    block@10: // after_if_else_L12
        let a#5: uint64 = φ(a#2 <- block@3, a#6 <- block@9)
        let b#3: uint64 = φ(b#0 <- block@3, b#4 <- block@9)
        goto block@11
    block@11: // after_if_else_L10
        let a#4: uint64 = φ(a#1 <- block@1, a#5 <- block@10)
        let b#2: uint64 = φ(b#0 <- block@1, b#3 <- block@10)
        let tmp%4#0: uint64 = (+ a#4 b#2)
        let tmp%5#0: bool = (< tmp%4#0 c#0)
        goto tmp%5#0 ? block@12 : block@13
    block@12: // if_body_L20
        let tmp%6#0: uint64 = test_cases.debug.contract.some_func(a#4, y#0)
        let a#8: uint64 = (* a#4 tmp%6#0)
        goto block@14
    block@13: // else_body_L22
        let tmp%7#0: uint64 = test_cases.debug.contract.some_func(b#2, z#0)
        let b#6: uint64 = (* b#2 tmp%7#0)
        goto block@14
    block@14: // after_if_else_L19
        let b#7: uint64 = φ(b#2 <- block@12, b#6 <- block@13)
        let a#9: uint64 = φ(a#8 <- block@12, a#4 <- block@13)
        let bee#0: bytes = test_cases.debug.contract.itoa(b#7)
        let c#5: uint64 = (+ a#9 b#7)
        let cea#0: bytes = test_cases.debug.contract.itoa(c#5)
        let tmp%8#0: bool = (< a#9 c#5)
        goto tmp%8#0 ? block@15 : block@16
    block@15: // if_body_L29
        let a#10: uint64 = (+ a#9 c#5)
        goto block@16
    block@16: // after_if_else_L28
        let a#11: uint64 = φ(a#9 <- block@14, a#10 <- block@15)
        let tmp%9#0: bool = (< a#11 b#7)
        goto tmp%9#0 ? block@17 : block@18
    block@17: // if_body_L31
        let a#12: uint64 = (+ a#11 b#7)
        goto block@18
    block@18: // after_if_else_L30
        let a#13: uint64 = φ(a#11 <- block@16, a#12 <- block@17)
        let tmp%10#0: uint64 = (+ b#7 c#5)
        let tmp%11#0: bool = (< a#13 tmp%10#0)
        goto tmp%11#0 ? block@19 : block@20
    block@19: // if_body_L33
        let a#14: uint64 = (* a#13 z#0)
        goto block@20
    block@20: // after_if_else_L32
        let a#15: uint64 = φ(a#13 <- block@18, a#14 <- block@19)
        let aye#0: bytes = test_cases.debug.contract.itoa(a#15)
        let tmp%12#0: bytes = (concat aye#0 " ")
        let tmp%13#0: bytes = (concat tmp%12#0 bee#0)
        let tmp%14#0: bytes = (concat tmp%13#0 " ")
        let tmp%15#0: bytes = (concat tmp%14#0 cea#0)
        (log tmp%15#0)
        return a#15

subroutine test_cases.debug.contract.DebugContract.__algopy_default_create() -> void:
    block@0: // L1
        return 