main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@5
    block@2: // abi_routing_L4
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test(uint64,uint64,uint64)uint64" => block@3, * => block@4}
    block@3: // test_route_L5
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        let tmp%5#0: uint64 = (txn ApplicationID)
        let tmp%7#0: bool = (&& tmp%4#0 tmp%5#0)
        (assert tmp%7#0) // OnCompletion must be NoOp && can only call when not creating
        test_cases.debug.contract.DebugContract.test[routing]()
        goto block@4
    block@4: // switch_case_next_L4
        fail
    block@5: // __algopy_default_create_L1
        let tmp%8#0: uint64 = (txn OnCompletion)
        let tmp%9#0: bool = (! tmp%8#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        let tmp%12#0: bool = (&& tmp%9#0 tmp%11#0)
        (assert tmp%12#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.debug.contract.some_func(a: uint64, b: uint64) -> uint64:
    block@0: // L41
        let a#0: uint64 = (+ a#0 b#0)
        let b#0: uint64 = (* b#0 a#0)
        let a#0: uint64 = (+ a#0 b#0)
        let a#0: uint64 = (* a#0 2u)
        let x#0: uint64 = (+ a#0 b#0)
        let y#0: uint64 = (* a#0 b#0)
        let tmp%6#0: bool = (< x#0 y#0)
        let select%0#0: uint64 = (select y#0 x#0 tmp%6#0)
        return select%0#0

subroutine test_cases.debug.contract.itoa(i: uint64) -> bytes:
    block@0: // L52
        let tmp%1#0: bool = (< i#0 10u)
        goto tmp%1#0 ? block@1 : block@2
    block@1: // if_body_L57
        let extract%0#0: bytes = (extract3 0x30313233343536373839 i#0 1u)
        return extract%0#0
    block@2: // after_if_else_L56
        let tmp%2#0: uint64 = (/ i#0 10u)
        let tmp%3#0: bytes = test_cases.debug.contract.itoa(tmp%2#0)
        let tmp%4#0: uint64 = (% i#0 10u)
        let extract%1#0: bytes = (extract3 0x30313233343536373839 tmp%4#0 1u)
        let tmp%5#0: bytes = (concat tmp%3#0 extract%1#0)
        return tmp%5#0

subroutine test_cases.debug.contract.DebugContract.test[routing]() -> void:
    block@0: // L5
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 8u)
        (assert eq%0#0) // invalid number of bytes for uint64
        let x#0: uint64 = (btoi tmp%0#0)
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 8u)
        (assert eq%1#0) // invalid number of bytes for uint64
        let y#0: uint64 = (btoi tmp%2#0)
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for uint64
        let z#0: uint64 = (btoi tmp%4#0)
        let a#0: uint64 = (* x#0 TemplateVar[uint64](TMPL_A_MULT))
        let b#0: uint64 = (+ x#0 y#0)
        let c#0: uint64 = (* b#0 z#0)
        let tmp%3#1: bool = (< b#0 c#0)
        goto tmp%3#1 ? block@2 : block@3
    block@2: // if_body_L11
        let a#0: uint64 = (+ a#0 y#0)
        goto block@12
    block@3: // else_body_L12
        let tmp%5#1: bool = (< a#0 c#0)
        goto tmp%5#1 ? block@4 : block@5
    block@4: // if_body_L13
        let a#0: uint64 = (+ a#0 z#0)
        goto block@12
    block@5: // else_body_L14
        let tmp%7#1: bool = (< b#0 a#0)
        goto tmp%7#1 ? block@6 : block@7
    block@6: // if_body_L15
        let a#0: uint64 = (* a#0 3u)
        goto block@12
    block@7: // else_body_L16
        let tmp%9#0: bool = (> b#0 a#0)
        goto tmp%9#0 ? block@8 : block@12
    block@8: // if_body_L17
        let b#0: uint64 = (+ b#0 a#0)
        goto block@12
    block@12: // after_if_else_L10
        let tmp%11#0: uint64 = (+ a#0 b#0)
        let tmp%12#0: bool = (< tmp%11#0 c#0)
        goto tmp%12#0 ? block@13 : block@14
    block@13: // if_body_L20
        let tmp%13#0: uint64 = test_cases.debug.contract.some_func(a#0, y#0)
        let a#0: uint64 = (* a#0 tmp%13#0)
        goto block@15
    block@14: // else_body_L22
        let tmp%15#0: uint64 = test_cases.debug.contract.some_func(b#0, z#0)
        let b#0: uint64 = (* b#0 tmp%15#0)
        goto block@15
    block@15: // after_if_else_L19
        let bee#0: bytes = test_cases.debug.contract.itoa(b#0)
        let c#0: uint64 = (+ a#0 b#0)
        let cea#0: bytes = test_cases.debug.contract.itoa(c#0)
        let tmp%20#0: bool = (< a#0 c#0)
        goto tmp%20#0 ? block@16 : block@17
    block@16: // if_body_L29
        let a#0: uint64 = (+ a#0 c#0)
        goto block@17
    block@17: // after_if_else_L28
        let tmp%22#0: bool = (< a#0 b#0)
        goto tmp%22#0 ? block@18 : block@19
    block@18: // if_body_L31
        let a#0: uint64 = (+ a#0 b#0)
        goto block@19
    block@19: // after_if_else_L30
        let tmp%24#0: uint64 = (+ b#0 c#0)
        let tmp%25#0: bool = (< a#0 tmp%24#0)
        goto tmp%25#0 ? block@20 : block@21
    block@20: // if_body_L33
        let a#0: uint64 = (* a#0 z#0)
        goto block@21
    block@21: // after_if_else_L32
        let aye#0: bytes = test_cases.debug.contract.itoa(a#0)
        let tmp%28#0: bytes = (concat aye#0 " ")
        let tmp%29#0: bytes = (concat tmp%28#0 bee#0)
        let tmp%30#0: bytes = (concat tmp%29#0 " ")
        let tmp%31#0: bytes = (concat tmp%30#0 cea#0)
        (log tmp%31#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob a#0)
        let tmp%8#0: bytes = (concat 0x151f7c75 aggregate%val_as_bytes%0#0)
        (log tmp%8#0)
        exit 1u