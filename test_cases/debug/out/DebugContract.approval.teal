#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 10 1 TMPL_A_MULT
    bytecblock 0x30313233343536373839 " "
    // debug/contract.py:4
    // class DebugContract(arc4.ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@6
    pushbytes 0x53574bff // method "test(uint64,uint64,uint64)uint64"
    txna ApplicationArgs 0
    match main_test_route@3
    err

main_test_route@3:
    // debug/contract.py:5
    // @arc4.abimethod
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b test

main___algopy_default_create@6:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// test_cases.debug.contract.some_func(a: uint64, b: uint64) -> uint64:
some_func:
    // debug/contract.py:41-42
    // @subroutine
    // def some_func(a: UInt64, b: UInt64) -> UInt64:
    proto 2 1
    // debug/contract.py:43
    // a += b
    frame_dig -2
    frame_dig -1
    +
    frame_bury -2
    // debug/contract.py:44
    // b *= a
    frame_dig -1
    frame_dig -2
    *
    frame_bury -1
    // debug/contract.py:45
    // a += b
    frame_dig -2
    frame_dig -1
    +
    dup
    frame_bury -2
    // debug/contract.py:46
    // a *= 2
    pushint 2 // 2
    *
    dup
    frame_bury -2
    // debug/contract.py:47
    // x = a + b
    frame_dig -1
    +
    // debug/contract.py:48
    // y = a * b
    frame_dig -2
    frame_dig -1
    *
    // debug/contract.py:49
    // return x if x < y else y
    dup2
    <
    swap
    cover 2
    select
    retsub


// test_cases.debug.contract.itoa(i: uint64) -> bytes:
itoa:
    // debug/contract.py:52-53
    // @subroutine
    // def itoa(i: UInt64) -> Bytes:
    proto 1 1
    // debug/contract.py:56
    // if i < radix:
    frame_dig -1
    // debug/contract.py:55
    // radix = digits.length
    intc_0 // 10
    // debug/contract.py:56
    // if i < radix:
    <
    bz itoa_after_if_else@2
    // debug/contract.py:54
    // digits = Bytes(b"0123456789")
    bytec_0 // 0x30313233343536373839
    // debug/contract.py:57
    // return digits[i]
    frame_dig -1
    intc_1 // 1
    extract3
    retsub

itoa_after_if_else@2:
    // debug/contract.py:58
    // return itoa(i // radix) + digits[i % radix]
    frame_dig -1
    // debug/contract.py:55
    // radix = digits.length
    intc_0 // 10
    // debug/contract.py:58
    // return itoa(i // radix) + digits[i % radix]
    /
    callsub itoa
    frame_dig -1
    // debug/contract.py:55
    // radix = digits.length
    intc_0 // 10
    // debug/contract.py:58
    // return itoa(i // radix) + digits[i % radix]
    %
    // debug/contract.py:54
    // digits = Bytes(b"0123456789")
    bytec_0 // 0x30313233343536373839
    // debug/contract.py:58
    // return itoa(i // radix) + digits[i % radix]
    swap
    intc_1 // 1
    extract3
    concat
    retsub


// test_cases.debug.contract.DebugContract.test[routing]() -> void:
test:
    pushint 0 // 0
    dup
    pushbytes ""
    dup
    // debug/contract.py:5
    // @arc4.abimethod
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    dup
    uncover 2
    txna ApplicationArgs 3
    btoi
    dup
    cover 3
    // debug/contract.py:7
    // a = x * TemplateVar[UInt64]("A_MULT")
    dig 1
    intc_2 // TMPL_A_MULT
    *
    cover 3
    // debug/contract.py:8
    // b = x + y
    swap
    uncover 2
    +
    dup
    cover 2
    // debug/contract.py:9
    // c = b * z
    dup
    uncover 2
    *
    dup
    cover 2
    // debug/contract.py:10
    // if b < c:
    <
    bz test_else_body@3
    // debug/contract.py:11
    // a = a + y
    dig 2
    dig 5
    +
    bury 3

test_after_if_else@12:
    // debug/contract.py:19
    // if a + b < c:
    dig 2
    dig 2
    +
    dig 1
    <
    bz test_else_body@14
    // debug/contract.py:20
    // a *= some_func(a, y)
    dig 2
    dup
    dig 6
    callsub some_func
    *
    bury 3

test_after_if_else@15:
    // debug/contract.py:24
    // bee = itoa(b)
    dig 1
    dup
    callsub itoa
    bury 10
    // debug/contract.py:25
    // c = a + b
    dig 3
    dup
    uncover 2
    +
    dup
    bury 3
    // debug/contract.py:26
    // cea = itoa(c)
    dup
    callsub itoa
    bury 10
    // debug/contract.py:28
    // if a < c:
    dig 1
    >
    swap
    bury 8
    bz test_after_if_else@17
    // debug/contract.py:29
    // a += c
    dig 2
    dig 1
    +
    bury 7

test_after_if_else@17:
    dig 6
    dup
    bury 4
    // debug/contract.py:30
    // if a < b:
    dup
    dig 3
    <
    swap
    bury 8
    bz test_after_if_else@19
    // debug/contract.py:31
    // a += b
    dig 2
    dig 2
    +
    bury 7

test_after_if_else@19:
    dig 6
    dup
    bury 4
    // debug/contract.py:32
    // if a < b + c:
    dig 2
    dig 2
    +
    dig 1
    >
    swap
    bury 8
    bz test_after_if_else@21
    // debug/contract.py:33
    // a = a * z
    dig 2
    dig 4
    *
    bury 7

test_after_if_else@21:
    dig 6
    // debug/contract.py:35
    // aye = itoa(a)
    dup
    callsub itoa
    // debug/contract.py:36
    // log(aye, bee, cea, sep=" ")
    bytec_1 // " "
    concat
    dig 10
    concat
    bytec_1 // " "
    concat
    dig 9
    concat
    log
    // debug/contract.py:5
    // @arc4.abimethod
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

test_else_body@14:
    // debug/contract.py:22
    // b *= some_func(b, z)
    dig 1
    dup
    dig 5
    callsub some_func
    *
    bury 2
    b test_after_if_else@15

test_else_body@3:
    // debug/contract.py:12
    // elif a < c:
    dig 2
    dig 1
    <
    bz test_else_body@5
    // debug/contract.py:13
    // a = a + z
    dig 2
    dig 4
    +
    bury 3
    b test_after_if_else@12

test_else_body@5:
    // debug/contract.py:14
    // elif b < a:
    dig 1
    dig 3
    <
    bz test_else_body@7
    // debug/contract.py:15
    // a = a * 3
    dig 2
    pushint 3 // 3
    *
    bury 3
    b test_after_if_else@12

test_else_body@7:
    // debug/contract.py:16
    // elif b > a:
    dig 1
    dup
    dig 4
    >
    swap
    bury 7
    bz test_after_if_else@9
    // debug/contract.py:17
    // b = b + a
    dig 1
    dig 3
    +
    bury 6

test_after_if_else@9:
    dig 5
    bury 2
    b test_after_if_else@12
