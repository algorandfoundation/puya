#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 10 TMPL_A_MULT
    bytecblock " " 0x30313233343536373839
    pushint 0 // 0
    dup
    pushbytes ""
    dupn 6
    txn ApplicationID
    !
    txn OnCompletion
    intc_0 // 1
    shl
    +
    switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_NoOp:
    txn NumAppArgs
    !
    return // on error: this contract does not implement the given ABI method for create NoOp

call_NoOp:
    pushbytes 0x53574bff // method "test(uint64,uint64,uint64)uint64"
    txna ApplicationArgs 0
    match test_route@3
    err // this contract does not implement the given ABI method for call NoOp

test_route@3:
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    dup
    cover 2
    bury 4
    txna ApplicationArgs 3
    btoi
    dup
    bury 4
    dig 1
    intc_2 // TMPL_A_MULT
    *
    bury 10
    swap
    uncover 2
    +
    dup
    bury 7
    dup
    uncover 2
    *
    dup
    bury 5
    <
    bz else_body@24
    dig 6
    dig 2
    +
    bury 7

after_if_else@33:
    dig 6
    dig 5
    +
    dig 3
    <
    bz else_body@35
    dig 6
    dup
    dig 3
    callsub some_func
    *
    bury 7

after_if_else@36:
    dig 4
    dup
    callsub itoa
    bury 10
    dig 7
    dup
    uncover 2
    +
    dup
    bury 5
    dup
    callsub itoa
    bury 10
    dig 1
    >
    swap
    bury 7
    bz after_if_else@38
    dig 6
    dig 3
    +
    bury 6

after_if_else@38:
    dig 5
    dup
    bury 8
    dup
    dig 6
    <
    swap
    bury 7
    bz after_if_else@40
    dig 6
    dig 5
    +
    bury 6

after_if_else@40:
    dig 5
    dup
    bury 8
    dig 5
    dig 4
    +
    dig 1
    >
    swap
    bury 7
    bz after_if_else@42
    dig 6
    dig 1
    *
    bury 6

after_if_else@42:
    dig 5
    dup
    callsub itoa
    bytec_0 // " "
    concat
    dig 10
    concat
    bytec_0 // " "
    concat
    dig 9
    concat
    log
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

else_body@35:
    dig 4
    dup
    dig 2
    callsub some_func
    *
    bury 5
    b after_if_else@36

else_body@24:
    dig 6
    dig 3
    <
    bz else_body@26
    dig 6
    dig 1
    +
    bury 7
    b after_if_else@33

else_body@26:
    dig 4
    dig 7
    <
    bz else_body@28
    dig 6
    pushint 3 // 3
    *
    bury 7
    b after_if_else@33

else_body@28:
    dig 4
    dup
    dig 8
    >
    swap
    bury 5
    bz after_if_else@30
    dig 4
    dig 7
    +
    bury 4

after_if_else@30:
    dig 3
    bury 5
    b after_if_else@33


// test_cases.debug.contract.some_func(a: uint64, b: uint64) -> uint64:
some_func:
    proto 2 1
    frame_dig -2
    frame_dig -1
    +
    frame_bury -2
    frame_dig -1
    frame_dig -2
    *
    frame_bury -1
    frame_dig -2
    frame_dig -1
    +
    dup
    frame_bury -2
    pushint 2 // 2
    *
    dup
    frame_bury -2
    frame_dig -1
    +
    frame_dig -2
    frame_dig -1
    *
    dup2
    <
    swap
    cover 2
    select
    retsub


// test_cases.debug.contract.itoa(i: uint64) -> bytes:
itoa:
    proto 1 1
    frame_dig -1
    intc_1 // 10
    <
    bz itoa_after_if_else@2
    bytec_1 // 0x30313233343536373839
    frame_dig -1
    intc_0 // 1
    extract3
    retsub

itoa_after_if_else@2:
    frame_dig -1
    intc_1 // 10
    /
    callsub itoa
    frame_dig -1
    intc_1 // 10
    %
    bytec_1 // 0x30313233343536373839
    swap
    intc_0 // 1
    extract3
    concat
    retsub
