debug: PuyaOptions(paths=['tuple_support.py'], output_teal=True, output_arc32=True, output_awst=False, output_ssa_ir=True, output_optimization_ir=True, output_cssa_ir=True, output_post_ssa_ir=True, output_parallel_copies_ir=True, output_final_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>)
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L18
debug: Terminated block@0: // L18
debug: Sealing block@0: // L37
debug: Terminated block@0: // L37
debug: Sealing block@0: // L55
debug: Terminated block@0: // L55
debug: Sealing block@0: // L82
debug: Terminated block@0: // L82
debug: Sealing block@None: // if_body_L101
debug: Sealing block@None: // else_body_L101
debug: Terminated block@1: // if_body_L101
debug: Sealing block@2: // after_if_else_L101
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L101
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L82
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L101
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L82
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L101
debug: Sealing block@None: // ternary_true_L105
debug: Sealing block@None: // ternary_false_L105
debug: Terminated block@3: // ternary_true_L105
debug: Terminated block@4: // ternary_false_L105
debug: Sealing block@5: // ternary_merge_L105
debug: Created Phi assignment: let ternary_result%9#2: uint64 = undefined while trying to resolve 'ternary_result%9' in block@5: // ternary_merge_L105
debug: Added ternary_result%9#0 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3) in block@3: // ternary_true_L105
debug: Added ternary_result%9#1 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3, ternary_result%9#1 <- block@4) in block@4: // ternary_false_L105
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L101
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L82
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L105
debug: Sealing block@6: // for_preamble_L105
debug: Terminated block@6: // for_preamble_L105
debug: Looking for 'range_item%11' in an unsealed block creating an incomplete Phi: block@7: // for_header_L105
debug: Created Phi assignment: let range_item%11#1: uint64 = undefined while trying to resolve 'range_item%11' in block@7: // for_header_L105
debug: Terminated block@7: // for_header_L105
debug: Looking for 'range_item%11' in an unsealed block creating an incomplete Phi: block@8: // for_body_L105
debug: Created Phi assignment: let range_item%11#2: uint64 = undefined while trying to resolve 'range_item%11' in block@8: // for_body_L105
debug: Looking for 'source' in an unsealed block creating an incomplete Phi: block@8: // for_body_L105
debug: Created Phi assignment: let source#3: bytes = undefined while trying to resolve 'source' in block@8: // for_body_L105
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@8: // for_body_L105
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@8: // for_body_L105
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@8: // for_body_L105
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@8: // for_body_L105
debug: Terminated block@8: // for_body_L105
debug: Sealing block@9: // for_footer_L105
debug: Terminated block@9: // for_footer_L105
debug: Sealing block@10: // for_increment_L105
debug: Terminated block@10: // for_increment_L105
debug: Sealing block@7: // for_header_L105
debug: Added range_item%11#0 to Phi node: let range_item%11#1: uint64 = φ(range_item%11#0 <- block@6) in block@6: // for_preamble_L105
debug: Added range_item%11#3 to Phi node: let range_item%11#1: uint64 = φ(range_item%11#0 <- block@6, range_item%11#3 <- block@10) in block@10: // for_increment_L105
debug: Sealing block@8: // for_body_L105
debug: Added range_item%11#1 to Phi node: let range_item%11#2: uint64 = φ(range_item%11#1 <- block@7) in block@7: // for_header_L105
debug: Replacing trivial Phi node: let range_item%11#2: uint64 = φ(range_item%11#1 <- block@7) (range_item%11#2) with range_item%11#1
debug: Deleting Phi assignment: let range_item%11#2: uint64 = φ(range_item%11#1 <- block@7)
debug: Replaced trivial Phi node: let range_item%11#2: uint64 = φ(range_item%11#1 <- block@7) (range_item%11#2) with range_item%11#1 in current definition for 2 blocks
debug: Created Phi assignment: let source#5: bytes = undefined while trying to resolve 'source' in block@7: // for_header_L105
debug: Created Phi assignment: let source#6: bytes = undefined while trying to resolve 'source' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let source#7: bytes = undefined while trying to resolve 'source' in block@2: // after_if_else_L101
debug: Added source#1 to Phi node: let source#7: bytes = φ(source#1 <- block@0) in block@0: // L82
debug: Added source#2 to Phi node: let source#7: bytes = φ(source#1 <- block@0, source#2 <- block@1) in block@1: // if_body_L101
debug: Added source#7 to Phi node: let source#6: bytes = φ(source#7 <- block@3) in block@3: // ternary_true_L105
debug: Added source#7 to Phi node: let source#6: bytes = φ(source#7 <- block@3, source#7 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let source#6: bytes = φ(source#7 <- block@3, source#7 <- block@4) (source#6) with source#7
debug: Deleting Phi assignment: let source#6: bytes = φ(source#7 <- block@3, source#7 <- block@4)
debug: Replaced trivial Phi node: let source#6: bytes = φ(source#7 <- block@3, source#7 <- block@4) (source#6) with source#7 in current definition for 1 blocks
debug: Added source#7 to Phi node: let source#5: bytes = φ(source#7 <- block@6) in block@6: // for_preamble_L105
debug: Added source#4 to Phi node: let source#5: bytes = φ(source#7 <- block@6, source#4 <- block@10) in block@10: // for_increment_L105
debug: Added source#5 to Phi node: let source#3: bytes = φ(source#5 <- block@7) in block@7: // for_header_L105
debug: Replacing trivial Phi node: let source#3: bytes = φ(source#5 <- block@7) (source#3) with source#5
debug: Deleting Phi assignment: let source#3: bytes = φ(source#5 <- block@7)
debug: Replaced trivial Phi node: let source#3: bytes = φ(source#5 <- block@7) (source#3) with source#5 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_header_L105
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L105
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L105
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@6) in block@6: // for_preamble_L105
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@6, write_offset#2 <- block@10) in block@10: // for_increment_L105
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@7) in block@7: // for_header_L105
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@7) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@7)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@7) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_header_L105
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L101
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L82
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6) in block@6: // for_preamble_L105
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6, new_items_bytes#1 <- block@10) in block@10: // for_increment_L105
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@7) in block@7: // for_header_L105
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@7) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@7)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6, new_items_bytes#2 <- block@10) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6, new_items_bytes#2 <- block@10)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@7) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6, new_items_bytes#2 <- block@10) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L105
debug: Created Phi assignment: let source#8: bytes = undefined while trying to resolve 'source' in block@11: // after_for_L105
debug: Added source#7 to Phi node: let source#8: bytes = φ(source#7 <- block@5) in block@5: // ternary_merge_L105
debug: Added source#5 to Phi node: let source#8: bytes = φ(source#7 <- block@5, source#5 <- block@7) in block@7: // for_header_L105
debug: Terminated block@11: // after_for_L105
debug: Sealing block@0: // L113
debug: Terminated block@0: // L113
debug: Sealing block@0: // L134
debug: Terminated block@0: // L134
debug: Sealing block@0: // L161
debug: Terminated block@0: // L161
debug: Sealing block@0: // L190
debug: Terminated block@0: // L190
debug: Sealing block@0: // L209
debug: Terminated block@0: // L209
debug: Sealing block@0: // L227
debug: Terminated block@0: // L227
debug: Sealing block@None: // if_body_L241
debug: Sealing block@None: // else_body_L241
debug: Terminated block@1: // if_body_L241
debug: Terminated block@2: // else_body_L241
debug: Sealing block@3: // after_if_else_L241
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L241
debug: Sealing block@4: // for_preamble_L246
debug: Terminated block@4: // for_preamble_L246
debug: Looking for 'range_item%2' in an unsealed block creating an incomplete Phi: block@5: // for_header_L246
debug: Created Phi assignment: let range_item%2#1: uint64 = undefined while trying to resolve 'range_item%2' in block@5: // for_header_L246
debug: Terminated block@5: // for_header_L246
debug: Looking for 'range_item%2' in an unsealed block creating an incomplete Phi: block@6: // for_body_L246
debug: Created Phi assignment: let range_item%2#2: uint64 = undefined while trying to resolve 'range_item%2' in block@6: // for_body_L246
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@6: // for_body_L246
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@6: // for_body_L246
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@6: // for_body_L246
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@6: // for_body_L246
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@6: // for_body_L246
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@6: // for_body_L246
debug: Terminated block@6: // for_body_L246
debug: Sealing block@7: // for_footer_L246
debug: Terminated block@7: // for_footer_L246
debug: Sealing block@8: // for_increment_L246
debug: Terminated block@8: // for_increment_L246
debug: Sealing block@5: // for_header_L246
debug: Added range_item%2#0 to Phi node: let range_item%2#1: uint64 = φ(range_item%2#0 <- block@4) in block@4: // for_preamble_L246
debug: Added range_item%2#3 to Phi node: let range_item%2#1: uint64 = φ(range_item%2#0 <- block@4, range_item%2#3 <- block@8) in block@8: // for_increment_L246
debug: Sealing block@6: // for_body_L246
debug: Added range_item%2#1 to Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@5) in block@5: // for_header_L246
debug: Replacing trivial Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@5) (range_item%2#2) with range_item%2#1
debug: Deleting Phi assignment: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@5)
debug: Replaced trivial Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@5) (range_item%2#2) with range_item%2#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_header_L246
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L241
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L241
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@4) in block@4: // for_preamble_L246
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@4, tail_cursor#3 <- block@8) in block@8: // for_increment_L246
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@5) in block@5: // for_header_L246
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@5) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@5)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@5) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@5: // for_header_L246
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L241
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L241
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@4) in block@4: // for_preamble_L246
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@4, array_data#2 <- block@8) in block@8: // for_increment_L246
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@5) in block@5: // for_header_L246
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@5) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@5)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@5) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_header_L246
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@4) in block@4: // for_preamble_L246
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@4, header_cursor#2 <- block@8) in block@8: // for_increment_L246
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@5) in block@5: // for_header_L246
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@5) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@5)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@5) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L246
debug: Created Phi assignment: let array_data#5: bytes = undefined while trying to resolve 'array_data' in block@9: // after_for_L246
debug: Added array_data#0 to Phi node: let array_data#5: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L241
debug: Added array_data#3 to Phi node: let array_data#5: bytes = φ(array_data#0 <- block@3, array_data#3 <- block@5) in block@5: // for_header_L246
debug: Terminated block@9: // after_for_L246
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L76
debug: Terminated block@0: // L76
debug: Sealing block@1: // for_header_0_L78
debug: Terminated block@1: // for_header_0_L78
debug: Terminated block@2: // for_header_1_L78
debug: Terminated block@3: // for_header_2_L78
debug: Sealing block@None: // for_body_L78
debug: Created Phi assignment: let total#1: uint64 = undefined while trying to resolve 'total' in block@4: // for_body_L78
debug: Added total#0 to Phi node: let total#1: uint64 = φ(total#0 <- block@1) in block@1: // for_header_0_L78
debug: Looking for 'total' in an unsealed block creating an incomplete Phi: block@2: // for_header_1_L78
debug: Created Phi assignment: let total#2: uint64 = undefined while trying to resolve 'total' in block@2: // for_header_1_L78
debug: Added total#2 to Phi node: let total#1: uint64 = φ(total#0 <- block@1, total#2 <- block@2) in block@2: // for_header_1_L78
debug: Looking for 'total' in an unsealed block creating an incomplete Phi: block@3: // for_header_2_L78
debug: Created Phi assignment: let total#3: uint64 = undefined while trying to resolve 'total' in block@3: // for_header_2_L78
debug: Added total#3 to Phi node: let total#1: uint64 = φ(total#0 <- block@1, total#2 <- block@2, total#3 <- block@3) in block@3: // for_header_2_L78
debug: Created Phi assignment: let value#3: uint64 = undefined while trying to resolve 'value' in block@4: // for_body_L78
debug: Added value#0 to Phi node: let value#3: uint64 = φ(value#0 <- block@1) in block@1: // for_header_0_L78
debug: Added value#1 to Phi node: let value#3: uint64 = φ(value#0 <- block@1, value#1 <- block@2) in block@2: // for_header_1_L78
debug: Added value#2 to Phi node: let value#3: uint64 = φ(value#0 <- block@1, value#1 <- block@2, value#2 <- block@3) in block@3: // for_header_2_L78
debug: Terminated block@4: // for_body_L78
debug: Sealing block@5: // for_footer_L78
debug: Created Phi assignment: let tuple_index%0#1: uint64 = undefined while trying to resolve 'tuple_index%0' in block@4: // for_body_L78
debug: Added tuple_index%0#0 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@1) in block@1: // for_header_0_L78
debug: Looking for 'tuple_index%0' in an unsealed block creating an incomplete Phi: block@2: // for_header_1_L78
debug: Created Phi assignment: let tuple_index%0#2: uint64 = undefined while trying to resolve 'tuple_index%0' in block@2: // for_header_1_L78
debug: Added tuple_index%0#2 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@1, tuple_index%0#2 <- block@2) in block@2: // for_header_1_L78
debug: Looking for 'tuple_index%0' in an unsealed block creating an incomplete Phi: block@3: // for_header_2_L78
debug: Created Phi assignment: let tuple_index%0#3: uint64 = undefined while trying to resolve 'tuple_index%0' in block@3: // for_header_2_L78
debug: Added tuple_index%0#3 to Phi node: let tuple_index%0#1: uint64 = φ(tuple_index%0#0 <- block@1, tuple_index%0#2 <- block@2, tuple_index%0#3 <- block@3) in block@3: // for_header_2_L78
debug: Terminated block@5: // for_footer_L78
debug: Sealing block@2: // for_header_1_L78
debug: Added total#4 to Phi node: let total#2: uint64 = φ(total#4 <- block@5) in block@5: // for_footer_L78
debug: Replacing trivial Phi node: let total#2: uint64 = φ(total#4 <- block@5) (total#2) with total#4
debug: Deleting Phi assignment: let total#2: uint64 = φ(total#4 <- block@5)
debug: Replaced trivial Phi node: let total#2: uint64 = φ(total#4 <- block@5) (total#2) with total#4 in current definition for 1 blocks
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@5) in block@5: // for_footer_L78
debug: Replacing trivial Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@5) (tuple_index%0#2) with tuple_index%0#4
debug: Deleting Phi assignment: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@5)
debug: Replaced trivial Phi node: let tuple_index%0#2: uint64 = φ(tuple_index%0#4 <- block@5) (tuple_index%0#2) with tuple_index%0#4 in current definition for 1 blocks
debug: Sealing block@3: // for_header_2_L78
debug: Added total#4 to Phi node: let total#3: uint64 = φ(total#4 <- block@5) in block@5: // for_footer_L78
debug: Replacing trivial Phi node: let total#3: uint64 = φ(total#4 <- block@5) (total#3) with total#4
debug: Deleting Phi assignment: let total#3: uint64 = φ(total#4 <- block@5)
debug: Replaced trivial Phi node: let total#3: uint64 = φ(total#4 <- block@5) (total#3) with total#4 in current definition for 1 blocks
debug: Added tuple_index%0#4 to Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@5) in block@5: // for_footer_L78
debug: Replacing trivial Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@5) (tuple_index%0#3) with tuple_index%0#4
debug: Deleting Phi assignment: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@5)
debug: Replaced trivial Phi node: let tuple_index%0#3: uint64 = φ(tuple_index%0#4 <- block@5) (tuple_index%0#3) with tuple_index%0#4 in current definition for 1 blocks
debug: Sealing block@None: // after_for_L78
debug: Terminated block@6: // after_for_L78
debug: Sealing block@0: // L60
debug: Terminated block@0: // L60
debug: Sealing block@0: // L87
debug: Terminated block@0: // L87
debug: Sealing block@0: // L67
debug: Terminated block@0: // L67
debug: Sealing block@1: // for_preamble_L70
debug: Terminated block@1: // for_preamble_L70
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@2: // for_header_L70
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@2: // for_header_L70
debug: Terminated block@2: // for_header_L70
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@3: // for_body_L70
debug: Created Phi assignment: let range_item%1#2: uint64 = undefined while trying to resolve 'range_item%1' in block@3: // for_body_L70
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3: // for_body_L70
debug: Created Phi assignment: let result#1: bytes = undefined while trying to resolve 'result' in block@3: // for_body_L70
debug: Looking for 'b' in an unsealed block creating an incomplete Phi: block@3: // for_body_L70
debug: Created Phi assignment: let b#1: bytes = undefined while trying to resolve 'b' in block@3: // for_body_L70
debug: Terminated block@3: // for_body_L70
debug: Sealing block@4: // for_footer_L70
debug: Terminated block@4: // for_footer_L70
debug: Sealing block@5: // for_increment_L70
debug: Terminated block@5: // for_increment_L70
debug: Sealing block@2: // for_header_L70
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@1) in block@1: // for_preamble_L70
debug: Added range_item%1#3 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@1, range_item%1#3 <- block@5) in block@5: // for_increment_L70
debug: Sealing block@3: // for_body_L70
debug: Added range_item%1#1 to Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@2) in block@2: // for_header_L70
debug: Replacing trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@2) (range_item%1#2) with range_item%1#1
debug: Deleting Phi assignment: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@2)
debug: Replaced trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@2) (range_item%1#2) with range_item%1#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#3: bytes = undefined while trying to resolve 'result' in block@2: // for_header_L70
debug: Added result#0 to Phi node: let result#3: bytes = φ(result#0 <- block@1) in block@1: // for_preamble_L70
debug: Added result#2 to Phi node: let result#3: bytes = φ(result#0 <- block@1, result#2 <- block@5) in block@5: // for_increment_L70
debug: Added result#3 to Phi node: let result#1: bytes = φ(result#3 <- block@2) in block@2: // for_header_L70
debug: Replacing trivial Phi node: let result#1: bytes = φ(result#3 <- block@2) (result#1) with result#3
debug: Deleting Phi assignment: let result#1: bytes = φ(result#3 <- block@2)
debug: Replaced trivial Phi node: let result#1: bytes = φ(result#3 <- block@2) (result#1) with result#3 in current definition for 0 blocks
debug: Created Phi assignment: let b#2: bytes = undefined while trying to resolve 'b' in block@2: // for_header_L70
debug: Added b#0 to Phi node: let b#2: bytes = φ(b#0 <- block@1) in block@1: // for_preamble_L70
debug: Added b#1 to Phi node: let b#2: bytes = φ(b#0 <- block@1, b#1 <- block@5) in block@5: // for_increment_L70
debug: Added b#2 to Phi node: let b#1: bytes = φ(b#2 <- block@2) in block@2: // for_header_L70
debug: Replacing trivial Phi node: let b#1: bytes = φ(b#2 <- block@2) (b#1) with b#2
debug: Deleting Phi assignment: let b#1: bytes = φ(b#2 <- block@2)
debug: Replacing trivial Phi node: let b#2: bytes = φ(b#0 <- block@1, b#2 <- block@5) (b#2) with b#0
debug: Deleting Phi assignment: let b#2: bytes = φ(b#0 <- block@1, b#2 <- block@5)
debug: Replaced trivial Phi node: let b#1: bytes = φ(b#2 <- block@2) (b#1) with b#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let b#2: bytes = φ(b#0 <- block@1, b#2 <- block@5) (b#2) with b#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L70
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // after_for_L70
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0: // L67
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#3 <- block@2) in block@2: // for_header_L70
debug: Terminated block@6: // after_for_L70
debug: Sealing block@0: // L99
debug: Terminated block@0: // L99
debug: Sealing block@0: // L108
debug: Terminated block@0: // L108
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L8
debug: Terminated block@0: // L8
debug: Sealing block@None: // on_create_L5
debug: Terminated block@1: // on_create_L5
debug: Sealing block@2: // entrypoint_L5
debug: Terminated block@2: // entrypoint_L5
debug: Sealing block@None: // if_body_L22
debug: Sealing block@None: // else_body_L22
debug: Terminated block@3: // if_body_L22
debug: Terminated block@4: // else_body_L22
debug: Sealing block@5: // after_if_else_L22
debug: Created Phi assignment: let a2#1: uint64 = undefined while trying to resolve 'a2' in block@5: // after_if_else_L22
debug: Added a2#0 to Phi node: let a2#1: uint64 = φ(a2#0 <- block@3) in block@3: // if_body_L22
debug: Added a2#0 to Phi node: let a2#1: uint64 = φ(a2#0 <- block@3, a2#0 <- block@4) in block@4: // else_body_L22
debug: Replacing trivial Phi node: let a2#1: uint64 = φ(a2#0 <- block@3, a2#0 <- block@4) (a2#1) with a2#0
debug: Deleting Phi assignment: let a2#1: uint64 = φ(a2#0 <- block@3, a2#0 <- block@4)
debug: Replaced trivial Phi node: let a2#1: uint64 = φ(a2#0 <- block@3, a2#0 <- block@4) (a2#1) with a2#0 in current definition for 1 blocks
debug: Created Phi assignment: let a#1: uint64 = undefined while trying to resolve 'a' in block@5: // after_if_else_L22
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@3) in block@3: // if_body_L22
debug: Added a#0 to Phi node: let a#1: uint64 = φ(a#0 <- block@3, a#0 <- block@4) in block@4: // else_body_L22
debug: Replacing trivial Phi node: let a#1: uint64 = φ(a#0 <- block@3, a#0 <- block@4) (a#1) with a#0
debug: Deleting Phi assignment: let a#1: uint64 = φ(a#0 <- block@3, a#0 <- block@4)
debug: Replaced trivial Phi node: let a#1: uint64 = φ(a#0 <- block@3, a#0 <- block@4) (a#1) with a#0 in current definition for 1 blocks
debug: Created Phi assignment: let b2#1: uint64 = undefined while trying to resolve 'b2' in block@5: // after_if_else_L22
debug: Added b2#0 to Phi node: let b2#1: uint64 = φ(b2#0 <- block@3) in block@3: // if_body_L22
debug: Added b2#0 to Phi node: let b2#1: uint64 = φ(b2#0 <- block@3, b2#0 <- block@4) in block@4: // else_body_L22
debug: Replacing trivial Phi node: let b2#1: uint64 = φ(b2#0 <- block@3, b2#0 <- block@4) (b2#1) with b2#0
debug: Deleting Phi assignment: let b2#1: uint64 = φ(b2#0 <- block@3, b2#0 <- block@4)
debug: Replaced trivial Phi node: let b2#1: uint64 = φ(b2#0 <- block@3, b2#0 <- block@4) (b2#1) with b2#0 in current definition for 1 blocks
debug: Created Phi assignment: let b#1: uint64 = undefined while trying to resolve 'b' in block@5: // after_if_else_L22
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@3) in block@3: // if_body_L22
debug: Added b#0 to Phi node: let b#1: uint64 = φ(b#0 <- block@3, b#0 <- block@4) in block@4: // else_body_L22
debug: Replacing trivial Phi node: let b#1: uint64 = φ(b#0 <- block@3, b#0 <- block@4) (b#1) with b#0
debug: Deleting Phi assignment: let b#1: uint64 = φ(b#0 <- block@3, b#0 <- block@4)
debug: Replaced trivial Phi node: let b#1: uint64 = φ(b#0 <- block@3, b#0 <- block@4) (b#1) with b#0 in current definition for 1 blocks
debug: Created Phi assignment: let cd.0#1: uint64 = undefined while trying to resolve 'cd.0' in block@5: // after_if_else_L22
debug: Added cd.0#0 to Phi node: let cd.0#1: uint64 = φ(cd.0#0 <- block@3) in block@3: // if_body_L22
debug: Added cd.0#0 to Phi node: let cd.0#1: uint64 = φ(cd.0#0 <- block@3, cd.0#0 <- block@4) in block@4: // else_body_L22
debug: Replacing trivial Phi node: let cd.0#1: uint64 = φ(cd.0#0 <- block@3, cd.0#0 <- block@4) (cd.0#1) with cd.0#0
debug: Deleting Phi assignment: let cd.0#1: uint64 = φ(cd.0#0 <- block@3, cd.0#0 <- block@4)
debug: Replaced trivial Phi node: let cd.0#1: uint64 = φ(cd.0#0 <- block@3, cd.0#0 <- block@4) (cd.0#1) with cd.0#0 in current definition for 1 blocks
debug: Created Phi assignment: let cd.1#1: uint64 = undefined while trying to resolve 'cd.1' in block@5: // after_if_else_L22
debug: Added cd.1#0 to Phi node: let cd.1#1: uint64 = φ(cd.1#0 <- block@3) in block@3: // if_body_L22
debug: Added cd.1#0 to Phi node: let cd.1#1: uint64 = φ(cd.1#0 <- block@3, cd.1#0 <- block@4) in block@4: // else_body_L22
debug: Replacing trivial Phi node: let cd.1#1: uint64 = φ(cd.1#0 <- block@3, cd.1#0 <- block@4) (cd.1#1) with cd.1#0
debug: Deleting Phi assignment: let cd.1#1: uint64 = φ(cd.1#0 <- block@3, cd.1#0 <- block@4)
debug: Replaced trivial Phi node: let cd.1#1: uint64 = φ(cd.1#0 <- block@3, cd.1#0 <- block@4) (cd.1#1) with cd.1#0 in current definition for 1 blocks
debug: Created Phi assignment: let tup.0#2: uint64 = undefined while trying to resolve 'tup.0' in block@5: // after_if_else_L22
debug: Added tup.0#0 to Phi node: let tup.0#2: uint64 = φ(tup.0#0 <- block@3) in block@3: // if_body_L22
debug: Added tup.0#1 to Phi node: let tup.0#2: uint64 = φ(tup.0#0 <- block@3, tup.0#1 <- block@4) in block@4: // else_body_L22
debug: Created Phi assignment: let tup.1#2: uint64 = undefined while trying to resolve 'tup.1' in block@5: // after_if_else_L22
debug: Added tup.1#0 to Phi node: let tup.1#2: uint64 = φ(tup.1#0 <- block@3) in block@3: // if_body_L22
debug: Added tup.1#1 to Phi node: let tup.1#2: uint64 = φ(tup.1#0 <- block@3, tup.1#1 <- block@4) in block@4: // else_body_L22
debug: Terminated block@5: // after_if_else_L22
debug: Sealing block@0: // L55
debug: Terminated block@0: // L55
debug: Output IR to out/tuple_support_TupleSupport.ssa.ir
info: Optimizing test_cases.tuple_support.TupleSupport at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: tuple_assignment%2#0, did_overflow#0
debug: Replacing {tuple_assignment%2#0} with did_overflow#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%16#0, hi#0
debug: Replacing {tuple_assignment%16#0} with hi#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%17#0, mid#0
debug: Replacing {tuple_assignment%17#0} with mid#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%18#0, lo#0
debug: Replacing {tuple_assignment%18#0} with lo#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable ab.0#0
debug: Removing unused variable ab.1#0
debug: Removing unused variable d#0
debug: Removing unused variable c#0
debug: Removing unused variable a2#0
debug: Removing unused variable b2#0
debug: Removing unused variable cd.0#0
debug: Removing unused variable cd.1#0
debug: Removing unused variable ab2.0#0
debug: Removing unused variable ab2.1#0
debug: Removing unused variable max_uint64#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.add_three_values
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: values.0#0, value#0
debug: Replacing {value#0} with values.0#0 made 1 modifications
debug: Found equivalence set: values.1#0, value#1
debug: Replacing {value#1} with values.1#0 made 1 modifications
debug: Found equivalence set: values.2#0, value#2
debug: Replacing {value#2} with values.2#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1: // for_header_0_L78 with block@0: // L76 in block@4: // for_body_L78
debug: Merged linear block@1: // for_header_0_L78 into block@0: // L76
debug: Replaced predecessor block@5: // for_footer_L78 with block@4: // for_body_L78 in block@2: // for_header_1_L78
debug: Replaced predecessor block@5: // for_footer_L78 with block@4: // for_body_L78 in block@3: // for_header_2_L78
debug: Replaced predecessor block@5: // for_footer_L78 with block@4: // for_body_L78 in block@6: // after_for_L78
debug: Merged linear block@5: // for_footer_L78 into block@4: // for_body_L78
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // for_header_1_L78 because it's used by phi nodes
debug: Not removing empty block block@3: // for_header_2_L78 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.bytes_combine
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: arg.0#0, a#0
debug: Replacing {a#0} with arg.0#0 made 1 modifications
debug: Found equivalence set: arg.1#0, b#0
debug: Replacing {b#0} with arg.1#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.addw2
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: a.0#0, a_hi#0
debug: Replacing {a_hi#0} with a.0#0 made 1 modifications
debug: Found equivalence set: a.1#0, a_lo#0
debug: Replacing {a_lo#0} with a.1#0 made 1 modifications
debug: Found equivalence set: b.0#0, b_hi#0
debug: Replacing {b_hi#0} with b.0#0 made 1 modifications
debug: Found equivalence set: b.1#0, b_lo#0
debug: Replacing {b_lo#0} with b.1#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%0#0, lo_carry#0
debug: Replacing {tuple_assignment%0#0} with lo_carry#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%1#0, c_lo#0
debug: Replacing {tuple_assignment%1#0} with c_lo#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%2#0, hi_carry1#0
debug: Replacing {tuple_assignment%2#0} with hi_carry1#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%3#0, c_mid#0
debug: Replacing {tuple_assignment%3#0} with c_mid#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%4#0, hi_carry2#0
debug: Replacing {tuple_assignment%4#0} with hi_carry2#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%5#0, c_mid#1
debug: Replacing {tuple_assignment%5#0} with c_mid#1 made 1 modifications
debug: Found equivalence set: tuple_assignment%6#0, did_overflow#0
debug: Replacing {tuple_assignment%6#0} with did_overflow#0 made 1 modifications
debug: Found equivalence set: tuple_assignment%7#0, c_hi#0
debug: Replacing {tuple_assignment%7#0} with c_hi#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.bytes_multiply
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: arg.0#0, b#0
debug: Replacing {b#0} with arg.0#0 made 1 modifications
debug: Found equivalence set: arg.1#0, count#0
debug: Replacing {count#0} with arg.1#0 made 2 modifications
debug: Found equivalence set: range_item%1#1, _i#0
debug: Replacing {range_item%1#1} with _i#0 made 3 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@4: // for_footer_L70 with block@3: // for_body_L70 in block@5: // for_increment_L70
debug: Merged linear block@4: // for_footer_L70 into block@3: // for_body_L70
debug: Replaced predecessor block@5: // for_increment_L70 with block@3: // for_body_L70 in block@2: // for_header_L70
debug: Merged linear block@5: // for_increment_L70 into block@3: // for_body_L70
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.test_tuple_swap
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: b#0, a#1
debug: Replacing {a#1} with b#0 made 1 modifications
debug: Found equivalence set: a#0, b#1
debug: Replacing {b#1} with a#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.slicing
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Folded None == None to 1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: values.0#0, one_to_three.0#0
debug: Replacing {one_to_three.0#0} with values.0#0 made 1 modifications
debug: Found equivalence set: values.1#0, one_to_three.1#0
debug: Replacing {one_to_three.1#0} with values.1#0 made 1 modifications
debug: Found equivalence set: values.2#0, one_to_three.2#0
debug: Replacing {one_to_three.2#0} with values.2#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%4#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.__init__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to out/tuple_support_TupleSupport.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded 1 == 2 to 0
debug: Folded 1 == 1 to 1
debug: Folded 2 == 2 to 1
debug: Folded 1 + 2 to 3
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%23#0
debug: Optimizer: Simplify Control Ops
debug: ConditionalBranch goto 0u ? block@3 : block@4 simplified to goto block@4
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@4: // else_body_L22 with block@2: // entrypoint_L5 in block@5: // after_if_else_L22
debug: Merged linear block@4: // else_body_L22 into block@2: // entrypoint_L5
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@3: // if_body_L22
debug: Removed unreachable predecessors from block@5: // after_if_else_L22
debug: Removing unreachable phi arguments: tup.0#0 <- block@3
debug: Replacing trivial Phi node: let tup.0#2: uint64 = φ(tup.0#1 <- block@2) (tup.0#2) with tup.0#1
debug: Deleting Phi assignment: let tup.0#2: uint64 = φ(tup.0#1 <- block@2)
debug: Removing unreachable phi arguments: tup.1#0 <- block@3
debug: Replacing trivial Phi node: let tup.1#2: uint64 = φ(tup.1#1 <- block@2) (tup.1#2) with tup.1#1
debug: Deleting Phi assignment: let tup.1#2: uint64 = φ(tup.1#1 <- block@2)
debug: Optimizing subroutine test_cases.tuple_support.add_three_values
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // for_header_1_L78 because it's used by phi nodes
debug: Not removing empty block block@3: // for_header_2_L78 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.bytes_combine
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.addw2
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.bytes_multiply
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.test_tuple_swap
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.slicing
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.__init__
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to out/tuple_support_TupleSupport.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tup.0#1
debug: Removing unused variable tup.1#1
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Merged linear block@5: // after_if_else_L22 into block@2: // entrypoint_L5
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.add_three_values
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // for_header_1_L78 because it's used by phi nodes
debug: Not removing empty block block@3: // for_header_2_L78 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.bytes_combine
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.addw2
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.bytes_multiply
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.test_tuple_swap
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.slicing
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.__init__
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to out/tuple_support_TupleSupport.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded 3 == 3 to 1
debug: Folded 3 == 3 to 1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%9#0
debug: Removing unused variable tmp%10#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.add_three_values
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // for_header_1_L78 because it's used by phi nodes
debug: Not removing empty block block@3: // for_header_2_L78 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.bytes_combine
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.addw2
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.bytes_multiply
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.test_tuple_swap
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.slicing
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.__init__
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to out/tuple_support_TupleSupport.ssa.opt_pass_4.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.add_three_values
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // for_header_1_L78 because it's used by phi nodes
debug: Not removing empty block block@3: // for_header_2_L78 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.bytes_combine
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.addw2
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.bytes_multiply
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.test_tuple_swap
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.slicing
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.__init__
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.tuple_support.TupleSupport.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 5, ending loop
debug: Output IR to out/tuple_support_TupleSupport.cssa.ir
debug: Removing Phis from test_cases.tuple_support.TupleSupport.approval_program
debug: Removing Phis from test_cases.tuple_support.add_three_values
debug: Removing Phis from test_cases.tuple_support.bytes_combine
debug: Removing Phis from test_cases.tuple_support.addw2
debug: Removing Phis from test_cases.tuple_support.bytes_multiply
debug: Removing Phis from test_cases.tuple_support.test_tuple_swap
debug: Removing Phis from test_cases.tuple_support.slicing
debug: Removing Phis from test_cases.tuple_support.TupleSupport.__init__
debug: Removing Phis from test_cases.tuple_support.TupleSupport.clear_state_program
debug: Output IR to out/tuple_support_TupleSupport.post_ssa.ir
debug: Sequentializing parallel copies in test_cases.tuple_support.TupleSupport.approval_program
debug: Sequentializing parallel copies in test_cases.tuple_support.add_three_values
debug: loc: {tuple_index%0#8=None, value#4=None, total#8=None, tuple_index%0#0=tuple_index%0#0, values.0#0=values.0#0, total#0=total#0}
debug: pred: {tuple_index%0#8=tuple_index%0#0, value#4=values.0#0, total#8=total#0}
debug: ready: tuple_index%0#8, value#4, total#8
debug: to_do: tuple_index%0#8, value#4, total#8
debug: * avail total#8
debug: * avail total#0
debug: * avail value#4
debug: * avail values.0#0
debug: * avail tuple_index%0#8
debug: * avail tuple_index%0#0
debug: * to_do total#8
debug: * to_do value#4
debug: * to_do tuple_index%0#8
debug: loc: {tuple_index%0#8=None, value#4=None, total#8=None, tuple_index%0#4=tuple_index%0#4, values.1#0=values.1#0, total#4=total#4}
debug: pred: {tuple_index%0#8=tuple_index%0#4, value#4=values.1#0, total#8=total#4}
debug: ready: tuple_index%0#8, value#4, total#8
debug: to_do: tuple_index%0#8, value#4, total#8
debug: * avail total#8
debug: * avail total#4
debug: * avail value#4
debug: * avail values.1#0
debug: * avail tuple_index%0#8
debug: * avail tuple_index%0#4
debug: * to_do total#8
debug: * to_do value#4
debug: * to_do tuple_index%0#8
debug: loc: {tuple_index%0#8=None, value#4=None, total#8=None, tuple_index%0#4=tuple_index%0#4, values.2#0=values.2#0, total#4=total#4}
debug: pred: {tuple_index%0#8=tuple_index%0#4, value#4=values.2#0, total#8=total#4}
debug: ready: tuple_index%0#8, value#4, total#8
debug: to_do: tuple_index%0#8, value#4, total#8
debug: * avail total#8
debug: * avail total#4
debug: * avail value#4
debug: * avail values.2#0
debug: * avail tuple_index%0#8
debug: * avail tuple_index%0#4
debug: * to_do total#8
debug: * to_do value#4
debug: * to_do tuple_index%0#8
debug: loc: {tuple_index%0#1=None, value#3=None, total#1=None, tuple_index%0#8=tuple_index%0#8, value#4=value#4, total#8=total#8}
debug: pred: {tuple_index%0#1=tuple_index%0#8, value#3=value#4, total#1=total#8}
debug: ready: tuple_index%0#1, value#3, total#1
debug: to_do: tuple_index%0#1, value#3, total#1
debug: * avail total#1
debug: * avail total#8
debug: * avail value#3
debug: * avail value#4
debug: * avail tuple_index%0#1
debug: * avail tuple_index%0#8
debug: * to_do total#1
debug: * to_do value#3
debug: * to_do tuple_index%0#1
debug: Sequentializing parallel copies in test_cases.tuple_support.bytes_combine
debug: Sequentializing parallel copies in test_cases.tuple_support.addw2
debug: Sequentializing parallel copies in test_cases.tuple_support.bytes_multiply
debug: loc: {result#7=None, _i#1=None, result#0=result#0, range_item%1#0=range_item%1#0}
debug: pred: {result#7=result#0, _i#1=range_item%1#0}
debug: ready: result#7, _i#1
debug: to_do: result#7, _i#1
debug: * avail _i#1
debug: * avail range_item%1#0
debug: * avail result#7
debug: * avail result#0
debug: * to_do _i#1
debug: * to_do result#7
debug: loc: {result#3=None, _i#0=None, result#7=result#7, _i#1=_i#1}
debug: pred: {result#3=result#7, _i#0=_i#1}
debug: ready: result#3, _i#0
debug: to_do: result#3, _i#0
debug: * avail _i#0
debug: * avail _i#1
debug: * avail result#3
debug: * avail result#7
debug: * to_do _i#0
debug: * to_do result#3
debug: loc: {result#7=None, _i#1=None, result#2=result#2, range_item%1#3=range_item%1#3}
debug: pred: {result#7=result#2, _i#1=range_item%1#3}
debug: ready: result#7, _i#1
debug: to_do: result#7, _i#1
debug: * avail _i#1
debug: * avail range_item%1#3
debug: * avail result#7
debug: * avail result#2
debug: * to_do _i#1
debug: * to_do result#7
debug: Sequentializing parallel copies in test_cases.tuple_support.test_tuple_swap
debug: Sequentializing parallel copies in test_cases.tuple_support.slicing
debug: Sequentializing parallel copies in test_cases.tuple_support.TupleSupport.__init__
debug: Sequentializing parallel copies in test_cases.tuple_support.TupleSupport.clear_state_program
debug: Output IR to out/tuple_support_TupleSupport.parallel_copies.ir
debug: Coalescing local variables in test_cases.tuple_support.TupleSupport.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.tuple_support.add_three_values using strategy RootOperandGrouping
debug: Coalescing total#0 with [total#8, total#1, total#4]
debug: Coalescing tuple_index%0#0 with [tuple_index%0#8, tuple_index%0#1]
debug: Coalescing value#3 with [value#4]
debug: Coalescing resulted in 21 replacement/s
debug: Coalescing local variables in test_cases.tuple_support.bytes_combine using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.tuple_support.addw2 using strategy RootOperandGrouping
debug: Coalescing c_mid#0 with [c_mid#1]
debug: Coalescing resulted in 2 replacement/s
debug: Coalescing local variables in test_cases.tuple_support.bytes_multiply using strategy RootOperandGrouping
debug: Coalescing result#0 with [result#7, result#3, result#2, result#4]
debug: Coalescing range_item%1#0 with [range_item%1#3]
debug: Coalescing _i#0 with [_i#1]
debug: Coalescing resulted in 15 replacement/s
debug: Coalescing local variables in test_cases.tuple_support.test_tuple_swap using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.tuple_support.slicing using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.tuple_support.TupleSupport.__init__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.tuple_support.TupleSupport.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to out/tuple_support_TupleSupport.final.ir
debug: Inserted main_block@0.ops[1]: 'store app_id%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load app_id%0#0' with 'load app_id%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[4]: 'store total#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[6]: 'load total#0' with 'load total#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[10]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[22]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[24]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[30]: 'store result.0#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[32]: 'load result.0#0' with 'load result.0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[34]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[36]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[41]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[43]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[62]: 'store hi#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[64]: 'load hi#0' with 'load hi#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[66]: 'store tmp%19#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[68]: 'load tmp%19#0' with 'load tmp%19#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[72]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[74]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[78]: 'store tmp%21#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[80]: 'load tmp%21#0' with 'load tmp%21#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[85]: 'store tmp%22#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[87]: 'load tmp%22#0' with 'load tmp%22#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[15]: 'store tuple_assignment%3#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[19]: 'load tuple_assignment%3#0' with 'load tuple_assignment%3#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[55]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[59]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[17]: 'store did_overflow#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[22]: 'load did_overflow#0' with 'load did_overflow#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[55]: 'store tmp%15#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[62]: 'load tmp%15#0' with 'load tmp%15#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[51]: 'store tmp%12#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[60]: 'load tmp%12#0' with 'load tmp%12#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[66]: 'store mid#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[76]: 'load mid#0' with 'load mid#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[50]: 'store tmp%13#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[62]: 'load tmp%13#0' with 'load tmp%13#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[66]: 'store lo#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[84]: 'load lo#0' with 'load lo#0 from l-stack (no copy)'
debug: Found 1 edge set/s for test_cases.tuple_support.TupleSupport.approval_program
debug: Inserted add_three_values_for_body@4.ops[5]: 'store tuple_index%0#0 to l-stack (copy)'
debug: Replaced add_three_values_for_body@4.ops[9]: 'load tuple_index%0#0' with 'load tuple_index%0#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.tuple_support.add_three_values
debug: Allocated 1 variable/s to x-stack: value#3
debug: shared x-stack for add_three_values_block@0 -> add_three_values_for_body@4: value#3
debug: shared x-stack for add_three_values_for_header_1@2 -> add_three_values_for_body@4: value#3
debug: shared x-stack for add_three_values_for_header_2@3 -> add_three_values_for_body@4: value#3
debug: test_cases.tuple_support.add_three_values f-stack entry: ['tuple_index%0#4']
debug: test_cases.tuple_support.add_three_values f-stack on first store: ['total#0', 'tuple_index%0#0']
debug: Inserted bytes_combine_block@0.ops[3]: 'store result#0 to l-stack (copy)'
debug: Replaced bytes_combine_block@0.ops[5]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted addw2_block@0.ops[19]: 'store did_overflow#0 to l-stack (copy)'
debug: Replaced addw2_block@0.ops[21]: 'load did_overflow#0' with 'load did_overflow#0 from l-stack (no copy)'
debug: Inserted addw2_block@0.ops[23]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced addw2_block@0.ops[25]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted addw2_block@0.ops[8]: 'store c_mid#0 to l-stack (copy)'
debug: Replaced addw2_block@0.ops[11]: 'load c_mid#0' with 'load c_mid#0 from l-stack (no copy)'
debug: Inserted addw2_block@0.ops[15]: 'store hi_carry2#0 to l-stack (copy)'
debug: Replaced addw2_block@0.ops[18]: 'load hi_carry2#0' with 'load hi_carry2#0 from l-stack (no copy)'
debug: Inserted addw2_block@0.ops[10]: 'store hi_carry1#0 to l-stack (copy)'
debug: Replaced addw2_block@0.ops[18]: 'load hi_carry1#0' with 'load hi_carry1#0 from l-stack (no copy)'
debug: Inserted addw2_block@0.ops[4]: 'store lo_carry#0 to l-stack (copy)'
debug: Replaced addw2_block@0.ops[14]: 'load lo_carry#0' with 'load lo_carry#0 from l-stack (no copy)'
debug: Inserted addw2_block@0.ops[22]: 'store c_hi#0 to l-stack (copy)'
debug: Replaced addw2_block@0.ops[32]: 'load c_hi#0' with 'load c_hi#0 from l-stack (no copy)'
debug: Inserted addw2_block@0.ops[16]: 'store c_mid#0 to l-stack (copy)'
debug: Replaced addw2_block@0.ops[34]: 'load c_mid#0' with 'load c_mid#0 from l-stack (no copy)'
debug: Inserted addw2_block@0.ops[3]: 'store c_lo#0 to l-stack (copy)'
debug: Replaced addw2_block@0.ops[36]: 'load c_lo#0' with 'load c_lo#0 from l-stack (no copy)'
debug: Inserted bytes_multiply_block@0.ops[5]: 'store should_loop%0#0 to l-stack (copy)'
debug: Replaced bytes_multiply_block@0.ops[9]: 'load should_loop%0#0' with 'load should_loop%0#0 from l-stack (no copy)'
debug: Inserted bytes_multiply_block@0.ops[1]: 'store result#0 to l-stack (copy)'
debug: Replaced bytes_multiply_block@0.ops[8]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Inserted bytes_multiply_for_preamble@1.ops[1]: 'store range_item%1#0 to l-stack (copy)'
debug: Replaced bytes_multiply_for_preamble@1.ops[3]: 'load range_item%1#0' with 'load range_item%1#0 from l-stack (no copy)'
debug: Inserted bytes_multiply_for_header@2.ops[3]: 'store continue_looping%2#0 to l-stack (copy)'
debug: Replaced bytes_multiply_for_header@2.ops[7]: 'load continue_looping%2#0' with 'load continue_looping%2#0 from l-stack (no copy)'
debug: Inserted bytes_multiply_for_body@3.ops[7]: 'store range_item%1#0 to l-stack (copy)'
debug: Replaced bytes_multiply_for_body@3.ops[9]: 'load range_item%1#0' with 'load range_item%1#0 from l-stack (no copy)'
debug: Inserted bytes_multiply_after_for@6.ops[1]: 'store result#0 to l-stack (copy)'
debug: Replaced bytes_multiply_after_for@6.ops[3]: 'load result#0' with 'load result#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.tuple_support.bytes_multiply
debug: test_cases.tuple_support.bytes_multiply f-stack entry: ['_i#0']
debug: test_cases.tuple_support.bytes_multiply f-stack on first store: ['result#0', 'result#10']
debug: Inserted test_tuple_swap_block@0.ops[7]: 'store b#0 to l-stack (copy)'
debug: Replaced test_tuple_swap_block@0.ops[9]: 'load b#0' with 'load b#0 from l-stack (no copy)'
debug: Inserted test_tuple_swap_block@0.ops[12]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced test_tuple_swap_block@0.ops[14]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted test_tuple_swap_block@0.ops[19]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced test_tuple_swap_block@0.ops[21]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted test_tuple_swap_block@0.ops[3]: 'store a#0 to l-stack (copy)'
debug: Replaced test_tuple_swap_block@0.ops[17]: 'load a#0' with 'load a#0 from l-stack (no copy)'
debug: Inserted slicing_block@0.ops[8]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced slicing_block@0.ops[10]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted slicing_block@0.ops[17]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced slicing_block@0.ops[19]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted slicing_block@0.ops[13]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced slicing_block@0.ops[16]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted slicing_block@0.ops[4]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced slicing_block@0.ops[16]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
info: Writing out/tuple_support.approval.teal
info: Writing out/tuple_support.approval.debug.teal
info: Writing out/tuple_support.clear.teal
info: Writing out/tuple_support.clear.debug.teal