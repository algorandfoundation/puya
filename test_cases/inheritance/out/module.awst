contract GreatGrandParentContract
{
  method_resolution_order: (
    algopy._contract.Contract,
  )
  
  subroutine test_cases.inheritance.grandparent.GreatGrandParentContract.approval_program(): bool
  {
    return this::method()
  }
  
  subroutine test_cases.inheritance.grandparent.GreatGrandParentContract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.inheritance.grandparent.GreatGrandParentContract.method(): bool
  {
    log('GrandParentContract.method called')
    return true
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}

contract GrandParentContract
{
  method_resolution_order: (
    test_cases.inheritance.grandparent.GreatGrandParentContract,
    algopy._contract.Contract,
  )
  
  subroutine test_cases.inheritance.grandparent.GreatGrandParentContract.approval_program(): bool
  {
    return this::method()
  }
  
  subroutine test_cases.inheritance.grandparent.GreatGrandParentContract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.inheritance.grandparent.GreatGrandParentContract.method(): bool
  {
    log('GrandParentContract.method called')
    return true
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}

contract ParentContract
{
  method_resolution_order: (
    test_cases.inheritance.grandparent.GrandParentContract,
    test_cases.inheritance.grandparent.GreatGrandParentContract,
    algopy._contract.Contract,
  )
  
  subroutine test_cases.inheritance.grandparent.GreatGrandParentContract.approval_program(): bool
  {
    return this::method()
  }
  
  subroutine test_cases.inheritance.grandparent.GreatGrandParentContract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.inheritance.parent.ParentContract.method(): bool
  {
    log('ParentContract.method called')
    return super::method()
  }
  
  subroutine test_cases.inheritance.grandparent.GreatGrandParentContract.method(): bool
  {
    log('GrandParentContract.method called')
    return true
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}

contract ChildContract
{
  method_resolution_order: (
    test_cases.inheritance.parent.ParentContract,
    test_cases.inheritance.grandparent.GrandParentContract,
    test_cases.inheritance.grandparent.GreatGrandParentContract,
    algopy._contract.Contract,
  )
  
  subroutine test_cases.inheritance.grandparent.GreatGrandParentContract.approval_program(): bool
  {
    return this::method()
  }
  
  subroutine test_cases.inheritance.grandparent.GreatGrandParentContract.clear_state_program(): bool
  {
    return true
  }
  
  subroutine test_cases.inheritance.child.ChildContract.method(): bool
  {
    log('ChildContract.method called')
    return test_cases.inheritance.grandparent.GrandParentContract::method()
  }
  
  subroutine test_cases.inheritance.parent.ParentContract.method(): bool
  {
    log('ParentContract.method called')
    return super::method()
  }
  
  subroutine test_cases.inheritance.grandparent.GreatGrandParentContract.method(): bool
  {
    log('GrandParentContract.method called')
    return true
  }
  
  subroutine algopy._contract.Contract.__init__(): void
  {
  }
}