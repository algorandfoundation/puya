{
  "version": 3,
  "sources": [
    "../child.py",
    "../grandparent.py"
  ],
  "mappings": ";ACKe;;;AAAP;ADER;;;AAEmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAX;AACO;;;AAAP;ACAR;;;AAEmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAX;AACO;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.inheritance.grandparent.GreatGrandParentContract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "callsub": "test_cases.inheritance.child.ChildContract.method",
      "op": "callsub method",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "4": {
      "op": "return",
      "stack_out": []
    },
    "5": {
      "subroutine": "test_cases.inheritance.child.ChildContract.method",
      "params": {},
      "block": "method",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "8": {
      "op": "pushbytes \"ChildContract.method called\"",
      "defined_out": [
        "\"ChildContract.method called\""
      ],
      "stack_out": [
        "\"ChildContract.method called\""
      ]
    },
    "37": {
      "op": "log",
      "stack_out": []
    },
    "38": {
      "callsub": "test_cases.inheritance.grandparent.GreatGrandParentContract.method",
      "op": "callsub test_cases.inheritance.grandparent.GreatGrandParentContract.method",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "41": {
      "retsub": true,
      "op": "retsub"
    },
    "42": {
      "subroutine": "test_cases.inheritance.grandparent.GreatGrandParentContract.method",
      "params": {},
      "block": "test_cases.inheritance.grandparent.GreatGrandParentContract.method",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "45": {
      "op": "pushbytes \"GrandParentContract.method called\"",
      "defined_out": [
        "\"GrandParentContract.method called\""
      ],
      "stack_out": [
        "\"GrandParentContract.method called\""
      ]
    },
    "80": {
      "op": "log",
      "stack_out": []
    },
    "81": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "83": {
      "retsub": true,
      "op": "retsub"
    }
  }
}