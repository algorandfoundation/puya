#pragma version 10
#pragma typetrack false

// test_cases.asset.contract.Reference.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    bytecblock "asa"

main_block@0:
    txn ApplicationID
    bnz main_after_if_else@2

main_call___init__@1:
    callsub __init__

main_after_if_else@2:
    callsub approval_program
    return


// test_cases.asset.contract.Reference.__init__() -> void:
__init__:

__init___block@0:
    // asset/contract.py:18
    // self.asa = Asset()
    bytec_0 // "asa"
    intc_0 // 0
    app_global_put
    retsub


// test_cases.asset.contract.Reference.approval_program() -> uint64:
approval_program:

approval_program_block@0:
    // asset/contract.py:21
    // assert bool(Asset(1)) == bool(Asset(2))
    intc_1 // 1
    intc_0 // 0
    !=
    pushint 2 // 2
    intc_0 // 0
    !=
    ==
    assert
    // asset/contract.py:22
    // if Txn.num_app_args == 1:
    txn NumAppArgs
    intc_1 // 1
    ==
    bz approval_program_after_if_else@8

approval_program_if_body@1:
    // asset/contract.py:23
    // if Txn.application_args(0) == b"opt_in":
    txna ApplicationArgs 0
    pushbytes 0x6f70745f696e
    ==
    bz approval_program_else_body@3

approval_program_if_body@2:
    // asset/contract.py:24
    // asset = Txn.assets(0)
    txna Assets 0
    // asset/contract.py:25
    // self.opt_into_asset(asset)
    callsub opt_into_asset

approval_program_after_if_else@7:

approval_program_after_if_else@8:
    // asset/contract.py:31
    // return True
    intc_1 // 1
    retsub

approval_program_else_body@3:
    // asset/contract.py:26
    // elif Txn.application_args(0) == b"is_opted_in":
    txna ApplicationArgs 0
    pushbytes 0x69735f6f707465645f696e
    ==
    bz approval_program_else_body@5

approval_program_if_body@4:
    // asset/contract.py:27
    // asset = Txn.assets(0)
    txna Assets 0
    // asset/contract.py:28
    // self.is_opted_asset(asset)
    callsub is_opted_asset

approval_program_after_if_else@6:
    b approval_program_after_if_else@7

approval_program_else_body@5:
    // asset/contract.py:30
    // assert False, "Expected opt_in or is_opted_in"
    err // Expected opt_in or is_opted_in


// test_cases.asset.contract.Reference.opt_into_asset(asset: uint64) -> void:
opt_into_asset:
    // asset/contract.py:36-37
    // @subroutine
    // def opt_into_asset(self, asset: Asset) -> None:
    proto 1 0

opt_into_asset_block@0:
    // asset/contract.py:38-39
    // # Only allow app creator to opt the app account into a ASA
    // assert Txn.sender == Global.creator_address, "Only creator can opt in to ASA"
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    // asset/contract.py:40-41
    // # Verify a ASA hasn't already been opted into
    // assert not self.asa, "ASA already opted in"
    intc_0 // 0
    bytec_0 // "asa"
    app_global_get_ex
    assert // check self.asa exists
    intc_0 // 0
    ==
    assert // ASA already opted in
    // asset/contract.py:42-43
    // # Save ASA ID in global state
    // self.asa = asset
    bytec_0 // "asa"
    frame_dig -1
    app_global_put
    // asset/contract.py:45-46
    // # Submit opt-in transaction: 0 asset transfer to self
    // ITxnCreate.begin()
    itxn_begin
    // asset/contract.py:47
    // ITxnCreate.set_type_enum(TransactionType.AssetTransfer)
    pushint 4 // axfer
    itxn_field TypeEnum
    // asset/contract.py:48
    // ITxnCreate.set_fee(UInt64(0))  # cover fee with outer txn
    intc_0 // 0
    itxn_field Fee
    // asset/contract.py:49
    // ITxnCreate.set_asset_receiver(Global.current_application_address)
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    // asset/contract.py:50
    // ITxnCreate.set_xfer_asset(asset)
    frame_dig -1
    itxn_field XferAsset
    // asset/contract.py:51
    // ITxnCreate.submit()
    itxn_submit
    retsub


// test_cases.asset.contract.Reference.is_opted_asset(asset: uint64) -> void:
is_opted_asset:
    // asset/contract.py:53-54
    // @subroutine
    // def is_opted_asset(self, asset: Asset) -> None:
    proto 1 0

is_opted_asset_block@0:
    // asset/contract.py:55
    // assert self.asa == asset, "asset self.asa == asset"
    intc_0 // 0
    bytec_0 // "asa"
    app_global_get_ex
    assert // check self.asa exists
    frame_dig -1
    ==
    assert // asset self.asa == asset
    // asset/contract.py:56
    // assert asset.total == 10000000, "total"
    frame_dig -1
    asset_params_get AssetTotal
    assert // asset exists
    pushint 10000000 // 10000000
    ==
    assert // total
    // asset/contract.py:57
    // assert asset.decimals == 0, "decimals"
    frame_dig -1
    asset_params_get AssetDecimals
    assert // asset exists
    intc_0 // 0
    ==
    assert // decimals
    // asset/contract.py:58
    // assert not asset.default_frozen, "default frozen"
    frame_dig -1
    asset_params_get AssetDefaultFrozen
    assert // asset exists
    !
    assert // default frozen
    // asset/contract.py:59
    // assert asset.unit_name == b"a", "unit_name"
    frame_dig -1
    asset_params_get AssetUnitName
    assert // asset exists
    pushbytes 0x61
    ==
    assert // unit_name
    // asset/contract.py:60
    // assert asset.name == b"asset a", "name"
    frame_dig -1
    asset_params_get AssetName
    assert // asset exists
    pushbytes 0x61737365742061
    ==
    assert // name
    // asset/contract.py:61
    // assert asset.url == b"", "URL"
    frame_dig -1
    asset_params_get AssetURL
    assert // asset exists
    pushbytes 0x
    ==
    assert // URL
    // asset/contract.py:62
    // assert asset.metadata_hash == bzero(32), "hash"
    frame_dig -1
    asset_params_get AssetMetadataHash
    assert // asset exists
    pushint 32 // 32
    bzero
    ==
    assert // hash
    // asset/contract.py:63
    // assert asset.manager == Global.zero_address, "manager"
    frame_dig -1
    asset_params_get AssetManager
    assert // asset exists
    global ZeroAddress
    ==
    assert // manager
    // asset/contract.py:64
    // assert asset.reserve == Global.zero_address, "reserve"
    frame_dig -1
    asset_params_get AssetReserve
    assert // asset exists
    global ZeroAddress
    ==
    assert // reserve
    // asset/contract.py:65
    // assert asset.freeze == Global.zero_address, "freeze"
    frame_dig -1
    asset_params_get AssetFreeze
    assert // asset exists
    global ZeroAddress
    ==
    assert // freeze
    // asset/contract.py:66
    // assert asset.clawback == Global.zero_address, "clawback"
    frame_dig -1
    asset_params_get AssetClawback
    assert // asset exists
    global ZeroAddress
    ==
    assert // clawback
    // asset/contract.py:67
    // assert asset.creator == Global.creator_address, "creator"
    frame_dig -1
    asset_params_get AssetCreator
    assert // asset exists
    global CreatorAddress
    ==
    assert // creator
    // asset/contract.py:68
    // assert Global.current_application_address.is_opted_in(asset), "asset opted in"
    global CurrentApplicationAddress
    frame_dig -1
    asset_holding_get AssetBalance
    bury 1
    assert // asset opted in
    retsub
