{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAiBQ;AAAW;AAAX;;AAGY;AAAkB;;AAAlB;AAAZ;AACG;;AAAoB;AAApB;AAAX;;;AACe;;;AAA2B;;;;;;;;AAA3B;AAAf;;;AACwB;;;AACR;;;AAMD;AAAP;AALS;;;AAA2B;;;;;;;;;;;;;AAA3B;AAAjB;;;AACwB;;;AACR;;;;;;AAEA;AAMhB;;;AAGe;;AAAc;;AAAd;AAAP;AAEW;AAAA;AAAA;AAAA;AAAJ;AAAP;AAEA;AAAA;;AAAA;AAGA;AACyB;;AAAzB;;AACmB;AAAnB;;AAC8B;;AAA9B;;AACA;;AAAA;;AACA;;AAER;;;AAEe;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAe;;;;;AAAf;AAAP;AACO;;AAAA;;AAAA;AAAkB;AAAlB;AAAP;AACW;;AAAA;;AAAA;AAAJ;AAAP;AACO;;AAAA;;AAAA;AAAmB;;;AAAnB;AAAP;AACO;;AAAA;;AAAA;AAAc;;;;;;;;;AAAd;AAAP;AACO;;AAAA;;AAAA;AAAa;;AAAb;AAAP;AACO;;AAAA;;AAAA;AAA6B;;AAAN;AAAvB;AAAP;AACO;;AAAA;;AAAA;AAAiB;;AAAjB;AAAP;AACO;;AAAA;;AAAA;AAAiB;;AAAjB;AAAP;AACO;;AAAA;;AAAA;AAAgB;;AAAhB;AAAP;AACO;;AAAA;;AAAA;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAA;AAAiB;;AAAjB;AAAP;AACO;;AAAA;;AAAA;;AAAA;;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.asset.contract.Reference.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"asa\""
    },
    "11": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "13": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "16": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.asset.contract.Reference.__init__",
      "op": "callsub __init__"
    },
    "19": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "test_cases.asset.contract.Reference.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "22": {
      "op": "return",
      "stack_out": []
    },
    "23": {
      "subroutine": "test_cases.asset.contract.Reference.__init__",
      "params": {},
      "block": "__init___block@0",
      "stack_in": [],
      "op": "bytec_0 // \"asa\"",
      "defined_out": [
        "\"asa\""
      ],
      "stack_out": [
        "\"asa\""
      ]
    },
    "24": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "\"asa\"",
        "0"
      ]
    },
    "25": {
      "op": "app_global_put",
      "stack_out": []
    },
    "26": {
      "retsub": true,
      "op": "retsub"
    },
    "27": {
      "subroutine": "test_cases.asset.contract.Reference.approval_program",
      "params": {},
      "block": "approval_program_block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "28": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "1",
        "2"
      ],
      "stack_out": [
        "1",
        "2"
      ]
    },
    "30": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "31": {
      "op": "assert",
      "stack_out": []
    },
    "32": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "34": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%1#0",
        "1"
      ]
    },
    "35": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "36": {
      "op": "bz approval_program_after_if_else@8",
      "stack_out": []
    },
    "39": {
      "block": "approval_program_if_body@1",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "42": {
      "op": "pushbytes 0x6f70745f696e",
      "defined_out": [
        "0x6f70745f696e",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x6f70745f696e"
      ]
    },
    "50": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "51": {
      "op": "bz approval_program_else_body@3",
      "stack_out": []
    },
    "54": {
      "block": "approval_program_if_body@2",
      "stack_in": [],
      "op": "txna Assets 0",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "57": {
      "callsub": "test_cases.asset.contract.Reference.opt_into_asset",
      "op": "callsub opt_into_asset",
      "stack_out": []
    },
    "60": {
      "block": "approval_program_after_if_else@8",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "61": {
      "retsub": true,
      "op": "retsub"
    },
    "62": {
      "block": "approval_program_else_body@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "65": {
      "op": "pushbytes 0x69735f6f707465645f696e",
      "defined_out": [
        "0x69735f6f707465645f696e",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0x69735f6f707465645f696e"
      ]
    },
    "78": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "79": {
      "op": "bz approval_program_else_body@5",
      "stack_out": []
    },
    "82": {
      "block": "approval_program_if_body@4",
      "stack_in": [],
      "op": "txna Assets 0",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "85": {
      "callsub": "test_cases.asset.contract.Reference.is_opted_asset",
      "op": "callsub is_opted_asset",
      "stack_out": []
    },
    "88": {
      "block": "approval_program_after_if_else@6",
      "stack_in": [],
      "op": "b approval_program_after_if_else@7"
    },
    "91": {
      "block": "approval_program_else_body@5",
      "stack_in": [],
      "error": "Expected opt_in or is_opted_in",
      "op": "err // Expected opt_in or is_opted_in"
    },
    "92": {
      "subroutine": "test_cases.asset.contract.Reference.opt_into_asset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "opt_into_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "95": {
      "block": "opt_into_asset_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "97": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "99": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "100": {
      "error": "Only creator can opt in to ASA",
      "op": "assert // Only creator can opt in to ASA",
      "stack_out": []
    },
    "101": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "102": {
      "op": "bytec_0 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa\""
      ]
    },
    "103": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "104": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "105": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "106": {
      "error": "ASA already opted in",
      "op": "assert // ASA already opted in",
      "stack_out": []
    },
    "107": {
      "op": "bytec_0 // \"asa\"",
      "stack_out": [
        "\"asa\""
      ]
    },
    "108": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ]
    },
    "110": {
      "op": "app_global_put",
      "stack_out": []
    },
    "111": {
      "op": "itxn_begin"
    },
    "112": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "114": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "116": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "117": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "119": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "121": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "123": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "125": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "127": {
      "op": "itxn_submit"
    },
    "128": {
      "retsub": true,
      "op": "retsub"
    },
    "129": {
      "subroutine": "test_cases.asset.contract.Reference.is_opted_asset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "is_opted_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "132": {
      "block": "is_opted_asset_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "133": {
      "op": "bytec_0 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa\""
      ]
    },
    "134": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "135": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "136": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "asset#0 (copy)"
      ]
    },
    "138": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "139": {
      "error": "asset self.asa == asset",
      "op": "assert // asset self.asa == asset",
      "stack_out": []
    },
    "140": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "142": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "144": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "145": {
      "op": "pushint 10000000 // 10000000",
      "defined_out": [
        "10000000",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "10000000"
      ]
    },
    "150": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "151": {
      "error": "total",
      "op": "assert // total",
      "stack_out": []
    },
    "152": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "154": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "check%1#0"
      ]
    },
    "156": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%1#0"
      ]
    },
    "157": {
      "op": "intc_0 // 0",
      "stack_out": [
        "value%1#0",
        "0"
      ]
    },
    "158": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "159": {
      "error": "decimals",
      "op": "assert // decimals",
      "stack_out": []
    },
    "160": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "162": {
      "op": "asset_params_get AssetDefaultFrozen",
      "defined_out": [
        "check%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "check%2#0"
      ]
    },
    "164": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%2#0"
      ]
    },
    "165": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "166": {
      "error": "default frozen",
      "op": "assert // default frozen",
      "stack_out": []
    },
    "167": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "169": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%3#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "check%3#0"
      ]
    },
    "171": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%3#0"
      ]
    },
    "172": {
      "op": "pushbytes 0x61",
      "defined_out": [
        "0x61",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "0x61"
      ]
    },
    "175": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "176": {
      "error": "unit_name",
      "op": "assert // unit_name",
      "stack_out": []
    },
    "177": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "179": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%4#0",
        "value%4#0"
      ],
      "stack_out": [
        "value%4#0",
        "check%4#0"
      ]
    },
    "181": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%4#0"
      ]
    },
    "182": {
      "op": "pushbytes 0x61737365742061",
      "defined_out": [
        "0x61737365742061",
        "value%4#0"
      ],
      "stack_out": [
        "value%4#0",
        "0x61737365742061"
      ]
    },
    "191": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "192": {
      "error": "name",
      "op": "assert // name",
      "stack_out": []
    },
    "193": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "195": {
      "op": "asset_params_get AssetURL",
      "defined_out": [
        "check%5#0",
        "value%5#0"
      ],
      "stack_out": [
        "value%5#0",
        "check%5#0"
      ]
    },
    "197": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%5#0"
      ]
    },
    "198": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "value%5#0"
      ],
      "stack_out": [
        "value%5#0",
        "0x"
      ]
    },
    "200": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "201": {
      "error": "URL",
      "op": "assert // URL",
      "stack_out": []
    },
    "202": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "204": {
      "op": "asset_params_get AssetMetadataHash",
      "defined_out": [
        "check%6#0",
        "value%6#0"
      ],
      "stack_out": [
        "value%6#0",
        "check%6#0"
      ]
    },
    "206": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%6#0"
      ]
    },
    "207": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "value%6#0"
      ],
      "stack_out": [
        "value%6#0",
        "32"
      ]
    },
    "209": {
      "op": "bzero",
      "defined_out": [
        "tmp%7#0",
        "value%6#0"
      ],
      "stack_out": [
        "value%6#0",
        "tmp%7#0"
      ]
    },
    "210": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "211": {
      "error": "hash",
      "op": "assert // hash",
      "stack_out": []
    },
    "212": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "214": {
      "op": "asset_params_get AssetManager",
      "defined_out": [
        "check%7#0",
        "value%7#0"
      ],
      "stack_out": [
        "value%7#0",
        "check%7#0"
      ]
    },
    "216": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%7#0"
      ]
    },
    "217": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%9#0",
        "value%7#0"
      ],
      "stack_out": [
        "value%7#0",
        "tmp%9#0"
      ]
    },
    "219": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "220": {
      "error": "manager",
      "op": "assert // manager",
      "stack_out": []
    },
    "221": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "223": {
      "op": "asset_params_get AssetReserve",
      "defined_out": [
        "check%8#0",
        "value%8#0"
      ],
      "stack_out": [
        "value%8#0",
        "check%8#0"
      ]
    },
    "225": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%8#0"
      ]
    },
    "226": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%11#0",
        "value%8#0"
      ],
      "stack_out": [
        "value%8#0",
        "tmp%11#0"
      ]
    },
    "228": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "229": {
      "error": "reserve",
      "op": "assert // reserve",
      "stack_out": []
    },
    "230": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "232": {
      "op": "asset_params_get AssetFreeze",
      "defined_out": [
        "check%9#0",
        "value%9#0"
      ],
      "stack_out": [
        "value%9#0",
        "check%9#0"
      ]
    },
    "234": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%9#0"
      ]
    },
    "235": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%13#0",
        "value%9#0"
      ],
      "stack_out": [
        "value%9#0",
        "tmp%13#0"
      ]
    },
    "237": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "238": {
      "error": "freeze",
      "op": "assert // freeze",
      "stack_out": []
    },
    "239": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "241": {
      "op": "asset_params_get AssetClawback",
      "defined_out": [
        "check%10#0",
        "value%10#0"
      ],
      "stack_out": [
        "value%10#0",
        "check%10#0"
      ]
    },
    "243": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%10#0"
      ]
    },
    "244": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%15#0",
        "value%10#0"
      ],
      "stack_out": [
        "value%10#0",
        "tmp%15#0"
      ]
    },
    "246": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "247": {
      "error": "clawback",
      "op": "assert // clawback",
      "stack_out": []
    },
    "248": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "250": {
      "op": "asset_params_get AssetCreator",
      "defined_out": [
        "check%11#0",
        "value%11#0"
      ],
      "stack_out": [
        "value%11#0",
        "check%11#0"
      ]
    },
    "252": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%11#0"
      ]
    },
    "253": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%17#0",
        "value%11#0"
      ],
      "stack_out": [
        "value%11#0",
        "tmp%17#0"
      ]
    },
    "255": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "256": {
      "error": "creator",
      "op": "assert // creator",
      "stack_out": []
    },
    "257": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "259": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%19#0",
        "asset#0 (copy)"
      ]
    },
    "261": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "263": {
      "op": "bury 1",
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "265": {
      "error": "asset opted in",
      "op": "assert // asset opted in",
      "stack_out": []
    },
    "266": {
      "retsub": true,
      "op": "retsub"
    }
  }
}