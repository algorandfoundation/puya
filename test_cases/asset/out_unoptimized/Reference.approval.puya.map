{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBQ;AAAW;AAAX;;;;;AAGY;AAAL;AAAA;AAAuB;;AAAL;AAAA;AAAlB;AAAP;AACG;;AAAoB;AAApB;AAAX;;;AAAA;;;AACe;;;AAA2B;;;;;;;;AAA3B;AAAf;;;AAAA;;;AACwB;;;AACR;;;;;;;;;AAMD;AAAP;AALS;;;AAA2B;;;;;;;;;;;;;AAA3B;AAAjB;;;AAAA;;;AACwB;;;AACR;;;;;;;;;AAEA;AAMhB;;;;;;AAGe;;AAAc;;AAAd;AAAP;AAEW;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAP;AAEA;AAAA;;AAAA;AAGA;AACyB;;AAAzB;;AACmB;AAAnB;;AAC8B;;AAA9B;;AACA;;AAAA;;AACA;;AAER;;;;;;AAEe;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAAA;AAAe;;;;;AAAf;AAAP;AACO;;AAAA;;AAAA;AAAkB;AAAlB;AAAP;AACW;;AAAA;;AAAA;AAAJ;AAAP;AACO;;AAAA;;AAAA;AAAmB;;;AAAnB;AAAP;AACO;;AAAA;;AAAA;AAAc;;;;;;;;;AAAd;AAAP;AACO;;AAAA;;AAAA;AAAa;;AAAb;AAAP;AACO;;AAAA;;AAAA;AAA6B;;AAAN;AAAvB;AAAP;AACO;;AAAA;;AAAA;AAAiB;;AAAjB;AAAP;AACO;;AAAA;;AAAA;AAAiB;;AAAjB;AAAP;AACO;;AAAA;;AAAA;AAAgB;;AAAhB;AAAP;AACO;;AAAA;;AAAA;AAAkB;;AAAlB;AAAP;AACO;;AAAA;;AAAA;AAAiB;;AAAjB;AAAP;AACO;;AAAA;;AAAA;;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.asset.contract.Reference.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"asa\""
    },
    "11": {
      "op": "b main_block@0"
    },
    "14": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "16": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "19": {
      "op": "b main_call___init__@1"
    },
    "22": {
      "block": "main_call___init__@1",
      "stack_in": [],
      "callsub": "test_cases.asset.contract.Reference.__init__",
      "op": "callsub __init__"
    },
    "25": {
      "op": "b main_after_if_else@2"
    },
    "28": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "test_cases.asset.contract.Reference.approval_program",
      "op": "callsub approval_program",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "31": {
      "op": "return",
      "stack_out": []
    },
    "32": {
      "subroutine": "test_cases.asset.contract.Reference.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "b __init___block@0"
    },
    "35": {
      "block": "__init___block@0",
      "stack_in": [],
      "op": "bytec_0 // \"asa\"",
      "defined_out": [
        "\"asa\""
      ],
      "stack_out": [
        "\"asa\""
      ]
    },
    "36": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "\"asa\"",
        "0"
      ]
    },
    "37": {
      "op": "app_global_put",
      "stack_out": []
    },
    "38": {
      "retsub": true,
      "op": "retsub"
    },
    "39": {
      "subroutine": "test_cases.asset.contract.Reference.approval_program",
      "params": {},
      "block": "approval_program",
      "stack_in": [],
      "op": "b approval_program_block@0"
    },
    "42": {
      "block": "approval_program_block@0",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "43": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "1"
      ],
      "stack_out": [
        "1",
        "0"
      ]
    },
    "44": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "45": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "47": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "2",
        "0"
      ]
    },
    "48": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "49": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "50": {
      "op": "assert",
      "stack_out": []
    },
    "51": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "53": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%3#0",
        "1"
      ]
    },
    "54": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "55": {
      "op": "bz approval_program_after_if_else@8",
      "stack_out": []
    },
    "58": {
      "op": "b approval_program_if_body@1"
    },
    "61": {
      "block": "approval_program_if_body@1",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "64": {
      "op": "pushbytes 0x6f70745f696e",
      "defined_out": [
        "0x6f70745f696e",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0x6f70745f696e"
      ]
    },
    "72": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "73": {
      "op": "bz approval_program_else_body@3",
      "stack_out": []
    },
    "76": {
      "op": "b approval_program_if_body@2"
    },
    "79": {
      "block": "approval_program_if_body@2",
      "stack_in": [],
      "op": "txna Assets 0",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "82": {
      "callsub": "test_cases.asset.contract.Reference.opt_into_asset",
      "op": "callsub opt_into_asset",
      "stack_out": []
    },
    "85": {
      "op": "b approval_program_after_if_else@7"
    },
    "88": {
      "block": "approval_program_after_if_else@7",
      "stack_in": [],
      "op": "b approval_program_after_if_else@8"
    },
    "91": {
      "block": "approval_program_after_if_else@8",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "92": {
      "retsub": true,
      "op": "retsub"
    },
    "93": {
      "block": "approval_program_else_body@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "96": {
      "op": "pushbytes 0x69735f6f707465645f696e",
      "defined_out": [
        "0x69735f6f707465645f696e",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0x69735f6f707465645f696e"
      ]
    },
    "109": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "110": {
      "op": "bz approval_program_else_body@5",
      "stack_out": []
    },
    "113": {
      "op": "b approval_program_if_body@4"
    },
    "116": {
      "block": "approval_program_if_body@4",
      "stack_in": [],
      "op": "txna Assets 0",
      "defined_out": [
        "asset#0"
      ],
      "stack_out": [
        "asset#0"
      ]
    },
    "119": {
      "callsub": "test_cases.asset.contract.Reference.is_opted_asset",
      "op": "callsub is_opted_asset",
      "stack_out": []
    },
    "122": {
      "op": "b approval_program_after_if_else@6"
    },
    "125": {
      "block": "approval_program_after_if_else@6",
      "stack_in": [],
      "op": "b approval_program_after_if_else@7"
    },
    "128": {
      "error": "Expected opt_in or is_opted_in",
      "block": "approval_program_else_body@5",
      "stack_in": [],
      "op": "err // Expected opt_in or is_opted_in"
    },
    "129": {
      "subroutine": "test_cases.asset.contract.Reference.opt_into_asset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "opt_into_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "132": {
      "op": "b opt_into_asset_block@0"
    },
    "135": {
      "block": "opt_into_asset_block@0",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "137": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "139": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "140": {
      "error": "Only creator can opt in to ASA",
      "op": "assert // Only creator can opt in to ASA",
      "stack_out": []
    },
    "141": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "142": {
      "op": "bytec_0 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa\""
      ]
    },
    "143": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "144": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "145": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "146": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "147": {
      "error": "ASA already opted in",
      "op": "assert // ASA already opted in",
      "stack_out": []
    },
    "148": {
      "op": "bytec_0 // \"asa\"",
      "stack_out": [
        "\"asa\""
      ]
    },
    "149": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asa\"",
        "asset#0 (copy)"
      ]
    },
    "151": {
      "op": "app_global_put",
      "stack_out": []
    },
    "152": {
      "op": "itxn_begin"
    },
    "153": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "155": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "157": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "158": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "160": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "162": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "164": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "166": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "168": {
      "op": "itxn_submit"
    },
    "169": {
      "retsub": true,
      "op": "retsub"
    },
    "170": {
      "subroutine": "test_cases.asset.contract.Reference.is_opted_asset",
      "params": {
        "asset#0": "uint64"
      },
      "block": "is_opted_asset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "173": {
      "op": "b is_opted_asset_block@0"
    },
    "176": {
      "block": "is_opted_asset_block@0",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "177": {
      "op": "bytec_0 // \"asa\"",
      "defined_out": [
        "\"asa\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa\""
      ]
    },
    "178": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "179": {
      "error": "check self.asa exists",
      "op": "assert // check self.asa exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "180": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "asset#0 (copy)"
      ]
    },
    "182": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "183": {
      "error": "asset self.asa == asset",
      "op": "assert // asset self.asa == asset",
      "stack_out": []
    },
    "184": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "186": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "188": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%0#0"
      ]
    },
    "189": {
      "op": "pushint 10000000 // 10000000",
      "defined_out": [
        "10000000",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "10000000"
      ]
    },
    "194": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "195": {
      "error": "total",
      "op": "assert // total",
      "stack_out": []
    },
    "196": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "198": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "check%1#0"
      ]
    },
    "200": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%1#0"
      ]
    },
    "201": {
      "op": "intc_0 // 0",
      "stack_out": [
        "value%1#0",
        "0"
      ]
    },
    "202": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "203": {
      "error": "decimals",
      "op": "assert // decimals",
      "stack_out": []
    },
    "204": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "206": {
      "op": "asset_params_get AssetDefaultFrozen",
      "defined_out": [
        "check%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "check%2#0"
      ]
    },
    "208": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%2#0"
      ]
    },
    "209": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "210": {
      "error": "default frozen",
      "op": "assert // default frozen",
      "stack_out": []
    },
    "211": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "213": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%3#0",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "check%3#0"
      ]
    },
    "215": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%3#0"
      ]
    },
    "216": {
      "op": "pushbytes 0x61",
      "defined_out": [
        "0x61",
        "value%3#0"
      ],
      "stack_out": [
        "value%3#0",
        "0x61"
      ]
    },
    "219": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "220": {
      "error": "unit_name",
      "op": "assert // unit_name",
      "stack_out": []
    },
    "221": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "223": {
      "op": "asset_params_get AssetName",
      "defined_out": [
        "check%4#0",
        "value%4#0"
      ],
      "stack_out": [
        "value%4#0",
        "check%4#0"
      ]
    },
    "225": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%4#0"
      ]
    },
    "226": {
      "op": "pushbytes 0x61737365742061",
      "defined_out": [
        "0x61737365742061",
        "value%4#0"
      ],
      "stack_out": [
        "value%4#0",
        "0x61737365742061"
      ]
    },
    "235": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "236": {
      "error": "name",
      "op": "assert // name",
      "stack_out": []
    },
    "237": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "239": {
      "op": "asset_params_get AssetURL",
      "defined_out": [
        "check%5#0",
        "value%5#0"
      ],
      "stack_out": [
        "value%5#0",
        "check%5#0"
      ]
    },
    "241": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%5#0"
      ]
    },
    "242": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0x",
        "value%5#0"
      ],
      "stack_out": [
        "value%5#0",
        "0x"
      ]
    },
    "244": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "245": {
      "error": "URL",
      "op": "assert // URL",
      "stack_out": []
    },
    "246": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "248": {
      "op": "asset_params_get AssetMetadataHash",
      "defined_out": [
        "check%6#0",
        "value%6#0"
      ],
      "stack_out": [
        "value%6#0",
        "check%6#0"
      ]
    },
    "250": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%6#0"
      ]
    },
    "251": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "value%6#0"
      ],
      "stack_out": [
        "value%6#0",
        "32"
      ]
    },
    "253": {
      "op": "bzero",
      "defined_out": [
        "tmp%7#0",
        "value%6#0"
      ],
      "stack_out": [
        "value%6#0",
        "tmp%7#0"
      ]
    },
    "254": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "255": {
      "error": "hash",
      "op": "assert // hash",
      "stack_out": []
    },
    "256": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "258": {
      "op": "asset_params_get AssetManager",
      "defined_out": [
        "check%7#0",
        "value%7#0"
      ],
      "stack_out": [
        "value%7#0",
        "check%7#0"
      ]
    },
    "260": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%7#0"
      ]
    },
    "261": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%9#0",
        "value%7#0"
      ],
      "stack_out": [
        "value%7#0",
        "tmp%9#0"
      ]
    },
    "263": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "264": {
      "error": "manager",
      "op": "assert // manager",
      "stack_out": []
    },
    "265": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "267": {
      "op": "asset_params_get AssetReserve",
      "defined_out": [
        "check%8#0",
        "value%8#0"
      ],
      "stack_out": [
        "value%8#0",
        "check%8#0"
      ]
    },
    "269": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%8#0"
      ]
    },
    "270": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%11#0",
        "value%8#0"
      ],
      "stack_out": [
        "value%8#0",
        "tmp%11#0"
      ]
    },
    "272": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "273": {
      "error": "reserve",
      "op": "assert // reserve",
      "stack_out": []
    },
    "274": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "276": {
      "op": "asset_params_get AssetFreeze",
      "defined_out": [
        "check%9#0",
        "value%9#0"
      ],
      "stack_out": [
        "value%9#0",
        "check%9#0"
      ]
    },
    "278": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%9#0"
      ]
    },
    "279": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%13#0",
        "value%9#0"
      ],
      "stack_out": [
        "value%9#0",
        "tmp%13#0"
      ]
    },
    "281": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "282": {
      "error": "freeze",
      "op": "assert // freeze",
      "stack_out": []
    },
    "283": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "285": {
      "op": "asset_params_get AssetClawback",
      "defined_out": [
        "check%10#0",
        "value%10#0"
      ],
      "stack_out": [
        "value%10#0",
        "check%10#0"
      ]
    },
    "287": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%10#0"
      ]
    },
    "288": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%15#0",
        "value%10#0"
      ],
      "stack_out": [
        "value%10#0",
        "tmp%15#0"
      ]
    },
    "290": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "291": {
      "error": "clawback",
      "op": "assert // clawback",
      "stack_out": []
    },
    "292": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "294": {
      "op": "asset_params_get AssetCreator",
      "defined_out": [
        "check%11#0",
        "value%11#0"
      ],
      "stack_out": [
        "value%11#0",
        "check%11#0"
      ]
    },
    "296": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "value%11#0"
      ]
    },
    "297": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%17#0",
        "value%11#0"
      ],
      "stack_out": [
        "value%11#0",
        "tmp%17#0"
      ]
    },
    "299": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "300": {
      "error": "creator",
      "op": "assert // creator",
      "stack_out": []
    },
    "301": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "303": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%19#0",
        "asset#0 (copy)"
      ]
    },
    "305": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "307": {
      "error": "asset opted in",
      "op": "assert // asset opted in",
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "308": {
      "retsub": true,
      "op": "retsub"
    }
  }
}