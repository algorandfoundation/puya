debug: PuyaPyOptions(output_teal=True, output_source_map=True, output_arc32=True, output_arc56=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, output_bytecode=True, output_teal_intermediates=False, output_op_statistics=True, debug_level=1, optimization_level=1, target_avm_version=10, cli_template_definitions={}, template_vars_prefix='TMPL_', locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>, _disabled_optimizations=(), paths=['asset'], output_awst=True, output_awst_json=False, output_client=True, log_level=<LogLevel.debug: 10>)
info: Found python prefix: <git root>/.venv
info: writing asset/out/module.awst
debug: Building IR for function _puya_lib.util.ensure_budget
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@1
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@7
debug: Terminated block@7
debug: Building IR for function _puya_lib.bytes_.is_substring
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@1
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_bit
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added head_and_tail#0 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0) in block@0
debug: Added head_and_tail#1 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@3) (head_and_tail#1) with head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Sealing block@4
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@3) (length_minus_1#1) with length_minus_1#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@3) (popped_header_offset#1) with popped_header_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@3) (popped_offset#1) with popped_offset#0 in current definition for 3 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@3) (popped#1) with popped#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_bits
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@2
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@2
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@3
debug: Looking for 'write_end' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let write_end#1: uint64 = undefined while trying to resolve 'write_end' in block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@3
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@3
debug: Looking for 'read_offset' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_offset#1: uint64 = undefined while trying to resolve 'read_offset' in block@3
debug: Looking for 'read_step' in an unsealed block creating an incomplete Phi: block@3
debug: Created Phi assignment: let read_step#1: uint64 = undefined while trying to resolve 'read_step' in block@3
debug: Terminated block@4
debug: Sealing block@3
debug: Added write_offset#0 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2) in block@2
debug: Added write_offset#2 to Phi node: let write_offset#1: uint64 = φ(write_offset#0 <- block@2, write_offset#2 <- block@4) in block@4
debug: Added write_end#0 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2) in block@2
debug: Added write_end#1 to Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0
debug: Deleting Phi assignment: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4)
debug: Replaced trivial Phi node: let write_end#1: uint64 = φ(write_end#0 <- block@2, write_end#1 <- block@4) (write_end#1) with write_end#0 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@2
debug: Added result#0 to Phi node: let result#4: bytes = φ(result#0 <- block@0) in block@0
debug: Added result#1 to Phi node: let result#4: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@2) in block@2
debug: Added result#3 to Phi node: let result#2: bytes = φ(result#4 <- block@2, result#3 <- block@4) in block@4
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@2
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0) in block@0
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#2) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2) in block@2
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#0 <- block@2, new_items_bytes#1 <- block@4) (new_items_bytes#1) with new_items_bytes#0 in current definition for 2 blocks
debug: Added read_offset#0 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2) in block@2
debug: Added read_offset#2 to Phi node: let read_offset#1: uint64 = φ(read_offset#0 <- block@2, read_offset#2 <- block@4) in block@4
debug: Created Phi assignment: let read_step#2: uint64 = undefined while trying to resolve 'read_step' in block@2
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0) in block@0
debug: Added read_step#0 to Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) in block@1
debug: Replacing trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0
debug: Deleting Phi assignment: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1)
debug: Replaced trivial Phi node: let read_step#2: uint64 = φ(read_step#0 <- block@0, read_step#0 <- block@1) (read_step#2) with read_step#0 in current definition for 1 blocks
debug: Added read_step#0 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2) in block@2
debug: Added read_step#1 to Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) in block@4
debug: Replacing trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0
debug: Deleting Phi assignment: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4)
debug: Replaced trivial Phi node: let read_step#1: uint64 = φ(read_step#0 <- block@2, read_step#1 <- block@4) (read_step#1) with read_step#0 in current definition for 2 blocks
debug: Sealing block@5
debug: Terminated block@5
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@1
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@3) (array_head_and_tail#1) with array_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#0 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0) in block@0
debug: Added new_head#2 to Phi node: let new_head#1: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@3) in block@3
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@3) (item_offset_adjustment#1) with item_offset_adjustment#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@3) (new_items_count#1) with new_items_count#0 in current definition for 3 blocks
debug: Terminated block@4
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let head_offset#4: uint64 = undefined while trying to resolve 'head_offset' in block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@5
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@5
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@5
debug: Created Phi assignment: let item_offset_adjustment#3: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@5
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@5
debug: Added head_offset#3 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4) in block@4
debug: Added head_offset#5 to Phi node: let head_offset#4: uint64 = φ(head_offset#3 <- block@4, head_offset#5 <- block@7) in block@7
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3)
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4) in block@4
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@4, new_head_and_tail#1 <- block@7) (new_head_and_tail#1) with new_head_and_tail#0 in current definition for 3 blocks
debug: Added new_head#1 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4) in block@4
debug: Added new_head#4 to Phi node: let new_head#3: bytes = φ(new_head#1 <- block@4, new_head#4 <- block@7) in block@7
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4) in block@4
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) in block@7
debug: Replacing trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7)
debug: Replaced trivial Phi node: let item_offset_adjustment#3: uint64 = φ(item_offset_adjustment#2 <- block@4, item_offset_adjustment#3 <- block@7) (item_offset_adjustment#3) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Sealing block@8
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@5
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) in block@3
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@3) (array_items_count#2) with array_items_count#0 in current definition for 3 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4) in block@4
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@4, array_items_count#1 <- block@7) (array_items_count#1) with array_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@5
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4) in block@4
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@4, new_items_count#2 <- block@7) (new_items_count#2) with new_items_count#0 in current definition for 3 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@5
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4) in block@4
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) in block@7
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7)
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@4, array_head_and_tail#2 <- block@7) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 3 blocks
debug: Terminated block@8
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.static_array_replace_dynamic_element
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@1
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#2 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#2 <- block@3) in block@3
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0) in block@0
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@3) in block@3
debug: Added new_item_length#0 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0) in block@0
debug: Added new_item_length#1 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@3) (new_item_length#1) with new_item_length#0 in current definition for 3 blocks
debug: Added original_item_length#0 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0) in block@0
debug: Added original_item_length#1 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) in block@3
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@3) (original_item_length#1) with original_item_length#0 in current definition for 3 blocks
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function _puya_lib.arc4.static_array_replace_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: Sealing block@0
debug: Terminated block@0
debug: Looking for 'head_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let head_offset#1: uint64 = undefined while trying to resolve 'head_offset' in block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@1
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@1
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@1
debug: Added head_offset#0 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0) in block@0
debug: Added head_offset#3 to Phi node: let head_offset#1: uint64 = φ(head_offset#0 <- block@0, head_offset#3 <- block@3) in block@3
debug: Added tail_offset#0 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0) in block@0
debug: Added tail_offset#2 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@3) in block@3
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0) in block@0
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@3) in block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Building IR for function test_cases.asset.contract.Reference.__puya_arc4_router__
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Building IR for function test_cases.asset.contract.Reference.__init__
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.asset.contract.Reference.approval_program
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: Sealing block@3
debug: Terminated block@3
debug: Sealing block@4
debug: Terminated block@4
debug: Sealing block@5
debug: Terminated block@5
debug: Sealing block@6
debug: Terminated block@6
debug: Sealing block@7
debug: Terminated block@7
debug: Sealing block@8
debug: Terminated block@8
debug: Building IR for function test_cases.asset.contract.Reference.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.asset.contract.Reference.opt_into_asset
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.asset.contract.Reference.is_opted_asset
debug: Sealing block@0
debug: Terminated block@0
debug: Building IR for function test_cases.asset.contract.Reference.__algopy_entrypoint_with_init
debug: Sealing block@0
debug: Terminated block@0
debug: Sealing block@1
debug: Terminated block@1
debug: Sealing block@2
debug: Terminated block@2
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.asset.contract.Reference.__puya_arc4_router__
debug: removing unused subroutine test_cases.asset.contract.Reference.clear_state_program
debug: Building IR for function test_cases.asset.contract.Reference.clear_state_program
debug: Sealing block@0
debug: Terminated block@0
debug: removing unused subroutine _puya_lib.util.ensure_budget
debug: removing unused subroutine _puya_lib.bytes_.is_substring
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_bit
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_fixed_size
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_pop_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_bits
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_concat_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.dynamic_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_dynamic_element
debug: removing unused subroutine _puya_lib.arc4.static_array_replace_byte_length_head
debug: removing unused subroutine _puya_lib.arc4.recalculate_head_for_elements_with_byte_length_head
debug: removing unused subroutine test_cases.asset.contract.Reference.__puya_arc4_router__
debug: removing unused subroutine test_cases.asset.contract.Reference.__init__
debug: removing unused subroutine test_cases.asset.contract.Reference.approval_program
debug: removing unused subroutine test_cases.asset.contract.Reference.clear_state_program
debug: removing unused subroutine test_cases.asset.contract.Reference.opt_into_asset
debug: removing unused subroutine test_cases.asset.contract.Reference.is_opted_asset
debug: Output IR to asset/out/Reference.ir/Reference.approval.000.ssa.ir
debug: Output IR to asset/out/Reference.ir/Reference.clear.000.ssa.ir
debug: optimizing approval program of test_cases.asset.contract.Reference at level 1
debug: Begin optimization pass 1/100
debug: marking single-use function test_cases.asset.contract.Reference.__init__ for inlining
debug: marking single-use function test_cases.asset.contract.Reference.approval_program for inlining
debug: marking single-use function test_cases.asset.contract.Reference.opt_into_asset for inlining
debug: marking single-use function test_cases.asset.contract.Reference.is_opted_asset for inlining
debug: Optimizing subroutine test_cases.asset.contract.Reference.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: inlining call to test_cases.asset.contract.Reference.approval_program in test_cases.asset.contract.Reference.__algopy_entrypoint_with_init
debug: inlining call to test_cases.asset.contract.Reference.__init__ in test_cases.asset.contract.Reference.__algopy_entrypoint_with_init
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: inlining condition branch to err block into an assert true
debug: simplified terminator of block@6 from goto tmp%5#0 ? block@7 : block@8 to goto block@7
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@13 with block@1 in block@14
debug: Merged linear block@13 into block@1
debug: Replaced predecessor block@14 with block@1 in block@2
debug: Merged linear block@14 into block@1
debug: Replaced predecessor block@3 with block@2 in block@11
debug: Replaced predecessor block@3 with block@2 in block@4
debug: Merged linear block@3 into block@2
debug: Replaced predecessor block@7 with block@6 in block@9
debug: Merged linear block@7 into block@6
debug: Replaced predecessor block@9 with block@6 in block@10
debug: Merged linear block@9 into block@6
debug: Merged linear block@12 into block@11
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@10
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@8
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.asset.contract.Reference.__init__
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.asset.contract.Reference.approval_program
debug: Optimizer: Perform Subroutine Inlining
asset/contract.py:27:17 debug: inlining call to test_cases.asset.contract.Reference.is_opted_asset in test_cases.asset.contract.Reference.approval_program
asset/contract.py:24:17 debug: inlining call to test_cases.asset.contract.Reference.opt_into_asset in test_cases.asset.contract.Reference.approval_program
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: asset#0, asset#3
debug: selected asset#0 from equivalence set
debug: Found equivalence set: maybe_value%0#1, reinterpret_bool%0#0
debug: selected maybe_value%0#1 from equivalence set
debug: Found equivalence set: asset#1, asset#2
debug: selected asset#1 from equivalence set
debug: Copy propagation made 17 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== value%1#0 0u) to (! value%1#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: inlining condition branch to err block into an assert true
debug: simplified terminator of block@3 from goto tmp%5#0 ? block@4 : block@5 to goto block@4
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@11 with block@2 in block@12
debug: Merged linear block@11 into block@2
debug: Replaced predecessor block@12 with block@2 in block@7
debug: Merged linear block@12 into block@2
debug: Replaced predecessor block@4 with block@3 in block@9
debug: Merged linear block@4 into block@3
debug: Replaced predecessor block@9 with block@3 in block@10
debug: Merged linear block@9 into block@3
debug: Replaced predecessor block@10 with block@3 in block@6
debug: Merged linear block@10 into block@3
debug: Replaced predecessor block@6 with block@3 in block@7
debug: Merged linear block@6 into block@3
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@7
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@5
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.asset.contract.Reference.opt_into_asset
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: maybe_value%0#0, reinterpret_bool%0#0
debug: selected maybe_value%0#0 from equivalence set
debug: Copy propagation made 1 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.asset.contract.Reference.is_opted_asset
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== value%1#0 0u) to (! value%1#0)
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine test_cases.asset.contract.Reference.__init__
debug: removing unused subroutine test_cases.asset.contract.Reference.approval_program
debug: Unused subroutines removed
debug: Output IR to asset/out/Reference.ir/Reference.approval.001.ssa.opt.ir
debug: Begin optimization pass 2/100
debug: marking single-use function test_cases.asset.contract.Reference.opt_into_asset for inlining
debug: marking single-use function test_cases.asset.contract.Reference.is_opted_asset for inlining
debug: Optimizing subroutine test_cases.asset.contract.Reference.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
asset/contract.py:27:17 debug: inlining call to test_cases.asset.contract.Reference.is_opted_asset in test_cases.asset.contract.Reference.__algopy_entrypoint_with_init
asset/contract.py:24:17 debug: inlining call to test_cases.asset.contract.Reference.opt_into_asset in test_cases.asset.contract.Reference.__algopy_entrypoint_with_init
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: asset#0, asset#3
debug: selected asset#0 from equivalence set
debug: Found equivalence set: asset#1, asset#2
debug: selected asset#1 from equivalence set
debug: Copy propagation made 16 modifications
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@14 with block@5 in block@15
debug: Merged linear block@14 into block@5
debug: Replaced predecessor block@15 with block@5 in block@11
debug: Merged linear block@15 into block@5
debug: Replaced predecessor block@12 with block@6 in block@13
debug: Merged linear block@12 into block@6
debug: Replaced predecessor block@13 with block@6 in block@11
debug: Merged linear block@13 into block@6
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.asset.contract.Reference.opt_into_asset
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: Optimizing subroutine test_cases.asset.contract.Reference.is_opted_asset
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: removing unused subroutine test_cases.asset.contract.Reference.opt_into_asset
debug: removing unused subroutine test_cases.asset.contract.Reference.is_opted_asset
debug: Unused subroutines removed
debug: Output IR to asset/out/Reference.ir/Reference.approval.002.ssa.opt.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.asset.contract.Reference.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 3, ending loop
debug: optimizing clear program of test_cases.asset.contract.Reference at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.asset.contract.Reference.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: lowering array IR nodes in approval program of test_cases.asset.contract.Reference
debug: Output IR to asset/out/Reference.ir/Reference.approval.100.ssa.array.ir
debug: lowering array IR nodes in clear program of test_cases.asset.contract.Reference
debug: Output IR to asset/out/Reference.ir/Reference.clear.100.ssa.array.ir
debug: optimizing approval program of test_cases.asset.contract.Reference at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.asset.contract.Reference.__algopy_entrypoint_with_init
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: optimizing clear program of test_cases.asset.contract.Reference at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.asset.contract.Reference.clear_state_program
debug: Optimizer: Perform Subroutine Inlining
debug: Optimizer: Split Parallel Copies
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Elide Itxn Field Calls
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Replace Compiled References
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizer: Constant Reads And Unobserved Writes Elimination
debug: No optimizations performed in pass 1, ending loop
debug: removing local static slots in approval program of test_cases.asset.contract.Reference
debug: auto reserving slots in test_cases.asset.contract.Reference.__algopy_entrypoint_with_init, []
debug: Slot allocation not required
debug: Output IR to asset/out/Reference.ir/Reference.approval.300.ssa.slot.ir
debug: removing local static slots in clear program of test_cases.asset.contract.Reference
asset/contract.py:32 debug: auto reserving slots in test_cases.asset.contract.Reference.clear_state_program, []
debug: Slot allocation not required
debug: Output IR to asset/out/Reference.ir/Reference.clear.300.ssa.slot.ir
debug: Performing SSA IR destructuring for test_cases.asset.contract.Reference.__algopy_entrypoint_with_init
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.asset.contract.Reference.__algopy_entrypoint_with_init using strategy RootOperandGrouping
debug: Coalescing tmp%0#0 with [tmp%0#2]
debug: Coalescing tmp%1#1 with [tmp%1#2]
debug: Coalescing tmp%3#0 with [tmp%3#2, tmp%3#1]
debug: Coalescing asset#0 with [asset#1]
debug: Coalescing tmp%2#1 with [tmp%2#2]
debug: Coalescing maybe_value%0#0 with [maybe_value%0#1]
debug: Coalescing maybe_exists%0#0 with [maybe_exists%0#1]
debug: Coalescing tmp%4#0 with [tmp%4#2]
debug: Coalescing tmp%5#0 with [tmp%5#1]
debug: Coalescing resulted in 33 replacement/s
debug: Sequentializing parallel copies in test_cases.asset.contract.Reference.__algopy_entrypoint_with_init
debug: Performing post-SSA optimizations at level 1
debug: Output IR to asset/out/Reference.ir/Reference.approval.400.destructured.ir
debug: Performing SSA IR destructuring for test_cases.asset.contract.Reference.clear_state_program
debug: Converting to CSSA
debug: Removing Phi nodes
debug: Coalescing local variables in test_cases.asset.contract.Reference.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.asset.contract.Reference.clear_state_program
debug: Performing post-SSA optimizations at level 1
debug: Output IR to asset/out/Reference.ir/Reference.clear.400.destructured.ir
debug: Inserted main_block@0.ops[1]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_block@0.ops[3]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_after_if_else@2.ops[1]: 'l-store-copy tmp%0#1 0'
debug: Replaced main_after_if_else@2.ops[3]: 'v-load tmp%0#1' with 'l-load tmp%0#1'
debug: Inserted main_after_if_else@2.ops[6]: 'l-store-copy tmp%1#1 0'
debug: Replaced main_after_if_else@2.ops[8]: 'v-load tmp%1#1' with 'l-load tmp%1#1'
debug: Inserted main_if_body@4.ops[1]: 'l-store-copy tmp%2#0 0'
debug: Replaced main_if_body@4.ops[3]: 'v-load tmp%2#0' with 'l-load tmp%2#0'
debug: Inserted main_if_body@4.ops[6]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_if_body@4.ops[8]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_if_body@5.ops[9]: 'l-store-copy tmp%2#1 0'
debug: Replaced main_if_body@5.ops[11]: 'v-load tmp%2#1' with 'l-load tmp%2#1'
debug: Inserted main_if_body@5.ops[22]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_if_body@5.ops[24]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_if_body@5.ops[35]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_if_body@5.ops[37]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_if_body@5.ops[5]: 'l-store-copy tmp%1#3 0'
debug: Replaced main_if_body@5.ops[8]: 'v-load tmp%1#3' with 'l-load tmp%1#3'
debug: Inserted main_if_body@5.ops[17]: 'l-store-copy maybe_exists%0#0 1'
debug: Replaced main_if_body@5.ops[20]: 'v-load maybe_exists%0#0' with 'l-load maybe_exists%0#0'
debug: Inserted main_if_body@5.ops[3]: 'l-store-copy tmp%0#3 0'
debug: Replaced main_if_body@5.ops[8]: 'v-load tmp%0#3' with 'l-load tmp%0#3'
debug: Inserted main_if_body@5.ops[20]: 'l-store-copy maybe_value%0#0 1'
debug: Replaced main_if_body@5.ops[24]: 'v-load maybe_value%0#0' with 'l-load maybe_value%0#0'
debug: Inserted main_if_body@5.ops[32]: 'l-store-copy asset#0 1'
debug: Replaced main_if_body@5.ops[44]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_if_body@5.ops[1]: 'l-store-copy asset#0 0'
debug: Replaced main_if_body@5.ops[32]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[1]: 'l-store-copy tmp%4#0 0'
debug: Replaced main_else_body@6.ops[3]: 'v-load tmp%4#0' with 'l-load tmp%4#0'
debug: Inserted main_else_body@6.ops[6]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_else_body@6.ops[8]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_else_body@6.ops[22]: 'l-store-copy tmp%0#0 0'
debug: Replaced main_else_body@6.ops[24]: 'v-load tmp%0#0' with 'l-load tmp%0#0'
debug: Inserted main_else_body@6.ops[35]: 'l-store-copy tmp%1#1 0'
debug: Replaced main_else_body@6.ops[37]: 'v-load tmp%1#1' with 'l-load tmp%1#1'
debug: Inserted main_else_body@6.ops[47]: 'l-store-copy tmp%2#1 0'
debug: Replaced main_else_body@6.ops[49]: 'v-load tmp%2#1' with 'l-load tmp%2#1'
debug: Inserted main_else_body@6.ops[59]: 'l-store-copy tmp%3#0 0'
debug: Replaced main_else_body@6.ops[61]: 'v-load tmp%3#0' with 'l-load tmp%3#0'
debug: Inserted main_else_body@6.ops[72]: 'l-store-copy tmp%4#1 0'
debug: Replaced main_else_body@6.ops[74]: 'v-load tmp%4#1' with 'l-load tmp%4#1'
debug: Inserted main_else_body@6.ops[85]: 'l-store-copy tmp%5#0 0'
debug: Replaced main_else_body@6.ops[87]: 'v-load tmp%5#0' with 'l-load tmp%5#0'
debug: Inserted main_else_body@6.ops[98]: 'l-store-copy tmp%6#0 0'
debug: Replaced main_else_body@6.ops[100]: 'v-load tmp%6#0' with 'l-load tmp%6#0'
debug: Inserted main_else_body@6.ops[114]: 'l-store-copy tmp%8#0 0'
debug: Replaced main_else_body@6.ops[116]: 'v-load tmp%8#0' with 'l-load tmp%8#0'
debug: Inserted main_else_body@6.ops[129]: 'l-store-copy tmp%10#0 0'
debug: Replaced main_else_body@6.ops[131]: 'v-load tmp%10#0' with 'l-load tmp%10#0'
debug: Inserted main_else_body@6.ops[144]: 'l-store-copy tmp%12#0 0'
debug: Replaced main_else_body@6.ops[146]: 'v-load tmp%12#0' with 'l-load tmp%12#0'
debug: Inserted main_else_body@6.ops[159]: 'l-store-copy tmp%14#0 0'
debug: Replaced main_else_body@6.ops[161]: 'v-load tmp%14#0' with 'l-load tmp%14#0'
debug: Inserted main_else_body@6.ops[174]: 'l-store-copy tmp%16#0 0'
debug: Replaced main_else_body@6.ops[176]: 'v-load tmp%16#0' with 'l-load tmp%16#0'
debug: Inserted main_else_body@6.ops[189]: 'l-store-copy tmp%18#0 0'
debug: Replaced main_else_body@6.ops[191]: 'v-load tmp%18#0' with 'l-load tmp%18#0'
debug: Inserted main_else_body@6.ops[194]: 'l-store-copy tmp%19#0 0'
debug: Replaced main_else_body@6.ops[196]: 'v-load tmp%19#0' with 'l-load tmp%19#0'
debug: Inserted main_else_body@6.ops[15]: 'l-store-copy maybe_exists%0#0 1'
debug: Replaced main_else_body@6.ops[18]: 'v-load maybe_exists%0#0' with 'l-load maybe_exists%0#0'
debug: Inserted main_else_body@6.ops[29]: 'l-store-copy check%0#0 1'
debug: Replaced main_else_body@6.ops[32]: 'v-load check%0#0' with 'l-load check%0#0'
debug: Inserted main_else_body@6.ops[43]: 'l-store-copy check%1#0 1'
debug: Replaced main_else_body@6.ops[46]: 'v-load check%1#0' with 'l-load check%1#0'
debug: Inserted main_else_body@6.ops[56]: 'l-store-copy check%2#0 1'
debug: Replaced main_else_body@6.ops[59]: 'v-load check%2#0' with 'l-load check%2#0'
debug: Inserted main_else_body@6.ops[69]: 'l-store-copy check%3#0 1'
debug: Replaced main_else_body@6.ops[72]: 'v-load check%3#0' with 'l-load check%3#0'
debug: Inserted main_else_body@6.ops[83]: 'l-store-copy check%4#0 1'
debug: Replaced main_else_body@6.ops[86]: 'v-load check%4#0' with 'l-load check%4#0'
debug: Inserted main_else_body@6.ops[97]: 'l-store-copy check%5#0 1'
debug: Replaced main_else_body@6.ops[100]: 'v-load check%5#0' with 'l-load check%5#0'
debug: Inserted main_else_body@6.ops[111]: 'l-store-copy check%6#0 1'
debug: Replaced main_else_body@6.ops[114]: 'v-load check%6#0' with 'l-load check%6#0'
debug: Inserted main_else_body@6.ops[118]: 'l-store-copy tmp%7#0 0'
debug: Replaced main_else_body@6.ops[121]: 'v-load tmp%7#0' with 'l-load tmp%7#0'
debug: Inserted main_else_body@6.ops[129]: 'l-store-copy check%7#0 1'
debug: Replaced main_else_body@6.ops[132]: 'v-load check%7#0' with 'l-load check%7#0'
debug: Inserted main_else_body@6.ops[135]: 'l-store-copy tmp%9#0 0'
debug: Replaced main_else_body@6.ops[138]: 'v-load tmp%9#0' with 'l-load tmp%9#0'
debug: Inserted main_else_body@6.ops[146]: 'l-store-copy check%8#0 1'
debug: Replaced main_else_body@6.ops[149]: 'v-load check%8#0' with 'l-load check%8#0'
debug: Inserted main_else_body@6.ops[152]: 'l-store-copy tmp%11#0 0'
debug: Replaced main_else_body@6.ops[155]: 'v-load tmp%11#0' with 'l-load tmp%11#0'
debug: Inserted main_else_body@6.ops[163]: 'l-store-copy check%9#0 1'
debug: Replaced main_else_body@6.ops[166]: 'v-load check%9#0' with 'l-load check%9#0'
debug: Inserted main_else_body@6.ops[169]: 'l-store-copy tmp%13#0 0'
debug: Replaced main_else_body@6.ops[172]: 'v-load tmp%13#0' with 'l-load tmp%13#0'
debug: Inserted main_else_body@6.ops[180]: 'l-store-copy check%10#0 1'
debug: Replaced main_else_body@6.ops[183]: 'v-load check%10#0' with 'l-load check%10#0'
debug: Inserted main_else_body@6.ops[186]: 'l-store-copy tmp%15#0 0'
debug: Replaced main_else_body@6.ops[189]: 'v-load tmp%15#0' with 'l-load tmp%15#0'
debug: Inserted main_else_body@6.ops[197]: 'l-store-copy check%11#0 1'
debug: Replaced main_else_body@6.ops[200]: 'v-load check%11#0' with 'l-load check%11#0'
debug: Inserted main_else_body@6.ops[203]: 'l-store-copy tmp%17#0 0'
debug: Replaced main_else_body@6.ops[206]: 'v-load tmp%17#0' with 'l-load tmp%17#0'
debug: Inserted main_else_body@6.ops[218]: 'l-store-copy tmp%21#0 1'
debug: Replaced main_else_body@6.ops[221]: 'v-load tmp%21#0' with 'l-load tmp%21#0'
debug: Inserted main_else_body@6.ops[17]: 'l-store-copy maybe_value%0#0 1'
debug: Replaced main_else_body@6.ops[21]: 'v-load maybe_value%0#0' with 'l-load maybe_value%0#0'
debug: Inserted main_else_body@6.ops[32]: 'l-store-copy value%0#0 1'
debug: Replaced main_else_body@6.ops[36]: 'v-load value%0#0' with 'l-load value%0#0'
debug: Inserted main_else_body@6.ops[47]: 'l-store-copy value%1#0 1'
debug: Replaced main_else_body@6.ops[51]: 'v-load value%1#0' with 'l-load value%1#0'
debug: Inserted main_else_body@6.ops[61]: 'l-store-copy value%2#0 1'
debug: Replaced main_else_body@6.ops[65]: 'v-load value%2#0' with 'l-load value%2#0'
debug: Inserted main_else_body@6.ops[75]: 'l-store-copy value%3#0 1'
debug: Replaced main_else_body@6.ops[79]: 'v-load value%3#0' with 'l-load value%3#0'
debug: Inserted main_else_body@6.ops[90]: 'l-store-copy value%4#0 1'
debug: Replaced main_else_body@6.ops[94]: 'v-load value%4#0' with 'l-load value%4#0'
debug: Inserted main_else_body@6.ops[105]: 'l-store-copy value%5#0 1'
debug: Replaced main_else_body@6.ops[109]: 'v-load value%5#0' with 'l-load value%5#0'
debug: Inserted main_else_body@6.ops[23]: 'l-store-copy asset#0 1'
debug: Replaced main_else_body@6.ops[29]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[139]: 'l-store-copy value%7#0 1'
debug: Replaced main_else_body@6.ops[146]: 'v-load value%7#0' with 'l-load value%7#0'
debug: Inserted main_else_body@6.ops[157]: 'l-store-copy value%8#0 1'
debug: Replaced main_else_body@6.ops[164]: 'v-load value%8#0' with 'l-load value%8#0'
debug: Inserted main_else_body@6.ops[175]: 'l-store-copy value%9#0 1'
debug: Replaced main_else_body@6.ops[182]: 'v-load value%9#0' with 'l-load value%9#0'
debug: Inserted main_else_body@6.ops[193]: 'l-store-copy value%10#0 1'
debug: Replaced main_else_body@6.ops[200]: 'v-load value%10#0' with 'l-load value%10#0'
debug: Inserted main_else_body@6.ops[211]: 'l-store-copy value%11#0 1'
debug: Replaced main_else_body@6.ops[218]: 'v-load value%11#0' with 'l-load value%11#0'
debug: Inserted main_else_body@6.ops[121]: 'l-store-copy value%6#0 1'
debug: Replaced main_else_body@6.ops[129]: 'v-load value%6#0' with 'l-load value%6#0'
debug: Inserted main_else_body@6.ops[11]: 'l-store-copy asset#0 0'
debug: Replaced main_else_body@6.ops[23]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[46]: 'l-store-copy asset#0 0'
debug: Replaced main_else_body@6.ops[60]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[61]: 'l-store-copy asset#0 0'
debug: Replaced main_else_body@6.ops[75]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[31]: 'l-store-copy asset#0 0'
debug: Replaced main_else_body@6.ops[46]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[77]: 'l-store-copy asset#0 0'
debug: Replaced main_else_body@6.ops[92]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[93]: 'l-store-copy asset#0 0'
debug: Replaced main_else_body@6.ops[108]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[109]: 'l-store-copy asset#0 0'
debug: Replaced main_else_body@6.ops[124]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[144]: 'l-store-copy asset#0 0'
debug: Replaced main_else_body@6.ops[162]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[163]: 'l-store-copy asset#0 0'
debug: Replaced main_else_body@6.ops[181]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[182]: 'l-store-copy asset#0 0'
debug: Replaced main_else_body@6.ops[200]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[201]: 'l-store-copy asset#0 0'
debug: Replaced main_else_body@6.ops[219]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[125]: 'l-store-copy asset#0 0'
debug: Replaced main_else_body@6.ops[144]: 'v-load asset#0' with 'l-load asset#0'
debug: Inserted main_else_body@6.ops[221]: 'l-store-copy asset#0 0'
debug: Replaced main_else_body@6.ops[243]: 'v-load asset#0' with 'l-load asset#0'
debug: Found 3 edge set/s for test_cases.asset.contract.Reference.__algopy_entrypoint_with_init
debug: optimizing TEAL subroutine ops test_cases.asset.contract.Reference.__algopy_entrypoint_with_init() -> uint64:
debug: optimizing TEAL subroutine blocks test_cases.asset.contract.Reference.__algopy_entrypoint_with_init() -> uint64:
debug: inlining single reference block main_block@0 into main
debug: inlining single reference block main_call___init__@1 into main
debug: inlining single reference block main_if_body@4 into main_after_if_else@2
debug: inlining single reference block main_if_body@5 into main_after_if_else@2
debug: removing explicit jump to fall-through block main_after_if_else@2
debug: removing explicit jump to fall-through block main_after_if_else@11
asset/contract.py:32 debug: optimizing TEAL subroutine ops test_cases.asset.contract.Reference.clear_state_program() -> uint64:
asset/contract.py:32 debug: optimizing TEAL subroutine blocks test_cases.asset.contract.Reference.clear_state_program() -> uint64:
debug: inlining single reference block main_block@0 into main
info: Writing asset/out/Reference.approval.teal
info: Writing asset/out/Reference.clear.teal
info: Writing asset/out/Reference.approval.bin
info: Writing asset/out/Reference.clear.bin
info: Writing asset/out/Reference.approval.stats.txt
info: Writing asset/out/Reference.clear.stats.txt
info: Writing asset/out/Reference.approval.puya.map
info: Writing asset/out/Reference.clear.puya.map