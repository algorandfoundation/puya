debug: PuyaOptions(paths=['asset'], output_teal=True, output_arc32=True, output_awst=False, output_ssa_ir=True, output_optimization_ir=True, output_cssa_ir=True, output_post_ssa_ir=True, output_parallel_copies_ir=True, output_final_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>)
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L18
debug: Terminated block@0: // L18
debug: Sealing block@0: // L37
debug: Terminated block@0: // L37
debug: Sealing block@0: // L55
debug: Terminated block@0: // L55
debug: Sealing block@0: // L82
debug: Terminated block@0: // L82
debug: Sealing block@None: // if_body_L101
debug: Sealing block@None: // else_body_L101
debug: Terminated block@1: // if_body_L101
debug: Sealing block@2: // after_if_else_L101
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L101
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L82
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L101
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L82
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L101
debug: Sealing block@None: // ternary_true_L105
debug: Sealing block@None: // ternary_false_L105
debug: Terminated block@3: // ternary_true_L105
debug: Terminated block@4: // ternary_false_L105
debug: Sealing block@5: // ternary_merge_L105
debug: Created Phi assignment: let ternary_result%9#2: uint64 = undefined while trying to resolve 'ternary_result%9' in block@5: // ternary_merge_L105
debug: Added ternary_result%9#0 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3) in block@3: // ternary_true_L105
debug: Added ternary_result%9#1 to Phi node: let ternary_result%9#2: uint64 = φ(ternary_result%9#0 <- block@3, ternary_result%9#1 <- block@4) in block@4: // ternary_false_L105
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L101
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L82
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L105
debug: Sealing block@6: // for_preamble_L105
debug: Terminated block@6: // for_preamble_L105
debug: Looking for 'range_item%11' in an unsealed block creating an incomplete Phi: block@7: // for_header_L105
debug: Created Phi assignment: let range_item%11#1: uint64 = undefined while trying to resolve 'range_item%11' in block@7: // for_header_L105
debug: Terminated block@7: // for_header_L105
debug: Looking for 'range_item%11' in an unsealed block creating an incomplete Phi: block@8: // for_body_L105
debug: Created Phi assignment: let range_item%11#2: uint64 = undefined while trying to resolve 'range_item%11' in block@8: // for_body_L105
debug: Looking for 'source' in an unsealed block creating an incomplete Phi: block@8: // for_body_L105
debug: Created Phi assignment: let source#3: bytes = undefined while trying to resolve 'source' in block@8: // for_body_L105
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@8: // for_body_L105
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@8: // for_body_L105
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@8: // for_body_L105
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@8: // for_body_L105
debug: Terminated block@8: // for_body_L105
debug: Sealing block@9: // for_footer_L105
debug: Terminated block@9: // for_footer_L105
debug: Sealing block@10: // for_increment_L105
debug: Terminated block@10: // for_increment_L105
debug: Sealing block@7: // for_header_L105
debug: Added range_item%11#0 to Phi node: let range_item%11#1: uint64 = φ(range_item%11#0 <- block@6) in block@6: // for_preamble_L105
debug: Added range_item%11#3 to Phi node: let range_item%11#1: uint64 = φ(range_item%11#0 <- block@6, range_item%11#3 <- block@10) in block@10: // for_increment_L105
debug: Sealing block@8: // for_body_L105
debug: Added range_item%11#1 to Phi node: let range_item%11#2: uint64 = φ(range_item%11#1 <- block@7) in block@7: // for_header_L105
debug: Replacing trivial Phi node: let range_item%11#2: uint64 = φ(range_item%11#1 <- block@7) (range_item%11#2) with range_item%11#1
debug: Deleting Phi assignment: let range_item%11#2: uint64 = φ(range_item%11#1 <- block@7)
debug: Replaced trivial Phi node: let range_item%11#2: uint64 = φ(range_item%11#1 <- block@7) (range_item%11#2) with range_item%11#1 in current definition for 2 blocks
debug: Created Phi assignment: let source#5: bytes = undefined while trying to resolve 'source' in block@7: // for_header_L105
debug: Created Phi assignment: let source#6: bytes = undefined while trying to resolve 'source' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let source#7: bytes = undefined while trying to resolve 'source' in block@2: // after_if_else_L101
debug: Added source#1 to Phi node: let source#7: bytes = φ(source#1 <- block@0) in block@0: // L82
debug: Added source#2 to Phi node: let source#7: bytes = φ(source#1 <- block@0, source#2 <- block@1) in block@1: // if_body_L101
debug: Added source#7 to Phi node: let source#6: bytes = φ(source#7 <- block@3) in block@3: // ternary_true_L105
debug: Added source#7 to Phi node: let source#6: bytes = φ(source#7 <- block@3, source#7 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let source#6: bytes = φ(source#7 <- block@3, source#7 <- block@4) (source#6) with source#7
debug: Deleting Phi assignment: let source#6: bytes = φ(source#7 <- block@3, source#7 <- block@4)
debug: Replaced trivial Phi node: let source#6: bytes = φ(source#7 <- block@3, source#7 <- block@4) (source#6) with source#7 in current definition for 1 blocks
debug: Added source#7 to Phi node: let source#5: bytes = φ(source#7 <- block@6) in block@6: // for_preamble_L105
debug: Added source#4 to Phi node: let source#5: bytes = φ(source#7 <- block@6, source#4 <- block@10) in block@10: // for_increment_L105
debug: Added source#5 to Phi node: let source#3: bytes = φ(source#5 <- block@7) in block@7: // for_header_L105
debug: Replacing trivial Phi node: let source#3: bytes = φ(source#5 <- block@7) (source#3) with source#5
debug: Deleting Phi assignment: let source#3: bytes = φ(source#5 <- block@7)
debug: Replaced trivial Phi node: let source#3: bytes = φ(source#5 <- block@7) (source#3) with source#5 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_header_L105
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L105
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L105
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@6) in block@6: // for_preamble_L105
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@6, write_offset#2 <- block@10) in block@10: // for_increment_L105
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@7) in block@7: // for_header_L105
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@7) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@7)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@7) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_header_L105
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L105
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L101
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L82
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L101
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L105
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L105
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6) in block@6: // for_preamble_L105
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6, new_items_bytes#1 <- block@10) in block@10: // for_increment_L105
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@7) in block@7: // for_header_L105
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@7) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@7)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6, new_items_bytes#2 <- block@10) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6, new_items_bytes#2 <- block@10)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@7) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6, new_items_bytes#2 <- block@10) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L105
debug: Created Phi assignment: let source#8: bytes = undefined while trying to resolve 'source' in block@11: // after_for_L105
debug: Added source#7 to Phi node: let source#8: bytes = φ(source#7 <- block@5) in block@5: // ternary_merge_L105
debug: Added source#5 to Phi node: let source#8: bytes = φ(source#7 <- block@5, source#5 <- block@7) in block@7: // for_header_L105
debug: Terminated block@11: // after_for_L105
debug: Sealing block@0: // L113
debug: Terminated block@0: // L113
debug: Sealing block@0: // L134
debug: Terminated block@0: // L134
debug: Sealing block@0: // L161
debug: Terminated block@0: // L161
debug: Sealing block@0: // L190
debug: Terminated block@0: // L190
debug: Sealing block@0: // L209
debug: Terminated block@0: // L209
debug: Sealing block@0: // L227
debug: Terminated block@0: // L227
debug: Sealing block@None: // if_body_L241
debug: Sealing block@None: // else_body_L241
debug: Terminated block@1: // if_body_L241
debug: Terminated block@2: // else_body_L241
debug: Sealing block@3: // after_if_else_L241
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L241
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L241
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L241
debug: Sealing block@4: // for_preamble_L246
debug: Terminated block@4: // for_preamble_L246
debug: Looking for 'range_item%2' in an unsealed block creating an incomplete Phi: block@5: // for_header_L246
debug: Created Phi assignment: let range_item%2#1: uint64 = undefined while trying to resolve 'range_item%2' in block@5: // for_header_L246
debug: Terminated block@5: // for_header_L246
debug: Looking for 'range_item%2' in an unsealed block creating an incomplete Phi: block@6: // for_body_L246
debug: Created Phi assignment: let range_item%2#2: uint64 = undefined while trying to resolve 'range_item%2' in block@6: // for_body_L246
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@6: // for_body_L246
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@6: // for_body_L246
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@6: // for_body_L246
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@6: // for_body_L246
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@6: // for_body_L246
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@6: // for_body_L246
debug: Terminated block@6: // for_body_L246
debug: Sealing block@7: // for_footer_L246
debug: Terminated block@7: // for_footer_L246
debug: Sealing block@8: // for_increment_L246
debug: Terminated block@8: // for_increment_L246
debug: Sealing block@5: // for_header_L246
debug: Added range_item%2#0 to Phi node: let range_item%2#1: uint64 = φ(range_item%2#0 <- block@4) in block@4: // for_preamble_L246
debug: Added range_item%2#3 to Phi node: let range_item%2#1: uint64 = φ(range_item%2#0 <- block@4, range_item%2#3 <- block@8) in block@8: // for_increment_L246
debug: Sealing block@6: // for_body_L246
debug: Added range_item%2#1 to Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@5) in block@5: // for_header_L246
debug: Replacing trivial Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@5) (range_item%2#2) with range_item%2#1
debug: Deleting Phi assignment: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@5)
debug: Replaced trivial Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@5) (range_item%2#2) with range_item%2#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_header_L246
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L241
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L241
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@4) in block@4: // for_preamble_L246
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@4, tail_cursor#3 <- block@8) in block@8: // for_increment_L246
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@5) in block@5: // for_header_L246
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@5) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@5)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@5) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@5: // for_header_L246
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L241
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L241
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@4) in block@4: // for_preamble_L246
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@4, array_data#2 <- block@8) in block@8: // for_increment_L246
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@5) in block@5: // for_header_L246
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@5) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@5)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@5) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_header_L246
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L241
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L241
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@4) in block@4: // for_preamble_L246
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@4, header_cursor#2 <- block@8) in block@8: // for_increment_L246
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@5) in block@5: // for_header_L246
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@5) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@5)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@5) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L246
debug: Created Phi assignment: let array_data#5: bytes = undefined while trying to resolve 'array_data' in block@9: // after_for_L246
debug: Added array_data#0 to Phi node: let array_data#5: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L241
debug: Added array_data#3 to Phi node: let array_data#5: bytes = φ(array_data#0 <- block@3, array_data#3 <- block@5) in block@5: // for_header_L246
debug: Terminated block@9: // after_for_L246
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L34
debug: Terminated block@0: // L34
debug: Sealing block@0: // L51
debug: Terminated block@0: // L51
debug: Sealing block@0: // L15
debug: Terminated block@0: // L15
debug: Sealing block@0: // L18
debug: Terminated block@0: // L18
debug: Sealing block@None: // on_create_L15
debug: Terminated block@1: // on_create_L15
debug: Sealing block@2: // entrypoint_L15
debug: Terminated block@2: // entrypoint_L15
debug: Sealing block@None: // if_body_L19
debug: Sealing block@None: // else_body_L19
debug: Terminated block@3: // if_body_L19
debug: Sealing block@None: // if_body_L20
debug: Sealing block@None: // else_body_L20
debug: Terminated block@4: // if_body_L20
debug: Terminated block@5: // else_body_L20
debug: Sealing block@None: // if_body_L23
debug: Sealing block@None: // else_body_L23
debug: Terminated block@6: // if_body_L23
debug: Terminated block@7: // else_body_L23
debug: Sealing block@8: // after_if_else_L23
debug: Terminated block@8: // after_if_else_L23
debug: Sealing block@9: // after_if_else_L20
debug: Terminated block@9: // after_if_else_L20
debug: Sealing block@10: // after_if_else_L19
debug: Terminated block@10: // after_if_else_L19
debug: Sealing block@0: // L30
debug: Terminated block@0: // L30
debug: Output IR to asset/out/contract_Reference.ssa.ir
info: Optimizing test_cases.asset.contract.Reference at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.asset.contract.Reference.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@8: // after_if_else_L23 with block@6: // if_body_L23 in block@9: // after_if_else_L20
debug: Merged linear block@8: // after_if_else_L23 into block@6: // if_body_L23
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@9: // after_if_else_L20
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.asset.contract.Reference.opt_into_asset
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.asset.contract.Reference.is_opted_asset
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.asset.contract.Reference.__init__
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.asset.contract.Reference.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to asset/out/contract_Reference.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.asset.contract.Reference.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.asset.contract.Reference.opt_into_asset
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.asset.contract.Reference.is_opted_asset
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.asset.contract.Reference.__init__
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.asset.contract.Reference.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to asset/out/contract_Reference.cssa.ir
debug: Removing Phis from test_cases.asset.contract.Reference.approval_program
debug: Removing Phis from test_cases.asset.contract.Reference.opt_into_asset
debug: Removing Phis from test_cases.asset.contract.Reference.is_opted_asset
debug: Removing Phis from test_cases.asset.contract.Reference.__init__
debug: Removing Phis from test_cases.asset.contract.Reference.clear_state_program
debug: Output IR to asset/out/contract_Reference.post_ssa.ir
debug: Sequentializing parallel copies in test_cases.asset.contract.Reference.approval_program
debug: Sequentializing parallel copies in test_cases.asset.contract.Reference.opt_into_asset
debug: Sequentializing parallel copies in test_cases.asset.contract.Reference.is_opted_asset
debug: Sequentializing parallel copies in test_cases.asset.contract.Reference.__init__
debug: Sequentializing parallel copies in test_cases.asset.contract.Reference.clear_state_program
debug: Output IR to asset/out/contract_Reference.parallel_copies.ir
debug: Coalescing local variables in test_cases.asset.contract.Reference.approval_program using strategy RootOperandGrouping
debug: Coalescing asset#0 with [asset#1]
debug: Coalescing resulted in 2 replacement/s
debug: Coalescing local variables in test_cases.asset.contract.Reference.opt_into_asset using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.asset.contract.Reference.is_opted_asset using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.asset.contract.Reference.__init__ using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.asset.contract.Reference.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to asset/out/contract_Reference.final.ir
debug: Inserted main_block@0.ops[1]: 'store app_id%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load app_id%0#0' with 'load app_id%0#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[1]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[3]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted main_entrypoint@2.ops[6]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced main_entrypoint@2.ops[8]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[1]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[3]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted main_if_body@3.ops[6]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced main_if_body@3.ops[8]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted main_if_body@4.ops[1]: 'store asset#0 to l-stack (copy)'
debug: Replaced main_if_body@4.ops[3]: 'load asset#0' with 'load asset#0 from l-stack (no copy)'
debug: Inserted main_else_body@5.ops[1]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced main_else_body@5.ops[3]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted main_else_body@5.ops[6]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced main_else_body@5.ops[8]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted main_if_body@6.ops[1]: 'store asset#0 to l-stack (copy)'
debug: Replaced main_if_body@6.ops[3]: 'load asset#0' with 'load asset#0 from l-stack (no copy)'
debug: Found 4 edge set/s for test_cases.asset.contract.Reference.approval_program
debug: Inserted opt_into_asset_block@0.ops[7]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[9]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[20]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[22]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[33]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[35]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[3]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[6]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[15]: 'store app_global_get_ex_did_exist%4#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[18]: 'load app_global_get_ex_did_exist%4#0' with 'load app_global_get_ex_did_exist%4#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[1]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[6]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted opt_into_asset_block@0.ops[18]: 'store app_global_get_ex_value%3#0 to l-stack (copy)'
debug: Replaced opt_into_asset_block@0.ops[22]: 'load app_global_get_ex_value%3#0' with 'load app_global_get_ex_value%3#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[10]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[12]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[23]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[25]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[35]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[37]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[47]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[49]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[60]: 'store tmp%14#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[62]: 'load tmp%14#0' with 'load tmp%14#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[73]: 'store tmp%17#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[75]: 'load tmp%17#0' with 'load tmp%17#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[86]: 'store tmp%20#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[88]: 'load tmp%20#0' with 'load tmp%20#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[102]: 'store tmp%24#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[104]: 'load tmp%24#0' with 'load tmp%24#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[117]: 'store tmp%28#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[119]: 'load tmp%28#0' with 'load tmp%28#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[132]: 'store tmp%32#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[134]: 'load tmp%32#0' with 'load tmp%32#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[147]: 'store tmp%36#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[149]: 'load tmp%36#0' with 'load tmp%36#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[162]: 'store tmp%40#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[164]: 'load tmp%40#0' with 'load tmp%40#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[177]: 'store tmp%44#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[179]: 'load tmp%44#0' with 'load tmp%44#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[3]: 'store app_global_get_ex_did_exist%1#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[6]: 'load app_global_get_ex_did_exist%1#0' with 'load app_global_get_ex_did_exist%1#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[17]: 'store maybe_value_did_exist%4#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[20]: 'load maybe_value_did_exist%4#0' with 'load maybe_value_did_exist%4#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[31]: 'store maybe_value_did_exist%7#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[34]: 'load maybe_value_did_exist%7#0' with 'load maybe_value_did_exist%7#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[44]: 'store maybe_value_did_exist%10#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[47]: 'load maybe_value_did_exist%10#0' with 'load maybe_value_did_exist%10#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[57]: 'store maybe_value_did_exist%13#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[60]: 'load maybe_value_did_exist%13#0' with 'load maybe_value_did_exist%13#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[71]: 'store maybe_value_did_exist%16#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[74]: 'load maybe_value_did_exist%16#0' with 'load maybe_value_did_exist%16#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[85]: 'store maybe_value_did_exist%19#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[88]: 'load maybe_value_did_exist%19#0' with 'load maybe_value_did_exist%19#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[99]: 'store maybe_value_did_exist%22#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[102]: 'load maybe_value_did_exist%22#0' with 'load maybe_value_did_exist%22#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[106]: 'store tmp%23#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[109]: 'load tmp%23#0' with 'load tmp%23#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[117]: 'store maybe_value_did_exist%26#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[120]: 'load maybe_value_did_exist%26#0' with 'load maybe_value_did_exist%26#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[123]: 'store tmp%27#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[126]: 'load tmp%27#0' with 'load tmp%27#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[134]: 'store maybe_value_did_exist%30#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[137]: 'load maybe_value_did_exist%30#0' with 'load maybe_value_did_exist%30#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[140]: 'store tmp%31#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[143]: 'load tmp%31#0' with 'load tmp%31#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[151]: 'store maybe_value_did_exist%34#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[154]: 'load maybe_value_did_exist%34#0' with 'load maybe_value_did_exist%34#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[157]: 'store tmp%35#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[160]: 'load tmp%35#0' with 'load tmp%35#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[168]: 'store maybe_value_did_exist%38#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[171]: 'load maybe_value_did_exist%38#0' with 'load maybe_value_did_exist%38#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[174]: 'store tmp%39#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[177]: 'load tmp%39#0' with 'load tmp%39#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[185]: 'store maybe_value_did_exist%42#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[188]: 'load maybe_value_did_exist%42#0' with 'load maybe_value_did_exist%42#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[191]: 'store tmp%43#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[194]: 'load tmp%43#0' with 'load tmp%43#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[5]: 'store app_global_get_ex_value%0#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[9]: 'load app_global_get_ex_value%0#0' with 'load app_global_get_ex_value%0#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[20]: 'store maybe_value%3#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[24]: 'load maybe_value%3#0' with 'load maybe_value%3#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[35]: 'store maybe_value%6#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[39]: 'load maybe_value%6#0' with 'load maybe_value%6#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[49]: 'store maybe_value%9#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[53]: 'load maybe_value%9#0' with 'load maybe_value%9#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[63]: 'store maybe_value%12#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[67]: 'load maybe_value%12#0' with 'load maybe_value%12#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[78]: 'store maybe_value%15#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[82]: 'load maybe_value%15#0' with 'load maybe_value%15#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[93]: 'store maybe_value%18#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[97]: 'load maybe_value%18#0' with 'load maybe_value%18#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[126]: 'store maybe_value%25#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[133]: 'load maybe_value%25#0' with 'load maybe_value%25#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[144]: 'store maybe_value%29#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[151]: 'load maybe_value%29#0' with 'load maybe_value%29#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[162]: 'store maybe_value%33#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[169]: 'load maybe_value%33#0' with 'load maybe_value%33#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[180]: 'store maybe_value%37#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[187]: 'load maybe_value%37#0' with 'load maybe_value%37#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[198]: 'store maybe_value%41#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[205]: 'load maybe_value%41#0' with 'load maybe_value%41#0 from l-stack (no copy)'
debug: Inserted is_opted_asset_block@0.ops[108]: 'store maybe_value%21#0 to l-stack (copy)'
debug: Replaced is_opted_asset_block@0.ops[116]: 'load maybe_value%21#0' with 'load maybe_value%21#0 from l-stack (no copy)'
info: Writing asset/out/contract.approval.teal
info: Writing asset/out/contract.approval.debug.teal
info: Writing asset/out/contract.clear.teal
info: Writing asset/out/contract.clear.debug.teal