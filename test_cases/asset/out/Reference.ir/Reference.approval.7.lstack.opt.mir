// Op                                                                                     Stack (out)
// test_cases.asset.contract.Reference.__algopy_entrypoint_with_init() -> uint64:
subroutine main:
    main_block@0:
        txn ApplicationID                                                                 tmp%0#0
        bz main_call___init__@1 ; b main_after_if_else@2

    main_call___init__@1:
        // asset/contract.py:18
        // self.asa = Asset()
        byte "asa"                                                                        "asa"
        int 0                                                                             "asa",0
        app_global_put
        b main_after_if_else@2

    main_after_if_else@2:
        // asset/contract.py:21
        // if Txn.num_app_args == 1:
        txn NumAppArgs                                                                    tmp%0#1
        int 1                                                                             tmp%0#1,1
        ==                                                                                tmp%1#1
        bz main_after_if_else@11 ; b main_if_body@4

    main_if_body@4:
        // asset/contract.py:22
        // if Txn.application_args(0) == b"opt_in":
        txna ApplicationArgs 0                                                            tmp%2#0
        byte 0x6f70745f696e                                                               tmp%2#0,0x6f70745f696e
        ==                                                                                tmp%3#0
        bz main_else_body@6 ; b main_if_body@5

    main_if_body@5:
        // asset/contract.py:23
        // asset = Txn.assets(0)
        txna Assets 0                                                                     asset#0
        // asset/contract.py:38
        // assert Txn.sender == Global.creator_address, "Only creator can opt in to ASA"
        txn Sender                                                                        asset#0,tmp%0#3
        global CreatorAddress                                                             asset#0,tmp%0#3,tmp%1#3
        l-load tmp%0#3 1                                                                  asset#0,tmp%1#3,tmp%0#3
        l-load tmp%1#3 1                                                                  asset#0,tmp%0#3,tmp%1#3
        ==                                                                                asset#0,tmp%2#1
        assert // Only creator can opt in to ASA                                          asset#0
        // asset/contract.py:40
        // assert not self.asa, "ASA already opted in"
        int 0                                                                             asset#0,0
        byte "asa"                                                                        asset#0,0,"asa"
        app_global_get_ex                                                                 asset#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.asa exists                                                   asset#0,maybe_value%0#0
        l-load maybe_value%0#0 0                                                          asset#0,maybe_value%0#0
        !                                                                                 asset#0,tmp%3#0
        assert // ASA already opted in                                                    asset#0
        // asset/contract.py:42
        // self.asa = asset
        byte "asa"                                                                        asset#0,"asa"
        l-load-copy asset#0 1                                                             asset#0,"asa",asset#0 (copy)
        app_global_put                                                                    asset#0
        // asset/contract.py:45
        // ITxnCreate.begin()
        itxn_begin                                                                        asset#0
        // asset/contract.py:46
        // ITxnCreate.set_type_enum(TransactionType.AssetTransfer)
        int axfer                                                                         asset#0,axfer
        itxn_field TypeEnum                                                               asset#0
        // asset/contract.py:47
        // ITxnCreate.set_fee(UInt64(0))  # cover fee with outer txn
        int 0                                                                             asset#0,0
        itxn_field Fee                                                                    asset#0
        // asset/contract.py:48
        // ITxnCreate.set_asset_receiver(Global.current_application_address)
        global CurrentApplicationAddress                                                  asset#0,tmp%4#1
        itxn_field AssetReceiver                                                          asset#0
        // asset/contract.py:49
        // ITxnCreate.set_xfer_asset(asset)
        l-load asset#0 0                                                                  asset#0
        itxn_field XferAsset
        // asset/contract.py:50
        // ITxnCreate.submit()
        itxn_submit
        b main_after_if_else@11

    main_else_body@6:
        // asset/contract.py:25
        // elif Txn.application_args(0) == b"is_opted_in":
        txna ApplicationArgs 0                                                            tmp%5#0
        byte 0x69735f6f707465645f696e                                                     tmp%5#0,0x69735f6f707465645f696e
        ==                                                                                tmp%6#0
        assert // Expected opt_in or is_opted_in
        // asset/contract.py:26
        // asset = Txn.assets(0)
        txna Assets 0                                                                     asset#0
        // asset/contract.py:54
        // assert self.asa == asset, "asset self.asa == asset"
        int 0                                                                             asset#0,0
        byte "asa"                                                                        asset#0,0,"asa"
        app_global_get_ex                                                                 asset#0,maybe_value%0#0,maybe_exists%0#0
        assert // check self.asa exists                                                   asset#0,maybe_value%0#0
        l-load maybe_value%0#0 0                                                          asset#0,maybe_value%0#0
        l-load-copy asset#0 1                                                             asset#0,maybe_value%0#0,asset#0 (copy)
        ==                                                                                asset#0,tmp%0#0
        assert // asset self.asa == asset                                                 asset#0
        // asset/contract.py:55
        // assert asset.total == 10000000, "total"
        l-load-copy asset#0 0                                                             asset#0,asset#0 (copy)
        asset_params_get AssetTotal                                                       asset#0,value%0#0,check%0#0
        assert // asset exists                                                            asset#0,value%0#0
        l-load value%0#0 0                                                                asset#0,value%0#0
        int 10000000                                                                      asset#0,value%0#0,10000000
        ==                                                                                asset#0,tmp%1#1
        assert // total                                                                   asset#0
        // asset/contract.py:56
        // assert asset.decimals == 0, "decimals"
        l-load-copy asset#0 0                                                             asset#0,asset#0 (copy)
        asset_params_get AssetDecimals                                                    asset#0,value%1#0,check%1#0
        assert // asset exists                                                            asset#0,value%1#0
        l-load value%1#0 0                                                                asset#0,value%1#0
        !                                                                                 asset#0,tmp%2#1
        assert // decimals                                                                asset#0
        // asset/contract.py:57
        // assert not asset.default_frozen, "default frozen"
        l-load-copy asset#0 0                                                             asset#0,asset#0 (copy)
        asset_params_get AssetDefaultFrozen                                               asset#0,value%2#0,check%2#0
        assert // asset exists                                                            asset#0,value%2#0
        l-load value%2#0 0                                                                asset#0,value%2#0
        !                                                                                 asset#0,tmp%3#0
        assert // default frozen                                                          asset#0
        // asset/contract.py:58
        // assert asset.unit_name == b"a", "unit_name"
        l-load-copy asset#0 0                                                             asset#0,asset#0 (copy)
        asset_params_get AssetUnitName                                                    asset#0,value%3#0,check%3#0
        assert // asset exists                                                            asset#0,value%3#0
        l-load value%3#0 0                                                                asset#0,value%3#0
        byte 0x61                                                                         asset#0,value%3#0,0x61
        ==                                                                                asset#0,tmp%4#0
        assert // unit_name                                                               asset#0
        // asset/contract.py:59
        // assert asset.name == b"asset a", "name"
        l-load-copy asset#0 0                                                             asset#0,asset#0 (copy)
        asset_params_get AssetName                                                        asset#0,value%4#0,check%4#0
        assert // asset exists                                                            asset#0,value%4#0
        l-load value%4#0 0                                                                asset#0,value%4#0
        byte 0x61737365742061                                                             asset#0,value%4#0,0x61737365742061
        ==                                                                                asset#0,tmp%5#1
        assert // name                                                                    asset#0
        // asset/contract.py:60
        // assert asset.url == b"", "URL"
        l-load-copy asset#0 0                                                             asset#0,asset#0 (copy)
        asset_params_get AssetURL                                                         asset#0,value%5#0,check%5#0
        assert // asset exists                                                            asset#0,value%5#0
        l-load value%5#0 0                                                                asset#0,value%5#0
        byte 0x                                                                           asset#0,value%5#0,0x
        ==                                                                                asset#0,tmp%6#0
        assert // URL                                                                     asset#0
        // asset/contract.py:61
        // assert asset.metadata_hash == bzero(32), "hash"
        l-load-copy asset#0 0                                                             asset#0,asset#0 (copy)
        asset_params_get AssetMetadataHash                                                asset#0,value%6#0,check%6#0
        assert // asset exists                                                            asset#0,value%6#0
        int 32                                                                            asset#0,value%6#0,32
        bzero                                                                             asset#0,value%6#0,tmp%7#0
        l-load value%6#0 1                                                                asset#0,tmp%7#0,value%6#0
        l-load tmp%7#0 1                                                                  asset#0,value%6#0,tmp%7#0
        ==                                                                                asset#0,tmp%8#0
        assert // hash                                                                    asset#0
        // asset/contract.py:62
        // assert asset.manager == Global.zero_address, "manager"
        l-load-copy asset#0 0                                                             asset#0,asset#0 (copy)
        asset_params_get AssetManager                                                     asset#0,value%7#0,check%7#0
        assert // asset exists                                                            asset#0,value%7#0
        global ZeroAddress                                                                asset#0,value%7#0,tmp%9#0
        l-load value%7#0 1                                                                asset#0,tmp%9#0,value%7#0
        l-load tmp%9#0 1                                                                  asset#0,value%7#0,tmp%9#0
        ==                                                                                asset#0,tmp%10#0
        assert // manager                                                                 asset#0
        // asset/contract.py:63
        // assert asset.reserve == Global.zero_address, "reserve"
        l-load-copy asset#0 0                                                             asset#0,asset#0 (copy)
        asset_params_get AssetReserve                                                     asset#0,value%8#0,check%8#0
        assert // asset exists                                                            asset#0,value%8#0
        global ZeroAddress                                                                asset#0,value%8#0,tmp%11#0
        l-load value%8#0 1                                                                asset#0,tmp%11#0,value%8#0
        l-load tmp%11#0 1                                                                 asset#0,value%8#0,tmp%11#0
        ==                                                                                asset#0,tmp%12#0
        assert // reserve                                                                 asset#0
        // asset/contract.py:64
        // assert asset.freeze == Global.zero_address, "freeze"
        l-load-copy asset#0 0                                                             asset#0,asset#0 (copy)
        asset_params_get AssetFreeze                                                      asset#0,value%9#0,check%9#0
        assert // asset exists                                                            asset#0,value%9#0
        global ZeroAddress                                                                asset#0,value%9#0,tmp%13#0
        l-load value%9#0 1                                                                asset#0,tmp%13#0,value%9#0
        l-load tmp%13#0 1                                                                 asset#0,value%9#0,tmp%13#0
        ==                                                                                asset#0,tmp%14#0
        assert // freeze                                                                  asset#0
        // asset/contract.py:65
        // assert asset.clawback == Global.zero_address, "clawback"
        l-load-copy asset#0 0                                                             asset#0,asset#0 (copy)
        asset_params_get AssetClawback                                                    asset#0,value%10#0,check%10#0
        assert // asset exists                                                            asset#0,value%10#0
        global ZeroAddress                                                                asset#0,value%10#0,tmp%15#0
        l-load value%10#0 1                                                               asset#0,tmp%15#0,value%10#0
        l-load tmp%15#0 1                                                                 asset#0,value%10#0,tmp%15#0
        ==                                                                                asset#0,tmp%16#0
        assert // clawback                                                                asset#0
        // asset/contract.py:66
        // assert asset.creator == Global.creator_address, "creator"
        l-load-copy asset#0 0                                                             asset#0,asset#0 (copy)
        asset_params_get AssetCreator                                                     asset#0,value%11#0,check%11#0
        assert // asset exists                                                            asset#0,value%11#0
        global CreatorAddress                                                             asset#0,value%11#0,tmp%17#0
        l-load value%11#0 1                                                               asset#0,tmp%17#0,value%11#0
        l-load tmp%17#0 1                                                                 asset#0,value%11#0,tmp%17#0
        ==                                                                                asset#0,tmp%18#0
        assert // creator                                                                 asset#0
        // asset/contract.py:67
        // assert Global.current_application_address.is_opted_in(asset), "asset opted in"
        global CurrentApplicationAddress                                                  asset#0,tmp%19#0
        l-load asset#0 1                                                                  tmp%19#0,asset#0
        asset_holding_get AssetBalance                                                    tmp%20#0,tmp%21#0
        l-store tmp%21#0 1                                                                tmp%21#0,tmp%20#0
        pop 1                                                                             tmp%21#0
        l-load tmp%21#0 0                                                                 tmp%21#0
        assert // asset opted in
        b main_after_if_else@11

    main_after_if_else@11:
        // asset/contract.py:30
        // return True
        int 1                                                                             1
        return


