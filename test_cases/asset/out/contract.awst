contract Reference
{
  globals {
    ['asa']: asset
  }
  
  constructor()
  {
    this.asa: asset = reinterpret_cast<asset>(0u)
  }
  
  approval_program(): bool
  {
    if (txn<NumAppArgs>() == 1u) {
      if (txna<ApplicationArgs, 0>() == 'opt_in') {
        asset: asset = txna<Assets, 0>()
        this::opt_into_asset(asset)
      } else {
        if (txna<ApplicationArgs, 0>() == 'is_opted_in') {
          asset: asset = txna<Assets, 0>()
          this::is_opted_asset(asset)
        } else {
          assert(false, comment="Expected opt_in or is_opted_in")
        }
      }
    }
    return true
  }
  
  clear_state_program(): bool
  {
    return true
  }
  
  subroutine opt_into_asset(asset: asset): void
  {
    assert(txn<Sender>() == global<CreatorAddress>(), comment="Only creator can opt in to ASA")
    assert(!(reinterpret_cast<bool>(this.asa)), comment="ASA already opted in")
    this.asa: asset = asset
    itxn_begin()
    itxn_field<TypeEnum>(axfer)
    itxn_field<Fee>(0u)
    itxn_field<AssetReceiver>(global<CurrentApplicationAddress>())
    itxn_field<XferAsset>(asset)
    itxn_submit()
  }
  
  subroutine is_opted_asset(asset: asset): void
  {
    assert(this.asa == asset, comment="asset self.asa == asset")
    assert(checked_maybe(asset_params_get<AssetTotal>(asset)) == 10000000u, comment="total")
    assert(checked_maybe(asset_params_get<AssetDecimals>(asset)) == 0u, comment="decimals")
    assert(!(checked_maybe(asset_params_get<AssetDefaultFrozen>(asset))), comment="default frozen")
    assert(checked_maybe(asset_params_get<AssetUnitName>(asset)) == 'a', comment="unit_name")
    assert(checked_maybe(asset_params_get<AssetName>(asset)) == 'asset a', comment="name")
    assert(checked_maybe(asset_params_get<AssetURL>(asset)) == '', comment="URL")
    assert(checked_maybe(asset_params_get<AssetMetadataHash>(asset)) == bzero(32u), comment="hash")
    assert(checked_maybe(asset_params_get<AssetManager>(asset)) == global<ZeroAddress>(), comment="manager")
    assert(checked_maybe(asset_params_get<AssetReserve>(asset)) == global<ZeroAddress>(), comment="reserve")
    assert(checked_maybe(asset_params_get<AssetFreeze>(asset)) == global<ZeroAddress>(), comment="freeze")
    assert(checked_maybe(asset_params_get<AssetClawback>(asset)) == global<ZeroAddress>(), comment="clawback")
    assert(checked_maybe(asset_params_get<AssetCreator>(asset)) == global<CreatorAddress>(), comment="creator")
    assert(asset_holding_get<AssetBalance>(global<CurrentApplicationAddress>(), asset)[1], comment="asset opted in")
  }
}