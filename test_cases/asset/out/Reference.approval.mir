// Op                                                                                 Stack (out)
// test_cases.asset.contract.Reference.approval_program() -> uint64:
main_block@0:
    txn ApplicationID                                                                 app_id%0#0
    bnz main_after_if_else@2
    // Implicit fall through to main_on_create@1

main_on_create@1:
    callsub __init__
    // Implicit fall through to main_after_if_else@2

main_after_if_else@2:
    // asset/contract.py:21
    // if Txn.num_app_args == 1:
    txn NumAppArgs                                                                    tmp%0#0
    int 1                                                                             tmp%0#0,1
    ==                                                                                tmp%1#0
    bz main_after_if_else@10
    // Implicit fall through to main_if_body@3

main_if_body@3:
    // asset/contract.py:22
    // if Txn.application_args(0) == b"opt_in":
    txna ApplicationArgs 0                                                            tmp%2#0
    byte 0x6f70745f696e                                                               tmp%2#0,0x6f70745f696e
    ==                                                                                tmp%3#0
    bz main_else_body@5
    // Implicit fall through to main_if_body@4

main_if_body@4:
    // asset/contract.py:23
    // asset = Txn.assets(0)
    txna Assets 0                                                                     asset#0
    // asset/contract.py:24
    // self.opt_into_asset(asset)
    callsub opt_into_asset
    b main_after_if_else@10

main_else_body@5:
    // asset/contract.py:25
    // elif Txn.application_args(0) == b"is_opted_in":
    txna ApplicationArgs 0                                                            tmp%4#0
    byte 0x69735f6f707465645f696e                                                     tmp%4#0,0x69735f6f707465645f696e
    ==                                                                                tmp%5#0
    assert // Expected opt_in or is_opted_in
    // asset/contract.py:26
    // asset = Txn.assets(0)
    txna Assets 0                                                                     asset#0
    // asset/contract.py:27
    // self.is_opted_asset(asset)
    callsub is_opted_asset
    // Implicit fall through to main_after_if_else@10

main_after_if_else@10:
    // asset/contract.py:30
    // return True
    int 1                                                                             1
    return


// test_cases.asset.contract.Reference.__init__() -> void:
__init__:
    // asset/contract.py:17
    // def __init__(self) -> None:
    proto 0 0

__init___block@0:
    // asset/contract.py:18
    // self.asa = Asset()
    byte "asa"                                                                        "asa"
    int 0                                                                             "asa",0
    app_global_put
    retsub


// test_cases.asset.contract.Reference.opt_into_asset(asset: uint64) -> void:
opt_into_asset:                                                                       (洧도) asset#0 |
    // asset/contract.py:35-36
    // @subroutine
    // def opt_into_asset(self, asset: Asset) -> None:
    proto 1 0                                                                         (洧도) asset#0 |

opt_into_asset_block@0:                                                               (洧도) asset#0 |
    // asset/contract.py:38
    // assert Txn.sender == Global.creator_address, "Only creator can opt in to ASA"
    txn Sender                                                                        (洧도) asset#0 | tmp%0#0
    global CreatorAddress                                                             (洧도) asset#0 | tmp%0#0,tmp%1#0
    l-load tmp%0#0 1                                                                  (洧도) asset#0 | tmp%1#0,tmp%0#0
    l-load tmp%1#0 1                                                                  (洧도) asset#0 | tmp%0#0,tmp%1#0
    ==                                                                                (洧도) asset#0 | tmp%2#0
    assert // Only creator can opt in to ASA                                          (洧도) asset#0 |
    // asset/contract.py:40
    // assert not self.asa, "ASA already opted in"
    int 0                                                                             (洧도) asset#0 | 0
    byte "asa"                                                                        (洧도) asset#0 | 0,"asa"
    app_global_get_ex                                                                 (洧도) asset#0 | maybe_value%0#0,maybe_exists%0#0
    assert // check self.asa exists                                                   (洧도) asset#0 | maybe_value%0#0
    l-load maybe_value%0#0 0                                                          (洧도) asset#0 | maybe_value%0#0
    !                                                                                 (洧도) asset#0 | tmp%3#0
    assert // ASA already opted in                                                    (洧도) asset#0 |
    // asset/contract.py:42
    // self.asa = asset
    byte "asa"                                                                        (洧도) asset#0 | "asa"
    p-load asset#0                                                                    (洧도) asset#0 | "asa",asset#0 (copy)
    app_global_put                                                                    (洧도) asset#0 |
    // asset/contract.py:45
    // ITxnCreate.begin()
    itxn_begin                                                                        (洧도) asset#0 |
    // asset/contract.py:46
    // ITxnCreate.set_type_enum(TransactionType.AssetTransfer)
    int axfer                                                                         (洧도) asset#0 | axfer
    itxn_field TypeEnum                                                               (洧도) asset#0 |
    // asset/contract.py:47
    // ITxnCreate.set_fee(UInt64(0))  # cover fee with outer txn
    int 0                                                                             (洧도) asset#0 | 0
    itxn_field Fee                                                                    (洧도) asset#0 |
    // asset/contract.py:48
    // ITxnCreate.set_asset_receiver(Global.current_application_address)
    global CurrentApplicationAddress                                                  (洧도) asset#0 | tmp%4#0
    itxn_field AssetReceiver                                                          (洧도) asset#0 |
    // asset/contract.py:49
    // ITxnCreate.set_xfer_asset(asset)
    p-load asset#0                                                                    (洧도) asset#0 | asset#0 (copy)
    itxn_field XferAsset                                                              (洧도) asset#0 |
    // asset/contract.py:50
    // ITxnCreate.submit()
    itxn_submit                                                                       (洧도) asset#0 |
    retsub


// test_cases.asset.contract.Reference.is_opted_asset(asset: uint64) -> void:
is_opted_asset:                                                                       (洧도) asset#0 |
    // asset/contract.py:52-53
    // @subroutine
    // def is_opted_asset(self, asset: Asset) -> None:
    proto 1 0                                                                         (洧도) asset#0 |

is_opted_asset_block@0:                                                               (洧도) asset#0 |
    // asset/contract.py:54
    // assert self.asa == asset, "asset self.asa == asset"
    int 0                                                                             (洧도) asset#0 | 0
    byte "asa"                                                                        (洧도) asset#0 | 0,"asa"
    app_global_get_ex                                                                 (洧도) asset#0 | maybe_value%0#0,maybe_exists%0#0
    assert // check self.asa exists                                                   (洧도) asset#0 | maybe_value%0#0
    l-load maybe_value%0#0 0                                                          (洧도) asset#0 | maybe_value%0#0
    p-load asset#0                                                                    (洧도) asset#0 | maybe_value%0#0,asset#0 (copy)
    ==                                                                                (洧도) asset#0 | tmp%0#0
    assert // asset self.asa == asset                                                 (洧도) asset#0 |
    // asset/contract.py:55
    // assert asset.total == 10000000, "total"
    p-load asset#0                                                                    (洧도) asset#0 | asset#0 (copy)
    asset_params_get AssetTotal                                                       (洧도) asset#0 | value%0#0,check%0#0
    assert // asset exists                                                            (洧도) asset#0 | value%0#0
    l-load value%0#0 0                                                                (洧도) asset#0 | value%0#0
    int 10000000                                                                      (洧도) asset#0 | value%0#0,10000000
    ==                                                                                (洧도) asset#0 | tmp%1#0
    assert // total                                                                   (洧도) asset#0 |
    // asset/contract.py:56
    // assert asset.decimals == 0, "decimals"
    p-load asset#0                                                                    (洧도) asset#0 | asset#0 (copy)
    asset_params_get AssetDecimals                                                    (洧도) asset#0 | value%1#0,check%1#0
    assert // asset exists                                                            (洧도) asset#0 | value%1#0
    l-load value%1#0 0                                                                (洧도) asset#0 | value%1#0
    !                                                                                 (洧도) asset#0 | tmp%2#0
    assert // decimals                                                                (洧도) asset#0 |
    // asset/contract.py:57
    // assert not asset.default_frozen, "default frozen"
    p-load asset#0                                                                    (洧도) asset#0 | asset#0 (copy)
    asset_params_get AssetDefaultFrozen                                               (洧도) asset#0 | value%2#0,check%2#0
    assert // asset exists                                                            (洧도) asset#0 | value%2#0
    l-load value%2#0 0                                                                (洧도) asset#0 | value%2#0
    !                                                                                 (洧도) asset#0 | tmp%3#0
    assert // default frozen                                                          (洧도) asset#0 |
    // asset/contract.py:58
    // assert asset.unit_name == b"a", "unit_name"
    p-load asset#0                                                                    (洧도) asset#0 | asset#0 (copy)
    asset_params_get AssetUnitName                                                    (洧도) asset#0 | value%3#0,check%3#0
    assert // asset exists                                                            (洧도) asset#0 | value%3#0
    l-load value%3#0 0                                                                (洧도) asset#0 | value%3#0
    byte 0x61                                                                         (洧도) asset#0 | value%3#0,0x61
    ==                                                                                (洧도) asset#0 | tmp%4#0
    assert // unit_name                                                               (洧도) asset#0 |
    // asset/contract.py:59
    // assert asset.name == b"asset a", "name"
    p-load asset#0                                                                    (洧도) asset#0 | asset#0 (copy)
    asset_params_get AssetName                                                        (洧도) asset#0 | value%4#0,check%4#0
    assert // asset exists                                                            (洧도) asset#0 | value%4#0
    l-load value%4#0 0                                                                (洧도) asset#0 | value%4#0
    byte 0x61737365742061                                                             (洧도) asset#0 | value%4#0,0x61737365742061
    ==                                                                                (洧도) asset#0 | tmp%5#0
    assert // name                                                                    (洧도) asset#0 |
    // asset/contract.py:60
    // assert asset.url == b"", "URL"
    p-load asset#0                                                                    (洧도) asset#0 | asset#0 (copy)
    asset_params_get AssetURL                                                         (洧도) asset#0 | value%5#0,check%5#0
    assert // asset exists                                                            (洧도) asset#0 | value%5#0
    l-load value%5#0 0                                                                (洧도) asset#0 | value%5#0
    byte 0x                                                                           (洧도) asset#0 | value%5#0,0x
    ==                                                                                (洧도) asset#0 | tmp%6#0
    assert // URL                                                                     (洧도) asset#0 |
    // asset/contract.py:61
    // assert asset.metadata_hash == bzero(32), "hash"
    p-load asset#0                                                                    (洧도) asset#0 | asset#0 (copy)
    asset_params_get AssetMetadataHash                                                (洧도) asset#0 | value%6#0,check%6#0
    assert // asset exists                                                            (洧도) asset#0 | value%6#0
    int 32                                                                            (洧도) asset#0 | value%6#0,32
    bzero                                                                             (洧도) asset#0 | value%6#0,tmp%7#0
    l-load value%6#0 1                                                                (洧도) asset#0 | tmp%7#0,value%6#0
    l-load tmp%7#0 1                                                                  (洧도) asset#0 | value%6#0,tmp%7#0
    ==                                                                                (洧도) asset#0 | tmp%8#0
    assert // hash                                                                    (洧도) asset#0 |
    // asset/contract.py:62
    // assert asset.manager == Global.zero_address, "manager"
    p-load asset#0                                                                    (洧도) asset#0 | asset#0 (copy)
    asset_params_get AssetManager                                                     (洧도) asset#0 | value%7#0,check%7#0
    assert // asset exists                                                            (洧도) asset#0 | value%7#0
    global ZeroAddress                                                                (洧도) asset#0 | value%7#0,tmp%9#0
    l-load value%7#0 1                                                                (洧도) asset#0 | tmp%9#0,value%7#0
    l-load tmp%9#0 1                                                                  (洧도) asset#0 | value%7#0,tmp%9#0
    ==                                                                                (洧도) asset#0 | tmp%10#0
    assert // manager                                                                 (洧도) asset#0 |
    // asset/contract.py:63
    // assert asset.reserve == Global.zero_address, "reserve"
    p-load asset#0                                                                    (洧도) asset#0 | asset#0 (copy)
    asset_params_get AssetReserve                                                     (洧도) asset#0 | value%8#0,check%8#0
    assert // asset exists                                                            (洧도) asset#0 | value%8#0
    global ZeroAddress                                                                (洧도) asset#0 | value%8#0,tmp%11#0
    l-load value%8#0 1                                                                (洧도) asset#0 | tmp%11#0,value%8#0
    l-load tmp%11#0 1                                                                 (洧도) asset#0 | value%8#0,tmp%11#0
    ==                                                                                (洧도) asset#0 | tmp%12#0
    assert // reserve                                                                 (洧도) asset#0 |
    // asset/contract.py:64
    // assert asset.freeze == Global.zero_address, "freeze"
    p-load asset#0                                                                    (洧도) asset#0 | asset#0 (copy)
    asset_params_get AssetFreeze                                                      (洧도) asset#0 | value%9#0,check%9#0
    assert // asset exists                                                            (洧도) asset#0 | value%9#0
    global ZeroAddress                                                                (洧도) asset#0 | value%9#0,tmp%13#0
    l-load value%9#0 1                                                                (洧도) asset#0 | tmp%13#0,value%9#0
    l-load tmp%13#0 1                                                                 (洧도) asset#0 | value%9#0,tmp%13#0
    ==                                                                                (洧도) asset#0 | tmp%14#0
    assert // freeze                                                                  (洧도) asset#0 |
    // asset/contract.py:65
    // assert asset.clawback == Global.zero_address, "clawback"
    p-load asset#0                                                                    (洧도) asset#0 | asset#0 (copy)
    asset_params_get AssetClawback                                                    (洧도) asset#0 | value%10#0,check%10#0
    assert // asset exists                                                            (洧도) asset#0 | value%10#0
    global ZeroAddress                                                                (洧도) asset#0 | value%10#0,tmp%15#0
    l-load value%10#0 1                                                               (洧도) asset#0 | tmp%15#0,value%10#0
    l-load tmp%15#0 1                                                                 (洧도) asset#0 | value%10#0,tmp%15#0
    ==                                                                                (洧도) asset#0 | tmp%16#0
    assert // clawback                                                                (洧도) asset#0 |
    // asset/contract.py:66
    // assert asset.creator == Global.creator_address, "creator"
    p-load asset#0                                                                    (洧도) asset#0 | asset#0 (copy)
    asset_params_get AssetCreator                                                     (洧도) asset#0 | value%11#0,check%11#0
    assert // asset exists                                                            (洧도) asset#0 | value%11#0
    global CreatorAddress                                                             (洧도) asset#0 | value%11#0,tmp%17#0
    l-load value%11#0 1                                                               (洧도) asset#0 | tmp%17#0,value%11#0
    l-load tmp%17#0 1                                                                 (洧도) asset#0 | value%11#0,tmp%17#0
    ==                                                                                (洧도) asset#0 | tmp%18#0
    assert // creator                                                                 (洧도) asset#0 |
    // asset/contract.py:67
    // assert Global.current_application_address.is_opted_in(asset), "asset opted in"
    global CurrentApplicationAddress                                                  (洧도) asset#0 | tmp%19#0
    p-load asset#0                                                                    (洧도) asset#0 | tmp%19#0,asset#0 (copy)
    asset_holding_get AssetBalance                                                    (洧도) asset#0 | tmp%20#0,tmp%21#0
    l-store tmp%21#0 1                                                                (洧도) asset#0 | tmp%21#0,tmp%20#0
    pop 1                                                                             (洧도) asset#0 | tmp%21#0
    l-load tmp%21#0 0                                                                 (洧도) asset#0 | tmp%21#0
    assert // asset opted in                                                          (洧도) asset#0 |
    retsub


