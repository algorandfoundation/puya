#pragma version 10

test_cases.asset.contract.Reference.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    txn NumAppArgs
    int 1
    ==
    bz main_after_if_else@10
    txna ApplicationArgs 0
    byte 0x6f70745f696e
    ==
    bz main_else_body@5
    txna Assets 0
    callsub opt_into_asset
    b main_after_if_else@10

main_else_body@5:
    txna ApplicationArgs 0
    byte 0x69735f6f707465645f696e
    ==
    assert // Expected opt_in or is_opted_in
    txna Assets 0
    callsub is_opted_asset

main_after_if_else@10:
    int 1
    return


// test_cases.asset.contract.Reference.opt_into_asset(asset: uint64) -> void:
opt_into_asset:
    proto 1 0
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    int 0
    byte "asa"
    app_global_get_ex
    assert // check asa exists
    !
    assert // ASA already opted in
    byte "asa"
    frame_dig -1
    app_global_put
    itxn_begin
    int axfer
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field XferAsset
    itxn_submit
    retsub


// test_cases.asset.contract.Reference.is_opted_asset(asset: uint64) -> void:
is_opted_asset:
    proto 1 0
    int 0
    byte "asa"
    app_global_get_ex
    assert // check asa exists
    frame_dig -1
    ==
    assert // asset self.asa == asset
    frame_dig -1
    asset_params_get AssetTotal
    assert // asset exists
    int 10000000
    ==
    assert // total
    frame_dig -1
    asset_params_get AssetDecimals
    assert // asset exists
    !
    assert // decimals
    frame_dig -1
    asset_params_get AssetDefaultFrozen
    assert // asset exists
    !
    assert // default frozen
    frame_dig -1
    asset_params_get AssetUnitName
    assert // asset exists
    byte 0x61
    ==
    assert // unit_name
    frame_dig -1
    asset_params_get AssetName
    assert // asset exists
    byte 0x61737365742061
    ==
    assert // name
    frame_dig -1
    asset_params_get AssetURL
    assert // asset exists
    byte 0x
    ==
    assert // URL
    frame_dig -1
    asset_params_get AssetMetadataHash
    assert // asset exists
    int 32
    bzero
    ==
    assert // hash
    frame_dig -1
    asset_params_get AssetManager
    assert // asset exists
    global ZeroAddress
    ==
    assert // manager
    frame_dig -1
    asset_params_get AssetReserve
    assert // asset exists
    global ZeroAddress
    ==
    assert // reserve
    frame_dig -1
    asset_params_get AssetFreeze
    assert // asset exists
    global ZeroAddress
    ==
    assert // freeze
    frame_dig -1
    asset_params_get AssetClawback
    assert // asset exists
    global ZeroAddress
    ==
    assert // clawback
    frame_dig -1
    asset_params_get AssetCreator
    assert // asset exists
    global CreatorAddress
    ==
    assert // creator
    global CurrentApplicationAddress
    frame_dig -1
    asset_holding_get AssetBalance
    bury 1
    assert // asset opted in
    retsub


// test_cases.asset.contract.Reference.__init__() -> void:
__init__:
    proto 0 0
    byte "asa"
    int 0
    app_global_put
    retsub
