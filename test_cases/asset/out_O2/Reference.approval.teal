#pragma version 10
#pragma typetrack false

// test_cases.asset.contract.Reference.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1
    bytecblock "asa"
    txn ApplicationID
    bnz main_after_if_else@2
    bytec_0 // "asa"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    intc_0 // 0
    assert
    txn NumAppArgs
    intc_1 // 1
    ==
    bz main_after_if_else@11
    txna ApplicationArgs 0
    pushbytes 0x6f70745f696e
    ==
    bz main_else_body@6
    txna Assets 0
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can opt in to ASA
    intc_0 // 0
    bytec_0 // "asa"
    app_global_get_ex
    assert // check self.asa exists
    !
    assert // ASA already opted in
    bytec_0 // "asa"
    dig 1
    app_global_put
    itxn_begin
    pushint 4 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    itxn_field XferAsset
    itxn_submit

main_after_if_else@11:
    intc_1 // 1
    return

main_else_body@6:
    txna ApplicationArgs 0
    pushbytes 0x69735f6f707465645f696e
    ==
    assert // Expected opt_in or is_opted_in
    txna Assets 0
    intc_0 // 0
    bytec_0 // "asa"
    app_global_get_ex
    assert // check self.asa exists
    dig 1
    ==
    assert // asset self.asa == asset
    dup
    asset_params_get AssetTotal
    assert // asset exists
    pushint 10000000 // 10000000
    ==
    assert // total
    dup
    asset_params_get AssetDecimals
    assert // asset exists
    !
    assert // decimals
    dup
    asset_params_get AssetDefaultFrozen
    assert // asset exists
    !
    assert // default frozen
    dup
    asset_params_get AssetUnitName
    assert // asset exists
    pushbytes 0x61
    ==
    assert // unit_name
    dup
    asset_params_get AssetName
    assert // asset exists
    pushbytes 0x61737365742061
    ==
    assert // name
    dup
    asset_params_get AssetURL
    assert // asset exists
    pushbytes 0x
    ==
    assert // URL
    dup
    asset_params_get AssetMetadataHash
    assert // asset exists
    pushint 32 // 32
    bzero
    ==
    assert // hash
    dup
    asset_params_get AssetManager
    assert // asset exists
    global ZeroAddress
    ==
    assert // manager
    dup
    asset_params_get AssetReserve
    assert // asset exists
    global ZeroAddress
    ==
    assert // reserve
    dup
    asset_params_get AssetFreeze
    assert // asset exists
    global ZeroAddress
    ==
    assert // freeze
    dup
    asset_params_get AssetClawback
    assert // asset exists
    global ZeroAddress
    ==
    assert // clawback
    dup
    asset_params_get AssetCreator
    assert // asset exists
    global CreatorAddress
    ==
    assert // creator
    global CurrentApplicationAddress
    swap
    asset_holding_get AssetBalance
    bury 1
    assert // asset opted in
    b main_after_if_else@11
