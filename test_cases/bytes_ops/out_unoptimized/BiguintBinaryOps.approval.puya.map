{
  "version": 3,
  "sources": [
    "../contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;AAMiB;AACC;AACC;;;;AACI;AACC;;;AACA;AANhB;;;AAQ4B;AAA5B;;;AACO;;AAAP;AAMR;;;;;;AAUa;;AAAA;;AAAA;AACF;;AAAA;AAAP;AACS;;AAAA;;AAAA;AACF;;AAAA;AAAP;AACS;;AAAA;;AAAA;AACF;;AAAA;AAAP;AACS;;AAAA;;AAAA;AACF;;AAAA;AAAP;;AAGJ;;;;;;AAEI;;AAAQ;AAAR;;AAAA;;AAEe;AAAR;AAAP;AAIA;;AAFO;AAEP;;AAAA;;AAFO;AAIA;AAAP;AAIA;;AAFU;;;AAEV;;AAAA;;AAEe;;;AAAR;AAAP;AAEA;;AAZO;AAYP;;AAAA;;AANU;;;AAQH;AAAP;AAEA;;AAhBO;AAgBP;;AAAA;;AAEe;;;;AAAR;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.bytes_ops.contract.BiguintBinaryOps.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "bytecblock 0x05 0xff 0x0f 0x00"
    },
    "11": {
      "op": "b main_block@0"
    },
    "14": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "0xff"
      ],
      "stack_out": [
        "0xff"
      ]
    },
    "15": {
      "op": "bytec_2 // 0x0f",
      "defined_out": [
        "0x0f",
        "0xff"
      ],
      "stack_out": [
        "0xff",
        "0x0f"
      ]
    },
    "16": {
      "op": "pushbytes 0xff0f",
      "defined_out": [
        "0x0f",
        "0xff",
        "0xff0f"
      ],
      "stack_out": [
        "0xff",
        "0x0f",
        "0xff0f"
      ]
    },
    "20": {
      "op": "bytec_1 // 0xff",
      "stack_out": [
        "0xff",
        "0x0f",
        "0xff0f",
        "0xff"
      ]
    },
    "21": {
      "op": "pushbytes 0xf0",
      "defined_out": [
        "0x0f",
        "0xf0",
        "0xff",
        "0xff0f"
      ],
      "stack_out": [
        "0xff",
        "0x0f",
        "0xff0f",
        "0xff",
        "0xf0"
      ]
    },
    "24": {
      "op": "bytec_2 // 0x0f",
      "stack_out": [
        "0xff",
        "0x0f",
        "0xff0f",
        "0xff",
        "0xf0",
        "0x0f"
      ]
    },
    "25": {
      "callsub": "test_cases.bytes_ops.contract.do_some_ops",
      "op": "callsub do_some_ops",
      "stack_out": []
    },
    "28": {
      "op": "bytec_1 // 0xff",
      "stack_out": [
        "0xff"
      ]
    },
    "29": {
      "callsub": "test_cases.bytes_ops.contract.do_augmented_assignment_ops",
      "op": "callsub do_augmented_assignment_ops",
      "stack_out": []
    },
    "32": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "34": {
      "op": "return",
      "stack_out": []
    },
    "35": {
      "subroutine": "test_cases.bytes_ops.contract.do_some_ops",
      "params": {
        "left#0": "bytes",
        "right#0": "bytes",
        "concat#0": "bytes",
        "bitwise_or#0": "bytes",
        "bitwise_xor#0": "bytes",
        "bitwise_and#0": "bytes"
      },
      "block": "do_some_ops",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "38": {
      "op": "b do_some_ops_block@0"
    },
    "41": {
      "block": "do_some_ops_block@0",
      "stack_in": [],
      "op": "frame_dig -6",
      "defined_out": [
        "left#0 (copy)"
      ],
      "stack_out": [
        "left#0 (copy)"
      ]
    },
    "43": {
      "op": "frame_dig -5",
      "defined_out": [
        "left#0 (copy)",
        "right#0 (copy)"
      ],
      "stack_out": [
        "left#0 (copy)",
        "right#0 (copy)"
      ]
    },
    "45": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "46": {
      "op": "frame_dig -4",
      "defined_out": [
        "concat#0 (copy)",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "concat#0 (copy)"
      ]
    },
    "48": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "49": {
      "op": "assert",
      "stack_out": []
    },
    "50": {
      "op": "frame_dig -6",
      "stack_out": [
        "left#0 (copy)"
      ]
    },
    "52": {
      "op": "frame_dig -5",
      "stack_out": [
        "left#0 (copy)",
        "right#0 (copy)"
      ]
    },
    "54": {
      "op": "b|",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "55": {
      "op": "frame_dig -3",
      "defined_out": [
        "bitwise_or#0 (copy)",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "bitwise_or#0 (copy)"
      ]
    },
    "57": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "58": {
      "op": "assert",
      "stack_out": []
    },
    "59": {
      "op": "frame_dig -6",
      "stack_out": [
        "left#0 (copy)"
      ]
    },
    "61": {
      "op": "frame_dig -5",
      "stack_out": [
        "left#0 (copy)",
        "right#0 (copy)"
      ]
    },
    "63": {
      "op": "b^",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "64": {
      "op": "frame_dig -2",
      "defined_out": [
        "bitwise_xor#0 (copy)",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "bitwise_xor#0 (copy)"
      ]
    },
    "66": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "67": {
      "op": "assert",
      "stack_out": []
    },
    "68": {
      "op": "frame_dig -6",
      "stack_out": [
        "left#0 (copy)"
      ]
    },
    "70": {
      "op": "frame_dig -5",
      "stack_out": [
        "left#0 (copy)",
        "right#0 (copy)"
      ]
    },
    "72": {
      "op": "b&",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "73": {
      "op": "frame_dig -1",
      "defined_out": [
        "bitwise_and#0 (copy)",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "bitwise_and#0 (copy)"
      ]
    },
    "75": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "76": {
      "op": "assert",
      "stack_out": []
    },
    "77": {
      "retsub": true,
      "op": "retsub"
    },
    "78": {
      "subroutine": "test_cases.bytes_ops.contract.do_augmented_assignment_ops",
      "params": {
        "seed#0": "bytes"
      },
      "block": "do_augmented_assignment_ops",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "81": {
      "op": "b do_augmented_assignment_ops_block@0"
    },
    "84": {
      "block": "do_augmented_assignment_ops_block@0",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "86": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)",
        "0x00"
      ]
    },
    "87": {
      "op": "b&",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "88": {
      "op": "dup"
    },
    "89": {
      "op": "frame_bury -1",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "91": {
      "op": "bytec_3 // 0x00",
      "stack_out": [
        "seed#0 (copy)",
        "0x00"
      ]
    },
    "92": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "93": {
      "op": "assert",
      "stack_out": []
    },
    "94": {
      "op": "frame_dig -1",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "96": {
      "op": "bytec_0 // 0x05",
      "defined_out": [
        "0x05",
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)",
        "0x05"
      ]
    },
    "97": {
      "op": "b|",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "98": {
      "op": "dup"
    },
    "99": {
      "op": "frame_bury -1",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "101": {
      "op": "bytec_0 // 0x05",
      "stack_out": [
        "seed#0 (copy)",
        "0x05"
      ]
    },
    "102": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "103": {
      "op": "assert",
      "stack_out": []
    },
    "104": {
      "op": "frame_dig -1",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "106": {
      "op": "pushbytes 0x10",
      "defined_out": [
        "0x10",
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)",
        "0x10"
      ]
    },
    "109": {
      "op": "b^",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "110": {
      "op": "dup"
    },
    "111": {
      "op": "frame_bury -1",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "113": {
      "op": "pushbytes 0x15",
      "defined_out": [
        "0x15",
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)",
        "0x15"
      ]
    },
    "116": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "117": {
      "op": "assert",
      "stack_out": []
    },
    "118": {
      "op": "frame_dig -1",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "120": {
      "op": "bytec_0 // 0x05",
      "stack_out": [
        "seed#0 (copy)",
        "0x05"
      ]
    },
    "121": {
      "op": "b^",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "122": {
      "op": "dup"
    },
    "123": {
      "op": "frame_bury -1",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "125": {
      "op": "pushbytes 0x10",
      "stack_out": [
        "seed#0 (copy)",
        "0x10"
      ]
    },
    "128": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "129": {
      "op": "assert",
      "stack_out": []
    },
    "130": {
      "op": "frame_dig -1",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "132": {
      "op": "bytec_0 // 0x05",
      "stack_out": [
        "seed#0 (copy)",
        "0x05"
      ]
    },
    "133": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "134": {
      "op": "dup"
    },
    "135": {
      "op": "frame_bury -1",
      "stack_out": [
        "seed#0 (copy)"
      ]
    },
    "137": {
      "op": "pushbytes 0x1005",
      "defined_out": [
        "0x1005",
        "seed#0 (copy)"
      ],
      "stack_out": [
        "seed#0 (copy)",
        "0x1005"
      ]
    },
    "141": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "142": {
      "op": "assert",
      "stack_out": []
    },
    "143": {
      "retsub": true,
      "op": "retsub"
    }
  }
}