// Op                                                        Stack (out)
// test_cases.bytes_ops.contract.BiguintBinaryOps.approval_program() -> uint64:
main_block@0:
    // bytes_ops/contract.py:7
    // left=Bytes.from_hex("FF"),
    byte 0xff                                                0xff
    // bytes_ops/contract.py:8
    // right=Bytes.from_hex("0F"),
    byte 0x0f                                                0xff,0x0f
    // bytes_ops/contract.py:9
    // concat=Bytes.from_hex("FF0F"),
    byte 0xff0f                                              0xff,0x0f,0xff0f
    // bytes_ops/contract.py:10
    // bitwise_or=Bytes.from_hex("FF"),
    byte 0xff                                                0xff,0x0f,0xff0f,0xff
    // bytes_ops/contract.py:11
    // bitwise_xor=Bytes.from_hex("F0"),
    byte 0xf0                                                0xff,0x0f,0xff0f,0xff,0xf0
    // bytes_ops/contract.py:12
    // bitwise_and=Bytes.from_hex("0F"),
    byte 0x0f                                                0xff,0x0f,0xff0f,0xff,0xf0,0x0f
    // bytes_ops/contract.py:6-13
    // do_some_ops(
    //     left=Bytes.from_hex("FF"),
    //     right=Bytes.from_hex("0F"),
    //     concat=Bytes.from_hex("FF0F"),
    //     bitwise_or=Bytes.from_hex("FF"),
    //     bitwise_xor=Bytes.from_hex("F0"),
    //     bitwise_and=Bytes.from_hex("0F"),
    // )
    callsub do_some_ops
    // bytes_ops/contract.py:14
    // do_augmented_assignment_ops(Bytes.from_hex("FF"))
    byte 0xff                                                0xff
    callsub do_augmented_assignment_ops
    // bytes_ops/contract.py:15
    // return True
    int 1                                                    1
    return


// test_cases.bytes_ops.contract.do_some_ops(left: bytes, right: bytes, concat: bytes, bitwise_or: bytes, bitwise_xor: bytes, bitwise_and: bytes) -> void:
do_some_ops:                                                 (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 |
    // bytes_ops/contract.py:21-30
    // @subroutine
    // def do_some_ops(
    //     *,
    //     left: Bytes,
    //     right: Bytes,
    //     concat: Bytes,
    //     bitwise_or: Bytes,
    //     bitwise_xor: Bytes,
    //     bitwise_and: Bytes
    // ) -> None:
    proto 6 0                                                (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 |

do_some_ops_block@0:                                         (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 |
    // bytes_ops/contract.py:31
    // result = left + right
    p-load left#0                                            (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | left#0 (copy)
    p-load right#0                                           (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | left#0 (copy),right#0 (copy)
    concat                                                   (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | result#0
    // bytes_ops/contract.py:32
    // assert result == concat
    p-load concat#0                                          (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | result#0,concat#0 (copy)
    ==                                                       (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | tmp%0#0
    assert                                                   (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 |
    // bytes_ops/contract.py:33
    // result = left | right
    p-load left#0                                            (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | left#0 (copy)
    p-load right#0                                           (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | left#0 (copy),right#0 (copy)
    b|                                                       (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | result#0
    // bytes_ops/contract.py:34
    // assert result == bitwise_or
    p-load bitwise_or#0                                      (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | result#0,bitwise_or#0 (copy)
    ==                                                       (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | tmp%1#0
    assert                                                   (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 |
    // bytes_ops/contract.py:35
    // result = left ^ right
    p-load left#0                                            (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | left#0 (copy)
    p-load right#0                                           (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | left#0 (copy),right#0 (copy)
    b^                                                       (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | result#0
    // bytes_ops/contract.py:36
    // assert result == bitwise_xor
    p-load bitwise_xor#0                                     (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | result#0,bitwise_xor#0 (copy)
    ==                                                       (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | tmp%2#0
    assert                                                   (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 |
    // bytes_ops/contract.py:37
    // result = left & right
    p-load left#0                                            (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | left#0 (copy)
    p-load right#0                                           (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | left#0 (copy),right#0 (copy)
    b&                                                       (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | result#0
    // bytes_ops/contract.py:38
    // assert result == bitwise_and
    p-load bitwise_and#0                                     (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | result#0,bitwise_and#0 (copy)
    ==                                                       (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 | tmp%3#0
    assert                                                   (洧도) left#0,right#0,concat#0,bitwise_or#0,bitwise_xor#0,bitwise_and#0 |
    retsub


// test_cases.bytes_ops.contract.do_augmented_assignment_ops(seed: bytes) -> void:
do_augmented_assignment_ops:                                 (洧도) seed#0 |
    // bytes_ops/contract.py:41-42
    // @subroutine
    // def do_augmented_assignment_ops(seed: Bytes) -> None:
    proto 1 0                                                (洧도) seed#0 |

do_augmented_assignment_ops_block@0:                         (洧도) seed#0 |
    // bytes_ops/contract.py:43
    // seed &= Bytes.from_hex("00")
    p-load seed#0                                            (洧도) seed#0 | seed#0 (copy)
    byte 0x00                                                (洧도) seed#0 | seed#0 (copy),0x00
    b&                                                       (洧도) seed#0 | seed#0
    p-store seed#0                                           (洧도) seed#0 |
    // bytes_ops/contract.py:45
    // assert seed == Bytes.from_hex("00")
    p-load seed#0                                            (洧도) seed#0 | seed#0 (copy)
    byte 0x00                                                (洧도) seed#0 | seed#0 (copy),0x00
    ==                                                       (洧도) seed#0 | tmp%0#0
    assert                                                   (洧도) seed#0 |
    // bytes_ops/contract.py:49
    // seed |= five
    p-load seed#0                                            (洧도) seed#0 | seed#0 (copy)
    // bytes_ops/contract.py:47
    // five = Bytes.from_hex("05")
    byte 0x05                                                (洧도) seed#0 | seed#0 (copy),0x05
    // bytes_ops/contract.py:49
    // seed |= five
    b|                                                       (洧도) seed#0 | seed#0
    p-store seed#0                                           (洧도) seed#0 |
    // bytes_ops/contract.py:51
    // assert seed == five
    p-load seed#0                                            (洧도) seed#0 | seed#0 (copy)
    // bytes_ops/contract.py:47
    // five = Bytes.from_hex("05")
    byte 0x05                                                (洧도) seed#0 | seed#0 (copy),0x05
    // bytes_ops/contract.py:51
    // assert seed == five
    ==                                                       (洧도) seed#0 | tmp%1#0
    assert                                                   (洧도) seed#0 |
    // bytes_ops/contract.py:55
    // seed ^= sixteen
    p-load seed#0                                            (洧도) seed#0 | seed#0 (copy)
    // bytes_ops/contract.py:53
    // sixteen = Bytes.from_hex("10")
    byte 0x10                                                (洧도) seed#0 | seed#0 (copy),0x10
    // bytes_ops/contract.py:55
    // seed ^= sixteen
    b^                                                       (洧도) seed#0 | seed#0
    p-store seed#0                                           (洧도) seed#0 |
    // bytes_ops/contract.py:57
    // assert seed == Bytes.from_hex("15")
    p-load seed#0                                            (洧도) seed#0 | seed#0 (copy)
    byte 0x15                                                (洧도) seed#0 | seed#0 (copy),0x15
    ==                                                       (洧도) seed#0 | tmp%2#0
    assert                                                   (洧도) seed#0 |
    // bytes_ops/contract.py:59
    // seed ^= five
    p-load seed#0                                            (洧도) seed#0 | seed#0 (copy)
    // bytes_ops/contract.py:47
    // five = Bytes.from_hex("05")
    byte 0x05                                                (洧도) seed#0 | seed#0 (copy),0x05
    // bytes_ops/contract.py:59
    // seed ^= five
    b^                                                       (洧도) seed#0 | seed#0
    p-store seed#0                                           (洧도) seed#0 |
    // bytes_ops/contract.py:61
    // assert seed == sixteen
    p-load seed#0                                            (洧도) seed#0 | seed#0 (copy)
    // bytes_ops/contract.py:53
    // sixteen = Bytes.from_hex("10")
    byte 0x10                                                (洧도) seed#0 | seed#0 (copy),0x10
    // bytes_ops/contract.py:61
    // assert seed == sixteen
    ==                                                       (洧도) seed#0 | tmp%3#0
    assert                                                   (洧도) seed#0 |
    // bytes_ops/contract.py:63
    // seed += five
    p-load seed#0                                            (洧도) seed#0 | seed#0 (copy)
    // bytes_ops/contract.py:47
    // five = Bytes.from_hex("05")
    byte 0x05                                                (洧도) seed#0 | seed#0 (copy),0x05
    // bytes_ops/contract.py:63
    // seed += five
    concat                                                   (洧도) seed#0 | seed#0
    p-store seed#0                                           (洧도) seed#0 |
    // bytes_ops/contract.py:65
    // assert seed == Bytes.from_hex("1005")
    p-load seed#0                                            (洧도) seed#0 | seed#0 (copy)
    byte 0x1005                                              (洧도) seed#0 | seed#0 (copy),0x1005
    ==                                                       (洧도) seed#0 | tmp%4#0
    assert                                                   (洧도) seed#0 |
    retsub


