#pragma version 10

// test_cases.bytes_ops.contract.BiguintBinaryOps.approval_program() -> uint64:
main_block@0:
        byte 0xff
        byte 0x0f
        byte 0xff0f
        byte 0xff
        byte 0xf0
        byte 0x0f
        callsub do_some_ops
        byte 0xff
        callsub do_augmented_assignment_ops
        int 1
        return


// test_cases.bytes_ops.contract.do_some_ops(left#0: bytes, right#0: bytes, concat#0: bytes, bitwise_or#0: bytes, bitwise_xor#0: bytes, bitwise_and#0: bytes) -> void:
do_some_ops:
        proto 6 0

do_some_ops_block@0:
        frame_dig -6
        frame_dig -5
        concat
        frame_dig -4
        ==
        assert
        frame_dig -6
        frame_dig -5
        b|
        frame_dig -3
        ==
        assert
        frame_dig -6
        frame_dig -5
        b^
        frame_dig -2
        ==
        assert
        frame_dig -6
        frame_dig -5
        b&
        frame_dig -1
        ==
        assert
        retsub


// test_cases.bytes_ops.contract.do_augmented_assignment_ops(seed#0: bytes) -> void:
do_augmented_assignment_ops:
        proto 1 0

do_augmented_assignment_ops_block@0:
        frame_dig -1
        byte 0x00
        b&
        dup
        frame_bury -1
        byte 0x00
        ==
        assert
        byte 0x05
        frame_dig -1
        dig 1
        b|
        dup
        frame_bury -1
        dig 1
        ==
        assert
        byte 0x10
        frame_dig -1
        dig 1
        b^
        dup
        frame_bury -1
        byte 0x15
        ==
        assert
        frame_dig -1
        dig 2
        b^
        dup
        frame_bury -1
        ==
        assert
        frame_dig -1
        swap
        concat
        dup
        frame_bury -1
        byte 0x1005
        ==
        assert
        retsub

