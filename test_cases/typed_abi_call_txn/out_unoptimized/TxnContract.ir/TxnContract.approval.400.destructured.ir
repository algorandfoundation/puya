main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L11
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%1#0 ? block@2 : block@17
    block@2: // abi_routing_L11
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {* => block@3}
    block@3: // route_NoOp_L11
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (== tmp%3#0 NoOp)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {* => block@4}
    block@4: // switch_case_default_L11
        let tmp%6#0: bool = (txn ApplicationID)
        goto tmp%6#0 ? block@5 : block@11
    block@5: // call_NoOp_L11
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "call_with_txn(byte[],txn,byte[])uint64" => block@6, method "call_with_acfg(byte[],acfg,byte[])uint64" => block@7, method "call_with_acfg_no_return(byte[],acfg,byte[])void" => block@8, * => block@9}
    block@6: // call_with_txn_route_L12
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]()
        goto block@10
    block@7: // call_with_acfg_route_L20
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]()
        goto block@10
    block@8: // call_with_acfg_no_return_route_L27
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]()
        goto block@10
    block@9: // switch_case_default_L11
        goto block@10
    block@10: // switch_case_next_L11
        goto block@14
    block@11: // create_NoOp_L11
        let tmp%8#0: bytes = (txna ApplicationArgs 0)
        switch tmp%8#0 {* => block@12}
    block@12: // switch_case_default_L11
        goto block@13
    block@13: // switch_case_next_L11
        goto block@14
    block@14: // after_if_else_L11
        goto block@15
    block@15: // switch_case_next_L11
        goto block@16
    block@16: // switch_case_next_L11
        goto block@21
    block@17: // bare_routing_L11
        let tmp%9#0: uint64 = (txn OnCompletion)
        switch tmp%9#0 {0u => block@18, * => block@19}
    block@18: // __algopy_default_create_L1
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (== tmp%10#0 0u)
        (assert tmp%11#0) // can only call when creating
        goto block@23
    block@23: // L1
        goto block@24
    block@24: // after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create_L1
        exit 1u
    block@19: // switch_case_default_L11
        goto block@20
    block@20: // switch_case_next_L11
        goto block@21
    block@21: // after_if_else_L11
        exit 0u
    block@22: // after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]() -> void:
    block@0: // L12
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%1#0 1u)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%2#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%3#0: uint64 = test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn(tmp%0#0, gtxn_idx%0#0, tmp%2#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%4#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]() -> void:
    block@0: // L20
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 acfg)
        (assert gtxn_type_matches%0#0) // transaction type is acfg
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%2#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%3#0: uint64 = test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg(tmp%0#0, gtxn_idx%0#0, tmp%2#0)
        let aggregate%val_as_bytes%0#0: bytes[8] = (itob tmp%3#0)
        let aggregate%as_Encoded(uint64)%0#0: Encoded(uint64) = aggregate%val_as_bytes%0#0
        let tmp%4#0: Encoded(uint64) = aggregate%as_Encoded(uint64)%0#0
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]() -> void:
    block@0: // L27
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 acfg)
        (assert gtxn_type_matches%0#0) // transaction type is acfg
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%2#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return(tmp%0#0, gtxn_idx%0#0, tmp%2#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn(a: bytes, acfg: uint64, b: bytes) -> uint64:
    block@0: // L12
        let tmp%0#0: bool = (== a#0 0x61)
        (assert tmp%0#0) // a is not a
        let tmp%1#0: bool = (== b#0 0x62)
        (assert tmp%1#0) // b is not b
        let tmp%2#0: uint64 = ((gtxns TypeEnum) acfg#0)
        let tmp%3#0: bool = (== tmp%2#0 acfg)
        (assert tmp%3#0) // expected asset config
        let tmp%4#0: uint64 = ((gtxns CreatedAssetID) acfg#0)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        (assert tmp%5#0) // expected asset id
        let tmp%6#0: uint64 = ((gtxns CreatedAssetID) acfg#0)
        return tmp%6#0

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg(a: bytes, acfg: uint64, b: bytes) -> uint64:
    block@0: // L20
        let tmp%0#0: bool = (== a#0 0x61)
        (assert tmp%0#0) // a is not a
        let tmp%1#0: bool = (== b#0 0x62)
        (assert tmp%1#0) // b is not b
        let tmp%2#0: uint64 = ((gtxns CreatedAssetID) acfg#0)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        (assert tmp%3#0) // expected asset id
        let tmp%4#0: uint64 = ((gtxns CreatedAssetID) acfg#0)
        return tmp%4#0

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return(a: bytes, acfg: uint64, b: bytes) -> void:
    block@0: // L27
        let tmp%0#0: bool = (== a#0 0x61)
        (assert tmp%0#0) // a is not a
        let tmp%1#0: bool = (== b#0 0x62)
        (assert tmp%1#0) // b is not b
        let tmp%2#0: uint64 = ((gtxns CreatedAssetID) acfg#0)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        (assert tmp%3#0) // expected asset id
        return 