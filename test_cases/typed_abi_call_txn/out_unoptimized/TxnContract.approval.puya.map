{
  "version": 3,
  "sources": [
    "../txn_contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;AAUA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;AAgBK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAhBL;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAgBK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AATL;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AASK;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AARA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AACK;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AADL;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AACA;;;AAEe;;AAAK;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAA;;AAAa;AAAb;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAP;AAER;;;AAEe;;AAAK;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAP;AAER;;;AAIe;;AAAK;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3"
    },
    "6": {
      "op": "bytecblock 0x61 0x62 0x151f7c75"
    },
    "17": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "19": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "20": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "21": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "24": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "27": {
      "op": "pushbytes 0xa1f5040d // method \"call_with_txn(byte[],txn,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ]
    },
    "33": {
      "op": "pushbytes 0x6d4700ad // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "39": {
      "op": "pushbytes 0xc840077d // method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "45": {
      "op": "uncover 3",
      "stack_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "tmp%2#0"
      ]
    },
    "47": {
      "op": "match main_call_with_txn_route@3 main_call_with_acfg_route@4 main_call_with_acfg_no_return_route@5",
      "stack_out": []
    },
    "55": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "56": {
      "block": "main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__@13",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "57": {
      "block": "main_call_with_acfg_no_return_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "59": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "NoOp"
      ]
    },
    "60": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "61": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "62": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "64": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "0"
      ]
    },
    "65": {
      "op": "!=",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "66": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "67": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0"
      ]
    },
    "70": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "73": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "75": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0",
        "1"
      ]
    },
    "76": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "gtxn_idx%2#0"
      ]
    },
    "77": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "78": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "gtxn_idx%2#0",
        "gtxn_type%1#0"
      ]
    },
    "80": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "gtxn_idx%2#0",
        "gtxn_type%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "gtxn_idx%2#0",
        "gtxn_type%1#0",
        "acfg"
      ]
    },
    "81": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%1#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "82": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "tmp%23#0",
        "gtxn_idx%2#0"
      ]
    },
    "83": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%2#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "gtxn_idx%2#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ]
    },
    "86": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "gtxn_idx%2#0",
        "tmp%25#0"
      ]
    },
    "89": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%2#0",
        "tmp%25#0",
        "tmp%23#0"
      ]
    },
    "91": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%25#0",
        "tmp%23#0",
        "gtxn_idx%2#0"
      ]
    },
    "93": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%23#0",
        "gtxn_idx%2#0",
        "tmp%25#0"
      ]
    },
    "95": {
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return",
      "op": "callsub call_with_acfg_no_return",
      "stack_out": []
    },
    "98": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "99": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__@13"
    },
    "102": {
      "block": "main_call_with_acfg_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "104": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "NoOp"
      ]
    },
    "105": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "106": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "107": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "109": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "0"
      ]
    },
    "110": {
      "op": "!=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "111": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "112": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "115": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "118": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "120": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0",
        "1"
      ]
    },
    "121": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "gtxn_idx%1#0"
      ]
    },
    "122": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "123": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "gtxn_idx%1#0",
        "gtxn_type%0#0"
      ]
    },
    "125": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "gtxn_idx%1#0",
        "gtxn_type%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "gtxn_idx%1#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "126": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "127": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "tmp%15#0",
        "gtxn_idx%1#0"
      ]
    },
    "128": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "131": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "gtxn_idx%1#0",
        "tmp%17#0"
      ]
    },
    "134": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%17#0",
        "tmp%15#0"
      ]
    },
    "136": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%17#0",
        "tmp%15#0",
        "gtxn_idx%1#0"
      ]
    },
    "138": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%15#0",
        "gtxn_idx%1#0",
        "tmp%17#0"
      ]
    },
    "140": {
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg",
      "op": "callsub call_with_acfg",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "143": {
      "op": "itob",
      "defined_out": [
        "as_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%1#0"
      ]
    },
    "144": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%1#0",
        "0x151f7c75"
      ]
    },
    "145": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "as_Encoded(uint64)%1#0"
      ]
    },
    "146": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "147": {
      "op": "log",
      "stack_out": []
    },
    "148": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "149": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__@13"
    },
    "152": {
      "block": "main_call_with_txn_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "154": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "155": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "156": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "157": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "159": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "160": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "161": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "162": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "165": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "168": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "170": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "1"
      ]
    },
    "171": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "gtxn_idx%0#0"
      ]
    },
    "172": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "175": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "gtxn_idx%0#0",
        "tmp%9#0"
      ]
    },
    "178": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%9#0",
        "tmp%7#0"
      ]
    },
    "180": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%9#0",
        "tmp%7#0",
        "gtxn_idx%0#0"
      ]
    },
    "182": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "gtxn_idx%0#0",
        "tmp%9#0"
      ]
    },
    "184": {
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn",
      "op": "callsub call_with_txn",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "187": {
      "op": "itob",
      "defined_out": [
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0"
      ]
    },
    "188": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "as_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "as_Encoded(uint64)%0#0",
        "0x151f7c75"
      ]
    },
    "189": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "as_Encoded(uint64)%0#0"
      ]
    },
    "190": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "191": {
      "op": "log",
      "stack_out": []
    },
    "192": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "193": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__@13"
    },
    "196": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "198": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "0"
      ]
    },
    "199": {
      "op": "swap",
      "stack_out": [
        "0",
        "tmp%26#0"
      ]
    },
    "200": {
      "op": "match main___algopy_default_create@9",
      "stack_out": []
    },
    "204": {
      "block": "main_switch_case_next@11",
      "stack_in": [],
      "op": "b main_after_if_else@12"
    },
    "207": {
      "block": "main___algopy_default_create@9",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "209": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "0"
      ]
    },
    "210": {
      "op": "==",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "211": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "212": {
      "block": "main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create@15",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "213": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__@13"
    },
    "216": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn",
      "params": {
        "a#0": "bytes",
        "acfg#0": "uint64",
        "b#0": "bytes"
      },
      "block": "call_with_txn",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "219": {
      "block": "call_with_txn_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "221": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "222": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "223": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "224": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "226": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "227": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "228": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "229": {
      "op": "frame_dig -2",
      "defined_out": [
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "231": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "233": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "acfg"
      ]
    },
    "234": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "235": {
      "error": "expected asset config",
      "op": "assert // expected asset config",
      "stack_out": []
    },
    "236": {
      "op": "frame_dig -2",
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "238": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "240": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "241": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "242": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "243": {
      "op": "frame_dig -2",
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "245": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "247": {
      "retsub": true,
      "op": "retsub"
    },
    "248": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg",
      "params": {
        "a#0": "bytes",
        "acfg#0": "uint64",
        "b#0": "bytes"
      },
      "block": "call_with_acfg",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "251": {
      "block": "call_with_acfg_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "253": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "254": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "255": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "256": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "258": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "259": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "260": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "261": {
      "op": "frame_dig -2",
      "defined_out": [
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "263": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "265": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "266": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "267": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "268": {
      "op": "frame_dig -2",
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "270": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "272": {
      "retsub": true,
      "op": "retsub"
    },
    "273": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return",
      "params": {
        "a#0": "bytes",
        "acfg#0": "uint64",
        "b#0": "bytes"
      },
      "block": "call_with_acfg_no_return",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "276": {
      "block": "call_with_acfg_no_return_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "278": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "279": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "280": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "281": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "283": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "284": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "285": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "286": {
      "op": "frame_dig -2",
      "defined_out": [
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "288": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "290": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "291": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "292": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "293": {
      "retsub": true,
      "op": "retsub"
    }
  }
}