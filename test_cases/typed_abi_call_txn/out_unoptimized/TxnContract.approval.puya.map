{
  "version": 3,
  "sources": [
    "../txn_contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;;;;;;;;AAAA;;;;;;;AAgBK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAhBL;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAgBK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;;;AAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AATL;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AASK;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AARA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AACK;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;;;;AADL;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAEe;;AAAK;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAA;;AAAa;AAAb;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAP;AAER;;;;;;AAEe;;AAAK;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAP;AAER;;;;;;AAIe;;AAAK;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3"
    },
    "6": {
      "op": "bytecblock 0x61 0x62 0x151f7c75"
    },
    "17": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "19": {
      "op": "b main_block@0"
    },
    "22": {
      "block": "main_block@0",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_block@1"
    },
    "25": {
      "block": "main_block@1",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#1"
      ]
    },
    "27": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#1",
        "0"
      ]
    },
    "28": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "29": {
      "op": "bz main_bare_routing@8",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "32": {
      "op": "b main_abi_routing@2"
    },
    "35": {
      "block": "main_abi_routing@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "38": {
      "op": "pushbytes 0xa1f5040d // method \"call_with_txn(byte[],txn,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ]
    },
    "44": {
      "op": "pushbytes 0x6d4700ad // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "50": {
      "op": "pushbytes 0xc840077d // method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "56": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "tmp%2#0"
      ]
    },
    "58": {
      "op": "match main_call_with_txn_route@3 main_call_with_acfg_route@4 main_call_with_acfg_no_return_route@5",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "66": {
      "op": "b main_switch_case_default@6"
    },
    "69": {
      "block": "main_switch_case_default@6",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_switch_case_next@7"
    },
    "72": {
      "block": "main_switch_case_next@7",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_if_else@12"
    },
    "75": {
      "block": "main_after_if_else@12",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0"
      ]
    },
    "76": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "78": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__@13"
    },
    "81": {
      "block": "main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__@13",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "82": {
      "block": "main_call_with_acfg_no_return_route@5",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%23#0"
      ]
    },
    "84": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%23#0",
        "NoOp"
      ]
    },
    "85": {
      "op": "==",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%24#0"
      ]
    },
    "86": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "87": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%25#0"
      ]
    },
    "89": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%25#0",
        "0"
      ]
    },
    "90": {
      "op": "!=",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%26#0"
      ]
    },
    "91": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "92": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%4#0"
      ]
    },
    "95": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0"
      ]
    },
    "98": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "100": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0",
        "tmp%28#0",
        "1"
      ]
    },
    "101": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0",
        "gtxn_idx%2#0"
      ]
    },
    "102": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "103": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%1#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0",
        "gtxn_idx%2#0",
        "gtxn_type%1#0"
      ]
    },
    "105": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "gtxn_idx%2#0",
        "gtxn_type%1#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0",
        "gtxn_idx%2#0",
        "gtxn_type%1#0",
        "acfg"
      ]
    },
    "106": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%1#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "107": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0",
        "gtxn_idx%2#0"
      ]
    },
    "108": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%2#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0",
        "gtxn_idx%2#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ]
    },
    "111": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0",
        "gtxn_idx%2#0",
        "tmp%29#0"
      ]
    },
    "114": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%2#0",
        "tmp%29#0",
        "tmp%27#0"
      ]
    },
    "116": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%29#0",
        "tmp%27#0",
        "gtxn_idx%2#0"
      ]
    },
    "118": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0",
        "gtxn_idx%2#0",
        "tmp%29#0"
      ]
    },
    "120": {
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return",
      "op": "callsub call_with_acfg_no_return",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "123": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0"
      ]
    },
    "124": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "126": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__@13"
    },
    "129": {
      "block": "main_call_with_acfg_route@4",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0"
      ]
    },
    "131": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0",
        "NoOp"
      ]
    },
    "132": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%14#0"
      ]
    },
    "133": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "134": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%15#0"
      ]
    },
    "136": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%15#0",
        "0"
      ]
    },
    "137": {
      "op": "!=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0"
      ]
    },
    "138": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "142": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0"
      ]
    },
    "145": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "147": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "tmp%18#0",
        "1"
      ]
    },
    "148": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "gtxn_idx%1#0"
      ]
    },
    "149": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "150": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "gtxn_idx%1#0",
        "gtxn_type%0#0"
      ]
    },
    "152": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "gtxn_idx%1#0",
        "gtxn_type%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "gtxn_idx%1#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "153": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%0#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "154": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "gtxn_idx%1#0"
      ]
    },
    "155": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "gtxn_idx%1#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "158": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "gtxn_idx%1#0",
        "tmp%19#0"
      ]
    },
    "161": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%1#0",
        "tmp%19#0",
        "tmp%17#0"
      ]
    },
    "163": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%19#0",
        "tmp%17#0",
        "gtxn_idx%1#0"
      ]
    },
    "165": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "gtxn_idx%1#0",
        "tmp%19#0"
      ]
    },
    "167": {
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg",
      "op": "callsub call_with_acfg",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%20#0"
      ]
    },
    "170": {
      "op": "itob",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0"
      ]
    },
    "171": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0",
        "0x151f7c75"
      ]
    },
    "172": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%21#0"
      ]
    },
    "174": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%22#0"
      ]
    },
    "175": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "176": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0"
      ]
    },
    "177": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "179": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__@13"
    },
    "182": {
      "block": "main_call_with_txn_route@3",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "184": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "NoOp"
      ]
    },
    "185": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "186": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "187": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "189": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "0"
      ]
    },
    "190": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "191": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "195": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "198": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "200": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "1"
      ]
    },
    "201": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "gtxn_idx%0#0"
      ]
    },
    "202": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "205": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "gtxn_idx%0#0",
        "tmp%9#0"
      ]
    },
    "208": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "tmp%9#0",
        "tmp%7#0"
      ]
    },
    "210": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "tmp%7#0",
        "gtxn_idx%0#0"
      ]
    },
    "212": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "gtxn_idx%0#0",
        "tmp%9#0"
      ]
    },
    "214": {
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn",
      "op": "callsub call_with_txn",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%10#0"
      ]
    },
    "217": {
      "op": "itob",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "218": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "219": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "222": {
      "op": "log",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "223": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0"
      ]
    },
    "224": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "226": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__@13"
    },
    "229": {
      "block": "main_bare_routing@8",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%30#0"
      ]
    },
    "231": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%30#0",
        "0"
      ]
    },
    "232": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0",
        "tmp%30#0"
      ]
    },
    "234": {
      "op": "match main___algopy_default_create@9",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "238": {
      "op": "b main_switch_case_default@10"
    },
    "241": {
      "block": "main_switch_case_default@10",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_switch_case_next@11"
    },
    "244": {
      "block": "main_switch_case_next@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_if_else@12"
    },
    "247": {
      "block": "main___algopy_default_create@9",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%31#0"
      ]
    },
    "249": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%31#0",
        "0"
      ]
    },
    "250": {
      "op": "==",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%32#0"
      ]
    },
    "251": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "252": {
      "op": "b main_block@14"
    },
    "255": {
      "block": "main_block@14",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create@15"
    },
    "258": {
      "block": "main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create@15",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0"
      ]
    },
    "259": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "261": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__@13"
    },
    "264": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn",
      "params": {
        "a#0": "bytes",
        "acfg#0": "uint64",
        "b#0": "bytes"
      },
      "block": "call_with_txn",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "267": {
      "op": "b call_with_txn_block@0"
    },
    "270": {
      "block": "call_with_txn_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "272": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "273": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "275": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "277": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "278": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "279": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "280": {
      "op": "frame_dig -2",
      "defined_out": [
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "282": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "284": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "acfg"
      ]
    },
    "285": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "286": {
      "error": "expected asset config",
      "op": "assert // expected asset config",
      "stack_out": []
    },
    "287": {
      "op": "frame_dig -2",
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "289": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "291": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "292": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "293": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "294": {
      "op": "frame_dig -2",
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "296": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "298": {
      "retsub": true,
      "op": "retsub"
    },
    "299": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg",
      "params": {
        "a#0": "bytes",
        "acfg#0": "uint64",
        "b#0": "bytes"
      },
      "block": "call_with_acfg",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "302": {
      "op": "b call_with_acfg_block@0"
    },
    "305": {
      "block": "call_with_acfg_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "307": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "308": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "309": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "310": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "312": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "313": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "314": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "315": {
      "op": "frame_dig -2",
      "defined_out": [
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "317": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "319": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "320": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "321": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "322": {
      "op": "frame_dig -2",
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "324": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "326": {
      "retsub": true,
      "op": "retsub"
    },
    "327": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return",
      "params": {
        "a#0": "bytes",
        "acfg#0": "uint64",
        "b#0": "bytes"
      },
      "block": "call_with_acfg_no_return",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "330": {
      "op": "b call_with_acfg_no_return_block@0"
    },
    "333": {
      "block": "call_with_acfg_no_return_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "335": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "336": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "337": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "338": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "340": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "341": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "342": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "343": {
      "op": "frame_dig -2",
      "defined_out": [
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "345": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "347": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "348": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "349": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "350": {
      "retsub": true,
      "op": "retsub"
    }
  }
}