{
  "version": 3,
  "sources": [
    "../txn_contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAUA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;;;;;;;;AAAA;AAgBK;;;;;;AAPA;;;;;;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAQA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAfL;;;;;;AAEe;;AAAK;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAA;;AAAa;AAAb;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAP;AAER;;;;;;AAEe;;AAAK;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAP;AAER;;;;;;AAIe;;AAAK;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3"
    },
    "6": {
      "op": "bytecblock 0x61 0x62 0x151f7c75"
    },
    "17": {
      "op": "b main_block@0"
    },
    "20": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "23": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "25": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "26": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "27": {
      "op": "bz main___algopy_default_create@10",
      "stack_out": []
    },
    "30": {
      "op": "b main_abi_routing@2"
    },
    "33": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "35": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "36": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "37": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "38": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "40": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "41": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "42": {
      "op": "bz main_create_NoOp@8",
      "stack_out": []
    },
    "45": {
      "op": "b main_call_NoOp@3"
    },
    "48": {
      "block": "main_call_NoOp@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "51": {
      "op": "pushbytes 0xa1f5040d // method \"call_with_txn(byte[],txn,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ]
    },
    "57": {
      "op": "pushbytes 0x6d4700ad // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "63": {
      "op": "pushbytes 0xc840077d // method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "69": {
      "op": "uncover 3",
      "stack_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "tmp%6#0"
      ]
    },
    "71": {
      "op": "match main_call_with_txn_route@4 main_call_with_acfg_route@5 main_call_with_acfg_no_return_route@6",
      "stack_out": []
    },
    "79": {
      "op": "b main_switch_case_next@7"
    },
    "82": {
      "block": "main_switch_case_next@7",
      "stack_in": [],
      "op": "b main_after_if_else@9"
    },
    "85": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "b main_after_if_else@11"
    },
    "88": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "89": {
      "block": "main_call_with_acfg_no_return_route@6",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]",
      "op": "callsub call_with_acfg_no_return"
    },
    "92": {
      "op": "b main_switch_case_next@7"
    },
    "95": {
      "block": "main_call_with_acfg_route@5",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]",
      "op": "callsub call_with_acfg"
    },
    "98": {
      "op": "b main_switch_case_next@7"
    },
    "101": {
      "block": "main_call_with_txn_route@4",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]",
      "op": "callsub call_with_txn"
    },
    "104": {
      "op": "b main_switch_case_next@7"
    },
    "107": {
      "block": "main_create_NoOp@8",
      "stack_in": [],
      "op": "b main_after_if_else@9"
    },
    "110": {
      "block": "main___algopy_default_create@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "112": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "113": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "114": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "116": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "117": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "118": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "119": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "120": {
      "op": "b main_block@13"
    },
    "123": {
      "block": "main_block@13",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create@14"
    },
    "126": {
      "block": "main_after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create@14",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "127": {
      "op": "return",
      "stack_out": []
    },
    "128": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]",
      "params": {},
      "block": "call_with_txn",
      "stack_in": [],
      "op": "b call_with_txn_block@0"
    },
    "131": {
      "block": "call_with_txn_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "134": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "137": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "139": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "140": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "141": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "144": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "147": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "149": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "151": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "153": {
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn",
      "op": "callsub test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "156": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "157": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "158": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%4#0"
      ]
    },
    "160": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "161": {
      "op": "log",
      "stack_out": []
    },
    "162": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "163": {
      "op": "return",
      "stack_out": []
    },
    "164": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]",
      "params": {},
      "block": "call_with_acfg",
      "stack_in": [],
      "op": "b call_with_acfg_block@0"
    },
    "167": {
      "block": "call_with_acfg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "170": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "173": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "175": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "176": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "177": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "178": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "180": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "181": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "182": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "183": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "186": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "189": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "191": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "193": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "195": {
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg",
      "op": "callsub test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "198": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "199": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "200": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%4#0"
      ]
    },
    "202": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "203": {
      "op": "log",
      "stack_out": []
    },
    "204": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "205": {
      "op": "return",
      "stack_out": []
    },
    "206": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]",
      "params": {},
      "block": "call_with_acfg_no_return",
      "stack_in": [],
      "op": "b call_with_acfg_no_return_block@0"
    },
    "209": {
      "block": "call_with_acfg_no_return_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "212": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "215": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "217": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "218": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "219": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "220": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "222": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "223": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "224": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "225": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "228": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "231": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "233": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "235": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "237": {
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return",
      "op": "callsub test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return",
      "stack_out": []
    },
    "240": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "241": {
      "op": "return",
      "stack_out": []
    },
    "242": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn",
      "params": {
        "a#0": "bytes",
        "acfg#0": "uint64",
        "b#0": "bytes"
      },
      "block": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "245": {
      "op": "b test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn_block@0"
    },
    "248": {
      "block": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "250": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "251": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "252": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "253": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "255": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "256": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "257": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "258": {
      "op": "frame_dig -2",
      "defined_out": [
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "260": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "262": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "acfg"
      ]
    },
    "263": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "264": {
      "error": "expected asset config",
      "op": "assert // expected asset config",
      "stack_out": []
    },
    "265": {
      "op": "frame_dig -2",
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "267": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "269": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "270": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "271": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "272": {
      "op": "frame_dig -2",
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "274": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "276": {
      "retsub": true,
      "op": "retsub"
    },
    "277": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg",
      "params": {
        "a#0": "bytes",
        "acfg#0": "uint64",
        "b#0": "bytes"
      },
      "block": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "280": {
      "op": "b test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_block@0"
    },
    "283": {
      "block": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "285": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "286": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "287": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "288": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "290": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "291": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "292": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "293": {
      "op": "frame_dig -2",
      "defined_out": [
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "295": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "297": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "298": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "299": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "300": {
      "op": "frame_dig -2",
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "302": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "304": {
      "retsub": true,
      "op": "retsub"
    },
    "305": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return",
      "params": {
        "a#0": "bytes",
        "acfg#0": "uint64",
        "b#0": "bytes"
      },
      "block": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "308": {
      "op": "b test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return_block@0"
    },
    "311": {
      "block": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "313": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "314": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "315": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "316": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "318": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "319": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "320": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "321": {
      "op": "frame_dig -2",
      "defined_out": [
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "323": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "325": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "326": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "327": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "328": {
      "retsub": true,
      "op": "retsub"
    }
  }
}