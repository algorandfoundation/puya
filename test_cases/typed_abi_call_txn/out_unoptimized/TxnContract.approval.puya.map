{
  "version": 3,
  "sources": [
    "../txn_contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAUA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;;;;AAAA;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;AAAA;;;;;;AAAA;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;;;;AACK;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAQA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAOA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AAfL;;;;;;AAEe;;AAAK;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAA;;AAAa;AAAb;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAP;AAER;;;;;;AAEe;;AAAK;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;AACO;;AAAA;;AAAP;AAER;;;;;;AAIe;;AAAK;AAAL;AAAP;AACO;;AAAK;AAAL;AAAP;AACO;;AAAA;;AAAA;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 3"
    },
    "6": {
      "op": "bytecblock 0x61 0x62 0x151f7c75"
    },
    "17": {
      "op": "b block@0"
    },
    "20": {
      "block": "block@0",
      "stack_in": [],
      "op": "b block@1"
    },
    "23": {
      "block": "block@1",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "25": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "26": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "28": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "29": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "30": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "31": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "32": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "0",
        "1"
      ]
    },
    "33": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "0",
        "1",
        "2",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2"
      ]
    },
    "35": {
      "op": "intc_2 // 3",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3"
      ]
    },
    "36": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "38": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5"
      ]
    },
    "40": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    },
    "42": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ]
    },
    "44": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ]
    },
    "46": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
      ]
    },
    "48": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "0",
        "1",
        "10",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10"
      ]
    },
    "50": {
      "op": "pushint 11 // 11",
      "defined_out": [
        "0",
        "1",
        "10",
        "11",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "52": {
      "op": "uncover 12",
      "stack_out": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "tmp%4#0"
      ]
    },
    "54": {
      "op": "match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication",
      "stack_out": []
    },
    "80": {
      "op": "b *NOT_IMPLEMENTED"
    },
    "83": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "84": {
      "block": "create_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "87": {
      "block": "call_DeleteApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "90": {
      "block": "create_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "93": {
      "block": "call_UpdateApplication",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "96": {
      "block": "create_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "99": {
      "block": "call_ClearState",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "102": {
      "block": "create_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "105": {
      "block": "call_CloseOut",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "108": {
      "block": "create_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "111": {
      "block": "call_OptIn",
      "stack_in": [],
      "op": "b *NOT_IMPLEMENTED"
    },
    "114": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "116": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "117": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "118": {
      "op": "bz else_body@10",
      "stack_out": []
    },
    "121": {
      "op": "b __algopy_default_create@9"
    },
    "124": {
      "block": "__algopy_default_create@9",
      "stack_in": [],
      "op": "b block@23"
    },
    "127": {
      "block": "block@23",
      "stack_in": [],
      "op": "b after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create@24"
    },
    "130": {
      "block": "after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create@24",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "131": {
      "op": "return",
      "stack_out": []
    },
    "132": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "block": "else_body@10",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for create NoOp"
    },
    "133": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "136": {
      "op": "pushbytes 0xa1f5040d // method \"call_with_txn(byte[],txn,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ]
    },
    "142": {
      "op": "pushbytes 0x6d4700ad // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "148": {
      "op": "pushbytes 0xc840077d // method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "154": {
      "op": "uncover 3",
      "stack_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "tmp%5#0"
      ]
    },
    "156": {
      "op": "match call_with_txn_route@3 call_with_acfg_route@4 call_with_acfg_no_return_route@5",
      "stack_out": []
    },
    "164": {
      "op": "b switch_case_default@6"
    },
    "167": {
      "block": "switch_case_default@6",
      "stack_in": [],
      "op": "b switch_case_next@7"
    },
    "170": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "block": "switch_case_next@7",
      "stack_in": [],
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "171": {
      "block": "call_with_acfg_no_return_route@5",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]",
      "op": "callsub call_with_acfg_no_return"
    },
    "174": {
      "op": "b switch_case_next@7"
    },
    "177": {
      "block": "call_with_acfg_route@4",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]",
      "op": "callsub call_with_acfg"
    },
    "180": {
      "op": "b switch_case_next@7"
    },
    "183": {
      "block": "call_with_txn_route@3",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]",
      "op": "callsub call_with_txn"
    },
    "186": {
      "op": "b switch_case_next@7"
    },
    "189": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]",
      "params": {},
      "block": "call_with_txn",
      "stack_in": [],
      "op": "b call_with_txn_block@0"
    },
    "192": {
      "block": "call_with_txn_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "195": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "200": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "201": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "202": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "205": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "208": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "210": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "212": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "214": {
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn",
      "op": "callsub test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "217": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "218": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "219": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%4#0"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "222": {
      "op": "log",
      "stack_out": []
    },
    "223": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "224": {
      "op": "return",
      "stack_out": []
    },
    "225": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]",
      "params": {},
      "block": "call_with_acfg",
      "stack_in": [],
      "op": "b call_with_acfg_block@0"
    },
    "228": {
      "block": "call_with_acfg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "231": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "234": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "236": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "237": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "238": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "239": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "241": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "242": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "243": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "244": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "247": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "250": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "252": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "254": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "256": {
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg",
      "op": "callsub test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "259": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "260": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "261": {
      "op": "uncover 1",
      "stack_out": [
        "0x151f7c75",
        "tmp%4#0"
      ]
    },
    "263": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "264": {
      "op": "log",
      "stack_out": []
    },
    "265": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "266": {
      "op": "return",
      "stack_out": []
    },
    "267": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]",
      "params": {},
      "block": "call_with_acfg_no_return",
      "stack_in": [],
      "op": "b call_with_acfg_no_return_block@0"
    },
    "270": {
      "block": "call_with_acfg_no_return_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "273": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "276": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "278": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "1"
      ]
    },
    "279": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "280": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "281": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "283": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "284": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "285": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "286": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "289": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "292": {
      "op": "uncover 2",
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "294": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "gtxn_idx%0#0"
      ]
    },
    "296": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "gtxn_idx%0#0",
        "tmp%2#0"
      ]
    },
    "298": {
      "callsub": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return",
      "op": "callsub test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return",
      "stack_out": []
    },
    "301": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "302": {
      "op": "return",
      "stack_out": []
    },
    "303": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn",
      "params": {
        "a#0": "bytes",
        "acfg#0": "uint64",
        "b#0": "bytes"
      },
      "block": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "306": {
      "op": "b test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn_block@0"
    },
    "309": {
      "block": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "311": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "312": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "313": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "314": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "316": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "317": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "318": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "319": {
      "op": "frame_dig -2",
      "defined_out": [
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "321": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "323": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "acfg"
      ]
    },
    "324": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "325": {
      "error": "expected asset config",
      "op": "assert // expected asset config",
      "stack_out": []
    },
    "326": {
      "op": "frame_dig -2",
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "328": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "330": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "331": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "332": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "333": {
      "op": "frame_dig -2",
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "335": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "337": {
      "retsub": true,
      "op": "retsub"
    },
    "338": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg",
      "params": {
        "a#0": "bytes",
        "acfg#0": "uint64",
        "b#0": "bytes"
      },
      "block": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "341": {
      "op": "b test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_block@0"
    },
    "344": {
      "block": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "346": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "347": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "348": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "349": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "351": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "352": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "353": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "354": {
      "op": "frame_dig -2",
      "defined_out": [
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "356": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "358": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "359": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "360": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "361": {
      "op": "frame_dig -2",
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "363": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "365": {
      "retsub": true,
      "op": "retsub"
    },
    "366": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return",
      "params": {
        "a#0": "bytes",
        "acfg#0": "uint64",
        "b#0": "bytes"
      },
      "block": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "369": {
      "op": "b test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return_block@0"
    },
    "372": {
      "block": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return_block@0",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "374": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)",
        "0x61"
      ]
    },
    "375": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "376": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": []
    },
    "377": {
      "op": "frame_dig -1",
      "defined_out": [
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)"
      ]
    },
    "379": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "b#0 (copy)"
      ],
      "stack_out": [
        "b#0 (copy)",
        "0x62"
      ]
    },
    "380": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "381": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": []
    },
    "382": {
      "op": "frame_dig -2",
      "defined_out": [
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0 (copy)"
      ]
    },
    "384": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "386": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "387": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "388": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "389": {
      "retsub": true,
      "op": "retsub"
    }
  }
}