#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 3 6
    bytecblock "TEST" "TST" 0x151f7c75 0x6d4700ad
    b block@0

block@0:
    b block@1

block@1:
    // typed_abi_call_txn/caller.py:14
    // class Caller(ARC4Contract):
    txn NumAppArgs
    intc_0 // 0
    !=
    bz __algopy_default_create@12
    b abi_routing@2

abi_routing@2:
    // typed_abi_call_txn/caller.py:14
    // class Caller(ARC4Contract):
    txn OnCompletion
    intc_0 // NoOp
    ==
    assert // OnCompletion must be NoOp
    txn ApplicationID
    intc_0 // 0
    !=
    bz create_NoOp@10
    b call_NoOp@3

call_NoOp@3:
    // typed_abi_call_txn/caller.py:14
    // class Caller(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0x0ab53563 // method "test_call_with_txn(byte[],byte[],uint64)void"
    pushbytes 0xea6a6ade // method "test_call_with_acfg(byte[],byte[],uint64)void"
    pushbytes 0x2381ff80 // method "test_call_with_infer(byte[],byte[],uint64)void"
    pushbytes 0x00b50f1c // method "test_call_with_acfg_no_return(byte[],byte[],uint64)void"
    uncover 4
    match test_call_with_txn_route@4 test_call_with_acfg_route@5 test_call_with_infer_route@6 test_call_with_acfg_no_return_route@7
    b switch_case_default@8

switch_case_default@8:
    b switch_case_next@9

switch_case_next@9:
    b after_if_else@11

after_if_else@11:
    b after_if_else@13

after_if_else@13:
    // typed_abi_call_txn/caller.py:14
    // class Caller(ARC4Contract):
    err

test_call_with_acfg_no_return_route@7:
    // typed_abi_call_txn/caller.py:61
    // @arc4.abimethod
    callsub test_call_with_acfg_no_return
    b switch_case_next@9

test_call_with_infer_route@6:
    // typed_abi_call_txn/caller.py:46
    // @arc4.abimethod
    callsub test_call_with_infer
    b switch_case_next@9

test_call_with_acfg_route@5:
    // typed_abi_call_txn/caller.py:31
    // @arc4.abimethod
    callsub test_call_with_acfg
    b switch_case_next@9

test_call_with_txn_route@4:
    // typed_abi_call_txn/caller.py:15
    // @arc4.abimethod
    callsub test_call_with_txn
    b switch_case_next@9

create_NoOp@10:
    b after_if_else@11

__algopy_default_create@12:
    txn OnCompletion
    intc_0 // NoOp
    ==
    txn ApplicationID
    intc_0 // 0
    ==
    &&
    assert // OnCompletion must be NoOp && can only call when creating
    b block@15

block@15:
    b after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__algopy_default_create@16

after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__algopy_default_create@16:
    intc_1 // 1
    return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]() -> void:
test_call_with_txn:
    b test_call_with_txn_block@0

test_call_with_txn_block@0:
    // typed_abi_call_txn/caller.py:15
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn
    intc_1 // 1
    return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]() -> void:
test_call_with_acfg:
    b test_call_with_acfg_block@0

test_call_with_acfg_block@0:
    // typed_abi_call_txn/caller.py:31
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg
    intc_1 // 1
    return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]() -> void:
test_call_with_infer:
    b test_call_with_infer_block@0

test_call_with_infer_block@0:
    // typed_abi_call_txn/caller.py:46
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer
    intc_1 // 1
    return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]() -> void:
test_call_with_acfg_no_return:
    b test_call_with_acfg_no_return_block@0

test_call_with_acfg_no_return_block@0:
    // typed_abi_call_txn/caller.py:61
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return
    intc_1 // 1
    return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn(a: bytes, b: bytes, app: uint64) -> void:
test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn:
    // typed_abi_call_txn/caller.py:15-16
    // @arc4.abimethod
    // def test_call_with_txn(self, a: Bytes, b: Bytes, app: Application) -> None:
    proto 3 0
    b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_block@0

test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_block@0:
    // typed_abi_call_txn/caller.py:22-28
    // asset_id, _txn = arc4.abi_call(
    //     TxnContract.call_with_txn,
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call_txn/caller.py:20
    // total=1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // typed_abi_call_txn/caller.py:19
    // asset_name="TEST",
    bytec_0 // "TEST"
    itxn_field ConfigAssetName
    // typed_abi_call_txn/caller.py:18
    // unit_name="TST",
    bytec_1 // "TST"
    itxn_field ConfigAssetUnitName
    // typed_abi_call_txn/caller.py:17
    // txn = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_next_txn@1

test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_next_txn@1:
    // typed_abi_call_txn/caller.py:22-28
    // asset_id, _txn = arc4.abi_call(
    //     TxnContract.call_with_txn,
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_next
    // typed_abi_call_txn/caller.py:24
    // a,
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    // typed_abi_call_txn/caller.py:26
    // b,
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    cover 1
    // typed_abi_call_txn/caller.py:27
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call_txn/caller.py:22-28
    // asset_id, _txn = arc4.abi_call(
    //     TxnContract.call_with_txn,
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    pushbytes 0xa1f5040d // method "call_with_txn(byte[],txn,byte[])uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_next_txn@2

test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_next_txn@2:
    // typed_abi_call_txn/caller.py:22-28
    // asset_id, _txn = arc4.abi_call(
    //     TxnContract.call_with_txn,
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_submit
    gitxn 1 LastLog
    dup
    extract 4 0
    cover 1
    extract 0 4
    bytec_2 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    btoi
    // typed_abi_call_txn/caller.py:29
    // assert asset_id, "expected asset id"
    intc_0 // 0
    !=
    assert // expected asset id
    retsub


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg(a: bytes, b: bytes, app: uint64) -> void:
test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg:
    // typed_abi_call_txn/caller.py:31-32
    // @arc4.abimethod
    // def test_call_with_acfg(self, a: Bytes, b: Bytes, app: Application) -> None:
    proto 3 0
    b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_block@0

test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_block@0:
    // typed_abi_call_txn/caller.py:38-44
    // arc4.abi_call(
    //     TxnContract.call_with_acfg,
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call_txn/caller.py:36
    // total=1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // typed_abi_call_txn/caller.py:35
    // asset_name="TEST",
    bytec_0 // "TEST"
    itxn_field ConfigAssetName
    // typed_abi_call_txn/caller.py:34
    // unit_name="TST",
    bytec_1 // "TST"
    itxn_field ConfigAssetUnitName
    // typed_abi_call_txn/caller.py:33
    // txn = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_next_txn@1

test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_next_txn@1:
    // typed_abi_call_txn/caller.py:38-44
    // arc4.abi_call(
    //     TxnContract.call_with_acfg,
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_next
    // typed_abi_call_txn/caller.py:40
    // a,
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    // typed_abi_call_txn/caller.py:42
    // b,
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    cover 1
    // typed_abi_call_txn/caller.py:43
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call_txn/caller.py:38-44
    // arc4.abi_call(
    //     TxnContract.call_with_acfg,
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    bytec_3 // method "call_with_acfg(byte[],acfg,byte[])uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_next_txn@2

test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_next_txn@2:
    // typed_abi_call_txn/caller.py:38-44
    // arc4.abi_call(
    //     TxnContract.call_with_acfg,
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_submit
    gitxn 1 LastLog
    extract 0 4
    bytec_2 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    retsub


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer(a: bytes, b: bytes, app: uint64) -> void:
test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer:
    // typed_abi_call_txn/caller.py:46-47
    // @arc4.abimethod
    // def test_call_with_infer(self, a: Bytes, b: Bytes, app: Application) -> None:
    proto 3 0
    b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_block@0

test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_block@0:
    // typed_abi_call_txn/caller.py:53-59
    // arc4.abi_call[UInt64](
    //     "call_with_acfg",
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call_txn/caller.py:51
    // total=1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // typed_abi_call_txn/caller.py:50
    // asset_name="TEST",
    bytec_0 // "TEST"
    itxn_field ConfigAssetName
    // typed_abi_call_txn/caller.py:49
    // unit_name="TST",
    bytec_1 // "TST"
    itxn_field ConfigAssetUnitName
    // typed_abi_call_txn/caller.py:48
    // txn = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_next_txn@1

test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_next_txn@1:
    // typed_abi_call_txn/caller.py:53-59
    // arc4.abi_call[UInt64](
    //     "call_with_acfg",
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_next
    // typed_abi_call_txn/caller.py:55
    // a,
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    // typed_abi_call_txn/caller.py:57
    // b,
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    cover 1
    // typed_abi_call_txn/caller.py:58
    // app_id=app,
    frame_dig -1
    itxn_field ApplicationID
    // typed_abi_call_txn/caller.py:53-59
    // arc4.abi_call[UInt64](
    //     "call_with_acfg",
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    bytec_3 // method "call_with_acfg(byte[],acfg,byte[])uint64"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_next_txn@2

test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_next_txn@2:
    // typed_abi_call_txn/caller.py:53-59
    // arc4.abi_call[UInt64](
    //     "call_with_acfg",
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_submit
    gitxn 1 LastLog
    extract 0 4
    bytec_2 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    retsub


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return(a: bytes, b: bytes, app: uint64) -> void:
test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return:
    // typed_abi_call_txn/caller.py:61-62
    // @arc4.abimethod
    // def test_call_with_acfg_no_return(self, a: Bytes, b: Bytes, app: Application) -> None:
    proto 3 0
    b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_block@0

test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_block@0:
    // typed_abi_call_txn/caller.py:68-70
    // txn1 = arc4.abi_call(
    //     TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
    // )
    itxn_begin
    // typed_abi_call_txn/caller.py:66
    // total=1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // typed_abi_call_txn/caller.py:65
    // asset_name="TEST",
    bytec_0 // "TEST"
    itxn_field ConfigAssetName
    // typed_abi_call_txn/caller.py:64
    // unit_name="TST",
    bytec_1 // "TST"
    itxn_field ConfigAssetUnitName
    // typed_abi_call_txn/caller.py:63
    // acfg = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_next_txn@1

test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_next_txn@1:
    // typed_abi_call_txn/caller.py:68-70
    // txn1 = arc4.abi_call(
    //     TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
    // )
    itxn_next
    // typed_abi_call_txn/caller.py:69
    // TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
    frame_dig -3
    len
    itob
    extract 6 2
    frame_dig -3
    concat
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    cover 1
    frame_dig -1
    pushbytes 0x31
    itxn_field Note
    itxn_field ApplicationID
    // typed_abi_call_txn/caller.py:68-70
    // txn1 = arc4.abi_call(
    //     TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
    // )
    pushbytes 0xc840077d // method "call_with_acfg_no_return(byte[],acfg,byte[])void"
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_next_txn@2

test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_next_txn@2:
    // typed_abi_call_txn/caller.py:68-70
    // txn1 = arc4.abi_call(
    //     TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
    // )
    itxn_submit
    itxn Note
    // typed_abi_call_txn/caller.py:71
    // assert txn1.note == b"1"
    dup
    pushbytes 0x31
    ==
    assert
    dup
    // typed_abi_call_txn/caller.py:73
    // assert txn1_copy1.note == txn1.note
    ==
    assert
    // typed_abi_call_txn/caller.py:74
    // asset_id = op.GITxn.created_asset_id(0)
    gitxn 0 CreatedAssetID
    // typed_abi_call_txn/caller.py:75
    // assert asset_id, "expected asset to be created"
    intc_0 // 0
    !=
    assert // expected asset to be created
    retsub
