{
  "version": 3,
  "sources": [
    "../caller.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;AA+CK;;;;;;AAfA;;;;;;AAfA;;;;;;AAhBA;;;;;;AADL;;;AAAA;;AAAA;;;;;;;;;AAAA;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AACK;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AAgBA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AAeA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AAeA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AA9CL;;;;;;AAOyB;AAFP;;;AADK;;;AADD;;;AADR;;;AAAA;;;;;;AAKW;AAEb;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AACO;;;;AALM;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAOV;AAAA;AAAP;;AAER;;;;;;AAOQ;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;;;;AAKN;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AACO;;;;AALX;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAQR;;;;;;AAOQ;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;;;;AAKN;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AACO;;;;AALX;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAQR;;;;;;AAOe;AAFG;;;AADK;;;AADD;;;AADP;;;AAAA;;;;;;AAKA;AACmC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAS;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAU;;AAAU;;;;;;;AADhE;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;AAGA;AAAa;;;AAAb;AAAP;;AAEO;AAAP;AACW;;;AACJ;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 6"
    },
    "7": {
      "op": "bytecblock \"TEST\" \"TST\" 0x151f7c75 0x6d4700ad"
    },
    "28": {
      "op": "b main_block@0"
    },
    "31": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "34": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "36": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "37": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "38": {
      "op": "bz main_bare_routing@18",
      "stack_out": []
    },
    "41": {
      "op": "b main_abi_routing@2"
    },
    "44": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "47": {
      "op": "match",
      "stack_out": []
    },
    "49": {
      "op": "b main_route_NoOp@3"
    },
    "52": {
      "block": "main_route_NoOp@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "54": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "NoOp"
      ]
    },
    "55": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "56": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "57": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "60": {
      "op": "match",
      "stack_out": []
    },
    "62": {
      "op": "b main_switch_case_default@4"
    },
    "65": {
      "block": "main_switch_case_default@4",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "67": {
      "op": "bz main_create_NoOp@12",
      "stack_out": []
    },
    "70": {
      "op": "b main_call_NoOp@5"
    },
    "73": {
      "block": "main_call_NoOp@5",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "76": {
      "op": "pushbytes 0x0ab53563 // method \"test_call_with_txn(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)"
      ]
    },
    "82": {
      "op": "pushbytes 0xea6a6ade // method \"test_call_with_acfg(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)"
      ]
    },
    "88": {
      "op": "pushbytes 0x2381ff80 // method \"test_call_with_infer(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)"
      ]
    },
    "94": {
      "op": "pushbytes 0x00b50f1c // method \"test_call_with_acfg_no_return(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)"
      ]
    },
    "100": {
      "op": "uncover 4",
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "tmp%7#0"
      ]
    },
    "102": {
      "op": "match main_test_call_with_txn_route@6 main_test_call_with_acfg_route@7 main_test_call_with_infer_route@8 main_test_call_with_acfg_no_return_route@9",
      "stack_out": []
    },
    "112": {
      "op": "b main_switch_case_default@10"
    },
    "115": {
      "block": "main_switch_case_default@10",
      "stack_in": [],
      "op": "b main_switch_case_next@11"
    },
    "118": {
      "block": "main_switch_case_next@11",
      "stack_in": [],
      "op": "b main_after_if_else@15"
    },
    "121": {
      "block": "main_after_if_else@15",
      "stack_in": [],
      "op": "b main_switch_case_next@16"
    },
    "124": {
      "block": "main_switch_case_next@16",
      "stack_in": [],
      "op": "b main_switch_case_next@17"
    },
    "127": {
      "block": "main_switch_case_next@17",
      "stack_in": [],
      "op": "b main_after_if_else@22"
    },
    "130": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "131": {
      "block": "main_test_call_with_acfg_no_return_route@9",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]",
      "op": "callsub test_call_with_acfg_no_return"
    },
    "134": {
      "op": "b main_switch_case_next@11"
    },
    "137": {
      "block": "main_test_call_with_infer_route@8",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]",
      "op": "callsub test_call_with_infer"
    },
    "140": {
      "op": "b main_switch_case_next@11"
    },
    "143": {
      "block": "main_test_call_with_acfg_route@7",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]",
      "op": "callsub test_call_with_acfg"
    },
    "146": {
      "op": "b main_switch_case_next@11"
    },
    "149": {
      "block": "main_test_call_with_txn_route@6",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]",
      "op": "callsub test_call_with_txn"
    },
    "152": {
      "op": "b main_switch_case_next@11"
    },
    "155": {
      "block": "main_create_NoOp@12",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "158": {
      "op": "match",
      "stack_out": []
    },
    "160": {
      "op": "b main_switch_case_default@13"
    },
    "163": {
      "block": "main_switch_case_default@13",
      "stack_in": [],
      "op": "b main_switch_case_next@14"
    },
    "166": {
      "block": "main_switch_case_next@14",
      "stack_in": [],
      "op": "b main_after_if_else@15"
    },
    "169": {
      "block": "main_bare_routing@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "171": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "172": {
      "op": "uncover 1",
      "stack_out": [
        "0",
        "tmp%9#0"
      ]
    },
    "174": {
      "op": "match main___algopy_default_create@19",
      "stack_out": []
    },
    "178": {
      "op": "b main_switch_case_default@20"
    },
    "181": {
      "block": "main_switch_case_default@20",
      "stack_in": [],
      "op": "b main_switch_case_next@21"
    },
    "184": {
      "block": "main_switch_case_next@21",
      "stack_in": [],
      "op": "b main_after_if_else@22"
    },
    "187": {
      "block": "main___algopy_default_create@19",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "189": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0"
      ]
    },
    "190": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "191": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "192": {
      "op": "b main_block@24"
    },
    "195": {
      "block": "main_block@24",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__algopy_default_create@25"
    },
    "198": {
      "block": "main_after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__algopy_default_create@25",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "199": {
      "op": "return",
      "stack_out": []
    },
    "200": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]",
      "params": {},
      "block": "test_call_with_txn",
      "stack_in": [],
      "op": "b test_call_with_txn_block@0"
    },
    "203": {
      "block": "test_call_with_txn_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "206": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "209": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "212": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "215": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "218": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "219": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "221": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "223": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "225": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn",
      "op": "callsub test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn",
      "stack_out": []
    },
    "228": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "229": {
      "op": "return",
      "stack_out": []
    },
    "230": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]",
      "params": {},
      "block": "test_call_with_acfg",
      "stack_in": [],
      "op": "b test_call_with_acfg_block@0"
    },
    "233": {
      "block": "test_call_with_acfg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "236": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "239": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "242": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "245": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "248": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "249": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "251": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "253": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "255": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg",
      "op": "callsub test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg",
      "stack_out": []
    },
    "258": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "259": {
      "op": "return",
      "stack_out": []
    },
    "260": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]",
      "params": {},
      "block": "test_call_with_infer",
      "stack_in": [],
      "op": "b test_call_with_infer_block@0"
    },
    "263": {
      "block": "test_call_with_infer_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "266": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "269": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "272": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "275": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "278": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "279": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "281": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "283": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "285": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer",
      "op": "callsub test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer",
      "stack_out": []
    },
    "288": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "289": {
      "op": "return",
      "stack_out": []
    },
    "290": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]",
      "params": {},
      "block": "test_call_with_acfg_no_return",
      "stack_in": [],
      "op": "b test_call_with_acfg_no_return_block@0"
    },
    "293": {
      "block": "test_call_with_acfg_no_return_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "296": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "299": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "302": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "305": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "308": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "309": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "311": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "313": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "315": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return",
      "op": "callsub test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return",
      "stack_out": []
    },
    "318": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "319": {
      "op": "return",
      "stack_out": []
    },
    "320": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "323": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_block@0"
    },
    "326": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "327": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "328": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "330": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "331": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "333": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "334": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "336": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "337": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "339": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "340": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "342": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_next_txn@1"
    },
    "345": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_next_txn@1",
      "stack_in": [],
      "op": "itxn_next"
    },
    "346": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "348": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "349": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "350": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "353": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "355": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "356": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "358": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "359": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "360": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "363": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "365": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "366": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "368": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "370": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "372": {
      "op": "pushbytes 0xa1f5040d // method \"call_with_txn(byte[],txn,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ]
    },
    "378": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "380": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "382": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "384": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "385": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "387": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "388": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "390": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_next_txn@2"
    },
    "393": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "394": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "397": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "398": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "401": {
      "op": "cover 1",
      "stack_out": [
        "tmp%2#0",
        "awst_tmp%0#0"
      ]
    },
    "403": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "406": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "407": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "408": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "409": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "410": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0",
        "0"
      ]
    },
    "411": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "412": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "413": {
      "retsub": true,
      "op": "retsub"
    },
    "414": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "417": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_block@0"
    },
    "420": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "421": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "422": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "424": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "425": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "427": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "428": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "430": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "431": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "433": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "434": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "436": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_next_txn@1"
    },
    "439": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_next_txn@1",
      "stack_in": [],
      "op": "itxn_next"
    },
    "440": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "442": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "443": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "444": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "447": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "449": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "450": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "452": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "453": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "454": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "457": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "459": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "460": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "462": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "464": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "466": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "467": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "469": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "471": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "473": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "474": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "476": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "477": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "479": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_next_txn@2"
    },
    "482": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "483": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "486": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "489": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "490": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "491": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "492": {
      "retsub": true,
      "op": "retsub"
    },
    "493": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "496": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_block@0"
    },
    "499": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "500": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "501": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "503": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "504": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "506": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "507": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "509": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "510": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "512": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "513": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "515": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_next_txn@1"
    },
    "518": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_next_txn@1",
      "stack_in": [],
      "op": "itxn_next"
    },
    "519": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "521": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "522": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "523": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "526": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "528": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "529": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "531": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "532": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "533": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "536": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "538": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "539": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "541": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "543": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "545": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "546": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "548": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "550": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "552": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "553": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "555": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "556": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "558": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_next_txn@2"
    },
    "561": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "562": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "565": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "568": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "569": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "570": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "571": {
      "retsub": true,
      "op": "retsub"
    },
    "572": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "575": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_block@0"
    },
    "578": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "579": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "580": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "582": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "583": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "585": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "586": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "588": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "589": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "591": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "592": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "594": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_next_txn@1"
    },
    "597": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_next_txn@1",
      "stack_in": [],
      "op": "itxn_next"
    },
    "598": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "600": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "601": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "602": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "605": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "607": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "608": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "610": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "611": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "612": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "615": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "617": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "618": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "620": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "622": {
      "op": "pushbytes 0x31",
      "defined_out": [
        "0x31",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "0x31"
      ]
    },
    "625": {
      "op": "itxn_field Note",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "627": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "629": {
      "op": "pushbytes 0xc840077d // method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "635": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "637": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "639": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "641": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "642": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "644": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "645": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "647": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_next_txn@2"
    },
    "650": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "651": {
      "op": "itxn Note",
      "defined_out": [
        "txn1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0"
      ]
    },
    "653": {
      "op": "dup",
      "defined_out": [
        "txn1.Note#0",
        "txn1.Note#0 (copy)"
      ],
      "stack_out": [
        "txn1.Note#0",
        "txn1.Note#0 (copy)"
      ]
    },
    "654": {
      "op": "pushbytes 0x31",
      "defined_out": [
        "0x31",
        "txn1.Note#0",
        "txn1.Note#0 (copy)"
      ],
      "stack_out": [
        "txn1.Note#0",
        "txn1.Note#0 (copy)",
        "0x31"
      ]
    },
    "657": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "txn1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0",
        "tmp%2#0"
      ]
    },
    "658": {
      "op": "assert",
      "stack_out": [
        "txn1.Note#0"
      ]
    },
    "659": {
      "op": "dup",
      "defined_out": [
        "txn1.Note#0",
        "txn1_copy1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0",
        "txn1_copy1.Note#0"
      ]
    },
    "660": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "661": {
      "op": "assert",
      "stack_out": []
    },
    "662": {
      "op": "gitxn 0 CreatedAssetID",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "665": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0",
        "0"
      ]
    },
    "666": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "667": {
      "error": "expected asset to be created",
      "op": "assert // expected asset to be created",
      "stack_out": []
    },
    "668": {
      "retsub": true,
      "op": "retsub"
    }
  }
}