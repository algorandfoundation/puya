{
  "version": 3,
  "sources": [
    "../caller.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;;;;;;;;AAAA;;;;;;;AA+CK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA/CL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AA+CK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;;;AAfA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAhCL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAgCK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;;;AAfA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAjBL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAiBK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;;;AAhBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AACK;;AAAA;;AAAA;;AAAA;;;AAAA;;;;;;AADL;;AAAA;AAAA;;AAAA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;AAOyB;AAFP;;;AADK;;;AADD;;;AADR;;;AAAA;;;;;;AAKW;AAEb;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AACO;;;;AALM;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAOV;AAAA;AAAP;;AAER;;;;;;AAOQ;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;;;;AAKN;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AACO;;;;AALX;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAQR;;;;;;AAOQ;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;;;;AAKN;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AACO;;;;AALX;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAQR;;;;;;AAOe;AAFG;;;AADK;;;AADD;;;AADP;;;AAAA;;;;;;AAKA;AACmC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAS;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAU;;AAAU;;;;;;;AADhE;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;AAGA;AAAa;;;AAAb;AAAP;;AAEO;AAAP;AACW;;;AACJ;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 6"
    },
    "7": {
      "op": "bytecblock \"TEST\" \"TST\" 0x151f7c75 0x6d4700ad"
    },
    "28": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "30": {
      "op": "b main_block@0"
    },
    "33": {
      "block": "main_block@0",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_block@1"
    },
    "36": {
      "block": "main_block@1",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#1"
      ]
    },
    "38": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#1",
        "0"
      ]
    },
    "39": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "40": {
      "op": "bz main_bare_routing@9",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "43": {
      "op": "b main_abi_routing@2"
    },
    "46": {
      "block": "main_abi_routing@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "49": {
      "op": "pushbytes 0x0ab53563 // method \"test_call_with_txn(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)"
      ]
    },
    "55": {
      "op": "pushbytes 0xea6a6ade // method \"test_call_with_acfg(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)"
      ]
    },
    "61": {
      "op": "pushbytes 0x2381ff80 // method \"test_call_with_infer(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)"
      ]
    },
    "67": {
      "op": "pushbytes 0x00b50f1c // method \"test_call_with_acfg_no_return(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)"
      ]
    },
    "73": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "tmp%2#0"
      ]
    },
    "75": {
      "op": "match main_test_call_with_txn_route@3 main_test_call_with_acfg_route@4 main_test_call_with_infer_route@5 main_test_call_with_acfg_no_return_route@6",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "85": {
      "op": "b main_switch_case_default@7"
    },
    "88": {
      "block": "main_switch_case_default@7",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_switch_case_next@8"
    },
    "91": {
      "block": "main_switch_case_next@8",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_if_else@13"
    },
    "94": {
      "block": "main_after_if_else@13",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0"
      ]
    },
    "95": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "97": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__@14"
    },
    "100": {
      "block": "main_after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__@14",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "return",
      "defined_out": [
        "tmp%0#0"
      ]
    },
    "101": {
      "block": "main_test_call_with_acfg_no_return_route@6",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%24#0"
      ]
    },
    "103": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%24#0",
        "NoOp"
      ]
    },
    "104": {
      "op": "==",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%25#0"
      ]
    },
    "105": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "106": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%26#0"
      ]
    },
    "108": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%26#0",
        "0"
      ]
    },
    "109": {
      "op": "!=",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%27#0"
      ]
    },
    "110": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "111": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%6#0"
      ]
    },
    "114": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%28#0"
      ]
    },
    "117": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%7#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%28#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ]
    },
    "120": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "123": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%28#0",
        "tmp%29#0",
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "126": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "127": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%28#0"
      ]
    },
    "129": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%30#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "131": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "133": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return",
      "op": "callsub test_call_with_acfg_no_return",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "136": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0"
      ]
    },
    "137": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__@14"
    },
    "142": {
      "block": "main_test_call_with_infer_route@5",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0"
      ]
    },
    "144": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%17#0",
        "NoOp"
      ]
    },
    "145": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%18#0"
      ]
    },
    "146": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "147": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%19#0"
      ]
    },
    "149": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%19#0",
        "0"
      ]
    },
    "150": {
      "op": "!=",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%20#0"
      ]
    },
    "151": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "152": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%4#0"
      ]
    },
    "155": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0"
      ]
    },
    "158": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%5#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ]
    },
    "161": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "164": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0",
        "tmp%22#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "167": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "168": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%21#0"
      ]
    },
    "170": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%23#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "172": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "174": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer",
      "op": "callsub test_call_with_infer",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "177": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0"
      ]
    },
    "178": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "180": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__@14"
    },
    "183": {
      "block": "main_test_call_with_acfg_route@4",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%10#0"
      ]
    },
    "185": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%10#0",
        "NoOp"
      ]
    },
    "186": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "187": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "188": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "190": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0",
        "0"
      ]
    },
    "191": {
      "op": "!=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%13#0"
      ]
    },
    "192": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "193": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "196": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%14#0"
      ]
    },
    "199": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%14#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "202": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "205": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%14#0",
        "tmp%15#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "208": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "209": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%14#0"
      ]
    },
    "211": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%16#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "213": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "215": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg",
      "op": "callsub test_call_with_acfg",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "218": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0"
      ]
    },
    "219": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "221": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__@14"
    },
    "224": {
      "block": "main_test_call_with_txn_route@3",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "226": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0",
        "NoOp"
      ]
    },
    "227": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "228": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "229": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "231": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%5#0",
        "0"
      ]
    },
    "232": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "233": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "234": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "237": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "240": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "243": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "246": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "249": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "250": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%7#0"
      ]
    },
    "252": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "254": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "256": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn",
      "op": "callsub test_call_with_txn",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "259": {
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0"
      ]
    },
    "260": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "262": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__@14"
    },
    "265": {
      "block": "main_bare_routing@9",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%31#0"
      ]
    },
    "267": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%31#0",
        "0"
      ]
    },
    "268": {
      "op": "uncover 1",
      "stack_out": [
        "tmp%0#0",
        "0",
        "tmp%31#0"
      ]
    },
    "270": {
      "op": "match main___algopy_default_create@10",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "b main_switch_case_default@11"
    },
    "277": {
      "block": "main_switch_case_default@11",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_switch_case_next@12"
    },
    "280": {
      "block": "main_switch_case_next@12",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_if_else@13"
    },
    "283": {
      "block": "main___algopy_default_create@10",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%32#0"
      ]
    },
    "285": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%32#0",
        "0"
      ]
    },
    "286": {
      "op": "==",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%33#0"
      ]
    },
    "287": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "288": {
      "op": "b main_block@15"
    },
    "291": {
      "block": "main_block@15",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__algopy_default_create@16"
    },
    "294": {
      "block": "main_after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__algopy_default_create@16",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0"
      ]
    },
    "295": {
      "op": "bury 1",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "297": {
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__@14"
    },
    "300": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_call_with_txn",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "303": {
      "op": "b test_call_with_txn_block@0"
    },
    "306": {
      "block": "test_call_with_txn_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "307": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "308": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "310": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "311": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "313": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "314": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "316": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "317": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "319": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "320": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "322": {
      "op": "b test_call_with_txn_next_txn@1"
    },
    "325": {
      "block": "test_call_with_txn_next_txn@1",
      "stack_in": [],
      "op": "itxn_next"
    },
    "326": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "328": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "329": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "330": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "333": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "335": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "336": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "338": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "339": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "340": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "343": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "345": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "346": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "348": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "350": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "352": {
      "op": "pushbytes 0xa1f5040d // method \"call_with_txn(byte[],txn,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ]
    },
    "358": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "360": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "362": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "364": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "365": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "367": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "368": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "370": {
      "op": "b test_call_with_txn_next_txn@2"
    },
    "373": {
      "block": "test_call_with_txn_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "374": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "377": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "378": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "381": {
      "op": "cover 1",
      "stack_out": [
        "tmp%2#0",
        "awst_tmp%0#0"
      ]
    },
    "383": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "386": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "387": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "388": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "389": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "390": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0",
        "0"
      ]
    },
    "391": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "392": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "393": {
      "retsub": true,
      "op": "retsub"
    },
    "394": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_call_with_acfg",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "397": {
      "op": "b test_call_with_acfg_block@0"
    },
    "400": {
      "block": "test_call_with_acfg_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "401": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "402": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "404": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "405": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "407": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "408": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "410": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "411": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "413": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "414": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "416": {
      "op": "b test_call_with_acfg_next_txn@1"
    },
    "419": {
      "block": "test_call_with_acfg_next_txn@1",
      "stack_in": [],
      "op": "itxn_next"
    },
    "420": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "422": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "423": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "424": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "427": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "429": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "430": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "432": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "433": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "434": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "437": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "439": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "440": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "442": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "444": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "446": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "447": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "449": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "451": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "453": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "454": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "456": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "457": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "459": {
      "op": "b test_call_with_acfg_next_txn@2"
    },
    "462": {
      "block": "test_call_with_acfg_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "463": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "466": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "469": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "470": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "471": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "472": {
      "retsub": true,
      "op": "retsub"
    },
    "473": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_call_with_infer",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "476": {
      "op": "b test_call_with_infer_block@0"
    },
    "479": {
      "block": "test_call_with_infer_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "480": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "481": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "483": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "484": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "486": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "487": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "489": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "490": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "492": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "493": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "495": {
      "op": "b test_call_with_infer_next_txn@1"
    },
    "498": {
      "block": "test_call_with_infer_next_txn@1",
      "stack_in": [],
      "op": "itxn_next"
    },
    "499": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "501": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "502": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "503": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "506": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "508": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "509": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "511": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "512": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "513": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "516": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "518": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "519": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "521": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "523": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "525": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "526": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "528": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "530": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "532": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "533": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "535": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "536": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "538": {
      "op": "b test_call_with_infer_next_txn@2"
    },
    "541": {
      "block": "test_call_with_infer_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "542": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "545": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "548": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "549": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "550": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "551": {
      "retsub": true,
      "op": "retsub"
    },
    "552": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_call_with_acfg_no_return",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "555": {
      "op": "b test_call_with_acfg_no_return_block@0"
    },
    "558": {
      "block": "test_call_with_acfg_no_return_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "559": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "560": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "562": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "563": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "565": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "566": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "568": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "569": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "571": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "572": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "574": {
      "op": "b test_call_with_acfg_no_return_next_txn@1"
    },
    "577": {
      "block": "test_call_with_acfg_no_return_next_txn@1",
      "stack_in": [],
      "op": "itxn_next"
    },
    "578": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "580": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "581": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "582": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "585": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "587": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "588": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "590": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "591": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "592": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "595": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "597": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "598": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "600": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "602": {
      "op": "pushbytes 0x31",
      "defined_out": [
        "0x31",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "0x31"
      ]
    },
    "605": {
      "op": "itxn_field Note",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "607": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "609": {
      "op": "pushbytes 0xc840077d // method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "615": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "617": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "619": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "621": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "622": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "624": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "625": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "627": {
      "op": "b test_call_with_acfg_no_return_next_txn@2"
    },
    "630": {
      "block": "test_call_with_acfg_no_return_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "631": {
      "op": "itxn Note",
      "defined_out": [
        "txn1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0"
      ]
    },
    "633": {
      "op": "dup",
      "defined_out": [
        "txn1.Note#0",
        "txn1.Note#0 (copy)"
      ],
      "stack_out": [
        "txn1.Note#0",
        "txn1.Note#0 (copy)"
      ]
    },
    "634": {
      "op": "pushbytes 0x31",
      "defined_out": [
        "0x31",
        "txn1.Note#0",
        "txn1.Note#0 (copy)"
      ],
      "stack_out": [
        "txn1.Note#0",
        "txn1.Note#0 (copy)",
        "0x31"
      ]
    },
    "637": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "txn1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0",
        "tmp%2#0"
      ]
    },
    "638": {
      "op": "assert",
      "stack_out": [
        "txn1.Note#0"
      ]
    },
    "639": {
      "op": "dup",
      "defined_out": [
        "txn1.Note#0",
        "txn1_copy1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0",
        "txn1_copy1.Note#0"
      ]
    },
    "640": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "641": {
      "op": "assert",
      "stack_out": []
    },
    "642": {
      "op": "gitxn 0 CreatedAssetID",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "645": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0",
        "0"
      ]
    },
    "646": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "647": {
      "error": "expected asset to be created",
      "op": "assert // expected asset to be created",
      "stack_out": []
    },
    "648": {
      "retsub": true,
      "op": "retsub"
    }
  }
}