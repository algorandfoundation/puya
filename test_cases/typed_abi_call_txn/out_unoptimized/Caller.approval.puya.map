{
  "version": 3,
  "sources": [
    "../caller.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;;;;;AAAA;;AAAA;;;;;;;;;;AAAA;;;;;;;;;AAAA;AA+CK;;;;;;AAfA;;;;;;AAfA;;;;;;AAhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AAgBA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AAeA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;;;;AAeA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;;AAAA;AAAA;AA9CL;;;;;;AAOyB;AAFP;;;AADK;;;AADD;;;AADR;;;AAAA;;;;;;AAKW;AAEb;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AACO;;;;AALM;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAOV;AAAA;AAAP;;AAER;;;;;;AAOQ;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;;;;AAKN;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AACO;;;;AALX;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAQR;;;;;;AAOQ;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;;;;AAKN;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AACO;;;;AALX;;;;;;;AAAA;;;AAAA;;;;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAQR;;;;;;AAOe;AAFG;;;AADK;;;AADD;;;AADP;;;AAAA;;;;;;AAKA;AACmC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAS;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAU;;AAAU;;;;;;;AADhE;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;;AAGA;AAAa;;;AAAb;AAAP;;AAEO;AAAP;AACW;;;AACJ;AAAA;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 6"
    },
    "7": {
      "op": "bytecblock \"TEST\" \"TST\" 0x151f7c75 0x6d4700ad"
    },
    "28": {
      "op": "b main_block@0"
    },
    "31": {
      "block": "main_block@0",
      "stack_in": [],
      "op": "b main_block@1"
    },
    "34": {
      "block": "main_block@1",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "36": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1",
        "0"
      ]
    },
    "37": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "38": {
      "op": "bz main___algopy_default_create@11",
      "stack_out": []
    },
    "41": {
      "op": "b main_abi_routing@2"
    },
    "44": {
      "block": "main_abi_routing@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "46": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "NoOp"
      ]
    },
    "47": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "48": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "49": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "51": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "52": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "53": {
      "op": "bz main_create_NoOp@9",
      "stack_out": []
    },
    "56": {
      "op": "b main_call_NoOp@3"
    },
    "59": {
      "block": "main_call_NoOp@3",
      "stack_in": [],
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "62": {
      "op": "pushbytes 0x0ab53563 // method \"test_call_with_txn(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)"
      ]
    },
    "68": {
      "op": "pushbytes 0xea6a6ade // method \"test_call_with_acfg(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)"
      ]
    },
    "74": {
      "op": "pushbytes 0x2381ff80 // method \"test_call_with_infer(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)"
      ]
    },
    "80": {
      "op": "pushbytes 0x00b50f1c // method \"test_call_with_acfg_no_return(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)"
      ]
    },
    "86": {
      "op": "uncover 4",
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "tmp%6#0"
      ]
    },
    "88": {
      "op": "match main_test_call_with_txn_route@4 main_test_call_with_acfg_route@5 main_test_call_with_infer_route@6 main_test_call_with_acfg_no_return_route@7",
      "stack_out": []
    },
    "98": {
      "op": "b main_switch_case_next@8"
    },
    "101": {
      "block": "main_switch_case_next@8",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "104": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "b main_after_if_else@12"
    },
    "107": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "err",
      "defined_out": []
    },
    "108": {
      "block": "main_test_call_with_acfg_no_return_route@7",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]",
      "op": "callsub test_call_with_acfg_no_return"
    },
    "111": {
      "op": "b main_switch_case_next@8"
    },
    "114": {
      "block": "main_test_call_with_infer_route@6",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]",
      "op": "callsub test_call_with_infer"
    },
    "117": {
      "op": "b main_switch_case_next@8"
    },
    "120": {
      "block": "main_test_call_with_acfg_route@5",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]",
      "op": "callsub test_call_with_acfg"
    },
    "123": {
      "op": "b main_switch_case_next@8"
    },
    "126": {
      "block": "main_test_call_with_txn_route@4",
      "stack_in": [],
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]",
      "op": "callsub test_call_with_txn"
    },
    "129": {
      "op": "b main_switch_case_next@8"
    },
    "132": {
      "block": "main_create_NoOp@9",
      "stack_in": [],
      "op": "b main_after_if_else@10"
    },
    "135": {
      "block": "main___algopy_default_create@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "137": {
      "op": "intc_0 // NoOp",
      "defined_out": [
        "NoOp",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "NoOp"
      ]
    },
    "138": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "139": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "141": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "0"
      ]
    },
    "142": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "143": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "144": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "145": {
      "op": "b main_block@14"
    },
    "148": {
      "block": "main_block@14",
      "stack_in": [],
      "op": "b main_after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__algopy_default_create@15"
    },
    "151": {
      "block": "main_after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__algopy_default_create@15",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "152": {
      "op": "return",
      "stack_out": []
    },
    "153": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]",
      "params": {},
      "block": "test_call_with_txn",
      "stack_in": [],
      "op": "b test_call_with_txn_block@0"
    },
    "156": {
      "block": "test_call_with_txn_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "159": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "162": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "165": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "168": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "171": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "172": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "174": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "176": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "178": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn",
      "op": "callsub test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn",
      "stack_out": []
    },
    "181": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "182": {
      "op": "return",
      "stack_out": []
    },
    "183": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]",
      "params": {},
      "block": "test_call_with_acfg",
      "stack_in": [],
      "op": "b test_call_with_acfg_block@0"
    },
    "186": {
      "block": "test_call_with_acfg_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "189": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "195": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "198": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "201": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "202": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "204": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "206": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "208": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg",
      "op": "callsub test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg",
      "stack_out": []
    },
    "211": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "212": {
      "op": "return",
      "stack_out": []
    },
    "213": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]",
      "params": {},
      "block": "test_call_with_infer",
      "stack_in": [],
      "op": "b test_call_with_infer_block@0"
    },
    "216": {
      "block": "test_call_with_infer_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "219": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "222": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "225": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "228": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "231": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "232": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "234": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "236": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "238": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer",
      "op": "callsub test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer",
      "stack_out": []
    },
    "241": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "242": {
      "op": "return",
      "stack_out": []
    },
    "243": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]",
      "params": {},
      "block": "test_call_with_acfg_no_return",
      "stack_in": [],
      "op": "b test_call_with_acfg_no_return_block@0"
    },
    "246": {
      "block": "test_call_with_acfg_no_return_block@0",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "249": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "252": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "255": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "258": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "261": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "262": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "264": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "266": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "268": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return",
      "op": "callsub test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return",
      "stack_out": []
    },
    "271": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "272": {
      "op": "return",
      "stack_out": []
    },
    "273": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "276": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_block@0"
    },
    "279": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "280": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "281": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "283": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "284": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "286": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "287": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "289": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "290": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "292": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "293": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "295": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_next_txn@1"
    },
    "298": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_next_txn@1",
      "stack_in": [],
      "op": "itxn_next"
    },
    "299": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "301": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "302": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "303": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "306": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "308": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "309": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "311": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "312": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "313": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "316": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "318": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "319": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "321": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "323": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "325": {
      "op": "pushbytes 0xa1f5040d // method \"call_with_txn(byte[],txn,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ]
    },
    "331": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "333": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "335": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "337": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "338": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "340": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "341": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "343": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_next_txn@2"
    },
    "346": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "347": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "350": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "351": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "354": {
      "op": "cover 1",
      "stack_out": [
        "tmp%2#0",
        "awst_tmp%0#0"
      ]
    },
    "356": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "359": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "360": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "361": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "362": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "363": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0",
        "0"
      ]
    },
    "364": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "365": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "366": {
      "retsub": true,
      "op": "retsub"
    },
    "367": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "370": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_block@0"
    },
    "373": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "374": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "375": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "377": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "378": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "380": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "381": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "383": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "384": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "386": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "387": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "389": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_next_txn@1"
    },
    "392": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_next_txn@1",
      "stack_in": [],
      "op": "itxn_next"
    },
    "393": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "395": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "396": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "397": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "400": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "402": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "403": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "405": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "406": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "407": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "410": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "412": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "413": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "415": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "417": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "419": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "420": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "422": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "424": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "426": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "427": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "429": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "430": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "432": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_next_txn@2"
    },
    "435": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "436": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "439": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "442": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "443": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "444": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "445": {
      "retsub": true,
      "op": "retsub"
    },
    "446": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "449": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_block@0"
    },
    "452": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "453": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "454": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "456": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "457": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "459": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "460": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "462": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "463": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "465": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "466": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "468": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_next_txn@1"
    },
    "471": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_next_txn@1",
      "stack_in": [],
      "op": "itxn_next"
    },
    "472": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "474": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "475": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "476": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "479": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "481": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "482": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "484": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "485": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "486": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "489": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "491": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "492": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "494": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "496": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "498": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "499": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "501": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "503": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "505": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "506": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "508": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "509": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "511": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_next_txn@2"
    },
    "514": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "515": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "518": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "521": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "522": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "523": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "524": {
      "retsub": true,
      "op": "retsub"
    },
    "525": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "528": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_block@0"
    },
    "531": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_block@0",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "532": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "533": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "535": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "536": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "538": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "539": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "541": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "542": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "544": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "545": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "547": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_next_txn@1"
    },
    "550": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_next_txn@1",
      "stack_in": [],
      "op": "itxn_next"
    },
    "551": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "553": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "554": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "555": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "558": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "560": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "561": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "b#0 (copy)"
      ]
    },
    "563": {
      "op": "len",
      "defined_out": [
        "aggregate%length%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length%1#0"
      ]
    },
    "564": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "565": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "568": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "570": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "tmp%1#0"
      ]
    },
    "571": {
      "op": "cover 1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "573": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "575": {
      "op": "pushbytes 0x31",
      "defined_out": [
        "0x31",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0",
        "0x31"
      ]
    },
    "578": {
      "op": "itxn_field Note",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationID_idx_0#0"
      ]
    },
    "580": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "582": {
      "op": "pushbytes 0xc840077d // method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "588": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0",
        "inner_txn_params%0%%param_ApplicationArgs_idx_1#0"
      ]
    },
    "590": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "inner_txn_params%0%%param_ApplicationArgs_idx_2#0"
      ]
    },
    "592": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "594": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "595": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "597": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "598": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "600": {
      "op": "b test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_next_txn@2"
    },
    "603": {
      "block": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return_next_txn@2",
      "stack_in": [],
      "op": "itxn_submit"
    },
    "604": {
      "op": "itxn Note",
      "defined_out": [
        "txn1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0"
      ]
    },
    "606": {
      "op": "dup",
      "defined_out": [
        "txn1.Note#0",
        "txn1.Note#0 (copy)"
      ],
      "stack_out": [
        "txn1.Note#0",
        "txn1.Note#0 (copy)"
      ]
    },
    "607": {
      "op": "pushbytes 0x31",
      "defined_out": [
        "0x31",
        "txn1.Note#0",
        "txn1.Note#0 (copy)"
      ],
      "stack_out": [
        "txn1.Note#0",
        "txn1.Note#0 (copy)",
        "0x31"
      ]
    },
    "610": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "txn1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0",
        "tmp%2#0"
      ]
    },
    "611": {
      "op": "assert",
      "stack_out": [
        "txn1.Note#0"
      ]
    },
    "612": {
      "op": "dup",
      "defined_out": [
        "txn1.Note#0",
        "txn1_copy1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0",
        "txn1_copy1.Note#0"
      ]
    },
    "613": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "614": {
      "op": "assert",
      "stack_out": []
    },
    "615": {
      "op": "gitxn 0 CreatedAssetID",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "618": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0",
        "0"
      ]
    },
    "619": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "620": {
      "error": "expected asset to be created",
      "op": "assert // expected asset to be created",
      "stack_out": []
    },
    "621": {
      "retsub": true,
      "op": "retsub"
    }
  }
}