#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 1 0 3
    bytecblock 0x61 0x62 0x151f7c75
    b block@0

block@0:
    b block@1

block@1:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    txn ApplicationID
    !
    txn OnCompletion
    intc_0 // 1
    shl
    +
    intc_1 // 0
    intc_0 // 1
    pushint 2 // 2
    intc_2 // 3
    pushint 4 // 4
    pushint 5 // 5
    pushint 6 // 6
    pushint 7 // 7
    pushint 8 // 8
    pushint 9 // 9
    pushint 10 // 10
    pushint 11 // 11
    uncover 12
    match call_NoOp create_NoOp call_OptIn create_OptIn call_CloseOut create_CloseOut call_ClearState create_ClearState call_UpdateApplication create_UpdateApplication call_DeleteApplication create_DeleteApplication
    b *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

create_DeleteApplication:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_DeleteApplication:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_UpdateApplication:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_UpdateApplication:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_ClearState:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_ClearState:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_CloseOut:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_CloseOut:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_OptIn:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    b *NOT_IMPLEMENTED

call_OptIn:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    b *NOT_IMPLEMENTED

create_NoOp:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    txn NumAppArgs
    intc_1 // 0
    ==
    bz else_body@10
    b __algopy_default_create@9

__algopy_default_create@9:
    b block@23

block@23:
    b after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create@24

after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create@24:
    intc_0 // 1
    return

else_body@10:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    err // this contract does not implement the given ABI method for create NoOp

call_NoOp:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    txna ApplicationArgs 0
    pushbytes 0xa1f5040d // method "call_with_txn(byte[],txn,byte[])uint64"
    pushbytes 0x6d4700ad // method "call_with_acfg(byte[],acfg,byte[])uint64"
    pushbytes 0xc840077d // method "call_with_acfg_no_return(byte[],acfg,byte[])void"
    uncover 3
    match call_with_txn_route@3 call_with_acfg_route@4 call_with_acfg_no_return_route@5
    b switch_case_default@6

switch_case_default@6:
    b switch_case_next@7

switch_case_next@7:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    err // this contract does not implement the given ABI method for call NoOp

call_with_acfg_no_return_route@5:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    callsub call_with_acfg_no_return
    b switch_case_next@7

call_with_acfg_route@4:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    callsub call_with_acfg
    b switch_case_next@7

call_with_txn_route@3:
    // typed_abi_call_txn/txn_contract.py:11
    // class TxnContract(ARC4Contract):
    callsub call_with_txn
    b switch_case_next@7


// test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]() -> void:
call_with_txn:
    b call_with_txn_block@0

call_with_txn_block@0:
    // typed_abi_call_txn/txn_contract.py:12
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txn GroupIndex
    intc_0 // 1
    -
    txna ApplicationArgs 2
    extract 2 0
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn
    itob
    bytec_2 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]() -> void:
call_with_acfg:
    b call_with_acfg_block@0

call_with_acfg_block@0:
    // typed_abi_call_txn/txn_contract.py:20
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // acfg
    ==
    assert // transaction type is acfg
    txna ApplicationArgs 2
    extract 2 0
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg
    itob
    bytec_2 // 0x151f7c75
    uncover 1
    concat
    log
    intc_0 // 1
    return


// test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]() -> void:
call_with_acfg_no_return:
    b call_with_acfg_no_return_block@0

call_with_acfg_no_return_block@0:
    // typed_abi_call_txn/txn_contract.py:27
    // @arc4.abimethod
    txna ApplicationArgs 1
    extract 2 0
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // acfg
    ==
    assert // transaction type is acfg
    txna ApplicationArgs 2
    extract 2 0
    uncover 2
    uncover 2
    uncover 2
    callsub test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return
    intc_0 // 1
    return


// test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn(a: bytes, acfg: uint64, b: bytes) -> uint64:
test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn:
    // typed_abi_call_txn/txn_contract.py:12-13
    // @arc4.abimethod
    // def call_with_txn(self, a: Bytes, acfg: gtxn.Transaction, b: Bytes) -> UInt64:
    proto 3 1
    b test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn_block@0

test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn_block@0:
    // typed_abi_call_txn/txn_contract.py:14
    // assert a == b"a", "a is not a"
    frame_dig -3
    bytec_0 // 0x61
    ==
    assert // a is not a
    // typed_abi_call_txn/txn_contract.py:15
    // assert b == b"b", "b is not b"
    frame_dig -1
    bytec_1 // 0x62
    ==
    assert // b is not b
    // typed_abi_call_txn/txn_contract.py:16
    // assert acfg.type == TransactionType.AssetConfig, "expected asset config"
    frame_dig -2
    gtxns TypeEnum
    intc_2 // acfg
    ==
    assert // expected asset config
    // typed_abi_call_txn/txn_contract.py:17
    // assert acfg.created_asset.id, "expected asset id"
    frame_dig -2
    gtxns CreatedAssetID
    intc_1 // 0
    !=
    assert // expected asset id
    // typed_abi_call_txn/txn_contract.py:18
    // return acfg.created_asset.id
    frame_dig -2
    gtxns CreatedAssetID
    retsub


// test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg(a: bytes, acfg: uint64, b: bytes) -> uint64:
test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg:
    // typed_abi_call_txn/txn_contract.py:20-21
    // @arc4.abimethod
    // def call_with_acfg(self, a: Bytes, acfg: gtxn.AssetConfigTransaction, b: Bytes) -> UInt64:
    proto 3 1
    b test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_block@0

test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_block@0:
    // typed_abi_call_txn/txn_contract.py:22
    // assert a == b"a", "a is not a"
    frame_dig -3
    bytec_0 // 0x61
    ==
    assert // a is not a
    // typed_abi_call_txn/txn_contract.py:23
    // assert b == b"b", "b is not b"
    frame_dig -1
    bytec_1 // 0x62
    ==
    assert // b is not b
    // typed_abi_call_txn/txn_contract.py:24
    // assert acfg.created_asset.id, "expected asset id"
    frame_dig -2
    gtxns CreatedAssetID
    intc_1 // 0
    !=
    assert // expected asset id
    // typed_abi_call_txn/txn_contract.py:25
    // return acfg.created_asset.id
    frame_dig -2
    gtxns CreatedAssetID
    retsub


// test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return(a: bytes, acfg: uint64, b: bytes) -> void:
test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return:
    // typed_abi_call_txn/txn_contract.py:27-30
    // @arc4.abimethod
    // def call_with_acfg_no_return(
    //     self, a: Bytes, acfg: gtxn.AssetConfigTransaction, b: Bytes
    // ) -> None:
    proto 3 0
    b test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return_block@0

test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return_block@0:
    // typed_abi_call_txn/txn_contract.py:31
    // assert a == b"a", "a is not a"
    frame_dig -3
    bytec_0 // 0x61
    ==
    assert // a is not a
    // typed_abi_call_txn/txn_contract.py:32
    // assert b == b"b", "b is not b"
    frame_dig -1
    bytec_1 // 0x62
    ==
    assert // b is not b
    // typed_abi_call_txn/txn_contract.py:33
    // assert acfg.created_asset.id, "expected asset id"
    frame_dig -2
    gtxns CreatedAssetID
    intc_1 // 0
    !=
    assert // expected asset id
    retsub
