main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        goto block@1
    block@1: // L14
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@2, 1u => block@9, 2u => block@12, 3u => block@13, 4u => block@14, 5u => block@15, 6u => block@16, 7u => block@17, 8u => block@18, 9u => block@19, 10u => block@20, 11u => block@21, * => block@22}
    block@2: // switch_case_0_L14
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "test_call_with_txn(byte[],byte[],uint64)void" => block@3, method "test_call_with_acfg(byte[],byte[],uint64)void" => block@4, method "test_call_with_infer(byte[],byte[],uint64)void" => block@5, method "test_call_with_acfg_no_return(byte[],byte[],uint64)void" => block@6, * => block@7}
    block@3: // test_call_with_txn_route_L15
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]()
        goto block@8
    block@4: // test_call_with_acfg_route_L31
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]()
        goto block@8
    block@5: // test_call_with_infer_route_L46
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]()
        goto block@8
    block@6: // test_call_with_acfg_no_return_route_L61
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]()
        goto block@8
    block@7: // switch_case_default_L14
        goto block@8
    block@8: // switch_case_next_L14
        fail // this contract does not implement the given ABI method for call NoOp
    block@9: // switch_case_1_L14
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@10 : block@11
    block@10: // __algopy_default_create_L1
        goto block@24
    block@24: // L1
        goto block@25
    block@25: // after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__algopy_default_create_L1
        exit 1u
    block@11: // else_body_L14
        fail // this contract does not implement the given ABI method for create NoOp
    block@12: // switch_case_2_L14
        goto block@22
    block@13: // switch_case_3_L14
        goto block@22
    block@14: // switch_case_4_L14
        goto block@22
    block@15: // switch_case_5_L14
        goto block@22
    block@16: // switch_case_6_L14
        goto block@22
    block@17: // switch_case_7_L14
        goto block@22
    block@18: // switch_case_8_L14
        goto block@22
    block@19: // switch_case_9_L14
        goto block@22
    block@20: // switch_case_10_L14
        goto block@22
    block@21: // switch_case_11_L14
        goto block@22
    block@22: // switch_case_default_L14
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
    block@23: // after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router___L1
        let tmp%0#0: bool = undefined
        return tmp%0#0

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]() -> void:
    block@0: // L15
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%1#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%2#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn(tmp%0#0, tmp%1#0, tmp%2#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]() -> void:
    block@0: // L31
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%1#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%2#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg(tmp%0#0, tmp%1#0, tmp%2#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]() -> void:
    block@0: // L46
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%1#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%2#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer(tmp%0#0, tmp%1#0, tmp%2#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]() -> void:
    block@0: // L61
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%1#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let tmp%2#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return(tmp%0#0, tmp%1#0, tmp%2#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn(a: bytes, b: bytes, app: uint64) -> void:
    block@0: // L15
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L25
        itxn_next
        let aggregate%length%0#0: uint64 = (len a#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 a#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let aggregate%length%1#0: uint64 = (len b#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 b#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+uint8[]) = tmp%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%1#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "call_with_txn(byte[],txn,byte[])uint64")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L22
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%2#0: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let tmp%5#0: uint64 = (btoi tmp%2#0)
        let asset_id#0: uint64 = tmp%5#0
        let tmp%6#0: bool = (!= asset_id#0 0u)
        (assert tmp%6#0) // expected asset id
        return 

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg(a: bytes, b: bytes, app: uint64) -> void:
    block@0: // L31
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L41
        itxn_next
        let aggregate%length%0#0: uint64 = (len a#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 a#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let aggregate%length%1#0: uint64 = (len b#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 b#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+uint8[]) = tmp%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%1#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg(byte[],acfg,byte[])uint64")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L38
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        return 

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer(a: bytes, b: bytes, app: uint64) -> void:
    block@0: // L46
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L56
        itxn_next
        let aggregate%length%0#0: uint64 = (len a#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 a#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let aggregate%length%1#0: uint64 = (len b#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 b#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+uint8[]) = tmp%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%1#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg(byte[],acfg,byte[])uint64")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L53
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        return 

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return(a: bytes, b: bytes, app: uint64) -> void:
    block@0: // L61
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        goto block@1
    block@1: // next_txn_L69
        itxn_next
        let aggregate%length%0#0: uint64 = (len a#0)
        let aggregate%as_bytes%0#0: bytes[8] = (itob aggregate%length%0#0)
        let aggregate%length_uint16%0#0: bytes = ((extract 6 2) aggregate%as_bytes%0#0)
        let aggregate%encoded_value%0#0: bytes = (concat aggregate%length_uint16%0#0 a#0)
        let aggregate%as_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = aggregate%encoded_value%0#0
        let tmp%0#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%0#0
        let aggregate%length%1#0: uint64 = (len b#0)
        let aggregate%as_bytes%1#0: bytes[8] = (itob aggregate%length%1#0)
        let aggregate%length_uint16%1#0: bytes = ((extract 6 2) aggregate%as_bytes%1#0)
        let aggregate%encoded_value%1#0: bytes = (concat aggregate%length_uint16%1#0 b#0)
        let aggregate%as_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = aggregate%encoded_value%1#0
        let tmp%1#0: Encoded(len+uint8[]) = aggregate%as_Encoded(len+uint8[])%1#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_1#0: Encoded(len+uint8[]) = tmp%0#0
        let inner_txn_params%0%%param_ApplicationArgs_idx_2#0: Encoded(len+uint8[]) = tmp%1#0
        let inner_txn_params%0%%param_ApplicationID_idx_0#0: uint64 = app#0
        ((itxn_field Note) 0x31)
        ((itxn_field ApplicationID) inner_txn_params%0%%param_ApplicationID_idx_0#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg_no_return(byte[],acfg,byte[])void")
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_1#0)
        ((itxn_field ApplicationArgs) inner_txn_params%0%%param_ApplicationArgs_idx_2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        goto block@2
    block@2: // next_txn_L68
        itxn_submit
        let txn1.Note#0: bytes = (itxn Note)
        let tmp%2#0: bool = (== txn1.Note#0 0x31)
        (assert tmp%2#0)
        let txn1_copy1.Note#0: bytes = txn1.Note#0
        let tmp%3#0: bool = (== txn1_copy1.Note#0 txn1.Note#0)
        (assert tmp%3#0)
        let tmp%4#0: uint64 = (gitxn 0 CreatedAssetID)
        let asset_id#0: uint64 = tmp%4#0
        let tmp%5#0: bool = (!= asset_id#0 0u)
        (assert tmp%5#0) // expected asset to be created
        return 