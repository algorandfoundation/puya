{
  "version": 3,
  "sources": [
    "../txn_contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAUA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;AACK;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAEU;;AAAK;AAAL;AAAP;AACY;AAAL;AAAP;AACO;AAAA;;AAAa;AAAb;AAAP;AACO;;AAAP;AAAA;AALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAEU;;AAAK;AAAL;AAAP;AACY;AAAL;AAAP;AACO;;AAAP;AAAA;AAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAIU;;AAAK;AAAL;AAAP;AACY;AAAL;AAAP;AACO;;AANV",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 3"
    },
    "5": {
      "op": "bytecblock 0x61 0x62 0x151f7c75"
    },
    "16": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "18": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "19": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "21": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "22": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "23": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "24": {
      "op": "switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED",
      "stack_out": []
    },
    "50": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "51": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "53": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "54": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "op": "return // on error: this contract does not implement the given ABI method for create NoOp",
      "defined_out": [],
      "stack_out": []
    },
    "55": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "pushbytess 0xa1f5040d 0x6d4700ad 0xc840077d // method \"call_with_txn(byte[],txn,byte[])uint64\", method \"call_with_acfg(byte[],acfg,byte[])uint64\", method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ],
      "stack_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "72": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "tmp%5#0"
      ]
    },
    "75": {
      "op": "match call_with_txn call_with_acfg call_with_acfg_no_return",
      "stack_out": []
    },
    "83": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "84": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]",
      "params": {},
      "block": "call_with_txn",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "87": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "90": {
      "op": "txn GroupIndex",
      "defined_out": [
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%1#0"
      ]
    },
    "92": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%1#0",
        "1"
      ]
    },
    "93": {
      "op": "-",
      "defined_out": [
        "a#0",
        "acfg#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0"
      ]
    },
    "94": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "acfg#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "97": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "b#0"
      ]
    },
    "100": {
      "op": "uncover 2",
      "stack_out": [
        "acfg#0",
        "b#0",
        "a#0"
      ]
    },
    "102": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "a#0",
        "0x61"
      ]
    },
    "103": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "b#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "tmp%0#1"
      ]
    },
    "104": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": [
        "acfg#0",
        "b#0"
      ]
    },
    "105": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "0x62"
      ]
    },
    "106": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "acfg#0",
        "tmp%1#1"
      ]
    },
    "107": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": [
        "acfg#0"
      ]
    },
    "108": {
      "op": "dup",
      "defined_out": [
        "acfg#0",
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0",
        "acfg#0 (copy)"
      ]
    },
    "109": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "acfg#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "acfg#0",
        "tmp%2#1"
      ]
    },
    "111": {
      "op": "intc_1 // acfg",
      "defined_out": [
        "acfg",
        "acfg#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "acfg#0",
        "tmp%2#1",
        "acfg"
      ]
    },
    "112": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "acfg#0",
        "tmp%3#1"
      ]
    },
    "113": {
      "error": "expected asset config",
      "op": "assert // expected asset config",
      "stack_out": [
        "acfg#0"
      ]
    },
    "114": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "116": {
      "op": "dup",
      "defined_out": [
        "tmp%4#1",
        "tmp%4#1 (copy)"
      ],
      "stack_out": [
        "tmp%4#1",
        "tmp%4#1 (copy)"
      ]
    },
    "117": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "118": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "119": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "120": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "121": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "122": {
      "op": "log",
      "stack_out": []
    },
    "123": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "124": {
      "op": "return",
      "stack_out": []
    },
    "125": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]",
      "params": {},
      "block": "call_with_acfg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "128": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "131": {
      "op": "txn GroupIndex",
      "defined_out": [
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%1#0"
      ]
    },
    "133": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%1#0",
        "1"
      ]
    },
    "134": {
      "op": "-",
      "defined_out": [
        "a#0",
        "acfg#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0"
      ]
    },
    "135": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "acfg#0",
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "acfg#0 (copy)"
      ]
    },
    "136": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "a#0",
        "acfg#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "gtxn_type%0#0"
      ]
    },
    "138": {
      "op": "intc_1 // acfg",
      "defined_out": [
        "a#0",
        "acfg",
        "acfg#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "139": {
      "op": "==",
      "defined_out": [
        "a#0",
        "acfg#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "140": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "a#0",
        "acfg#0"
      ]
    },
    "141": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "acfg#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "144": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "b#0"
      ]
    },
    "147": {
      "op": "uncover 2",
      "stack_out": [
        "acfg#0",
        "b#0",
        "a#0"
      ]
    },
    "149": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "a#0",
        "0x61"
      ]
    },
    "150": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "b#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "tmp%0#1"
      ]
    },
    "151": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": [
        "acfg#0",
        "b#0"
      ]
    },
    "152": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "0x62"
      ]
    },
    "153": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "acfg#0",
        "tmp%1#1"
      ]
    },
    "154": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": [
        "acfg#0"
      ]
    },
    "155": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "157": {
      "op": "dup",
      "defined_out": [
        "tmp%2#1",
        "tmp%2#1 (copy)"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%2#1 (copy)"
      ]
    },
    "158": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "159": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "160": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "161": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "162": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "163": {
      "op": "log",
      "stack_out": []
    },
    "164": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "165": {
      "op": "return",
      "stack_out": []
    },
    "166": {
      "subroutine": "test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]",
      "params": {},
      "block": "call_with_acfg_no_return",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "169": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "172": {
      "op": "txn GroupIndex",
      "defined_out": [
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%1#0"
      ]
    },
    "174": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "a#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%1#0",
        "1"
      ]
    },
    "175": {
      "op": "-",
      "defined_out": [
        "a#0",
        "acfg#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0"
      ]
    },
    "176": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "acfg#0",
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "acfg#0 (copy)"
      ]
    },
    "177": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "a#0",
        "acfg#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "gtxn_type%0#0"
      ]
    },
    "179": {
      "op": "intc_1 // acfg",
      "defined_out": [
        "a#0",
        "acfg",
        "acfg#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "180": {
      "op": "==",
      "defined_out": [
        "a#0",
        "acfg#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "181": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "a#0",
        "acfg#0"
      ]
    },
    "182": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "acfg#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "185": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "b#0"
      ]
    },
    "188": {
      "op": "uncover 2",
      "stack_out": [
        "acfg#0",
        "b#0",
        "a#0"
      ]
    },
    "190": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "a#0",
        "0x61"
      ]
    },
    "191": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "b#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "tmp%0#1"
      ]
    },
    "192": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": [
        "acfg#0",
        "b#0"
      ]
    },
    "193": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "0x62"
      ]
    },
    "194": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "acfg#0",
        "tmp%1#1"
      ]
    },
    "195": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": [
        "acfg#0"
      ]
    },
    "196": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "198": {
      "error": "expected asset id",
      "op": "return // on error: expected asset id",
      "stack_out": []
    }
  }
}