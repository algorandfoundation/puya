// Op                                                                                   Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    block@0:
        // typed_abi_call_txn/txn_contract.py:11
        // class TxnContract(ARC4Contract):
        txn ApplicationID                                                               tmp%0#1
        !                                                                               tmp%1#0
        txn OnCompletion                                                                tmp%1#0,tmp%2#0
        int 1                                                                           tmp%1#0,tmp%2#0,1
        shl                                                                             tmp%1#0,tmp%3#0
        l-load tmp%1#0 1                                                                tmp%3#0,tmp%1#0
        l-load tmp%3#0 1                                                                tmp%1#0,tmp%3#0
        +                                                                               tmp%4#0
        switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED ; b *NOT_IMPLEMENTED 

    call_NoOp:
        // typed_abi_call_txn/txn_contract.py:11
        // class TxnContract(ARC4Contract):
        txna ApplicationArgs 0                                                          tmp%5#0
        method call_with_txn(byte[],txn,byte[])uint64                                   tmp%5#0,Method(call_with_txn(byte[],txn,byte[])uint64)
        method call_with_acfg(byte[],acfg,byte[])uint64                                 tmp%5#0,Method(call_with_txn(byte[],txn,byte[])uint64),Method(call_with_acfg(byte[],acfg,byte[])uint64)
        method call_with_acfg_no_return(byte[],acfg,byte[])void                         tmp%5#0,Method(call_with_txn(byte[],txn,byte[])uint64),Method(call_with_acfg(byte[],acfg,byte[])uint64),Method(call_with_acfg_no_return(byte[],acfg,byte[])void)
        l-load tmp%5#0 3                                                                Method(call_with_txn(byte[],txn,byte[])uint64),Method(call_with_acfg(byte[],acfg,byte[])uint64),Method(call_with_acfg_no_return(byte[],acfg,byte[])void),tmp%5#0
        match call_with_txn_route@3 call_with_acfg_route@4 call_with_acfg_no_return_route@5 ; b switch_case_next@7 

    call_with_txn_route@3:
        // typed_abi_call_txn/txn_contract.py:11
        // class TxnContract(ARC4Contract):
        callsub call_with_txn
        b switch_case_next@7

    call_with_acfg_route@4:
        // typed_abi_call_txn/txn_contract.py:11
        // class TxnContract(ARC4Contract):
        callsub call_with_acfg
        b switch_case_next@7

    call_with_acfg_no_return_route@5:
        // typed_abi_call_txn/txn_contract.py:11
        // class TxnContract(ARC4Contract):
        callsub call_with_acfg_no_return
        b switch_case_next@7

    switch_case_next@7:
        // typed_abi_call_txn/txn_contract.py:11
        // class TxnContract(ARC4Contract):
        err // this contract does not implement the given ABI method for call NoOp

    create_NoOp:
        // typed_abi_call_txn/txn_contract.py:11
        // class TxnContract(ARC4Contract):
        txn NumAppArgs                                                                  tmp%6#0
        !                                                                               tmp%7#0
        assert // this contract does not implement the given ABI method for create NoOp
        int 1                                                                           1
        return

    *NOT_IMPLEMENTED:
        // typed_abi_call_txn/txn_contract.py:11
        // class TxnContract(ARC4Contract):
        err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID? 


// test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]() -> void:
subroutine call_with_txn:
    call_with_txn_block@0:
        // typed_abi_call_txn/txn_contract.py:12
        // @arc4.abimethod
        txna ApplicationArgs 1                                                          reinterpret_Encoded(len+uint8[])%0#0
        extract 2 0                                                                     a#0
        txn GroupIndex                                                                  a#0,tmp%1#0
        int 1                                                                           a#0,tmp%1#0,1
        -                                                                               a#0,acfg#0
        txna ApplicationArgs 2                                                          a#0,acfg#0,reinterpret_Encoded(len+uint8[])%1#0
        extract 2 0                                                                     a#0,acfg#0,b#0
        // typed_abi_call_txn/txn_contract.py:14
        // assert a == b"a", "a is not a"
        l-load a#0 2                                                                    acfg#0,b#0,a#0
        byte 0x61                                                                       acfg#0,b#0,a#0,0x61
        ==                                                                              acfg#0,b#0,tmp%0#1
        assert // a is not a                                                            acfg#0,b#0
        // typed_abi_call_txn/txn_contract.py:15
        // assert b == b"b", "b is not b"
        l-load b#0 0                                                                    acfg#0,b#0
        byte 0x62                                                                       acfg#0,b#0,0x62
        ==                                                                              acfg#0,tmp%1#1
        assert // b is not b                                                            acfg#0
        // typed_abi_call_txn/txn_contract.py:16
        // assert acfg.type == TransactionType.AssetConfig, "expected asset config"
        l-load-copy acfg#0 0                                                            acfg#0,acfg#0 (copy)
        gtxns TypeEnum                                                                  acfg#0,tmp%2#1
        int acfg                                                                        acfg#0,tmp%2#1,acfg
        ==                                                                              acfg#0,tmp%3#1
        assert // expected asset config                                                 acfg#0
        // typed_abi_call_txn/txn_contract.py:17
        // assert acfg.created_asset.id, "expected asset id"
        l-load acfg#0 0                                                                 acfg#0
        gtxns CreatedAssetID                                                            tmp%4#1
        l-load-copy tmp%4#1 0                                                           tmp%4#1,tmp%4#1 (copy)
        assert // expected asset id                                                     tmp%4#1
        // typed_abi_call_txn/txn_contract.py:12
        // @arc4.abimethod
        l-load tmp%4#1 0                                                                tmp%4#1
        itob                                                                            aggregate%val_as_bytes%0#0
        byte 0x151f7c75                                                                 aggregate%val_as_bytes%0#0,0x151f7c75
        l-load aggregate%val_as_bytes%0#0 1                                             0x151f7c75,aggregate%val_as_bytes%0#0
        concat                                                                          tmp%5#0
        log
        int 1                                                                           1
        return


// test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]() -> void:
subroutine call_with_acfg:
    call_with_acfg_block@0:
        // typed_abi_call_txn/txn_contract.py:20
        // @arc4.abimethod
        txna ApplicationArgs 1                                                          reinterpret_Encoded(len+uint8[])%0#0
        extract 2 0                                                                     a#0
        txn GroupIndex                                                                  a#0,tmp%1#0
        int 1                                                                           a#0,tmp%1#0,1
        -                                                                               a#0,acfg#0
        l-load-copy acfg#0 0                                                            a#0,acfg#0,acfg#0 (copy)
        gtxns TypeEnum                                                                  a#0,acfg#0,gtxn_type%0#0
        int acfg                                                                        a#0,acfg#0,gtxn_type%0#0,acfg
        ==                                                                              a#0,acfg#0,gtxn_type_matches%0#0
        assert // transaction type is acfg                                              a#0,acfg#0
        txna ApplicationArgs 2                                                          a#0,acfg#0,reinterpret_Encoded(len+uint8[])%1#0
        extract 2 0                                                                     a#0,acfg#0,b#0
        // typed_abi_call_txn/txn_contract.py:22
        // assert a == b"a", "a is not a"
        l-load a#0 2                                                                    acfg#0,b#0,a#0
        byte 0x61                                                                       acfg#0,b#0,a#0,0x61
        ==                                                                              acfg#0,b#0,tmp%0#1
        assert // a is not a                                                            acfg#0,b#0
        // typed_abi_call_txn/txn_contract.py:23
        // assert b == b"b", "b is not b"
        l-load b#0 0                                                                    acfg#0,b#0
        byte 0x62                                                                       acfg#0,b#0,0x62
        ==                                                                              acfg#0,tmp%1#1
        assert // b is not b                                                            acfg#0
        // typed_abi_call_txn/txn_contract.py:24
        // assert acfg.created_asset.id, "expected asset id"
        l-load acfg#0 0                                                                 acfg#0
        gtxns CreatedAssetID                                                            tmp%2#1
        l-load-copy tmp%2#1 0                                                           tmp%2#1,tmp%2#1 (copy)
        assert // expected asset id                                                     tmp%2#1
        // typed_abi_call_txn/txn_contract.py:20
        // @arc4.abimethod
        l-load tmp%2#1 0                                                                tmp%2#1
        itob                                                                            aggregate%val_as_bytes%0#0
        byte 0x151f7c75                                                                 aggregate%val_as_bytes%0#0,0x151f7c75
        l-load aggregate%val_as_bytes%0#0 1                                             0x151f7c75,aggregate%val_as_bytes%0#0
        concat                                                                          tmp%5#0
        log
        int 1                                                                           1
        return


// test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]() -> void:
subroutine call_with_acfg_no_return:
    call_with_acfg_no_return_block@0:
        // typed_abi_call_txn/txn_contract.py:27
        // @arc4.abimethod
        txna ApplicationArgs 1                                                          reinterpret_Encoded(len+uint8[])%0#0
        extract 2 0                                                                     a#0
        txn GroupIndex                                                                  a#0,tmp%1#0
        int 1                                                                           a#0,tmp%1#0,1
        -                                                                               a#0,acfg#0
        l-load-copy acfg#0 0                                                            a#0,acfg#0,acfg#0 (copy)
        gtxns TypeEnum                                                                  a#0,acfg#0,gtxn_type%0#0
        int acfg                                                                        a#0,acfg#0,gtxn_type%0#0,acfg
        ==                                                                              a#0,acfg#0,gtxn_type_matches%0#0
        assert // transaction type is acfg                                              a#0,acfg#0
        txna ApplicationArgs 2                                                          a#0,acfg#0,reinterpret_Encoded(len+uint8[])%1#0
        extract 2 0                                                                     a#0,acfg#0,b#0
        // typed_abi_call_txn/txn_contract.py:31
        // assert a == b"a", "a is not a"
        l-load a#0 2                                                                    acfg#0,b#0,a#0
        byte 0x61                                                                       acfg#0,b#0,a#0,0x61
        ==                                                                              acfg#0,b#0,tmp%0#1
        assert // a is not a                                                            acfg#0,b#0
        // typed_abi_call_txn/txn_contract.py:32
        // assert b == b"b", "b is not b"
        l-load b#0 0                                                                    acfg#0,b#0
        byte 0x62                                                                       acfg#0,b#0,0x62
        ==                                                                              acfg#0,tmp%1#1
        assert // b is not b                                                            acfg#0
        // typed_abi_call_txn/txn_contract.py:33
        // assert acfg.created_asset.id, "expected asset id"
        l-load acfg#0 0                                                                 acfg#0
        gtxns CreatedAssetID                                                            tmp%2#1
        assert // expected asset id
        // typed_abi_call_txn/txn_contract.py:27
        // @arc4.abimethod
        int 1                                                                           1
        return


