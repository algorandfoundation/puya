main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#0: bool = test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__()
        return tmp%0#0

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__() -> bool:
    block@0: // L11
        let tmp%0#0: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#0)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        switch tmp%4#0 {0u => block@1, 1u => block@7, 2u => block@10, 3u => block@11, 4u => block@12, 5u => block@13, 6u => block@14, 7u => block@15, 8u => block@16, 9u => block@17, 10u => block@18, 11u => block@19, * => block@20}
    block@1: // switch_case_0_L11
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "call_with_txn(byte[],txn,byte[])uint64" => block@2, method "call_with_acfg(byte[],acfg,byte[])uint64" => block@3, method "call_with_acfg_no_return(byte[],acfg,byte[])void" => block@4, * => block@5}
    block@2: // call_with_txn_route_L12
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]()
        goto block@6
    block@3: // call_with_acfg_route_L20
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]()
        goto block@6
    block@4: // call_with_acfg_no_return_route_L27
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]()
        goto block@6
    block@5: // switch_case_default_L11
        goto block@6
    block@6: // switch_case_next_L11
        fail // this contract does not implement the given ABI method for call NoOp
    block@7: // switch_case_1_L11
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (== tmp%6#0 0u)
        goto tmp%7#0 ? block@8 : block@9
    block@8: // __algopy_default_create_L1
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create()
        exit 1u
    block@9: // else_body_L11
        fail // this contract does not implement the given ABI method for create NoOp
    block@10: // switch_case_2_L11
        goto block@20
    block@11: // switch_case_3_L11
        goto block@20
    block@12: // switch_case_4_L11
        goto block@20
    block@13: // switch_case_5_L11
        goto block@20
    block@14: // switch_case_6_L11
        goto block@20
    block@15: // switch_case_7_L11
        goto block@20
    block@16: // switch_case_8_L11
        goto block@20
    block@17: // switch_case_9_L11
        goto block@20
    block@18: // switch_case_10_L11
        goto block@20
    block@19: // switch_case_11_L11
        goto block@20
    block@20: // switch_case_default_L11
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]() -> void:
    block@0: // L12
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%1#0 1u)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%2#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%3#0: uint64 = test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn(tmp%0#0, gtxn_idx%0#0, tmp%2#0)
        let tmp%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%3#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]() -> void:
    block@0: // L20
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 acfg)
        (assert gtxn_type_matches%0#0) // transaction type is acfg
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%2#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%3#0: uint64 = test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg(tmp%0#0, gtxn_idx%0#0, tmp%2#0)
        let tmp%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%3#0)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]() -> void:
    block@0: // L27
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let tmp%0#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let gtxn_idx%0#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%0#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 acfg)
        (assert gtxn_type_matches%0#0) // transaction type is acfg
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let tmp%2#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return(tmp%0#0, gtxn_idx%0#0, tmp%2#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn(a: bytes, acfg: uint64, b: bytes) -> uint64:
    block@0: // L12
        let tmp%0#0: bool = (== a#0 0x61)
        (assert tmp%0#0) // a is not a
        let tmp%1#0: bool = (== b#0 0x62)
        (assert tmp%1#0) // b is not b
        let tmp%2#0: uint64 = ((gtxns TypeEnum) acfg#0)
        let tmp%3#0: bool = (== tmp%2#0 acfg)
        (assert tmp%3#0) // expected asset config
        let tmp%4#0: uint64 = ((gtxns CreatedAssetID) acfg#0)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        (assert tmp%5#0) // expected asset id
        let tmp%6#0: uint64 = ((gtxns CreatedAssetID) acfg#0)
        return tmp%6#0

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg(a: bytes, acfg: uint64, b: bytes) -> uint64:
    block@0: // L20
        let tmp%0#0: bool = (== a#0 0x61)
        (assert tmp%0#0) // a is not a
        let tmp%1#0: bool = (== b#0 0x62)
        (assert tmp%1#0) // b is not b
        let tmp%2#0: uint64 = ((gtxns CreatedAssetID) acfg#0)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        (assert tmp%3#0) // expected asset id
        let tmp%4#0: uint64 = ((gtxns CreatedAssetID) acfg#0)
        return tmp%4#0

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return(a: bytes, acfg: uint64, b: bytes) -> void:
    block@0: // L27
        let tmp%0#0: bool = (== a#0 0x61)
        (assert tmp%0#0) // a is not a
        let tmp%1#0: bool = (== b#0 0x62)
        (assert tmp%1#0) // b is not b
        let tmp%2#0: uint64 = ((gtxns CreatedAssetID) acfg#0)
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        (assert tmp%3#0) // expected asset id
        return 

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create() -> void:
    block@0: // L1
        return 