main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@8, block@21, block@21, block@21, block@21, block@21, block@21, block@21, block@21, block@21, block@21][tmp%4#0] else goto block@21
    block@2: // switch_case_0_L11
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "call_with_txn(byte[],txn,byte[])uint64" => block@3, method "call_with_acfg(byte[],acfg,byte[])uint64" => block@4, method "call_with_acfg_no_return(byte[],acfg,byte[])void" => block@5, * => block@7}
    block@3: // call_with_txn_route_L12
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]()
        goto block@7
    block@4: // call_with_acfg_route_L20
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]()
        goto block@7
    block@5: // call_with_acfg_no_return_route_L27
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]()
        goto block@7
    block@7: // switch_case_next_L11
        fail // this contract does not implement the given ABI method for call NoOp
    block@8: // switch_case_1_L11
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@21: // switch_case_default_L11
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]() -> void:
    block@0: // L12
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let acfg#0: uint64 = (- tmp%1#0 1u)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%0#1: bool = (== a#0 0x61)
        (assert tmp%0#1) // a is not a
        let tmp%1#1: bool = (== b#0 0x62)
        (assert tmp%1#1) // b is not b
        let tmp%2#1: uint64 = ((gtxns TypeEnum) acfg#0)
        let tmp%3#1: bool = (== tmp%2#1 acfg)
        (assert tmp%3#1) // expected asset config
        let tmp%4#1: uint64 = ((gtxns CreatedAssetID) acfg#0)
        (assert tmp%4#1) // expected asset id
        let tmp%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%4#1)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]() -> void:
    block@0: // L20
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let acfg#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) acfg#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 acfg)
        (assert gtxn_type_matches%0#0) // transaction type is acfg
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%0#1: bool = (== a#0 0x61)
        (assert tmp%0#1) // a is not a
        let tmp%1#1: bool = (== b#0 0x62)
        (assert tmp%1#1) // b is not b
        let tmp%2#1: uint64 = ((gtxns CreatedAssetID) acfg#0)
        (assert tmp%2#1) // expected asset id
        let tmp%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#1)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]() -> void:
    block@0: // L27
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let acfg#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) acfg#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 acfg)
        (assert gtxn_type_matches%0#0) // transaction type is acfg
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%0#1: bool = (== a#0 0x61)
        (assert tmp%0#1) // a is not a
        let tmp%1#1: bool = (== b#0 0x62)
        (assert tmp%1#1) // b is not b
        let tmp%2#1: uint64 = ((gtxns CreatedAssetID) acfg#0)
        (assert tmp%2#1) // expected asset id
        exit 1u