main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#1 0u)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L11
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        let tmp%5#0: bool = (!= tmp%4#0 0u)
        goto tmp%4#0 ? block@3 : block@10
    block@3: // call_NoOp_L11
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "call_with_txn(byte[],txn,byte[])uint64" => block@4, method "call_with_acfg(byte[],acfg,byte[])uint64" => block@5, method "call_with_acfg_no_return(byte[],acfg,byte[])void" => block@6, * => block@10}
    block@4: // call_with_txn_route_L12
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]()
        goto block@10
    block@5: // call_with_acfg_route_L20
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]()
        goto block@10
    block@6: // call_with_acfg_no_return_route_L27
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]()
        goto block@10
    block@10: // after_if_else_L11
        fail
    block@11: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create()
        exit 1u

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]() -> void:
    block@0: // L12
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let acfg#0: uint64 = (- tmp%1#0 1u)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%0#1: bool = (== a#0 0x61)
        (assert tmp%0#1) // a is not a
        let tmp%1#1: bool = (== b#0 0x62)
        (assert tmp%1#1) // b is not b
        let tmp%2#1: uint64 = ((gtxns TypeEnum) acfg#0)
        let tmp%3#1: bool = (== tmp%2#1 acfg)
        (assert tmp%3#1) // expected asset config
        let tmp%4#1: uint64 = ((gtxns CreatedAssetID) acfg#0)
        let tmp%5#1: bool = (!= tmp%4#1 0u)
        (assert tmp%4#1) // expected asset id
        let tmp%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%4#1)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]() -> void:
    block@0: // L20
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let acfg#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) acfg#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 acfg)
        (assert gtxn_type_matches%0#0) // transaction type is acfg
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%0#1: bool = (== a#0 0x61)
        (assert tmp%0#1) // a is not a
        let tmp%1#1: bool = (== b#0 0x62)
        (assert tmp%1#1) // b is not b
        let tmp%2#1: uint64 = ((gtxns CreatedAssetID) acfg#0)
        let tmp%3#1: bool = (!= tmp%2#1 0u)
        (assert tmp%2#1) // expected asset id
        let tmp%4#0: Encoded(uint64) = bytes_encode<uint64>(tmp%2#1)
        let tmp%5#0: bytes = (concat 0x151f7c75 tmp%4#0)
        (log tmp%5#0)
        exit 1u

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]() -> void:
    block@0: // L27
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%1#0: uint64 = (txn GroupIndex)
        let acfg#0: uint64 = (- tmp%1#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) acfg#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 acfg)
        (assert gtxn_type_matches%0#0) // transaction type is acfg
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = decode_bytes<bytes>(reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%0#1: bool = (== a#0 0x61)
        (assert tmp%0#1) // a is not a
        let tmp%1#1: bool = (== b#0 0x62)
        (assert tmp%1#1) // b is not b
        let tmp%2#1: uint64 = ((gtxns CreatedAssetID) acfg#0)
        let tmp%3#0: bool = (!= tmp%2#1 0u)
        (assert tmp%2#1) // expected asset id
        exit 1u

subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.__algopy_default_create() -> void:
    block@0: // L1
        return 