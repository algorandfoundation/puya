// Op                                                                               Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // typed_abi_call_txn/txn_contract.py:11
        // class TxnContract(ARC4Contract):
        txn NumAppArgs                                                              tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                              tmp%0#1
        bz main___algopy_default_create@10 ; b main_abi_routing@2

    main_abi_routing@2:
        // typed_abi_call_txn/txn_contract.py:11
        // class TxnContract(ARC4Contract):
        txn OnCompletion                                                            tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                              tmp%2#0
        !                                                                           tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                              tmp%3#0
        assert // OnCompletion must be NoOp
        txn ApplicationID                                                           tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                              tmp%4#0
        assert
        txna ApplicationArgs 0                                                      tmp%6#0
        v-store tmp%6#0
        method call_with_txn(byte[],txn,byte[])uint64                               Method(call_with_txn(byte[],txn,byte[])uint64)
        method call_with_acfg(byte[],acfg,byte[])uint64                             Method(call_with_txn(byte[],txn,byte[])uint64),Method(call_with_acfg(byte[],acfg,byte[])uint64)
        method call_with_acfg_no_return(byte[],acfg,byte[])void                     Method(call_with_txn(byte[],txn,byte[])uint64),Method(call_with_acfg(byte[],acfg,byte[])uint64),Method(call_with_acfg_no_return(byte[],acfg,byte[])void)
        v-load tmp%6#0                                                              Method(call_with_txn(byte[],txn,byte[])uint64),Method(call_with_acfg(byte[],acfg,byte[])uint64),Method(call_with_acfg_no_return(byte[],acfg,byte[])void),tmp%6#0
        match main_call_with_txn_route@4 main_call_with_acfg_route@5 main_call_with_acfg_no_return_route@6 ; b main_after_if_else@9 

    main_call_with_txn_route@4:
        // typed_abi_call_txn/txn_contract.py:12
        // @arc4.abimethod
        callsub call_with_txn
        b main_after_if_else@9

    main_call_with_acfg_route@5:
        // typed_abi_call_txn/txn_contract.py:20
        // @arc4.abimethod
        callsub call_with_acfg
        b main_after_if_else@9

    main_call_with_acfg_no_return_route@6:
        // typed_abi_call_txn/txn_contract.py:27
        // @arc4.abimethod
        callsub call_with_acfg_no_return
        b main_after_if_else@9

    main_after_if_else@9:
        // typed_abi_call_txn/txn_contract.py:11
        // class TxnContract(ARC4Contract):
        err

    main___algopy_default_create@10:
        txn OnCompletion                                                            tmp%7#0
        v-store tmp%7#0
        v-load tmp%7#0                                                              tmp%7#0
        !                                                                           tmp%8#0
        v-store tmp%8#0
        txn ApplicationID                                                           tmp%9#0
        v-store tmp%9#0
        v-load tmp%9#0                                                              tmp%9#0
        !                                                                           tmp%10#0
        v-store tmp%10#0
        v-load tmp%8#0                                                              tmp%8#0
        v-load tmp%10#0                                                             tmp%8#0,tmp%10#0
        &&                                                                          tmp%11#0
        v-store tmp%11#0
        v-load tmp%11#0                                                             tmp%11#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                                       1
        return


// test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn[routing]() -> void:
subroutine call_with_txn:
    call_with_txn_block@0:
        // typed_abi_call_txn/txn_contract.py:12
        // @arc4.abimethod
        txna ApplicationArgs 1                                                      tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                              tmp%0#0
        int 0                                                                       tmp%0#0,0
        extract_uint16                                                              aggregate%array_length%0#0
        v-store aggregate%array_length%0#0
        v-load aggregate%array_length%0#0                                           aggregate%array_length%0#0
        int 2                                                                       aggregate%array_length%0#0,2
        +                                                                           add%0#0
        v-store add%0#0
        v-load tmp%0#0                                                              tmp%0#0
        len                                                                         len%0#0
        v-store len%0#0
        v-load len%0#0                                                              len%0#0
        v-load add%0#0                                                              len%0#0,add%0#0
        ==                                                                          eq%0#0
        v-store eq%0#0
        v-load eq%0#0                                                               eq%0#0
        assert // invalid number of bytes for (len+uint8[])
        v-load tmp%0#0                                                              tmp%0#0
        extract 2 0                                                                 a#0
        v-store a#0
        txn GroupIndex                                                              tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                              tmp%2#0
        int 1                                                                       tmp%2#0,1
        -                                                                           acfg#0
        v-store acfg#0
        txna ApplicationArgs 2                                                      tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                              tmp%3#0
        int 0                                                                       tmp%3#0,0
        extract_uint16                                                              aggregate%array_length%1#0
        v-store aggregate%array_length%1#0
        v-load aggregate%array_length%1#0                                           aggregate%array_length%1#0
        int 2                                                                       aggregate%array_length%1#0,2
        +                                                                           add%1#0
        v-store add%1#0
        v-load tmp%3#0                                                              tmp%3#0
        len                                                                         len%1#0
        v-store len%1#0
        v-load len%1#0                                                              len%1#0
        v-load add%1#0                                                              len%1#0,add%1#0
        ==                                                                          eq%1#0
        v-store eq%1#0
        v-load eq%1#0                                                               eq%1#0
        assert // invalid number of bytes for (len+uint8[])
        v-load tmp%3#0                                                              tmp%3#0
        extract 2 0                                                                 b#0
        v-store b#0
        // typed_abi_call_txn/txn_contract.py:14
        // assert a == b"a", "a is not a"
        v-load a#0                                                                  a#0
        byte 0x61                                                                   a#0,0x61
        ==                                                                          tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                              tmp%0#1
        assert // a is not a
        // typed_abi_call_txn/txn_contract.py:15
        // assert b == b"b", "b is not b"
        v-load b#0                                                                  b#0
        byte 0x62                                                                   b#0,0x62
        ==                                                                          tmp%1#1
        v-store tmp%1#1
        v-load tmp%1#1                                                              tmp%1#1
        assert // b is not b
        // typed_abi_call_txn/txn_contract.py:16
        // assert acfg.type == TransactionType.AssetConfig, "expected asset config"
        v-load acfg#0                                                               acfg#0
        gtxns TypeEnum                                                              tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                              tmp%2#0
        int acfg                                                                    tmp%2#0,acfg
        ==                                                                          tmp%3#1
        v-store tmp%3#1
        v-load tmp%3#1                                                              tmp%3#1
        assert // expected asset config
        // typed_abi_call_txn/txn_contract.py:17
        // assert acfg.created_asset.id, "expected asset id"
        v-load acfg#0                                                               acfg#0
        gtxns CreatedAssetID                                                        tmp%4#1
        v-store tmp%4#1
        v-load tmp%4#1                                                              tmp%4#1
        assert // expected asset id
        // typed_abi_call_txn/txn_contract.py:12
        // @arc4.abimethod
        v-load tmp%4#1                                                              tmp%4#1
        itob                                                                        aggregate%val_as_bytes%0#0
        v-store aggregate%val_as_bytes%0#0
        byte 0x151f7c75                                                             0x151f7c75
        v-load aggregate%val_as_bytes%0#0                                           0x151f7c75,aggregate%val_as_bytes%0#0
        concat                                                                      tmp%7#0
        v-store tmp%7#0
        v-load tmp%7#0                                                              tmp%7#0
        log
        int 1                                                                       1
        return


// test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg[routing]() -> void:
subroutine call_with_acfg:
    call_with_acfg_block@0:
        // typed_abi_call_txn/txn_contract.py:20
        // @arc4.abimethod
        txna ApplicationArgs 1                                                      tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                              tmp%0#0
        int 0                                                                       tmp%0#0,0
        extract_uint16                                                              aggregate%array_length%0#0
        v-store aggregate%array_length%0#0
        v-load aggregate%array_length%0#0                                           aggregate%array_length%0#0
        int 2                                                                       aggregate%array_length%0#0,2
        +                                                                           add%0#0
        v-store add%0#0
        v-load tmp%0#0                                                              tmp%0#0
        len                                                                         len%0#0
        v-store len%0#0
        v-load len%0#0                                                              len%0#0
        v-load add%0#0                                                              len%0#0,add%0#0
        ==                                                                          eq%0#0
        v-store eq%0#0
        v-load eq%0#0                                                               eq%0#0
        assert // invalid number of bytes for (len+uint8[])
        v-load tmp%0#0                                                              tmp%0#0
        extract 2 0                                                                 a#0
        v-store a#0
        txn GroupIndex                                                              tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                              tmp%2#0
        int 1                                                                       tmp%2#0,1
        -                                                                           acfg#0
        v-store acfg#0
        v-load acfg#0                                                               acfg#0
        gtxns TypeEnum                                                              gtxn_type%0#0
        v-store gtxn_type%0#0
        v-load gtxn_type%0#0                                                        gtxn_type%0#0
        int acfg                                                                    gtxn_type%0#0,acfg
        ==                                                                          gtxn_type_matches%0#0
        v-store gtxn_type_matches%0#0
        v-load gtxn_type_matches%0#0                                                gtxn_type_matches%0#0
        assert // transaction type is acfg
        txna ApplicationArgs 2                                                      tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                              tmp%3#0
        int 0                                                                       tmp%3#0,0
        extract_uint16                                                              aggregate%array_length%1#0
        v-store aggregate%array_length%1#0
        v-load aggregate%array_length%1#0                                           aggregate%array_length%1#0
        int 2                                                                       aggregate%array_length%1#0,2
        +                                                                           add%1#0
        v-store add%1#0
        v-load tmp%3#0                                                              tmp%3#0
        len                                                                         len%1#0
        v-store len%1#0
        v-load len%1#0                                                              len%1#0
        v-load add%1#0                                                              len%1#0,add%1#0
        ==                                                                          eq%1#0
        v-store eq%1#0
        v-load eq%1#0                                                               eq%1#0
        assert // invalid number of bytes for (len+uint8[])
        v-load tmp%3#0                                                              tmp%3#0
        extract 2 0                                                                 b#0
        v-store b#0
        // typed_abi_call_txn/txn_contract.py:22
        // assert a == b"a", "a is not a"
        v-load a#0                                                                  a#0
        byte 0x61                                                                   a#0,0x61
        ==                                                                          tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                              tmp%0#1
        assert // a is not a
        // typed_abi_call_txn/txn_contract.py:23
        // assert b == b"b", "b is not b"
        v-load b#0                                                                  b#0
        byte 0x62                                                                   b#0,0x62
        ==                                                                          tmp%1#1
        v-store tmp%1#1
        v-load tmp%1#1                                                              tmp%1#1
        assert // b is not b
        // typed_abi_call_txn/txn_contract.py:24
        // assert acfg.created_asset.id, "expected asset id"
        v-load acfg#0                                                               acfg#0
        gtxns CreatedAssetID                                                        tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                              tmp%2#0
        assert // expected asset id
        // typed_abi_call_txn/txn_contract.py:20
        // @arc4.abimethod
        v-load tmp%2#0                                                              tmp%2#0
        itob                                                                        aggregate%val_as_bytes%0#0
        v-store aggregate%val_as_bytes%0#0
        byte 0x151f7c75                                                             0x151f7c75
        v-load aggregate%val_as_bytes%0#0                                           0x151f7c75,aggregate%val_as_bytes%0#0
        concat                                                                      tmp%7#0
        v-store tmp%7#0
        v-load tmp%7#0                                                              tmp%7#0
        log
        int 1                                                                       1
        return


// test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return[routing]() -> void:
subroutine call_with_acfg_no_return:
    call_with_acfg_no_return_block@0:
        // typed_abi_call_txn/txn_contract.py:27
        // @arc4.abimethod
        txna ApplicationArgs 1                                                      tmp%0#0
        v-store tmp%0#0
        v-load tmp%0#0                                                              tmp%0#0
        int 0                                                                       tmp%0#0,0
        extract_uint16                                                              aggregate%array_length%0#0
        v-store aggregate%array_length%0#0
        v-load aggregate%array_length%0#0                                           aggregate%array_length%0#0
        int 2                                                                       aggregate%array_length%0#0,2
        +                                                                           add%0#0
        v-store add%0#0
        v-load tmp%0#0                                                              tmp%0#0
        len                                                                         len%0#0
        v-store len%0#0
        v-load len%0#0                                                              len%0#0
        v-load add%0#0                                                              len%0#0,add%0#0
        ==                                                                          eq%0#0
        v-store eq%0#0
        v-load eq%0#0                                                               eq%0#0
        assert // invalid number of bytes for (len+uint8[])
        v-load tmp%0#0                                                              tmp%0#0
        extract 2 0                                                                 a#0
        v-store a#0
        txn GroupIndex                                                              tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                              tmp%2#0
        int 1                                                                       tmp%2#0,1
        -                                                                           acfg#0
        v-store acfg#0
        v-load acfg#0                                                               acfg#0
        gtxns TypeEnum                                                              gtxn_type%0#0
        v-store gtxn_type%0#0
        v-load gtxn_type%0#0                                                        gtxn_type%0#0
        int acfg                                                                    gtxn_type%0#0,acfg
        ==                                                                          gtxn_type_matches%0#0
        v-store gtxn_type_matches%0#0
        v-load gtxn_type_matches%0#0                                                gtxn_type_matches%0#0
        assert // transaction type is acfg
        txna ApplicationArgs 2                                                      tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                              tmp%3#0
        int 0                                                                       tmp%3#0,0
        extract_uint16                                                              aggregate%array_length%1#0
        v-store aggregate%array_length%1#0
        v-load aggregate%array_length%1#0                                           aggregate%array_length%1#0
        int 2                                                                       aggregate%array_length%1#0,2
        +                                                                           add%1#0
        v-store add%1#0
        v-load tmp%3#0                                                              tmp%3#0
        len                                                                         len%1#0
        v-store len%1#0
        v-load len%1#0                                                              len%1#0
        v-load add%1#0                                                              len%1#0,add%1#0
        ==                                                                          eq%1#0
        v-store eq%1#0
        v-load eq%1#0                                                               eq%1#0
        assert // invalid number of bytes for (len+uint8[])
        v-load tmp%3#0                                                              tmp%3#0
        extract 2 0                                                                 b#0
        v-store b#0
        // typed_abi_call_txn/txn_contract.py:31
        // assert a == b"a", "a is not a"
        v-load a#0                                                                  a#0
        byte 0x61                                                                   a#0,0x61
        ==                                                                          tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                              tmp%0#1
        assert // a is not a
        // typed_abi_call_txn/txn_contract.py:32
        // assert b == b"b", "b is not b"
        v-load b#0                                                                  b#0
        byte 0x62                                                                   b#0,0x62
        ==                                                                          tmp%1#1
        v-store tmp%1#1
        v-load tmp%1#1                                                              tmp%1#1
        assert // b is not b
        // typed_abi_call_txn/txn_contract.py:33
        // assert acfg.created_asset.id, "expected asset id"
        v-load acfg#0                                                               acfg#0
        gtxns CreatedAssetID                                                        tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                              tmp%2#0
        assert // expected asset id
        // typed_abi_call_txn/txn_contract.py:27
        // @arc4.abimethod
        int 1                                                                       1
        return


