{
  "version": 3,
  "sources": [
    "../caller.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;AACK;;;AAAA;;;AAAA;;;AAAA;AAOoB;AAFP;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKW;;;AAAA;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAPpB;AAgBA;;;AAAA;;;AAAA;;;AAAA;AAOG;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKN;;;AAAA;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAPH;AAeA;;;AAAA;;;AAAA;;;AAAA;AAOG;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKN;;;AAAA;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAPH;AAeA;;;AAAA;;;AAAA;;;AAAA;AAOU;AAFG;;;AADK;;;AADD;;;AADP;;;AAAA;;;AAKA;AACgE;;;;;;;AADhE;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAGa;;;AAAb;AAAP;AAGW;;;AAbd",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 6"
    },
    "7": {
      "op": "bytecblock \"TEST\" \"TST\" 0x151f7c75 0x6d4700ad"
    },
    "28": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "30": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "31": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "33": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "1"
      ]
    },
    "34": {
      "op": "shl",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "35": {
      "op": "+",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "36": {
      "op": "switch call_NoOp create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED",
      "stack_out": []
    },
    "62": {
      "error": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
      "block": "*NOT_IMPLEMENTED",
      "stack_in": [],
      "op": "err // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
    },
    "63": {
      "block": "create_NoOp",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "65": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "66": {
      "error": "this contract does not implement the given ABI method for create NoOp",
      "op": "return // on error: this contract does not implement the given ABI method for create NoOp",
      "defined_out": [],
      "stack_out": []
    },
    "67": {
      "block": "call_NoOp",
      "stack_in": [],
      "op": "pushbytess 0x0ab53563 0xea6a6ade 0x2381ff80 0x00b50f1c // method \"test_call_with_txn(byte[],byte[],uint64)void\", method \"test_call_with_acfg(byte[],byte[],uint64)void\", method \"test_call_with_infer(byte[],byte[],uint64)void\", method \"test_call_with_acfg_no_return(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)"
      ],
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)"
      ]
    },
    "89": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "tmp%5#0"
      ]
    },
    "92": {
      "op": "match test_call_with_txn test_call_with_acfg test_call_with_infer test_call_with_acfg_no_return",
      "stack_out": []
    },
    "102": {
      "error": "this contract does not implement the given ABI method for call NoOp",
      "op": "err // this contract does not implement the given ABI method for call NoOp"
    },
    "103": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]",
      "params": {},
      "block": "test_call_with_txn",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "106": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "109": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "112": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "113": {
      "op": "itxn_begin"
    },
    "114": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "1"
      ]
    },
    "115": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "117": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "118": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "120": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TST\""
      ]
    },
    "121": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "123": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "acfg"
      ]
    },
    "124": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "126": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "0"
      ]
    },
    "127": {
      "op": "itxn_field Fee",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "129": {
      "op": "itxn_next"
    },
    "130": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "132": {
      "op": "pushbytes 0xa1f5040d // method \"call_with_txn(byte[],txn,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ]
    },
    "138": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "140": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "141": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "143": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "145": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "146": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "148": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "149": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "151": {
      "op": "itxn_submit"
    },
    "152": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "155": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "156": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#1"
      ]
    },
    "159": {
      "op": "swap",
      "stack_out": [
        "tmp%2#1",
        "awst_tmp%0#0"
      ]
    },
    "160": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%2#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%3#0"
      ]
    },
    "163": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "164": {
      "op": "==",
      "defined_out": [
        "tmp%2#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%4#0"
      ]
    },
    "165": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "166": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "167": {
      "error": "expected asset id",
      "op": "return // on error: expected asset id",
      "stack_out": []
    },
    "168": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]",
      "params": {},
      "block": "test_call_with_acfg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "171": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "174": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "177": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "178": {
      "op": "itxn_begin"
    },
    "179": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "1"
      ]
    },
    "180": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "182": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "183": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "185": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TST\""
      ]
    },
    "186": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "188": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "acfg"
      ]
    },
    "189": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "191": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "0"
      ]
    },
    "192": {
      "op": "itxn_field Fee",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "194": {
      "op": "itxn_next"
    },
    "195": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "197": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "198": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "200": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "201": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "203": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "205": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "206": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "208": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "209": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "211": {
      "op": "itxn_submit"
    },
    "212": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "215": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "218": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "219": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "220": {
      "error": "application log value is not the result of an ABI return",
      "op": "return // on error: application log value is not the result of an ABI return",
      "stack_out": []
    },
    "221": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]",
      "params": {},
      "block": "test_call_with_infer",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "224": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "227": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "230": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "231": {
      "op": "itxn_begin"
    },
    "232": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "1"
      ]
    },
    "233": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "235": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "236": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "238": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TST\""
      ]
    },
    "239": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "241": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "acfg"
      ]
    },
    "242": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "244": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "0"
      ]
    },
    "245": {
      "op": "itxn_field Fee",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "247": {
      "op": "itxn_next"
    },
    "248": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "250": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "251": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "253": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "254": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "256": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "258": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "259": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "261": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "262": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "264": {
      "op": "itxn_submit"
    },
    "265": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "268": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "271": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "272": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "273": {
      "error": "application log value is not the result of an ABI return",
      "op": "return // on error: application log value is not the result of an ABI return",
      "stack_out": []
    },
    "274": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]",
      "params": {},
      "block": "test_call_with_acfg_no_return",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "277": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "280": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "283": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "284": {
      "op": "itxn_begin"
    },
    "285": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "1"
      ]
    },
    "286": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "288": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "289": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "291": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TST\""
      ]
    },
    "292": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "294": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "acfg"
      ]
    },
    "295": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "297": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "0"
      ]
    },
    "298": {
      "op": "itxn_field Fee",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "300": {
      "op": "itxn_next"
    },
    "301": {
      "op": "pushbytes 0x31",
      "defined_out": [
        "0x31",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "0x31"
      ]
    },
    "304": {
      "op": "itxn_field Note",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "306": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "308": {
      "op": "pushbytes 0xc840077d // method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "314": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "316": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "317": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "319": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "321": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "322": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "324": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "325": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "327": {
      "op": "itxn_submit"
    },
    "328": {
      "op": "itxn Note",
      "defined_out": [
        "txn1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0"
      ]
    },
    "330": {
      "op": "pushbytes 0x31",
      "stack_out": [
        "txn1.Note#0",
        "0x31"
      ]
    },
    "333": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "334": {
      "op": "assert",
      "stack_out": []
    },
    "335": {
      "op": "gitxn 0 CreatedAssetID",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "338": {
      "error": "expected asset to be created",
      "op": "return // on error: expected asset to be created",
      "stack_out": []
    }
  }
}