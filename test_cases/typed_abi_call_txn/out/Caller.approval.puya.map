{
  "version": 3,
  "sources": [
    "../caller.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;;;;;;;AACK;;;AAAA;;;AAAA;;;AAAA;AAOoB;AAFP;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKW;;;AAAA;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAOjB;AAdH;AAAA;AAgBA;;;AAAA;;;AAAA;;;AAAA;AAOG;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKN;;;AAAA;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAPH;AAAA;AAeA;;;AAAA;;;AAAA;;;AAAA;AAOG;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKN;;;AAAA;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAPH;AAAA;AAeA;;;AAAA;;;AAAA;;;AAAA;AAOU;AAFG;;;AADK;;;AADD;;;AADP;;;AAAA;;;AAKA;AACgE;;;;;;;AADhE;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAGa;;;AAAb;AAAP;AAGW;;;AACX;AAdH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 3 6"
    },
    "7": {
      "op": "bytecblock \"TEST\" \"TST\" 0x151f7c75 0x6d4700ad"
    },
    "28": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "30": {
      "op": "bz main_bare_routing@18",
      "stack_out": []
    },
    "33": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "35": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "36": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "37": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "39": {
      "op": "assert",
      "stack_out": []
    },
    "40": {
      "op": "pushbytess 0x0ab53563 0xea6a6ade 0x2381ff80 0x00b50f1c // method \"test_call_with_txn(byte[],byte[],uint64)void\", method \"test_call_with_acfg(byte[],byte[],uint64)void\", method \"test_call_with_infer(byte[],byte[],uint64)void\", method \"test_call_with_acfg_no_return(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)"
      ],
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)"
      ]
    },
    "62": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%7#0"
      ],
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "tmp%7#0"
      ]
    },
    "65": {
      "op": "match test_call_with_txn test_call_with_acfg test_call_with_infer test_call_with_acfg_no_return",
      "stack_out": []
    },
    "75": {
      "op": "err"
    },
    "76": {
      "block": "main_bare_routing@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "78": {
      "op": "!",
      "defined_out": [
        "not%tmp%9#0"
      ],
      "stack_out": [
        "not%tmp%9#0"
      ]
    },
    "79": {
      "op": "assert",
      "stack_out": []
    },
    "80": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "82": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "83": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "84": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "85": {
      "op": "return",
      "stack_out": []
    },
    "86": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]",
      "params": {},
      "block": "test_call_with_txn",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "89": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "92": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "95": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "96": {
      "op": "itxn_begin"
    },
    "97": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "1"
      ]
    },
    "98": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "100": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "101": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "103": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TST\""
      ]
    },
    "104": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "106": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "acfg"
      ]
    },
    "107": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "109": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "0"
      ]
    },
    "110": {
      "op": "itxn_field Fee",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "112": {
      "op": "itxn_next"
    },
    "113": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "115": {
      "op": "pushbytes 0xa1f5040d // method \"call_with_txn(byte[],txn,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ]
    },
    "121": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "123": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "124": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "126": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "128": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "129": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "131": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "132": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "134": {
      "op": "itxn_submit"
    },
    "135": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "138": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "139": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#1"
      ]
    },
    "142": {
      "op": "swap",
      "stack_out": [
        "tmp%2#1",
        "awst_tmp%0#0"
      ]
    },
    "143": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%2#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%3#0"
      ]
    },
    "146": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "147": {
      "op": "==",
      "defined_out": [
        "tmp%2#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%4#0"
      ]
    },
    "148": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "149": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "150": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "151": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "152": {
      "op": "return",
      "stack_out": []
    },
    "153": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]",
      "params": {},
      "block": "test_call_with_acfg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "156": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "159": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "162": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "163": {
      "op": "itxn_begin"
    },
    "164": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "1"
      ]
    },
    "165": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "167": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "168": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "170": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TST\""
      ]
    },
    "171": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "173": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "acfg"
      ]
    },
    "174": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "176": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "0"
      ]
    },
    "177": {
      "op": "itxn_field Fee",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "179": {
      "op": "itxn_next"
    },
    "180": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "182": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "183": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "185": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "186": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "188": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "190": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "191": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "193": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "194": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "196": {
      "op": "itxn_submit"
    },
    "197": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "200": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "203": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "204": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "205": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "206": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "207": {
      "op": "return",
      "stack_out": []
    },
    "208": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]",
      "params": {},
      "block": "test_call_with_infer",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "211": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "214": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "217": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "218": {
      "op": "itxn_begin"
    },
    "219": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "1"
      ]
    },
    "220": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "222": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "223": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "225": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TST\""
      ]
    },
    "226": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "228": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "acfg"
      ]
    },
    "229": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "231": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "0"
      ]
    },
    "232": {
      "op": "itxn_field Fee",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "234": {
      "op": "itxn_next"
    },
    "235": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "237": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "238": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "240": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "241": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "243": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "245": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "246": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "248": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "249": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "251": {
      "op": "itxn_submit"
    },
    "252": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "255": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "258": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "259": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "260": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "261": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "262": {
      "op": "return",
      "stack_out": []
    },
    "263": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]",
      "params": {},
      "block": "test_call_with_acfg_no_return",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "266": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "269": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "272": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "273": {
      "op": "itxn_begin"
    },
    "274": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "1"
      ]
    },
    "275": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "277": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "278": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "280": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TST\""
      ]
    },
    "281": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "283": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "acfg"
      ]
    },
    "284": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "286": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "0"
      ]
    },
    "287": {
      "op": "itxn_field Fee",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "289": {
      "op": "itxn_next"
    },
    "290": {
      "op": "pushbytes 0x31",
      "defined_out": [
        "0x31",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "0x31"
      ]
    },
    "293": {
      "op": "itxn_field Note",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "295": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "297": {
      "op": "pushbytes 0xc840077d // method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "303": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "305": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "306": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "308": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "310": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "311": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "313": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "314": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "316": {
      "op": "itxn_submit"
    },
    "317": {
      "op": "itxn Note",
      "defined_out": [
        "txn1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0"
      ]
    },
    "319": {
      "op": "pushbytes 0x31",
      "stack_out": [
        "txn1.Note#0",
        "0x31"
      ]
    },
    "322": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "323": {
      "op": "assert",
      "stack_out": []
    },
    "324": {
      "op": "gitxn 0 CreatedAssetID",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "327": {
      "error": "expected asset to be created",
      "op": "assert // expected asset to be created",
      "stack_out": []
    },
    "328": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "329": {
      "op": "return",
      "stack_out": []
    }
  }
}