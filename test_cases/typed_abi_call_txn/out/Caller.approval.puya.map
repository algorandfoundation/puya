{
  "version": 3,
  "sources": [
    "../caller.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AA+CK;;AAAA;AAAA;AAAA;;AAAA;AA/CL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AA+CK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAhCL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAgCK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAjBL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAiBK;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AACK;;;AAAA;;AADL;;AAAA;;;;;;;;;AACA;;;AAOyB;AAFP;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKW;AAEb;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;;;AAJa;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAOjB;;AAER;;;AAOQ;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKN;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;;;AAJJ;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAQR;;;AAOQ;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKN;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;;;AAJJ;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;;AAQR;;;AAOe;AAFG;;;AADK;;;AADD;;;AADP;;;AAAA;;;AAKA;AACmC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAS;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAoB;;;;;;;;;AADhE;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAGa;;;AAAb;AAAP;AAGW;;;AACX;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 6"
    },
    "7": {
      "op": "bytecblock \"TEST\" \"TST\" 0x151f7c75 0x6d4700ad"
    },
    "28": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "30": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "33": {
      "op": "pushbytess 0x0ab53563 0xea6a6ade 0x2381ff80 0x00b50f1c // method \"test_call_with_txn(byte[],byte[],uint64)void\", method \"test_call_with_acfg(byte[],byte[],uint64)void\", method \"test_call_with_infer(byte[],byte[],uint64)void\", method \"test_call_with_acfg_no_return(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)"
      ],
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)"
      ]
    },
    "55": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "tmp%2#0"
      ]
    },
    "58": {
      "op": "match main_test_call_with_txn_route@3 main_test_call_with_acfg_route@4 main_test_call_with_infer_route@5 main_test_call_with_acfg_no_return_route@6",
      "stack_out": []
    },
    "68": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "69": {
      "op": "return",
      "stack_out": []
    },
    "70": {
      "block": "main_test_call_with_acfg_no_return_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "72": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "73": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "74": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "76": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "77": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0"
      ]
    },
    "80": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "83": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%7#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ]
    },
    "86": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "89": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "92": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "93": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return",
      "op": "callsub test_call_with_acfg_no_return",
      "stack_out": []
    },
    "96": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "97": {
      "op": "return",
      "stack_out": []
    },
    "98": {
      "block": "main_test_call_with_infer_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "100": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "101": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "102": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "104": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "105": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0"
      ]
    },
    "108": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "111": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%5#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ]
    },
    "114": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "117": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "120": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "121": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer",
      "op": "callsub test_call_with_infer",
      "stack_out": []
    },
    "124": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "125": {
      "op": "return",
      "stack_out": []
    },
    "126": {
      "block": "main_test_call_with_acfg_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "128": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "129": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "130": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "132": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "133": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "136": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "139": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%3#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "142": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "145": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "148": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "149": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg",
      "op": "callsub test_call_with_acfg",
      "stack_out": []
    },
    "152": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "153": {
      "op": "return",
      "stack_out": []
    },
    "154": {
      "block": "main_test_call_with_txn_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "156": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "157": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "158": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "160": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "161": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "164": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "167": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "170": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "173": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "176": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "177": {
      "callsub": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn",
      "op": "callsub test_call_with_txn",
      "stack_out": []
    },
    "180": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "181": {
      "op": "return",
      "stack_out": []
    },
    "182": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "184": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "187": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "189": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "190": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "191": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "return",
      "stack_out": []
    },
    "193": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_call_with_txn",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "196": {
      "op": "itxn_begin"
    },
    "197": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "198": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "200": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "201": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "203": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "204": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "206": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "207": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "209": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "210": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "212": {
      "op": "itxn_next"
    },
    "213": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "215": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "216": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "217": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "220": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "222": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "223": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "b#0 (copy)"
      ]
    },
    "225": {
      "op": "len",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length%1#0"
      ]
    },
    "226": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "227": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "230": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "232": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "233": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "app#0 (copy)"
      ]
    },
    "235": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "237": {
      "op": "pushbytes 0xa1f5040d // method \"call_with_txn(byte[],txn,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ]
    },
    "243": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "245": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "246": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "aggregate%encoded_value%1#0"
      ]
    },
    "248": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "250": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "251": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "253": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "254": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "256": {
      "op": "itxn_submit"
    },
    "257": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "260": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "261": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "264": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "awst_tmp%0#0"
      ]
    },
    "265": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "268": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "269": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "270": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "271": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "272": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "273": {
      "retsub": true,
      "op": "retsub"
    },
    "274": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_call_with_acfg",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "277": {
      "op": "itxn_begin"
    },
    "278": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "279": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "281": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "282": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "284": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "285": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "287": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "288": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "290": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "291": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "293": {
      "op": "itxn_next"
    },
    "294": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "296": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "297": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "298": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "301": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "303": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "304": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "b#0 (copy)"
      ]
    },
    "306": {
      "op": "len",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length%1#0"
      ]
    },
    "307": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "308": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "311": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "313": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "314": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "app#0 (copy)"
      ]
    },
    "316": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "318": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "319": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "321": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "322": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "aggregate%encoded_value%1#0"
      ]
    },
    "324": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "326": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "327": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "329": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "330": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "332": {
      "op": "itxn_submit"
    },
    "333": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "336": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "339": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "340": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "341": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "342": {
      "retsub": true,
      "op": "retsub"
    },
    "343": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_call_with_infer",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "346": {
      "op": "itxn_begin"
    },
    "347": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "348": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "350": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "351": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "353": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "354": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "356": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "357": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "359": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "360": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "362": {
      "op": "itxn_next"
    },
    "363": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "365": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "366": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "367": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "370": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "372": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "373": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "b#0 (copy)"
      ]
    },
    "375": {
      "op": "len",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length%1#0"
      ]
    },
    "376": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "377": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "380": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "382": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "383": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "app#0 (copy)"
      ]
    },
    "385": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "387": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "388": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "390": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "391": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "aggregate%encoded_value%1#0"
      ]
    },
    "393": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "395": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "396": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "398": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "399": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "401": {
      "op": "itxn_submit"
    },
    "402": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "405": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "408": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0x151f7c75"
      ]
    },
    "409": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "410": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "411": {
      "retsub": true,
      "op": "retsub"
    },
    "412": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return",
      "params": {
        "a#0": "bytes",
        "b#0": "bytes",
        "app#0": "uint64"
      },
      "block": "test_call_with_acfg_no_return",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "415": {
      "op": "itxn_begin"
    },
    "416": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "417": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "419": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\""
      ],
      "stack_out": [
        "\"TEST\""
      ]
    },
    "420": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "422": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\""
      ],
      "stack_out": [
        "\"TST\""
      ]
    },
    "423": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "425": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "426": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "428": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "429": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "431": {
      "op": "itxn_next"
    },
    "432": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0 (copy)"
      ]
    },
    "434": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0"
      ],
      "stack_out": [
        "aggregate%length%0#0"
      ]
    },
    "435": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%as_bytes%0#0"
      ]
    },
    "436": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0"
      ],
      "stack_out": [
        "aggregate%length_uint16%0#0"
      ]
    },
    "439": {
      "op": "frame_dig -3",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "a#0 (copy)"
      ]
    },
    "441": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "442": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "b#0 (copy)"
      ]
    },
    "444": {
      "op": "len",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length%1#0"
      ]
    },
    "445": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%1#0",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%as_bytes%1#0"
      ]
    },
    "446": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0"
      ]
    },
    "449": {
      "op": "frame_dig -2",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%length_uint16%1#0",
        "b#0 (copy)"
      ]
    },
    "451": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "452": {
      "op": "pushbytes 0x31",
      "defined_out": [
        "0x31",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "0x31"
      ]
    },
    "455": {
      "op": "itxn_field Note",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "457": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "app#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "app#0 (copy)"
      ]
    },
    "459": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "461": {
      "op": "pushbytes 0xc840077d // method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "467": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "aggregate%encoded_value%1#0"
      ]
    },
    "469": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_value%1#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "470": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "aggregate%encoded_value%1#0"
      ]
    },
    "472": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "474": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "475": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "477": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "478": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "480": {
      "op": "itxn_submit"
    },
    "481": {
      "op": "itxn Note",
      "defined_out": [
        "txn1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0"
      ]
    },
    "483": {
      "op": "pushbytes 0x31",
      "stack_out": [
        "txn1.Note#0",
        "0x31"
      ]
    },
    "486": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "487": {
      "op": "assert",
      "stack_out": []
    },
    "488": {
      "op": "gitxn 0 CreatedAssetID",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "491": {
      "error": "expected asset to be created",
      "op": "assert // expected asset to be created",
      "stack_out": []
    },
    "492": {
      "retsub": true,
      "op": "retsub"
    }
  }
}