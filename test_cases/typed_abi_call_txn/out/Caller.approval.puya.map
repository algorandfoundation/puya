{
  "version": 3,
  "sources": [
    "../caller.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;;;;;;;;;;AACK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOoB;AAFP;;;AADK;;;AADD;;;AADR;;;;AAAA;;;AAKW;;;AAAA;;;;;;;;;;;;;AAAA;;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAOjB;AAdH;AAAA;AAgBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOG;AAFU;;;AADK;;;AADD;;;AADR;;;;AAAA;;;AAKN;;;AAAA;;;;;;;;AAAA;;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAPH;AAAA;AAeA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOG;AAFU;;;AADK;;;AADD;;;AADR;;;;AAAA;;;AAKN;;;AAAA;;;;;;;;AAAA;;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAPH;AAAA;AAeA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOU;AAFG;;;AADK;;;AADD;;;AADP;;;;AAAA;;;AAKA;AACgE;;;;;;;AADhE;;;;;;;;;;;;;AAAA;;;;AAAA;;;AAAA;;;AAGa;;;AAAb;AAAP;AAGW;;;AACX;AAdH;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 8"
    },
    "7": {
      "op": "bytecblock \"TEST\" \"TST\" 0x151f7c75 0x6d4700ad"
    },
    "28": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "30": {
      "op": "bz main___algopy_default_create@11",
      "stack_out": []
    },
    "33": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "35": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "36": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "37": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "39": {
      "op": "assert",
      "stack_out": []
    },
    "40": {
      "op": "pushbytess 0x0ab53563 0xea6a6ade 0x2381ff80 0x00b50f1c // method \"test_call_with_txn(byte[],byte[],uint64)void\", method \"test_call_with_acfg(byte[],byte[],uint64)void\", method \"test_call_with_infer(byte[],byte[],uint64)void\", method \"test_call_with_acfg_no_return(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)"
      ],
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)"
      ]
    },
    "62": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "tmp%6#0"
      ]
    },
    "65": {
      "op": "match test_call_with_txn test_call_with_acfg test_call_with_infer test_call_with_acfg_no_return",
      "stack_out": []
    },
    "75": {
      "op": "err"
    },
    "76": {
      "block": "main___algopy_default_create@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "78": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "79": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "81": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "82": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "83": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "assert // OnCompletion must be NoOp && can only call when creating",
      "stack_out": []
    },
    "84": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "85": {
      "op": "return",
      "stack_out": []
    },
    "86": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]",
      "params": {},
      "block": "test_call_with_txn",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "89": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "90": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "91": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "92": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "93": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "94": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "96": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "97": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "98": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "99": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "102": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "103": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "104": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%array_length%1#0"
      ]
    },
    "105": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "106": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "107": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "109": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "110": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "111": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "112": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "115": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "116": {
      "op": "len",
      "defined_out": [
        "len%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "117": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "len%2#0",
        "8"
      ]
    },
    "118": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "119": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "120": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "121": {
      "op": "itxn_begin"
    },
    "122": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "1"
      ]
    },
    "123": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "125": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "126": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "128": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "\"TST\""
      ]
    },
    "129": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "131": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "acfg"
      ]
    },
    "133": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "135": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "0"
      ]
    },
    "136": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "138": {
      "op": "itxn_next"
    },
    "139": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "141": {
      "op": "pushbytes 0xa1f5040d // method \"call_with_txn(byte[],txn,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ]
    },
    "147": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "149": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "150": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "152": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "154": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "156": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "158": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "159": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "161": {
      "op": "itxn_submit"
    },
    "162": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "165": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "166": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "169": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "170": {
      "op": "len",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "len%0#0"
      ]
    },
    "171": {
      "op": "intc_3 // 8",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "len%0#0",
        "8"
      ]
    },
    "172": {
      "op": "==",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0",
        "eq%0#0"
      ]
    },
    "173": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "174": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "awst_tmp%0#0"
      ]
    },
    "175": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#1"
      ]
    },
    "178": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#1",
        "0x151f7c75"
      ]
    },
    "179": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#1"
      ]
    },
    "180": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "181": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "182": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "183": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "184": {
      "op": "return",
      "stack_out": []
    },
    "185": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]",
      "params": {},
      "block": "test_call_with_acfg",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "188": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "189": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "190": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "191": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "192": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "193": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "195": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "196": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "197": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "201": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "202": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "203": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%array_length%1#0"
      ]
    },
    "204": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "205": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "206": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "208": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "209": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "210": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "211": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "214": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "215": {
      "op": "len",
      "defined_out": [
        "len%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "216": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "len%2#0",
        "8"
      ]
    },
    "217": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "218": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "219": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "220": {
      "op": "itxn_begin"
    },
    "221": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "1"
      ]
    },
    "222": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "224": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "225": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "227": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "\"TST\""
      ]
    },
    "228": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "230": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "acfg"
      ]
    },
    "232": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "234": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "0"
      ]
    },
    "235": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "237": {
      "op": "itxn_next"
    },
    "238": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "240": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "241": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "243": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "244": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "246": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "248": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "250": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "252": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "253": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "255": {
      "op": "itxn_submit"
    },
    "256": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "259": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "260": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "263": {
      "op": "len",
      "stack_out": [
        "awst_tmp%0#0",
        "len%0#0"
      ]
    },
    "264": {
      "op": "intc_3 // 8",
      "stack_out": [
        "awst_tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "265": {
      "op": "==",
      "stack_out": [
        "awst_tmp%0#0",
        "eq%0#0"
      ]
    },
    "266": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "267": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "270": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "0x151f7c75"
      ]
    },
    "271": {
      "op": "==",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "272": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "273": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "274": {
      "op": "return",
      "stack_out": []
    },
    "275": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]",
      "params": {},
      "block": "test_call_with_infer",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "278": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "279": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "280": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "281": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "282": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "283": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "285": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "286": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "287": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "288": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "291": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "292": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "293": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%array_length%1#0"
      ]
    },
    "294": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "295": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "296": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "298": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "299": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "300": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "301": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "304": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "305": {
      "op": "len",
      "defined_out": [
        "len%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "306": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "len%2#0",
        "8"
      ]
    },
    "307": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "308": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "309": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "310": {
      "op": "itxn_begin"
    },
    "311": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "1"
      ]
    },
    "312": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "314": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "315": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "317": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "\"TST\""
      ]
    },
    "318": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "320": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "acfg"
      ]
    },
    "322": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "324": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "0"
      ]
    },
    "325": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "327": {
      "op": "itxn_next"
    },
    "328": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "330": {
      "op": "bytec_3 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "331": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "333": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "334": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "336": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "338": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "340": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "342": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "343": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "345": {
      "op": "itxn_submit"
    },
    "346": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "349": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "350": {
      "op": "extract 4 0",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "353": {
      "op": "len",
      "stack_out": [
        "awst_tmp%0#0",
        "len%0#0"
      ]
    },
    "354": {
      "op": "intc_3 // 8",
      "stack_out": [
        "awst_tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "355": {
      "op": "==",
      "stack_out": [
        "awst_tmp%0#0",
        "eq%0#0"
      ]
    },
    "356": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "357": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "360": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1",
        "0x151f7c75"
      ]
    },
    "361": {
      "op": "==",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "362": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "363": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "364": {
      "op": "return",
      "stack_out": []
    },
    "365": {
      "subroutine": "test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]",
      "params": {},
      "block": "test_call_with_acfg_no_return",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "368": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "369": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "370": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "371": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "372": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "373": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "375": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "376": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "377": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "378": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "381": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "382": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "383": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%array_length%1#0"
      ]
    },
    "384": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "385": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "386": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "388": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "389": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "390": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "391": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "394": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "395": {
      "op": "len",
      "defined_out": [
        "len%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "396": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "len%2#0",
        "8"
      ]
    },
    "397": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "398": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "399": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "400": {
      "op": "itxn_begin"
    },
    "401": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "1"
      ]
    },
    "402": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "404": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "405": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "407": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "\"TST\""
      ]
    },
    "408": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "410": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "acfg"
      ]
    },
    "412": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "414": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "0"
      ]
    },
    "415": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "417": {
      "op": "itxn_next"
    },
    "418": {
      "op": "pushbytes 0x31",
      "defined_out": [
        "0x31",
        "app#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0",
        "0x31"
      ]
    },
    "421": {
      "op": "itxn_field Note",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "app#0"
      ]
    },
    "423": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "425": {
      "op": "pushbytes 0xc840077d // method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "431": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "433": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "tmp%0#0"
      ]
    },
    "434": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "436": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "438": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "440": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "442": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "443": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "445": {
      "op": "itxn_submit"
    },
    "446": {
      "op": "itxn Note",
      "defined_out": [
        "txn1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0"
      ]
    },
    "448": {
      "op": "pushbytes 0x31",
      "stack_out": [
        "txn1.Note#0",
        "0x31"
      ]
    },
    "451": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "452": {
      "op": "assert",
      "stack_out": []
    },
    "453": {
      "op": "gitxn 0 CreatedAssetID",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "456": {
      "error": "expected asset to be created",
      "op": "assert // expected asset to be created",
      "stack_out": []
    },
    "457": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "458": {
      "op": "return",
      "stack_out": []
    }
  }
}