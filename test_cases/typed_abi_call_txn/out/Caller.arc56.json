{
    "name": "Caller",
    "structs": {},
    "methods": [
        {
            "name": "test_call_with_txn",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_with_acfg",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_with_infer",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_with_acfg_no_return",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        36
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        83
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        178,
                        268,
                        356
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        180
                    ],
                    "errorMessage": "expected asset id"
                },
                {
                    "pc": [
                        448
                    ],
                    "errorMessage": "expected asset to be created"
                },
                {
                    "pc": [
                        96,
                        109,
                        193,
                        206,
                        281,
                        294,
                        369,
                        382
                    ],
                    "errorMessage": "invalid number of bytes for (len+uint8[])"
                },
                {
                    "pc": [
                        117,
                        171,
                        214,
                        262,
                        302,
                        350,
                        390
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAIIASYEBFRFU1QDVFNUBBUffHUEbUcArTEbQQArMRkURDEYRIIEBAq1NWME6mpq3gQjgf+ABAC1Dxw2GgCOBAAJAGoAwgEaADEZFDEYFBBDNhoBSSJZIwhLARUSRDYaAkkiWSMISwEVEkQ2GgNJFSQSRBexJbIiKLImKbIlgQOyECKyAbayGIAEofUEDbIaTLIashqBBrIQIrIBs7cBPklXBABJFSQSRExXAAQqEkQXQzYaAUkiWSMISwEVEkQ2GgJJIlkjCEsBFRJENhoDSRUkEkQXsSWyIiiyJimyJYEDshAisgG2shgrshpMshqyGoEGshAisgGztwE+SVcEABUkEkRXAAQqEkM2GgFJIlkjCEsBFRJENhoCSSJZIwhLARUSRDYaA0kVJBJEF7ElsiIosiYpsiWBA7IQIrIBtrIYK7IaTLIashqBBrIQIrIBs7cBPklXBAAVJBJEVwAEKhJDNhoBSSJZIwhLARUSRDYaAkkiWSMISwEVEkQ2GgNJFSQSRBexJbIiKLImKbIlgQOyECKyAbaAATGyBbIYgATIQAd9shpMshqyGoEGshAisgGztAWAATESRLcAPEM=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}