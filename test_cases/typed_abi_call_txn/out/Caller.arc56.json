{
    "name": "Caller",
    "structs": {},
    "methods": [
        {
            "name": "test_call_with_txn",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_with_acfg",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_with_infer",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_with_acfg_no_return",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        36
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        83
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        180,
                        272,
                        362
                    ],
                    "errorMessage": "application log value is not the result of an ABI return"
                },
                {
                    "pc": [
                        182
                    ],
                    "errorMessage": "expected asset id"
                },
                {
                    "pc": [
                        456
                    ],
                    "errorMessage": "expected asset to be created"
                },
                {
                    "pc": [
                        91,
                        104,
                        190,
                        203,
                        280,
                        293,
                        370,
                        383
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        98,
                        111,
                        197,
                        210,
                        287,
                        300,
                        377,
                        390
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        119,
                        173,
                        218,
                        266,
                        308,
                        356,
                        398
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAECCCYEBFRFU1QDVFNUBBUffHUEbUcArTEbQQArMRkURDEYRIIEBAq1NWME6mpq3gQjgf+ABAC1Dxw2GgCOBAALAG4AyAEiADEZFDEYFBBEI0M2GgFJIlkkCEsBFRJENhoCSSJZJAhLARUSRDYaA0kVJRJEF7EjsiIosiYpsiWBA7IQIrIBtrIYgASh9QQNshpMshqyGoEGshAisgGztwE+SVcEAEkVJRJETFcABCoSRBdEI0M2GgFJIlkkCEsBFRJENhoCSSJZJAhLARUSRDYaA0kVJRJEF7EjsiIosiYpsiWBA7IQIrIBtrIYK7IaTLIashqBBrIQIrIBs7cBPklXBAAVJRJEVwAEKhJEI0M2GgFJIlkkCEsBFRJENhoCSSJZJAhLARUSRDYaA0kVJRJEF7EjsiIosiYpsiWBA7IQIrIBtrIYK7IaTLIashqBBrIQIrIBs7cBPklXBAAVJRJEVwAEKhJEI0M2GgFJIlkkCEsBFRJENhoCSSJZJAhLARUSRDYaA0kVJRJEF7EjsiIosiYpsiWBA7IQIrIBtoABMbIFshiABMhAB32yGkyyGrIagQayECKyAbO0BYABMRJEtwA8RCND",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}