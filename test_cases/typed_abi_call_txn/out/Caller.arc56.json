{
    "name": "Caller",
    "structs": {},
    "methods": [
        {
            "name": "test_call_with_txn",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "application",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_with_acfg",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "application",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_with_infer",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "application",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "test_call_with_acfg_no_return",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "application",
                    "name": "app"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        278,
                        349,
                        418
                    ],
                    "errorMessage": "ARC4 prefix is valid"
                },
                {
                    "pc": [
                        73,
                        103,
                        133,
                        163
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        198
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        76,
                        106,
                        136,
                        166
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        280
                    ],
                    "errorMessage": "expected asset id"
                },
                {
                    "pc": [
                        499
                    ],
                    "errorMessage": "expected asset to be created"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEDBiYEBFRFU1QDVFNUBBUffHUEbUcArTEbQQCdggQEKEweYQSqM8G6BE+WBxoEuwCYojYaAI4EAFwAPgAgAAIiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXwDKIAUIjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXwDKIAN8jQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXwDKIAHwjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXwDKIAA0jQzEZQP+BMRgURCNDigMAsSOyIiiyJimyJSSyECKyAbaL/RUWVwYCi/1Qi/4VFlcGAov+UIv/shiABKH1BA2yGkyyGrIaJbIQIrIBs7cBPklXBABMVwAEKhJEF0SJigMAsSOyIiiyJimyJSSyECKyAbaL/RUWVwYCi/1Qi/4VFlcGAov+UIv/shgrshpMshqyGiWyECKyAbO3AT5XAAQqEkSJigMAsSOyIiiyJimyJSSyECKyAbaL/RUWVwYCi/1Qi/4VFlcGAov+UIv/shgrshpMshqyGiWyECKyAbO3AT5XAAQqEkSJigMAsSOyIiiyJimyJSSyECKyAbaL/RUWVwYCi/1Qi/4VFlcGAov+UIABMbIFi/+yGIAEyEAHfbIaTLIasholshAisgGztAWAATESRLcAPESJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 99,
            "minor": 99,
            "patch": 99
        }
    },
    "events": [],
    "templateVariables": {}
}