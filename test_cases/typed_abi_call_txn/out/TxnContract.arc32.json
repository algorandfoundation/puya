{
    "hints": {
        "call_with_txn(byte[],txn,byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "call_with_acfg(byte[],acfg,byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "call_with_acfg_no_return(byte[],acfg,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnR5cGVkX2FiaV9jYWxsX3R4bi50eG5fY29udHJhY3QuVHhuQ29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbToKICAgIGNhbGxzdWIgX19wdXlhX2FyYzRfcm91dGVyX18KICAgIHJldHVybgoKCi8vIHRlc3RfY2FzZXMudHlwZWRfYWJpX2NhbGxfdHhuLnR4bl9jb250cmFjdC5UeG5Db250cmFjdC5fX3B1eWFfYXJjNF9yb3V0ZXJfXygpIC0+IHVpbnQ2NDoKX19wdXlhX2FyYzRfcm91dGVyX186CiAgICAvLyB0eXBlZF9hYmlfY2FsbF90eG4vdHhuX2NvbnRyYWN0LnB5OjExCiAgICAvLyBjbGFzcyBUeG5Db250cmFjdChBUkM0Q29udHJhY3QpOgogICAgcHJvdG8gMCAxCiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogX19wdXlhX2FyYzRfcm91dGVyX19fYmFyZV9yb3V0aW5nQDcKICAgIG1ldGhvZCAiY2FsbF93aXRoX3R4bihieXRlW10sdHhuLGJ5dGVbXSl1aW50NjQiCiAgICBtZXRob2QgImNhbGxfd2l0aF9hY2ZnKGJ5dGVbXSxhY2ZnLGJ5dGVbXSl1aW50NjQiCiAgICBtZXRob2QgImNhbGxfd2l0aF9hY2ZnX25vX3JldHVybihieXRlW10sYWNmZyxieXRlW10pdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIF9fcHV5YV9hcmM0X3JvdXRlcl9fX2NhbGxfd2l0aF90eG5fcm91dGVAMiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19jYWxsX3dpdGhfYWNmZ19yb3V0ZUAzIF9fcHV5YV9hcmM0X3JvdXRlcl9fX2NhbGxfd2l0aF9hY2ZnX25vX3JldHVybl9yb3V0ZUA0CiAgICBpbnQgMAogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19jYWxsX3dpdGhfdHhuX3JvdXRlQDI6CiAgICAvLyB0eXBlZF9hYmlfY2FsbF90eG4vdHhuX2NvbnRyYWN0LnB5OjEyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHR5cGVkX2FiaV9jYWxsX3R4bi90eG5fY29udHJhY3QucHk6MTEKICAgIC8vIGNsYXNzIFR4bkNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgLy8gdHlwZWRfYWJpX2NhbGxfdHhuL3R4bl9jb250cmFjdC5weToxMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGNhbGxfd2l0aF90eG4KICAgIGl0b2IKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2NhbGxfd2l0aF9hY2ZnX3JvdXRlQDM6CiAgICAvLyB0eXBlZF9hYmlfY2FsbF90eG4vdHhuX2NvbnRyYWN0LnB5OjIwCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHR5cGVkX2FiaV9jYWxsX3R4bi90eG5fY29udHJhY3QucHk6MTEKICAgIC8vIGNsYXNzIFR4bkNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgYWNmZwogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIGFjZmcKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICAvLyB0eXBlZF9hYmlfY2FsbF90eG4vdHhuX2NvbnRyYWN0LnB5OjIwCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgY2FsbF93aXRoX2FjZmcKICAgIGl0b2IKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2NhbGxfd2l0aF9hY2ZnX25vX3JldHVybl9yb3V0ZUA0OgogICAgLy8gdHlwZWRfYWJpX2NhbGxfdHhuL3R4bl9jb250cmFjdC5weToyNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyB0eXBlZF9hYmlfY2FsbF90eG4vdHhuX2NvbnRyYWN0LnB5OjExCiAgICAvLyBjbGFzcyBUeG5Db250cmFjdChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50IGFjZmcKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBhY2ZnCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgLy8gdHlwZWRfYWJpX2NhbGxfdHhuL3R4bl9jb250cmFjdC5weToyNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGNhbGxfd2l0aF9hY2ZnX25vX3JldHVybgogICAgaW50IDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fYmFyZV9yb3V0aW5nQDc6CiAgICAvLyB0eXBlZF9hYmlfY2FsbF90eG4vdHhuX2NvbnRyYWN0LnB5OjExCiAgICAvLyBjbGFzcyBUeG5Db250cmFjdChBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IF9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTEKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIGludCAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTE6CiAgICAvLyB0eXBlZF9hYmlfY2FsbF90eG4vdHhuX2NvbnRyYWN0LnB5OjExCiAgICAvLyBjbGFzcyBUeG5Db250cmFjdChBUkM0Q29udHJhY3QpOgogICAgaW50IDAKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHlwZWRfYWJpX2NhbGxfdHhuLnR4bl9jb250cmFjdC5UeG5Db250cmFjdC5jYWxsX3dpdGhfdHhuKGE6IGJ5dGVzLCBhY2ZnOiB1aW50NjQsIGI6IGJ5dGVzKSAtPiB1aW50NjQ6CmNhbGxfd2l0aF90eG46CiAgICAvLyB0eXBlZF9hYmlfY2FsbF90eG4vdHhuX2NvbnRyYWN0LnB5OjEyLTEzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBjYWxsX3dpdGhfdHhuKHNlbGYsIGE6IEJ5dGVzLCBhY2ZnOiBndHhuLlRyYW5zYWN0aW9uLCBiOiBCeXRlcykgLT4gVUludDY0OgogICAgcHJvdG8gMyAxCiAgICAvLyB0eXBlZF9hYmlfY2FsbF90eG4vdHhuX2NvbnRyYWN0LnB5OjE0CiAgICAvLyBhc3NlcnQgYSA9PSBiImEiLCAiYSBpcyBub3QgYSIKICAgIGZyYW1lX2RpZyAtMwogICAgYnl0ZSAweDYxCiAgICA9PQogICAgYXNzZXJ0IC8vIGEgaXMgbm90IGEKICAgIC8vIHR5cGVkX2FiaV9jYWxsX3R4bi90eG5fY29udHJhY3QucHk6MTUKICAgIC8vIGFzc2VydCBiID09IGIiYiIsICJiIGlzIG5vdCBiIgogICAgZnJhbWVfZGlnIC0xCiAgICBieXRlIDB4NjIKICAgID09CiAgICBhc3NlcnQgLy8gYiBpcyBub3QgYgogICAgLy8gdHlwZWRfYWJpX2NhbGxfdHhuL3R4bl9jb250cmFjdC5weToxNgogICAgLy8gYXNzZXJ0IGFjZmcudHlwZSA9PSBUcmFuc2FjdGlvblR5cGUuQXNzZXRDb25maWcsICJleHBlY3RlZCBhc3NldCBjb25maWciCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgYWNmZwogICAgPT0KICAgIGFzc2VydCAvLyBleHBlY3RlZCBhc3NldCBjb25maWcKICAgIC8vIHR5cGVkX2FiaV9jYWxsX3R4bi90eG5fY29udHJhY3QucHk6MTcKICAgIC8vIGFzc2VydCBhY2ZnLmNyZWF0ZWRfYXNzZXQuaWQsICJleHBlY3RlZCBhc3NldCBpZCIKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgQ3JlYXRlZEFzc2V0SUQKICAgIGR1cAogICAgYXNzZXJ0IC8vIGV4cGVjdGVkIGFzc2V0IGlkCiAgICAvLyB0eXBlZF9hYmlfY2FsbF90eG4vdHhuX2NvbnRyYWN0LnB5OjE4CiAgICAvLyByZXR1cm4gYWNmZy5jcmVhdGVkX2Fzc2V0LmlkCiAgICByZXRzdWIKCgovLyB0ZXN0X2Nhc2VzLnR5cGVkX2FiaV9jYWxsX3R4bi50eG5fY29udHJhY3QuVHhuQ29udHJhY3QuY2FsbF93aXRoX2FjZmcoYTogYnl0ZXMsIGFjZmc6IHVpbnQ2NCwgYjogYnl0ZXMpIC0+IHVpbnQ2NDoKY2FsbF93aXRoX2FjZmc6CiAgICAvLyB0eXBlZF9hYmlfY2FsbF90eG4vdHhuX2NvbnRyYWN0LnB5OjIwLTIxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBjYWxsX3dpdGhfYWNmZyhzZWxmLCBhOiBCeXRlcywgYWNmZzogZ3R4bi5Bc3NldENvbmZpZ1RyYW5zYWN0aW9uLCBiOiBCeXRlcykgLT4gVUludDY0OgogICAgcHJvdG8gMyAxCiAgICAvLyB0eXBlZF9hYmlfY2FsbF90eG4vdHhuX2NvbnRyYWN0LnB5OjIyCiAgICAvLyBhc3NlcnQgYSA9PSBiImEiLCAiYSBpcyBub3QgYSIKICAgIGZyYW1lX2RpZyAtMwogICAgYnl0ZSAweDYxCiAgICA9PQogICAgYXNzZXJ0IC8vIGEgaXMgbm90IGEKICAgIC8vIHR5cGVkX2FiaV9jYWxsX3R4bi90eG5fY29udHJhY3QucHk6MjMKICAgIC8vIGFzc2VydCBiID09IGIiYiIsICJiIGlzIG5vdCBiIgogICAgZnJhbWVfZGlnIC0xCiAgICBieXRlIDB4NjIKICAgID09CiAgICBhc3NlcnQgLy8gYiBpcyBub3QgYgogICAgLy8gdHlwZWRfYWJpX2NhbGxfdHhuL3R4bl9jb250cmFjdC5weToyNAogICAgLy8gYXNzZXJ0IGFjZmcuY3JlYXRlZF9hc3NldC5pZCwgImV4cGVjdGVkIGFzc2V0IGlkIgogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBDcmVhdGVkQXNzZXRJRAogICAgZHVwCiAgICBhc3NlcnQgLy8gZXhwZWN0ZWQgYXNzZXQgaWQKICAgIC8vIHR5cGVkX2FiaV9jYWxsX3R4bi90eG5fY29udHJhY3QucHk6MjUKICAgIC8vIHJldHVybiBhY2ZnLmNyZWF0ZWRfYXNzZXQuaWQKICAgIHJldHN1YgoKCi8vIHRlc3RfY2FzZXMudHlwZWRfYWJpX2NhbGxfdHhuLnR4bl9jb250cmFjdC5UeG5Db250cmFjdC5jYWxsX3dpdGhfYWNmZ19ub19yZXR1cm4oYTogYnl0ZXMsIGFjZmc6IHVpbnQ2NCwgYjogYnl0ZXMpIC0+IHZvaWQ6CmNhbGxfd2l0aF9hY2ZnX25vX3JldHVybjoKICAgIC8vIHR5cGVkX2FiaV9jYWxsX3R4bi90eG5fY29udHJhY3QucHk6MjctMzAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGNhbGxfd2l0aF9hY2ZnX25vX3JldHVybigKICAgIC8vICAgICBzZWxmLCBhOiBCeXRlcywgYWNmZzogZ3R4bi5Bc3NldENvbmZpZ1RyYW5zYWN0aW9uLCBiOiBCeXRlcwogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMyAwCiAgICAvLyB0eXBlZF9hYmlfY2FsbF90eG4vdHhuX2NvbnRyYWN0LnB5OjMxCiAgICAvLyBhc3NlcnQgYSA9PSBiImEiLCAiYSBpcyBub3QgYSIKICAgIGZyYW1lX2RpZyAtMwogICAgYnl0ZSAweDYxCiAgICA9PQogICAgYXNzZXJ0IC8vIGEgaXMgbm90IGEKICAgIC8vIHR5cGVkX2FiaV9jYWxsX3R4bi90eG5fY29udHJhY3QucHk6MzIKICAgIC8vIGFzc2VydCBiID09IGIiYiIsICJiIGlzIG5vdCBiIgogICAgZnJhbWVfZGlnIC0xCiAgICBieXRlIDB4NjIKICAgID09CiAgICBhc3NlcnQgLy8gYiBpcyBub3QgYgogICAgLy8gdHlwZWRfYWJpX2NhbGxfdHhuL3R4bl9jb250cmFjdC5weTozMwogICAgLy8gYXNzZXJ0IGFjZmcuY3JlYXRlZF9hc3NldC5pZCwgImV4cGVjdGVkIGFzc2V0IGlkIgogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBDcmVhdGVkQXNzZXRJRAogICAgYXNzZXJ0IC8vIGV4cGVjdGVkIGFzc2V0IGlkCiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLnR5cGVkX2FiaV9jYWxsX3R4bi50eG5fY29udHJhY3QuVHhuQ29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "TxnContract",
        "methods": [
            {
                "name": "call_with_txn",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "txn",
                        "name": "acfg"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "call_with_acfg",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "acfg",
                        "name": "acfg"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "call_with_acfg_no_return",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "acfg",
                        "name": "acfg"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}