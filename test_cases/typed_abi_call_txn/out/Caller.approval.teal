#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 3 6
    bytecblock "TEST" "TST" 0x151f7c75 0x6d4700ad
    // typed_abi_call_txn/caller.py:14
    // class Caller(ARC4Contract):
    txn NumAppArgs
    bz main___algopy_default_create@12
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    assert
    pushbytess 0x0ab53563 0xea6a6ade 0x2381ff80 0x00b50f1c // method "test_call_with_txn(byte[],byte[],uint64)void", method "test_call_with_acfg(byte[],byte[],uint64)void", method "test_call_with_infer(byte[],byte[],uint64)void", method "test_call_with_acfg_no_return(byte[],byte[],uint64)void"
    txna ApplicationArgs 0
    match test_call_with_txn test_call_with_acfg test_call_with_infer test_call_with_acfg_no_return
    err

main___algopy_default_create@12:
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]() -> void:
test_call_with_txn:
    // typed_abi_call_txn/caller.py:15
    // @arc4.abimethod
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    // typed_abi_call_txn/caller.py:22-28
    // asset_id, _txn = arc4.abi_call(
    //     TxnContract.call_with_txn,
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call_txn/caller.py:20
    // total=1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // typed_abi_call_txn/caller.py:19
    // asset_name="TEST",
    bytec_0 // "TEST"
    itxn_field ConfigAssetName
    // typed_abi_call_txn/caller.py:18
    // unit_name="TST",
    bytec_1 // "TST"
    itxn_field ConfigAssetUnitName
    // typed_abi_call_txn/caller.py:17
    // txn = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // typed_abi_call_txn/caller.py:22-28
    // asset_id, _txn = arc4.abi_call(
    //     TxnContract.call_with_txn,
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_next
    itxn_field ApplicationID
    pushbytes 0xa1f5040d // method "call_with_txn(byte[],txn,byte[])uint64"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 1 LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_2 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    btoi
    // typed_abi_call_txn/caller.py:15
    // @arc4.abimethod
    return // on error: expected asset id


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]() -> void:
test_call_with_acfg:
    // typed_abi_call_txn/caller.py:31
    // @arc4.abimethod
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    // typed_abi_call_txn/caller.py:38-44
    // arc4.abi_call(
    //     TxnContract.call_with_acfg,
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call_txn/caller.py:36
    // total=1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // typed_abi_call_txn/caller.py:35
    // asset_name="TEST",
    bytec_0 // "TEST"
    itxn_field ConfigAssetName
    // typed_abi_call_txn/caller.py:34
    // unit_name="TST",
    bytec_1 // "TST"
    itxn_field ConfigAssetUnitName
    // typed_abi_call_txn/caller.py:33
    // txn = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // typed_abi_call_txn/caller.py:38-44
    // arc4.abi_call(
    //     TxnContract.call_with_acfg,
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_next
    itxn_field ApplicationID
    bytec_3 // method "call_with_acfg(byte[],acfg,byte[])uint64"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 1 LastLog
    extract 0 4
    bytec_2 // 0x151f7c75
    ==
    // typed_abi_call_txn/caller.py:31
    // @arc4.abimethod
    return // on error: application log value is not the result of an ABI return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]() -> void:
test_call_with_infer:
    // typed_abi_call_txn/caller.py:46
    // @arc4.abimethod
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    // typed_abi_call_txn/caller.py:53-59
    // arc4.abi_call[UInt64](
    //     "call_with_acfg",
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_begin
    // typed_abi_call_txn/caller.py:51
    // total=1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // typed_abi_call_txn/caller.py:50
    // asset_name="TEST",
    bytec_0 // "TEST"
    itxn_field ConfigAssetName
    // typed_abi_call_txn/caller.py:49
    // unit_name="TST",
    bytec_1 // "TST"
    itxn_field ConfigAssetUnitName
    // typed_abi_call_txn/caller.py:48
    // txn = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // typed_abi_call_txn/caller.py:53-59
    // arc4.abi_call[UInt64](
    //     "call_with_acfg",
    //     a,
    //     txn,
    //     b,
    //     app_id=app,
    // )
    itxn_next
    itxn_field ApplicationID
    bytec_3 // method "call_with_acfg(byte[],acfg,byte[])uint64"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 1 LastLog
    extract 0 4
    bytec_2 // 0x151f7c75
    ==
    // typed_abi_call_txn/caller.py:46
    // @arc4.abimethod
    return // on error: application log value is not the result of an ABI return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]() -> void:
test_call_with_acfg_no_return:
    // typed_abi_call_txn/caller.py:61
    // @arc4.abimethod
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    // typed_abi_call_txn/caller.py:68-70
    // txn1 = arc4.abi_call(
    //     TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
    // )
    itxn_begin
    // typed_abi_call_txn/caller.py:66
    // total=1,
    intc_1 // 1
    itxn_field ConfigAssetTotal
    // typed_abi_call_txn/caller.py:65
    // asset_name="TEST",
    bytec_0 // "TEST"
    itxn_field ConfigAssetName
    // typed_abi_call_txn/caller.py:64
    // unit_name="TST",
    bytec_1 // "TST"
    itxn_field ConfigAssetUnitName
    // typed_abi_call_txn/caller.py:63
    // acfg = itxn.AssetConfig(
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // typed_abi_call_txn/caller.py:68-70
    // txn1 = arc4.abi_call(
    //     TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
    // )
    itxn_next
    // typed_abi_call_txn/caller.py:69
    // TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
    pushbytes 0x31
    itxn_field Note
    itxn_field ApplicationID
    // typed_abi_call_txn/caller.py:68-70
    // txn1 = arc4.abi_call(
    //     TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
    // )
    pushbytes 0xc840077d // method "call_with_acfg_no_return(byte[],acfg,byte[])void"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn Note
    // typed_abi_call_txn/caller.py:71
    // assert txn1.note == b"1"
    pushbytes 0x31
    ==
    assert
    // typed_abi_call_txn/caller.py:74
    // asset_id = op.GITxn.created_asset_id(0)
    gitxn 0 CreatedAssetID
    // typed_abi_call_txn/caller.py:61
    // @arc4.abimethod
    return // on error: expected asset to be created
