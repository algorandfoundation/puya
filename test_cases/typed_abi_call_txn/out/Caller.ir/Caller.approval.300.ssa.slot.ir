main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: bool = (txn ApplicationID)
        let tmp%1#0: bool = (! tmp%0#1)
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: uint64 = (shl tmp%2#0 1u)
        let tmp%4#0: uint64 = (+ tmp%1#0 tmp%3#0)
        goto_nth [block@2, block@9, block@22, block@22, block@22, block@22, block@22, block@22, block@22, block@22, block@22, block@22][tmp%4#0] else goto block@22
    block@2: // switch_case_0_L14
        let tmp%5#0: bytes = (txna ApplicationArgs 0)
        switch tmp%5#0 {method "test_call_with_txn(byte[],byte[],uint64)void" => block@3, method "test_call_with_acfg(byte[],byte[],uint64)void" => block@4, method "test_call_with_infer(byte[],byte[],uint64)void" => block@5, method "test_call_with_acfg_no_return(byte[],byte[],uint64)void" => block@6, * => block@8}
    block@3: // test_call_with_txn_route_L15
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]()
        goto block@8
    block@4: // test_call_with_acfg_route_L31
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]()
        goto block@8
    block@5: // test_call_with_infer_route_L46
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]()
        goto block@8
    block@6: // test_call_with_acfg_no_return_route_L61
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]()
        goto block@8
    block@8: // switch_case_next_L14
        fail // this contract does not implement the given ABI method for call NoOp
    block@9: // switch_case_1_L14
        let tmp%6#0: uint64 = (txn NumAppArgs)
        let tmp%7#0: bool = (! tmp%6#0)
        (assert tmp%7#0) // this contract does not implement the given ABI method for create NoOp
        exit 1u
    block@22: // switch_case_default_L14
        fail // The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]() -> void:
    block@0: // L15
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_txn(byte[],txn,byte[])uint64")
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%0#0)
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%2#1: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let asset_id#0: uint64 = (btoi tmp%2#1)
        (assert asset_id#0) // expected asset id
        exit 1u

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]() -> void:
    block@0: // L31
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg(byte[],acfg,byte[])uint64")
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%0#0)
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        exit 1u

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]() -> void:
    block@0: // L46
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg(byte[],acfg,byte[])uint64")
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%0#0)
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%3#0: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#0 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        exit 1u

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]() -> void:
    block@0: // L61
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field Note) 0x31)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg_no_return(byte[],acfg,byte[])void")
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%0#0)
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn1.Note#0: bytes = (itxn Note)
        let tmp%2#1: bool = (== txn1.Note#0 0x31)
        (assert tmp%2#1)
        let asset_id#0: uint64 = (gitxn 0 CreatedAssetID)
        (assert asset_id#0) // expected asset to be created
        exit 1u