// Op                                                                                  Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    main_block@0:
        // typed_abi_call_txn/caller.py:14
        // class Caller(ARC4Contract):
        txn NumAppArgs                                                                 tmp%0#1
        l-load tmp%0#1 0                                                               tmp%0#1
        bz main_bare_routing@18 ; b main_abi_routing@2

    main_abi_routing@2:
        // typed_abi_call_txn/caller.py:14
        // class Caller(ARC4Contract):
        txn OnCompletion                                                               tmp%3#0
        l-load tmp%3#0 0                                                               tmp%3#0
        !                                                                              tmp%4#0
        l-load tmp%4#0 0                                                               tmp%4#0
        assert // OnCompletion is not NoOp
        txn ApplicationID                                                              tmp%6#0
        l-load tmp%6#0 0                                                               tmp%6#0
        assert
        txna ApplicationArgs 0                                                         tmp%7#0
        method test_call_with_txn(byte[],byte[],uint64)void                            tmp%7#0,Method(test_call_with_txn(byte[],byte[],uint64)void)
        method test_call_with_acfg(byte[],byte[],uint64)void                           tmp%7#0,Method(test_call_with_txn(byte[],byte[],uint64)void),Method(test_call_with_acfg(byte[],byte[],uint64)void)
        method test_call_with_infer(byte[],byte[],uint64)void                          tmp%7#0,Method(test_call_with_txn(byte[],byte[],uint64)void),Method(test_call_with_acfg(byte[],byte[],uint64)void),Method(test_call_with_infer(byte[],byte[],uint64)void)
        method test_call_with_acfg_no_return(byte[],byte[],uint64)void                 tmp%7#0,Method(test_call_with_txn(byte[],byte[],uint64)void),Method(test_call_with_acfg(byte[],byte[],uint64)void),Method(test_call_with_infer(byte[],byte[],uint64)void),Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)
        l-load tmp%7#0 4                                                               Method(test_call_with_txn(byte[],byte[],uint64)void),Method(test_call_with_acfg(byte[],byte[],uint64)void),Method(test_call_with_infer(byte[],byte[],uint64)void),Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void),tmp%7#0
        match main_test_call_with_txn_route@6 main_test_call_with_acfg_route@7 main_test_call_with_infer_route@8 main_test_call_with_acfg_no_return_route@9 ; b main_switch_case_default@10 

    main_test_call_with_txn_route@6:
        // typed_abi_call_txn/caller.py:15
        // @arc4.abimethod
        callsub test_call_with_txn
        err

    main_test_call_with_acfg_route@7:
        // typed_abi_call_txn/caller.py:31
        // @arc4.abimethod
        callsub test_call_with_acfg
        err

    main_test_call_with_infer_route@8:
        // typed_abi_call_txn/caller.py:46
        // @arc4.abimethod
        callsub test_call_with_infer
        err

    main_test_call_with_acfg_no_return_route@9:
        // typed_abi_call_txn/caller.py:61
        // @arc4.abimethod
        callsub test_call_with_acfg_no_return
        err

    main_switch_case_default@10:
        err

    main_bare_routing@18:
        // typed_abi_call_txn/caller.py:14
        // class Caller(ARC4Contract):
        txn OnCompletion                                                               tmp%9#0
        l-load tmp%9#0 0                                                               tmp%9#0
        !                                                                              not%tmp%9#0
        l-load not%tmp%9#0 0                                                           not%tmp%9#0
        assert
        txn ApplicationID                                                              tmp%10#0
        l-load tmp%10#0 0                                                              tmp%10#0
        !                                                                              tmp%11#0
        l-load tmp%11#0 0                                                              tmp%11#0
        assert // can only call when creating
        int 1                                                                          1
        return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]() -> void:
subroutine test_call_with_txn:
    test_call_with_txn_block@0:
        // typed_abi_call_txn/caller.py:15
        // @arc4.abimethod
        txna ApplicationArgs 1                                                         reinterpret_Encoded(len+uint8[])%0#0
        txna ApplicationArgs 2                                                         reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0
        txna ApplicationArgs 3                                                         reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,reinterpret_Encoded(uint64)%0#0
        l-load reinterpret_Encoded(uint64)%0#0 0                                       reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,reinterpret_Encoded(uint64)%0#0
        btoi                                                                           reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:22-28
        // asset_id, _txn = arc4.abi_call(
        //     TxnContract.call_with_txn,
        //     a,
        //     txn,
        //     b,
        //     app_id=app,
        // )
        itxn_begin                                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:20
        // total=1,
        int 1                                                                          reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,1
        itxn_field ConfigAssetTotal                                                    reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:19
        // asset_name="TEST",
        byte "TEST"                                                                    reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,"TEST"
        itxn_field ConfigAssetName                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:18
        // unit_name="TST",
        byte "TST"                                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,"TST"
        itxn_field ConfigAssetUnitName                                                 reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:17
        // txn = itxn.AssetConfig(
        int acfg                                                                       reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,acfg
        itxn_field TypeEnum                                                            reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        int 0                                                                          reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,0
        itxn_field Fee                                                                 reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:22-28
        // asset_id, _txn = arc4.abi_call(
        //     TxnContract.call_with_txn,
        //     a,
        //     txn,
        //     b,
        //     app_id=app,
        // )
        itxn_next                                                                      reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        l-load app#0 0                                                                 reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        itxn_field ApplicationID                                                       reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0
        method call_with_txn(byte[],txn,byte[])uint64                                  reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,Method(call_with_txn(byte[],txn,byte[])uint64)
        itxn_field ApplicationArgs                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0
        l-load reinterpret_Encoded(len+uint8[])%0#0 1                                  reinterpret_Encoded(len+uint8[])%1#0,reinterpret_Encoded(len+uint8[])%0#0
        itxn_field ApplicationArgs                                                     reinterpret_Encoded(len+uint8[])%1#0
        l-load reinterpret_Encoded(len+uint8[])%1#0 0                                  reinterpret_Encoded(len+uint8[])%1#0
        itxn_field ApplicationArgs
        int appl                                                                       appl
        itxn_field TypeEnum
        int 0                                                                          0
        itxn_field Fee
        itxn_submit
        gitxn 1 LastLog                                                                awst_tmp%0#0
        l-load-copy awst_tmp%0#0 0                                                     awst_tmp%0#0,awst_tmp%0#0 (copy)
        extract 4 0                                                                    awst_tmp%0#0,tmp%2#1
        l-load awst_tmp%0#0 1                                                          tmp%2#1,awst_tmp%0#0
        extract 0 4                                                                    tmp%2#1,tmp%3#0
        l-load tmp%3#0 0                                                               tmp%2#1,tmp%3#0
        byte 0x151f7c75                                                                tmp%2#1,tmp%3#0,0x151f7c75
        ==                                                                             tmp%2#1,tmp%4#0
        l-load tmp%4#0 0                                                               tmp%2#1,tmp%4#0
        assert // application log value is not the result of an ABI return             tmp%2#1
        l-load tmp%2#1 0                                                               tmp%2#1
        btoi                                                                           asset_id#0
        // typed_abi_call_txn/caller.py:29
        // assert asset_id, "expected asset id"
        l-load asset_id#0 0                                                            asset_id#0
        assert // expected asset id
        // typed_abi_call_txn/caller.py:15
        // @arc4.abimethod
        int 1                                                                          1
        return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]() -> void:
subroutine test_call_with_acfg:
    test_call_with_acfg_block@0:
        // typed_abi_call_txn/caller.py:31
        // @arc4.abimethod
        txna ApplicationArgs 1                                                         reinterpret_Encoded(len+uint8[])%0#0
        txna ApplicationArgs 2                                                         reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0
        txna ApplicationArgs 3                                                         reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,reinterpret_Encoded(uint64)%0#0
        l-load reinterpret_Encoded(uint64)%0#0 0                                       reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,reinterpret_Encoded(uint64)%0#0
        btoi                                                                           reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:38-44
        // arc4.abi_call(
        //     TxnContract.call_with_acfg,
        //     a,
        //     txn,
        //     b,
        //     app_id=app,
        // )
        itxn_begin                                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:36
        // total=1,
        int 1                                                                          reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,1
        itxn_field ConfigAssetTotal                                                    reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:35
        // asset_name="TEST",
        byte "TEST"                                                                    reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,"TEST"
        itxn_field ConfigAssetName                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:34
        // unit_name="TST",
        byte "TST"                                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,"TST"
        itxn_field ConfigAssetUnitName                                                 reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:33
        // txn = itxn.AssetConfig(
        int acfg                                                                       reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,acfg
        itxn_field TypeEnum                                                            reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        int 0                                                                          reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,0
        itxn_field Fee                                                                 reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:38-44
        // arc4.abi_call(
        //     TxnContract.call_with_acfg,
        //     a,
        //     txn,
        //     b,
        //     app_id=app,
        // )
        itxn_next                                                                      reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        l-load app#0 0                                                                 reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        itxn_field ApplicationID                                                       reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0
        method call_with_acfg(byte[],acfg,byte[])uint64                                reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,Method(call_with_acfg(byte[],acfg,byte[])uint64)
        itxn_field ApplicationArgs                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0
        l-load reinterpret_Encoded(len+uint8[])%0#0 1                                  reinterpret_Encoded(len+uint8[])%1#0,reinterpret_Encoded(len+uint8[])%0#0
        itxn_field ApplicationArgs                                                     reinterpret_Encoded(len+uint8[])%1#0
        l-load reinterpret_Encoded(len+uint8[])%1#0 0                                  reinterpret_Encoded(len+uint8[])%1#0
        itxn_field ApplicationArgs
        int appl                                                                       appl
        itxn_field TypeEnum
        int 0                                                                          0
        itxn_field Fee
        itxn_submit
        gitxn 1 LastLog                                                                awst_tmp%0#0
        l-load awst_tmp%0#0 0                                                          awst_tmp%0#0
        extract 0 4                                                                    tmp%3#0
        l-load tmp%3#0 0                                                               tmp%3#0
        byte 0x151f7c75                                                                tmp%3#0,0x151f7c75
        ==                                                                             tmp%4#0
        l-load tmp%4#0 0                                                               tmp%4#0
        assert // application log value is not the result of an ABI return
        // typed_abi_call_txn/caller.py:31
        // @arc4.abimethod
        int 1                                                                          1
        return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]() -> void:
subroutine test_call_with_infer:
    test_call_with_infer_block@0:
        // typed_abi_call_txn/caller.py:46
        // @arc4.abimethod
        txna ApplicationArgs 1                                                         reinterpret_Encoded(len+uint8[])%0#0
        txna ApplicationArgs 2                                                         reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0
        txna ApplicationArgs 3                                                         reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,reinterpret_Encoded(uint64)%0#0
        l-load reinterpret_Encoded(uint64)%0#0 0                                       reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,reinterpret_Encoded(uint64)%0#0
        btoi                                                                           reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:53-59
        // arc4.abi_call[UInt64](
        //     "call_with_acfg",
        //     a,
        //     txn,
        //     b,
        //     app_id=app,
        // )
        itxn_begin                                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:51
        // total=1,
        int 1                                                                          reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,1
        itxn_field ConfigAssetTotal                                                    reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:50
        // asset_name="TEST",
        byte "TEST"                                                                    reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,"TEST"
        itxn_field ConfigAssetName                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:49
        // unit_name="TST",
        byte "TST"                                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,"TST"
        itxn_field ConfigAssetUnitName                                                 reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:48
        // txn = itxn.AssetConfig(
        int acfg                                                                       reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,acfg
        itxn_field TypeEnum                                                            reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        int 0                                                                          reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,0
        itxn_field Fee                                                                 reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:53-59
        // arc4.abi_call[UInt64](
        //     "call_with_acfg",
        //     a,
        //     txn,
        //     b,
        //     app_id=app,
        // )
        itxn_next                                                                      reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        l-load app#0 0                                                                 reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        itxn_field ApplicationID                                                       reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0
        method call_with_acfg(byte[],acfg,byte[])uint64                                reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,Method(call_with_acfg(byte[],acfg,byte[])uint64)
        itxn_field ApplicationArgs                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0
        l-load reinterpret_Encoded(len+uint8[])%0#0 1                                  reinterpret_Encoded(len+uint8[])%1#0,reinterpret_Encoded(len+uint8[])%0#0
        itxn_field ApplicationArgs                                                     reinterpret_Encoded(len+uint8[])%1#0
        l-load reinterpret_Encoded(len+uint8[])%1#0 0                                  reinterpret_Encoded(len+uint8[])%1#0
        itxn_field ApplicationArgs
        int appl                                                                       appl
        itxn_field TypeEnum
        int 0                                                                          0
        itxn_field Fee
        itxn_submit
        gitxn 1 LastLog                                                                awst_tmp%0#0
        l-load awst_tmp%0#0 0                                                          awst_tmp%0#0
        extract 0 4                                                                    tmp%3#0
        l-load tmp%3#0 0                                                               tmp%3#0
        byte 0x151f7c75                                                                tmp%3#0,0x151f7c75
        ==                                                                             tmp%4#0
        l-load tmp%4#0 0                                                               tmp%4#0
        assert // application log value is not the result of an ABI return
        // typed_abi_call_txn/caller.py:46
        // @arc4.abimethod
        int 1                                                                          1
        return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]() -> void:
subroutine test_call_with_acfg_no_return:
    test_call_with_acfg_no_return_block@0:
        // typed_abi_call_txn/caller.py:61
        // @arc4.abimethod
        txna ApplicationArgs 1                                                         reinterpret_Encoded(len+uint8[])%0#0
        txna ApplicationArgs 2                                                         reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0
        txna ApplicationArgs 3                                                         reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,reinterpret_Encoded(uint64)%0#0
        l-load reinterpret_Encoded(uint64)%0#0 0                                       reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,reinterpret_Encoded(uint64)%0#0
        btoi                                                                           reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:68-70
        // txn1 = arc4.abi_call(
        //     TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
        // )
        itxn_begin                                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:66
        // total=1,
        int 1                                                                          reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,1
        itxn_field ConfigAssetTotal                                                    reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:65
        // asset_name="TEST",
        byte "TEST"                                                                    reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,"TEST"
        itxn_field ConfigAssetName                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:64
        // unit_name="TST",
        byte "TST"                                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,"TST"
        itxn_field ConfigAssetUnitName                                                 reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:63
        // acfg = itxn.AssetConfig(
        int acfg                                                                       reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,acfg
        itxn_field TypeEnum                                                            reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        int 0                                                                          reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,0
        itxn_field Fee                                                                 reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:68-70
        // txn1 = arc4.abi_call(
        //     TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
        // )
        itxn_next                                                                      reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        // typed_abi_call_txn/caller.py:69
        // TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
        byte 0x31                                                                      reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0,0x31
        itxn_field Note                                                                reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        l-load app#0 0                                                                 reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,app#0
        itxn_field ApplicationID                                                       reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0
        // typed_abi_call_txn/caller.py:68-70
        // txn1 = arc4.abi_call(
        //     TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
        // )
        method call_with_acfg_no_return(byte[],acfg,byte[])void                        reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0,Method(call_with_acfg_no_return(byte[],acfg,byte[])void)
        itxn_field ApplicationArgs                                                     reinterpret_Encoded(len+uint8[])%0#0,reinterpret_Encoded(len+uint8[])%1#0
        l-load reinterpret_Encoded(len+uint8[])%0#0 1                                  reinterpret_Encoded(len+uint8[])%1#0,reinterpret_Encoded(len+uint8[])%0#0
        itxn_field ApplicationArgs                                                     reinterpret_Encoded(len+uint8[])%1#0
        l-load reinterpret_Encoded(len+uint8[])%1#0 0                                  reinterpret_Encoded(len+uint8[])%1#0
        itxn_field ApplicationArgs
        int appl                                                                       appl
        itxn_field TypeEnum
        int 0                                                                          0
        itxn_field Fee
        itxn_submit
        itxn Note                                                                      txn1.Note#0
        // typed_abi_call_txn/caller.py:71
        // assert txn1.note == b"1"
        l-load txn1.Note#0 0                                                           txn1.Note#0
        byte 0x31                                                                      txn1.Note#0,0x31
        ==                                                                             tmp%2#1
        l-load tmp%2#1 0                                                               tmp%2#1
        assert
        // typed_abi_call_txn/caller.py:74
        // asset_id = op.GITxn.created_asset_id(0)
        gitxn 0 CreatedAssetID                                                         asset_id#0
        // typed_abi_call_txn/caller.py:75
        // assert asset_id, "expected asset to be created"
        l-load asset_id#0 0                                                            asset_id#0
        assert // expected asset to be created
        // typed_abi_call_txn/caller.py:61
        // @arc4.abimethod
        int 1                                                                          1
        return


