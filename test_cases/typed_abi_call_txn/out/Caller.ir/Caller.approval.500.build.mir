// Op                                                                                  Stack (out)
// algopy.arc4.ARC4Contract.approval_program() -> uint64:
subroutine main:
    block@0:
        // typed_abi_call_txn/caller.py:14
        // class Caller(ARC4Contract):
        txn NumAppArgs                                                                 tmp%0#1
        v-store tmp%0#1
        v-load tmp%0#1                                                                 tmp%0#1
        bz __algopy_default_create@12 ; b abi_routing@2

    abi_routing@2:
        // typed_abi_call_txn/caller.py:14
        // class Caller(ARC4Contract):
        txn OnCompletion                                                               tmp%2#0
        v-store tmp%2#0
        v-load tmp%2#0                                                                 tmp%2#0
        !                                                                              tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                 tmp%3#0
        assert // OnCompletion must be NoOp
        txn ApplicationID                                                              tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                 tmp%4#0
        assert
        txna ApplicationArgs 0                                                         tmp%6#0
        v-store tmp%6#0
        method test_call_with_txn(byte[],byte[],uint64)void                            Method(test_call_with_txn(byte[],byte[],uint64)void)
        method test_call_with_acfg(byte[],byte[],uint64)void                           Method(test_call_with_txn(byte[],byte[],uint64)void),Method(test_call_with_acfg(byte[],byte[],uint64)void)
        method test_call_with_infer(byte[],byte[],uint64)void                          Method(test_call_with_txn(byte[],byte[],uint64)void),Method(test_call_with_acfg(byte[],byte[],uint64)void),Method(test_call_with_infer(byte[],byte[],uint64)void)
        method test_call_with_acfg_no_return(byte[],byte[],uint64)void                 Method(test_call_with_txn(byte[],byte[],uint64)void),Method(test_call_with_acfg(byte[],byte[],uint64)void),Method(test_call_with_infer(byte[],byte[],uint64)void),Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)
        v-load tmp%6#0                                                                 Method(test_call_with_txn(byte[],byte[],uint64)void),Method(test_call_with_acfg(byte[],byte[],uint64)void),Method(test_call_with_infer(byte[],byte[],uint64)void),Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void),tmp%6#0
        match test_call_with_txn_route@4 test_call_with_acfg_route@5 test_call_with_infer_route@6 test_call_with_acfg_no_return_route@7 ; b after_if_else@11 

    test_call_with_txn_route@4:
        // typed_abi_call_txn/caller.py:15
        // @arc4.abimethod
        callsub test_call_with_txn
        b after_if_else@11

    test_call_with_acfg_route@5:
        // typed_abi_call_txn/caller.py:31
        // @arc4.abimethod
        callsub test_call_with_acfg
        b after_if_else@11

    test_call_with_infer_route@6:
        // typed_abi_call_txn/caller.py:46
        // @arc4.abimethod
        callsub test_call_with_infer
        b after_if_else@11

    test_call_with_acfg_no_return_route@7:
        // typed_abi_call_txn/caller.py:61
        // @arc4.abimethod
        callsub test_call_with_acfg_no_return
        b after_if_else@11

    after_if_else@11:
        // typed_abi_call_txn/caller.py:14
        // class Caller(ARC4Contract):
        err

    __algopy_default_create@12:
        txn OnCompletion                                                               tmp%7#0
        v-store tmp%7#0
        v-load tmp%7#0                                                                 tmp%7#0
        !                                                                              tmp%8#0
        v-store tmp%8#0
        txn ApplicationID                                                              tmp%9#0
        v-store tmp%9#0
        v-load tmp%9#0                                                                 tmp%9#0
        !                                                                              tmp%10#0
        v-store tmp%10#0
        v-load tmp%8#0                                                                 tmp%8#0
        v-load tmp%10#0                                                                tmp%8#0,tmp%10#0
        &&                                                                             tmp%11#0
        v-store tmp%11#0
        v-load tmp%11#0                                                                tmp%11#0
        assert // OnCompletion must be NoOp && can only call when creating
        int 1                                                                          1
        return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]() -> void:
subroutine test_call_with_txn:
    test_call_with_txn_block@0:
        // typed_abi_call_txn/caller.py:15
        // @arc4.abimethod
        txna ApplicationArgs 1                                                         reinterpret_Encoded(len+uint8[])%0#0
        v-store reinterpret_Encoded(len+uint8[])%0#0
        txna ApplicationArgs 2                                                         reinterpret_Encoded(len+uint8[])%1#0
        v-store reinterpret_Encoded(len+uint8[])%1#0
        txna ApplicationArgs 3                                                         reinterpret_Encoded(uint64)%0#0
        v-store reinterpret_Encoded(uint64)%0#0
        v-load reinterpret_Encoded(uint64)%0#0                                         reinterpret_Encoded(uint64)%0#0
        btoi                                                                           app#0
        v-store app#0
        // typed_abi_call_txn/caller.py:22-28
        // asset_id, _txn = arc4.abi_call(
        //     TxnContract.call_with_txn,
        //     a,
        //     txn,
        //     b,
        //     app_id=app,
        // )
        itxn_begin
        // typed_abi_call_txn/caller.py:20
        // total=1,
        int 1                                                                          1
        itxn_field ConfigAssetTotal
        // typed_abi_call_txn/caller.py:19
        // asset_name="TEST",
        byte "TEST"                                                                    "TEST"
        itxn_field ConfigAssetName
        // typed_abi_call_txn/caller.py:18
        // unit_name="TST",
        byte "TST"                                                                     "TST"
        itxn_field ConfigAssetUnitName
        // typed_abi_call_txn/caller.py:17
        // txn = itxn.AssetConfig(
        int acfg                                                                       acfg
        itxn_field TypeEnum
        int 0                                                                          0
        itxn_field Fee
        // typed_abi_call_txn/caller.py:22-28
        // asset_id, _txn = arc4.abi_call(
        //     TxnContract.call_with_txn,
        //     a,
        //     txn,
        //     b,
        //     app_id=app,
        // )
        itxn_next
        v-load app#0                                                                   app#0
        itxn_field ApplicationID
        method call_with_txn(byte[],txn,byte[])uint64                                  Method(call_with_txn(byte[],txn,byte[])uint64)
        itxn_field ApplicationArgs
        v-load reinterpret_Encoded(len+uint8[])%0#0                                    reinterpret_Encoded(len+uint8[])%0#0
        itxn_field ApplicationArgs
        v-load reinterpret_Encoded(len+uint8[])%1#0                                    reinterpret_Encoded(len+uint8[])%1#0
        itxn_field ApplicationArgs
        int appl                                                                       appl
        itxn_field TypeEnum
        int 0                                                                          0
        itxn_field Fee
        itxn_submit
        gitxn 1 LastLog                                                                awst_tmp%0#0
        v-store awst_tmp%0#0
        v-load awst_tmp%0#0                                                            awst_tmp%0#0
        extract 4 0                                                                    tmp%2#1
        v-store tmp%2#1
        v-load awst_tmp%0#0                                                            awst_tmp%0#0
        extract 0 4                                                                    tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                 tmp%3#0
        byte 0x151f7c75                                                                tmp%3#0,0x151f7c75
        ==                                                                             tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                 tmp%4#0
        assert // application log value is not the result of an ABI return
        v-load tmp%2#1                                                                 tmp%2#1
        btoi                                                                           asset_id#0
        v-store asset_id#0
        // typed_abi_call_txn/caller.py:29
        // assert asset_id, "expected asset id"
        v-load asset_id#0                                                              asset_id#0
        assert // expected asset id
        // typed_abi_call_txn/caller.py:15
        // @arc4.abimethod
        int 1                                                                          1
        return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]() -> void:
subroutine test_call_with_acfg:
    test_call_with_acfg_block@0:
        // typed_abi_call_txn/caller.py:31
        // @arc4.abimethod
        txna ApplicationArgs 1                                                         reinterpret_Encoded(len+uint8[])%0#0
        v-store reinterpret_Encoded(len+uint8[])%0#0
        txna ApplicationArgs 2                                                         reinterpret_Encoded(len+uint8[])%1#0
        v-store reinterpret_Encoded(len+uint8[])%1#0
        txna ApplicationArgs 3                                                         reinterpret_Encoded(uint64)%0#0
        v-store reinterpret_Encoded(uint64)%0#0
        v-load reinterpret_Encoded(uint64)%0#0                                         reinterpret_Encoded(uint64)%0#0
        btoi                                                                           app#0
        v-store app#0
        // typed_abi_call_txn/caller.py:38-44
        // arc4.abi_call(
        //     TxnContract.call_with_acfg,
        //     a,
        //     txn,
        //     b,
        //     app_id=app,
        // )
        itxn_begin
        // typed_abi_call_txn/caller.py:36
        // total=1,
        int 1                                                                          1
        itxn_field ConfigAssetTotal
        // typed_abi_call_txn/caller.py:35
        // asset_name="TEST",
        byte "TEST"                                                                    "TEST"
        itxn_field ConfigAssetName
        // typed_abi_call_txn/caller.py:34
        // unit_name="TST",
        byte "TST"                                                                     "TST"
        itxn_field ConfigAssetUnitName
        // typed_abi_call_txn/caller.py:33
        // txn = itxn.AssetConfig(
        int acfg                                                                       acfg
        itxn_field TypeEnum
        int 0                                                                          0
        itxn_field Fee
        // typed_abi_call_txn/caller.py:38-44
        // arc4.abi_call(
        //     TxnContract.call_with_acfg,
        //     a,
        //     txn,
        //     b,
        //     app_id=app,
        // )
        itxn_next
        v-load app#0                                                                   app#0
        itxn_field ApplicationID
        method call_with_acfg(byte[],acfg,byte[])uint64                                Method(call_with_acfg(byte[],acfg,byte[])uint64)
        itxn_field ApplicationArgs
        v-load reinterpret_Encoded(len+uint8[])%0#0                                    reinterpret_Encoded(len+uint8[])%0#0
        itxn_field ApplicationArgs
        v-load reinterpret_Encoded(len+uint8[])%1#0                                    reinterpret_Encoded(len+uint8[])%1#0
        itxn_field ApplicationArgs
        int appl                                                                       appl
        itxn_field TypeEnum
        int 0                                                                          0
        itxn_field Fee
        itxn_submit
        gitxn 1 LastLog                                                                awst_tmp%0#0
        v-store awst_tmp%0#0
        v-load awst_tmp%0#0                                                            awst_tmp%0#0
        extract 0 4                                                                    tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                 tmp%3#0
        byte 0x151f7c75                                                                tmp%3#0,0x151f7c75
        ==                                                                             tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                 tmp%4#0
        assert // application log value is not the result of an ABI return
        // typed_abi_call_txn/caller.py:31
        // @arc4.abimethod
        int 1                                                                          1
        return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]() -> void:
subroutine test_call_with_infer:
    test_call_with_infer_block@0:
        // typed_abi_call_txn/caller.py:46
        // @arc4.abimethod
        txna ApplicationArgs 1                                                         reinterpret_Encoded(len+uint8[])%0#0
        v-store reinterpret_Encoded(len+uint8[])%0#0
        txna ApplicationArgs 2                                                         reinterpret_Encoded(len+uint8[])%1#0
        v-store reinterpret_Encoded(len+uint8[])%1#0
        txna ApplicationArgs 3                                                         reinterpret_Encoded(uint64)%0#0
        v-store reinterpret_Encoded(uint64)%0#0
        v-load reinterpret_Encoded(uint64)%0#0                                         reinterpret_Encoded(uint64)%0#0
        btoi                                                                           app#0
        v-store app#0
        // typed_abi_call_txn/caller.py:53-59
        // arc4.abi_call[UInt64](
        //     "call_with_acfg",
        //     a,
        //     txn,
        //     b,
        //     app_id=app,
        // )
        itxn_begin
        // typed_abi_call_txn/caller.py:51
        // total=1,
        int 1                                                                          1
        itxn_field ConfigAssetTotal
        // typed_abi_call_txn/caller.py:50
        // asset_name="TEST",
        byte "TEST"                                                                    "TEST"
        itxn_field ConfigAssetName
        // typed_abi_call_txn/caller.py:49
        // unit_name="TST",
        byte "TST"                                                                     "TST"
        itxn_field ConfigAssetUnitName
        // typed_abi_call_txn/caller.py:48
        // txn = itxn.AssetConfig(
        int acfg                                                                       acfg
        itxn_field TypeEnum
        int 0                                                                          0
        itxn_field Fee
        // typed_abi_call_txn/caller.py:53-59
        // arc4.abi_call[UInt64](
        //     "call_with_acfg",
        //     a,
        //     txn,
        //     b,
        //     app_id=app,
        // )
        itxn_next
        v-load app#0                                                                   app#0
        itxn_field ApplicationID
        method call_with_acfg(byte[],acfg,byte[])uint64                                Method(call_with_acfg(byte[],acfg,byte[])uint64)
        itxn_field ApplicationArgs
        v-load reinterpret_Encoded(len+uint8[])%0#0                                    reinterpret_Encoded(len+uint8[])%0#0
        itxn_field ApplicationArgs
        v-load reinterpret_Encoded(len+uint8[])%1#0                                    reinterpret_Encoded(len+uint8[])%1#0
        itxn_field ApplicationArgs
        int appl                                                                       appl
        itxn_field TypeEnum
        int 0                                                                          0
        itxn_field Fee
        itxn_submit
        gitxn 1 LastLog                                                                awst_tmp%0#0
        v-store awst_tmp%0#0
        v-load awst_tmp%0#0                                                            awst_tmp%0#0
        extract 0 4                                                                    tmp%3#0
        v-store tmp%3#0
        v-load tmp%3#0                                                                 tmp%3#0
        byte 0x151f7c75                                                                tmp%3#0,0x151f7c75
        ==                                                                             tmp%4#0
        v-store tmp%4#0
        v-load tmp%4#0                                                                 tmp%4#0
        assert // application log value is not the result of an ABI return
        // typed_abi_call_txn/caller.py:46
        // @arc4.abimethod
        int 1                                                                          1
        return


// test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]() -> void:
subroutine test_call_with_acfg_no_return:
    test_call_with_acfg_no_return_block@0:
        // typed_abi_call_txn/caller.py:61
        // @arc4.abimethod
        txna ApplicationArgs 1                                                         reinterpret_Encoded(len+uint8[])%0#0
        v-store reinterpret_Encoded(len+uint8[])%0#0
        txna ApplicationArgs 2                                                         reinterpret_Encoded(len+uint8[])%1#0
        v-store reinterpret_Encoded(len+uint8[])%1#0
        txna ApplicationArgs 3                                                         reinterpret_Encoded(uint64)%0#0
        v-store reinterpret_Encoded(uint64)%0#0
        v-load reinterpret_Encoded(uint64)%0#0                                         reinterpret_Encoded(uint64)%0#0
        btoi                                                                           app#0
        v-store app#0
        // typed_abi_call_txn/caller.py:68-70
        // txn1 = arc4.abi_call(
        //     TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
        // )
        itxn_begin
        // typed_abi_call_txn/caller.py:66
        // total=1,
        int 1                                                                          1
        itxn_field ConfigAssetTotal
        // typed_abi_call_txn/caller.py:65
        // asset_name="TEST",
        byte "TEST"                                                                    "TEST"
        itxn_field ConfigAssetName
        // typed_abi_call_txn/caller.py:64
        // unit_name="TST",
        byte "TST"                                                                     "TST"
        itxn_field ConfigAssetUnitName
        // typed_abi_call_txn/caller.py:63
        // acfg = itxn.AssetConfig(
        int acfg                                                                       acfg
        itxn_field TypeEnum
        int 0                                                                          0
        itxn_field Fee
        // typed_abi_call_txn/caller.py:68-70
        // txn1 = arc4.abi_call(
        //     TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
        // )
        itxn_next
        // typed_abi_call_txn/caller.py:69
        // TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
        byte 0x31                                                                      0x31
        itxn_field Note
        v-load app#0                                                                   app#0
        itxn_field ApplicationID
        // typed_abi_call_txn/caller.py:68-70
        // txn1 = arc4.abi_call(
        //     TxnContract.call_with_acfg_no_return, a, acfg, b, app_id=app, note=b"1"
        // )
        method call_with_acfg_no_return(byte[],acfg,byte[])void                        Method(call_with_acfg_no_return(byte[],acfg,byte[])void)
        itxn_field ApplicationArgs
        v-load reinterpret_Encoded(len+uint8[])%0#0                                    reinterpret_Encoded(len+uint8[])%0#0
        itxn_field ApplicationArgs
        v-load reinterpret_Encoded(len+uint8[])%1#0                                    reinterpret_Encoded(len+uint8[])%1#0
        itxn_field ApplicationArgs
        int appl                                                                       appl
        itxn_field TypeEnum
        int 0                                                                          0
        itxn_field Fee
        itxn_submit
        itxn Note                                                                      txn1.Note#0
        v-store txn1.Note#0
        // typed_abi_call_txn/caller.py:71
        // assert txn1.note == b"1"
        v-load txn1.Note#0                                                             txn1.Note#0
        byte 0x31                                                                      txn1.Note#0,0x31
        ==                                                                             tmp%2#1
        v-store tmp%2#1
        v-load tmp%2#1                                                                 tmp%2#1
        assert
        // typed_abi_call_txn/caller.py:74
        // asset_id = op.GITxn.created_asset_id(0)
        gitxn 0 CreatedAssetID                                                         asset_id#0
        v-store asset_id#0
        // typed_abi_call_txn/caller.py:75
        // assert asset_id, "expected asset to be created"
        v-load asset_id#0                                                              asset_id#0
        assert // expected asset to be created
        // typed_abi_call_txn/caller.py:61
        // @arc4.abimethod
        int 1                                                                          1
        return


