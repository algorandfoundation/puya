main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@11
    block@2: // abi_routing_L14
        let tmp%2#0: uint64 = (txn OnCompletion)
        let tmp%3#0: bool = (! tmp%2#0)
        (assert tmp%3#0) // OnCompletion must be NoOp
        let tmp%4#0: uint64 = (txn ApplicationID)
        (assert tmp%4#0)
        let tmp%6#0: bytes = (txna ApplicationArgs 0)
        switch tmp%6#0 {method "test_call_with_txn(byte[],byte[],uint64)void" => block@4, method "test_call_with_acfg(byte[],byte[],uint64)void" => block@5, method "test_call_with_infer(byte[],byte[],uint64)void" => block@6, method "test_call_with_acfg_no_return(byte[],byte[],uint64)void" => block@7, * => block@10}
    block@4: // test_call_with_txn_route_L15
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]()
        goto block@10
    block@5: // test_call_with_acfg_route_L31
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]()
        goto block@10
    block@6: // test_call_with_infer_route_L46
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]()
        goto block@10
    block@7: // test_call_with_acfg_no_return_route_L61
        test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]()
        goto block@10
    block@10: // after_if_else_L14
        fail
    block@11: // __algopy_default_create_L1
        let tmp%7#0: uint64 = (txn OnCompletion)
        let tmp%8#0: bool = (! tmp%7#0)
        let tmp%9#0: uint64 = (txn ApplicationID)
        let tmp%10#0: bool = (! tmp%9#0)
        let tmp%11#0: bool = (&& tmp%8#0 tmp%10#0)
        (assert tmp%11#0) // OnCompletion must be NoOp && can only call when creating
        exit 1u

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_txn[routing]() -> void:
    block@0: // L15
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint8[])
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let length%1#0: uint64 = array_len(tmp%2#0)
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for (len+uint8[])
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%4#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_txn(byte[],txn,byte[])uint64")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%2#1: bytes = ((extract 4 0) awst_tmp%0#0)
        let len%0#1: uint64 = (len tmp%2#1)
        let eq%0#1: bool = (== len%0#1 8u)
        (assert eq%0#1) // invalid number of bytes for uint64
        let tmp%3#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#1: bool = (== tmp%3#1 0x151f7c75)
        (assert tmp%4#1) // application log value is not the result of an ABI return
        let asset_id#0: uint64 = decode_bytes<uint64>(tmp%2#1)
        (assert asset_id#0) // expected asset id
        exit 1u

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg[routing]() -> void:
    block@0: // L31
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint8[])
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let length%1#0: uint64 = array_len(tmp%2#0)
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for (len+uint8[])
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%4#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg(byte[],acfg,byte[])uint64")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%2#1: bytes = ((extract 4 0) awst_tmp%0#0)
        let len%0#1: uint64 = (len tmp%2#1)
        let eq%0#1: bool = (== len%0#1 8u)
        (assert eq%0#1) // invalid number of bytes for uint64
        let tmp%3#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#1: bool = (== tmp%3#1 0x151f7c75)
        (assert tmp%4#1) // application log value is not the result of an ABI return
        exit 1u

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_infer[routing]() -> void:
    block@0: // L46
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint8[])
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let length%1#0: uint64 = array_len(tmp%2#0)
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for (len+uint8[])
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%4#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg(byte[],acfg,byte[])uint64")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%2#1: bytes = ((extract 4 0) awst_tmp%0#0)
        let len%0#1: uint64 = (len tmp%2#1)
        let eq%0#1: bool = (== len%0#1 8u)
        (assert eq%0#1) // invalid number of bytes for uint64
        let tmp%3#1: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#1: bool = (== tmp%3#1 0x151f7c75)
        (assert tmp%4#1) // application log value is not the result of an ABI return
        exit 1u

subroutine test_cases.typed_abi_call_txn.caller.Caller.test_call_with_acfg_no_return[routing]() -> void:
    block@0: // L61
        let tmp%0#0: bytes = (txna ApplicationArgs 1)
        let length%0#0: uint64 = array_len(tmp%0#0)
        let add%0#0: uint64 = (+ length%0#0 2u)
        let len%0#0: uint64 = (len tmp%0#0)
        let eq%0#0: bool = (== len%0#0 add%0#0)
        (assert eq%0#0) // invalid number of bytes for (len+uint8[])
        let tmp%2#0: bytes = (txna ApplicationArgs 2)
        let length%1#0: uint64 = array_len(tmp%2#0)
        let add%1#0: uint64 = (+ length%1#0 2u)
        let len%1#0: uint64 = (len tmp%2#0)
        let eq%1#0: bool = (== len%1#0 add%1#0)
        (assert eq%1#0) // invalid number of bytes for (len+uint8[])
        let tmp%4#0: bytes = (txna ApplicationArgs 3)
        let len%2#0: uint64 = (len tmp%4#0)
        let eq%2#0: bool = (== len%2#0 8u)
        (assert eq%2#0) // invalid number of bytes for uint64
        let app#0: uint64 = decode_bytes<uint64>(tmp%4#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field Note) 0x31)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg_no_return(byte[],acfg,byte[])void")
        ((itxn_field ApplicationArgs) tmp%0#0)
        ((itxn_field ApplicationArgs) tmp%2#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn1.Note#0: bytes = (itxn Note)
        let tmp%2#1: bool = (== txn1.Note#0 0x31)
        (assert tmp%2#1)
        let asset_id#0: uint64 = (gitxn 0 CreatedAssetID)
        (assert asset_id#0) // expected asset to be created
        exit 1u