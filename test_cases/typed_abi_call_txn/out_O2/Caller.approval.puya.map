{
  "version": 3,
  "sources": [
    "../caller.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AA+CK;;AAAA;AAAA;AAAA;;AAAA;AA/CL;;;AAAA;;;AAAA;;;AAAA;AAsDe;AAFG;;;AADK;;;AADD;;;AADP;;;AAAA;;;AAKA;AACgE;;;;;AADhE;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAGa;AAAb;AAAP;AAGW;;;AACX;AAdH;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAhCL;;;AAAA;;;AAAA;;;AAAA;AAuCQ;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKN;;;AAAA;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAPH;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAjBL;;;AAAA;;;AAAA;;;AAAA;AAwBQ;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKN;;;AAAA;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAPH;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;AAQyB;AAFP;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKW;;;AAAA;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAOjB;AAdH;;AADL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 6"
    },
    "7": {
      "op": "bytecblock \"TEST\" \"TST\" 0x151f7c75 0x31 0x6d4700ad"
    },
    "30": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "32": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "35": {
      "op": "pushbytess 0x0ab53563 0xea6a6ade 0x2381ff80 0x00b50f1c // method \"test_call_with_txn(byte[],byte[],uint64)void\", method \"test_call_with_acfg(byte[],byte[],uint64)void\", method \"test_call_with_infer(byte[],byte[],uint64)void\", method \"test_call_with_acfg_no_return(byte[],byte[],uint64)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)"
      ],
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)"
      ]
    },
    "57": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg(byte[],byte[],uint64)void)",
        "Method(test_call_with_infer(byte[],byte[],uint64)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],uint64)void)",
        "tmp%2#0"
      ]
    },
    "60": {
      "op": "match main_test_call_with_txn_route@3 main_test_call_with_acfg_route@4 main_test_call_with_infer_route@5 main_test_call_with_acfg_no_return_route@6",
      "stack_out": []
    },
    "70": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "71": {
      "op": "return",
      "stack_out": []
    },
    "72": {
      "block": "main_test_call_with_acfg_no_return_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "74": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "75": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "76": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "78": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "79": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0"
      ]
    },
    "82": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ]
    },
    "85": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "88": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "app#0"
      ]
    },
    "89": {
      "op": "itxn_begin"
    },
    "90": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "app#0",
        "1"
      ]
    },
    "91": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "app#0"
      ]
    },
    "93": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "94": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "app#0"
      ]
    },
    "96": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "app#0",
        "\"TST\""
      ]
    },
    "97": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "app#0"
      ]
    },
    "99": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "app#0",
        "acfg"
      ]
    },
    "100": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "app#0"
      ]
    },
    "102": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "app#0",
        "0"
      ]
    },
    "103": {
      "op": "itxn_field Fee",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "app#0"
      ]
    },
    "105": {
      "op": "itxn_next"
    },
    "106": {
      "op": "bytec_3 // 0x31",
      "defined_out": [
        "0x31",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "app#0",
        "0x31"
      ]
    },
    "107": {
      "op": "itxn_field Note",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "app#0"
      ]
    },
    "109": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ]
    },
    "111": {
      "op": "pushbytes 0xc840077d // method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "117": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%7#0",
        "reinterpret_Encoded(len+uint8[])%6#0"
      ]
    },
    "120": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%7#0"
      ]
    },
    "122": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "124": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "125": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "127": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "128": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "130": {
      "op": "itxn_submit"
    },
    "131": {
      "op": "itxn Note",
      "defined_out": [
        "txn1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0"
      ]
    },
    "133": {
      "op": "bytec_3 // 0x31",
      "stack_out": [
        "txn1.Note#0",
        "0x31"
      ]
    },
    "134": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "135": {
      "op": "assert",
      "stack_out": []
    },
    "136": {
      "op": "gitxn 0 CreatedAssetID",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "139": {
      "error": "expected asset to be created",
      "op": "assert // expected asset to be created",
      "stack_out": []
    },
    "140": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "141": {
      "op": "return",
      "stack_out": []
    },
    "142": {
      "block": "main_test_call_with_infer_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "144": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "145": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "146": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "148": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "149": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0"
      ]
    },
    "152": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ]
    },
    "155": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "158": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "app#0"
      ]
    },
    "159": {
      "op": "itxn_begin"
    },
    "160": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "app#0",
        "1"
      ]
    },
    "161": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "app#0"
      ]
    },
    "163": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "164": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "app#0"
      ]
    },
    "166": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "app#0",
        "\"TST\""
      ]
    },
    "167": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "app#0"
      ]
    },
    "169": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "app#0",
        "acfg"
      ]
    },
    "170": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "app#0"
      ]
    },
    "172": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "app#0",
        "0"
      ]
    },
    "173": {
      "op": "itxn_field Fee",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "app#0"
      ]
    },
    "175": {
      "op": "itxn_next"
    },
    "176": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ]
    },
    "178": {
      "op": "bytec 4 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "180": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ]
    },
    "182": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%5#0",
        "reinterpret_Encoded(len+uint8[])%4#0"
      ]
    },
    "183": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%5#0"
      ]
    },
    "185": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "187": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "188": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "190": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "191": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "193": {
      "op": "itxn_submit"
    },
    "194": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "197": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%3#2"
      ]
    },
    "200": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%3#2",
        "0x151f7c75"
      ]
    },
    "201": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "202": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "203": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "204": {
      "op": "return",
      "stack_out": []
    },
    "205": {
      "block": "main_test_call_with_acfg_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "207": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "208": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "209": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "211": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "212": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "215": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "218": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "221": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "app#0"
      ]
    },
    "222": {
      "op": "itxn_begin"
    },
    "223": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "app#0",
        "1"
      ]
    },
    "224": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "app#0"
      ]
    },
    "226": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "227": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "app#0"
      ]
    },
    "229": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "app#0",
        "\"TST\""
      ]
    },
    "230": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "app#0"
      ]
    },
    "232": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "app#0",
        "acfg"
      ]
    },
    "233": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "app#0"
      ]
    },
    "235": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "app#0",
        "0"
      ]
    },
    "236": {
      "op": "itxn_field Fee",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "app#0"
      ]
    },
    "238": {
      "op": "itxn_next"
    },
    "239": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "241": {
      "op": "bytec 4 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "243": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "245": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%3#0",
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "246": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "248": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "250": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "251": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "253": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "254": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "256": {
      "op": "itxn_submit"
    },
    "257": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "260": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%3#2"
      ]
    },
    "263": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%3#2",
        "0x151f7c75"
      ]
    },
    "264": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "265": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "266": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "267": {
      "op": "return",
      "stack_out": []
    },
    "268": {
      "block": "main_test_call_with_txn_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "270": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "271": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "272": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "274": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "275": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "278": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "281": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "284": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "285": {
      "op": "itxn_begin"
    },
    "286": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "1"
      ]
    },
    "287": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "289": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "290": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "292": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "\"TST\""
      ]
    },
    "293": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "295": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "acfg",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "acfg"
      ]
    },
    "296": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "298": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "app#0",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0",
        "0"
      ]
    },
    "299": {
      "op": "itxn_field Fee",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "app#0"
      ]
    },
    "301": {
      "op": "itxn_next"
    },
    "302": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "304": {
      "op": "pushbytes 0xa1f5040d // method \"call_with_txn(byte[],txn,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ]
    },
    "310": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "312": {
      "op": "swap",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "313": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "315": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "317": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "318": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "320": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "321": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "323": {
      "op": "itxn_submit"
    },
    "324": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "327": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "328": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%2#0"
      ]
    },
    "331": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "awst_tmp%0#0"
      ]
    },
    "332": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#2"
      ]
    },
    "335": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%2#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#2",
        "0x151f7c75"
      ]
    },
    "336": {
      "op": "==",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "337": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "338": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "339": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "340": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "341": {
      "op": "return",
      "stack_out": []
    },
    "342": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "344": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "347": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "349": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "350": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "351": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "352": {
      "op": "return",
      "stack_out": []
    }
  }
}