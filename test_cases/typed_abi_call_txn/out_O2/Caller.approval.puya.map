{
  "version": 3,
  "sources": [
    "../caller.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AA+CK;;AAAA;AAAA;AAAA;;AAAA;AA/CL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAsDe;AAFG;;;AADK;;;AADD;;;AADP;;;AAAA;;;AAKA;AACmC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAS;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAoB;;;;;;;AADhE;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;;;AAGa;AAAb;AAAP;AAGW;;;AACX;AAdH;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAhCL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAuCQ;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKN;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;;;AAJJ;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAPH;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAjBL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAwBQ;AAFU;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKN;AAEI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;;;AAJJ;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAPH;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAQyB;AAFP;;;AADK;;;AADD;;;AADR;;;AAAA;;;AAKW;AAEb;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAEA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;;;;AAJa;;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAOjB;AAdH;;AADL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 3 6"
    },
    "7": {
      "op": "bytecblock \"TEST\" \"TST\" 0x151f7c75 0x31 0x6d4700ad"
    },
    "30": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "32": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "35": {
      "op": "pushbytess 0x284c1e61 0xaa33c1ba 0x4f96071a 0xbb0098a2 // method \"test_call_with_txn(byte[],byte[],application)void\", method \"test_call_with_acfg(byte[],byte[],application)void\", method \"test_call_with_infer(byte[],byte[],application)void\", method \"test_call_with_acfg_no_return(byte[],byte[],application)void\"",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],application)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],application)void)",
        "Method(test_call_with_infer(byte[],byte[],application)void)",
        "Method(test_call_with_txn(byte[],byte[],application)void)"
      ],
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],application)void)",
        "Method(test_call_with_acfg(byte[],byte[],application)void)",
        "Method(test_call_with_infer(byte[],byte[],application)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],application)void)"
      ]
    },
    "57": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(test_call_with_acfg(byte[],byte[],application)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],application)void)",
        "Method(test_call_with_infer(byte[],byte[],application)void)",
        "Method(test_call_with_txn(byte[],byte[],application)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(test_call_with_txn(byte[],byte[],application)void)",
        "Method(test_call_with_acfg(byte[],byte[],application)void)",
        "Method(test_call_with_infer(byte[],byte[],application)void)",
        "Method(test_call_with_acfg_no_return(byte[],byte[],application)void)",
        "tmp%2#0"
      ]
    },
    "60": {
      "op": "match main_test_call_with_txn_route@3 main_test_call_with_acfg_route@4 main_test_call_with_infer_route@5 main_test_call_with_acfg_no_return_route@6",
      "stack_out": []
    },
    "70": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "71": {
      "op": "return",
      "stack_out": []
    },
    "72": {
      "block": "main_test_call_with_acfg_no_return_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "74": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "75": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "76": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "78": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "79": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%6#0"
      ]
    },
    "82": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "85": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ],
      "stack_out": [
        "a#0",
        "reinterpret_Encoded(len+uint8[])%7#0"
      ]
    },
    "88": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "91": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(uint8)%3#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(uint8)%3#0"
      ]
    },
    "94": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "tmp%33#0"
      ]
    },
    "95": {
      "op": "txnas Applications",
      "defined_out": [
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "97": {
      "op": "itxn_begin"
    },
    "98": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "1"
      ]
    },
    "99": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "101": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "102": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "104": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "\"TST\""
      ]
    },
    "105": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "107": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "a#0",
        "acfg",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "acfg"
      ]
    },
    "108": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "110": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "0"
      ]
    },
    "111": {
      "op": "itxn_field Fee",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "113": {
      "op": "itxn_next"
    },
    "114": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "a#0 (copy)"
      ]
    },
    "116": {
      "op": "len",
      "defined_out": [
        "a#0",
        "app#0",
        "b#0",
        "length%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "length%0#0"
      ]
    },
    "117": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "app#0",
        "as_bytes%0#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "as_bytes%0#0"
      ]
    },
    "118": {
      "op": "extract 6 2",
      "defined_out": [
        "a#0",
        "app#0",
        "b#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "length_uint16%0#0"
      ]
    },
    "121": {
      "op": "uncover 3",
      "stack_out": [
        "b#0",
        "app#0",
        "length_uint16%0#0",
        "a#0"
      ]
    },
    "123": {
      "op": "concat",
      "defined_out": [
        "app#0",
        "b#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0"
      ]
    },
    "124": {
      "op": "dig 2",
      "defined_out": [
        "app#0",
        "b#0",
        "b#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "b#0 (copy)"
      ]
    },
    "126": {
      "op": "len",
      "defined_out": [
        "app#0",
        "b#0",
        "encoded_value%0#0",
        "length%1#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "127": {
      "op": "itob",
      "defined_out": [
        "app#0",
        "as_bytes%1#0",
        "b#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "128": {
      "op": "extract 6 2",
      "defined_out": [
        "app#0",
        "b#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "131": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "b#0"
      ]
    },
    "133": {
      "op": "concat",
      "defined_out": [
        "app#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "app#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "134": {
      "op": "bytec_3 // 0x31",
      "defined_out": [
        "0x31",
        "app#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "app#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0x31"
      ]
    },
    "135": {
      "op": "itxn_field Note",
      "stack_out": [
        "app#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "137": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "app#0"
      ]
    },
    "139": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "141": {
      "op": "pushbytes 0xc840077d // method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "147": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "149": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0"
      ]
    },
    "150": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "152": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "154": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "155": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "157": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "158": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "160": {
      "op": "itxn_submit"
    },
    "161": {
      "op": "itxn Note",
      "defined_out": [
        "txn1.Note#0"
      ],
      "stack_out": [
        "txn1.Note#0"
      ]
    },
    "163": {
      "op": "bytec_3 // 0x31",
      "stack_out": [
        "txn1.Note#0",
        "0x31"
      ]
    },
    "164": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "165": {
      "op": "assert",
      "stack_out": []
    },
    "166": {
      "op": "gitxn 0 CreatedAssetID",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "169": {
      "error": "expected asset to be created",
      "op": "assert // expected asset to be created",
      "stack_out": []
    },
    "170": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "171": {
      "op": "return",
      "stack_out": []
    },
    "172": {
      "block": "main_test_call_with_infer_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "174": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "175": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "176": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "178": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "179": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0"
      ]
    },
    "182": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "185": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ],
      "stack_out": [
        "a#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ]
    },
    "188": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "191": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(uint8)%2#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(uint8)%2#0"
      ]
    },
    "194": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "tmp%25#0"
      ]
    },
    "195": {
      "op": "txnas Applications",
      "defined_out": [
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "197": {
      "op": "itxn_begin"
    },
    "198": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "1"
      ]
    },
    "199": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "201": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "202": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "204": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "\"TST\""
      ]
    },
    "205": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "207": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "a#0",
        "acfg",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "acfg"
      ]
    },
    "208": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "210": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "0"
      ]
    },
    "211": {
      "op": "itxn_field Fee",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "213": {
      "op": "itxn_next"
    },
    "214": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "a#0 (copy)"
      ]
    },
    "216": {
      "op": "len",
      "defined_out": [
        "a#0",
        "app#0",
        "b#0",
        "length%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "length%0#0"
      ]
    },
    "217": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "app#0",
        "as_bytes%0#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "as_bytes%0#0"
      ]
    },
    "218": {
      "op": "extract 6 2",
      "defined_out": [
        "a#0",
        "app#0",
        "b#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "length_uint16%0#0"
      ]
    },
    "221": {
      "op": "uncover 3",
      "stack_out": [
        "b#0",
        "app#0",
        "length_uint16%0#0",
        "a#0"
      ]
    },
    "223": {
      "op": "concat",
      "defined_out": [
        "app#0",
        "b#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0"
      ]
    },
    "224": {
      "op": "dig 2",
      "defined_out": [
        "app#0",
        "b#0",
        "b#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "b#0 (copy)"
      ]
    },
    "226": {
      "op": "len",
      "defined_out": [
        "app#0",
        "b#0",
        "encoded_value%0#0",
        "length%1#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "227": {
      "op": "itob",
      "defined_out": [
        "app#0",
        "as_bytes%1#0",
        "b#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "228": {
      "op": "extract 6 2",
      "defined_out": [
        "app#0",
        "b#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "231": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "b#0"
      ]
    },
    "233": {
      "op": "concat",
      "defined_out": [
        "app#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "app#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "234": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "app#0"
      ]
    },
    "236": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "238": {
      "op": "bytec 4 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "240": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "242": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0"
      ]
    },
    "243": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "245": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "247": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "248": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "250": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "251": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "253": {
      "op": "itxn_submit"
    },
    "254": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "257": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%1#2"
      ],
      "stack_out": [
        "tmp%1#2"
      ]
    },
    "260": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#2"
      ],
      "stack_out": [
        "tmp%1#2",
        "0x151f7c75"
      ]
    },
    "261": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "262": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "263": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "264": {
      "op": "return",
      "stack_out": []
    },
    "265": {
      "block": "main_test_call_with_acfg_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "267": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "268": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "269": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "271": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "272": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "275": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "278": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ],
      "stack_out": [
        "a#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "281": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "284": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(uint8)%1#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(uint8)%1#0"
      ]
    },
    "287": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "tmp%17#0"
      ]
    },
    "288": {
      "op": "txnas Applications",
      "defined_out": [
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "290": {
      "op": "itxn_begin"
    },
    "291": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "1"
      ]
    },
    "292": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "294": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "295": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "297": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "\"TST\""
      ]
    },
    "298": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "300": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "a#0",
        "acfg",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "acfg"
      ]
    },
    "301": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "303": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "0"
      ]
    },
    "304": {
      "op": "itxn_field Fee",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "306": {
      "op": "itxn_next"
    },
    "307": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "a#0 (copy)"
      ]
    },
    "309": {
      "op": "len",
      "defined_out": [
        "a#0",
        "app#0",
        "b#0",
        "length%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "length%0#0"
      ]
    },
    "310": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "app#0",
        "as_bytes%0#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "as_bytes%0#0"
      ]
    },
    "311": {
      "op": "extract 6 2",
      "defined_out": [
        "a#0",
        "app#0",
        "b#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "length_uint16%0#0"
      ]
    },
    "314": {
      "op": "uncover 3",
      "stack_out": [
        "b#0",
        "app#0",
        "length_uint16%0#0",
        "a#0"
      ]
    },
    "316": {
      "op": "concat",
      "defined_out": [
        "app#0",
        "b#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0"
      ]
    },
    "317": {
      "op": "dig 2",
      "defined_out": [
        "app#0",
        "b#0",
        "b#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "b#0 (copy)"
      ]
    },
    "319": {
      "op": "len",
      "defined_out": [
        "app#0",
        "b#0",
        "encoded_value%0#0",
        "length%1#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "320": {
      "op": "itob",
      "defined_out": [
        "app#0",
        "as_bytes%1#0",
        "b#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "321": {
      "op": "extract 6 2",
      "defined_out": [
        "app#0",
        "b#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "324": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "b#0"
      ]
    },
    "326": {
      "op": "concat",
      "defined_out": [
        "app#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "app#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "327": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "app#0"
      ]
    },
    "329": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "331": {
      "op": "bytec 4 // method \"call_with_acfg(byte[],acfg,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)"
      ]
    },
    "333": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "335": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0"
      ]
    },
    "336": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "338": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "340": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "341": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "343": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "344": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "346": {
      "op": "itxn_submit"
    },
    "347": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "350": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%1#2"
      ],
      "stack_out": [
        "tmp%1#2"
      ]
    },
    "353": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#2"
      ],
      "stack_out": [
        "tmp%1#2",
        "0x151f7c75"
      ]
    },
    "354": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "355": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": []
    },
    "356": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "357": {
      "op": "return",
      "stack_out": []
    },
    "358": {
      "block": "main_test_call_with_txn_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "360": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "361": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "362": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "364": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "365": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "368": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "371": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "a#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "374": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "377": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(uint8)%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(uint8)%0#0"
      ]
    },
    "380": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "tmp%9#0"
      ]
    },
    "381": {
      "op": "txnas Applications",
      "defined_out": [
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "383": {
      "op": "itxn_begin"
    },
    "384": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "1"
      ]
    },
    "385": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "387": {
      "op": "bytec_0 // \"TEST\"",
      "defined_out": [
        "\"TEST\"",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "\"TEST\""
      ]
    },
    "388": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "390": {
      "op": "bytec_1 // \"TST\"",
      "defined_out": [
        "\"TST\"",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "\"TST\""
      ]
    },
    "391": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "393": {
      "op": "intc_2 // acfg",
      "defined_out": [
        "a#0",
        "acfg",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "acfg"
      ]
    },
    "394": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "396": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#0",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "0"
      ]
    },
    "397": {
      "op": "itxn_field Fee",
      "stack_out": [
        "a#0",
        "b#0",
        "app#0"
      ]
    },
    "399": {
      "op": "itxn_next"
    },
    "400": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "app#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "a#0 (copy)"
      ]
    },
    "402": {
      "op": "len",
      "defined_out": [
        "a#0",
        "app#0",
        "b#0",
        "length%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "length%0#0"
      ]
    },
    "403": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "app#0",
        "as_bytes%0#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "as_bytes%0#0"
      ]
    },
    "404": {
      "op": "extract 6 2",
      "defined_out": [
        "a#0",
        "app#0",
        "b#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "app#0",
        "length_uint16%0#0"
      ]
    },
    "407": {
      "op": "uncover 3",
      "stack_out": [
        "b#0",
        "app#0",
        "length_uint16%0#0",
        "a#0"
      ]
    },
    "409": {
      "op": "concat",
      "defined_out": [
        "app#0",
        "b#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0"
      ]
    },
    "410": {
      "op": "dig 2",
      "defined_out": [
        "app#0",
        "b#0",
        "b#0 (copy)",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "b#0 (copy)"
      ]
    },
    "412": {
      "op": "len",
      "defined_out": [
        "app#0",
        "b#0",
        "encoded_value%0#0",
        "length%1#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "413": {
      "op": "itob",
      "defined_out": [
        "app#0",
        "as_bytes%1#0",
        "b#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "414": {
      "op": "extract 6 2",
      "defined_out": [
        "app#0",
        "b#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "b#0",
        "app#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "417": {
      "op": "uncover 3",
      "stack_out": [
        "app#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "b#0"
      ]
    },
    "419": {
      "op": "concat",
      "defined_out": [
        "app#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "app#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "420": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "app#0"
      ]
    },
    "422": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "424": {
      "op": "pushbytes 0xa1f5040d // method \"call_with_txn(byte[],txn,byte[])uint64\"",
      "defined_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ]
    },
    "430": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "432": {
      "op": "swap",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%0#0"
      ]
    },
    "433": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "435": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "437": {
      "op": "intc_3 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "438": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "440": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "441": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "443": {
      "op": "itxn_submit"
    },
    "444": {
      "op": "gitxn 1 LastLog",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "447": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "448": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#3"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#3"
      ]
    },
    "451": {
      "op": "swap",
      "stack_out": [
        "tmp%0#3",
        "awst_tmp%0#0"
      ]
    },
    "452": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#3",
        "tmp%1#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#2"
      ]
    },
    "455": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#3",
        "tmp%1#2"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%1#2",
        "0x151f7c75"
      ]
    },
    "456": {
      "op": "==",
      "defined_out": [
        "tmp%0#3",
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%0#3",
        "tmp%2#1"
      ]
    },
    "457": {
      "error": "application log value is not the result of an ABI return",
      "op": "assert // application log value is not the result of an ABI return",
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "458": {
      "op": "btoi",
      "defined_out": [
        "asset_id#0"
      ],
      "stack_out": [
        "asset_id#0"
      ]
    },
    "459": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "460": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "461": {
      "op": "return",
      "stack_out": []
    },
    "462": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "464": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "467": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "469": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "470": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "471": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "472": {
      "op": "return",
      "stack_out": []
    }
  }
}