{
  "version": 3,
  "sources": [
    "../txn_contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAUA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;;AAgBK;;AAAA;AAAA;AAAA;;AAAA;AAhBL;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAoBe;;AAAK;AAAL;AAAP;AACY;AAAL;AAAP;AACO;;AAAP;AANH;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AATL;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAWe;;AAAK;AAAL;AAAP;AACY;AAAL;AAAP;AACO;;AAAP;AAAA;AAJH;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AADL;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;;AAGe;;AAAK;AAAL;AAAP;AACY;AAAL;AAAP;AACO;AAAA;;AAAa;AAAb;AAAP;AACO;;AAAP;AAAA;AALH;AAAA;AAAA;AAAA;AAAA;AAAA;;AADL;;AAAA;;;;;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 3"
    },
    "5": {
      "op": "bytecblock 0x61 0x62 0x151f7c75"
    },
    "16": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "18": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "21": {
      "op": "pushbytess 0xa1f5040d 0x6d4700ad 0xc840077d // method \"call_with_txn(byte[],txn,byte[])uint64\", method \"call_with_acfg(byte[],acfg,byte[])uint64\", method \"call_with_acfg_no_return(byte[],acfg,byte[])void\"",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "Method(call_with_txn(byte[],txn,byte[])uint64)"
      ],
      "stack_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)"
      ]
    },
    "38": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(call_with_txn(byte[],txn,byte[])uint64)",
        "Method(call_with_acfg(byte[],acfg,byte[])uint64)",
        "Method(call_with_acfg_no_return(byte[],acfg,byte[])void)",
        "tmp%2#0"
      ]
    },
    "41": {
      "op": "match main_call_with_txn_route@3 main_call_with_acfg_route@4 main_call_with_acfg_no_return_route@5",
      "stack_out": []
    },
    "49": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "51": {
      "op": "return",
      "stack_out": []
    },
    "52": {
      "block": "main_call_with_acfg_no_return_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "54": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "55": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "56": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "58": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "59": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%4#0"
      ]
    },
    "62": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "65": {
      "op": "txn GroupIndex",
      "defined_out": [
        "a#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%28#0"
      ]
    },
    "67": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "a#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%28#0",
        "1"
      ]
    },
    "68": {
      "op": "-",
      "defined_out": [
        "a#0",
        "acfg#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0"
      ]
    },
    "69": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "acfg#0",
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "acfg#0 (copy)"
      ]
    },
    "70": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "a#0",
        "acfg#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "gtxn_type%1#0"
      ]
    },
    "72": {
      "op": "intc_1 // acfg",
      "defined_out": [
        "a#0",
        "acfg",
        "acfg#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "gtxn_type%1#0",
        "acfg"
      ]
    },
    "73": {
      "op": "==",
      "defined_out": [
        "a#0",
        "acfg#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "74": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "a#0",
        "acfg#0"
      ]
    },
    "75": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "acfg#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "reinterpret_Encoded(len+uint8[])%5#0"
      ]
    },
    "78": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "b#0"
      ]
    },
    "81": {
      "op": "uncover 2",
      "stack_out": [
        "acfg#0",
        "b#0",
        "a#0"
      ]
    },
    "83": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "a#0",
        "0x61"
      ]
    },
    "84": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "tmp%0#0"
      ]
    },
    "85": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": [
        "acfg#0",
        "b#0"
      ]
    },
    "86": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "0x62"
      ]
    },
    "87": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "acfg#0",
        "tmp%1#1"
      ]
    },
    "88": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": [
        "acfg#0"
      ]
    },
    "89": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "91": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": []
    },
    "92": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "93": {
      "op": "return",
      "stack_out": []
    },
    "94": {
      "block": "main_call_with_acfg_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "96": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "97": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "98": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "100": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "101": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "104": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "107": {
      "op": "txn GroupIndex",
      "defined_out": [
        "a#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%18#0"
      ]
    },
    "109": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "a#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%18#0",
        "1"
      ]
    },
    "110": {
      "op": "-",
      "defined_out": [
        "a#0",
        "acfg#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0"
      ]
    },
    "111": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "acfg#0",
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "acfg#0 (copy)"
      ]
    },
    "112": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "a#0",
        "acfg#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "gtxn_type%0#0"
      ]
    },
    "114": {
      "op": "intc_1 // acfg",
      "defined_out": [
        "a#0",
        "acfg",
        "acfg#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "gtxn_type%0#0",
        "acfg"
      ]
    },
    "115": {
      "op": "==",
      "defined_out": [
        "a#0",
        "acfg#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "116": {
      "error": "transaction type is acfg",
      "op": "assert // transaction type is acfg",
      "stack_out": [
        "a#0",
        "acfg#0"
      ]
    },
    "117": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "acfg#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "120": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "b#0"
      ]
    },
    "123": {
      "op": "uncover 2",
      "stack_out": [
        "acfg#0",
        "b#0",
        "a#0"
      ]
    },
    "125": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "a#0",
        "0x61"
      ]
    },
    "126": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "tmp%0#0"
      ]
    },
    "127": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": [
        "acfg#0",
        "b#0"
      ]
    },
    "128": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "0x62"
      ]
    },
    "129": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "acfg#0",
        "tmp%1#1"
      ]
    },
    "130": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": [
        "acfg#0"
      ]
    },
    "131": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "133": {
      "op": "dup",
      "defined_out": [
        "tmp%2#1",
        "tmp%2#1 (copy)"
      ],
      "stack_out": [
        "tmp%2#1",
        "tmp%2#1 (copy)"
      ]
    },
    "134": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "135": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "136": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "137": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "138": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "139": {
      "op": "log",
      "stack_out": []
    },
    "140": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "141": {
      "op": "return",
      "stack_out": []
    },
    "142": {
      "block": "main_call_with_txn_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "144": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "145": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "146": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "148": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "149": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "152": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "155": {
      "op": "txn GroupIndex",
      "defined_out": [
        "a#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%8#0"
      ]
    },
    "157": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "a#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%8#0",
        "1"
      ]
    },
    "158": {
      "op": "-",
      "defined_out": [
        "a#0",
        "acfg#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0"
      ]
    },
    "159": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "acfg#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "162": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "acfg#0",
        "b#0"
      ]
    },
    "165": {
      "op": "uncover 2",
      "stack_out": [
        "acfg#0",
        "b#0",
        "a#0"
      ]
    },
    "167": {
      "op": "bytec_0 // 0x61",
      "defined_out": [
        "0x61",
        "a#0",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "a#0",
        "0x61"
      ]
    },
    "168": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "b#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "tmp%0#0"
      ]
    },
    "169": {
      "error": "a is not a",
      "op": "assert // a is not a",
      "stack_out": [
        "acfg#0",
        "b#0"
      ]
    },
    "170": {
      "op": "bytec_1 // 0x62",
      "defined_out": [
        "0x62",
        "acfg#0",
        "b#0"
      ],
      "stack_out": [
        "acfg#0",
        "b#0",
        "0x62"
      ]
    },
    "171": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "acfg#0",
        "tmp%1#1"
      ]
    },
    "172": {
      "error": "b is not b",
      "op": "assert // b is not b",
      "stack_out": [
        "acfg#0"
      ]
    },
    "173": {
      "op": "dup",
      "defined_out": [
        "acfg#0",
        "acfg#0 (copy)"
      ],
      "stack_out": [
        "acfg#0",
        "acfg#0 (copy)"
      ]
    },
    "174": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "acfg#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "acfg#0",
        "tmp%2#1"
      ]
    },
    "176": {
      "op": "intc_1 // acfg",
      "defined_out": [
        "acfg",
        "acfg#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "acfg#0",
        "tmp%2#1",
        "acfg"
      ]
    },
    "177": {
      "op": "==",
      "defined_out": [
        "acfg#0",
        "tmp%3#3"
      ],
      "stack_out": [
        "acfg#0",
        "tmp%3#3"
      ]
    },
    "178": {
      "error": "expected asset config",
      "op": "assert // expected asset config",
      "stack_out": [
        "acfg#0"
      ]
    },
    "179": {
      "op": "gtxns CreatedAssetID",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "181": {
      "op": "dup",
      "defined_out": [
        "tmp%4#1",
        "tmp%4#1 (copy)"
      ],
      "stack_out": [
        "tmp%4#1",
        "tmp%4#1 (copy)"
      ]
    },
    "182": {
      "error": "expected asset id",
      "op": "assert // expected asset id",
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "183": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "184": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "185": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "186": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "187": {
      "op": "log",
      "stack_out": []
    },
    "188": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "189": {
      "op": "return",
      "stack_out": []
    },
    "190": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "192": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "195": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "197": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "198": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "199": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "200": {
      "op": "return",
      "stack_out": []
    }
  }
}