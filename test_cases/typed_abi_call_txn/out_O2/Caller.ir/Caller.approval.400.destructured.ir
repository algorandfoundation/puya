main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let lifted%return#0: bool = 1u
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@18
    block@2: // abi_routing_L14
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%6#0: bool = (txn ApplicationID)
        (assert tmp%6#0)
        let tmp%7#0: bytes = (txna ApplicationArgs 0)
        switch tmp%7#0 {method "test_call_with_txn(byte[],byte[],uint64)void" => block@6, method "test_call_with_acfg(byte[],byte[],uint64)void" => block@7, method "test_call_with_infer(byte[],byte[],uint64)void" => block@7, method "test_call_with_acfg_no_return(byte[],byte[],uint64)void" => block@9, * => block@22}
    block@6: // test_call_with_txn_route_L15
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_txn(byte[],txn,byte[])uint64")
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%0#0)
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%2#4: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%3#2: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#2 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        let asset_id#0: uint64 = (btoi tmp%2#4)
        (assert asset_id#0) // expected asset id
        exit lifted%return#0
    block@7: // test_call_with_acfg_route_L31
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg(byte[],acfg,byte[])uint64")
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%0#0)
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%3#2: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%4#0: bool = (== tmp%3#2 0x151f7c75)
        (assert tmp%4#0) // application log value is not the result of an ABI return
        exit lifted%return#0
    block@9: // test_call_with_acfg_no_return_route_L61
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let reinterpret_Encoded(uint64)%0#0: Encoded(uint64) = (txna ApplicationArgs 3)
        let app#0: uint64 = (btoi reinterpret_Encoded(uint64)%0#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        ((itxn_field Note) 0x31)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg_no_return(byte[],acfg,byte[])void")
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%0#0)
        ((itxn_field ApplicationArgs) reinterpret_Encoded(len+uint8[])%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn1.Note#0: bytes = (itxn Note)
        let tmp%2#2: bool = (== txn1.Note#0 0x31)
        (assert tmp%2#2)
        let asset_id#0: uint64 = (gitxn 0 CreatedAssetID)
        (assert asset_id#0) // expected asset to be created
        exit lifted%return#0
    block@18: // bare_routing_L14
        let tmp%9#0: uint64 = (txn OnCompletion)
        let not%tmp%9#0: bool = (! tmp%9#0)
        (assert not%tmp%9#0)
        let tmp%10#0: uint64 = (txn ApplicationID)
        let tmp%11#0: bool = (! tmp%10#0)
        (assert tmp%11#0) // can only call when creating
        exit lifted%return#0
    block@22: // after_if_else_L14
        fail