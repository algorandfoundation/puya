main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@9
    block@2: // abi_routing_L14
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "test_call_with_txn(byte[],byte[],application)void" => block@3, method "test_call_with_acfg(byte[],byte[],application)void" => block@4, method "test_call_with_infer(byte[],byte[],application)void" => block@5, method "test_call_with_acfg_no_return(byte[],byte[],application)void" => block@6, * => block@13}
    block@3: // test_call_with_txn_route_L15
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let reinterpret_Encoded(uint8)%0#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%9#0: uint64 = (btoi reinterpret_Encoded(uint8)%0#0)
        let app#0: uint64 = ((txnas Applications) tmp%9#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        let length%0#0: uint64 = (len a#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 a#0)
        let length%1#0: uint64 = (len b#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 b#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_txn(byte[],txn,byte[])uint64")
        ((itxn_field ApplicationArgs) encoded_value%0#0)
        ((itxn_field ApplicationArgs) encoded_value%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%0#5: Encoded(uint64) = ((extract 4 0) awst_tmp%0#0)
        let tmp%1#2: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#1: bool = (== tmp%1#2 0x151f7c75)
        (assert tmp%2#1) // application log value is not the result of an ABI return
        let asset_id#0: uint64 = (btoi tmp%0#5)
        (assert asset_id#0) // expected asset id
        let test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0
        goto block@14
    block@4: // test_call_with_acfg_route_L31
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%2#0)
        let reinterpret_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%3#0)
        let reinterpret_Encoded(uint8)%1#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%17#0: uint64 = (btoi reinterpret_Encoded(uint8)%1#0)
        let app#0: uint64 = ((txnas Applications) tmp%17#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        let length%0#0: uint64 = (len a#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 a#0)
        let length%1#0: uint64 = (len b#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 b#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg(byte[],acfg,byte[])uint64")
        ((itxn_field ApplicationArgs) encoded_value%0#0)
        ((itxn_field ApplicationArgs) encoded_value%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%1#2: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#1: bool = (== tmp%1#2 0x151f7c75)
        (assert tmp%2#1) // application log value is not the result of an ABI return
        let test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0
        goto block@14
    block@5: // test_call_with_infer_route_L46
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%4#0)
        let reinterpret_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%5#0)
        let reinterpret_Encoded(uint8)%2#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%25#0: uint64 = (btoi reinterpret_Encoded(uint8)%2#0)
        let app#0: uint64 = ((txnas Applications) tmp%25#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        let length%0#0: uint64 = (len a#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 a#0)
        let length%1#0: uint64 = (len b#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 b#0)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg(byte[],acfg,byte[])uint64")
        ((itxn_field ApplicationArgs) encoded_value%0#0)
        ((itxn_field ApplicationArgs) encoded_value%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let awst_tmp%0#0: bytes = (gitxn 1 LastLog)
        let tmp%1#2: bytes = ((extract 0 4) awst_tmp%0#0)
        let tmp%2#1: bool = (== tmp%1#2 0x151f7c75)
        (assert tmp%2#1) // application log value is not the result of an ABI return
        let test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0
        goto block@14
    block@6: // test_call_with_acfg_no_return_route_L61
        let tmp%27#0: uint64 = (txn OnCompletion)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // OnCompletion is not NoOp
        let tmp%29#0: uint64 = (txn ApplicationID)
        (assert tmp%29#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%6#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%6#0)
        let reinterpret_Encoded(len+uint8[])%7#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%7#0)
        let reinterpret_Encoded(uint8)%3#0: Encoded(uint8) = (txna ApplicationArgs 3)
        let tmp%33#0: uint64 = (btoi reinterpret_Encoded(uint8)%3#0)
        let app#0: uint64 = ((txnas Applications) tmp%33#0)
        itxn_begin
        ((itxn_field ConfigAssetTotal) 1u)
        ((itxn_field ConfigAssetName) "TEST")
        ((itxn_field ConfigAssetUnitName) "TST")
        ((itxn_field TypeEnum) acfg)
        ((itxn_field Fee) 0u)
        itxn_next
        let length%0#0: uint64 = (len a#0)
        let as_bytes%0#0: bytes[8] = (itob length%0#0)
        let length_uint16%0#0: bytes = ((extract 6 2) as_bytes%0#0)
        let encoded_value%0#0: bytes = (concat length_uint16%0#0 a#0)
        let length%1#0: uint64 = (len b#0)
        let as_bytes%1#0: bytes[8] = (itob length%1#0)
        let length_uint16%1#0: bytes = ((extract 6 2) as_bytes%1#0)
        let encoded_value%1#0: bytes = (concat length_uint16%1#0 b#0)
        ((itxn_field Note) 0x31)
        ((itxn_field ApplicationID) app#0)
        ((itxn_field ApplicationArgs) method "call_with_acfg_no_return(byte[],acfg,byte[])void")
        ((itxn_field ApplicationArgs) encoded_value%0#0)
        ((itxn_field ApplicationArgs) encoded_value%1#0)
        ((itxn_field TypeEnum) appl)
        ((itxn_field Fee) 0u)
        itxn_submit
        let txn1.Note#0: bytes = (itxn Note)
        let tmp%0#0: bool = (== txn1.Note#0 0x31)
        (assert tmp%0#0)
        let asset_id#0: uint64 = (gitxn 0 CreatedAssetID)
        (assert asset_id#0) // expected asset to be created
        let test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0
        goto block@14
    block@9: // bare_routing_L14
        let tmp%35#0: uint64 = (txn OnCompletion)
        goto tmp%35#0 ? block@13 : block@10
    block@10: // __algopy_default_create_L1
        let tmp%36#0: uint64 = (txn ApplicationID)
        let tmp%37#0: bool = (! tmp%36#0)
        (assert tmp%37#0) // can only call when creating
        let test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0
        goto block@14
    block@13: // after_if_else_L14
        let test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router__%0#0
        goto block@14
    block@14: // after_inlined_test_cases.typed_abi_call_txn.caller.Caller.__puya_arc4_router___L1
        return tmp%0#0