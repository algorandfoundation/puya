#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 3 6
    bytecblock "TEST" "TST" 0x31 0x151f7c75
    intc_1 // 1
    txn NumAppArgs
    bz main_bare_routing@18
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert
    pushbytess 0x0ab53563 0xea6a6ade 0x2381ff80 0x00b50f1c // method "test_call_with_txn(byte[],byte[],uint64)void", method "test_call_with_acfg(byte[],byte[],uint64)void", method "test_call_with_infer(byte[],byte[],uint64)void", method "test_call_with_acfg_no_return(byte[],byte[],uint64)void"
    txna ApplicationArgs 0
    match main_test_call_with_txn_route@6 main_test_call_with_acfg_route@7 main_test_call_with_acfg_route@7 main_test_call_with_acfg_no_return_route@9
    err

main_test_call_with_acfg_no_return_route@9:
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    itxn_begin
    intc_1 // 1
    itxn_field ConfigAssetTotal
    bytec_0 // "TEST"
    itxn_field ConfigAssetName
    bytec_1 // "TST"
    itxn_field ConfigAssetUnitName
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_next
    bytec_2 // 0x31
    itxn_field Note
    itxn_field ApplicationID
    pushbytes 0xc840077d // method "call_with_acfg_no_return(byte[],acfg,byte[])void"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn Note
    bytec_2 // 0x31
    ==
    assert
    gitxn 0 CreatedAssetID
    assert // expected asset to be created
    return

main_test_call_with_acfg_route@7:
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    itxn_begin
    intc_1 // 1
    itxn_field ConfigAssetTotal
    bytec_0 // "TEST"
    itxn_field ConfigAssetName
    bytec_1 // "TST"
    itxn_field ConfigAssetUnitName
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_next
    itxn_field ApplicationID
    pushbytes 0x6d4700ad // method "call_with_acfg(byte[],acfg,byte[])uint64"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 1 LastLog
    extract 0 4
    bytec_3 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    return

main_test_call_with_txn_route@6:
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    itxn_begin
    intc_1 // 1
    itxn_field ConfigAssetTotal
    bytec_0 // "TEST"
    itxn_field ConfigAssetName
    bytec_1 // "TST"
    itxn_field ConfigAssetUnitName
    intc_2 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_next
    itxn_field ApplicationID
    pushbytes 0xa1f5040d // method "call_with_txn(byte[],txn,byte[])uint64"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_3 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 1 LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_3 // 0x151f7c75
    ==
    assert // application log value is not the result of an ABI return
    btoi
    assert // expected asset id
    return

main_bare_routing@18:
    txn OnCompletion
    !
    assert
    txn ApplicationID
    !
    assert // can only call when creating
    return
