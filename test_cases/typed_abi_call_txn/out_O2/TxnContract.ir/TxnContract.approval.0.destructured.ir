main algopy.arc4.ARC4Contract.approval_program:
    block@0: // L1
        let tmp%0#1: uint64 = (txn NumAppArgs)
        goto tmp%0#1 ? block@2 : block@8
    block@2: // abi_routing_L11
        let tmp%2#0: bytes = (txna ApplicationArgs 0)
        switch tmp%2#0 {method "call_with_txn(byte[],txn,byte[])uint64" => block@3, method "call_with_acfg(byte[],acfg,byte[])uint64" => block@4, method "call_with_acfg_no_return(byte[],acfg,byte[])void" => block@5, * => block@12}
    block@3: // call_with_txn_route_L12
        let tmp%3#0: uint64 = (txn OnCompletion)
        let tmp%4#0: bool = (! tmp%3#0)
        (assert tmp%4#0) // OnCompletion is not NoOp
        let tmp%5#0: uint64 = (txn ApplicationID)
        (assert tmp%5#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%0#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%0#0)
        let tmp%8#0: uint64 = (txn GroupIndex)
        let acfg#0: uint64 = (- tmp%8#0 1u)
        let reinterpret_Encoded(len+uint8[])%1#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%1#0)
        let tmp%0#0: bool = (== a#0 0x61)
        (assert tmp%0#0) // a is not a
        let tmp%1#1: bool = (== b#0 0x62)
        (assert tmp%1#1) // b is not b
        let tmp%2#1: uint64 = ((gtxns TypeEnum) acfg#0)
        let tmp%3#3: bool = (== tmp%2#1 acfg)
        (assert tmp%3#3) // expected asset config
        let tmp%4#1: uint64 = ((gtxns CreatedAssetID) acfg#0)
        (assert tmp%4#1) // expected asset id
        let val_as_bytes%0#0: bytes[8] = (itob tmp%4#1)
        let tmp%10#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
        (log tmp%10#0)
        let test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0
        goto block@13
    block@4: // call_with_acfg_route_L20
        let tmp%11#0: uint64 = (txn OnCompletion)
        let tmp%12#0: bool = (! tmp%11#0)
        (assert tmp%12#0) // OnCompletion is not NoOp
        let tmp%13#0: uint64 = (txn ApplicationID)
        (assert tmp%13#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%2#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%2#0)
        let tmp%16#0: uint64 = (txn GroupIndex)
        let acfg#0: uint64 = (- tmp%16#0 1u)
        let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) acfg#0)
        let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 acfg)
        (assert gtxn_type_matches%0#0) // transaction type is acfg
        let reinterpret_Encoded(len+uint8[])%3#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%3#0)
        let tmp%0#0: bool = (== a#0 0x61)
        (assert tmp%0#0) // a is not a
        let tmp%1#1: bool = (== b#0 0x62)
        (assert tmp%1#1) // b is not b
        let tmp%2#1: uint64 = ((gtxns CreatedAssetID) acfg#0)
        (assert tmp%2#1) // expected asset id
        let val_as_bytes%1#0: bytes[8] = (itob tmp%2#1)
        let tmp%18#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
        (log tmp%18#0)
        let test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0
        goto block@13
    block@5: // call_with_acfg_no_return_route_L27
        let tmp%19#0: uint64 = (txn OnCompletion)
        let tmp%20#0: bool = (! tmp%19#0)
        (assert tmp%20#0) // OnCompletion is not NoOp
        let tmp%21#0: uint64 = (txn ApplicationID)
        (assert tmp%21#0) // can only call when not creating
        let reinterpret_Encoded(len+uint8[])%4#0: Encoded(len+uint8[]) = (txna ApplicationArgs 1)
        let a#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%4#0)
        let tmp%24#0: uint64 = (txn GroupIndex)
        let acfg#0: uint64 = (- tmp%24#0 1u)
        let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) acfg#0)
        let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 acfg)
        (assert gtxn_type_matches%1#0) // transaction type is acfg
        let reinterpret_Encoded(len+uint8[])%5#0: Encoded(len+uint8[]) = (txna ApplicationArgs 2)
        let b#0: bytes = ((extract 2 0) reinterpret_Encoded(len+uint8[])%5#0)
        let tmp%0#0: bool = (== a#0 0x61)
        (assert tmp%0#0) // a is not a
        let tmp%1#1: bool = (== b#0 0x62)
        (assert tmp%1#1) // b is not b
        let tmp%2#1: uint64 = ((gtxns CreatedAssetID) acfg#0)
        (assert tmp%2#1) // expected asset id
        let test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0
        goto block@13
    block@8: // bare_routing_L11
        let tmp%26#0: uint64 = (txn OnCompletion)
        goto tmp%26#0 ? block@12 : block@9
    block@9: // __algopy_default_create_L1
        let tmp%27#0: uint64 = (txn ApplicationID)
        let tmp%28#0: bool = (! tmp%27#0)
        (assert tmp%28#0) // can only call when creating
        let test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0: bool = 1u
        let tmp%0#0: bool = test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0
        goto block@13
    block@12: // after_if_else_L11
        let test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0: bool = 0u
        let tmp%0#0: bool = test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__%0#0
        goto block@13
    block@13: // after_inlined_test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router___L1
        return tmp%0#0