contract test_cases.typed_abi_call_txn.txn_contract.TxnContract:
    program approval:
        subroutine algopy.arc4.ARC4Contract.approval_program() -> bool:
            block@0: // L1
                let tmp%0#0: bool = test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__()
                return tmp%0#0
        
        subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.__puya_arc4_router__() -> bool:
            block@0: // L11
                let tmp%0#0: uint64 = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@7
            block@1: // abi_routing_L11
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "call_with_txn(byte[],txn,byte[])uint64" => block@2, method "call_with_acfg(byte[],acfg,byte[])uint64" => block@3, method "call_with_acfg_no_return(byte[],acfg,byte[])void" => block@4, * => return 0u}
            block@2: // call_with_txn_route_L12
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // is not creating
                let tmp%7#0: bytes = (txna ApplicationArgs 1)
                let tmp%8#0: bytes = ((extract 2 0) tmp%7#0)
                let tmp%9#0: uint64 = (txn GroupIndex)
                let gtxn_idx%0#0: uint64 = (- tmp%9#0 1u)
                let tmp%10#0: bytes = (txna ApplicationArgs 2)
                let tmp%11#0: bytes = ((extract 2 0) tmp%10#0)
                let to_encode%0#0: uint64 = test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn(tmp%8#0, gtxn_idx%0#0, tmp%11#0)
                let val_as_bytes%0#0: bytes = (itob to_encode%0#0)
                let tmp%12#0: bytes = (concat 0x151f7c75 val_as_bytes%0#0)
                (log tmp%12#0)
                return 1u
            block@3: // call_with_acfg_route_L20
                let tmp%13#0: uint64 = (txn OnCompletion)
                let tmp%14#0: bool = (! tmp%13#0)
                (assert tmp%14#0) // OnCompletion is NoOp
                let tmp%15#0: uint64 = (txn ApplicationID)
                (assert tmp%15#0) // is not creating
                let tmp%17#0: bytes = (txna ApplicationArgs 1)
                let tmp%18#0: bytes = ((extract 2 0) tmp%17#0)
                let tmp%19#0: uint64 = (txn GroupIndex)
                let gtxn_idx%1#0: uint64 = (- tmp%19#0 1u)
                let gtxn_type%0#0: uint64 = ((gtxns TypeEnum) gtxn_idx%1#0)
                let gtxn_type_matches%0#0: bool = (== gtxn_type%0#0 acfg)
                (assert gtxn_type_matches%0#0) // transaction type is acfg
                let tmp%20#0: bytes = (txna ApplicationArgs 2)
                let tmp%21#0: bytes = ((extract 2 0) tmp%20#0)
                let to_encode%1#0: uint64 = test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg(tmp%18#0, gtxn_idx%1#0, tmp%21#0)
                let val_as_bytes%1#0: bytes = (itob to_encode%1#0)
                let tmp%22#0: bytes = (concat 0x151f7c75 val_as_bytes%1#0)
                (log tmp%22#0)
                return 1u
            block@4: // call_with_acfg_no_return_route_L27
                let tmp%23#0: uint64 = (txn OnCompletion)
                let tmp%24#0: bool = (! tmp%23#0)
                (assert tmp%24#0) // OnCompletion is NoOp
                let tmp%25#0: uint64 = (txn ApplicationID)
                (assert tmp%25#0) // is not creating
                let tmp%27#0: bytes = (txna ApplicationArgs 1)
                let tmp%28#0: bytes = ((extract 2 0) tmp%27#0)
                let tmp%29#0: uint64 = (txn GroupIndex)
                let gtxn_idx%2#0: uint64 = (- tmp%29#0 1u)
                let gtxn_type%1#0: uint64 = ((gtxns TypeEnum) gtxn_idx%2#0)
                let gtxn_type_matches%1#0: bool = (== gtxn_type%1#0 acfg)
                (assert gtxn_type_matches%1#0) // transaction type is acfg
                let tmp%30#0: bytes = (txna ApplicationArgs 2)
                let tmp%31#0: bytes = ((extract 2 0) tmp%30#0)
                test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return(tmp%28#0, gtxn_idx%2#0, tmp%31#0)
                return 1u
            block@7: // bare_routing_L11
                let tmp%32#0: uint64 = (txn OnCompletion)
                goto tmp%32#0 ? block@11 : block@8
            block@8: // __algopy_default_create_L11
                let tmp%33#0: uint64 = (txn ApplicationID)
                let tmp%34#0: bool = (! tmp%33#0)
                (assert tmp%34#0) // is creating
                return 1u
            block@11: // after_if_else_L11
                return 0u
        
        subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_txn(a: bytes, acfg: uint64, b: bytes) -> uint64:
            block@0: // L12
                let tmp%0#0: bool = (== a#0 0x61)
                (assert tmp%0#0) // a is not a
                let tmp%1#0: bool = (== b#0 0x62)
                (assert tmp%1#0) // b is not b
                let tmp%2#0: uint64 = ((gtxns TypeEnum) acfg#0)
                let tmp%3#0: bool = (== tmp%2#0 acfg)
                (assert tmp%3#0) // expected asset config
                let tmp%4#0: uint64 = ((gtxns CreatedAssetID) acfg#0)
                (assert tmp%4#0) // expected asset id
                return tmp%4#0
        
        subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg(a: bytes, acfg: uint64, b: bytes) -> uint64:
            block@0: // L20
                let tmp%0#0: bool = (== a#0 0x61)
                (assert tmp%0#0) // a is not a
                let tmp%1#0: bool = (== b#0 0x62)
                (assert tmp%1#0) // b is not b
                let tmp%2#0: uint64 = ((gtxns CreatedAssetID) acfg#0)
                (assert tmp%2#0) // expected asset id
                return tmp%2#0
        
        subroutine test_cases.typed_abi_call_txn.txn_contract.TxnContract.call_with_acfg_no_return(a: bytes, acfg: uint64, b: bytes) -> void:
            block@0: // L27
                let tmp%0#0: bool = (== a#0 0x61)
                (assert tmp%0#0) // a is not a
                let tmp%1#0: bool = (== b#0 0x62)
                (assert tmp%1#0) // b is not b
                let tmp%2#0: uint64 = ((gtxns CreatedAssetID) acfg#0)
                (assert tmp%2#0) // expected asset id
                return 
    
    program clear-state:
        subroutine algopy.arc4.ARC4Contract.clear_state_program() -> bool:
            block@0: // L1
                return 1u