debug: PuyaOptions(paths=['stubs'], output_teal=True, output_arc32=True, output_awst=False, output_ssa_ir=True, output_optimization_ir=True, output_cssa_ir=True, output_post_ssa_ir=True, output_parallel_copies_ir=True, output_final_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>)
debug: Sealing block@0: // L13
debug: Terminated block@0: // L13
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L20
debug: Terminated block@1: // while_top_L20
debug: Sealing block@None: // while_body_L20
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L20
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L20
debug: Terminated block@2: // while_body_L20
debug: Sealing block@None: // switch_case_default_L26
debug: Sealing block@None: // switch_case_0_L28
debug: Sealing block@None: // switch_case_1_L30
debug: Terminated block@3: // switch_case_0_L28
debug: Terminated block@4: // switch_case_1_L30
debug: Terminated block@5: // switch_case_default_L26
debug: Sealing block@6: // switch_case_next_L26
debug: Terminated block@6: // switch_case_next_L26
debug: Sealing block@1: // while_top_L20
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L26
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L13
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L26
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L28
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L30
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L26
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L26
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L20
debug: Terminated block@7: // after_while_L20
debug: Sealing block@0: // L19
debug: Terminated block@0: // L19
debug: Sealing block@0: // L38
debug: Terminated block@0: // L38
debug: Sealing block@0: // L56
debug: Terminated block@0: // L56
debug: Sealing block@0: // L83
debug: Terminated block@0: // L83
debug: Sealing block@None: // if_body_L104
debug: Sealing block@None: // else_body_L104
debug: Terminated block@1: // if_body_L104
debug: Sealing block@2: // after_if_else_L104
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L104
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L83
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L104
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: uint64 = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L104
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0) in block@0: // L83
debug: Added is_packed#0 to Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L104
debug: Replacing trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: uint64 = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L104
debug: Sealing block@None: // ternary_true_L108
debug: Sealing block@None: // ternary_false_L108
debug: Terminated block@3: // ternary_true_L108
debug: Terminated block@4: // ternary_false_L108
debug: Sealing block@5: // ternary_merge_L108
debug: Created Phi assignment: let ternary_result%6#2: uint64 = undefined while trying to resolve 'ternary_result%6' in block@5: // ternary_merge_L108
debug: Added ternary_result%6#0 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@3) in block@3: // ternary_true_L108
debug: Added ternary_result%6#1 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@3, ternary_result%6#1 <- block@4) in block@4: // ternary_false_L108
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L108
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L104
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L83
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L104
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L108
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L108
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L108
debug: Sealing block@6: // for_preamble_L108
debug: Terminated block@6: // for_preamble_L108
debug: Looking for 'range_item%8' in an unsealed block creating an incomplete Phi: block@7: // for_header_L108
debug: Created Phi assignment: let range_item%8#1: uint64 = undefined while trying to resolve 'range_item%8' in block@7: // for_header_L108
debug: Terminated block@7: // for_header_L108
debug: Looking for 'range_item%8' in an unsealed block creating an incomplete Phi: block@8: // for_body_L108
debug: Created Phi assignment: let range_item%8#2: uint64 = undefined while trying to resolve 'range_item%8' in block@8: // for_body_L108
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@8: // for_body_L108
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@8: // for_body_L108
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@8: // for_body_L108
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@8: // for_body_L108
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@8: // for_body_L108
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@8: // for_body_L108
debug: Terminated block@8: // for_body_L108
debug: Sealing block@9: // for_footer_L108
debug: Terminated block@9: // for_footer_L108
debug: Sealing block@10: // for_increment_L108
debug: Terminated block@10: // for_increment_L108
debug: Sealing block@7: // for_header_L108
debug: Added range_item%8#0 to Phi node: let range_item%8#1: uint64 = φ(range_item%8#0 <- block@6) in block@6: // for_preamble_L108
debug: Added range_item%8#3 to Phi node: let range_item%8#1: uint64 = φ(range_item%8#0 <- block@6, range_item%8#3 <- block@10) in block@10: // for_increment_L108
debug: Sealing block@8: // for_body_L108
debug: Added range_item%8#1 to Phi node: let range_item%8#2: uint64 = φ(range_item%8#1 <- block@7) in block@7: // for_header_L108
debug: Replacing trivial Phi node: let range_item%8#2: uint64 = φ(range_item%8#1 <- block@7) (range_item%8#2) with range_item%8#1
debug: Deleting Phi assignment: let range_item%8#2: uint64 = φ(range_item%8#1 <- block@7)
debug: Replaced trivial Phi node: let range_item%8#2: uint64 = φ(range_item%8#1 <- block@7) (range_item%8#2) with range_item%8#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@7: // for_header_L108
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L108
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L104
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L83
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L104
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L108
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L108
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@6) in block@6: // for_preamble_L108
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@6, result#3 <- block@10) in block@10: // for_increment_L108
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@7) in block@7: // for_header_L108
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@7) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@7)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@7) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_header_L108
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L108
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L108
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L108
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@6) in block@6: // for_preamble_L108
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@6, write_offset#2 <- block@10) in block@10: // for_increment_L108
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@7) in block@7: // for_header_L108
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@7) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@7)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@7) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_header_L108
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L108
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L104
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L83
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L104
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L108
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L108
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6) in block@6: // for_preamble_L108
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6, new_items_bytes#1 <- block@10) in block@10: // for_increment_L108
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@7) in block@7: // for_header_L108
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@7) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@7)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6, new_items_bytes#2 <- block@10) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6, new_items_bytes#2 <- block@10)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@7) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@6, new_items_bytes#2 <- block@10) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L108
debug: Created Phi assignment: let result#7: bytes = undefined while trying to resolve 'result' in block@11: // after_for_L108
debug: Added result#6 to Phi node: let result#7: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L108
debug: Added result#4 to Phi node: let result#7: bytes = φ(result#6 <- block@5, result#4 <- block@7) in block@7: // for_header_L108
debug: Terminated block@11: // after_for_L108
debug: Sealing block@0: // L116
debug: Terminated block@0: // L116
debug: Sealing block@0: // L138
debug: Terminated block@0: // L138
debug: Sealing block@0: // L165
debug: Terminated block@0: // L165
debug: Sealing block@0: // L194
debug: Terminated block@0: // L194
debug: Sealing block@0: // L213
debug: Terminated block@0: // L213
debug: Sealing block@None: // if_body_L227
debug: Sealing block@None: // else_body_L227
debug: Terminated block@1: // if_body_L227
debug: Terminated block@2: // else_body_L227
debug: Sealing block@3: // after_if_else_L227
debug: Created Phi assignment: let length#1: uint64 = undefined while trying to resolve 'length' in block@3: // after_if_else_L227
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1) in block@1: // if_body_L227
debug: Added length#0 to Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) in block@2: // else_body_L227
debug: Replacing trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0
debug: Deleting Phi assignment: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2)
debug: Replaced trivial Phi node: let length#1: uint64 = φ(length#0 <- block@1, length#0 <- block@2) (length#1) with length#0 in current definition for 1 blocks
debug: Created Phi assignment: let start_at_index#1: uint64 = undefined while trying to resolve 'start_at_index' in block@3: // after_if_else_L227
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1) in block@1: // if_body_L227
debug: Added start_at_index#0 to Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) in block@2: // else_body_L227
debug: Replacing trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0
debug: Deleting Phi assignment: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2)
debug: Replaced trivial Phi node: let start_at_index#1: uint64 = φ(start_at_index#0 <- block@1, start_at_index#0 <- block@2) (start_at_index#1) with start_at_index#0 in current definition for 1 blocks
debug: Terminated block@3: // after_if_else_L227
debug: Sealing block@4: // for_preamble_L232
debug: Terminated block@4: // for_preamble_L232
debug: Looking for 'range_item%2' in an unsealed block creating an incomplete Phi: block@5: // for_header_L232
debug: Created Phi assignment: let range_item%2#1: uint64 = undefined while trying to resolve 'range_item%2' in block@5: // for_header_L232
debug: Terminated block@5: // for_header_L232
debug: Looking for 'range_item%2' in an unsealed block creating an incomplete Phi: block@6: // for_body_L232
debug: Created Phi assignment: let range_item%2#2: uint64 = undefined while trying to resolve 'range_item%2' in block@6: // for_body_L232
debug: Looking for 'tail_cursor' in an unsealed block creating an incomplete Phi: block@6: // for_body_L232
debug: Created Phi assignment: let tail_cursor#2: uint64 = undefined while trying to resolve 'tail_cursor' in block@6: // for_body_L232
debug: Looking for 'array_data' in an unsealed block creating an incomplete Phi: block@6: // for_body_L232
debug: Created Phi assignment: let array_data#1: bytes = undefined while trying to resolve 'array_data' in block@6: // for_body_L232
debug: Looking for 'header_cursor' in an unsealed block creating an incomplete Phi: block@6: // for_body_L232
debug: Created Phi assignment: let header_cursor#1: uint64 = undefined while trying to resolve 'header_cursor' in block@6: // for_body_L232
debug: Terminated block@6: // for_body_L232
debug: Sealing block@7: // for_footer_L232
debug: Terminated block@7: // for_footer_L232
debug: Sealing block@8: // for_increment_L232
debug: Terminated block@8: // for_increment_L232
debug: Sealing block@5: // for_header_L232
debug: Added range_item%2#0 to Phi node: let range_item%2#1: uint64 = φ(range_item%2#0 <- block@4) in block@4: // for_preamble_L232
debug: Added range_item%2#3 to Phi node: let range_item%2#1: uint64 = φ(range_item%2#0 <- block@4, range_item%2#3 <- block@8) in block@8: // for_increment_L232
debug: Sealing block@6: // for_body_L232
debug: Added range_item%2#1 to Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@5) in block@5: // for_header_L232
debug: Replacing trivial Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@5) (range_item%2#2) with range_item%2#1
debug: Deleting Phi assignment: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@5)
debug: Replaced trivial Phi node: let range_item%2#2: uint64 = φ(range_item%2#1 <- block@5) (range_item%2#2) with range_item%2#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_cursor#4: uint64 = undefined while trying to resolve 'tail_cursor' in block@5: // for_header_L232
debug: Created Phi assignment: let tail_cursor#5: uint64 = undefined while trying to resolve 'tail_cursor' in block@3: // after_if_else_L227
debug: Added tail_cursor#0 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1) in block@1: // if_body_L227
debug: Added tail_cursor#1 to Phi node: let tail_cursor#5: uint64 = φ(tail_cursor#0 <- block@1, tail_cursor#1 <- block@2) in block@2: // else_body_L227
debug: Added tail_cursor#5 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@4) in block@4: // for_preamble_L232
debug: Added tail_cursor#3 to Phi node: let tail_cursor#4: uint64 = φ(tail_cursor#5 <- block@4, tail_cursor#3 <- block@8) in block@8: // for_increment_L232
debug: Added tail_cursor#4 to Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@5) in block@5: // for_header_L232
debug: Replacing trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@5) (tail_cursor#2) with tail_cursor#4
debug: Deleting Phi assignment: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@5)
debug: Replaced trivial Phi node: let tail_cursor#2: uint64 = φ(tail_cursor#4 <- block@5) (tail_cursor#2) with tail_cursor#4 in current definition for 0 blocks
debug: Created Phi assignment: let array_data#3: bytes = undefined while trying to resolve 'array_data' in block@5: // for_header_L232
debug: Created Phi assignment: let array_data#4: bytes = undefined while trying to resolve 'array_data' in block@3: // after_if_else_L227
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1) in block@1: // if_body_L227
debug: Added array_data#0 to Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) in block@2: // else_body_L227
debug: Replacing trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0
debug: Deleting Phi assignment: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2)
debug: Replaced trivial Phi node: let array_data#4: bytes = φ(array_data#0 <- block@1, array_data#0 <- block@2) (array_data#4) with array_data#0 in current definition for 1 blocks
debug: Added array_data#0 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@4) in block@4: // for_preamble_L232
debug: Added array_data#2 to Phi node: let array_data#3: bytes = φ(array_data#0 <- block@4, array_data#2 <- block@8) in block@8: // for_increment_L232
debug: Added array_data#3 to Phi node: let array_data#1: bytes = φ(array_data#3 <- block@5) in block@5: // for_header_L232
debug: Replacing trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@5) (array_data#1) with array_data#3
debug: Deleting Phi assignment: let array_data#1: bytes = φ(array_data#3 <- block@5)
debug: Replaced trivial Phi node: let array_data#1: bytes = φ(array_data#3 <- block@5) (array_data#1) with array_data#3 in current definition for 0 blocks
debug: Created Phi assignment: let header_cursor#3: uint64 = undefined while trying to resolve 'header_cursor' in block@5: // for_header_L232
debug: Created Phi assignment: let header_cursor#4: uint64 = undefined while trying to resolve 'header_cursor' in block@3: // after_if_else_L227
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1) in block@1: // if_body_L227
debug: Added header_cursor#0 to Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) in block@2: // else_body_L227
debug: Replacing trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0
debug: Deleting Phi assignment: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2)
debug: Replaced trivial Phi node: let header_cursor#4: uint64 = φ(header_cursor#0 <- block@1, header_cursor#0 <- block@2) (header_cursor#4) with header_cursor#0 in current definition for 1 blocks
debug: Added header_cursor#0 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@4) in block@4: // for_preamble_L232
debug: Added header_cursor#2 to Phi node: let header_cursor#3: uint64 = φ(header_cursor#0 <- block@4, header_cursor#2 <- block@8) in block@8: // for_increment_L232
debug: Added header_cursor#3 to Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@5) in block@5: // for_header_L232
debug: Replacing trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@5) (header_cursor#1) with header_cursor#3
debug: Deleting Phi assignment: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@5)
debug: Replaced trivial Phi node: let header_cursor#1: uint64 = φ(header_cursor#3 <- block@5) (header_cursor#1) with header_cursor#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L232
debug: Created Phi assignment: let array_data#5: bytes = undefined while trying to resolve 'array_data' in block@9: // after_for_L232
debug: Added array_data#0 to Phi node: let array_data#5: bytes = φ(array_data#0 <- block@3) in block@3: // after_if_else_L227
debug: Added array_data#3 to Phi node: let array_data#5: bytes = φ(array_data#0 <- block@3, array_data#3 <- block@5) in block@5: // for_header_L232
debug: Terminated block@9: // after_for_L232
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L5
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L5
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L5
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L16
debug: Terminated block@0: // L16
debug: Sealing block@0: // L26
debug: Terminated block@0: // L26
debug: Sealing block@0: // L36
debug: Terminated block@0: // L36
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@None: // ternary_true_L26
debug: Sealing block@None: // ternary_false_L26
debug: Terminated block@1: // ternary_true_L26
debug: Terminated block@2: // ternary_false_L26
debug: Sealing block@3: // ternary_merge_L26
debug: Created Phi assignment: let ternary_result%13#2: uint64 = undefined while trying to resolve 'ternary_result%13' in block@3: // ternary_merge_L26
debug: Added ternary_result%13#0 to Phi node: let ternary_result%13#2: uint64 = φ(ternary_result%13#0 <- block@1) in block@1: // ternary_true_L26
debug: Added ternary_result%13#1 to Phi node: let ternary_result%13#2: uint64 = φ(ternary_result%13#0 <- block@1, ternary_result%13#1 <- block@2) in block@2: // ternary_false_L26
debug: Created Phi assignment: let abc#1: bytes = undefined while trying to resolve 'abc' in block@3: // ternary_merge_L26
debug: Added abc#0 to Phi node: let abc#1: bytes = φ(abc#0 <- block@1) in block@1: // ternary_true_L26
debug: Added abc#0 to Phi node: let abc#1: bytes = φ(abc#0 <- block@1, abc#0 <- block@2) in block@2: // ternary_false_L26
debug: Replacing trivial Phi node: let abc#1: bytes = φ(abc#0 <- block@1, abc#0 <- block@2) (abc#1) with abc#0
debug: Deleting Phi assignment: let abc#1: bytes = φ(abc#0 <- block@1, abc#0 <- block@2)
debug: Replaced trivial Phi node: let abc#1: bytes = φ(abc#0 <- block@1, abc#0 <- block@2) (abc#1) with abc#0 in current definition for 1 blocks
debug: Terminated block@3: // ternary_merge_L26
debug: Sealing block@None: // ternary_true_L27
debug: Sealing block@None: // ternary_false_L27
debug: Terminated block@4: // ternary_true_L27
debug: Terminated block@5: // ternary_false_L27
debug: Sealing block@6: // ternary_merge_L27
debug: Created Phi assignment: let ternary_result%19#2: uint64 = undefined while trying to resolve 'ternary_result%19' in block@6: // ternary_merge_L27
debug: Added ternary_result%19#0 to Phi node: let ternary_result%19#2: uint64 = φ(ternary_result%19#0 <- block@4) in block@4: // ternary_true_L27
debug: Added ternary_result%19#1 to Phi node: let ternary_result%19#2: uint64 = φ(ternary_result%19#0 <- block@4, ternary_result%19#1 <- block@5) in block@5: // ternary_false_L27
debug: Created Phi assignment: let abc#2: bytes = undefined while trying to resolve 'abc' in block@6: // ternary_merge_L27
debug: Added abc#0 to Phi node: let abc#2: bytes = φ(abc#0 <- block@4) in block@4: // ternary_true_L27
debug: Added abc#0 to Phi node: let abc#2: bytes = φ(abc#0 <- block@4, abc#0 <- block@5) in block@5: // ternary_false_L27
debug: Replacing trivial Phi node: let abc#2: bytes = φ(abc#0 <- block@4, abc#0 <- block@5) (abc#2) with abc#0
debug: Deleting Phi assignment: let abc#2: bytes = φ(abc#0 <- block@4, abc#0 <- block@5)
debug: Replaced trivial Phi node: let abc#2: bytes = φ(abc#0 <- block@4, abc#0 <- block@5) (abc#2) with abc#0 in current definition for 1 blocks
debug: Terminated block@6: // ternary_merge_L27
debug: Sealing block@None: // ternary_true_L27
debug: Sealing block@None: // ternary_false_L27
debug: Terminated block@7: // ternary_true_L27
debug: Terminated block@8: // ternary_false_L27
debug: Sealing block@9: // ternary_merge_L27
debug: Created Phi assignment: let ternary_result%21#2: uint64 = undefined while trying to resolve 'ternary_result%21' in block@9: // ternary_merge_L27
debug: Added ternary_result%21#0 to Phi node: let ternary_result%21#2: uint64 = φ(ternary_result%21#0 <- block@7) in block@7: // ternary_true_L27
debug: Added ternary_result%21#1 to Phi node: let ternary_result%21#2: uint64 = φ(ternary_result%21#0 <- block@7, ternary_result%21#1 <- block@8) in block@8: // ternary_false_L27
debug: Created Phi assignment: let abc#3: bytes = undefined while trying to resolve 'abc' in block@9: // ternary_merge_L27
debug: Added abc#0 to Phi node: let abc#3: bytes = φ(abc#0 <- block@7) in block@7: // ternary_true_L27
debug: Added abc#0 to Phi node: let abc#3: bytes = φ(abc#0 <- block@7, abc#0 <- block@8) in block@8: // ternary_false_L27
debug: Replacing trivial Phi node: let abc#3: bytes = φ(abc#0 <- block@7, abc#0 <- block@8) (abc#3) with abc#0
debug: Deleting Phi assignment: let abc#3: bytes = φ(abc#0 <- block@7, abc#0 <- block@8)
debug: Replaced trivial Phi node: let abc#3: bytes = φ(abc#0 <- block@7, abc#0 <- block@8) (abc#3) with abc#0 in current definition for 1 blocks
debug: Terminated block@9: // ternary_merge_L27
debug: Sealing block@None: // ternary_true_L28
debug: Sealing block@None: // ternary_false_L28
debug: Terminated block@10: // ternary_true_L28
debug: Terminated block@11: // ternary_false_L28
debug: Sealing block@12: // ternary_merge_L28
debug: Created Phi assignment: let ternary_result%26#2: uint64 = undefined while trying to resolve 'ternary_result%26' in block@12: // ternary_merge_L28
debug: Added ternary_result%26#0 to Phi node: let ternary_result%26#2: uint64 = φ(ternary_result%26#0 <- block@10) in block@10: // ternary_true_L28
debug: Added ternary_result%26#1 to Phi node: let ternary_result%26#2: uint64 = φ(ternary_result%26#0 <- block@10, ternary_result%26#1 <- block@11) in block@11: // ternary_false_L28
debug: Created Phi assignment: let abc#4: bytes = undefined while trying to resolve 'abc' in block@12: // ternary_merge_L28
debug: Added abc#0 to Phi node: let abc#4: bytes = φ(abc#0 <- block@10) in block@10: // ternary_true_L28
debug: Added abc#0 to Phi node: let abc#4: bytes = φ(abc#0 <- block@10, abc#0 <- block@11) in block@11: // ternary_false_L28
debug: Replacing trivial Phi node: let abc#4: bytes = φ(abc#0 <- block@10, abc#0 <- block@11) (abc#4) with abc#0
debug: Deleting Phi assignment: let abc#4: bytes = φ(abc#0 <- block@10, abc#0 <- block@11)
debug: Replaced trivial Phi node: let abc#4: bytes = φ(abc#0 <- block@10, abc#0 <- block@11) (abc#4) with abc#0 in current definition for 1 blocks
debug: Terminated block@12: // ternary_merge_L28
debug: Sealing block@None: // ternary_true_L29
debug: Sealing block@None: // ternary_false_L29
debug: Terminated block@13: // ternary_true_L29
debug: Terminated block@14: // ternary_false_L29
debug: Sealing block@15: // ternary_merge_L29
debug: Created Phi assignment: let ternary_result%31#2: uint64 = undefined while trying to resolve 'ternary_result%31' in block@15: // ternary_merge_L29
debug: Added ternary_result%31#0 to Phi node: let ternary_result%31#2: uint64 = φ(ternary_result%31#0 <- block@13) in block@13: // ternary_true_L29
debug: Added ternary_result%31#1 to Phi node: let ternary_result%31#2: uint64 = φ(ternary_result%31#0 <- block@13, ternary_result%31#1 <- block@14) in block@14: // ternary_false_L29
debug: Created Phi assignment: let abc#5: bytes = undefined while trying to resolve 'abc' in block@15: // ternary_merge_L29
debug: Added abc#0 to Phi node: let abc#5: bytes = φ(abc#0 <- block@13) in block@13: // ternary_true_L29
debug: Added abc#0 to Phi node: let abc#5: bytes = φ(abc#0 <- block@13, abc#0 <- block@14) in block@14: // ternary_false_L29
debug: Replacing trivial Phi node: let abc#5: bytes = φ(abc#0 <- block@13, abc#0 <- block@14) (abc#5) with abc#0
debug: Deleting Phi assignment: let abc#5: bytes = φ(abc#0 <- block@13, abc#0 <- block@14)
debug: Replaced trivial Phi node: let abc#5: bytes = φ(abc#0 <- block@13, abc#0 <- block@14) (abc#5) with abc#0 in current definition for 1 blocks
debug: Terminated block@15: // ternary_merge_L29
debug: Sealing block@None: // ternary_true_L30
debug: Sealing block@None: // ternary_false_L30
debug: Terminated block@16: // ternary_true_L30
debug: Terminated block@17: // ternary_false_L30
debug: Sealing block@18: // ternary_merge_L30
debug: Created Phi assignment: let ternary_result%36#2: uint64 = undefined while trying to resolve 'ternary_result%36' in block@18: // ternary_merge_L30
debug: Added ternary_result%36#0 to Phi node: let ternary_result%36#2: uint64 = φ(ternary_result%36#0 <- block@16) in block@16: // ternary_true_L30
debug: Added ternary_result%36#1 to Phi node: let ternary_result%36#2: uint64 = φ(ternary_result%36#0 <- block@16, ternary_result%36#1 <- block@17) in block@17: // ternary_false_L30
debug: Created Phi assignment: let abc#6: bytes = undefined while trying to resolve 'abc' in block@18: // ternary_merge_L30
debug: Added abc#0 to Phi node: let abc#6: bytes = φ(abc#0 <- block@16) in block@16: // ternary_true_L30
debug: Added abc#0 to Phi node: let abc#6: bytes = φ(abc#0 <- block@16, abc#0 <- block@17) in block@17: // ternary_false_L30
debug: Replacing trivial Phi node: let abc#6: bytes = φ(abc#0 <- block@16, abc#0 <- block@17) (abc#6) with abc#0
debug: Deleting Phi assignment: let abc#6: bytes = φ(abc#0 <- block@16, abc#0 <- block@17)
debug: Replaced trivial Phi node: let abc#6: bytes = φ(abc#0 <- block@16, abc#0 <- block@17) (abc#6) with abc#0 in current definition for 1 blocks
debug: Terminated block@18: // ternary_merge_L30
debug: Sealing block@None: // ternary_true_L31
debug: Sealing block@None: // ternary_false_L31
debug: Terminated block@19: // ternary_true_L31
debug: Terminated block@20: // ternary_false_L31
debug: Sealing block@21: // ternary_merge_L31
debug: Created Phi assignment: let ternary_result%42#2: uint64 = undefined while trying to resolve 'ternary_result%42' in block@21: // ternary_merge_L31
debug: Added ternary_result%42#0 to Phi node: let ternary_result%42#2: uint64 = φ(ternary_result%42#0 <- block@19) in block@19: // ternary_true_L31
debug: Added ternary_result%42#1 to Phi node: let ternary_result%42#2: uint64 = φ(ternary_result%42#0 <- block@19, ternary_result%42#1 <- block@20) in block@20: // ternary_false_L31
debug: Created Phi assignment: let abc#7: bytes = undefined while trying to resolve 'abc' in block@21: // ternary_merge_L31
debug: Added abc#0 to Phi node: let abc#7: bytes = φ(abc#0 <- block@19) in block@19: // ternary_true_L31
debug: Added abc#0 to Phi node: let abc#7: bytes = φ(abc#0 <- block@19, abc#0 <- block@20) in block@20: // ternary_false_L31
debug: Replacing trivial Phi node: let abc#7: bytes = φ(abc#0 <- block@19, abc#0 <- block@20) (abc#7) with abc#0
debug: Deleting Phi assignment: let abc#7: bytes = φ(abc#0 <- block@19, abc#0 <- block@20)
debug: Replaced trivial Phi node: let abc#7: bytes = φ(abc#0 <- block@19, abc#0 <- block@20) (abc#7) with abc#0 in current definition for 1 blocks
debug: Terminated block@21: // ternary_merge_L31
debug: Sealing block@None: // ternary_true_L31
debug: Sealing block@None: // ternary_false_L31
debug: Terminated block@22: // ternary_true_L31
debug: Terminated block@23: // ternary_false_L31
debug: Sealing block@24: // ternary_merge_L31
debug: Created Phi assignment: let ternary_result%44#2: uint64 = undefined while trying to resolve 'ternary_result%44' in block@24: // ternary_merge_L31
debug: Added ternary_result%44#0 to Phi node: let ternary_result%44#2: uint64 = φ(ternary_result%44#0 <- block@22) in block@22: // ternary_true_L31
debug: Added ternary_result%44#1 to Phi node: let ternary_result%44#2: uint64 = φ(ternary_result%44#0 <- block@22, ternary_result%44#1 <- block@23) in block@23: // ternary_false_L31
debug: Created Phi assignment: let abc#8: bytes = undefined while trying to resolve 'abc' in block@24: // ternary_merge_L31
debug: Added abc#0 to Phi node: let abc#8: bytes = φ(abc#0 <- block@22) in block@22: // ternary_true_L31
debug: Added abc#0 to Phi node: let abc#8: bytes = φ(abc#0 <- block@22, abc#0 <- block@23) in block@23: // ternary_false_L31
debug: Replacing trivial Phi node: let abc#8: bytes = φ(abc#0 <- block@22, abc#0 <- block@23) (abc#8) with abc#0
debug: Deleting Phi assignment: let abc#8: bytes = φ(abc#0 <- block@22, abc#0 <- block@23)
debug: Replaced trivial Phi node: let abc#8: bytes = φ(abc#0 <- block@22, abc#0 <- block@23) (abc#8) with abc#0 in current definition for 1 blocks
debug: Terminated block@24: // ternary_merge_L31
debug: Sealing block@None: // ternary_true_L33
debug: Sealing block@None: // ternary_false_L33
debug: Terminated block@25: // ternary_true_L33
debug: Terminated block@26: // ternary_false_L33
debug: Sealing block@27: // ternary_merge_L33
debug: Created Phi assignment: let ternary_result%51#2: uint64 = undefined while trying to resolve 'ternary_result%51' in block@27: // ternary_merge_L33
debug: Added ternary_result%51#0 to Phi node: let ternary_result%51#2: uint64 = φ(ternary_result%51#0 <- block@25) in block@25: // ternary_true_L33
debug: Added ternary_result%51#1 to Phi node: let ternary_result%51#2: uint64 = φ(ternary_result%51#0 <- block@25, ternary_result%51#1 <- block@26) in block@26: // ternary_false_L33
debug: Created Phi assignment: let abc#9: bytes = undefined while trying to resolve 'abc' in block@27: // ternary_merge_L33
debug: Added abc#0 to Phi node: let abc#9: bytes = φ(abc#0 <- block@25) in block@25: // ternary_true_L33
debug: Added abc#0 to Phi node: let abc#9: bytes = φ(abc#0 <- block@25, abc#0 <- block@26) in block@26: // ternary_false_L33
debug: Replacing trivial Phi node: let abc#9: bytes = φ(abc#0 <- block@25, abc#0 <- block@26) (abc#9) with abc#0
debug: Deleting Phi assignment: let abc#9: bytes = φ(abc#0 <- block@25, abc#0 <- block@26)
debug: Replaced trivial Phi node: let abc#9: bytes = φ(abc#0 <- block@25, abc#0 <- block@26) (abc#9) with abc#0 in current definition for 1 blocks
debug: Terminated block@27: // ternary_merge_L33
debug: Sealing block@None: // ternary_true_L33
debug: Sealing block@None: // ternary_false_L33
debug: Terminated block@28: // ternary_true_L33
debug: Terminated block@29: // ternary_false_L33
debug: Sealing block@30: // ternary_merge_L33
debug: Created Phi assignment: let ternary_result%53#2: uint64 = undefined while trying to resolve 'ternary_result%53' in block@30: // ternary_merge_L33
debug: Added ternary_result%53#0 to Phi node: let ternary_result%53#2: uint64 = φ(ternary_result%53#0 <- block@28) in block@28: // ternary_true_L33
debug: Added ternary_result%53#1 to Phi node: let ternary_result%53#2: uint64 = φ(ternary_result%53#0 <- block@28, ternary_result%53#1 <- block@29) in block@29: // ternary_false_L33
debug: Terminated block@30: // ternary_merge_L33
debug: Sealing block@None: // ternary_true_L38
debug: Sealing block@None: // ternary_false_L38
debug: Terminated block@31: // ternary_true_L38
debug: Terminated block@32: // ternary_false_L38
debug: Sealing block@33: // ternary_merge_L38
debug: Created Phi assignment: let ternary_result%57#2: bytes = undefined while trying to resolve 'ternary_result%57' in block@33: // ternary_merge_L38
debug: Added ternary_result%57#0 to Phi node: let ternary_result%57#2: bytes = φ(ternary_result%57#0 <- block@31) in block@31: // ternary_true_L38
debug: Added ternary_result%57#1 to Phi node: let ternary_result%57#2: bytes = φ(ternary_result%57#0 <- block@31, ternary_result%57#1 <- block@32) in block@32: // ternary_false_L38
debug: Created Phi assignment: let true#1: bytes = undefined while trying to resolve 'true' in block@33: // ternary_merge_L38
debug: Added true#0 to Phi node: let true#1: bytes = φ(true#0 <- block@31) in block@31: // ternary_true_L38
debug: Added true#0 to Phi node: let true#1: bytes = φ(true#0 <- block@31, true#0 <- block@32) in block@32: // ternary_false_L38
debug: Replacing trivial Phi node: let true#1: bytes = φ(true#0 <- block@31, true#0 <- block@32) (true#1) with true#0
debug: Deleting Phi assignment: let true#1: bytes = φ(true#0 <- block@31, true#0 <- block@32)
debug: Replaced trivial Phi node: let true#1: bytes = φ(true#0 <- block@31, true#0 <- block@32) (true#1) with true#0 in current definition for 1 blocks
debug: Terminated block@33: // ternary_merge_L38
debug: Sealing block@None: // ternary_true_L40
debug: Sealing block@None: // ternary_false_L40
debug: Terminated block@34: // ternary_true_L40
debug: Terminated block@35: // ternary_false_L40
debug: Sealing block@36: // ternary_merge_L40
debug: Created Phi assignment: let ternary_result%59#2: bytes = undefined while trying to resolve 'ternary_result%59' in block@36: // ternary_merge_L40
debug: Added ternary_result%59#0 to Phi node: let ternary_result%59#2: bytes = φ(ternary_result%59#0 <- block@34) in block@34: // ternary_true_L40
debug: Added ternary_result%59#1 to Phi node: let ternary_result%59#2: bytes = φ(ternary_result%59#0 <- block@34, ternary_result%59#1 <- block@35) in block@35: // ternary_false_L40
debug: Created Phi assignment: let true#2: bytes = undefined while trying to resolve 'true' in block@36: // ternary_merge_L40
debug: Added true#0 to Phi node: let true#2: bytes = φ(true#0 <- block@34) in block@34: // ternary_true_L40
debug: Added true#0 to Phi node: let true#2: bytes = φ(true#0 <- block@34, true#0 <- block@35) in block@35: // ternary_false_L40
debug: Replacing trivial Phi node: let true#2: bytes = φ(true#0 <- block@34, true#0 <- block@35) (true#2) with true#0
debug: Deleting Phi assignment: let true#2: bytes = φ(true#0 <- block@34, true#0 <- block@35)
debug: Replaced trivial Phi node: let true#2: bytes = φ(true#0 <- block@34, true#0 <- block@35) (true#2) with true#0 in current definition for 1 blocks
debug: Terminated block@36: // ternary_merge_L40
debug: Sealing block@None: // ternary_true_L41
debug: Sealing block@None: // ternary_false_L41
debug: Terminated block@37: // ternary_true_L41
debug: Created Phi assignment: let false#1: bytes = undefined while trying to resolve 'false' in block@36: // ternary_merge_L40
debug: Created Phi assignment: let false#2: bytes = undefined while trying to resolve 'false' in block@33: // ternary_merge_L38
debug: Added false#0 to Phi node: let false#2: bytes = φ(false#0 <- block@31) in block@31: // ternary_true_L38
debug: Added false#0 to Phi node: let false#2: bytes = φ(false#0 <- block@31, false#0 <- block@32) in block@32: // ternary_false_L38
debug: Replacing trivial Phi node: let false#2: bytes = φ(false#0 <- block@31, false#0 <- block@32) (false#2) with false#0
debug: Deleting Phi assignment: let false#2: bytes = φ(false#0 <- block@31, false#0 <- block@32)
debug: Replaced trivial Phi node: let false#2: bytes = φ(false#0 <- block@31, false#0 <- block@32) (false#2) with false#0 in current definition for 1 blocks
debug: Added false#0 to Phi node: let false#1: bytes = φ(false#0 <- block@34) in block@34: // ternary_true_L40
debug: Added false#0 to Phi node: let false#1: bytes = φ(false#0 <- block@34, false#0 <- block@35) in block@35: // ternary_false_L40
debug: Replacing trivial Phi node: let false#1: bytes = φ(false#0 <- block@34, false#0 <- block@35) (false#1) with false#0
debug: Deleting Phi assignment: let false#1: bytes = φ(false#0 <- block@34, false#0 <- block@35)
debug: Replaced trivial Phi node: let false#1: bytes = φ(false#0 <- block@34, false#0 <- block@35) (false#1) with false#0 in current definition for 1 blocks
debug: Terminated block@38: // ternary_false_L41
debug: Sealing block@39: // ternary_merge_L41
debug: Created Phi assignment: let ternary_result%62#2: bytes = undefined while trying to resolve 'ternary_result%62' in block@39: // ternary_merge_L41
debug: Added ternary_result%62#0 to Phi node: let ternary_result%62#2: bytes = φ(ternary_result%62#0 <- block@37) in block@37: // ternary_true_L41
debug: Added ternary_result%62#1 to Phi node: let ternary_result%62#2: bytes = φ(ternary_result%62#0 <- block@37, ternary_result%62#1 <- block@38) in block@38: // ternary_false_L41
debug: Created Phi assignment: let false#3: bytes = undefined while trying to resolve 'false' in block@39: // ternary_merge_L41
debug: Added false#0 to Phi node: let false#3: bytes = φ(false#0 <- block@37) in block@37: // ternary_true_L41
debug: Added false#0 to Phi node: let false#3: bytes = φ(false#0 <- block@37, false#0 <- block@38) in block@38: // ternary_false_L41
debug: Replacing trivial Phi node: let false#3: bytes = φ(false#0 <- block@37, false#0 <- block@38) (false#3) with false#0
debug: Deleting Phi assignment: let false#3: bytes = φ(false#0 <- block@37, false#0 <- block@38)
debug: Replaced trivial Phi node: let false#3: bytes = φ(false#0 <- block@37, false#0 <- block@38) (false#3) with false#0 in current definition for 1 blocks
debug: Terminated block@39: // ternary_merge_L41
debug: Sealing block@None: // ternary_true_L42
debug: Sealing block@None: // ternary_false_L42
debug: Terminated block@40: // ternary_true_L42
debug: Created Phi assignment: let true#3: bytes = undefined while trying to resolve 'true' in block@39: // ternary_merge_L41
debug: Added true#0 to Phi node: let true#3: bytes = φ(true#0 <- block@37) in block@37: // ternary_true_L41
debug: Added true#0 to Phi node: let true#3: bytes = φ(true#0 <- block@37, true#0 <- block@38) in block@38: // ternary_false_L41
debug: Replacing trivial Phi node: let true#3: bytes = φ(true#0 <- block@37, true#0 <- block@38) (true#3) with true#0
debug: Deleting Phi assignment: let true#3: bytes = φ(true#0 <- block@37, true#0 <- block@38)
debug: Replaced trivial Phi node: let true#3: bytes = φ(true#0 <- block@37, true#0 <- block@38) (true#3) with true#0 in current definition for 1 blocks
debug: Terminated block@41: // ternary_false_L42
debug: Sealing block@42: // ternary_merge_L42
debug: Created Phi assignment: let ternary_result%65#2: bytes = undefined while trying to resolve 'ternary_result%65' in block@42: // ternary_merge_L42
debug: Added ternary_result%65#0 to Phi node: let ternary_result%65#2: bytes = φ(ternary_result%65#0 <- block@40) in block@40: // ternary_true_L42
debug: Added ternary_result%65#1 to Phi node: let ternary_result%65#2: bytes = φ(ternary_result%65#0 <- block@40, ternary_result%65#1 <- block@41) in block@41: // ternary_false_L42
debug: Created Phi assignment: let false#4: bytes = undefined while trying to resolve 'false' in block@42: // ternary_merge_L42
debug: Added false#0 to Phi node: let false#4: bytes = φ(false#0 <- block@40) in block@40: // ternary_true_L42
debug: Added false#0 to Phi node: let false#4: bytes = φ(false#0 <- block@40, false#0 <- block@41) in block@41: // ternary_false_L42
debug: Replacing trivial Phi node: let false#4: bytes = φ(false#0 <- block@40, false#0 <- block@41) (false#4) with false#0
debug: Deleting Phi assignment: let false#4: bytes = φ(false#0 <- block@40, false#0 <- block@41)
debug: Replaced trivial Phi node: let false#4: bytes = φ(false#0 <- block@40, false#0 <- block@41) (false#4) with false#0 in current definition for 1 blocks
debug: Terminated block@42: // ternary_merge_L42
debug: Sealing block@None: // ternary_true_L43
debug: Sealing block@None: // ternary_false_L43
debug: Terminated block@43: // ternary_true_L43
debug: Terminated block@44: // ternary_false_L43
debug: Sealing block@45: // ternary_merge_L43
debug: Created Phi assignment: let ternary_result%68#2: bytes = undefined while trying to resolve 'ternary_result%68' in block@45: // ternary_merge_L43
debug: Added ternary_result%68#0 to Phi node: let ternary_result%68#2: bytes = φ(ternary_result%68#0 <- block@43) in block@43: // ternary_true_L43
debug: Added ternary_result%68#1 to Phi node: let ternary_result%68#2: bytes = φ(ternary_result%68#0 <- block@43, ternary_result%68#1 <- block@44) in block@44: // ternary_false_L43
debug: Created Phi assignment: let false#5: bytes = undefined while trying to resolve 'false' in block@45: // ternary_merge_L43
debug: Added false#0 to Phi node: let false#5: bytes = φ(false#0 <- block@43) in block@43: // ternary_true_L43
debug: Added false#0 to Phi node: let false#5: bytes = φ(false#0 <- block@43, false#0 <- block@44) in block@44: // ternary_false_L43
debug: Replacing trivial Phi node: let false#5: bytes = φ(false#0 <- block@43, false#0 <- block@44) (false#5) with false#0
debug: Deleting Phi assignment: let false#5: bytes = φ(false#0 <- block@43, false#0 <- block@44)
debug: Replaced trivial Phi node: let false#5: bytes = φ(false#0 <- block@43, false#0 <- block@44) (false#5) with false#0 in current definition for 1 blocks
debug: Created Phi assignment: let true#4: bytes = undefined while trying to resolve 'true' in block@45: // ternary_merge_L43
debug: Created Phi assignment: let true#5: bytes = undefined while trying to resolve 'true' in block@42: // ternary_merge_L42
debug: Added true#0 to Phi node: let true#5: bytes = φ(true#0 <- block@40) in block@40: // ternary_true_L42
debug: Added true#0 to Phi node: let true#5: bytes = φ(true#0 <- block@40, true#0 <- block@41) in block@41: // ternary_false_L42
debug: Replacing trivial Phi node: let true#5: bytes = φ(true#0 <- block@40, true#0 <- block@41) (true#5) with true#0
debug: Deleting Phi assignment: let true#5: bytes = φ(true#0 <- block@40, true#0 <- block@41)
debug: Replaced trivial Phi node: let true#5: bytes = φ(true#0 <- block@40, true#0 <- block@41) (true#5) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#4: bytes = φ(true#0 <- block@43) in block@43: // ternary_true_L43
debug: Added true#0 to Phi node: let true#4: bytes = φ(true#0 <- block@43, true#0 <- block@44) in block@44: // ternary_false_L43
debug: Replacing trivial Phi node: let true#4: bytes = φ(true#0 <- block@43, true#0 <- block@44) (true#4) with true#0
debug: Deleting Phi assignment: let true#4: bytes = φ(true#0 <- block@43, true#0 <- block@44)
debug: Replaced trivial Phi node: let true#4: bytes = φ(true#0 <- block@43, true#0 <- block@44) (true#4) with true#0 in current definition for 1 blocks
debug: Terminated block@45: // ternary_merge_L43
debug: Sealing block@None: // ternary_true_L44
debug: Sealing block@None: // ternary_false_L44
debug: Terminated block@46: // ternary_true_L44
debug: Terminated block@47: // ternary_false_L44
debug: Sealing block@48: // ternary_merge_L44
debug: Created Phi assignment: let ternary_result%71#2: bytes = undefined while trying to resolve 'ternary_result%71' in block@48: // ternary_merge_L44
debug: Added ternary_result%71#0 to Phi node: let ternary_result%71#2: bytes = φ(ternary_result%71#0 <- block@46) in block@46: // ternary_true_L44
debug: Added ternary_result%71#1 to Phi node: let ternary_result%71#2: bytes = φ(ternary_result%71#0 <- block@46, ternary_result%71#1 <- block@47) in block@47: // ternary_false_L44
debug: Created Phi assignment: let true#6: bytes = undefined while trying to resolve 'true' in block@48: // ternary_merge_L44
debug: Added true#0 to Phi node: let true#6: bytes = φ(true#0 <- block@46) in block@46: // ternary_true_L44
debug: Added true#0 to Phi node: let true#6: bytes = φ(true#0 <- block@46, true#0 <- block@47) in block@47: // ternary_false_L44
debug: Replacing trivial Phi node: let true#6: bytes = φ(true#0 <- block@46, true#0 <- block@47) (true#6) with true#0
debug: Deleting Phi assignment: let true#6: bytes = φ(true#0 <- block@46, true#0 <- block@47)
debug: Replaced trivial Phi node: let true#6: bytes = φ(true#0 <- block@46, true#0 <- block@47) (true#6) with true#0 in current definition for 1 blocks
debug: Terminated block@48: // ternary_merge_L44
debug: Sealing block@None: // ternary_true_L45
debug: Sealing block@None: // ternary_false_L45
debug: Terminated block@49: // ternary_true_L45
debug: Created Phi assignment: let false#6: bytes = undefined while trying to resolve 'false' in block@48: // ternary_merge_L44
debug: Added false#0 to Phi node: let false#6: bytes = φ(false#0 <- block@46) in block@46: // ternary_true_L44
debug: Added false#0 to Phi node: let false#6: bytes = φ(false#0 <- block@46, false#0 <- block@47) in block@47: // ternary_false_L44
debug: Replacing trivial Phi node: let false#6: bytes = φ(false#0 <- block@46, false#0 <- block@47) (false#6) with false#0
debug: Deleting Phi assignment: let false#6: bytes = φ(false#0 <- block@46, false#0 <- block@47)
debug: Replaced trivial Phi node: let false#6: bytes = φ(false#0 <- block@46, false#0 <- block@47) (false#6) with false#0 in current definition for 1 blocks
debug: Terminated block@50: // ternary_false_L45
debug: Sealing block@51: // ternary_merge_L45
debug: Created Phi assignment: let ternary_result%74#2: bytes = undefined while trying to resolve 'ternary_result%74' in block@51: // ternary_merge_L45
debug: Added ternary_result%74#0 to Phi node: let ternary_result%74#2: bytes = φ(ternary_result%74#0 <- block@49) in block@49: // ternary_true_L45
debug: Added ternary_result%74#1 to Phi node: let ternary_result%74#2: bytes = φ(ternary_result%74#0 <- block@49, ternary_result%74#1 <- block@50) in block@50: // ternary_false_L45
debug: Created Phi assignment: let true#7: bytes = undefined while trying to resolve 'true' in block@51: // ternary_merge_L45
debug: Added true#0 to Phi node: let true#7: bytes = φ(true#0 <- block@49) in block@49: // ternary_true_L45
debug: Added true#0 to Phi node: let true#7: bytes = φ(true#0 <- block@49, true#0 <- block@50) in block@50: // ternary_false_L45
debug: Replacing trivial Phi node: let true#7: bytes = φ(true#0 <- block@49, true#0 <- block@50) (true#7) with true#0
debug: Deleting Phi assignment: let true#7: bytes = φ(true#0 <- block@49, true#0 <- block@50)
debug: Replaced trivial Phi node: let true#7: bytes = φ(true#0 <- block@49, true#0 <- block@50) (true#7) with true#0 in current definition for 1 blocks
debug: Created Phi assignment: let false#7: bytes = undefined while trying to resolve 'false' in block@51: // ternary_merge_L45
debug: Added false#0 to Phi node: let false#7: bytes = φ(false#0 <- block@49) in block@49: // ternary_true_L45
debug: Added false#0 to Phi node: let false#7: bytes = φ(false#0 <- block@49, false#0 <- block@50) in block@50: // ternary_false_L45
debug: Replacing trivial Phi node: let false#7: bytes = φ(false#0 <- block@49, false#0 <- block@50) (false#7) with false#0
debug: Deleting Phi assignment: let false#7: bytes = φ(false#0 <- block@49, false#0 <- block@50)
debug: Replaced trivial Phi node: let false#7: bytes = φ(false#0 <- block@49, false#0 <- block@50) (false#7) with false#0 in current definition for 1 blocks
debug: Terminated block@51: // ternary_merge_L45
debug: Sealing block@None: // ternary_true_L46
debug: Sealing block@None: // ternary_false_L46
debug: Terminated block@52: // ternary_true_L46
debug: Terminated block@53: // ternary_false_L46
debug: Sealing block@54: // ternary_merge_L46
debug: Created Phi assignment: let ternary_result%77#2: bytes = undefined while trying to resolve 'ternary_result%77' in block@54: // ternary_merge_L46
debug: Added ternary_result%77#0 to Phi node: let ternary_result%77#2: bytes = φ(ternary_result%77#0 <- block@52) in block@52: // ternary_true_L46
debug: Added ternary_result%77#1 to Phi node: let ternary_result%77#2: bytes = φ(ternary_result%77#0 <- block@52, ternary_result%77#1 <- block@53) in block@53: // ternary_false_L46
debug: Created Phi assignment: let true#8: bytes = undefined while trying to resolve 'true' in block@54: // ternary_merge_L46
debug: Added true#0 to Phi node: let true#8: bytes = φ(true#0 <- block@52) in block@52: // ternary_true_L46
debug: Added true#0 to Phi node: let true#8: bytes = φ(true#0 <- block@52, true#0 <- block@53) in block@53: // ternary_false_L46
debug: Replacing trivial Phi node: let true#8: bytes = φ(true#0 <- block@52, true#0 <- block@53) (true#8) with true#0
debug: Deleting Phi assignment: let true#8: bytes = φ(true#0 <- block@52, true#0 <- block@53)
debug: Replaced trivial Phi node: let true#8: bytes = φ(true#0 <- block@52, true#0 <- block@53) (true#8) with true#0 in current definition for 1 blocks
debug: Created Phi assignment: let false#8: bytes = undefined while trying to resolve 'false' in block@54: // ternary_merge_L46
debug: Added false#0 to Phi node: let false#8: bytes = φ(false#0 <- block@52) in block@52: // ternary_true_L46
debug: Added false#0 to Phi node: let false#8: bytes = φ(false#0 <- block@52, false#0 <- block@53) in block@53: // ternary_false_L46
debug: Replacing trivial Phi node: let false#8: bytes = φ(false#0 <- block@52, false#0 <- block@53) (false#8) with false#0
debug: Deleting Phi assignment: let false#8: bytes = φ(false#0 <- block@52, false#0 <- block@53)
debug: Replaced trivial Phi node: let false#8: bytes = φ(false#0 <- block@52, false#0 <- block@53) (false#8) with false#0 in current definition for 1 blocks
debug: Terminated block@54: // ternary_merge_L46
debug: Sealing block@None: // ternary_true_L47
debug: Sealing block@None: // ternary_false_L47
debug: Terminated block@55: // ternary_true_L47
debug: Terminated block@56: // ternary_false_L47
debug: Sealing block@57: // ternary_merge_L47
debug: Created Phi assignment: let ternary_result%80#2: bytes = undefined while trying to resolve 'ternary_result%80' in block@57: // ternary_merge_L47
debug: Added ternary_result%80#0 to Phi node: let ternary_result%80#2: bytes = φ(ternary_result%80#0 <- block@55) in block@55: // ternary_true_L47
debug: Added ternary_result%80#1 to Phi node: let ternary_result%80#2: bytes = φ(ternary_result%80#0 <- block@55, ternary_result%80#1 <- block@56) in block@56: // ternary_false_L47
debug: Created Phi assignment: let false#9: bytes = undefined while trying to resolve 'false' in block@57: // ternary_merge_L47
debug: Added false#0 to Phi node: let false#9: bytes = φ(false#0 <- block@55) in block@55: // ternary_true_L47
debug: Added false#0 to Phi node: let false#9: bytes = φ(false#0 <- block@55, false#0 <- block@56) in block@56: // ternary_false_L47
debug: Replacing trivial Phi node: let false#9: bytes = φ(false#0 <- block@55, false#0 <- block@56) (false#9) with false#0
debug: Deleting Phi assignment: let false#9: bytes = φ(false#0 <- block@55, false#0 <- block@56)
debug: Replaced trivial Phi node: let false#9: bytes = φ(false#0 <- block@55, false#0 <- block@56) (false#9) with false#0 in current definition for 1 blocks
debug: Terminated block@57: // ternary_merge_L47
debug: Sealing block@0: // L70
debug: Terminated block@0: // L70
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@None: // ternary_true_L55
debug: Sealing block@None: // ternary_false_L55
debug: Terminated block@1: // ternary_true_L55
debug: Terminated block@2: // ternary_false_L55
debug: Sealing block@3: // ternary_merge_L55
debug: Created Phi assignment: let ternary_result%27#2: uint64 = undefined while trying to resolve 'ternary_result%27' in block@3: // ternary_merge_L55
debug: Added ternary_result%27#0 to Phi node: let ternary_result%27#2: uint64 = φ(ternary_result%27#0 <- block@1) in block@1: // ternary_true_L55
debug: Added ternary_result%27#1 to Phi node: let ternary_result%27#2: uint64 = φ(ternary_result%27#0 <- block@1, ternary_result%27#1 <- block@2) in block@2: // ternary_false_L55
debug: Created Phi assignment: let true#1: uint64 = undefined while trying to resolve 'true' in block@3: // ternary_merge_L55
debug: Added true#0 to Phi node: let true#1: uint64 = φ(true#0 <- block@1) in block@1: // ternary_true_L55
debug: Added true#0 to Phi node: let true#1: uint64 = φ(true#0 <- block@1, true#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let true#1: uint64 = φ(true#0 <- block@1, true#0 <- block@2) (true#1) with true#0
debug: Deleting Phi assignment: let true#1: uint64 = φ(true#0 <- block@1, true#0 <- block@2)
debug: Replaced trivial Phi node: let true#1: uint64 = φ(true#0 <- block@1, true#0 <- block@2) (true#1) with true#0 in current definition for 1 blocks
debug: Terminated block@3: // ternary_merge_L55
debug: Sealing block@None: // ternary_true_L56
debug: Sealing block@None: // ternary_false_L56
debug: Terminated block@4: // ternary_true_L56
debug: Created Phi assignment: let false#1: uint64 = undefined while trying to resolve 'false' in block@3: // ternary_merge_L55
debug: Added false#0 to Phi node: let false#1: uint64 = φ(false#0 <- block@1) in block@1: // ternary_true_L55
debug: Added false#0 to Phi node: let false#1: uint64 = φ(false#0 <- block@1, false#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let false#1: uint64 = φ(false#0 <- block@1, false#0 <- block@2) (false#1) with false#0
debug: Deleting Phi assignment: let false#1: uint64 = φ(false#0 <- block@1, false#0 <- block@2)
debug: Replaced trivial Phi node: let false#1: uint64 = φ(false#0 <- block@1, false#0 <- block@2) (false#1) with false#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_false_L56
debug: Sealing block@6: // ternary_merge_L56
debug: Created Phi assignment: let ternary_result%29#2: uint64 = undefined while trying to resolve 'ternary_result%29' in block@6: // ternary_merge_L56
debug: Added ternary_result%29#0 to Phi node: let ternary_result%29#2: uint64 = φ(ternary_result%29#0 <- block@4) in block@4: // ternary_true_L56
debug: Added ternary_result%29#1 to Phi node: let ternary_result%29#2: uint64 = φ(ternary_result%29#0 <- block@4, ternary_result%29#1 <- block@5) in block@5: // ternary_false_L56
debug: Created Phi assignment: let false#2: uint64 = undefined while trying to resolve 'false' in block@6: // ternary_merge_L56
debug: Added false#0 to Phi node: let false#2: uint64 = φ(false#0 <- block@4) in block@4: // ternary_true_L56
debug: Added false#0 to Phi node: let false#2: uint64 = φ(false#0 <- block@4, false#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let false#2: uint64 = φ(false#0 <- block@4, false#0 <- block@5) (false#2) with false#0
debug: Deleting Phi assignment: let false#2: uint64 = φ(false#0 <- block@4, false#0 <- block@5)
debug: Replaced trivial Phi node: let false#2: uint64 = φ(false#0 <- block@4, false#0 <- block@5) (false#2) with false#0 in current definition for 1 blocks
debug: Terminated block@6: // ternary_merge_L56
debug: Sealing block@None: // ternary_true_L57
debug: Sealing block@None: // ternary_false_L57
debug: Terminated block@7: // ternary_true_L57
debug: Created Phi assignment: let true#2: uint64 = undefined while trying to resolve 'true' in block@6: // ternary_merge_L56
debug: Added true#0 to Phi node: let true#2: uint64 = φ(true#0 <- block@4) in block@4: // ternary_true_L56
debug: Added true#0 to Phi node: let true#2: uint64 = φ(true#0 <- block@4, true#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let true#2: uint64 = φ(true#0 <- block@4, true#0 <- block@5) (true#2) with true#0
debug: Deleting Phi assignment: let true#2: uint64 = φ(true#0 <- block@4, true#0 <- block@5)
debug: Replaced trivial Phi node: let true#2: uint64 = φ(true#0 <- block@4, true#0 <- block@5) (true#2) with true#0 in current definition for 1 blocks
debug: Terminated block@8: // ternary_false_L57
debug: Sealing block@9: // ternary_merge_L57
debug: Created Phi assignment: let ternary_result%31#2: uint64 = undefined while trying to resolve 'ternary_result%31' in block@9: // ternary_merge_L57
debug: Added ternary_result%31#0 to Phi node: let ternary_result%31#2: uint64 = φ(ternary_result%31#0 <- block@7) in block@7: // ternary_true_L57
debug: Added ternary_result%31#1 to Phi node: let ternary_result%31#2: uint64 = φ(ternary_result%31#0 <- block@7, ternary_result%31#1 <- block@8) in block@8: // ternary_false_L57
debug: Created Phi assignment: let false#3: uint64 = undefined while trying to resolve 'false' in block@9: // ternary_merge_L57
debug: Added false#0 to Phi node: let false#3: uint64 = φ(false#0 <- block@7) in block@7: // ternary_true_L57
debug: Added false#0 to Phi node: let false#3: uint64 = φ(false#0 <- block@7, false#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let false#3: uint64 = φ(false#0 <- block@7, false#0 <- block@8) (false#3) with false#0
debug: Deleting Phi assignment: let false#3: uint64 = φ(false#0 <- block@7, false#0 <- block@8)
debug: Replaced trivial Phi node: let false#3: uint64 = φ(false#0 <- block@7, false#0 <- block@8) (false#3) with false#0 in current definition for 1 blocks
debug: Terminated block@9: // ternary_merge_L57
debug: Sealing block@None: // ternary_true_L58
debug: Sealing block@None: // ternary_false_L58
debug: Terminated block@10: // ternary_true_L58
debug: Terminated block@11: // ternary_false_L58
debug: Sealing block@12: // ternary_merge_L58
debug: Created Phi assignment: let ternary_result%33#2: uint64 = undefined while trying to resolve 'ternary_result%33' in block@12: // ternary_merge_L58
debug: Added ternary_result%33#0 to Phi node: let ternary_result%33#2: uint64 = φ(ternary_result%33#0 <- block@10) in block@10: // ternary_true_L58
debug: Added ternary_result%33#1 to Phi node: let ternary_result%33#2: uint64 = φ(ternary_result%33#0 <- block@10, ternary_result%33#1 <- block@11) in block@11: // ternary_false_L58
debug: Created Phi assignment: let false#4: uint64 = undefined while trying to resolve 'false' in block@12: // ternary_merge_L58
debug: Added false#0 to Phi node: let false#4: uint64 = φ(false#0 <- block@10) in block@10: // ternary_true_L58
debug: Added false#0 to Phi node: let false#4: uint64 = φ(false#0 <- block@10, false#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let false#4: uint64 = φ(false#0 <- block@10, false#0 <- block@11) (false#4) with false#0
debug: Deleting Phi assignment: let false#4: uint64 = φ(false#0 <- block@10, false#0 <- block@11)
debug: Replaced trivial Phi node: let false#4: uint64 = φ(false#0 <- block@10, false#0 <- block@11) (false#4) with false#0 in current definition for 1 blocks
debug: Created Phi assignment: let true#3: uint64 = undefined while trying to resolve 'true' in block@12: // ternary_merge_L58
debug: Created Phi assignment: let true#4: uint64 = undefined while trying to resolve 'true' in block@9: // ternary_merge_L57
debug: Added true#0 to Phi node: let true#4: uint64 = φ(true#0 <- block@7) in block@7: // ternary_true_L57
debug: Added true#0 to Phi node: let true#4: uint64 = φ(true#0 <- block@7, true#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let true#4: uint64 = φ(true#0 <- block@7, true#0 <- block@8) (true#4) with true#0
debug: Deleting Phi assignment: let true#4: uint64 = φ(true#0 <- block@7, true#0 <- block@8)
debug: Replaced trivial Phi node: let true#4: uint64 = φ(true#0 <- block@7, true#0 <- block@8) (true#4) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#3: uint64 = φ(true#0 <- block@10) in block@10: // ternary_true_L58
debug: Added true#0 to Phi node: let true#3: uint64 = φ(true#0 <- block@10, true#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let true#3: uint64 = φ(true#0 <- block@10, true#0 <- block@11) (true#3) with true#0
debug: Deleting Phi assignment: let true#3: uint64 = φ(true#0 <- block@10, true#0 <- block@11)
debug: Replaced trivial Phi node: let true#3: uint64 = φ(true#0 <- block@10, true#0 <- block@11) (true#3) with true#0 in current definition for 1 blocks
debug: Terminated block@12: // ternary_merge_L58
debug: Sealing block@None: // ternary_true_L59
debug: Sealing block@None: // ternary_false_L59
debug: Terminated block@13: // ternary_true_L59
debug: Terminated block@14: // ternary_false_L59
debug: Sealing block@15: // ternary_merge_L59
debug: Created Phi assignment: let ternary_result%35#2: uint64 = undefined while trying to resolve 'ternary_result%35' in block@15: // ternary_merge_L59
debug: Added ternary_result%35#0 to Phi node: let ternary_result%35#2: uint64 = φ(ternary_result%35#0 <- block@13) in block@13: // ternary_true_L59
debug: Added ternary_result%35#1 to Phi node: let ternary_result%35#2: uint64 = φ(ternary_result%35#0 <- block@13, ternary_result%35#1 <- block@14) in block@14: // ternary_false_L59
debug: Created Phi assignment: let true#5: uint64 = undefined while trying to resolve 'true' in block@15: // ternary_merge_L59
debug: Added true#0 to Phi node: let true#5: uint64 = φ(true#0 <- block@13) in block@13: // ternary_true_L59
debug: Added true#0 to Phi node: let true#5: uint64 = φ(true#0 <- block@13, true#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let true#5: uint64 = φ(true#0 <- block@13, true#0 <- block@14) (true#5) with true#0
debug: Deleting Phi assignment: let true#5: uint64 = φ(true#0 <- block@13, true#0 <- block@14)
debug: Replaced trivial Phi node: let true#5: uint64 = φ(true#0 <- block@13, true#0 <- block@14) (true#5) with true#0 in current definition for 1 blocks
debug: Terminated block@15: // ternary_merge_L59
debug: Sealing block@None: // ternary_true_L60
debug: Sealing block@None: // ternary_false_L60
debug: Terminated block@16: // ternary_true_L60
debug: Created Phi assignment: let false#5: uint64 = undefined while trying to resolve 'false' in block@15: // ternary_merge_L59
debug: Added false#0 to Phi node: let false#5: uint64 = φ(false#0 <- block@13) in block@13: // ternary_true_L59
debug: Added false#0 to Phi node: let false#5: uint64 = φ(false#0 <- block@13, false#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let false#5: uint64 = φ(false#0 <- block@13, false#0 <- block@14) (false#5) with false#0
debug: Deleting Phi assignment: let false#5: uint64 = φ(false#0 <- block@13, false#0 <- block@14)
debug: Replaced trivial Phi node: let false#5: uint64 = φ(false#0 <- block@13, false#0 <- block@14) (false#5) with false#0 in current definition for 1 blocks
debug: Terminated block@17: // ternary_false_L60
debug: Sealing block@18: // ternary_merge_L60
debug: Created Phi assignment: let ternary_result%37#2: uint64 = undefined while trying to resolve 'ternary_result%37' in block@18: // ternary_merge_L60
debug: Added ternary_result%37#0 to Phi node: let ternary_result%37#2: uint64 = φ(ternary_result%37#0 <- block@16) in block@16: // ternary_true_L60
debug: Added ternary_result%37#1 to Phi node: let ternary_result%37#2: uint64 = φ(ternary_result%37#0 <- block@16, ternary_result%37#1 <- block@17) in block@17: // ternary_false_L60
debug: Created Phi assignment: let true#6: uint64 = undefined while trying to resolve 'true' in block@18: // ternary_merge_L60
debug: Added true#0 to Phi node: let true#6: uint64 = φ(true#0 <- block@16) in block@16: // ternary_true_L60
debug: Added true#0 to Phi node: let true#6: uint64 = φ(true#0 <- block@16, true#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let true#6: uint64 = φ(true#0 <- block@16, true#0 <- block@17) (true#6) with true#0
debug: Deleting Phi assignment: let true#6: uint64 = φ(true#0 <- block@16, true#0 <- block@17)
debug: Replaced trivial Phi node: let true#6: uint64 = φ(true#0 <- block@16, true#0 <- block@17) (true#6) with true#0 in current definition for 1 blocks
debug: Created Phi assignment: let false#6: uint64 = undefined while trying to resolve 'false' in block@18: // ternary_merge_L60
debug: Added false#0 to Phi node: let false#6: uint64 = φ(false#0 <- block@16) in block@16: // ternary_true_L60
debug: Added false#0 to Phi node: let false#6: uint64 = φ(false#0 <- block@16, false#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let false#6: uint64 = φ(false#0 <- block@16, false#0 <- block@17) (false#6) with false#0
debug: Deleting Phi assignment: let false#6: uint64 = φ(false#0 <- block@16, false#0 <- block@17)
debug: Replaced trivial Phi node: let false#6: uint64 = φ(false#0 <- block@16, false#0 <- block@17) (false#6) with false#0 in current definition for 1 blocks
debug: Terminated block@18: // ternary_merge_L60
debug: Sealing block@None: // ternary_true_L61
debug: Sealing block@None: // ternary_false_L61
debug: Terminated block@19: // ternary_true_L61
debug: Terminated block@20: // ternary_false_L61
debug: Sealing block@21: // ternary_merge_L61
debug: Created Phi assignment: let ternary_result%39#2: uint64 = undefined while trying to resolve 'ternary_result%39' in block@21: // ternary_merge_L61
debug: Added ternary_result%39#0 to Phi node: let ternary_result%39#2: uint64 = φ(ternary_result%39#0 <- block@19) in block@19: // ternary_true_L61
debug: Added ternary_result%39#1 to Phi node: let ternary_result%39#2: uint64 = φ(ternary_result%39#0 <- block@19, ternary_result%39#1 <- block@20) in block@20: // ternary_false_L61
debug: Created Phi assignment: let true#7: uint64 = undefined while trying to resolve 'true' in block@21: // ternary_merge_L61
debug: Added true#0 to Phi node: let true#7: uint64 = φ(true#0 <- block@19) in block@19: // ternary_true_L61
debug: Added true#0 to Phi node: let true#7: uint64 = φ(true#0 <- block@19, true#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let true#7: uint64 = φ(true#0 <- block@19, true#0 <- block@20) (true#7) with true#0
debug: Deleting Phi assignment: let true#7: uint64 = φ(true#0 <- block@19, true#0 <- block@20)
debug: Replaced trivial Phi node: let true#7: uint64 = φ(true#0 <- block@19, true#0 <- block@20) (true#7) with true#0 in current definition for 1 blocks
debug: Created Phi assignment: let false#7: uint64 = undefined while trying to resolve 'false' in block@21: // ternary_merge_L61
debug: Added false#0 to Phi node: let false#7: uint64 = φ(false#0 <- block@19) in block@19: // ternary_true_L61
debug: Added false#0 to Phi node: let false#7: uint64 = φ(false#0 <- block@19, false#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let false#7: uint64 = φ(false#0 <- block@19, false#0 <- block@20) (false#7) with false#0
debug: Deleting Phi assignment: let false#7: uint64 = φ(false#0 <- block@19, false#0 <- block@20)
debug: Replaced trivial Phi node: let false#7: uint64 = φ(false#0 <- block@19, false#0 <- block@20) (false#7) with false#0 in current definition for 1 blocks
debug: Terminated block@21: // ternary_merge_L61
debug: Sealing block@None: // ternary_true_L62
debug: Sealing block@None: // ternary_false_L62
debug: Terminated block@22: // ternary_true_L62
debug: Terminated block@23: // ternary_false_L62
debug: Sealing block@24: // ternary_merge_L62
debug: Created Phi assignment: let ternary_result%41#2: uint64 = undefined while trying to resolve 'ternary_result%41' in block@24: // ternary_merge_L62
debug: Added ternary_result%41#0 to Phi node: let ternary_result%41#2: uint64 = φ(ternary_result%41#0 <- block@22) in block@22: // ternary_true_L62
debug: Added ternary_result%41#1 to Phi node: let ternary_result%41#2: uint64 = φ(ternary_result%41#0 <- block@22, ternary_result%41#1 <- block@23) in block@23: // ternary_false_L62
debug: Created Phi assignment: let false#8: uint64 = undefined while trying to resolve 'false' in block@24: // ternary_merge_L62
debug: Added false#0 to Phi node: let false#8: uint64 = φ(false#0 <- block@22) in block@22: // ternary_true_L62
debug: Added false#0 to Phi node: let false#8: uint64 = φ(false#0 <- block@22, false#0 <- block@23) in block@23: // ternary_false_L62
debug: Replacing trivial Phi node: let false#8: uint64 = φ(false#0 <- block@22, false#0 <- block@23) (false#8) with false#0
debug: Deleting Phi assignment: let false#8: uint64 = φ(false#0 <- block@22, false#0 <- block@23)
debug: Replaced trivial Phi node: let false#8: uint64 = φ(false#0 <- block@22, false#0 <- block@23) (false#8) with false#0 in current definition for 1 blocks
debug: Created Phi assignment: let one#1: uint64 = undefined while trying to resolve 'one' in block@24: // ternary_merge_L62
debug: Created Phi assignment: let one#2: uint64 = undefined while trying to resolve 'one' in block@21: // ternary_merge_L61
debug: Created Phi assignment: let one#3: uint64 = undefined while trying to resolve 'one' in block@18: // ternary_merge_L60
debug: Created Phi assignment: let one#4: uint64 = undefined while trying to resolve 'one' in block@15: // ternary_merge_L59
debug: Created Phi assignment: let one#5: uint64 = undefined while trying to resolve 'one' in block@12: // ternary_merge_L58
debug: Created Phi assignment: let one#6: uint64 = undefined while trying to resolve 'one' in block@9: // ternary_merge_L57
debug: Created Phi assignment: let one#7: uint64 = undefined while trying to resolve 'one' in block@6: // ternary_merge_L56
debug: Created Phi assignment: let one#8: uint64 = undefined while trying to resolve 'one' in block@3: // ternary_merge_L55
debug: Added one#0 to Phi node: let one#8: uint64 = φ(one#0 <- block@1) in block@1: // ternary_true_L55
debug: Added one#0 to Phi node: let one#8: uint64 = φ(one#0 <- block@1, one#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let one#8: uint64 = φ(one#0 <- block@1, one#0 <- block@2) (one#8) with one#0
debug: Deleting Phi assignment: let one#8: uint64 = φ(one#0 <- block@1, one#0 <- block@2)
debug: Replaced trivial Phi node: let one#8: uint64 = φ(one#0 <- block@1, one#0 <- block@2) (one#8) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#7: uint64 = φ(one#0 <- block@4) in block@4: // ternary_true_L56
debug: Added one#0 to Phi node: let one#7: uint64 = φ(one#0 <- block@4, one#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let one#7: uint64 = φ(one#0 <- block@4, one#0 <- block@5) (one#7) with one#0
debug: Deleting Phi assignment: let one#7: uint64 = φ(one#0 <- block@4, one#0 <- block@5)
debug: Replaced trivial Phi node: let one#7: uint64 = φ(one#0 <- block@4, one#0 <- block@5) (one#7) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#6: uint64 = φ(one#0 <- block@7) in block@7: // ternary_true_L57
debug: Added one#0 to Phi node: let one#6: uint64 = φ(one#0 <- block@7, one#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let one#6: uint64 = φ(one#0 <- block@7, one#0 <- block@8) (one#6) with one#0
debug: Deleting Phi assignment: let one#6: uint64 = φ(one#0 <- block@7, one#0 <- block@8)
debug: Replaced trivial Phi node: let one#6: uint64 = φ(one#0 <- block@7, one#0 <- block@8) (one#6) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#5: uint64 = φ(one#0 <- block@10) in block@10: // ternary_true_L58
debug: Added one#0 to Phi node: let one#5: uint64 = φ(one#0 <- block@10, one#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let one#5: uint64 = φ(one#0 <- block@10, one#0 <- block@11) (one#5) with one#0
debug: Deleting Phi assignment: let one#5: uint64 = φ(one#0 <- block@10, one#0 <- block@11)
debug: Replaced trivial Phi node: let one#5: uint64 = φ(one#0 <- block@10, one#0 <- block@11) (one#5) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#4: uint64 = φ(one#0 <- block@13) in block@13: // ternary_true_L59
debug: Added one#0 to Phi node: let one#4: uint64 = φ(one#0 <- block@13, one#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let one#4: uint64 = φ(one#0 <- block@13, one#0 <- block@14) (one#4) with one#0
debug: Deleting Phi assignment: let one#4: uint64 = φ(one#0 <- block@13, one#0 <- block@14)
debug: Replaced trivial Phi node: let one#4: uint64 = φ(one#0 <- block@13, one#0 <- block@14) (one#4) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#3: uint64 = φ(one#0 <- block@16) in block@16: // ternary_true_L60
debug: Added one#0 to Phi node: let one#3: uint64 = φ(one#0 <- block@16, one#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let one#3: uint64 = φ(one#0 <- block@16, one#0 <- block@17) (one#3) with one#0
debug: Deleting Phi assignment: let one#3: uint64 = φ(one#0 <- block@16, one#0 <- block@17)
debug: Replaced trivial Phi node: let one#3: uint64 = φ(one#0 <- block@16, one#0 <- block@17) (one#3) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#2: uint64 = φ(one#0 <- block@19) in block@19: // ternary_true_L61
debug: Added one#0 to Phi node: let one#2: uint64 = φ(one#0 <- block@19, one#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let one#2: uint64 = φ(one#0 <- block@19, one#0 <- block@20) (one#2) with one#0
debug: Deleting Phi assignment: let one#2: uint64 = φ(one#0 <- block@19, one#0 <- block@20)
debug: Replaced trivial Phi node: let one#2: uint64 = φ(one#0 <- block@19, one#0 <- block@20) (one#2) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#1: uint64 = φ(one#0 <- block@22) in block@22: // ternary_true_L62
debug: Added one#0 to Phi node: let one#1: uint64 = φ(one#0 <- block@22, one#0 <- block@23) in block@23: // ternary_false_L62
debug: Replacing trivial Phi node: let one#1: uint64 = φ(one#0 <- block@22, one#0 <- block@23) (one#1) with one#0
debug: Deleting Phi assignment: let one#1: uint64 = φ(one#0 <- block@22, one#0 <- block@23)
debug: Replaced trivial Phi node: let one#1: uint64 = φ(one#0 <- block@22, one#0 <- block@23) (one#1) with one#0 in current definition for 1 blocks
debug: Created Phi assignment: let five#1: uint64 = undefined while trying to resolve 'five' in block@24: // ternary_merge_L62
debug: Created Phi assignment: let five#2: uint64 = undefined while trying to resolve 'five' in block@21: // ternary_merge_L61
debug: Created Phi assignment: let five#3: uint64 = undefined while trying to resolve 'five' in block@18: // ternary_merge_L60
debug: Created Phi assignment: let five#4: uint64 = undefined while trying to resolve 'five' in block@15: // ternary_merge_L59
debug: Created Phi assignment: let five#5: uint64 = undefined while trying to resolve 'five' in block@12: // ternary_merge_L58
debug: Created Phi assignment: let five#6: uint64 = undefined while trying to resolve 'five' in block@9: // ternary_merge_L57
debug: Created Phi assignment: let five#7: uint64 = undefined while trying to resolve 'five' in block@6: // ternary_merge_L56
debug: Created Phi assignment: let five#8: uint64 = undefined while trying to resolve 'five' in block@3: // ternary_merge_L55
debug: Added five#0 to Phi node: let five#8: uint64 = φ(five#0 <- block@1) in block@1: // ternary_true_L55
debug: Added five#0 to Phi node: let five#8: uint64 = φ(five#0 <- block@1, five#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let five#8: uint64 = φ(five#0 <- block@1, five#0 <- block@2) (five#8) with five#0
debug: Deleting Phi assignment: let five#8: uint64 = φ(five#0 <- block@1, five#0 <- block@2)
debug: Replaced trivial Phi node: let five#8: uint64 = φ(five#0 <- block@1, five#0 <- block@2) (five#8) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#7: uint64 = φ(five#0 <- block@4) in block@4: // ternary_true_L56
debug: Added five#0 to Phi node: let five#7: uint64 = φ(five#0 <- block@4, five#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let five#7: uint64 = φ(five#0 <- block@4, five#0 <- block@5) (five#7) with five#0
debug: Deleting Phi assignment: let five#7: uint64 = φ(five#0 <- block@4, five#0 <- block@5)
debug: Replaced trivial Phi node: let five#7: uint64 = φ(five#0 <- block@4, five#0 <- block@5) (five#7) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#6: uint64 = φ(five#0 <- block@7) in block@7: // ternary_true_L57
debug: Added five#0 to Phi node: let five#6: uint64 = φ(five#0 <- block@7, five#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let five#6: uint64 = φ(five#0 <- block@7, five#0 <- block@8) (five#6) with five#0
debug: Deleting Phi assignment: let five#6: uint64 = φ(five#0 <- block@7, five#0 <- block@8)
debug: Replaced trivial Phi node: let five#6: uint64 = φ(five#0 <- block@7, five#0 <- block@8) (five#6) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#5: uint64 = φ(five#0 <- block@10) in block@10: // ternary_true_L58
debug: Added five#0 to Phi node: let five#5: uint64 = φ(five#0 <- block@10, five#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let five#5: uint64 = φ(five#0 <- block@10, five#0 <- block@11) (five#5) with five#0
debug: Deleting Phi assignment: let five#5: uint64 = φ(five#0 <- block@10, five#0 <- block@11)
debug: Replaced trivial Phi node: let five#5: uint64 = φ(five#0 <- block@10, five#0 <- block@11) (five#5) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#4: uint64 = φ(five#0 <- block@13) in block@13: // ternary_true_L59
debug: Added five#0 to Phi node: let five#4: uint64 = φ(five#0 <- block@13, five#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let five#4: uint64 = φ(five#0 <- block@13, five#0 <- block@14) (five#4) with five#0
debug: Deleting Phi assignment: let five#4: uint64 = φ(five#0 <- block@13, five#0 <- block@14)
debug: Replaced trivial Phi node: let five#4: uint64 = φ(five#0 <- block@13, five#0 <- block@14) (five#4) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#3: uint64 = φ(five#0 <- block@16) in block@16: // ternary_true_L60
debug: Added five#0 to Phi node: let five#3: uint64 = φ(five#0 <- block@16, five#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let five#3: uint64 = φ(five#0 <- block@16, five#0 <- block@17) (five#3) with five#0
debug: Deleting Phi assignment: let five#3: uint64 = φ(five#0 <- block@16, five#0 <- block@17)
debug: Replaced trivial Phi node: let five#3: uint64 = φ(five#0 <- block@16, five#0 <- block@17) (five#3) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#2: uint64 = φ(five#0 <- block@19) in block@19: // ternary_true_L61
debug: Added five#0 to Phi node: let five#2: uint64 = φ(five#0 <- block@19, five#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let five#2: uint64 = φ(five#0 <- block@19, five#0 <- block@20) (five#2) with five#0
debug: Deleting Phi assignment: let five#2: uint64 = φ(five#0 <- block@19, five#0 <- block@20)
debug: Replaced trivial Phi node: let five#2: uint64 = φ(five#0 <- block@19, five#0 <- block@20) (five#2) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#1: uint64 = φ(five#0 <- block@22) in block@22: // ternary_true_L62
debug: Added five#0 to Phi node: let five#1: uint64 = φ(five#0 <- block@22, five#0 <- block@23) in block@23: // ternary_false_L62
debug: Replacing trivial Phi node: let five#1: uint64 = φ(five#0 <- block@22, five#0 <- block@23) (five#1) with five#0
debug: Deleting Phi assignment: let five#1: uint64 = φ(five#0 <- block@22, five#0 <- block@23)
debug: Replaced trivial Phi node: let five#1: uint64 = φ(five#0 <- block@22, five#0 <- block@23) (five#1) with five#0 in current definition for 1 blocks
debug: Created Phi assignment: let sixty#1: uint64 = undefined while trying to resolve 'sixty' in block@24: // ternary_merge_L62
debug: Created Phi assignment: let sixty#2: uint64 = undefined while trying to resolve 'sixty' in block@21: // ternary_merge_L61
debug: Created Phi assignment: let sixty#3: uint64 = undefined while trying to resolve 'sixty' in block@18: // ternary_merge_L60
debug: Created Phi assignment: let sixty#4: uint64 = undefined while trying to resolve 'sixty' in block@15: // ternary_merge_L59
debug: Created Phi assignment: let sixty#5: uint64 = undefined while trying to resolve 'sixty' in block@12: // ternary_merge_L58
debug: Created Phi assignment: let sixty#6: uint64 = undefined while trying to resolve 'sixty' in block@9: // ternary_merge_L57
debug: Created Phi assignment: let sixty#7: uint64 = undefined while trying to resolve 'sixty' in block@6: // ternary_merge_L56
debug: Created Phi assignment: let sixty#8: uint64 = undefined while trying to resolve 'sixty' in block@3: // ternary_merge_L55
debug: Added sixty#0 to Phi node: let sixty#8: uint64 = φ(sixty#0 <- block@1) in block@1: // ternary_true_L55
debug: Added sixty#0 to Phi node: let sixty#8: uint64 = φ(sixty#0 <- block@1, sixty#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let sixty#8: uint64 = φ(sixty#0 <- block@1, sixty#0 <- block@2) (sixty#8) with sixty#0
debug: Deleting Phi assignment: let sixty#8: uint64 = φ(sixty#0 <- block@1, sixty#0 <- block@2)
debug: Replaced trivial Phi node: let sixty#8: uint64 = φ(sixty#0 <- block@1, sixty#0 <- block@2) (sixty#8) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#7: uint64 = φ(sixty#0 <- block@4) in block@4: // ternary_true_L56
debug: Added sixty#0 to Phi node: let sixty#7: uint64 = φ(sixty#0 <- block@4, sixty#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let sixty#7: uint64 = φ(sixty#0 <- block@4, sixty#0 <- block@5) (sixty#7) with sixty#0
debug: Deleting Phi assignment: let sixty#7: uint64 = φ(sixty#0 <- block@4, sixty#0 <- block@5)
debug: Replaced trivial Phi node: let sixty#7: uint64 = φ(sixty#0 <- block@4, sixty#0 <- block@5) (sixty#7) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#6: uint64 = φ(sixty#0 <- block@7) in block@7: // ternary_true_L57
debug: Added sixty#0 to Phi node: let sixty#6: uint64 = φ(sixty#0 <- block@7, sixty#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let sixty#6: uint64 = φ(sixty#0 <- block@7, sixty#0 <- block@8) (sixty#6) with sixty#0
debug: Deleting Phi assignment: let sixty#6: uint64 = φ(sixty#0 <- block@7, sixty#0 <- block@8)
debug: Replaced trivial Phi node: let sixty#6: uint64 = φ(sixty#0 <- block@7, sixty#0 <- block@8) (sixty#6) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#5: uint64 = φ(sixty#0 <- block@10) in block@10: // ternary_true_L58
debug: Added sixty#0 to Phi node: let sixty#5: uint64 = φ(sixty#0 <- block@10, sixty#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let sixty#5: uint64 = φ(sixty#0 <- block@10, sixty#0 <- block@11) (sixty#5) with sixty#0
debug: Deleting Phi assignment: let sixty#5: uint64 = φ(sixty#0 <- block@10, sixty#0 <- block@11)
debug: Replaced trivial Phi node: let sixty#5: uint64 = φ(sixty#0 <- block@10, sixty#0 <- block@11) (sixty#5) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#4: uint64 = φ(sixty#0 <- block@13) in block@13: // ternary_true_L59
debug: Added sixty#0 to Phi node: let sixty#4: uint64 = φ(sixty#0 <- block@13, sixty#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let sixty#4: uint64 = φ(sixty#0 <- block@13, sixty#0 <- block@14) (sixty#4) with sixty#0
debug: Deleting Phi assignment: let sixty#4: uint64 = φ(sixty#0 <- block@13, sixty#0 <- block@14)
debug: Replaced trivial Phi node: let sixty#4: uint64 = φ(sixty#0 <- block@13, sixty#0 <- block@14) (sixty#4) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#3: uint64 = φ(sixty#0 <- block@16) in block@16: // ternary_true_L60
debug: Added sixty#0 to Phi node: let sixty#3: uint64 = φ(sixty#0 <- block@16, sixty#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let sixty#3: uint64 = φ(sixty#0 <- block@16, sixty#0 <- block@17) (sixty#3) with sixty#0
debug: Deleting Phi assignment: let sixty#3: uint64 = φ(sixty#0 <- block@16, sixty#0 <- block@17)
debug: Replaced trivial Phi node: let sixty#3: uint64 = φ(sixty#0 <- block@16, sixty#0 <- block@17) (sixty#3) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#2: uint64 = φ(sixty#0 <- block@19) in block@19: // ternary_true_L61
debug: Added sixty#0 to Phi node: let sixty#2: uint64 = φ(sixty#0 <- block@19, sixty#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let sixty#2: uint64 = φ(sixty#0 <- block@19, sixty#0 <- block@20) (sixty#2) with sixty#0
debug: Deleting Phi assignment: let sixty#2: uint64 = φ(sixty#0 <- block@19, sixty#0 <- block@20)
debug: Replaced trivial Phi node: let sixty#2: uint64 = φ(sixty#0 <- block@19, sixty#0 <- block@20) (sixty#2) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#1: uint64 = φ(sixty#0 <- block@22) in block@22: // ternary_true_L62
debug: Added sixty#0 to Phi node: let sixty#1: uint64 = φ(sixty#0 <- block@22, sixty#0 <- block@23) in block@23: // ternary_false_L62
debug: Replacing trivial Phi node: let sixty#1: uint64 = φ(sixty#0 <- block@22, sixty#0 <- block@23) (sixty#1) with sixty#0
debug: Deleting Phi assignment: let sixty#1: uint64 = φ(sixty#0 <- block@22, sixty#0 <- block@23)
debug: Replaced trivial Phi node: let sixty#1: uint64 = φ(sixty#0 <- block@22, sixty#0 <- block@23) (sixty#1) with sixty#0 in current definition for 1 blocks
debug: Terminated block@24: // ternary_merge_L62
debug: Sealing block@0: // L78
debug: Terminated block@0: // L78
debug: Output IR to stubs/out/biguint_BigUIntContract.ssa.ir
info: Optimizing test_cases.stubs.biguint.BigUIntContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguints
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Folded None b== None to 1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%2#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Folded None b== None to 1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%4#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Folded None == None to 1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%4#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/biguint_BigUIntContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguints
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 2, ending loop
debug: Output IR to stubs/out/biguint_BigUIntContract.cssa.ir
debug: Removing Phis from test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Removing Phis from test_cases.stubs.biguint.compare_biguints
debug: Removing Phis from test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Removing Phis from test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Removing Phis from test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Output IR to stubs/out/biguint_BigUIntContract.post_ssa.ir
debug: Sequentializing parallel copies in test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Sequentializing parallel copies in test_cases.stubs.biguint.compare_biguints
debug: Sequentializing parallel copies in test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Sequentializing parallel copies in test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Sequentializing parallel copies in test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Output IR to stubs/out/biguint_BigUIntContract.parallel_copies.ir
debug: Coalescing local variables in test_cases.stubs.biguint.BigUIntContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.stubs.biguint.compare_biguints using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.stubs.biguint.compare_biguint_vs_uint64 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.stubs.biguint.compare_uint64_vs_biguint using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.stubs.biguint.BigUIntContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to stubs/out/biguint_BigUIntContract.final.ir
debug: Inserted compare_biguints_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted compare_biguints_block@0.ops[10]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[12]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted compare_biguints_block@0.ops[17]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[19]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted compare_biguints_block@0.ops[24]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[26]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted compare_biguints_block@0.ops[31]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[33]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[8]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[16]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[18]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[26]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[28]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[36]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[38]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[46]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[48]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[13]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[16]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[24]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[27]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[35]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[38]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[46]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[49]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[8]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[16]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[18]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[26]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[28]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[36]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[38]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[46]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[48]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[13]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[16]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[24]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[27]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[35]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[38]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[46]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[49]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Output IR to stubs/out/bytes_BytesContract.ssa.ir
info: Optimizing test_cases.stubs.bytes.BytesContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Folded concat("a", "b") to b'ab'
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: awst_tmp%11#0, ternary_result%13#1
debug: Replacing {ternary_result%13#1} with awst_tmp%11#0 made 1 modifications
debug: Found equivalence set: awst_tmp%17#0, ternary_result%19#1
debug: Replacing {ternary_result%19#1} with awst_tmp%17#0 made 1 modifications
debug: Found equivalence set: awst_tmp%17#1, ternary_result%21#1
debug: Replacing {ternary_result%21#1} with awst_tmp%17#1 made 1 modifications
debug: Found equivalence set: awst_tmp%24#0, ternary_result%26#1
debug: Replacing {ternary_result%26#1} with awst_tmp%24#0 made 1 modifications
debug: Found equivalence set: awst_tmp%49#1, ternary_result%53#1
debug: Replacing {ternary_result%53#1} with awst_tmp%49#1 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable base_64#0
debug: Removing unused variable base_32#0
debug: Removing unused variable base_16#0
debug: Removing unused variable empty#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable c#0
debug: Removing unused variable abc#0
debug: Removing unused variable tmp%47#0
debug: Removing unused variable true#0
debug: Removing unused variable false#0
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable c#2
debug: Removing unused variable d#0
debug: Removing unused variable y#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // ternary_false_L26 because it's used by phi nodes
debug: Not removing empty block block@5: // ternary_false_L27 because it's used by phi nodes
debug: Not removing empty block block@8: // ternary_false_L27 because it's used by phi nodes
debug: Not removing empty block block@11: // ternary_false_L28 because it's used by phi nodes
debug: Not removing empty block block@29: // ternary_false_L33 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/bytes_BytesContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded len(QmFzZSA2NCBlbmNvZGVk) to 15
debug: Folded len("") to 0
debug: Folded concat("c", "d") to b'cd'
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("abc") to 3
debug: Folded len("1") to 1
debug: Folded len("1") to 1
debug: Folded len("1") to 1
debug: Folded len("") to 0
debug: Folded len("") to 0
debug: Folded len("1") to 1
debug: Folded len("1") to 1
debug: Folded len("") to 0
debug: Folded len("") to 0
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable c#1
debug: Removing unused variable tmp%9#0
debug: Removing unused variable base_length%14#0
debug: Removing unused variable awst_tmp%29#0
debug: Removing unused variable awst_tmp%34#0
debug: Removing unused variable base_length%37#0
debug: Removing unused variable awst_tmp%40#0
debug: Removing unused variable awst_tmp%40#1
debug: Removing unused variable tmp%48#0
debug: Removing unused variable awst_tmp%49#0
debug: Removing unused variable tmp%56#0
debug: Removing unused variable tmp%58#0
debug: Removing unused variable tmp%61#0
debug: Removing unused variable tmp%64#0
debug: Removing unused variable tmp%67#0
debug: Removing unused variable tmp%70#0
debug: Removing unused variable tmp%73#0
debug: Removing unused variable tmp%76#0
debug: Removing unused variable tmp%79#0
debug: Removing unused variable tmp%82#0
debug: Removing unused variable tmp%84#0
debug: Removing unused variable tmp%86#0
debug: Removing unused variable y#1
debug: Optimizer: Simplify Control Ops
debug: ConditionalBranch goto 1u ? block@32 : block@31 simplified to goto block@32
debug: ConditionalBranch goto 1u ? block@35 : block@34 simplified to goto block@35
debug: ConditionalBranch goto 1u ? block@38 : block@37 simplified to goto block@38
debug: ConditionalBranch goto 0u ? block@41 : block@40 simplified to goto block@40
debug: ConditionalBranch goto 0u ? block@44 : block@43 simplified to goto block@43
debug: ConditionalBranch goto 1u ? block@46 : block@47 simplified to goto block@46
debug: ConditionalBranch goto 1u ? block@49 : block@50 simplified to goto block@49
debug: ConditionalBranch goto 0u ? block@52 : block@53 simplified to goto block@53
debug: ConditionalBranch goto 0u ? block@55 : block@56 simplified to goto block@56
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@32: // ternary_false_L38 with block@30: // ternary_merge_L33 in block@33: // ternary_merge_L38
debug: Merged linear block@32: // ternary_false_L38 into block@30: // ternary_merge_L33
debug: Replaced predecessor block@35: // ternary_false_L40 with block@33: // ternary_merge_L38 in block@36: // ternary_merge_L40
debug: Merged linear block@35: // ternary_false_L40 into block@33: // ternary_merge_L38
debug: Replaced predecessor block@38: // ternary_false_L41 with block@36: // ternary_merge_L40 in block@39: // ternary_merge_L41
debug: Merged linear block@38: // ternary_false_L41 into block@36: // ternary_merge_L40
debug: Replaced predecessor block@40: // ternary_true_L42 with block@39: // ternary_merge_L41 in block@42: // ternary_merge_L42
debug: Merged linear block@40: // ternary_true_L42 into block@39: // ternary_merge_L41
debug: Replaced predecessor block@43: // ternary_true_L43 with block@42: // ternary_merge_L42 in block@45: // ternary_merge_L43
debug: Merged linear block@43: // ternary_true_L43 into block@42: // ternary_merge_L42
debug: Replaced predecessor block@46: // ternary_true_L44 with block@45: // ternary_merge_L43 in block@48: // ternary_merge_L44
debug: Merged linear block@46: // ternary_true_L44 into block@45: // ternary_merge_L43
debug: Replaced predecessor block@49: // ternary_true_L45 with block@48: // ternary_merge_L44 in block@51: // ternary_merge_L45
debug: Merged linear block@49: // ternary_true_L45 into block@48: // ternary_merge_L44
debug: Replaced predecessor block@53: // ternary_false_L46 with block@51: // ternary_merge_L45 in block@54: // ternary_merge_L46
debug: Merged linear block@53: // ternary_false_L46 into block@51: // ternary_merge_L45
debug: Replaced predecessor block@56: // ternary_false_L47 with block@54: // ternary_merge_L46 in block@57: // ternary_merge_L47
debug: Merged linear block@56: // ternary_false_L47 into block@54: // ternary_merge_L46
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // ternary_false_L26 because it's used by phi nodes
debug: Not removing empty block block@5: // ternary_false_L27 because it's used by phi nodes
debug: Not removing empty block block@8: // ternary_false_L27 because it's used by phi nodes
debug: Not removing empty block block@11: // ternary_false_L28 because it's used by phi nodes
debug: Not removing empty block block@29: // ternary_false_L33 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@31: // ternary_true_L38, block@34: // ternary_true_L40, block@37: // ternary_true_L41, block@41: // ternary_false_L42, block@44: // ternary_false_L43, block@47: // ternary_false_L44, block@50: // ternary_false_L45, block@52: // ternary_true_L46, block@55: // ternary_true_L47
debug: Removed unreachable predecessors from block@33: // ternary_merge_L38
debug: Removed unreachable predecessors from block@36: // ternary_merge_L40
debug: Removed unreachable predecessors from block@39: // ternary_merge_L41
debug: Removed unreachable predecessors from block@42: // ternary_merge_L42
debug: Removed unreachable predecessors from block@45: // ternary_merge_L43
debug: Removed unreachable predecessors from block@48: // ternary_merge_L44
debug: Removed unreachable predecessors from block@51: // ternary_merge_L45
debug: Removed unreachable predecessors from block@54: // ternary_merge_L46
debug: Removed unreachable predecessors from block@57: // ternary_merge_L47
debug: Removing unreachable phi arguments: ternary_result%57#0 <- block@31
debug: Replacing trivial Phi node: let ternary_result%57#2: bytes = φ(ternary_result%57#1 <- block@30) (ternary_result%57#2) with ternary_result%57#1
debug: Deleting Phi assignment: let ternary_result%57#2: bytes = φ(ternary_result%57#1 <- block@30)
debug: Removing unreachable phi arguments: ternary_result%59#0 <- block@34
debug: Replacing trivial Phi node: let ternary_result%59#2: bytes = φ(ternary_result%59#1 <- block@33) (ternary_result%59#2) with ternary_result%59#1
debug: Deleting Phi assignment: let ternary_result%59#2: bytes = φ(ternary_result%59#1 <- block@33)
debug: Removing unreachable phi arguments: ternary_result%62#0 <- block@37
debug: Replacing trivial Phi node: let ternary_result%62#2: bytes = φ(ternary_result%62#1 <- block@36) (ternary_result%62#2) with ternary_result%62#1
debug: Deleting Phi assignment: let ternary_result%62#2: bytes = φ(ternary_result%62#1 <- block@36)
debug: Removing unreachable phi arguments: ternary_result%65#1 <- block@41
debug: Replacing trivial Phi node: let ternary_result%65#2: bytes = φ(ternary_result%65#0 <- block@39) (ternary_result%65#2) with ternary_result%65#0
debug: Deleting Phi assignment: let ternary_result%65#2: bytes = φ(ternary_result%65#0 <- block@39)
debug: Removing unreachable phi arguments: ternary_result%68#1 <- block@44
debug: Replacing trivial Phi node: let ternary_result%68#2: bytes = φ(ternary_result%68#0 <- block@42) (ternary_result%68#2) with ternary_result%68#0
debug: Deleting Phi assignment: let ternary_result%68#2: bytes = φ(ternary_result%68#0 <- block@42)
debug: Removing unreachable phi arguments: ternary_result%71#1 <- block@47
debug: Replacing trivial Phi node: let ternary_result%71#2: bytes = φ(ternary_result%71#0 <- block@45) (ternary_result%71#2) with ternary_result%71#0
debug: Deleting Phi assignment: let ternary_result%71#2: bytes = φ(ternary_result%71#0 <- block@45)
debug: Removing unreachable phi arguments: ternary_result%74#1 <- block@50
debug: Replacing trivial Phi node: let ternary_result%74#2: bytes = φ(ternary_result%74#0 <- block@48) (ternary_result%74#2) with ternary_result%74#0
debug: Deleting Phi assignment: let ternary_result%74#2: bytes = φ(ternary_result%74#0 <- block@48)
debug: Removing unreachable phi arguments: ternary_result%77#0 <- block@52
debug: Replacing trivial Phi node: let ternary_result%77#2: bytes = φ(ternary_result%77#1 <- block@51) (ternary_result%77#2) with ternary_result%77#1
debug: Deleting Phi assignment: let ternary_result%77#2: bytes = φ(ternary_result%77#1 <- block@51)
debug: Removing unreachable phi arguments: ternary_result%80#0 <- block@55
debug: Replacing trivial Phi node: let ternary_result%80#2: bytes = φ(ternary_result%80#1 <- block@54) (ternary_result%80#2) with ternary_result%80#1
debug: Deleting Phi assignment: let ternary_result%80#2: bytes = φ(ternary_result%80#1 <- block@54)
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/bytes_BytesContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded !0 to 1u
debug: Folded 1 < 3 to 1
debug: Folded 1 < 3 to 1
debug: Folded 1 < 3 to 1
debug: Folded 1 < 3 to 1
debug: Folded 1 < 3 to 1
debug: Folded 3 - 1 to 2
debug: Folded 2 < 3 to 1
debug: Folded 3 - 2 to 1
debug: Folded 2 < 3 to 1
debug: Folded 3 - 2 to 1
debug: Folded 1 < 3 to 1
debug: Folded 3 - 1 to 2
debug: Folded 10 < 3 to 0
debug: Folded 10 < 3 to 0
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%10#0
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%18#0
debug: Removing unused variable tmp%20#0
debug: Removing unused variable tmp%25#0
debug: Removing unused variable tmp%30#0
debug: Removing unused variable tmp%35#0
debug: Removing unused variable tmp%41#0
debug: Removing unused variable tmp%43#0
debug: Removing unused variable tmp%50#0
debug: Removing unused variable tmp%52#0
debug: Removing unused variable ternary_result%57#1
debug: Removing unused variable ternary_result%59#1
debug: Removing unused variable ternary_result%62#1
debug: Removing unused variable ternary_result%65#0
debug: Removing unused variable ternary_result%68#0
debug: Removing unused variable ternary_result%71#0
debug: Removing unused variable ternary_result%74#0
debug: Removing unused variable ternary_result%77#1
debug: Removing unused variable ternary_result%80#1
debug: Removing unused variable tmp%83#0
debug: Removing unused variable tmp%85#0
debug: Removing unused variable tmp%87#0
debug: Removing unused variable tmp%88#0
debug: Removing unused variable y#2
debug: Optimizer: Simplify Control Ops
debug: ConditionalBranch goto 1u ? block@1 : block@2 simplified to goto block@1
debug: ConditionalBranch goto 1u ? block@4 : block@5 simplified to goto block@4
debug: ConditionalBranch goto 1u ? block@7 : block@8 simplified to goto block@7
debug: ConditionalBranch goto 1u ? block@10 : block@11 simplified to goto block@10
debug: ConditionalBranch goto 1u ? block@13 : block@14 simplified to goto block@13
debug: ConditionalBranch goto 1u ? block@16 : block@17 simplified to goto block@16
debug: ConditionalBranch goto 1u ? block@19 : block@20 simplified to goto block@19
debug: ConditionalBranch goto 1u ? block@22 : block@23 simplified to goto block@22
debug: ConditionalBranch goto 0u ? block@25 : block@26 simplified to goto block@26
debug: ConditionalBranch goto 0u ? block@28 : block@29 simplified to goto block@29
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@1: // ternary_true_L26 with block@0: // L5 in block@3: // ternary_merge_L26
debug: Merged linear block@1: // ternary_true_L26 into block@0: // L5
debug: Replaced predecessor block@4: // ternary_true_L27 with block@3: // ternary_merge_L26 in block@6: // ternary_merge_L27
debug: Merged linear block@4: // ternary_true_L27 into block@3: // ternary_merge_L26
debug: Replaced predecessor block@7: // ternary_true_L27 with block@6: // ternary_merge_L27 in block@9: // ternary_merge_L27
debug: Merged linear block@7: // ternary_true_L27 into block@6: // ternary_merge_L27
debug: Replaced predecessor block@10: // ternary_true_L28 with block@9: // ternary_merge_L27 in block@12: // ternary_merge_L28
debug: Merged linear block@10: // ternary_true_L28 into block@9: // ternary_merge_L27
debug: Replaced predecessor block@13: // ternary_true_L29 with block@12: // ternary_merge_L28 in block@15: // ternary_merge_L29
debug: Merged linear block@13: // ternary_true_L29 into block@12: // ternary_merge_L28
debug: Replaced predecessor block@16: // ternary_true_L30 with block@15: // ternary_merge_L29 in block@18: // ternary_merge_L30
debug: Merged linear block@16: // ternary_true_L30 into block@15: // ternary_merge_L29
debug: Replaced predecessor block@19: // ternary_true_L31 with block@18: // ternary_merge_L30 in block@21: // ternary_merge_L31
debug: Merged linear block@19: // ternary_true_L31 into block@18: // ternary_merge_L30
debug: Replaced predecessor block@22: // ternary_true_L31 with block@21: // ternary_merge_L31 in block@24: // ternary_merge_L31
debug: Merged linear block@22: // ternary_true_L31 into block@21: // ternary_merge_L31
debug: Replaced predecessor block@26: // ternary_false_L33 with block@24: // ternary_merge_L31 in block@27: // ternary_merge_L33
debug: Merged linear block@26: // ternary_false_L33 into block@24: // ternary_merge_L31
debug: Replaced predecessor block@29: // ternary_false_L33 with block@27: // ternary_merge_L33 in block@30: // ternary_merge_L33
debug: Merged linear block@29: // ternary_false_L33 into block@27: // ternary_merge_L33
debug: Replaced predecessor block@33: // ternary_merge_L38 with block@30: // ternary_merge_L33 in block@36: // ternary_merge_L40
debug: Merged linear block@33: // ternary_merge_L38 into block@30: // ternary_merge_L33
debug: Replaced predecessor block@36: // ternary_merge_L40 with block@30: // ternary_merge_L33 in block@39: // ternary_merge_L41
debug: Merged linear block@36: // ternary_merge_L40 into block@30: // ternary_merge_L33
debug: Replaced predecessor block@39: // ternary_merge_L41 with block@30: // ternary_merge_L33 in block@42: // ternary_merge_L42
debug: Merged linear block@39: // ternary_merge_L41 into block@30: // ternary_merge_L33
debug: Replaced predecessor block@42: // ternary_merge_L42 with block@30: // ternary_merge_L33 in block@45: // ternary_merge_L43
debug: Merged linear block@42: // ternary_merge_L42 into block@30: // ternary_merge_L33
debug: Replaced predecessor block@45: // ternary_merge_L43 with block@30: // ternary_merge_L33 in block@48: // ternary_merge_L44
debug: Merged linear block@45: // ternary_merge_L43 into block@30: // ternary_merge_L33
debug: Replaced predecessor block@48: // ternary_merge_L44 with block@30: // ternary_merge_L33 in block@51: // ternary_merge_L45
debug: Merged linear block@48: // ternary_merge_L44 into block@30: // ternary_merge_L33
debug: Replaced predecessor block@51: // ternary_merge_L45 with block@30: // ternary_merge_L33 in block@54: // ternary_merge_L46
debug: Merged linear block@51: // ternary_merge_L45 into block@30: // ternary_merge_L33
debug: Replaced predecessor block@54: // ternary_merge_L46 with block@30: // ternary_merge_L33 in block@57: // ternary_merge_L47
debug: Merged linear block@54: // ternary_merge_L46 into block@30: // ternary_merge_L33
debug: Merged linear block@57: // ternary_merge_L47 into block@30: // ternary_merge_L33
debug: Optimizer: Remove Empty Blocks
debug: Not removing empty block block@2: // ternary_false_L26 because it's used by phi nodes
debug: Not removing empty block block@5: // ternary_false_L27 because it's used by phi nodes
debug: Not removing empty block block@8: // ternary_false_L27 because it's used by phi nodes
debug: Not removing empty block block@11: // ternary_false_L28 because it's used by phi nodes
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@2: // ternary_false_L26, block@5: // ternary_false_L27, block@8: // ternary_false_L27, block@11: // ternary_false_L28, block@14: // ternary_false_L29, block@17: // ternary_false_L30, block@20: // ternary_false_L31, block@23: // ternary_false_L31, block@25: // ternary_true_L33, block@28: // ternary_true_L33
debug: Removed unreachable predecessors from block@3: // ternary_merge_L26
debug: Removed unreachable predecessors from block@6: // ternary_merge_L27
debug: Removed unreachable predecessors from block@9: // ternary_merge_L27
debug: Removed unreachable predecessors from block@12: // ternary_merge_L28
debug: Removed unreachable predecessors from block@15: // ternary_merge_L29
debug: Removed unreachable predecessors from block@18: // ternary_merge_L30
debug: Removed unreachable predecessors from block@21: // ternary_merge_L31
debug: Removed unreachable predecessors from block@24: // ternary_merge_L31
debug: Removed unreachable predecessors from block@27: // ternary_merge_L33
debug: Removed unreachable predecessors from block@30: // ternary_merge_L33
debug: Removing unreachable phi arguments: awst_tmp%11#0 <- block@2
debug: Replacing trivial Phi node: let ternary_result%13#2: uint64 = φ(ternary_result%13#0 <- block@0) (ternary_result%13#2) with ternary_result%13#0
debug: Deleting Phi assignment: let ternary_result%13#2: uint64 = φ(ternary_result%13#0 <- block@0)
debug: Removing unreachable phi arguments: awst_tmp%17#0 <- block@5
debug: Replacing trivial Phi node: let ternary_result%19#2: uint64 = φ(ternary_result%19#0 <- block@3) (ternary_result%19#2) with ternary_result%19#0
debug: Deleting Phi assignment: let ternary_result%19#2: uint64 = φ(ternary_result%19#0 <- block@3)
debug: Removing unreachable phi arguments: awst_tmp%17#1 <- block@8
debug: Replacing trivial Phi node: let ternary_result%21#2: uint64 = φ(ternary_result%21#0 <- block@6) (ternary_result%21#2) with ternary_result%21#0
debug: Deleting Phi assignment: let ternary_result%21#2: uint64 = φ(ternary_result%21#0 <- block@6)
debug: Removing unreachable phi arguments: awst_tmp%24#0 <- block@11
debug: Replacing trivial Phi node: let ternary_result%26#2: uint64 = φ(ternary_result%26#0 <- block@9) (ternary_result%26#2) with ternary_result%26#0
debug: Deleting Phi assignment: let ternary_result%26#2: uint64 = φ(ternary_result%26#0 <- block@9)
debug: Removing unreachable phi arguments: ternary_result%31#1 <- block@14
debug: Replacing trivial Phi node: let ternary_result%31#2: uint64 = φ(ternary_result%31#0 <- block@12) (ternary_result%31#2) with ternary_result%31#0
debug: Deleting Phi assignment: let ternary_result%31#2: uint64 = φ(ternary_result%31#0 <- block@12)
debug: Removing unreachable phi arguments: ternary_result%36#1 <- block@17
debug: Replacing trivial Phi node: let ternary_result%36#2: uint64 = φ(ternary_result%36#0 <- block@15) (ternary_result%36#2) with ternary_result%36#0
debug: Deleting Phi assignment: let ternary_result%36#2: uint64 = φ(ternary_result%36#0 <- block@15)
debug: Removing unreachable phi arguments: ternary_result%42#1 <- block@20
debug: Replacing trivial Phi node: let ternary_result%42#2: uint64 = φ(ternary_result%42#0 <- block@18) (ternary_result%42#2) with ternary_result%42#0
debug: Deleting Phi assignment: let ternary_result%42#2: uint64 = φ(ternary_result%42#0 <- block@18)
debug: Removing unreachable phi arguments: ternary_result%44#1 <- block@23
debug: Replacing trivial Phi node: let ternary_result%44#2: uint64 = φ(ternary_result%44#0 <- block@21) (ternary_result%44#2) with ternary_result%44#0
debug: Deleting Phi assignment: let ternary_result%44#2: uint64 = φ(ternary_result%44#0 <- block@21)
debug: Removing unreachable phi arguments: ternary_result%51#0 <- block@25
debug: Replacing trivial Phi node: let ternary_result%51#2: uint64 = φ(ternary_result%51#1 <- block@24) (ternary_result%51#2) with ternary_result%51#1
debug: Deleting Phi assignment: let ternary_result%51#2: uint64 = φ(ternary_result%51#1 <- block@24)
debug: Removing unreachable phi arguments: ternary_result%53#0 <- block@28
debug: Replacing trivial Phi node: let ternary_result%53#2: uint64 = φ(awst_tmp%49#1 <- block@27) (ternary_result%53#2) with awst_tmp%49#1
debug: Deleting Phi assignment: let ternary_result%53#2: uint64 = φ(awst_tmp%49#1 <- block@27)
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/bytes_BytesContract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable awst_tmp%11#0
debug: Removing unused variable ternary_result%13#0
debug: Removing unused variable awst_tmp%17#0
debug: Removing unused variable ternary_result%19#0
debug: Removing unused variable awst_tmp%17#1
debug: Removing unused variable ternary_result%21#0
debug: Removing unused variable awst_tmp%24#0
debug: Removing unused variable ternary_result%26#0
debug: Removing unused variable ternary_result%31#0
debug: Removing unused variable ternary_result%36#0
debug: Removing unused variable ternary_result%42#0
debug: Removing unused variable ternary_result%44#0
debug: Removing unused variable ternary_result%51#1
debug: Removing unused variable awst_tmp%49#1
debug: Removing unused variable x#0
debug: Removing unused variable tmp%60#0
debug: Removing unused variable tmp%63#0
debug: Removing unused variable tmp%66#0
debug: Removing unused variable tmp%69#0
debug: Removing unused variable tmp%72#0
debug: Removing unused variable tmp%75#0
debug: Removing unused variable tmp%78#0
debug: Removing unused variable tmp%81#0
debug: Removing unused variable tmp%89#0
debug: Removing unused variable y#3
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // ternary_merge_L26 with block@0: // L5 in block@6: // ternary_merge_L27
debug: Merged linear block@3: // ternary_merge_L26 into block@0: // L5
debug: Replaced predecessor block@6: // ternary_merge_L27 with block@0: // L5 in block@9: // ternary_merge_L27
debug: Merged linear block@6: // ternary_merge_L27 into block@0: // L5
debug: Replaced predecessor block@9: // ternary_merge_L27 with block@0: // L5 in block@12: // ternary_merge_L28
debug: Merged linear block@9: // ternary_merge_L27 into block@0: // L5
debug: Replaced predecessor block@12: // ternary_merge_L28 with block@0: // L5 in block@15: // ternary_merge_L29
debug: Merged linear block@12: // ternary_merge_L28 into block@0: // L5
debug: Replaced predecessor block@15: // ternary_merge_L29 with block@0: // L5 in block@18: // ternary_merge_L30
debug: Merged linear block@15: // ternary_merge_L29 into block@0: // L5
debug: Replaced predecessor block@18: // ternary_merge_L30 with block@0: // L5 in block@21: // ternary_merge_L31
debug: Merged linear block@18: // ternary_merge_L30 into block@0: // L5
debug: Replaced predecessor block@21: // ternary_merge_L31 with block@0: // L5 in block@24: // ternary_merge_L31
debug: Merged linear block@21: // ternary_merge_L31 into block@0: // L5
debug: Replaced predecessor block@24: // ternary_merge_L31 with block@0: // L5 in block@27: // ternary_merge_L33
debug: Merged linear block@24: // ternary_merge_L31 into block@0: // L5
debug: Replaced predecessor block@27: // ternary_merge_L33 with block@0: // L5 in block@30: // ternary_merge_L33
debug: Merged linear block@27: // ternary_merge_L33 into block@0: // L5
debug: Merged linear block@30: // ternary_merge_L33 into block@0: // L5
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/bytes_BytesContract.ssa.opt_pass_4.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%15#0
debug: Removing unused variable tmp%22#0
debug: Removing unused variable tmp%27#0
debug: Removing unused variable tmp%32#0
debug: Removing unused variable tmp%38#0
debug: Removing unused variable tmp%45#0
debug: Removing unused variable tmp%54#0
debug: Removing unused variable tmp%90#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/bytes_BytesContract.ssa.opt_pass_5.ir
debug: Begin optimization pass 6/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%16#0
debug: Removing unused variable tmp%23#0
debug: Removing unused variable tmp%28#0
debug: Removing unused variable tmp%33#0
debug: Removing unused variable tmp%39#0
debug: Removing unused variable tmp%46#0
debug: Removing unused variable tmp%55#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/bytes_BytesContract.ssa.opt_pass_6.ir
debug: Begin optimization pass 7/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 7, ending loop
debug: Output IR to stubs/out/bytes_BytesContract.cssa.ir
debug: Removing Phis from test_cases.stubs.bytes.BytesContract.approval_program
debug: Removing Phis from test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Output IR to stubs/out/bytes_BytesContract.post_ssa.ir
debug: Sequentializing parallel copies in test_cases.stubs.bytes.BytesContract.approval_program
debug: Sequentializing parallel copies in test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Output IR to stubs/out/bytes_BytesContract.parallel_copies.ir
debug: Coalescing local variables in test_cases.stubs.bytes.BytesContract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.stubs.bytes.BytesContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to stubs/out/bytes_BytesContract.final.ir
debug: Output IR to stubs/out/uint64_Uint64Contract.ssa.ir
info: Optimizing test_cases.stubs.uint64.Uint64Contract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Folded None <= None to 1
debug: Folded None >= None to 1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable zero#0
debug: Removing unused variable one#0
debug: Removing unused variable two#0
debug: Removing unused variable five#0
debug: Removing unused variable three#0
debug: Removing unused variable sixty#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable c#0
debug: Removing unused variable true#0
debug: Removing unused variable false#0
debug: Removing unused variable y#0
debug: Optimizer: Simplify Control Ops
debug: ConditionalBranch goto 1u ? block@2 : block@1 simplified to goto block@2
debug: ConditionalBranch goto 1u ? block@5 : block@4 simplified to goto block@5
debug: ConditionalBranch goto 0u ? block@8 : block@7 simplified to goto block@7
debug: ConditionalBranch goto 0u ? block@11 : block@10 simplified to goto block@10
debug: ConditionalBranch goto 1u ? block@13 : block@14 simplified to goto block@13
debug: ConditionalBranch goto 1u ? block@16 : block@17 simplified to goto block@16
debug: ConditionalBranch goto 0u ? block@19 : block@20 simplified to goto block@20
debug: ConditionalBranch goto 0u ? block@22 : block@23 simplified to goto block@23
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // ternary_false_L55 with block@0: // L5 in block@3: // ternary_merge_L55
debug: Merged linear block@2: // ternary_false_L55 into block@0: // L5
debug: Replaced predecessor block@5: // ternary_false_L56 with block@3: // ternary_merge_L55 in block@6: // ternary_merge_L56
debug: Merged linear block@5: // ternary_false_L56 into block@3: // ternary_merge_L55
debug: Replaced predecessor block@7: // ternary_true_L57 with block@6: // ternary_merge_L56 in block@9: // ternary_merge_L57
debug: Merged linear block@7: // ternary_true_L57 into block@6: // ternary_merge_L56
debug: Replaced predecessor block@10: // ternary_true_L58 with block@9: // ternary_merge_L57 in block@12: // ternary_merge_L58
debug: Merged linear block@10: // ternary_true_L58 into block@9: // ternary_merge_L57
debug: Replaced predecessor block@13: // ternary_true_L59 with block@12: // ternary_merge_L58 in block@15: // ternary_merge_L59
debug: Merged linear block@13: // ternary_true_L59 into block@12: // ternary_merge_L58
debug: Replaced predecessor block@16: // ternary_true_L60 with block@15: // ternary_merge_L59 in block@18: // ternary_merge_L60
debug: Merged linear block@16: // ternary_true_L60 into block@15: // ternary_merge_L59
debug: Replaced predecessor block@20: // ternary_false_L61 with block@18: // ternary_merge_L60 in block@21: // ternary_merge_L61
debug: Merged linear block@20: // ternary_false_L61 into block@18: // ternary_merge_L60
debug: Replaced predecessor block@23: // ternary_false_L62 with block@21: // ternary_merge_L61 in block@24: // ternary_merge_L62
debug: Merged linear block@23: // ternary_false_L62 into block@21: // ternary_merge_L61
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@1: // ternary_true_L55, block@4: // ternary_true_L56, block@8: // ternary_false_L57, block@11: // ternary_false_L58, block@14: // ternary_false_L59, block@17: // ternary_false_L60, block@19: // ternary_true_L61, block@22: // ternary_true_L62
debug: Removed unreachable predecessors from block@3: // ternary_merge_L55
debug: Removed unreachable predecessors from block@6: // ternary_merge_L56
debug: Removed unreachable predecessors from block@9: // ternary_merge_L57
debug: Removed unreachable predecessors from block@12: // ternary_merge_L58
debug: Removed unreachable predecessors from block@15: // ternary_merge_L59
debug: Removed unreachable predecessors from block@18: // ternary_merge_L60
debug: Removed unreachable predecessors from block@21: // ternary_merge_L61
debug: Removed unreachable predecessors from block@24: // ternary_merge_L62
debug: Removing unreachable phi arguments: ternary_result%27#0 <- block@1
debug: Replacing trivial Phi node: let ternary_result%27#2: uint64 = φ(ternary_result%27#1 <- block@0) (ternary_result%27#2) with ternary_result%27#1
debug: Deleting Phi assignment: let ternary_result%27#2: uint64 = φ(ternary_result%27#1 <- block@0)
debug: Removing unreachable phi arguments: ternary_result%29#0 <- block@4
debug: Replacing trivial Phi node: let ternary_result%29#2: uint64 = φ(ternary_result%29#1 <- block@3) (ternary_result%29#2) with ternary_result%29#1
debug: Deleting Phi assignment: let ternary_result%29#2: uint64 = φ(ternary_result%29#1 <- block@3)
debug: Removing unreachable phi arguments: ternary_result%31#1 <- block@8
debug: Replacing trivial Phi node: let ternary_result%31#2: uint64 = φ(ternary_result%31#0 <- block@6) (ternary_result%31#2) with ternary_result%31#0
debug: Deleting Phi assignment: let ternary_result%31#2: uint64 = φ(ternary_result%31#0 <- block@6)
debug: Removing unreachable phi arguments: ternary_result%33#1 <- block@11
debug: Replacing trivial Phi node: let ternary_result%33#2: uint64 = φ(ternary_result%33#0 <- block@9) (ternary_result%33#2) with ternary_result%33#0
debug: Deleting Phi assignment: let ternary_result%33#2: uint64 = φ(ternary_result%33#0 <- block@9)
debug: Removing unreachable phi arguments: ternary_result%35#1 <- block@14
debug: Replacing trivial Phi node: let ternary_result%35#2: uint64 = φ(ternary_result%35#0 <- block@12) (ternary_result%35#2) with ternary_result%35#0
debug: Deleting Phi assignment: let ternary_result%35#2: uint64 = φ(ternary_result%35#0 <- block@12)
debug: Removing unreachable phi arguments: ternary_result%37#1 <- block@17
debug: Replacing trivial Phi node: let ternary_result%37#2: uint64 = φ(ternary_result%37#0 <- block@15) (ternary_result%37#2) with ternary_result%37#0
debug: Deleting Phi assignment: let ternary_result%37#2: uint64 = φ(ternary_result%37#0 <- block@15)
debug: Removing unreachable phi arguments: ternary_result%39#0 <- block@19
debug: Replacing trivial Phi node: let ternary_result%39#2: uint64 = φ(ternary_result%39#1 <- block@18) (ternary_result%39#2) with ternary_result%39#1
debug: Deleting Phi assignment: let ternary_result%39#2: uint64 = φ(ternary_result%39#1 <- block@18)
debug: Removing unreachable phi arguments: ternary_result%41#0 <- block@22
debug: Replacing trivial Phi node: let ternary_result%41#2: uint64 = φ(ternary_result%41#1 <- block@21) (ternary_result%41#2) with ternary_result%41#1
debug: Deleting Phi assignment: let ternary_result%41#2: uint64 = φ(ternary_result%41#1 <- block@21)
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/uint64_Uint64Contract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded !0 to 1u
debug: Folded 1 < 5 to 1
debug: Folded 5 > 1 to 1
debug: Folded 1 + 5 to 6
debug: Folded 5 + 60 to 65
debug: Folded 60 - 5 to 55
debug: Folded 60 / 5 to 12
debug: Folded 5 * 60 to 300
debug: Folded 5 exp 3 to 125
debug: Folded 1 shl 2 to 4
debug: Folded 5 shr 3 to 0
debug: Folded ~1 to 18446744073709551614u
debug: Folded 1 & 5 to 1
debug: Folded 60 | 5 to 61
debug: Folded 60 ^ 5 to 57
debug: Folded 254 & 31 to 30
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable c#1
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%11#0
debug: Removing unused variable tmp%14#0
debug: Removing unused variable tmp%16#0
debug: Removing unused variable tmp%19#0
debug: Removing unused variable tmp%23#0
debug: Removing unused variable tmp%25#0
debug: Removing unused variable ternary_result%27#1
debug: Removing unused variable ternary_result%29#1
debug: Removing unused variable ternary_result%31#0
debug: Removing unused variable ternary_result%33#0
debug: Removing unused variable ternary_result%35#0
debug: Removing unused variable ternary_result%37#0
debug: Removing unused variable ternary_result%39#1
debug: Removing unused variable ternary_result%41#1
debug: Removing unused variable tmp%43#0
debug: Removing unused variable tmp%45#0
debug: Removing unused variable tmp%47#0
debug: Removing unused variable y#1
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // ternary_merge_L55 with block@0: // L5 in block@6: // ternary_merge_L56
debug: Merged linear block@3: // ternary_merge_L55 into block@0: // L5
debug: Replaced predecessor block@6: // ternary_merge_L56 with block@0: // L5 in block@9: // ternary_merge_L57
debug: Merged linear block@6: // ternary_merge_L56 into block@0: // L5
debug: Replaced predecessor block@9: // ternary_merge_L57 with block@0: // L5 in block@12: // ternary_merge_L58
debug: Merged linear block@9: // ternary_merge_L57 into block@0: // L5
debug: Replaced predecessor block@12: // ternary_merge_L58 with block@0: // L5 in block@15: // ternary_merge_L59
debug: Merged linear block@12: // ternary_merge_L58 into block@0: // L5
debug: Replaced predecessor block@15: // ternary_merge_L59 with block@0: // L5 in block@18: // ternary_merge_L60
debug: Merged linear block@15: // ternary_merge_L59 into block@0: // L5
debug: Replaced predecessor block@18: // ternary_merge_L60 with block@0: // L5 in block@21: // ternary_merge_L61
debug: Merged linear block@18: // ternary_merge_L60 into block@0: // L5
debug: Replaced predecessor block@21: // ternary_merge_L61 with block@0: // L5 in block@24: // ternary_merge_L62
debug: Merged linear block@21: // ternary_merge_L61 into block@0: // L5
debug: Merged linear block@24: // ternary_merge_L62 into block@0: // L5
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/uint64_Uint64Contract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded 6 == 6 to 1
debug: Folded 65 == 65 to 1
debug: Folded 55 == 55 to 1
debug: Folded 65 - 5 to 60
debug: Folded 12 == 12 to 1
debug: Folded 300 == 300 to 1
debug: Folded 125 == 125 to 1
debug: Folded 4 == 4 to 1
debug: Folded !0 to 1u
debug: Folded 18446744073709551614 == 18446744073709551614 to 1
debug: Folded 1 == 1 to 1
debug: Folded !0 to 1u
debug: Folded !0 to 1u
debug: Folded !0 to 1u
debug: Folded 1 == 1 to 1
debug: Folded 1 == 1 to 1
debug: Folded 1 == 1 to 1
debug: Folded !0 to 1u
debug: Folded 1 == 1 to 1
debug: Folded 61 == 61 to 1
debug: Folded 57 == 57 to 1
debug: Folded 30 == 30 to 1
debug: Folded 30 | 54 to 62
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%9#0
debug: Removing unused variable c#2
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%15#0
debug: Removing unused variable tmp%17#0
debug: Removing unused variable tmp%20#0
debug: Removing unused variable tmp%24#0
debug: Removing unused variable tmp%26#0
debug: Removing unused variable tmp%28#0
debug: Removing unused variable tmp%30#0
debug: Removing unused variable tmp%32#0
debug: Removing unused variable tmp%34#0
debug: Removing unused variable tmp%36#0
debug: Removing unused variable tmp%38#0
debug: Removing unused variable tmp%40#0
debug: Removing unused variable tmp%42#0
debug: Removing unused variable tmp%44#0
debug: Removing unused variable tmp%46#0
debug: Removing unused variable tmp%48#0
debug: Removing unused variable tmp%49#0
debug: Removing unused variable y#2
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/uint64_Uint64Contract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded 60 == 60 to 1
debug: Folded 60 / 5 to 12
debug: Folded 62 == 62 to 1
debug: Folded 62 ^ 255 to 193
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%10#0
debug: Removing unused variable c#3
debug: Removing unused variable tmp%50#0
debug: Removing unused variable y#3
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/uint64_Uint64Contract.ssa.opt_pass_4.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded 12 == 12 to 1
debug: Folded 12 exp 2 to 144
debug: Folded 193 == 193 to 1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%13#0
debug: Removing unused variable c#4
debug: Removing unused variable tmp%51#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/uint64_Uint64Contract.ssa.opt_pass_5.ir
debug: Begin optimization pass 6/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded 144 == 144 to 1
debug: Folded 144 shr 6 to 2
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%18#0
debug: Removing unused variable c#5
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/uint64_Uint64Contract.ssa.opt_pass_6.ir
debug: Begin optimization pass 7/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded 2 == 2 to 1
debug: Folded 2 shl 6 to 128
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%21#0
debug: Removing unused variable c#6
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/uint64_Uint64Contract.ssa.opt_pass_7.ir
debug: Begin optimization pass 8/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Folded 128 == 128 to 1
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%22#0
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Output IR to stubs/out/uint64_Uint64Contract.ssa.opt_pass_8.ir
debug: Begin optimization pass 9/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Arithmetic Simplification
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: No optimizations performed in pass 9, ending loop
debug: Output IR to stubs/out/uint64_Uint64Contract.cssa.ir
debug: Removing Phis from test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Removing Phis from test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Output IR to stubs/out/uint64_Uint64Contract.post_ssa.ir
debug: Sequentializing parallel copies in test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Sequentializing parallel copies in test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Output IR to stubs/out/uint64_Uint64Contract.parallel_copies.ir
debug: Coalescing local variables in test_cases.stubs.uint64.Uint64Contract.approval_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.stubs.uint64.Uint64Contract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Output IR to stubs/out/uint64_Uint64Contract.final.ir
info: Writing stubs/out/biguint.approval.teal
info: Writing stubs/out/biguint.approval.debug.teal
info: Writing stubs/out/biguint.clear.teal
info: Writing stubs/out/biguint.clear.debug.teal
info: Writing stubs/out/bytes.approval.teal
info: Writing stubs/out/bytes.approval.debug.teal
info: Writing stubs/out/bytes.clear.teal
info: Writing stubs/out/bytes.clear.debug.teal
info: Writing stubs/out/uint64.approval.teal
info: Writing stubs/out/uint64.approval.debug.teal
info: Writing stubs/out/uint64.clear.teal
info: Writing stubs/out/uint64.clear.debug.teal