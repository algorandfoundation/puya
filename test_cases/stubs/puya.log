debug: PuyaOptions(paths=['stubs'], output_teal=True, output_arc32=True, output_client=True, output_awst=True, output_ssa_ir=True, output_optimization_ir=True, output_destructured_ir=True, output_memory_ir=True, debug_level=1, optimization_level=1, log_level=<LogLevel.debug: 10>, target_avm_version=10, locals_coalescing_strategy=<LocalsCoalescingStrategy.root_operand: 'root_operand'>)
info: Found python prefix: <git root>/.venv
debug: Sealing block@0: // L11
debug: Terminated block@0: // L11
debug: Looking for 'required_budget_with_buffer' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let required_budget_with_buffer#1: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@1: // while_top_L19
debug: Terminated block@1: // while_top_L19
debug: Sealing block@None: // while_body_L19
debug: Looking for 'fee_source' in an unsealed block creating an incomplete Phi: block@1: // while_top_L19
debug: Created Phi assignment: let fee_source#1: uint64 = undefined while trying to resolve 'fee_source' in block@1: // while_top_L19
debug: Terminated block@2: // while_body_L19
debug: Sealing block@None: // switch_case_default_L25
debug: Sealing block@None: // switch_case_0_L27
debug: Sealing block@None: // switch_case_1_L29
debug: Terminated block@3: // switch_case_0_L27
debug: Terminated block@4: // switch_case_1_L29
debug: Terminated block@5: // switch_case_default_L25
debug: Sealing block@6: // switch_case_next_L25
debug: Terminated block@6: // switch_case_next_L25
debug: Sealing block@1: // while_top_L19
debug: Added required_budget_with_buffer#0 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let required_budget_with_buffer#2: uint64 = undefined while trying to resolve 'required_budget_with_buffer' in block@6: // switch_case_next_L25
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1
debug: Deleting Phi assignment: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5)
debug: Replaced trivial Phi node: let required_budget_with_buffer#2: uint64 = φ(required_budget_with_buffer#1 <- block@3, required_budget_with_buffer#1 <- block@4, required_budget_with_buffer#1 <- block@5) (required_budget_with_buffer#2) with required_budget_with_buffer#1 in current definition for 1 blocks
debug: Added required_budget_with_buffer#1 to Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0
debug: Deleting Phi assignment: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6)
debug: Replaced trivial Phi node: let required_budget_with_buffer#1: uint64 = φ(required_budget_with_buffer#0 <- block@0, required_budget_with_buffer#1 <- block@6) (required_budget_with_buffer#1) with required_budget_with_buffer#0 in current definition for 6 blocks
debug: Added fee_source#0 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0) in block@0: // L11
debug: Created Phi assignment: let fee_source#2: uint64 = undefined while trying to resolve 'fee_source' in block@6: // switch_case_next_L25
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3) in block@3: // switch_case_0_L27
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4) in block@4: // switch_case_1_L29
debug: Added fee_source#1 to Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) in block@5: // switch_case_default_L25
debug: Replacing trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1
debug: Deleting Phi assignment: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5)
debug: Replaced trivial Phi node: let fee_source#2: uint64 = φ(fee_source#1 <- block@3, fee_source#1 <- block@4, fee_source#1 <- block@5) (fee_source#2) with fee_source#1 in current definition for 1 blocks
debug: Added fee_source#1 to Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) in block@6: // switch_case_next_L25
debug: Replacing trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0
debug: Deleting Phi assignment: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6)
debug: Replaced trivial Phi node: let fee_source#1: uint64 = φ(fee_source#0 <- block@0, fee_source#1 <- block@6) (fee_source#1) with fee_source#0 in current definition for 6 blocks
debug: Sealing block@None: // after_while_L19
debug: Terminated block@7: // after_while_L19
debug: Sealing block@0: // L25
debug: Terminated block@0: // L25
debug: Sealing block@0: // L44
debug: Terminated block@0: // L44
debug: Sealing block@0: // L62
debug: Terminated block@0: // L62
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L110
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L110
debug: Terminated block@1: // for_header_L110
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L110
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L110
debug: Looking for 'head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L110
debug: Created Phi assignment: let head_and_tail#1: bytes = undefined while trying to resolve 'head_and_tail' in block@2: // for_body_L110
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@2: // for_body_L110
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@2: // for_body_L110
debug: Terminated block@2: // for_body_L110
debug: Sealing block@3: // for_footer_L110
debug: Terminated block@3: // for_footer_L110
debug: Sealing block@4: // for_increment_L110
debug: Terminated block@4: // for_increment_L110
debug: Sealing block@1: // for_header_L110
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L92
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L110
debug: Sealing block@2: // for_body_L110
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L110
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let head_and_tail#2: bytes = undefined while trying to resolve 'head_and_tail' in block@1: // for_header_L110
debug: Added head_and_tail#0 to Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0) in block@0: // L92
debug: Added head_and_tail#1 to Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#1 <- block@4) in block@4: // for_increment_L110
debug: Added head_and_tail#2 to Phi node: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1) in block@1: // for_header_L110
debug: Replacing trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1) (head_and_tail#1) with head_and_tail#2
debug: Deleting Phi assignment: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1)
debug: Replacing trivial Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#2 <- block@4) (head_and_tail#2) with head_and_tail#0
debug: Deleting Phi assignment: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#2 <- block@4)
debug: Replaced trivial Phi node: let head_and_tail#1: bytes = φ(head_and_tail#2 <- block@1) (head_and_tail#1) with head_and_tail#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let head_and_tail#2: bytes = φ(head_and_tail#0 <- block@0, head_and_tail#2 <- block@4) (head_and_tail#2) with head_and_tail#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L110
debug: Added new_head#0 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0) in block@0: // L92
debug: Added new_head#2 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@4) in block@4: // for_increment_L110
debug: Added new_head#3 to Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) in block@1: // for_header_L110
debug: Replacing trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3
debug: Deleting Phi assignment: let new_head#1: bytes = φ(new_head#3 <- block@1)
debug: Replaced trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L110
debug: Created Phi assignment: let length_minus_1#1: uint64 = undefined while trying to resolve 'length_minus_1' in block@1: // for_header_L110
debug: Added length_minus_1#0 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0) in block@0: // L92
debug: Added length_minus_1#1 to Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4) (length_minus_1#1) with length_minus_1#0
debug: Deleting Phi assignment: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4)
debug: Replaced trivial Phi node: let length_minus_1#1: uint64 = φ(length_minus_1#0 <- block@0, length_minus_1#1 <- block@4) (length_minus_1#1) with length_minus_1#0 in current definition for 4 blocks
debug: Created Phi assignment: let popped_header_offset#1: uint64 = undefined while trying to resolve 'popped_header_offset' in block@1: // for_header_L110
debug: Added popped_header_offset#0 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0) in block@0: // L92
debug: Added popped_header_offset#1 to Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4) (popped_header_offset#1) with popped_header_offset#0
debug: Deleting Phi assignment: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4)
debug: Replaced trivial Phi node: let popped_header_offset#1: uint64 = φ(popped_header_offset#0 <- block@0, popped_header_offset#1 <- block@4) (popped_header_offset#1) with popped_header_offset#0 in current definition for 4 blocks
debug: Created Phi assignment: let popped_offset#1: uint64 = undefined while trying to resolve 'popped_offset' in block@1: // for_header_L110
debug: Added popped_offset#0 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0) in block@0: // L92
debug: Added popped_offset#1 to Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4) (popped_offset#1) with popped_offset#0
debug: Deleting Phi assignment: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4)
debug: Replaced trivial Phi node: let popped_offset#1: uint64 = φ(popped_offset#0 <- block@0, popped_offset#1 <- block@4) (popped_offset#1) with popped_offset#0 in current definition for 4 blocks
debug: Created Phi assignment: let popped#1: bytes = undefined while trying to resolve 'popped' in block@1: // for_header_L110
debug: Added popped#0 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0) in block@0: // L92
debug: Added popped#1 to Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4) in block@4: // for_increment_L110
debug: Replacing trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4) (popped#1) with popped#0
debug: Deleting Phi assignment: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4)
debug: Replaced trivial Phi node: let popped#1: bytes = φ(popped#0 <- block@0, popped#1 <- block@4) (popped#1) with popped#0 in current definition for 4 blocks
debug: Terminated block@5: // after_for_L110
debug: Sealing block@0: // L124
debug: Terminated block@0: // L124
debug: Sealing block@None: // if_body_L146
debug: Sealing block@None: // else_body_L146
debug: Terminated block@1: // if_body_L146
debug: Sealing block@2: // after_if_else_L146
debug: Created Phi assignment: let array_length#1: uint64 = undefined while trying to resolve 'array_length' in block@2: // after_if_else_L146
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0) in block@0: // L124
debug: Added array_length#0 to Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0
debug: Deleting Phi assignment: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1)
debug: Replaced trivial Phi node: let array_length#1: uint64 = φ(array_length#0 <- block@0, array_length#0 <- block@1) (array_length#1) with array_length#0 in current definition for 1 blocks
debug: Created Phi assignment: let is_packed#1: bool = undefined while trying to resolve 'is_packed' in block@2: // after_if_else_L146
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0) in block@0: // L124
debug: Added is_packed#0 to Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0
debug: Deleting Phi assignment: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1)
debug: Replaced trivial Phi node: let is_packed#1: bool = φ(is_packed#0 <- block@0, is_packed#0 <- block@1) (is_packed#1) with is_packed#0 in current definition for 1 blocks
debug: Terminated block@2: // after_if_else_L146
debug: Sealing block@None: // ternary_true_L150
debug: Sealing block@None: // ternary_false_L150
debug: Terminated block@3: // ternary_true_L150
debug: Terminated block@4: // ternary_false_L150
debug: Sealing block@5: // ternary_merge_L150
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@5: // ternary_merge_L150
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3) in block@3: // ternary_true_L150
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@3, ternary_result%0#1 <- block@4) in block@4: // ternary_false_L150
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@2: // after_if_else_L146
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L124
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@0, new_items_count#0 <- block@1) (new_items_count#2) with new_items_count#0 in current definition for 1 blocks
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@3, new_items_count#0 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_merge_L150
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@6: // for_header_L150
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@6: // for_header_L150
debug: Terminated block@6: // for_header_L150
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@7: // for_body_L150
debug: Looking for 'result' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let result#2: bytes = undefined while trying to resolve 'result' in block@7: // for_body_L150
debug: Looking for 'write_offset' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let write_offset#1: uint64 = undefined while trying to resolve 'write_offset' in block@7: // for_body_L150
debug: Looking for 'new_items_bytes' in an unsealed block creating an incomplete Phi: block@7: // for_body_L150
debug: Created Phi assignment: let new_items_bytes#1: bytes = undefined while trying to resolve 'new_items_bytes' in block@7: // for_body_L150
debug: Terminated block@7: // for_body_L150
debug: Sealing block@8: // for_footer_L150
debug: Terminated block@8: // for_footer_L150
debug: Sealing block@9: // for_increment_L150
debug: Terminated block@9: // for_increment_L150
debug: Sealing block@6: // for_header_L150
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@5, range_item%0#3 <- block@9) in block@9: // for_increment_L150
debug: Sealing block@7: // for_body_L150
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@6) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let result#4: bytes = undefined while trying to resolve 'result' in block@6: // for_header_L150
debug: Created Phi assignment: let result#5: bytes = undefined while trying to resolve 'result' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let result#6: bytes = undefined while trying to resolve 'result' in block@2: // after_if_else_L146
debug: Added result#0 to Phi node: let result#6: bytes = φ(result#0 <- block@0) in block@0: // L124
debug: Added result#1 to Phi node: let result#6: bytes = φ(result#0 <- block@0, result#1 <- block@1) in block@1: // if_body_L146
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3) in block@3: // ternary_true_L150
debug: Added result#6 to Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6
debug: Deleting Phi assignment: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4)
debug: Replaced trivial Phi node: let result#5: bytes = φ(result#6 <- block@3, result#6 <- block@4) (result#5) with result#6 in current definition for 1 blocks
debug: Added result#6 to Phi node: let result#4: bytes = φ(result#6 <- block@5) in block@5: // ternary_merge_L150
debug: Added result#3 to Phi node: let result#4: bytes = φ(result#6 <- block@5, result#3 <- block@9) in block@9: // for_increment_L150
debug: Added result#4 to Phi node: let result#2: bytes = φ(result#4 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4
debug: Deleting Phi assignment: let result#2: bytes = φ(result#4 <- block@6)
debug: Replaced trivial Phi node: let result#2: bytes = φ(result#4 <- block@6) (result#2) with result#4 in current definition for 0 blocks
debug: Created Phi assignment: let write_offset#3: uint64 = undefined while trying to resolve 'write_offset' in block@6: // for_header_L150
debug: Created Phi assignment: let write_offset#4: uint64 = undefined while trying to resolve 'write_offset' in block@5: // ternary_merge_L150
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3) in block@3: // ternary_true_L150
debug: Added write_offset#0 to Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0
debug: Deleting Phi assignment: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4)
debug: Replaced trivial Phi node: let write_offset#4: uint64 = φ(write_offset#0 <- block@3, write_offset#0 <- block@4) (write_offset#4) with write_offset#0 in current definition for 1 blocks
debug: Added write_offset#0 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added write_offset#2 to Phi node: let write_offset#3: uint64 = φ(write_offset#0 <- block@5, write_offset#2 <- block@9) in block@9: // for_increment_L150
debug: Added write_offset#3 to Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3
debug: Deleting Phi assignment: let write_offset#1: uint64 = φ(write_offset#3 <- block@6)
debug: Replaced trivial Phi node: let write_offset#1: uint64 = φ(write_offset#3 <- block@6) (write_offset#1) with write_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_items_bytes#2: bytes = undefined while trying to resolve 'new_items_bytes' in block@6: // for_header_L150
debug: Created Phi assignment: let new_items_bytes#3: bytes = undefined while trying to resolve 'new_items_bytes' in block@5: // ternary_merge_L150
debug: Created Phi assignment: let new_items_bytes#4: bytes = undefined while trying to resolve 'new_items_bytes' in block@2: // after_if_else_L146
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0) in block@0: // L124
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) in block@1: // if_body_L146
debug: Replacing trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1)
debug: Replaced trivial Phi node: let new_items_bytes#4: bytes = φ(new_items_bytes#0 <- block@0, new_items_bytes#0 <- block@1) (new_items_bytes#4) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3) in block@3: // ternary_true_L150
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) in block@4: // ternary_false_L150
debug: Replacing trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4)
debug: Replaced trivial Phi node: let new_items_bytes#3: bytes = φ(new_items_bytes#0 <- block@3, new_items_bytes#0 <- block@4) (new_items_bytes#3) with new_items_bytes#0 in current definition for 1 blocks
debug: Added new_items_bytes#0 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5) in block@5: // ternary_merge_L150
debug: Added new_items_bytes#1 to Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#1 <- block@9) in block@9: // for_increment_L150
debug: Added new_items_bytes#2 to Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) in block@6: // for_header_L150
debug: Replacing trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2
debug: Deleting Phi assignment: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6)
debug: Replacing trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0
debug: Deleting Phi assignment: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_bytes#1: bytes = φ(new_items_bytes#2 <- block@6) (new_items_bytes#1) with new_items_bytes#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_items_bytes#2: bytes = φ(new_items_bytes#0 <- block@5, new_items_bytes#2 <- block@9) (new_items_bytes#2) with new_items_bytes#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L150
debug: Terminated block@10: // after_for_L150
debug: Sealing block@0: // L157
debug: Terminated block@0: // L157
debug: Sealing block@0: // L189
debug: Terminated block@0: // L189
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L199
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L199
debug: Terminated block@1: // for_header_L199
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L199
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@2: // for_body_L199
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let new_head#1: bytes = undefined while trying to resolve 'new_head' in block@2: // for_body_L199
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@2: // for_body_L199
debug: Created Phi assignment: let item_offset_adjustment#1: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@2: // for_body_L199
debug: Terminated block@2: // for_body_L199
debug: Sealing block@3: // for_footer_L199
debug: Terminated block@3: // for_footer_L199
debug: Sealing block@4: // for_increment_L199
debug: Terminated block@4: // for_increment_L199
debug: Sealing block@1: // for_header_L199
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L189
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L199
debug: Sealing block@2: // for_body_L199
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let array_head_and_tail#2: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L199
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added array_head_and_tail#1 to Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#1 <- block@4) in block@4: // for_increment_L199
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1) (array_head_and_tail#1) with array_head_and_tail#2
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1)
debug: Replacing trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4) (array_head_and_tail#2) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#2 <- block@1) (array_head_and_tail#1) with array_head_and_tail#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let array_head_and_tail#2: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4) (array_head_and_tail#2) with array_head_and_tail#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_head#3: bytes = undefined while trying to resolve 'new_head' in block@1: // for_header_L199
debug: Added new_head#0 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0) in block@0: // L189
debug: Added new_head#2 to Phi node: let new_head#3: bytes = φ(new_head#0 <- block@0, new_head#2 <- block@4) in block@4: // for_increment_L199
debug: Added new_head#3 to Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3
debug: Deleting Phi assignment: let new_head#1: bytes = φ(new_head#3 <- block@1)
debug: Replaced trivial Phi node: let new_head#1: bytes = φ(new_head#3 <- block@1) (new_head#1) with new_head#3 in current definition for 0 blocks
debug: Created Phi assignment: let item_offset_adjustment#2: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@1: // for_header_L199
debug: Added item_offset_adjustment#0 to Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0) in block@0: // L189
debug: Added item_offset_adjustment#1 to Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#1 <- block@4) in block@4: // for_increment_L199
debug: Added item_offset_adjustment#2 to Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1) in block@1: // for_header_L199
debug: Replacing trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1) (item_offset_adjustment#1) with item_offset_adjustment#2
debug: Deleting Phi assignment: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1)
debug: Replacing trivial Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#2 <- block@4) (item_offset_adjustment#2) with item_offset_adjustment#0
debug: Deleting Phi assignment: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#2 <- block@4)
debug: Replaced trivial Phi node: let item_offset_adjustment#1: uint64 = φ(item_offset_adjustment#2 <- block@1) (item_offset_adjustment#1) with item_offset_adjustment#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let item_offset_adjustment#2: uint64 = φ(item_offset_adjustment#0 <- block@0, item_offset_adjustment#2 <- block@4) (item_offset_adjustment#2) with item_offset_adjustment#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L199
debug: Created Phi assignment: let new_items_count#1: uint64 = undefined while trying to resolve 'new_items_count' in block@1: // for_header_L199
debug: Added new_items_count#0 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0) in block@0: // L189
debug: Added new_items_count#1 to Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4) in block@4: // for_increment_L199
debug: Replacing trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4) (new_items_count#1) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4)
debug: Replaced trivial Phi node: let new_items_count#1: uint64 = φ(new_items_count#0 <- block@0, new_items_count#1 <- block@4) (new_items_count#1) with new_items_count#0 in current definition for 4 blocks
debug: Terminated block@5: // after_for_L199
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@6: // for_header_L204
debug: Created Phi assignment: let range_item%1#1: uint64 = undefined while trying to resolve 'range_item%1' in block@6: // for_header_L204
debug: Terminated block@6: // for_header_L204
debug: Looking for 'range_item%1' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let range_item%1#2: uint64 = undefined while trying to resolve 'range_item%1' in block@7: // for_body_L204
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@7: // for_body_L204
debug: Looking for 'new_head' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let new_head#4: bytes = undefined while trying to resolve 'new_head' in block@7: // for_body_L204
debug: Looking for 'item_offset_adjustment' in an unsealed block creating an incomplete Phi: block@7: // for_body_L204
debug: Created Phi assignment: let item_offset_adjustment#4: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@7: // for_body_L204
debug: Terminated block@7: // for_body_L204
debug: Sealing block@8: // for_footer_L204
debug: Terminated block@8: // for_footer_L204
debug: Sealing block@9: // for_increment_L204
debug: Terminated block@9: // for_increment_L204
debug: Sealing block@6: // for_header_L204
debug: Added range_item%1#0 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@5) in block@5: // after_for_L199
debug: Added range_item%1#3 to Phi node: let range_item%1#1: uint64 = φ(range_item%1#0 <- block@5, range_item%1#3 <- block@9) in block@9: // for_increment_L204
debug: Sealing block@7: // for_body_L204
debug: Added range_item%1#1 to Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6) (range_item%1#2) with range_item%1#1
debug: Deleting Phi assignment: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6)
debug: Replaced trivial Phi node: let range_item%1#2: uint64 = φ(range_item%1#1 <- block@6) (range_item%1#2) with range_item%1#1 in current definition for 2 blocks
debug: Created Phi assignment: let new_head_and_tail#2: bytes = undefined while trying to resolve 'new_head_and_tail' in block@6: // for_header_L204
debug: Created Phi assignment: let new_head_and_tail#3: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L199
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L189
debug: Added new_head_and_tail#3 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4) in block@4: // for_increment_L199
debug: Replacing trivial Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4) (new_head_and_tail#3) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4)
debug: Replaced trivial Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#3 <- block@4) (new_head_and_tail#3) with new_head_and_tail#0 in current definition for 4 blocks
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5) in block@5: // after_for_L199
debug: Added new_head_and_tail#1 to Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#1 <- block@9) in block@9: // for_increment_L204
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6) (new_head_and_tail#1) with new_head_and_tail#2
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6)
debug: Replacing trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#2 <- block@9) (new_head_and_tail#2) with new_head_and_tail#0
debug: Deleting Phi assignment: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#2 <- block@9)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#2 <- block@6) (new_head_and_tail#1) with new_head_and_tail#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_head_and_tail#2: bytes = φ(new_head_and_tail#0 <- block@5, new_head_and_tail#2 <- block@9) (new_head_and_tail#2) with new_head_and_tail#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_head#6: bytes = undefined while trying to resolve 'new_head' in block@6: // for_header_L204
debug: Added new_head#3 to Phi node: let new_head#6: bytes = φ(new_head#3 <- block@5) in block@5: // after_for_L199
debug: Added new_head#5 to Phi node: let new_head#6: bytes = φ(new_head#3 <- block@5, new_head#5 <- block@9) in block@9: // for_increment_L204
debug: Added new_head#6 to Phi node: let new_head#4: bytes = φ(new_head#6 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let new_head#4: bytes = φ(new_head#6 <- block@6) (new_head#4) with new_head#6
debug: Deleting Phi assignment: let new_head#4: bytes = φ(new_head#6 <- block@6)
debug: Replaced trivial Phi node: let new_head#4: bytes = φ(new_head#6 <- block@6) (new_head#4) with new_head#6 in current definition for 0 blocks
debug: Created Phi assignment: let item_offset_adjustment#5: uint64 = undefined while trying to resolve 'item_offset_adjustment' in block@6: // for_header_L204
debug: Added item_offset_adjustment#3 to Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5) in block@5: // after_for_L199
debug: Added item_offset_adjustment#4 to Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#4 <- block@9) in block@9: // for_increment_L204
debug: Added item_offset_adjustment#5 to Phi node: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6) in block@6: // for_header_L204
debug: Replacing trivial Phi node: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6) (item_offset_adjustment#4) with item_offset_adjustment#5
debug: Deleting Phi assignment: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6)
debug: Replacing trivial Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#5 <- block@9) (item_offset_adjustment#5) with item_offset_adjustment#3
debug: Deleting Phi assignment: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#5 <- block@9)
debug: Replaced trivial Phi node: let item_offset_adjustment#4: uint64 = φ(item_offset_adjustment#5 <- block@6) (item_offset_adjustment#4) with item_offset_adjustment#5 in current definition for 3 blocks
debug: Replaced trivial Phi node: let item_offset_adjustment#5: uint64 = φ(item_offset_adjustment#3 <- block@5, item_offset_adjustment#5 <- block@9) (item_offset_adjustment#5) with item_offset_adjustment#3 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L204
debug: Created Phi assignment: let array_items_count#1: uint64 = undefined while trying to resolve 'array_items_count' in block@6: // for_header_L204
debug: Created Phi assignment: let array_items_count#2: uint64 = undefined while trying to resolve 'array_items_count' in block@1: // for_header_L199
debug: Added array_items_count#0 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0) in block@0: // L189
debug: Added array_items_count#2 to Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4) in block@4: // for_increment_L199
debug: Replacing trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4) (array_items_count#2) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4)
debug: Replaced trivial Phi node: let array_items_count#2: uint64 = φ(array_items_count#0 <- block@0, array_items_count#2 <- block@4) (array_items_count#2) with array_items_count#0 in current definition for 4 blocks
debug: Added array_items_count#0 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5) in block@5: // after_for_L199
debug: Added array_items_count#1 to Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9) in block@9: // for_increment_L204
debug: Replacing trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9) (array_items_count#1) with array_items_count#0
debug: Deleting Phi assignment: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9)
debug: Replaced trivial Phi node: let array_items_count#1: uint64 = φ(array_items_count#0 <- block@5, array_items_count#1 <- block@9) (array_items_count#1) with array_items_count#0 in current definition for 4 blocks
debug: Created Phi assignment: let new_items_count#2: uint64 = undefined while trying to resolve 'new_items_count' in block@6: // for_header_L204
debug: Added new_items_count#0 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5) in block@5: // after_for_L199
debug: Added new_items_count#2 to Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9) in block@9: // for_increment_L204
debug: Replacing trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9) (new_items_count#2) with new_items_count#0
debug: Deleting Phi assignment: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9)
debug: Replaced trivial Phi node: let new_items_count#2: uint64 = φ(new_items_count#0 <- block@5, new_items_count#2 <- block@9) (new_items_count#2) with new_items_count#0 in current definition for 4 blocks
debug: Created Phi assignment: let array_head_and_tail#3: bytes = undefined while trying to resolve 'array_head_and_tail' in block@6: // for_header_L204
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5) in block@5: // after_for_L199
debug: Added array_head_and_tail#3 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9) in block@9: // for_increment_L204
debug: Replacing trivial Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9) (array_head_and_tail#3) with array_head_and_tail#0
debug: Deleting Phi assignment: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9)
debug: Replaced trivial Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@5, array_head_and_tail#3 <- block@9) (array_head_and_tail#3) with array_head_and_tail#0 in current definition for 4 blocks
debug: Terminated block@10: // after_for_L204
debug: Sealing block@0: // L217
debug: Terminated block@0: // L217
debug: Sealing block@0: // L240
debug: Terminated block@0: // L240
debug: Sealing block@0: // L252
debug: Terminated block@0: // L252
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L269
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L269
debug: Terminated block@1: // for_header_L269
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L269
debug: Looking for 'new_head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let new_head_and_tail#1: bytes = undefined while trying to resolve 'new_head_and_tail' in block@2: // for_body_L269
debug: Looking for 'new_item_length' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let new_item_length#1: uint64 = undefined while trying to resolve 'new_item_length' in block@2: // for_body_L269
debug: Looking for 'original_item_length' in an unsealed block creating an incomplete Phi: block@2: // for_body_L269
debug: Created Phi assignment: let original_item_length#1: uint64 = undefined while trying to resolve 'original_item_length' in block@2: // for_body_L269
debug: Terminated block@2: // for_body_L269
debug: Sealing block@3: // for_footer_L269
debug: Terminated block@3: // for_footer_L269
debug: Sealing block@4: // for_increment_L269
debug: Terminated block@4: // for_increment_L269
debug: Sealing block@1: // for_header_L269
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L252
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L269
debug: Sealing block@2: // for_body_L269
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let new_head_and_tail#3: bytes = undefined while trying to resolve 'new_head_and_tail' in block@1: // for_header_L269
debug: Added new_head_and_tail#0 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0) in block@0: // L252
debug: Added new_head_and_tail#2 to Phi node: let new_head_and_tail#3: bytes = φ(new_head_and_tail#0 <- block@0, new_head_and_tail#2 <- block@4) in block@4: // for_increment_L269
debug: Added new_head_and_tail#3 to Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1) (new_head_and_tail#1) with new_head_and_tail#3
debug: Deleting Phi assignment: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1)
debug: Replaced trivial Phi node: let new_head_and_tail#1: bytes = φ(new_head_and_tail#3 <- block@1) (new_head_and_tail#1) with new_head_and_tail#3 in current definition for 0 blocks
debug: Created Phi assignment: let new_item_length#2: uint64 = undefined while trying to resolve 'new_item_length' in block@1: // for_header_L269
debug: Added new_item_length#0 to Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0) in block@0: // L252
debug: Added new_item_length#1 to Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#1 <- block@4) in block@4: // for_increment_L269
debug: Added new_item_length#2 to Phi node: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1) (new_item_length#1) with new_item_length#2
debug: Deleting Phi assignment: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1)
debug: Replacing trivial Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#2 <- block@4) (new_item_length#2) with new_item_length#0
debug: Deleting Phi assignment: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#2 <- block@4)
debug: Replaced trivial Phi node: let new_item_length#1: uint64 = φ(new_item_length#2 <- block@1) (new_item_length#1) with new_item_length#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let new_item_length#2: uint64 = φ(new_item_length#0 <- block@0, new_item_length#2 <- block@4) (new_item_length#2) with new_item_length#0 in current definition for 4 blocks
debug: Created Phi assignment: let original_item_length#2: uint64 = undefined while trying to resolve 'original_item_length' in block@1: // for_header_L269
debug: Added original_item_length#0 to Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0) in block@0: // L252
debug: Added original_item_length#1 to Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#1 <- block@4) in block@4: // for_increment_L269
debug: Added original_item_length#2 to Phi node: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1) in block@1: // for_header_L269
debug: Replacing trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1) (original_item_length#1) with original_item_length#2
debug: Deleting Phi assignment: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1)
debug: Replacing trivial Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#2 <- block@4) (original_item_length#2) with original_item_length#0
debug: Deleting Phi assignment: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#2 <- block@4)
debug: Replaced trivial Phi node: let original_item_length#1: uint64 = φ(original_item_length#2 <- block@1) (original_item_length#1) with original_item_length#2 in current definition for 3 blocks
debug: Replaced trivial Phi node: let original_item_length#2: uint64 = φ(original_item_length#0 <- block@0, original_item_length#2 <- block@4) (original_item_length#2) with original_item_length#0 in current definition for 4 blocks
debug: Sealing block@None: // after_for_L269
debug: Terminated block@5: // after_for_L269
debug: Sealing block@0: // L278
debug: Terminated block@0: // L278
debug: Sealing block@0: // L306
debug: Terminated block@0: // L306
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@1: // for_header_L327
debug: Created Phi assignment: let range_item%0#1: uint64 = undefined while trying to resolve 'range_item%0' in block@1: // for_header_L327
debug: Terminated block@1: // for_header_L327
debug: Looking for 'range_item%0' in an unsealed block creating an incomplete Phi: block@2: // for_body_L327
debug: Created Phi assignment: let range_item%0#2: uint64 = undefined while trying to resolve 'range_item%0' in block@2: // for_body_L327
debug: Looking for 'tail_offset' in an unsealed block creating an incomplete Phi: block@2: // for_body_L327
debug: Created Phi assignment: let tail_offset#1: uint64 = undefined while trying to resolve 'tail_offset' in block@2: // for_body_L327
debug: Looking for 'array_head_and_tail' in an unsealed block creating an incomplete Phi: block@2: // for_body_L327
debug: Created Phi assignment: let array_head_and_tail#1: bytes = undefined while trying to resolve 'array_head_and_tail' in block@2: // for_body_L327
debug: Terminated block@2: // for_body_L327
debug: Sealing block@3: // for_footer_L327
debug: Terminated block@3: // for_footer_L327
debug: Sealing block@4: // for_increment_L327
debug: Terminated block@4: // for_increment_L327
debug: Sealing block@1: // for_header_L327
debug: Added range_item%0#0 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0) in block@0: // L306
debug: Added range_item%0#3 to Phi node: let range_item%0#1: uint64 = φ(range_item%0#0 <- block@0, range_item%0#3 <- block@4) in block@4: // for_increment_L327
debug: Sealing block@2: // for_body_L327
debug: Added range_item%0#1 to Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) in block@1: // for_header_L327
debug: Replacing trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1
debug: Deleting Phi assignment: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1)
debug: Replaced trivial Phi node: let range_item%0#2: uint64 = φ(range_item%0#1 <- block@1) (range_item%0#2) with range_item%0#1 in current definition for 2 blocks
debug: Created Phi assignment: let tail_offset#3: uint64 = undefined while trying to resolve 'tail_offset' in block@1: // for_header_L327
debug: Added tail_offset#0 to Phi node: let tail_offset#3: uint64 = φ(tail_offset#0 <- block@0) in block@0: // L306
debug: Added tail_offset#2 to Phi node: let tail_offset#3: uint64 = φ(tail_offset#0 <- block@0, tail_offset#2 <- block@4) in block@4: // for_increment_L327
debug: Added tail_offset#3 to Phi node: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1) in block@1: // for_header_L327
debug: Replacing trivial Phi node: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1) (tail_offset#1) with tail_offset#3
debug: Deleting Phi assignment: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1)
debug: Replaced trivial Phi node: let tail_offset#1: uint64 = φ(tail_offset#3 <- block@1) (tail_offset#1) with tail_offset#3 in current definition for 0 blocks
debug: Created Phi assignment: let array_head_and_tail#3: bytes = undefined while trying to resolve 'array_head_and_tail' in block@1: // for_header_L327
debug: Added array_head_and_tail#0 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@0) in block@0: // L306
debug: Added array_head_and_tail#2 to Phi node: let array_head_and_tail#3: bytes = φ(array_head_and_tail#0 <- block@0, array_head_and_tail#2 <- block@4) in block@4: // for_increment_L327
debug: Added array_head_and_tail#3 to Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1) in block@1: // for_header_L327
debug: Replacing trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1) (array_head_and_tail#1) with array_head_and_tail#3
debug: Deleting Phi assignment: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1)
debug: Replaced trivial Phi node: let array_head_and_tail#1: bytes = φ(array_head_and_tail#3 <- block@1) (array_head_and_tail#1) with array_head_and_tail#3 in current definition for 0 blocks
debug: Sealing block@None: // after_for_L327
debug: Terminated block@5: // after_for_L327
debug: Sealing block@0: // L4
debug: Terminated block@0: // L4
debug: Looking for 'start' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let start#1: uint64 = undefined while trying to resolve 'start' in block@1: // while_top_L11
debug: Looking for 'item' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let item#1: bytes = undefined while trying to resolve 'item' in block@1: // while_top_L11
debug: Looking for 'sequence' in an unsealed block creating an incomplete Phi: block@1: // while_top_L11
debug: Created Phi assignment: let sequence#1: bytes = undefined while trying to resolve 'sequence' in block@1: // while_top_L11
debug: Terminated block@1: // while_top_L11
debug: Sealing block@None: // while_body_L11
debug: Terminated block@2: // while_body_L11
debug: Sealing block@None: // if_body_L12
debug: Sealing block@None: // else_body_L12
debug: Terminated block@3: // if_body_L12
debug: Sealing block@4: // after_if_else_L12
debug: Terminated block@4: // after_if_else_L12
debug: Sealing block@1: // while_top_L11
debug: Added start#0 to Phi node: let start#1: uint64 = φ(start#0 <- block@0) in block@0: // L4
debug: Added start#2 to Phi node: let start#1: uint64 = φ(start#0 <- block@0, start#2 <- block@4) in block@4: // after_if_else_L12
debug: Added item#0 to Phi node: let item#1: bytes = φ(item#0 <- block@0) in block@0: // L4
debug: Added item#1 to Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0
debug: Deleting Phi assignment: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4)
debug: Replaced trivial Phi node: let item#1: bytes = φ(item#0 <- block@0, item#1 <- block@4) (item#1) with item#0 in current definition for 3 blocks
debug: Added sequence#0 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0) in block@0: // L4
debug: Added sequence#1 to Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) in block@4: // after_if_else_L12
debug: Replacing trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0
debug: Deleting Phi assignment: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4)
debug: Replaced trivial Phi node: let sequence#1: bytes = φ(sequence#0 <- block@0, sequence#1 <- block@4) (sequence#1) with sequence#0 in current definition for 3 blocks
debug: Sealing block@None: // after_while_L11
debug: Terminated block@5: // after_while_L11
debug: Sealing block@0: // L20
debug: Terminated block@0: // L20
debug: Sealing block@0: // L30
debug: Terminated block@0: // L30
debug: Sealing block@0: // L40
debug: Terminated block@0: // L40
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@None: // ternary_true_L10
debug: Sealing block@None: // ternary_false_L10
debug: Terminated block@1: // ternary_true_L10
debug: Terminated block@2: // ternary_false_L10
debug: Sealing block@3: // ternary_merge_L10
debug: Created Phi assignment: let ternary_result%0#2: biguint = undefined while trying to resolve 'ternary_result%0' in block@3: // ternary_merge_L10
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: biguint = φ(ternary_result%0#0 <- block@1) in block@1: // ternary_true_L10
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: biguint = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2: // ternary_false_L10
debug: Created Phi assignment: let one#1: biguint = undefined while trying to resolve 'one' in block@3: // ternary_merge_L10
debug: Added one#0 to Phi node: let one#1: biguint = φ(one#0 <- block@1) in block@1: // ternary_true_L10
debug: Added one#0 to Phi node: let one#1: biguint = φ(one#0 <- block@1, one#0 <- block@2) in block@2: // ternary_false_L10
debug: Replacing trivial Phi node: let one#1: biguint = φ(one#0 <- block@1, one#0 <- block@2) (one#1) with one#0
debug: Deleting Phi assignment: let one#1: biguint = φ(one#0 <- block@1, one#0 <- block@2)
debug: Replaced trivial Phi node: let one#1: biguint = φ(one#0 <- block@1, one#0 <- block@2) (one#1) with one#0 in current definition for 1 blocks
debug: Terminated block@3: // ternary_merge_L10
debug: Sealing block@0: // L15
debug: Terminated block@0: // L15
debug: Sealing block@0: // L81
debug: Terminated block@0: // L81
debug: Sealing block@0: // L101
debug: Terminated block@0: // L101
debug: Sealing block@0: // L92
debug: Terminated block@0: // L92
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@None: // ternary_true_L38
debug: Sealing block@None: // ternary_false_L38
debug: Terminated block@1: // ternary_true_L38
debug: Terminated block@2: // ternary_false_L38
debug: Sealing block@3: // ternary_merge_L38
debug: Created Phi assignment: let ternary_result%0#2: bytes = undefined while trying to resolve 'ternary_result%0' in block@3: // ternary_merge_L38
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@1) in block@1: // ternary_true_L38
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: bytes = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2: // ternary_false_L38
debug: Created Phi assignment: let true#1: bytes = undefined while trying to resolve 'true' in block@3: // ternary_merge_L38
debug: Added true#0 to Phi node: let true#1: bytes = φ(true#0 <- block@1) in block@1: // ternary_true_L38
debug: Added true#0 to Phi node: let true#1: bytes = φ(true#0 <- block@1, true#0 <- block@2) in block@2: // ternary_false_L38
debug: Replacing trivial Phi node: let true#1: bytes = φ(true#0 <- block@1, true#0 <- block@2) (true#1) with true#0
debug: Deleting Phi assignment: let true#1: bytes = φ(true#0 <- block@1, true#0 <- block@2)
debug: Replaced trivial Phi node: let true#1: bytes = φ(true#0 <- block@1, true#0 <- block@2) (true#1) with true#0 in current definition for 1 blocks
debug: Terminated block@3: // ternary_merge_L38
debug: Sealing block@None: // ternary_true_L40
debug: Sealing block@None: // ternary_false_L40
debug: Terminated block@4: // ternary_true_L40
debug: Terminated block@5: // ternary_false_L40
debug: Sealing block@6: // ternary_merge_L40
debug: Created Phi assignment: let ternary_result%1#2: bytes = undefined while trying to resolve 'ternary_result%1' in block@6: // ternary_merge_L40
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@4) in block@4: // ternary_true_L40
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: bytes = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5) in block@5: // ternary_false_L40
debug: Created Phi assignment: let true#2: bytes = undefined while trying to resolve 'true' in block@6: // ternary_merge_L40
debug: Added true#0 to Phi node: let true#2: bytes = φ(true#0 <- block@4) in block@4: // ternary_true_L40
debug: Added true#0 to Phi node: let true#2: bytes = φ(true#0 <- block@4, true#0 <- block@5) in block@5: // ternary_false_L40
debug: Replacing trivial Phi node: let true#2: bytes = φ(true#0 <- block@4, true#0 <- block@5) (true#2) with true#0
debug: Deleting Phi assignment: let true#2: bytes = φ(true#0 <- block@4, true#0 <- block@5)
debug: Replaced trivial Phi node: let true#2: bytes = φ(true#0 <- block@4, true#0 <- block@5) (true#2) with true#0 in current definition for 1 blocks
debug: Terminated block@6: // ternary_merge_L40
debug: Sealing block@None: // ternary_true_L41
debug: Sealing block@None: // ternary_false_L41
debug: Terminated block@7: // ternary_true_L41
debug: Created Phi assignment: let false#1: bytes = undefined while trying to resolve 'false' in block@6: // ternary_merge_L40
debug: Created Phi assignment: let false#2: bytes = undefined while trying to resolve 'false' in block@3: // ternary_merge_L38
debug: Added false#0 to Phi node: let false#2: bytes = φ(false#0 <- block@1) in block@1: // ternary_true_L38
debug: Added false#0 to Phi node: let false#2: bytes = φ(false#0 <- block@1, false#0 <- block@2) in block@2: // ternary_false_L38
debug: Replacing trivial Phi node: let false#2: bytes = φ(false#0 <- block@1, false#0 <- block@2) (false#2) with false#0
debug: Deleting Phi assignment: let false#2: bytes = φ(false#0 <- block@1, false#0 <- block@2)
debug: Replaced trivial Phi node: let false#2: bytes = φ(false#0 <- block@1, false#0 <- block@2) (false#2) with false#0 in current definition for 1 blocks
debug: Added false#0 to Phi node: let false#1: bytes = φ(false#0 <- block@4) in block@4: // ternary_true_L40
debug: Added false#0 to Phi node: let false#1: bytes = φ(false#0 <- block@4, false#0 <- block@5) in block@5: // ternary_false_L40
debug: Replacing trivial Phi node: let false#1: bytes = φ(false#0 <- block@4, false#0 <- block@5) (false#1) with false#0
debug: Deleting Phi assignment: let false#1: bytes = φ(false#0 <- block@4, false#0 <- block@5)
debug: Replaced trivial Phi node: let false#1: bytes = φ(false#0 <- block@4, false#0 <- block@5) (false#1) with false#0 in current definition for 1 blocks
debug: Terminated block@8: // ternary_false_L41
debug: Sealing block@9: // ternary_merge_L41
debug: Created Phi assignment: let ternary_result%2#2: bytes = undefined while trying to resolve 'ternary_result%2' in block@9: // ternary_merge_L41
debug: Added ternary_result%2#0 to Phi node: let ternary_result%2#2: bytes = φ(ternary_result%2#0 <- block@7) in block@7: // ternary_true_L41
debug: Added ternary_result%2#1 to Phi node: let ternary_result%2#2: bytes = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8) in block@8: // ternary_false_L41
debug: Created Phi assignment: let false#3: bytes = undefined while trying to resolve 'false' in block@9: // ternary_merge_L41
debug: Added false#0 to Phi node: let false#3: bytes = φ(false#0 <- block@7) in block@7: // ternary_true_L41
debug: Added false#0 to Phi node: let false#3: bytes = φ(false#0 <- block@7, false#0 <- block@8) in block@8: // ternary_false_L41
debug: Replacing trivial Phi node: let false#3: bytes = φ(false#0 <- block@7, false#0 <- block@8) (false#3) with false#0
debug: Deleting Phi assignment: let false#3: bytes = φ(false#0 <- block@7, false#0 <- block@8)
debug: Replaced trivial Phi node: let false#3: bytes = φ(false#0 <- block@7, false#0 <- block@8) (false#3) with false#0 in current definition for 1 blocks
debug: Terminated block@9: // ternary_merge_L41
debug: Sealing block@None: // ternary_true_L42
debug: Sealing block@None: // ternary_false_L42
debug: Terminated block@10: // ternary_true_L42
debug: Created Phi assignment: let true#3: bytes = undefined while trying to resolve 'true' in block@9: // ternary_merge_L41
debug: Added true#0 to Phi node: let true#3: bytes = φ(true#0 <- block@7) in block@7: // ternary_true_L41
debug: Added true#0 to Phi node: let true#3: bytes = φ(true#0 <- block@7, true#0 <- block@8) in block@8: // ternary_false_L41
debug: Replacing trivial Phi node: let true#3: bytes = φ(true#0 <- block@7, true#0 <- block@8) (true#3) with true#0
debug: Deleting Phi assignment: let true#3: bytes = φ(true#0 <- block@7, true#0 <- block@8)
debug: Replaced trivial Phi node: let true#3: bytes = φ(true#0 <- block@7, true#0 <- block@8) (true#3) with true#0 in current definition for 1 blocks
debug: Terminated block@11: // ternary_false_L42
debug: Sealing block@12: // ternary_merge_L42
debug: Created Phi assignment: let ternary_result%3#2: bytes = undefined while trying to resolve 'ternary_result%3' in block@12: // ternary_merge_L42
debug: Added ternary_result%3#0 to Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@10) in block@10: // ternary_true_L42
debug: Added ternary_result%3#1 to Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11) in block@11: // ternary_false_L42
debug: Created Phi assignment: let false#4: bytes = undefined while trying to resolve 'false' in block@12: // ternary_merge_L42
debug: Added false#0 to Phi node: let false#4: bytes = φ(false#0 <- block@10) in block@10: // ternary_true_L42
debug: Added false#0 to Phi node: let false#4: bytes = φ(false#0 <- block@10, false#0 <- block@11) in block@11: // ternary_false_L42
debug: Replacing trivial Phi node: let false#4: bytes = φ(false#0 <- block@10, false#0 <- block@11) (false#4) with false#0
debug: Deleting Phi assignment: let false#4: bytes = φ(false#0 <- block@10, false#0 <- block@11)
debug: Replaced trivial Phi node: let false#4: bytes = φ(false#0 <- block@10, false#0 <- block@11) (false#4) with false#0 in current definition for 1 blocks
debug: Terminated block@12: // ternary_merge_L42
debug: Sealing block@None: // ternary_true_L43
debug: Sealing block@None: // ternary_false_L43
debug: Terminated block@13: // ternary_true_L43
debug: Terminated block@14: // ternary_false_L43
debug: Sealing block@15: // ternary_merge_L43
debug: Created Phi assignment: let ternary_result%4#2: bytes = undefined while trying to resolve 'ternary_result%4' in block@15: // ternary_merge_L43
debug: Added ternary_result%4#0 to Phi node: let ternary_result%4#2: bytes = φ(ternary_result%4#0 <- block@13) in block@13: // ternary_true_L43
debug: Added ternary_result%4#1 to Phi node: let ternary_result%4#2: bytes = φ(ternary_result%4#0 <- block@13, ternary_result%4#1 <- block@14) in block@14: // ternary_false_L43
debug: Created Phi assignment: let false#5: bytes = undefined while trying to resolve 'false' in block@15: // ternary_merge_L43
debug: Added false#0 to Phi node: let false#5: bytes = φ(false#0 <- block@13) in block@13: // ternary_true_L43
debug: Added false#0 to Phi node: let false#5: bytes = φ(false#0 <- block@13, false#0 <- block@14) in block@14: // ternary_false_L43
debug: Replacing trivial Phi node: let false#5: bytes = φ(false#0 <- block@13, false#0 <- block@14) (false#5) with false#0
debug: Deleting Phi assignment: let false#5: bytes = φ(false#0 <- block@13, false#0 <- block@14)
debug: Replaced trivial Phi node: let false#5: bytes = φ(false#0 <- block@13, false#0 <- block@14) (false#5) with false#0 in current definition for 1 blocks
debug: Created Phi assignment: let true#4: bytes = undefined while trying to resolve 'true' in block@15: // ternary_merge_L43
debug: Created Phi assignment: let true#5: bytes = undefined while trying to resolve 'true' in block@12: // ternary_merge_L42
debug: Added true#0 to Phi node: let true#5: bytes = φ(true#0 <- block@10) in block@10: // ternary_true_L42
debug: Added true#0 to Phi node: let true#5: bytes = φ(true#0 <- block@10, true#0 <- block@11) in block@11: // ternary_false_L42
debug: Replacing trivial Phi node: let true#5: bytes = φ(true#0 <- block@10, true#0 <- block@11) (true#5) with true#0
debug: Deleting Phi assignment: let true#5: bytes = φ(true#0 <- block@10, true#0 <- block@11)
debug: Replaced trivial Phi node: let true#5: bytes = φ(true#0 <- block@10, true#0 <- block@11) (true#5) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#4: bytes = φ(true#0 <- block@13) in block@13: // ternary_true_L43
debug: Added true#0 to Phi node: let true#4: bytes = φ(true#0 <- block@13, true#0 <- block@14) in block@14: // ternary_false_L43
debug: Replacing trivial Phi node: let true#4: bytes = φ(true#0 <- block@13, true#0 <- block@14) (true#4) with true#0
debug: Deleting Phi assignment: let true#4: bytes = φ(true#0 <- block@13, true#0 <- block@14)
debug: Replaced trivial Phi node: let true#4: bytes = φ(true#0 <- block@13, true#0 <- block@14) (true#4) with true#0 in current definition for 1 blocks
debug: Terminated block@15: // ternary_merge_L43
debug: Sealing block@None: // ternary_true_L44
debug: Sealing block@None: // ternary_false_L44
debug: Terminated block@16: // ternary_true_L44
debug: Terminated block@17: // ternary_false_L44
debug: Sealing block@18: // ternary_merge_L44
debug: Created Phi assignment: let ternary_result%5#2: bytes = undefined while trying to resolve 'ternary_result%5' in block@18: // ternary_merge_L44
debug: Added ternary_result%5#0 to Phi node: let ternary_result%5#2: bytes = φ(ternary_result%5#0 <- block@16) in block@16: // ternary_true_L44
debug: Added ternary_result%5#1 to Phi node: let ternary_result%5#2: bytes = φ(ternary_result%5#0 <- block@16, ternary_result%5#1 <- block@17) in block@17: // ternary_false_L44
debug: Created Phi assignment: let true#6: bytes = undefined while trying to resolve 'true' in block@18: // ternary_merge_L44
debug: Added true#0 to Phi node: let true#6: bytes = φ(true#0 <- block@16) in block@16: // ternary_true_L44
debug: Added true#0 to Phi node: let true#6: bytes = φ(true#0 <- block@16, true#0 <- block@17) in block@17: // ternary_false_L44
debug: Replacing trivial Phi node: let true#6: bytes = φ(true#0 <- block@16, true#0 <- block@17) (true#6) with true#0
debug: Deleting Phi assignment: let true#6: bytes = φ(true#0 <- block@16, true#0 <- block@17)
debug: Replaced trivial Phi node: let true#6: bytes = φ(true#0 <- block@16, true#0 <- block@17) (true#6) with true#0 in current definition for 1 blocks
debug: Terminated block@18: // ternary_merge_L44
debug: Sealing block@None: // ternary_true_L45
debug: Sealing block@None: // ternary_false_L45
debug: Terminated block@19: // ternary_true_L45
debug: Created Phi assignment: let false#6: bytes = undefined while trying to resolve 'false' in block@18: // ternary_merge_L44
debug: Added false#0 to Phi node: let false#6: bytes = φ(false#0 <- block@16) in block@16: // ternary_true_L44
debug: Added false#0 to Phi node: let false#6: bytes = φ(false#0 <- block@16, false#0 <- block@17) in block@17: // ternary_false_L44
debug: Replacing trivial Phi node: let false#6: bytes = φ(false#0 <- block@16, false#0 <- block@17) (false#6) with false#0
debug: Deleting Phi assignment: let false#6: bytes = φ(false#0 <- block@16, false#0 <- block@17)
debug: Replaced trivial Phi node: let false#6: bytes = φ(false#0 <- block@16, false#0 <- block@17) (false#6) with false#0 in current definition for 1 blocks
debug: Terminated block@20: // ternary_false_L45
debug: Sealing block@21: // ternary_merge_L45
debug: Created Phi assignment: let ternary_result%6#2: bytes = undefined while trying to resolve 'ternary_result%6' in block@21: // ternary_merge_L45
debug: Added ternary_result%6#0 to Phi node: let ternary_result%6#2: bytes = φ(ternary_result%6#0 <- block@19) in block@19: // ternary_true_L45
debug: Added ternary_result%6#1 to Phi node: let ternary_result%6#2: bytes = φ(ternary_result%6#0 <- block@19, ternary_result%6#1 <- block@20) in block@20: // ternary_false_L45
debug: Created Phi assignment: let true#7: bytes = undefined while trying to resolve 'true' in block@21: // ternary_merge_L45
debug: Added true#0 to Phi node: let true#7: bytes = φ(true#0 <- block@19) in block@19: // ternary_true_L45
debug: Added true#0 to Phi node: let true#7: bytes = φ(true#0 <- block@19, true#0 <- block@20) in block@20: // ternary_false_L45
debug: Replacing trivial Phi node: let true#7: bytes = φ(true#0 <- block@19, true#0 <- block@20) (true#7) with true#0
debug: Deleting Phi assignment: let true#7: bytes = φ(true#0 <- block@19, true#0 <- block@20)
debug: Replaced trivial Phi node: let true#7: bytes = φ(true#0 <- block@19, true#0 <- block@20) (true#7) with true#0 in current definition for 1 blocks
debug: Created Phi assignment: let false#7: bytes = undefined while trying to resolve 'false' in block@21: // ternary_merge_L45
debug: Added false#0 to Phi node: let false#7: bytes = φ(false#0 <- block@19) in block@19: // ternary_true_L45
debug: Added false#0 to Phi node: let false#7: bytes = φ(false#0 <- block@19, false#0 <- block@20) in block@20: // ternary_false_L45
debug: Replacing trivial Phi node: let false#7: bytes = φ(false#0 <- block@19, false#0 <- block@20) (false#7) with false#0
debug: Deleting Phi assignment: let false#7: bytes = φ(false#0 <- block@19, false#0 <- block@20)
debug: Replaced trivial Phi node: let false#7: bytes = φ(false#0 <- block@19, false#0 <- block@20) (false#7) with false#0 in current definition for 1 blocks
debug: Terminated block@21: // ternary_merge_L45
debug: Sealing block@None: // ternary_true_L46
debug: Sealing block@None: // ternary_false_L46
debug: Terminated block@22: // ternary_true_L46
debug: Terminated block@23: // ternary_false_L46
debug: Sealing block@24: // ternary_merge_L46
debug: Created Phi assignment: let ternary_result%7#2: bytes = undefined while trying to resolve 'ternary_result%7' in block@24: // ternary_merge_L46
debug: Added ternary_result%7#0 to Phi node: let ternary_result%7#2: bytes = φ(ternary_result%7#0 <- block@22) in block@22: // ternary_true_L46
debug: Added ternary_result%7#1 to Phi node: let ternary_result%7#2: bytes = φ(ternary_result%7#0 <- block@22, ternary_result%7#1 <- block@23) in block@23: // ternary_false_L46
debug: Created Phi assignment: let true#8: bytes = undefined while trying to resolve 'true' in block@24: // ternary_merge_L46
debug: Added true#0 to Phi node: let true#8: bytes = φ(true#0 <- block@22) in block@22: // ternary_true_L46
debug: Added true#0 to Phi node: let true#8: bytes = φ(true#0 <- block@22, true#0 <- block@23) in block@23: // ternary_false_L46
debug: Replacing trivial Phi node: let true#8: bytes = φ(true#0 <- block@22, true#0 <- block@23) (true#8) with true#0
debug: Deleting Phi assignment: let true#8: bytes = φ(true#0 <- block@22, true#0 <- block@23)
debug: Replaced trivial Phi node: let true#8: bytes = φ(true#0 <- block@22, true#0 <- block@23) (true#8) with true#0 in current definition for 1 blocks
debug: Created Phi assignment: let false#8: bytes = undefined while trying to resolve 'false' in block@24: // ternary_merge_L46
debug: Added false#0 to Phi node: let false#8: bytes = φ(false#0 <- block@22) in block@22: // ternary_true_L46
debug: Added false#0 to Phi node: let false#8: bytes = φ(false#0 <- block@22, false#0 <- block@23) in block@23: // ternary_false_L46
debug: Replacing trivial Phi node: let false#8: bytes = φ(false#0 <- block@22, false#0 <- block@23) (false#8) with false#0
debug: Deleting Phi assignment: let false#8: bytes = φ(false#0 <- block@22, false#0 <- block@23)
debug: Replaced trivial Phi node: let false#8: bytes = φ(false#0 <- block@22, false#0 <- block@23) (false#8) with false#0 in current definition for 1 blocks
debug: Terminated block@24: // ternary_merge_L46
debug: Sealing block@None: // ternary_true_L47
debug: Sealing block@None: // ternary_false_L47
debug: Terminated block@25: // ternary_true_L47
debug: Terminated block@26: // ternary_false_L47
debug: Sealing block@27: // ternary_merge_L47
debug: Created Phi assignment: let ternary_result%8#2: bytes = undefined while trying to resolve 'ternary_result%8' in block@27: // ternary_merge_L47
debug: Added ternary_result%8#0 to Phi node: let ternary_result%8#2: bytes = φ(ternary_result%8#0 <- block@25) in block@25: // ternary_true_L47
debug: Added ternary_result%8#1 to Phi node: let ternary_result%8#2: bytes = φ(ternary_result%8#0 <- block@25, ternary_result%8#1 <- block@26) in block@26: // ternary_false_L47
debug: Created Phi assignment: let false#9: bytes = undefined while trying to resolve 'false' in block@27: // ternary_merge_L47
debug: Added false#0 to Phi node: let false#9: bytes = φ(false#0 <- block@25) in block@25: // ternary_true_L47
debug: Added false#0 to Phi node: let false#9: bytes = φ(false#0 <- block@25, false#0 <- block@26) in block@26: // ternary_false_L47
debug: Replacing trivial Phi node: let false#9: bytes = φ(false#0 <- block@25, false#0 <- block@26) (false#9) with false#0
debug: Deleting Phi assignment: let false#9: bytes = φ(false#0 <- block@25, false#0 <- block@26)
debug: Replaced trivial Phi node: let false#9: bytes = φ(false#0 <- block@25, false#0 <- block@26) (false#9) with false#0 in current definition for 1 blocks
debug: Created Phi assignment: let abc#1: bytes = undefined while trying to resolve 'abc' in block@27: // ternary_merge_L47
debug: Created Phi assignment: let abc#2: bytes = undefined while trying to resolve 'abc' in block@24: // ternary_merge_L46
debug: Created Phi assignment: let abc#3: bytes = undefined while trying to resolve 'abc' in block@21: // ternary_merge_L45
debug: Created Phi assignment: let abc#4: bytes = undefined while trying to resolve 'abc' in block@18: // ternary_merge_L44
debug: Created Phi assignment: let abc#5: bytes = undefined while trying to resolve 'abc' in block@15: // ternary_merge_L43
debug: Created Phi assignment: let abc#6: bytes = undefined while trying to resolve 'abc' in block@12: // ternary_merge_L42
debug: Created Phi assignment: let abc#7: bytes = undefined while trying to resolve 'abc' in block@9: // ternary_merge_L41
debug: Created Phi assignment: let abc#8: bytes = undefined while trying to resolve 'abc' in block@6: // ternary_merge_L40
debug: Created Phi assignment: let abc#9: bytes = undefined while trying to resolve 'abc' in block@3: // ternary_merge_L38
debug: Added abc#0 to Phi node: let abc#9: bytes = φ(abc#0 <- block@1) in block@1: // ternary_true_L38
debug: Added abc#0 to Phi node: let abc#9: bytes = φ(abc#0 <- block@1, abc#0 <- block@2) in block@2: // ternary_false_L38
debug: Replacing trivial Phi node: let abc#9: bytes = φ(abc#0 <- block@1, abc#0 <- block@2) (abc#9) with abc#0
debug: Deleting Phi assignment: let abc#9: bytes = φ(abc#0 <- block@1, abc#0 <- block@2)
debug: Replaced trivial Phi node: let abc#9: bytes = φ(abc#0 <- block@1, abc#0 <- block@2) (abc#9) with abc#0 in current definition for 1 blocks
debug: Added abc#0 to Phi node: let abc#8: bytes = φ(abc#0 <- block@4) in block@4: // ternary_true_L40
debug: Added abc#0 to Phi node: let abc#8: bytes = φ(abc#0 <- block@4, abc#0 <- block@5) in block@5: // ternary_false_L40
debug: Replacing trivial Phi node: let abc#8: bytes = φ(abc#0 <- block@4, abc#0 <- block@5) (abc#8) with abc#0
debug: Deleting Phi assignment: let abc#8: bytes = φ(abc#0 <- block@4, abc#0 <- block@5)
debug: Replaced trivial Phi node: let abc#8: bytes = φ(abc#0 <- block@4, abc#0 <- block@5) (abc#8) with abc#0 in current definition for 1 blocks
debug: Added abc#0 to Phi node: let abc#7: bytes = φ(abc#0 <- block@7) in block@7: // ternary_true_L41
debug: Added abc#0 to Phi node: let abc#7: bytes = φ(abc#0 <- block@7, abc#0 <- block@8) in block@8: // ternary_false_L41
debug: Replacing trivial Phi node: let abc#7: bytes = φ(abc#0 <- block@7, abc#0 <- block@8) (abc#7) with abc#0
debug: Deleting Phi assignment: let abc#7: bytes = φ(abc#0 <- block@7, abc#0 <- block@8)
debug: Replaced trivial Phi node: let abc#7: bytes = φ(abc#0 <- block@7, abc#0 <- block@8) (abc#7) with abc#0 in current definition for 1 blocks
debug: Added abc#0 to Phi node: let abc#6: bytes = φ(abc#0 <- block@10) in block@10: // ternary_true_L42
debug: Added abc#0 to Phi node: let abc#6: bytes = φ(abc#0 <- block@10, abc#0 <- block@11) in block@11: // ternary_false_L42
debug: Replacing trivial Phi node: let abc#6: bytes = φ(abc#0 <- block@10, abc#0 <- block@11) (abc#6) with abc#0
debug: Deleting Phi assignment: let abc#6: bytes = φ(abc#0 <- block@10, abc#0 <- block@11)
debug: Replaced trivial Phi node: let abc#6: bytes = φ(abc#0 <- block@10, abc#0 <- block@11) (abc#6) with abc#0 in current definition for 1 blocks
debug: Added abc#0 to Phi node: let abc#5: bytes = φ(abc#0 <- block@13) in block@13: // ternary_true_L43
debug: Added abc#0 to Phi node: let abc#5: bytes = φ(abc#0 <- block@13, abc#0 <- block@14) in block@14: // ternary_false_L43
debug: Replacing trivial Phi node: let abc#5: bytes = φ(abc#0 <- block@13, abc#0 <- block@14) (abc#5) with abc#0
debug: Deleting Phi assignment: let abc#5: bytes = φ(abc#0 <- block@13, abc#0 <- block@14)
debug: Replaced trivial Phi node: let abc#5: bytes = φ(abc#0 <- block@13, abc#0 <- block@14) (abc#5) with abc#0 in current definition for 1 blocks
debug: Added abc#0 to Phi node: let abc#4: bytes = φ(abc#0 <- block@16) in block@16: // ternary_true_L44
debug: Added abc#0 to Phi node: let abc#4: bytes = φ(abc#0 <- block@16, abc#0 <- block@17) in block@17: // ternary_false_L44
debug: Replacing trivial Phi node: let abc#4: bytes = φ(abc#0 <- block@16, abc#0 <- block@17) (abc#4) with abc#0
debug: Deleting Phi assignment: let abc#4: bytes = φ(abc#0 <- block@16, abc#0 <- block@17)
debug: Replaced trivial Phi node: let abc#4: bytes = φ(abc#0 <- block@16, abc#0 <- block@17) (abc#4) with abc#0 in current definition for 1 blocks
debug: Added abc#0 to Phi node: let abc#3: bytes = φ(abc#0 <- block@19) in block@19: // ternary_true_L45
debug: Added abc#0 to Phi node: let abc#3: bytes = φ(abc#0 <- block@19, abc#0 <- block@20) in block@20: // ternary_false_L45
debug: Replacing trivial Phi node: let abc#3: bytes = φ(abc#0 <- block@19, abc#0 <- block@20) (abc#3) with abc#0
debug: Deleting Phi assignment: let abc#3: bytes = φ(abc#0 <- block@19, abc#0 <- block@20)
debug: Replaced trivial Phi node: let abc#3: bytes = φ(abc#0 <- block@19, abc#0 <- block@20) (abc#3) with abc#0 in current definition for 1 blocks
debug: Added abc#0 to Phi node: let abc#2: bytes = φ(abc#0 <- block@22) in block@22: // ternary_true_L46
debug: Added abc#0 to Phi node: let abc#2: bytes = φ(abc#0 <- block@22, abc#0 <- block@23) in block@23: // ternary_false_L46
debug: Replacing trivial Phi node: let abc#2: bytes = φ(abc#0 <- block@22, abc#0 <- block@23) (abc#2) with abc#0
debug: Deleting Phi assignment: let abc#2: bytes = φ(abc#0 <- block@22, abc#0 <- block@23)
debug: Replaced trivial Phi node: let abc#2: bytes = φ(abc#0 <- block@22, abc#0 <- block@23) (abc#2) with abc#0 in current definition for 1 blocks
debug: Added abc#0 to Phi node: let abc#1: bytes = φ(abc#0 <- block@25) in block@25: // ternary_true_L47
debug: Added abc#0 to Phi node: let abc#1: bytes = φ(abc#0 <- block@25, abc#0 <- block@26) in block@26: // ternary_false_L47
debug: Replacing trivial Phi node: let abc#1: bytes = φ(abc#0 <- block@25, abc#0 <- block@26) (abc#1) with abc#0
debug: Deleting Phi assignment: let abc#1: bytes = φ(abc#0 <- block@25, abc#0 <- block@26)
debug: Replaced trivial Phi node: let abc#1: bytes = φ(abc#0 <- block@25, abc#0 <- block@26) (abc#1) with abc#0 in current definition for 1 blocks
debug: Terminated block@27: // ternary_merge_L47
debug: Sealing block@None: // ternary_true_L72
debug: Sealing block@None: // ternary_false_L72
debug: Terminated block@28: // ternary_true_L72
debug: Terminated block@29: // ternary_false_L72
debug: Sealing block@30: // ternary_merge_L72
debug: Created Phi assignment: let ternary_result%9#2: bytes = undefined while trying to resolve 'ternary_result%9' in block@30: // ternary_merge_L72
debug: Added ternary_result%9#0 to Phi node: let ternary_result%9#2: bytes = φ(ternary_result%9#0 <- block@28) in block@28: // ternary_true_L72
debug: Added ternary_result%9#1 to Phi node: let ternary_result%9#2: bytes = φ(ternary_result%9#0 <- block@28, ternary_result%9#1 <- block@29) in block@29: // ternary_false_L72
debug: Terminated block@30: // ternary_merge_L72
debug: Sealing block@0: // L77
debug: Terminated block@0: // L77
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@None: // ternary_true_L26
debug: Sealing block@None: // ternary_false_L26
debug: Terminated block@1: // ternary_true_L26
debug: Terminated block@2: // ternary_false_L26
debug: Sealing block@3: // ternary_merge_L26
debug: Created Phi assignment: let ternary_result%0#2: bool = undefined while trying to resolve 'ternary_result%0' in block@3: // ternary_merge_L26
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@1) in block@1: // ternary_true_L26
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2: // ternary_false_L26
debug: Created Phi assignment: let alpha#1: bytes = undefined while trying to resolve 'alpha' in block@3: // ternary_merge_L26
debug: Added alpha#0 to Phi node: let alpha#1: bytes = φ(alpha#0 <- block@1) in block@1: // ternary_true_L26
debug: Added alpha#0 to Phi node: let alpha#1: bytes = φ(alpha#0 <- block@1, alpha#0 <- block@2) in block@2: // ternary_false_L26
debug: Replacing trivial Phi node: let alpha#1: bytes = φ(alpha#0 <- block@1, alpha#0 <- block@2) (alpha#1) with alpha#0
debug: Deleting Phi assignment: let alpha#1: bytes = φ(alpha#0 <- block@1, alpha#0 <- block@2)
debug: Replaced trivial Phi node: let alpha#1: bytes = φ(alpha#0 <- block@1, alpha#0 <- block@2) (alpha#1) with alpha#0 in current definition for 1 blocks
debug: Terminated block@3: // ternary_merge_L26
debug: Sealing block@None: // ternary_true_L27
debug: Sealing block@None: // ternary_false_L27
debug: Terminated block@4: // ternary_true_L27
debug: Terminated block@5: // ternary_false_L27
debug: Sealing block@6: // ternary_merge_L27
debug: Created Phi assignment: let ternary_result%1#2: bool = undefined while trying to resolve 'ternary_result%1' in block@6: // ternary_merge_L27
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@4) in block@4: // ternary_true_L27
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5) in block@5: // ternary_false_L27
debug: Created Phi assignment: let alpha#2: bytes = undefined while trying to resolve 'alpha' in block@6: // ternary_merge_L27
debug: Added alpha#0 to Phi node: let alpha#2: bytes = φ(alpha#0 <- block@4) in block@4: // ternary_true_L27
debug: Added alpha#0 to Phi node: let alpha#2: bytes = φ(alpha#0 <- block@4, alpha#0 <- block@5) in block@5: // ternary_false_L27
debug: Replacing trivial Phi node: let alpha#2: bytes = φ(alpha#0 <- block@4, alpha#0 <- block@5) (alpha#2) with alpha#0
debug: Deleting Phi assignment: let alpha#2: bytes = φ(alpha#0 <- block@4, alpha#0 <- block@5)
debug: Replaced trivial Phi node: let alpha#2: bytes = φ(alpha#0 <- block@4, alpha#0 <- block@5) (alpha#2) with alpha#0 in current definition for 1 blocks
debug: Terminated block@6: // ternary_merge_L27
debug: Sealing block@None: // ternary_true_L28
debug: Sealing block@None: // ternary_false_L28
debug: Terminated block@7: // ternary_true_L28
debug: Terminated block@8: // ternary_false_L28
debug: Sealing block@9: // ternary_merge_L28
debug: Created Phi assignment: let ternary_result%2#2: bool = undefined while trying to resolve 'ternary_result%2' in block@9: // ternary_merge_L28
debug: Added ternary_result%2#0 to Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@7) in block@7: // ternary_true_L28
debug: Added ternary_result%2#1 to Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8) in block@8: // ternary_false_L28
debug: Created Phi assignment: let alpha#3: bytes = undefined while trying to resolve 'alpha' in block@9: // ternary_merge_L28
debug: Added alpha#0 to Phi node: let alpha#3: bytes = φ(alpha#0 <- block@7) in block@7: // ternary_true_L28
debug: Added alpha#0 to Phi node: let alpha#3: bytes = φ(alpha#0 <- block@7, alpha#0 <- block@8) in block@8: // ternary_false_L28
debug: Replacing trivial Phi node: let alpha#3: bytes = φ(alpha#0 <- block@7, alpha#0 <- block@8) (alpha#3) with alpha#0
debug: Deleting Phi assignment: let alpha#3: bytes = φ(alpha#0 <- block@7, alpha#0 <- block@8)
debug: Replaced trivial Phi node: let alpha#3: bytes = φ(alpha#0 <- block@7, alpha#0 <- block@8) (alpha#3) with alpha#0 in current definition for 1 blocks
debug: Terminated block@9: // ternary_merge_L28
debug: Sealing block@None: // ternary_true_L29
debug: Sealing block@None: // ternary_false_L29
debug: Terminated block@10: // ternary_true_L29
debug: Terminated block@11: // ternary_false_L29
debug: Sealing block@12: // ternary_merge_L29
debug: Created Phi assignment: let ternary_result%3#2: bool = undefined while trying to resolve 'ternary_result%3' in block@12: // ternary_merge_L29
debug: Added ternary_result%3#0 to Phi node: let ternary_result%3#2: bool = φ(ternary_result%3#0 <- block@10) in block@10: // ternary_true_L29
debug: Added ternary_result%3#1 to Phi node: let ternary_result%3#2: bool = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11) in block@11: // ternary_false_L29
debug: Created Phi assignment: let alpha#4: bytes = undefined while trying to resolve 'alpha' in block@12: // ternary_merge_L29
debug: Added alpha#0 to Phi node: let alpha#4: bytes = φ(alpha#0 <- block@10) in block@10: // ternary_true_L29
debug: Added alpha#0 to Phi node: let alpha#4: bytes = φ(alpha#0 <- block@10, alpha#0 <- block@11) in block@11: // ternary_false_L29
debug: Replacing trivial Phi node: let alpha#4: bytes = φ(alpha#0 <- block@10, alpha#0 <- block@11) (alpha#4) with alpha#0
debug: Deleting Phi assignment: let alpha#4: bytes = φ(alpha#0 <- block@10, alpha#0 <- block@11)
debug: Replaced trivial Phi node: let alpha#4: bytes = φ(alpha#0 <- block@10, alpha#0 <- block@11) (alpha#4) with alpha#0 in current definition for 1 blocks
debug: Terminated block@12: // ternary_merge_L29
debug: Sealing block@None: // ternary_true_L30
debug: Sealing block@None: // ternary_false_L30
debug: Terminated block@13: // ternary_true_L30
debug: Terminated block@14: // ternary_false_L30
debug: Sealing block@15: // ternary_merge_L30
debug: Created Phi assignment: let ternary_result%4#2: bool = undefined while trying to resolve 'ternary_result%4' in block@15: // ternary_merge_L30
debug: Added ternary_result%4#0 to Phi node: let ternary_result%4#2: bool = φ(ternary_result%4#0 <- block@13) in block@13: // ternary_true_L30
debug: Added ternary_result%4#1 to Phi node: let ternary_result%4#2: bool = φ(ternary_result%4#0 <- block@13, ternary_result%4#1 <- block@14) in block@14: // ternary_false_L30
debug: Created Phi assignment: let alpha#5: bytes = undefined while trying to resolve 'alpha' in block@15: // ternary_merge_L30
debug: Added alpha#0 to Phi node: let alpha#5: bytes = φ(alpha#0 <- block@13) in block@13: // ternary_true_L30
debug: Added alpha#0 to Phi node: let alpha#5: bytes = φ(alpha#0 <- block@13, alpha#0 <- block@14) in block@14: // ternary_false_L30
debug: Replacing trivial Phi node: let alpha#5: bytes = φ(alpha#0 <- block@13, alpha#0 <- block@14) (alpha#5) with alpha#0
debug: Deleting Phi assignment: let alpha#5: bytes = φ(alpha#0 <- block@13, alpha#0 <- block@14)
debug: Replaced trivial Phi node: let alpha#5: bytes = φ(alpha#0 <- block@13, alpha#0 <- block@14) (alpha#5) with alpha#0 in current definition for 1 blocks
debug: Terminated block@15: // ternary_merge_L30
debug: Sealing block@None: // ternary_true_L31
debug: Sealing block@None: // ternary_false_L31
debug: Terminated block@16: // ternary_true_L31
debug: Terminated block@17: // ternary_false_L31
debug: Sealing block@18: // ternary_merge_L31
debug: Created Phi assignment: let ternary_result%5#2: bool = undefined while trying to resolve 'ternary_result%5' in block@18: // ternary_merge_L31
debug: Added ternary_result%5#0 to Phi node: let ternary_result%5#2: bool = φ(ternary_result%5#0 <- block@16) in block@16: // ternary_true_L31
debug: Added ternary_result%5#1 to Phi node: let ternary_result%5#2: bool = φ(ternary_result%5#0 <- block@16, ternary_result%5#1 <- block@17) in block@17: // ternary_false_L31
debug: Created Phi assignment: let alpha#6: bytes = undefined while trying to resolve 'alpha' in block@18: // ternary_merge_L31
debug: Added alpha#0 to Phi node: let alpha#6: bytes = φ(alpha#0 <- block@16) in block@16: // ternary_true_L31
debug: Added alpha#0 to Phi node: let alpha#6: bytes = φ(alpha#0 <- block@16, alpha#0 <- block@17) in block@17: // ternary_false_L31
debug: Replacing trivial Phi node: let alpha#6: bytes = φ(alpha#0 <- block@16, alpha#0 <- block@17) (alpha#6) with alpha#0
debug: Deleting Phi assignment: let alpha#6: bytes = φ(alpha#0 <- block@16, alpha#0 <- block@17)
debug: Replaced trivial Phi node: let alpha#6: bytes = φ(alpha#0 <- block@16, alpha#0 <- block@17) (alpha#6) with alpha#0 in current definition for 1 blocks
debug: Terminated block@18: // ternary_merge_L31
debug: Sealing block@None: // ternary_true_L33
debug: Sealing block@None: // ternary_false_L33
debug: Terminated block@19: // ternary_true_L33
debug: Terminated block@20: // ternary_false_L33
debug: Sealing block@21: // ternary_merge_L33
debug: Created Phi assignment: let ternary_result%6#2: bool = undefined while trying to resolve 'ternary_result%6' in block@21: // ternary_merge_L33
debug: Added ternary_result%6#0 to Phi node: let ternary_result%6#2: bool = φ(ternary_result%6#0 <- block@19) in block@19: // ternary_true_L33
debug: Added ternary_result%6#1 to Phi node: let ternary_result%6#2: bool = φ(ternary_result%6#0 <- block@19, ternary_result%6#1 <- block@20) in block@20: // ternary_false_L33
debug: Created Phi assignment: let alpha#7: bytes = undefined while trying to resolve 'alpha' in block@21: // ternary_merge_L33
debug: Added alpha#0 to Phi node: let alpha#7: bytes = φ(alpha#0 <- block@19) in block@19: // ternary_true_L33
debug: Added alpha#0 to Phi node: let alpha#7: bytes = φ(alpha#0 <- block@19, alpha#0 <- block@20) in block@20: // ternary_false_L33
debug: Replacing trivial Phi node: let alpha#7: bytes = φ(alpha#0 <- block@19, alpha#0 <- block@20) (alpha#7) with alpha#0
debug: Deleting Phi assignment: let alpha#7: bytes = φ(alpha#0 <- block@19, alpha#0 <- block@20)
debug: Replaced trivial Phi node: let alpha#7: bytes = φ(alpha#0 <- block@19, alpha#0 <- block@20) (alpha#7) with alpha#0 in current definition for 1 blocks
debug: Terminated block@21: // ternary_merge_L33
debug: Sealing block@None: // ternary_true_L34
debug: Sealing block@None: // ternary_false_L34
debug: Terminated block@22: // ternary_true_L34
debug: Terminated block@23: // ternary_false_L34
debug: Sealing block@24: // ternary_merge_L34
debug: Created Phi assignment: let ternary_result%7#2: bool = undefined while trying to resolve 'ternary_result%7' in block@24: // ternary_merge_L34
debug: Added ternary_result%7#0 to Phi node: let ternary_result%7#2: bool = φ(ternary_result%7#0 <- block@22) in block@22: // ternary_true_L34
debug: Added ternary_result%7#1 to Phi node: let ternary_result%7#2: bool = φ(ternary_result%7#0 <- block@22, ternary_result%7#1 <- block@23) in block@23: // ternary_false_L34
debug: Created Phi assignment: let alpha#8: bytes = undefined while trying to resolve 'alpha' in block@24: // ternary_merge_L34
debug: Added alpha#0 to Phi node: let alpha#8: bytes = φ(alpha#0 <- block@22) in block@22: // ternary_true_L34
debug: Added alpha#0 to Phi node: let alpha#8: bytes = φ(alpha#0 <- block@22, alpha#0 <- block@23) in block@23: // ternary_false_L34
debug: Replacing trivial Phi node: let alpha#8: bytes = φ(alpha#0 <- block@22, alpha#0 <- block@23) (alpha#8) with alpha#0
debug: Deleting Phi assignment: let alpha#8: bytes = φ(alpha#0 <- block@22, alpha#0 <- block@23)
debug: Replaced trivial Phi node: let alpha#8: bytes = φ(alpha#0 <- block@22, alpha#0 <- block@23) (alpha#8) with alpha#0 in current definition for 1 blocks
debug: Terminated block@24: // ternary_merge_L34
debug: Sealing block@None: // ternary_true_L35
debug: Sealing block@None: // ternary_false_L35
debug: Terminated block@25: // ternary_true_L35
debug: Terminated block@26: // ternary_false_L35
debug: Sealing block@27: // ternary_merge_L35
debug: Created Phi assignment: let ternary_result%8#2: bool = undefined while trying to resolve 'ternary_result%8' in block@27: // ternary_merge_L35
debug: Added ternary_result%8#0 to Phi node: let ternary_result%8#2: bool = φ(ternary_result%8#0 <- block@25) in block@25: // ternary_true_L35
debug: Added ternary_result%8#1 to Phi node: let ternary_result%8#2: bool = φ(ternary_result%8#0 <- block@25, ternary_result%8#1 <- block@26) in block@26: // ternary_false_L35
debug: Created Phi assignment: let alpha#9: bytes = undefined while trying to resolve 'alpha' in block@27: // ternary_merge_L35
debug: Added alpha#0 to Phi node: let alpha#9: bytes = φ(alpha#0 <- block@25) in block@25: // ternary_true_L35
debug: Added alpha#0 to Phi node: let alpha#9: bytes = φ(alpha#0 <- block@25, alpha#0 <- block@26) in block@26: // ternary_false_L35
debug: Replacing trivial Phi node: let alpha#9: bytes = φ(alpha#0 <- block@25, alpha#0 <- block@26) (alpha#9) with alpha#0
debug: Deleting Phi assignment: let alpha#9: bytes = φ(alpha#0 <- block@25, alpha#0 <- block@26)
debug: Replaced trivial Phi node: let alpha#9: bytes = φ(alpha#0 <- block@25, alpha#0 <- block@26) (alpha#9) with alpha#0 in current definition for 1 blocks
debug: Terminated block@27: // ternary_merge_L35
debug: Sealing block@None: // ternary_true_L36
debug: Sealing block@None: // ternary_false_L36
debug: Terminated block@28: // ternary_true_L36
debug: Terminated block@29: // ternary_false_L36
debug: Sealing block@30: // ternary_merge_L36
debug: Created Phi assignment: let ternary_result%9#2: bool = undefined while trying to resolve 'ternary_result%9' in block@30: // ternary_merge_L36
debug: Added ternary_result%9#0 to Phi node: let ternary_result%9#2: bool = φ(ternary_result%9#0 <- block@28) in block@28: // ternary_true_L36
debug: Added ternary_result%9#1 to Phi node: let ternary_result%9#2: bool = φ(ternary_result%9#0 <- block@28, ternary_result%9#1 <- block@29) in block@29: // ternary_false_L36
debug: Created Phi assignment: let alpha#10: bytes = undefined while trying to resolve 'alpha' in block@30: // ternary_merge_L36
debug: Added alpha#0 to Phi node: let alpha#10: bytes = φ(alpha#0 <- block@28) in block@28: // ternary_true_L36
debug: Added alpha#0 to Phi node: let alpha#10: bytes = φ(alpha#0 <- block@28, alpha#0 <- block@29) in block@29: // ternary_false_L36
debug: Replacing trivial Phi node: let alpha#10: bytes = φ(alpha#0 <- block@28, alpha#0 <- block@29) (alpha#10) with alpha#0
debug: Deleting Phi assignment: let alpha#10: bytes = φ(alpha#0 <- block@28, alpha#0 <- block@29)
debug: Replaced trivial Phi node: let alpha#10: bytes = φ(alpha#0 <- block@28, alpha#0 <- block@29) (alpha#10) with alpha#0 in current definition for 1 blocks
debug: Terminated block@30: // ternary_merge_L36
debug: Sealing block@None: // ternary_true_L37
debug: Sealing block@None: // ternary_false_L37
debug: Terminated block@31: // ternary_true_L37
debug: Terminated block@32: // ternary_false_L37
debug: Sealing block@33: // ternary_merge_L37
debug: Created Phi assignment: let ternary_result%10#2: bool = undefined while trying to resolve 'ternary_result%10' in block@33: // ternary_merge_L37
debug: Added ternary_result%10#0 to Phi node: let ternary_result%10#2: bool = φ(ternary_result%10#0 <- block@31) in block@31: // ternary_true_L37
debug: Added ternary_result%10#1 to Phi node: let ternary_result%10#2: bool = φ(ternary_result%10#0 <- block@31, ternary_result%10#1 <- block@32) in block@32: // ternary_false_L37
debug: Created Phi assignment: let alpha#11: bytes = undefined while trying to resolve 'alpha' in block@33: // ternary_merge_L37
debug: Added alpha#0 to Phi node: let alpha#11: bytes = φ(alpha#0 <- block@31) in block@31: // ternary_true_L37
debug: Added alpha#0 to Phi node: let alpha#11: bytes = φ(alpha#0 <- block@31, alpha#0 <- block@32) in block@32: // ternary_false_L37
debug: Replacing trivial Phi node: let alpha#11: bytes = φ(alpha#0 <- block@31, alpha#0 <- block@32) (alpha#11) with alpha#0
debug: Deleting Phi assignment: let alpha#11: bytes = φ(alpha#0 <- block@31, alpha#0 <- block@32)
debug: Replaced trivial Phi node: let alpha#11: bytes = φ(alpha#0 <- block@31, alpha#0 <- block@32) (alpha#11) with alpha#0 in current definition for 1 blocks
debug: Terminated block@33: // ternary_merge_L37
debug: Sealing block@None: // ternary_true_L38
debug: Sealing block@None: // ternary_false_L38
debug: Terminated block@34: // ternary_true_L38
debug: Terminated block@35: // ternary_false_L38
debug: Sealing block@36: // ternary_merge_L38
debug: Created Phi assignment: let ternary_result%11#2: bool = undefined while trying to resolve 'ternary_result%11' in block@36: // ternary_merge_L38
debug: Added ternary_result%11#0 to Phi node: let ternary_result%11#2: bool = φ(ternary_result%11#0 <- block@34) in block@34: // ternary_true_L38
debug: Added ternary_result%11#1 to Phi node: let ternary_result%11#2: bool = φ(ternary_result%11#0 <- block@34, ternary_result%11#1 <- block@35) in block@35: // ternary_false_L38
debug: Terminated block@36: // ternary_merge_L38
debug: Sealing block@None: // ternary_true_L49
debug: Sealing block@None: // ternary_false_L49
debug: Terminated block@37: // ternary_true_L49
debug: Terminated block@38: // ternary_false_L49
debug: Sealing block@39: // ternary_merge_L49
debug: Created Phi assignment: let ternary_result%12#2: bytes = undefined while trying to resolve 'ternary_result%12' in block@39: // ternary_merge_L49
debug: Added ternary_result%12#0 to Phi node: let ternary_result%12#2: bytes = φ(ternary_result%12#0 <- block@37) in block@37: // ternary_true_L49
debug: Added ternary_result%12#1 to Phi node: let ternary_result%12#2: bytes = φ(ternary_result%12#0 <- block@37, ternary_result%12#1 <- block@38) in block@38: // ternary_false_L49
debug: Terminated block@39: // ternary_merge_L49
debug: Sealing block@0: // L54
debug: Terminated block@0: // L54
debug: Sealing block@0: // L5
debug: Terminated block@0: // L5
debug: Sealing block@None: // ternary_true_L55
debug: Sealing block@None: // ternary_false_L55
debug: Terminated block@1: // ternary_true_L55
debug: Terminated block@2: // ternary_false_L55
debug: Sealing block@3: // ternary_merge_L55
debug: Created Phi assignment: let ternary_result%0#2: uint64 = undefined while trying to resolve 'ternary_result%0' in block@3: // ternary_merge_L55
debug: Added ternary_result%0#0 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1) in block@1: // ternary_true_L55
debug: Added ternary_result%0#1 to Phi node: let ternary_result%0#2: uint64 = φ(ternary_result%0#0 <- block@1, ternary_result%0#1 <- block@2) in block@2: // ternary_false_L55
debug: Created Phi assignment: let true#1: uint64 = undefined while trying to resolve 'true' in block@3: // ternary_merge_L55
debug: Added true#0 to Phi node: let true#1: uint64 = φ(true#0 <- block@1) in block@1: // ternary_true_L55
debug: Added true#0 to Phi node: let true#1: uint64 = φ(true#0 <- block@1, true#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let true#1: uint64 = φ(true#0 <- block@1, true#0 <- block@2) (true#1) with true#0
debug: Deleting Phi assignment: let true#1: uint64 = φ(true#0 <- block@1, true#0 <- block@2)
debug: Replaced trivial Phi node: let true#1: uint64 = φ(true#0 <- block@1, true#0 <- block@2) (true#1) with true#0 in current definition for 1 blocks
debug: Terminated block@3: // ternary_merge_L55
debug: Sealing block@None: // ternary_true_L56
debug: Sealing block@None: // ternary_false_L56
debug: Terminated block@4: // ternary_true_L56
debug: Created Phi assignment: let false#1: uint64 = undefined while trying to resolve 'false' in block@3: // ternary_merge_L55
debug: Added false#0 to Phi node: let false#1: uint64 = φ(false#0 <- block@1) in block@1: // ternary_true_L55
debug: Added false#0 to Phi node: let false#1: uint64 = φ(false#0 <- block@1, false#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let false#1: uint64 = φ(false#0 <- block@1, false#0 <- block@2) (false#1) with false#0
debug: Deleting Phi assignment: let false#1: uint64 = φ(false#0 <- block@1, false#0 <- block@2)
debug: Replaced trivial Phi node: let false#1: uint64 = φ(false#0 <- block@1, false#0 <- block@2) (false#1) with false#0 in current definition for 1 blocks
debug: Terminated block@5: // ternary_false_L56
debug: Sealing block@6: // ternary_merge_L56
debug: Created Phi assignment: let ternary_result%1#2: uint64 = undefined while trying to resolve 'ternary_result%1' in block@6: // ternary_merge_L56
debug: Added ternary_result%1#0 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@4) in block@4: // ternary_true_L56
debug: Added ternary_result%1#1 to Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#0 <- block@4, ternary_result%1#1 <- block@5) in block@5: // ternary_false_L56
debug: Created Phi assignment: let false#2: uint64 = undefined while trying to resolve 'false' in block@6: // ternary_merge_L56
debug: Added false#0 to Phi node: let false#2: uint64 = φ(false#0 <- block@4) in block@4: // ternary_true_L56
debug: Added false#0 to Phi node: let false#2: uint64 = φ(false#0 <- block@4, false#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let false#2: uint64 = φ(false#0 <- block@4, false#0 <- block@5) (false#2) with false#0
debug: Deleting Phi assignment: let false#2: uint64 = φ(false#0 <- block@4, false#0 <- block@5)
debug: Replaced trivial Phi node: let false#2: uint64 = φ(false#0 <- block@4, false#0 <- block@5) (false#2) with false#0 in current definition for 1 blocks
debug: Terminated block@6: // ternary_merge_L56
debug: Sealing block@None: // ternary_true_L57
debug: Sealing block@None: // ternary_false_L57
debug: Terminated block@7: // ternary_true_L57
debug: Created Phi assignment: let true#2: uint64 = undefined while trying to resolve 'true' in block@6: // ternary_merge_L56
debug: Added true#0 to Phi node: let true#2: uint64 = φ(true#0 <- block@4) in block@4: // ternary_true_L56
debug: Added true#0 to Phi node: let true#2: uint64 = φ(true#0 <- block@4, true#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let true#2: uint64 = φ(true#0 <- block@4, true#0 <- block@5) (true#2) with true#0
debug: Deleting Phi assignment: let true#2: uint64 = φ(true#0 <- block@4, true#0 <- block@5)
debug: Replaced trivial Phi node: let true#2: uint64 = φ(true#0 <- block@4, true#0 <- block@5) (true#2) with true#0 in current definition for 1 blocks
debug: Terminated block@8: // ternary_false_L57
debug: Sealing block@9: // ternary_merge_L57
debug: Created Phi assignment: let ternary_result%2#2: uint64 = undefined while trying to resolve 'ternary_result%2' in block@9: // ternary_merge_L57
debug: Added ternary_result%2#0 to Phi node: let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@7) in block@7: // ternary_true_L57
debug: Added ternary_result%2#1 to Phi node: let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@7, ternary_result%2#1 <- block@8) in block@8: // ternary_false_L57
debug: Created Phi assignment: let false#3: uint64 = undefined while trying to resolve 'false' in block@9: // ternary_merge_L57
debug: Added false#0 to Phi node: let false#3: uint64 = φ(false#0 <- block@7) in block@7: // ternary_true_L57
debug: Added false#0 to Phi node: let false#3: uint64 = φ(false#0 <- block@7, false#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let false#3: uint64 = φ(false#0 <- block@7, false#0 <- block@8) (false#3) with false#0
debug: Deleting Phi assignment: let false#3: uint64 = φ(false#0 <- block@7, false#0 <- block@8)
debug: Replaced trivial Phi node: let false#3: uint64 = φ(false#0 <- block@7, false#0 <- block@8) (false#3) with false#0 in current definition for 1 blocks
debug: Terminated block@9: // ternary_merge_L57
debug: Sealing block@None: // ternary_true_L58
debug: Sealing block@None: // ternary_false_L58
debug: Terminated block@10: // ternary_true_L58
debug: Terminated block@11: // ternary_false_L58
debug: Sealing block@12: // ternary_merge_L58
debug: Created Phi assignment: let ternary_result%3#2: uint64 = undefined while trying to resolve 'ternary_result%3' in block@12: // ternary_merge_L58
debug: Added ternary_result%3#0 to Phi node: let ternary_result%3#2: uint64 = φ(ternary_result%3#0 <- block@10) in block@10: // ternary_true_L58
debug: Added ternary_result%3#1 to Phi node: let ternary_result%3#2: uint64 = φ(ternary_result%3#0 <- block@10, ternary_result%3#1 <- block@11) in block@11: // ternary_false_L58
debug: Created Phi assignment: let false#4: uint64 = undefined while trying to resolve 'false' in block@12: // ternary_merge_L58
debug: Added false#0 to Phi node: let false#4: uint64 = φ(false#0 <- block@10) in block@10: // ternary_true_L58
debug: Added false#0 to Phi node: let false#4: uint64 = φ(false#0 <- block@10, false#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let false#4: uint64 = φ(false#0 <- block@10, false#0 <- block@11) (false#4) with false#0
debug: Deleting Phi assignment: let false#4: uint64 = φ(false#0 <- block@10, false#0 <- block@11)
debug: Replaced trivial Phi node: let false#4: uint64 = φ(false#0 <- block@10, false#0 <- block@11) (false#4) with false#0 in current definition for 1 blocks
debug: Created Phi assignment: let true#3: uint64 = undefined while trying to resolve 'true' in block@12: // ternary_merge_L58
debug: Created Phi assignment: let true#4: uint64 = undefined while trying to resolve 'true' in block@9: // ternary_merge_L57
debug: Added true#0 to Phi node: let true#4: uint64 = φ(true#0 <- block@7) in block@7: // ternary_true_L57
debug: Added true#0 to Phi node: let true#4: uint64 = φ(true#0 <- block@7, true#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let true#4: uint64 = φ(true#0 <- block@7, true#0 <- block@8) (true#4) with true#0
debug: Deleting Phi assignment: let true#4: uint64 = φ(true#0 <- block@7, true#0 <- block@8)
debug: Replaced trivial Phi node: let true#4: uint64 = φ(true#0 <- block@7, true#0 <- block@8) (true#4) with true#0 in current definition for 1 blocks
debug: Added true#0 to Phi node: let true#3: uint64 = φ(true#0 <- block@10) in block@10: // ternary_true_L58
debug: Added true#0 to Phi node: let true#3: uint64 = φ(true#0 <- block@10, true#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let true#3: uint64 = φ(true#0 <- block@10, true#0 <- block@11) (true#3) with true#0
debug: Deleting Phi assignment: let true#3: uint64 = φ(true#0 <- block@10, true#0 <- block@11)
debug: Replaced trivial Phi node: let true#3: uint64 = φ(true#0 <- block@10, true#0 <- block@11) (true#3) with true#0 in current definition for 1 blocks
debug: Terminated block@12: // ternary_merge_L58
debug: Sealing block@None: // ternary_true_L59
debug: Sealing block@None: // ternary_false_L59
debug: Terminated block@13: // ternary_true_L59
debug: Terminated block@14: // ternary_false_L59
debug: Sealing block@15: // ternary_merge_L59
debug: Created Phi assignment: let ternary_result%4#2: uint64 = undefined while trying to resolve 'ternary_result%4' in block@15: // ternary_merge_L59
debug: Added ternary_result%4#0 to Phi node: let ternary_result%4#2: uint64 = φ(ternary_result%4#0 <- block@13) in block@13: // ternary_true_L59
debug: Added ternary_result%4#1 to Phi node: let ternary_result%4#2: uint64 = φ(ternary_result%4#0 <- block@13, ternary_result%4#1 <- block@14) in block@14: // ternary_false_L59
debug: Created Phi assignment: let true#5: uint64 = undefined while trying to resolve 'true' in block@15: // ternary_merge_L59
debug: Added true#0 to Phi node: let true#5: uint64 = φ(true#0 <- block@13) in block@13: // ternary_true_L59
debug: Added true#0 to Phi node: let true#5: uint64 = φ(true#0 <- block@13, true#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let true#5: uint64 = φ(true#0 <- block@13, true#0 <- block@14) (true#5) with true#0
debug: Deleting Phi assignment: let true#5: uint64 = φ(true#0 <- block@13, true#0 <- block@14)
debug: Replaced trivial Phi node: let true#5: uint64 = φ(true#0 <- block@13, true#0 <- block@14) (true#5) with true#0 in current definition for 1 blocks
debug: Terminated block@15: // ternary_merge_L59
debug: Sealing block@None: // ternary_true_L60
debug: Sealing block@None: // ternary_false_L60
debug: Terminated block@16: // ternary_true_L60
debug: Created Phi assignment: let false#5: uint64 = undefined while trying to resolve 'false' in block@15: // ternary_merge_L59
debug: Added false#0 to Phi node: let false#5: uint64 = φ(false#0 <- block@13) in block@13: // ternary_true_L59
debug: Added false#0 to Phi node: let false#5: uint64 = φ(false#0 <- block@13, false#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let false#5: uint64 = φ(false#0 <- block@13, false#0 <- block@14) (false#5) with false#0
debug: Deleting Phi assignment: let false#5: uint64 = φ(false#0 <- block@13, false#0 <- block@14)
debug: Replaced trivial Phi node: let false#5: uint64 = φ(false#0 <- block@13, false#0 <- block@14) (false#5) with false#0 in current definition for 1 blocks
debug: Terminated block@17: // ternary_false_L60
debug: Sealing block@18: // ternary_merge_L60
debug: Created Phi assignment: let ternary_result%5#2: uint64 = undefined while trying to resolve 'ternary_result%5' in block@18: // ternary_merge_L60
debug: Added ternary_result%5#0 to Phi node: let ternary_result%5#2: uint64 = φ(ternary_result%5#0 <- block@16) in block@16: // ternary_true_L60
debug: Added ternary_result%5#1 to Phi node: let ternary_result%5#2: uint64 = φ(ternary_result%5#0 <- block@16, ternary_result%5#1 <- block@17) in block@17: // ternary_false_L60
debug: Created Phi assignment: let true#6: uint64 = undefined while trying to resolve 'true' in block@18: // ternary_merge_L60
debug: Added true#0 to Phi node: let true#6: uint64 = φ(true#0 <- block@16) in block@16: // ternary_true_L60
debug: Added true#0 to Phi node: let true#6: uint64 = φ(true#0 <- block@16, true#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let true#6: uint64 = φ(true#0 <- block@16, true#0 <- block@17) (true#6) with true#0
debug: Deleting Phi assignment: let true#6: uint64 = φ(true#0 <- block@16, true#0 <- block@17)
debug: Replaced trivial Phi node: let true#6: uint64 = φ(true#0 <- block@16, true#0 <- block@17) (true#6) with true#0 in current definition for 1 blocks
debug: Created Phi assignment: let false#6: uint64 = undefined while trying to resolve 'false' in block@18: // ternary_merge_L60
debug: Added false#0 to Phi node: let false#6: uint64 = φ(false#0 <- block@16) in block@16: // ternary_true_L60
debug: Added false#0 to Phi node: let false#6: uint64 = φ(false#0 <- block@16, false#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let false#6: uint64 = φ(false#0 <- block@16, false#0 <- block@17) (false#6) with false#0
debug: Deleting Phi assignment: let false#6: uint64 = φ(false#0 <- block@16, false#0 <- block@17)
debug: Replaced trivial Phi node: let false#6: uint64 = φ(false#0 <- block@16, false#0 <- block@17) (false#6) with false#0 in current definition for 1 blocks
debug: Terminated block@18: // ternary_merge_L60
debug: Sealing block@None: // ternary_true_L61
debug: Sealing block@None: // ternary_false_L61
debug: Terminated block@19: // ternary_true_L61
debug: Terminated block@20: // ternary_false_L61
debug: Sealing block@21: // ternary_merge_L61
debug: Created Phi assignment: let ternary_result%6#2: uint64 = undefined while trying to resolve 'ternary_result%6' in block@21: // ternary_merge_L61
debug: Added ternary_result%6#0 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@19) in block@19: // ternary_true_L61
debug: Added ternary_result%6#1 to Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#0 <- block@19, ternary_result%6#1 <- block@20) in block@20: // ternary_false_L61
debug: Created Phi assignment: let true#7: uint64 = undefined while trying to resolve 'true' in block@21: // ternary_merge_L61
debug: Added true#0 to Phi node: let true#7: uint64 = φ(true#0 <- block@19) in block@19: // ternary_true_L61
debug: Added true#0 to Phi node: let true#7: uint64 = φ(true#0 <- block@19, true#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let true#7: uint64 = φ(true#0 <- block@19, true#0 <- block@20) (true#7) with true#0
debug: Deleting Phi assignment: let true#7: uint64 = φ(true#0 <- block@19, true#0 <- block@20)
debug: Replaced trivial Phi node: let true#7: uint64 = φ(true#0 <- block@19, true#0 <- block@20) (true#7) with true#0 in current definition for 1 blocks
debug: Created Phi assignment: let false#7: uint64 = undefined while trying to resolve 'false' in block@21: // ternary_merge_L61
debug: Added false#0 to Phi node: let false#7: uint64 = φ(false#0 <- block@19) in block@19: // ternary_true_L61
debug: Added false#0 to Phi node: let false#7: uint64 = φ(false#0 <- block@19, false#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let false#7: uint64 = φ(false#0 <- block@19, false#0 <- block@20) (false#7) with false#0
debug: Deleting Phi assignment: let false#7: uint64 = φ(false#0 <- block@19, false#0 <- block@20)
debug: Replaced trivial Phi node: let false#7: uint64 = φ(false#0 <- block@19, false#0 <- block@20) (false#7) with false#0 in current definition for 1 blocks
debug: Terminated block@21: // ternary_merge_L61
debug: Sealing block@None: // ternary_true_L62
debug: Sealing block@None: // ternary_false_L62
debug: Terminated block@22: // ternary_true_L62
debug: Terminated block@23: // ternary_false_L62
debug: Sealing block@24: // ternary_merge_L62
debug: Created Phi assignment: let ternary_result%7#2: uint64 = undefined while trying to resolve 'ternary_result%7' in block@24: // ternary_merge_L62
debug: Added ternary_result%7#0 to Phi node: let ternary_result%7#2: uint64 = φ(ternary_result%7#0 <- block@22) in block@22: // ternary_true_L62
debug: Added ternary_result%7#1 to Phi node: let ternary_result%7#2: uint64 = φ(ternary_result%7#0 <- block@22, ternary_result%7#1 <- block@23) in block@23: // ternary_false_L62
debug: Created Phi assignment: let false#8: uint64 = undefined while trying to resolve 'false' in block@24: // ternary_merge_L62
debug: Added false#0 to Phi node: let false#8: uint64 = φ(false#0 <- block@22) in block@22: // ternary_true_L62
debug: Added false#0 to Phi node: let false#8: uint64 = φ(false#0 <- block@22, false#0 <- block@23) in block@23: // ternary_false_L62
debug: Replacing trivial Phi node: let false#8: uint64 = φ(false#0 <- block@22, false#0 <- block@23) (false#8) with false#0
debug: Deleting Phi assignment: let false#8: uint64 = φ(false#0 <- block@22, false#0 <- block@23)
debug: Replaced trivial Phi node: let false#8: uint64 = φ(false#0 <- block@22, false#0 <- block@23) (false#8) with false#0 in current definition for 1 blocks
debug: Created Phi assignment: let one#1: uint64 = undefined while trying to resolve 'one' in block@24: // ternary_merge_L62
debug: Created Phi assignment: let one#2: uint64 = undefined while trying to resolve 'one' in block@21: // ternary_merge_L61
debug: Created Phi assignment: let one#3: uint64 = undefined while trying to resolve 'one' in block@18: // ternary_merge_L60
debug: Created Phi assignment: let one#4: uint64 = undefined while trying to resolve 'one' in block@15: // ternary_merge_L59
debug: Created Phi assignment: let one#5: uint64 = undefined while trying to resolve 'one' in block@12: // ternary_merge_L58
debug: Created Phi assignment: let one#6: uint64 = undefined while trying to resolve 'one' in block@9: // ternary_merge_L57
debug: Created Phi assignment: let one#7: uint64 = undefined while trying to resolve 'one' in block@6: // ternary_merge_L56
debug: Created Phi assignment: let one#8: uint64 = undefined while trying to resolve 'one' in block@3: // ternary_merge_L55
debug: Added one#0 to Phi node: let one#8: uint64 = φ(one#0 <- block@1) in block@1: // ternary_true_L55
debug: Added one#0 to Phi node: let one#8: uint64 = φ(one#0 <- block@1, one#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let one#8: uint64 = φ(one#0 <- block@1, one#0 <- block@2) (one#8) with one#0
debug: Deleting Phi assignment: let one#8: uint64 = φ(one#0 <- block@1, one#0 <- block@2)
debug: Replaced trivial Phi node: let one#8: uint64 = φ(one#0 <- block@1, one#0 <- block@2) (one#8) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#7: uint64 = φ(one#0 <- block@4) in block@4: // ternary_true_L56
debug: Added one#0 to Phi node: let one#7: uint64 = φ(one#0 <- block@4, one#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let one#7: uint64 = φ(one#0 <- block@4, one#0 <- block@5) (one#7) with one#0
debug: Deleting Phi assignment: let one#7: uint64 = φ(one#0 <- block@4, one#0 <- block@5)
debug: Replaced trivial Phi node: let one#7: uint64 = φ(one#0 <- block@4, one#0 <- block@5) (one#7) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#6: uint64 = φ(one#0 <- block@7) in block@7: // ternary_true_L57
debug: Added one#0 to Phi node: let one#6: uint64 = φ(one#0 <- block@7, one#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let one#6: uint64 = φ(one#0 <- block@7, one#0 <- block@8) (one#6) with one#0
debug: Deleting Phi assignment: let one#6: uint64 = φ(one#0 <- block@7, one#0 <- block@8)
debug: Replaced trivial Phi node: let one#6: uint64 = φ(one#0 <- block@7, one#0 <- block@8) (one#6) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#5: uint64 = φ(one#0 <- block@10) in block@10: // ternary_true_L58
debug: Added one#0 to Phi node: let one#5: uint64 = φ(one#0 <- block@10, one#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let one#5: uint64 = φ(one#0 <- block@10, one#0 <- block@11) (one#5) with one#0
debug: Deleting Phi assignment: let one#5: uint64 = φ(one#0 <- block@10, one#0 <- block@11)
debug: Replaced trivial Phi node: let one#5: uint64 = φ(one#0 <- block@10, one#0 <- block@11) (one#5) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#4: uint64 = φ(one#0 <- block@13) in block@13: // ternary_true_L59
debug: Added one#0 to Phi node: let one#4: uint64 = φ(one#0 <- block@13, one#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let one#4: uint64 = φ(one#0 <- block@13, one#0 <- block@14) (one#4) with one#0
debug: Deleting Phi assignment: let one#4: uint64 = φ(one#0 <- block@13, one#0 <- block@14)
debug: Replaced trivial Phi node: let one#4: uint64 = φ(one#0 <- block@13, one#0 <- block@14) (one#4) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#3: uint64 = φ(one#0 <- block@16) in block@16: // ternary_true_L60
debug: Added one#0 to Phi node: let one#3: uint64 = φ(one#0 <- block@16, one#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let one#3: uint64 = φ(one#0 <- block@16, one#0 <- block@17) (one#3) with one#0
debug: Deleting Phi assignment: let one#3: uint64 = φ(one#0 <- block@16, one#0 <- block@17)
debug: Replaced trivial Phi node: let one#3: uint64 = φ(one#0 <- block@16, one#0 <- block@17) (one#3) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#2: uint64 = φ(one#0 <- block@19) in block@19: // ternary_true_L61
debug: Added one#0 to Phi node: let one#2: uint64 = φ(one#0 <- block@19, one#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let one#2: uint64 = φ(one#0 <- block@19, one#0 <- block@20) (one#2) with one#0
debug: Deleting Phi assignment: let one#2: uint64 = φ(one#0 <- block@19, one#0 <- block@20)
debug: Replaced trivial Phi node: let one#2: uint64 = φ(one#0 <- block@19, one#0 <- block@20) (one#2) with one#0 in current definition for 1 blocks
debug: Added one#0 to Phi node: let one#1: uint64 = φ(one#0 <- block@22) in block@22: // ternary_true_L62
debug: Added one#0 to Phi node: let one#1: uint64 = φ(one#0 <- block@22, one#0 <- block@23) in block@23: // ternary_false_L62
debug: Replacing trivial Phi node: let one#1: uint64 = φ(one#0 <- block@22, one#0 <- block@23) (one#1) with one#0
debug: Deleting Phi assignment: let one#1: uint64 = φ(one#0 <- block@22, one#0 <- block@23)
debug: Replaced trivial Phi node: let one#1: uint64 = φ(one#0 <- block@22, one#0 <- block@23) (one#1) with one#0 in current definition for 1 blocks
debug: Created Phi assignment: let five#1: uint64 = undefined while trying to resolve 'five' in block@24: // ternary_merge_L62
debug: Created Phi assignment: let five#2: uint64 = undefined while trying to resolve 'five' in block@21: // ternary_merge_L61
debug: Created Phi assignment: let five#3: uint64 = undefined while trying to resolve 'five' in block@18: // ternary_merge_L60
debug: Created Phi assignment: let five#4: uint64 = undefined while trying to resolve 'five' in block@15: // ternary_merge_L59
debug: Created Phi assignment: let five#5: uint64 = undefined while trying to resolve 'five' in block@12: // ternary_merge_L58
debug: Created Phi assignment: let five#6: uint64 = undefined while trying to resolve 'five' in block@9: // ternary_merge_L57
debug: Created Phi assignment: let five#7: uint64 = undefined while trying to resolve 'five' in block@6: // ternary_merge_L56
debug: Created Phi assignment: let five#8: uint64 = undefined while trying to resolve 'five' in block@3: // ternary_merge_L55
debug: Added five#0 to Phi node: let five#8: uint64 = φ(five#0 <- block@1) in block@1: // ternary_true_L55
debug: Added five#0 to Phi node: let five#8: uint64 = φ(five#0 <- block@1, five#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let five#8: uint64 = φ(five#0 <- block@1, five#0 <- block@2) (five#8) with five#0
debug: Deleting Phi assignment: let five#8: uint64 = φ(five#0 <- block@1, five#0 <- block@2)
debug: Replaced trivial Phi node: let five#8: uint64 = φ(five#0 <- block@1, five#0 <- block@2) (five#8) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#7: uint64 = φ(five#0 <- block@4) in block@4: // ternary_true_L56
debug: Added five#0 to Phi node: let five#7: uint64 = φ(five#0 <- block@4, five#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let five#7: uint64 = φ(five#0 <- block@4, five#0 <- block@5) (five#7) with five#0
debug: Deleting Phi assignment: let five#7: uint64 = φ(five#0 <- block@4, five#0 <- block@5)
debug: Replaced trivial Phi node: let five#7: uint64 = φ(five#0 <- block@4, five#0 <- block@5) (five#7) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#6: uint64 = φ(five#0 <- block@7) in block@7: // ternary_true_L57
debug: Added five#0 to Phi node: let five#6: uint64 = φ(five#0 <- block@7, five#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let five#6: uint64 = φ(five#0 <- block@7, five#0 <- block@8) (five#6) with five#0
debug: Deleting Phi assignment: let five#6: uint64 = φ(five#0 <- block@7, five#0 <- block@8)
debug: Replaced trivial Phi node: let five#6: uint64 = φ(five#0 <- block@7, five#0 <- block@8) (five#6) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#5: uint64 = φ(five#0 <- block@10) in block@10: // ternary_true_L58
debug: Added five#0 to Phi node: let five#5: uint64 = φ(five#0 <- block@10, five#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let five#5: uint64 = φ(five#0 <- block@10, five#0 <- block@11) (five#5) with five#0
debug: Deleting Phi assignment: let five#5: uint64 = φ(five#0 <- block@10, five#0 <- block@11)
debug: Replaced trivial Phi node: let five#5: uint64 = φ(five#0 <- block@10, five#0 <- block@11) (five#5) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#4: uint64 = φ(five#0 <- block@13) in block@13: // ternary_true_L59
debug: Added five#0 to Phi node: let five#4: uint64 = φ(five#0 <- block@13, five#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let five#4: uint64 = φ(five#0 <- block@13, five#0 <- block@14) (five#4) with five#0
debug: Deleting Phi assignment: let five#4: uint64 = φ(five#0 <- block@13, five#0 <- block@14)
debug: Replaced trivial Phi node: let five#4: uint64 = φ(five#0 <- block@13, five#0 <- block@14) (five#4) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#3: uint64 = φ(five#0 <- block@16) in block@16: // ternary_true_L60
debug: Added five#0 to Phi node: let five#3: uint64 = φ(five#0 <- block@16, five#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let five#3: uint64 = φ(five#0 <- block@16, five#0 <- block@17) (five#3) with five#0
debug: Deleting Phi assignment: let five#3: uint64 = φ(five#0 <- block@16, five#0 <- block@17)
debug: Replaced trivial Phi node: let five#3: uint64 = φ(five#0 <- block@16, five#0 <- block@17) (five#3) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#2: uint64 = φ(five#0 <- block@19) in block@19: // ternary_true_L61
debug: Added five#0 to Phi node: let five#2: uint64 = φ(five#0 <- block@19, five#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let five#2: uint64 = φ(five#0 <- block@19, five#0 <- block@20) (five#2) with five#0
debug: Deleting Phi assignment: let five#2: uint64 = φ(five#0 <- block@19, five#0 <- block@20)
debug: Replaced trivial Phi node: let five#2: uint64 = φ(five#0 <- block@19, five#0 <- block@20) (five#2) with five#0 in current definition for 1 blocks
debug: Added five#0 to Phi node: let five#1: uint64 = φ(five#0 <- block@22) in block@22: // ternary_true_L62
debug: Added five#0 to Phi node: let five#1: uint64 = φ(five#0 <- block@22, five#0 <- block@23) in block@23: // ternary_false_L62
debug: Replacing trivial Phi node: let five#1: uint64 = φ(five#0 <- block@22, five#0 <- block@23) (five#1) with five#0
debug: Deleting Phi assignment: let five#1: uint64 = φ(five#0 <- block@22, five#0 <- block@23)
debug: Replaced trivial Phi node: let five#1: uint64 = φ(five#0 <- block@22, five#0 <- block@23) (five#1) with five#0 in current definition for 1 blocks
debug: Created Phi assignment: let sixty#1: uint64 = undefined while trying to resolve 'sixty' in block@24: // ternary_merge_L62
debug: Created Phi assignment: let sixty#2: uint64 = undefined while trying to resolve 'sixty' in block@21: // ternary_merge_L61
debug: Created Phi assignment: let sixty#3: uint64 = undefined while trying to resolve 'sixty' in block@18: // ternary_merge_L60
debug: Created Phi assignment: let sixty#4: uint64 = undefined while trying to resolve 'sixty' in block@15: // ternary_merge_L59
debug: Created Phi assignment: let sixty#5: uint64 = undefined while trying to resolve 'sixty' in block@12: // ternary_merge_L58
debug: Created Phi assignment: let sixty#6: uint64 = undefined while trying to resolve 'sixty' in block@9: // ternary_merge_L57
debug: Created Phi assignment: let sixty#7: uint64 = undefined while trying to resolve 'sixty' in block@6: // ternary_merge_L56
debug: Created Phi assignment: let sixty#8: uint64 = undefined while trying to resolve 'sixty' in block@3: // ternary_merge_L55
debug: Added sixty#0 to Phi node: let sixty#8: uint64 = φ(sixty#0 <- block@1) in block@1: // ternary_true_L55
debug: Added sixty#0 to Phi node: let sixty#8: uint64 = φ(sixty#0 <- block@1, sixty#0 <- block@2) in block@2: // ternary_false_L55
debug: Replacing trivial Phi node: let sixty#8: uint64 = φ(sixty#0 <- block@1, sixty#0 <- block@2) (sixty#8) with sixty#0
debug: Deleting Phi assignment: let sixty#8: uint64 = φ(sixty#0 <- block@1, sixty#0 <- block@2)
debug: Replaced trivial Phi node: let sixty#8: uint64 = φ(sixty#0 <- block@1, sixty#0 <- block@2) (sixty#8) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#7: uint64 = φ(sixty#0 <- block@4) in block@4: // ternary_true_L56
debug: Added sixty#0 to Phi node: let sixty#7: uint64 = φ(sixty#0 <- block@4, sixty#0 <- block@5) in block@5: // ternary_false_L56
debug: Replacing trivial Phi node: let sixty#7: uint64 = φ(sixty#0 <- block@4, sixty#0 <- block@5) (sixty#7) with sixty#0
debug: Deleting Phi assignment: let sixty#7: uint64 = φ(sixty#0 <- block@4, sixty#0 <- block@5)
debug: Replaced trivial Phi node: let sixty#7: uint64 = φ(sixty#0 <- block@4, sixty#0 <- block@5) (sixty#7) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#6: uint64 = φ(sixty#0 <- block@7) in block@7: // ternary_true_L57
debug: Added sixty#0 to Phi node: let sixty#6: uint64 = φ(sixty#0 <- block@7, sixty#0 <- block@8) in block@8: // ternary_false_L57
debug: Replacing trivial Phi node: let sixty#6: uint64 = φ(sixty#0 <- block@7, sixty#0 <- block@8) (sixty#6) with sixty#0
debug: Deleting Phi assignment: let sixty#6: uint64 = φ(sixty#0 <- block@7, sixty#0 <- block@8)
debug: Replaced trivial Phi node: let sixty#6: uint64 = φ(sixty#0 <- block@7, sixty#0 <- block@8) (sixty#6) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#5: uint64 = φ(sixty#0 <- block@10) in block@10: // ternary_true_L58
debug: Added sixty#0 to Phi node: let sixty#5: uint64 = φ(sixty#0 <- block@10, sixty#0 <- block@11) in block@11: // ternary_false_L58
debug: Replacing trivial Phi node: let sixty#5: uint64 = φ(sixty#0 <- block@10, sixty#0 <- block@11) (sixty#5) with sixty#0
debug: Deleting Phi assignment: let sixty#5: uint64 = φ(sixty#0 <- block@10, sixty#0 <- block@11)
debug: Replaced trivial Phi node: let sixty#5: uint64 = φ(sixty#0 <- block@10, sixty#0 <- block@11) (sixty#5) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#4: uint64 = φ(sixty#0 <- block@13) in block@13: // ternary_true_L59
debug: Added sixty#0 to Phi node: let sixty#4: uint64 = φ(sixty#0 <- block@13, sixty#0 <- block@14) in block@14: // ternary_false_L59
debug: Replacing trivial Phi node: let sixty#4: uint64 = φ(sixty#0 <- block@13, sixty#0 <- block@14) (sixty#4) with sixty#0
debug: Deleting Phi assignment: let sixty#4: uint64 = φ(sixty#0 <- block@13, sixty#0 <- block@14)
debug: Replaced trivial Phi node: let sixty#4: uint64 = φ(sixty#0 <- block@13, sixty#0 <- block@14) (sixty#4) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#3: uint64 = φ(sixty#0 <- block@16) in block@16: // ternary_true_L60
debug: Added sixty#0 to Phi node: let sixty#3: uint64 = φ(sixty#0 <- block@16, sixty#0 <- block@17) in block@17: // ternary_false_L60
debug: Replacing trivial Phi node: let sixty#3: uint64 = φ(sixty#0 <- block@16, sixty#0 <- block@17) (sixty#3) with sixty#0
debug: Deleting Phi assignment: let sixty#3: uint64 = φ(sixty#0 <- block@16, sixty#0 <- block@17)
debug: Replaced trivial Phi node: let sixty#3: uint64 = φ(sixty#0 <- block@16, sixty#0 <- block@17) (sixty#3) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#2: uint64 = φ(sixty#0 <- block@19) in block@19: // ternary_true_L61
debug: Added sixty#0 to Phi node: let sixty#2: uint64 = φ(sixty#0 <- block@19, sixty#0 <- block@20) in block@20: // ternary_false_L61
debug: Replacing trivial Phi node: let sixty#2: uint64 = φ(sixty#0 <- block@19, sixty#0 <- block@20) (sixty#2) with sixty#0
debug: Deleting Phi assignment: let sixty#2: uint64 = φ(sixty#0 <- block@19, sixty#0 <- block@20)
debug: Replaced trivial Phi node: let sixty#2: uint64 = φ(sixty#0 <- block@19, sixty#0 <- block@20) (sixty#2) with sixty#0 in current definition for 1 blocks
debug: Added sixty#0 to Phi node: let sixty#1: uint64 = φ(sixty#0 <- block@22) in block@22: // ternary_true_L62
debug: Added sixty#0 to Phi node: let sixty#1: uint64 = φ(sixty#0 <- block@22, sixty#0 <- block@23) in block@23: // ternary_false_L62
debug: Replacing trivial Phi node: let sixty#1: uint64 = φ(sixty#0 <- block@22, sixty#0 <- block@23) (sixty#1) with sixty#0
debug: Deleting Phi assignment: let sixty#1: uint64 = φ(sixty#0 <- block@22, sixty#0 <- block@23)
debug: Replaced trivial Phi node: let sixty#1: uint64 = φ(sixty#0 <- block@22, sixty#0 <- block@23) (sixty#1) with sixty#0 in current definition for 1 blocks
debug: Terminated block@24: // ternary_merge_L62
debug: Sealing block@None: // ternary_true_L80
debug: Sealing block@None: // ternary_false_L80
debug: Terminated block@25: // ternary_true_L80
debug: Terminated block@26: // ternary_false_L80
debug: Sealing block@27: // ternary_merge_L80
debug: Created Phi assignment: let ternary_result%8#2: uint64 = undefined while trying to resolve 'ternary_result%8' in block@27: // ternary_merge_L80
debug: Added ternary_result%8#0 to Phi node: let ternary_result%8#2: uint64 = φ(ternary_result%8#0 <- block@25) in block@25: // ternary_true_L80
debug: Added ternary_result%8#1 to Phi node: let ternary_result%8#2: uint64 = φ(ternary_result%8#0 <- block@25, ternary_result%8#1 <- block@26) in block@26: // ternary_false_L80
debug: Terminated block@27: // ternary_merge_L80
debug: Sealing block@0: // L84
debug: Terminated block@0: // L84
debug: Output IR to stubs/out/BigUIntContract.ssa.ir
info: Optimizing test_cases.stubs.biguint.BigUIntContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (bsqrt 9b) to 3b
debug: Simplified (bsqrt 10b) to 3b
debug: Simplified (b== 1b 1b) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable one#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguints
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (b== one#0 one#0) to 1u
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (b== one#0 one#0) to 1u
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%2#0: biguint = (itob two#0) with copy of existing registers [Register(ir_type=biguint, name='tmp%0', version=0, source_location=stubs/biguint.py:32:11)]
debug: Replacing redundant declaration let tmp%5#0: biguint = (itob two#0) with copy of existing registers [Register(ir_type=biguint, name='tmp%0', version=0, source_location=stubs/biguint.py:32:11)]
debug: Replacing redundant declaration let tmp%7#0: biguint = (itob two#0) with copy of existing registers [Register(ir_type=biguint, name='tmp%0', version=0, source_location=stubs/biguint.py:32:11)]
debug: Replacing redundant declaration let tmp%9#0: biguint = (itob two#0) with copy of existing registers [Register(ir_type=biguint, name='tmp%0', version=0, source_location=stubs/biguint.py:32:11)]
debug: Found equivalence set: tmp%0#0, tmp%2#0, tmp%5#0, tmp%7#0, tmp%9#0
debug: Replacing {tmp%2#0, tmp%5#0, tmp%7#0, tmp%9#0} with tmp%0#0 made 4 modifications
debug: Replacing redundant declaration let tmp%6#0: bool = (b< one#0 tmp%0#0) with copy of existing registers [Register(ir_type=bool, name='tmp%1', version=0, source_location=stubs/biguint.py:32:11)]
debug: Replacing redundant declaration let tmp%8#0: bool = (b<= one#0 tmp%0#0) with copy of existing registers [Register(ir_type=bool, name='tmp%3', version=0, source_location=stubs/biguint.py:33:11)]
debug: Found equivalence set: tmp%1#0, tmp%6#0
debug: Replacing {tmp%6#0} with tmp%1#0 made 1 modifications
debug: Found equivalence set: tmp%3#0, tmp%8#0
debug: Replacing {tmp%8#0} with tmp%3#0 made 1 modifications
debug: Removing redundant assert of tmp%1#0
debug: Removing redundant assert of tmp%3#0
debug: Optimizing subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== one#0 one#0) to 1u
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%2#0: biguint = (itob one#0) with copy of existing registers [Register(ir_type=biguint, name='tmp%0', version=0, source_location=stubs/biguint.py:42:11)]
debug: Replacing redundant declaration let tmp%5#0: biguint = (itob one#0) with copy of existing registers [Register(ir_type=biguint, name='tmp%0', version=0, source_location=stubs/biguint.py:42:11)]
debug: Replacing redundant declaration let tmp%7#0: biguint = (itob one#0) with copy of existing registers [Register(ir_type=biguint, name='tmp%0', version=0, source_location=stubs/biguint.py:42:11)]
debug: Replacing redundant declaration let tmp%9#0: biguint = (itob one#0) with copy of existing registers [Register(ir_type=biguint, name='tmp%0', version=0, source_location=stubs/biguint.py:42:11)]
debug: Found equivalence set: tmp%0#0, tmp%2#0, tmp%5#0, tmp%7#0, tmp%9#0
debug: Replacing {tmp%2#0, tmp%5#0, tmp%7#0, tmp%9#0} with tmp%0#0 made 4 modifications
debug: Replacing redundant declaration let tmp%6#0: bool = (b> two#0 tmp%0#0) with copy of existing registers [Register(ir_type=bool, name='tmp%1', version=0, source_location=stubs/biguint.py:42:11)]
debug: Replacing redundant declaration let tmp%8#0: bool = (b>= two#0 tmp%0#0) with copy of existing registers [Register(ir_type=bool, name='tmp%3', version=0, source_location=stubs/biguint.py:43:11)]
debug: Found equivalence set: tmp%1#0, tmp%6#0
debug: Replacing {tmp%6#0} with tmp%1#0 made 1 modifications
debug: Found equivalence set: tmp%3#0, tmp%8#0
debug: Replacing {tmp%8#0} with tmp%3#0 made 1 modifications
debug: Removing redundant assert of tmp%1#0
debug: Removing redundant assert of tmp%3#0
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (b== 0b 0b) to 1u
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/BigUIntContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (b== 3b 3b) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%4#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguints
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%2#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%4#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%4#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/BigUIntContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%3#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguints
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/BigUIntContract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguints
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 4, ending loop
debug: Removing Phis from test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Removing Phis from test_cases.stubs.biguint.compare_biguints
debug: Removing Phis from test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Removing Phis from test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Removing Phis from test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Coalescing local variables in test_cases.stubs.biguint.BigUIntContract.approval_program using strategy RootOperandGrouping
debug: Coalescing ternary_result%0#0 with [ternary_result%0#5, ternary_result%0#1, ternary_result%0#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in test_cases.stubs.biguint.compare_biguints using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.stubs.biguint.compare_biguint_vs_uint64 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.stubs.biguint.compare_uint64_vs_biguint using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.stubs.biguint.BigUIntContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Sequentializing parallel copies in test_cases.stubs.biguint.compare_biguints
debug: Sequentializing parallel copies in test_cases.stubs.biguint.compare_biguint_vs_uint64
debug: Sequentializing parallel copies in test_cases.stubs.biguint.compare_uint64_vs_biguint
debug: Sequentializing parallel copies in test_cases.stubs.biguint.BigUIntContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to stubs/out/BigUIntContract.destructured.ir
debug: Output IR to stubs/out/BytesContract.ssa.ir
info: Optimizing test_cases.stubs.bytes.BytesContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== QmFzZSA2NCBlbmNvZGVk 0x4261736520363420656e636f646564) to 1u
debug: Simplified (== IJQXGZJAGMZCAZLOMNXWIZLE 0x4261736520333220656e636f646564) to 1u
debug: Simplified (== 0x4261736520313620656e636f646564 0x4261736520313620656e636f646564) to 1u
debug: Simplified (len QmFzZSA2NCBlbmNvZGVk) to 15u
debug: Simplified (len 0x) to 0u
debug: Simplified (concat 0x61 0x62) to 0x6162
debug: Simplified (concat 0x63 0x64) to 0x6364
debug: Simplified ((extract 0 1) 0x616263) to 0x61
debug: Simplified (len 0x616263) to 3u
debug: Simplified (len 0x616263) to 3u
debug: Simplified (len 0x616263) to 3u
debug: Simplified (len 0x616263) to 3u
debug: Simplified (len 0x616263) to 3u
debug: Simplified (len 0x616263) to 3u
debug: Simplified (len 0x31323334353637) to 7u
debug: Simplified (len 0x616263) to 3u
debug: Simplified (len 0x31) to 1u
debug: Simplified (== 0x31 0x31) to 1u
debug: Simplified (len 0x31) to 1u
debug: Simplified (== 0x31 0x31) to 1u
debug: Simplified (len 0x31) to 1u
debug: Simplified (len 0x) to 0u
debug: Simplified (len 0x) to 0u
debug: Simplified (== 0x 0x) to 1u
debug: Simplified (len 0x31) to 1u
debug: Simplified (== 0x31 0x31) to 1u
debug: Simplified (len 0x31) to 1u
debug: Simplified (len 0x) to 0u
debug: Simplified (len 0x) to 0u
debug: Simplified (== 0x 0x) to 1u
debug: Simplified (b& 0x00 0x0f) to 0x00
debug: Simplified (b| 0x0f 0xf0) to 0xff
debug: Simplified (b^ 0x0f 0xff) to 0xf0
debug: Simplified (b& 0x00 0xff) to 0x00
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable ternary_result%0#2
debug: Removing unused variable ternary_result%1#2
debug: Removing unused variable ternary_result%4#2
debug: Removing unused variable ternary_result%5#2
debug: Removing unused variable ternary_result%8#2
debug: Removing unused variable base_64#0
debug: Removing unused variable base_32#0
debug: Removing unused variable base_16#0
debug: Removing unused variable empty#0
debug: Removing unused variable c#0
debug: Removing unused variable abc#0
debug: Removing unused variable true#0
debug: Removing unused variable false#0
debug: Removing unused variable a#0
debug: Removing unused variable b#0
debug: Removing unused variable c#2
debug: Removing unused variable d#0
debug: Removing unused variable y#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let is_out_of_bounds%2#0: bool = (>= 1u length%1#0) with copy of existing registers [Register(ir_type=bool, name='is_out_of_bounds%1', version=0, source_location=stubs/bytes.py:27:15-23)]
debug: Replacing redundant declaration let is_out_of_bounds%9#0: bool = (>= 1u length%6#0) with copy of existing registers [Register(ir_type=bool, name='is_out_of_bounds%8', version=0, source_location=stubs/bytes.py:32:15-38)]
debug: Replacing redundant declaration let is_out_of_bounds%11#0: bool = (>= 10u length%7#0) with copy of existing registers [Register(ir_type=bool, name='is_out_of_bounds%10', version=0, source_location=stubs/bytes.py:33:15-26)]
debug: Found equivalence set: is_out_of_bounds%1#0, is_out_of_bounds%2#0
debug: Replacing {is_out_of_bounds%2#0} with is_out_of_bounds%1#0 made 1 modifications
debug: Found equivalence set: is_out_of_bounds%8#0, is_out_of_bounds%9#0
debug: Replacing {is_out_of_bounds%9#0} with is_out_of_bounds%8#0 made 1 modifications
debug: Found equivalence set: is_out_of_bounds%10#0, is_out_of_bounds%11#0
debug: Replacing {is_out_of_bounds%11#0} with is_out_of_bounds%10#0 made 1 modifications
debug: Replacing redundant declaration let bounded_index%2#0: uint64 = (select 1u length%1#0 is_out_of_bounds%1#0) with copy of existing registers [Register(ir_type=uint64, name='bounded_index%1', version=0, source_location=stubs/bytes.py:27:15-23)]
debug: Replacing redundant declaration let bounded_offset%4#0: uint64 = (select 1u length%6#0 is_out_of_bounds%8#0) with copy of existing registers [Register(ir_type=uint64, name='bounded_index%8', version=0, source_location=stubs/bytes.py:32:15-38)]
debug: Replacing redundant declaration let bounded_index%11#0: uint64 = (select 10u length%7#0 is_out_of_bounds%10#0) with copy of existing registers [Register(ir_type=uint64, name='bounded_offset%5', version=0, source_location=stubs/bytes.py:33:15-26)]
debug: Found equivalence set: bounded_index%1#0, bounded_index%2#0
debug: Replacing {bounded_index%2#0} with bounded_index%1#0 made 1 modifications
debug: Found equivalence set: bounded_index%8#0, bounded_offset%4#0
debug: Replacing {bounded_offset%4#0} with bounded_index%8#0 made 1 modifications
debug: Found equivalence set: bounded_offset%5#0, bounded_index%11#0
debug: Replacing {bounded_index%11#0} with bounded_offset%5#0 made 2 modifications
debug: Optimizing subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable one#0
debug: Removing unused variable ten#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let length%1#0: uint64 = (len abc#0) with copy of existing registers [Register(ir_type=uint64, name='length%0', version=0, source_location=stubs/bytes.py:85:11-20)]
debug: Replacing redundant declaration let is_out_of_bounds%2#0: bool = (>= 1u length%1#0) with copy of existing registers [Register(ir_type=bool, name='is_out_of_bounds%1', version=0, source_location=stubs/bytes.py:86:11-23)]
debug: Replacing redundant declaration let length%2#0: uint64 = (len abc#0) with copy of existing registers [Register(ir_type=uint64, name='length%0', version=0, source_location=stubs/bytes.py:85:11-20)]
debug: Replacing redundant declaration let is_out_of_bounds%5#0: bool = (>= 1u length%3#0) with copy of existing registers [Register(ir_type=bool, name='is_out_of_bounds%4', version=0, source_location=stubs/bytes.py:88:11-33)]
debug: Replacing redundant declaration let length%4#0: uint64 = (len abc#0) with copy of existing registers [Register(ir_type=uint64, name='length%0', version=0, source_location=stubs/bytes.py:85:11-20)]
debug: Found equivalence set: length%0#0, length%1#0, length%2#0, length%4#0
debug: Replacing {length%1#0, length%2#0, length%4#0} with length%0#0 made 9 modifications
debug: Found equivalence set: is_out_of_bounds%1#0, is_out_of_bounds%2#0
debug: Replacing {is_out_of_bounds%2#0} with is_out_of_bounds%1#0 made 1 modifications
debug: Found equivalence set: is_out_of_bounds%4#0, is_out_of_bounds%5#0
debug: Replacing {is_out_of_bounds%5#0} with is_out_of_bounds%4#0 made 1 modifications
debug: Replacing redundant declaration let is_out_of_bounds%1#0: bool = (>= 1u length%0#0) with copy of existing registers [Register(ir_type=bool, name='is_out_of_bounds%0', version=0, source_location=stubs/bytes.py:85:11-20)]
debug: Replacing redundant declaration let bounded_index%2#0: uint64 = (select 1u length%0#0 is_out_of_bounds%1#0) with copy of existing registers [Register(ir_type=uint64, name='bounded_index%1', version=0, source_location=stubs/bytes.py:86:11-23)]
debug: Replacing redundant declaration let is_out_of_bounds%3#0: bool = (>= 1u length%0#0) with copy of existing registers [Register(ir_type=bool, name='is_out_of_bounds%0', version=0, source_location=stubs/bytes.py:85:11-20)]
debug: Replacing redundant declaration let bounded_offset%0#0: uint64 = (select 1u length%3#0 is_out_of_bounds%4#0) with copy of existing registers [Register(ir_type=uint64, name='bounded_index%4', version=0, source_location=stubs/bytes.py:88:11-33)]
debug: Found equivalence set: is_out_of_bounds%0#0, is_out_of_bounds%1#0, is_out_of_bounds%3#0
debug: Replacing {is_out_of_bounds%1#0, is_out_of_bounds%3#0} with is_out_of_bounds%0#0 made 2 modifications
debug: Found equivalence set: bounded_index%1#0, bounded_index%2#0
debug: Replacing {bounded_index%2#0} with bounded_index%1#0 made 2 modifications
debug: Found equivalence set: bounded_index%4#0, bounded_offset%0#0
debug: Replacing {bounded_offset%0#0} with bounded_index%4#0 made 1 modifications
debug: Replacing redundant declaration let bounded_index%1#0: uint64 = (select 1u length%0#0 is_out_of_bounds%0#0) with copy of existing registers [Register(ir_type=uint64, name='bounded_index%0', version=0, source_location=stubs/bytes.py:85:11-20)]
debug: Replacing redundant declaration let bounded_index%3#0: uint64 = (select 1u length%0#0 is_out_of_bounds%0#0) with copy of existing registers [Register(ir_type=uint64, name='bounded_index%0', version=0, source_location=stubs/bytes.py:85:11-20)]
debug: Found equivalence set: bounded_index%0#0, bounded_index%1#0, bounded_index%3#0
debug: Replacing {bounded_index%1#0, bounded_index%3#0} with bounded_index%0#0 made 6 modifications
debug: Optimizing subroutine test_cases.stubs.bytes.one_to_seven
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable one#0
debug: Removing unused variable ten#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let length%1#0: uint64 = (len abc#0) with copy of existing registers [Register(ir_type=uint64, name='length%0', version=0, source_location=stubs/bytes.py:94:11-20)]
debug: Replacing redundant declaration let length%2#0: uint64 = (len abc#0) with copy of existing registers [Register(ir_type=uint64, name='length%0', version=0, source_location=stubs/bytes.py:94:11-20)]
debug: Found equivalence set: length%0#0, length%1#0, length%2#0
debug: Replacing {length%1#0, length%2#0} with length%0#0 made 10 modifications
debug: Replacing redundant declaration let is_out_of_bounds%2#0: bool = (>= 10u length%0#0) with copy of existing registers [Register(ir_type=bool, name='is_out_of_bounds%0', version=0, source_location=stubs/bytes.py:94:11-20)]
debug: Replacing redundant declaration let is_out_of_bounds%4#0: bool = (>= 10u length%0#0) with copy of existing registers [Register(ir_type=bool, name='is_out_of_bounds%0', version=0, source_location=stubs/bytes.py:94:11-20)]
debug: Replacing redundant declaration let is_out_of_bounds%5#0: bool = (>= 1u length%0#0) with copy of existing registers [Register(ir_type=bool, name='is_out_of_bounds%1', version=0, source_location=stubs/bytes.py:94:11-20)]
debug: Found equivalence set: is_out_of_bounds%0#0, is_out_of_bounds%2#0, is_out_of_bounds%4#0
debug: Replacing {is_out_of_bounds%2#0, is_out_of_bounds%4#0} with is_out_of_bounds%0#0 made 2 modifications
debug: Found equivalence set: is_out_of_bounds%1#0, is_out_of_bounds%5#0
debug: Replacing {is_out_of_bounds%5#0} with is_out_of_bounds%1#0 made 1 modifications
debug: Replacing redundant declaration let bounded_offset%0#0: uint64 = (select 10u length%0#0 is_out_of_bounds%0#0) with copy of existing registers [Register(ir_type=uint64, name='bounded_index%0', version=0, source_location=stubs/bytes.py:94:11-20)]
debug: Replacing redundant declaration let bounded_index%4#0: uint64 = (select 10u length%0#0 is_out_of_bounds%0#0) with copy of existing registers [Register(ir_type=uint64, name='bounded_index%0', version=0, source_location=stubs/bytes.py:94:11-20)]
debug: Replacing redundant declaration let bounded_index%5#0: uint64 = (select 1u length%0#0 is_out_of_bounds%1#0) with copy of existing registers [Register(ir_type=uint64, name='bounded_index%1', version=0, source_location=stubs/bytes.py:94:11-20)]
debug: Found equivalence set: bounded_index%0#0, bounded_offset%0#0, bounded_index%4#0
debug: Replacing {bounded_offset%0#0, bounded_index%4#0} with bounded_index%0#0 made 4 modifications
debug: Found equivalence set: bounded_index%1#0, bounded_index%5#0
debug: Replacing {bounded_index%5#0} with bounded_index%1#0 made 2 modifications
debug: Replacing redundant declaration let end_before_start%2#0: bool = (< bounded_index%1#0 bounded_index%0#0) with copy of existing registers [Register(ir_type=bool, name='end_before_start%0', version=0, source_location=stubs/bytes.py:94:11-20)]
debug: Found equivalence set: end_before_start%0#0, end_before_start%2#0
debug: Replacing {end_before_start%2#0} with end_before_start%0#0 made 1 modifications
debug: Replacing redundant declaration let end%2#0: uint64 = (select bounded_index%1#0 bounded_index%0#0 end_before_start%0#0) with copy of existing registers [Register(ir_type=uint64, name='end%0', version=0, source_location=stubs/bytes.py:94:11-20)]
debug: Found equivalence set: end%0#0, end%2#0
debug: Replacing {end%2#0} with end%0#0 made 1 modifications
debug: Replacing redundant declaration let tmp%4#0: bytes = (substring3 abc#0 bounded_index%0#0 end%0#0) with copy of existing registers [Register(ir_type=bytes, name='tmp%0', version=0, source_location=stubs/bytes.py:94:11-20)]
debug: Found equivalence set: tmp%0#0, tmp%4#0
debug: Replacing {tmp%4#0} with tmp%0#0 made 1 modifications
debug: Replacing redundant declaration let tmp%5#0: bool = (== tmp%0#0 0x) with copy of existing registers [Register(ir_type=bool, name='tmp%1', version=0, source_location=stubs/bytes.py:94:11)]
debug: Found equivalence set: tmp%1#0, tmp%5#0
debug: Replacing {tmp%5#0} with tmp%1#0 made 1 modifications
debug: Removing redundant assert of tmp%1#0
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/BytesContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (! 0u) to 1u
debug: Simplified (== 0x6162 0x6162) to 1u
debug: Simplified (== 0x6364 0x6364) to 1u
debug: Simplified (== 0x61 0x61) to 1u
debug: Simplified (>= 1u 3u) to 0u
debug: Simplified (>= 1u 3u) to 0u
debug: Simplified (>= 1u 3u) to 0u
debug: Simplified (>= 1u 3u) to 0u
debug: Simplified (>= 2u 3u) to 0u
debug: Simplified (>= 2u 3u) to 0u
debug: Simplified (>= 1u 3u) to 0u
debug: Simplified (>= 1u 7u) to 0u
debug: Simplified (>= 10u 3u) to 1u
debug: Simplified (== 0x00 0x00) to 1u
debug: Simplified (== 0xff 0xff) to 1u
debug: Simplified (== 0xf0 0xf0) to 1u
debug: Simplified (== 0x00 0x00) to 1u
debug: Simplified (b| 0x00 0xff) to 0xff
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable reinterpret_bool%0#0
debug: Removing unused variable reinterpret_bool%1#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable c#1
debug: Removing unused variable tmp%7#0
debug: Removing unused variable length%0#0
debug: Removing unused variable length%1#0
debug: Removing unused variable length%2#0
debug: Removing unused variable length%3#0
debug: Removing unused variable length%4#0
debug: Removing unused variable length%5#0
debug: Removing unused variable length%6#0
debug: Removing unused variable length%7#0
debug: Removing unused variable reinterpret_bool%2#0
debug: Removing unused variable ternary_result%0#0
debug: Removing unused variable ternary_result%0#1
debug: Removing unused variable x#0
debug: Removing unused variable reinterpret_bool%3#0
debug: Removing unused variable ternary_result%1#0
debug: Removing unused variable ternary_result%1#1
debug: Removing unused variable tmp%25#0
debug: Removing unused variable reinterpret_bool%4#0
debug: Removing unused variable reinterpret_bool%5#0
debug: Removing unused variable reinterpret_bool%6#0
debug: Removing unused variable ternary_result%4#0
debug: Removing unused variable ternary_result%4#1
debug: Removing unused variable tmp%28#0
debug: Removing unused variable reinterpret_bool%7#0
debug: Removing unused variable ternary_result%5#0
debug: Removing unused variable ternary_result%5#1
debug: Removing unused variable tmp%29#0
debug: Removing unused variable reinterpret_bool%8#0
debug: Removing unused variable reinterpret_bool%9#0
debug: Removing unused variable reinterpret_bool%10#0
debug: Removing unused variable ternary_result%8#0
debug: Removing unused variable ternary_result%8#1
debug: Removing unused variable tmp%32#0
debug: Removing unused variable tmp%33#0
debug: Removing unused variable tmp%35#0
debug: Removing unused variable tmp%37#0
debug: Removing unused variable y#1
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0: // L5 from goto 1u ? block@2 : block@1 to goto block@2
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@3: // ternary_merge_L38 from goto 1u ? block@5 : block@4 to goto block@5
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@6: // ternary_merge_L40 from goto 1u ? block@8 : block@7 to goto block@8
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@9: // ternary_merge_L41 from goto 0u ? block@11 : block@10 to goto block@10
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@12: // ternary_merge_L42 from goto 0u ? block@14 : block@13 to goto block@13
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@15: // ternary_merge_L43 from goto 1u ? block@16 : block@17 to goto block@16
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@18: // ternary_merge_L44 from goto 1u ? block@19 : block@20 to goto block@19
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@21: // ternary_merge_L45 from goto 0u ? block@22 : block@23 to goto block@23
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@24: // ternary_merge_L46 from goto 0u ? block@25 : block@26 to goto block@26
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // ternary_false_L38 with block@0: // L5 in block@3: // ternary_merge_L38
debug: Merged linear block@2: // ternary_false_L38 into block@0: // L5
debug: Replaced predecessor block@5: // ternary_false_L40 with block@3: // ternary_merge_L38 in block@6: // ternary_merge_L40
debug: Merged linear block@5: // ternary_false_L40 into block@3: // ternary_merge_L38
debug: Replaced predecessor block@8: // ternary_false_L41 with block@6: // ternary_merge_L40 in block@9: // ternary_merge_L41
debug: Merged linear block@8: // ternary_false_L41 into block@6: // ternary_merge_L40
debug: Replaced predecessor block@10: // ternary_true_L42 with block@9: // ternary_merge_L41 in block@12: // ternary_merge_L42
debug: Merged linear block@10: // ternary_true_L42 into block@9: // ternary_merge_L41
debug: Replaced predecessor block@13: // ternary_true_L43 with block@12: // ternary_merge_L42 in block@15: // ternary_merge_L43
debug: Merged linear block@13: // ternary_true_L43 into block@12: // ternary_merge_L42
debug: Replaced predecessor block@16: // ternary_true_L44 with block@15: // ternary_merge_L43 in block@18: // ternary_merge_L44
debug: Merged linear block@16: // ternary_true_L44 into block@15: // ternary_merge_L43
debug: Replaced predecessor block@19: // ternary_true_L45 with block@18: // ternary_merge_L44 in block@21: // ternary_merge_L45
debug: Merged linear block@19: // ternary_true_L45 into block@18: // ternary_merge_L44
debug: Replaced predecessor block@23: // ternary_false_L46 with block@21: // ternary_merge_L45 in block@24: // ternary_merge_L46
debug: Merged linear block@23: // ternary_false_L46 into block@21: // ternary_merge_L45
debug: Replaced predecessor block@26: // ternary_false_L47 with block@24: // ternary_merge_L46 in block@27: // ternary_merge_L47
debug: Merged linear block@26: // ternary_false_L47 into block@24: // ternary_merge_L46
debug: Optimizer: Remove Empty Blocks
debug: Removed empty block: block@1: // ternary_true_L38
debug: Removed empty block: block@3: // ternary_merge_L38
debug: Removed empty block: block@4: // ternary_true_L40
debug: Removed empty block: block@14: // ternary_false_L43
debug: Removed empty block: block@15: // ternary_merge_L43
debug: Removed empty block: block@17: // ternary_false_L44
debug: Removed empty block: block@25: // ternary_true_L47
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@7: // ternary_true_L41, block@11: // ternary_false_L42, block@20: // ternary_false_L45, block@22: // ternary_true_L46
debug: Removed unreachable predecessors from block@9: // ternary_merge_L41
debug: Removed unreachable predecessors from block@12: // ternary_merge_L42
debug: Removed unreachable predecessors from block@21: // ternary_merge_L45
debug: Removed unreachable predecessors from block@24: // ternary_merge_L46
debug: Removing unreachable phi arguments: ternary_result%2#0 <- block@7
debug: Replacing trivial Phi node: let ternary_result%2#2: bytes = φ(ternary_result%2#1 <- block@6) (ternary_result%2#2) with ternary_result%2#1
debug: Deleting Phi assignment: let ternary_result%2#2: bytes = φ(ternary_result%2#1 <- block@6)
debug: Removing unreachable phi arguments: ternary_result%3#1 <- block@11
debug: Replacing trivial Phi node: let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@9) (ternary_result%3#2) with ternary_result%3#0
debug: Deleting Phi assignment: let ternary_result%3#2: bytes = φ(ternary_result%3#0 <- block@9)
debug: Removing unreachable phi arguments: ternary_result%6#1 <- block@20
debug: Replacing trivial Phi node: let ternary_result%6#2: bytes = φ(ternary_result%6#0 <- block@18) (ternary_result%6#2) with ternary_result%6#0
debug: Deleting Phi assignment: let ternary_result%6#2: bytes = φ(ternary_result%6#0 <- block@18)
debug: Removing unreachable phi arguments: ternary_result%7#0 <- block@22
debug: Replacing trivial Phi node: let ternary_result%7#2: bytes = φ(ternary_result%7#1 <- block@21) (ternary_result%7#2) with ternary_result%7#1
debug: Deleting Phi assignment: let ternary_result%7#2: bytes = φ(ternary_result%7#1 <- block@21)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (< bounded_index%0#0 bounded_index%0#0) to 0u
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.one_to_seven
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/BytesContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (select 1u 3u 0u) to 1u
debug: Simplified (select 1u 3u 0u) to 1u
debug: Simplified (select 1u 3u 0u) to 1u
debug: Simplified (select 1u 3u 0u) to 1u
debug: Simplified (select 2u 3u 0u) to 2u
debug: Simplified (select 2u 3u 0u) to 2u
debug: Simplified (select 1u 3u 0u) to 1u
debug: Simplified (select 1u 7u 0u) to 1u
debug: Simplified (select 10u 3u 1u) to 3u
debug: Simplified (== 0x 0x) to 1u
debug: Simplified (== 0x 0x) to 1u
debug: Simplified (== 0x31 0x31) to 1u
debug: Simplified (== 0x31 0x31) to 1u
debug: Simplified (== 0xff 0xff) to 1u
debug: Simplified (b^ 0xff 0xf0) to 0x0f
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%8#0
debug: Removing unused variable is_out_of_bounds%0#0
debug: Removing unused variable is_out_of_bounds%1#0
debug: Removing unused variable is_out_of_bounds%3#0
debug: Removing unused variable is_out_of_bounds%4#0
debug: Removing unused variable is_out_of_bounds%5#0
debug: Removing unused variable is_out_of_bounds%6#0
debug: Removing unused variable is_out_of_bounds%7#0
debug: Removing unused variable is_out_of_bounds%8#0
debug: Removing unused variable is_out_of_bounds%10#0
debug: Removing unused variable ternary_result%2#1
debug: Removing unused variable ternary_result%3#0
debug: Removing unused variable ternary_result%6#0
debug: Removing unused variable ternary_result%7#1
debug: Removing unused variable tmp%34#0
debug: Removing unused variable tmp%36#0
debug: Removing unused variable tmp%38#0
debug: Removing unused variable tmp%39#0
debug: Removing unused variable y#2
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@6: // ternary_merge_L40 with block@0: // L5 in block@9: // ternary_merge_L41
debug: Merged linear block@6: // ternary_merge_L40 into block@0: // L5
debug: Replaced predecessor block@9: // ternary_merge_L41 with block@0: // L5 in block@12: // ternary_merge_L42
debug: Merged linear block@9: // ternary_merge_L41 into block@0: // L5
debug: Replaced predecessor block@12: // ternary_merge_L42 with block@0: // L5 in block@18: // ternary_merge_L44
debug: Merged linear block@12: // ternary_merge_L42 into block@0: // L5
debug: Replaced predecessor block@18: // ternary_merge_L44 with block@0: // L5 in block@21: // ternary_merge_L45
debug: Merged linear block@18: // ternary_merge_L44 into block@0: // L5
debug: Replaced predecessor block@21: // ternary_merge_L45 with block@0: // L5 in block@24: // ternary_merge_L46
debug: Merged linear block@21: // ternary_merge_L45 into block@0: // L5
debug: Replaced predecessor block@24: // ternary_merge_L46 with block@0: // L5 in block@27: // ternary_merge_L47
debug: Merged linear block@24: // ternary_merge_L46 into block@0: // L5
debug: Replaced predecessor block@27: // ternary_merge_L47 with block@0: // L5 in block@29: // ternary_false_L72
debug: Replaced predecessor block@27: // ternary_merge_L47 with block@0: // L5 in block@28: // ternary_true_L72
debug: Merged linear block@27: // ternary_merge_L47 into block@0: // L5
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (select bounded_index%0#0 bounded_index%0#0 0u) to bounded_index%0#0
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable end_before_start%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.one_to_seven
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/BytesContract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (substring3 0x616263 1u 3u) to 0x6263
debug: Simplified (substring3 0x616263 1u 1u) to 0x
debug: Simplified (substring3 0x616263 0u 1u) to 0x61
debug: Simplified (- 3u 1u) to 2u
debug: Simplified (- 3u 2u) to 1u
debug: Simplified (- 3u 2u) to 1u
debug: Simplified (- 3u 1u) to 2u
debug: Simplified (- 7u 1u) to 6u
debug: Simplified (- 3u 3u) to 0u
debug: Simplified (== 0x0f 0x0f) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable bounded_index%0#0
debug: Removing unused variable bounded_index%1#0
debug: Removing unused variable bounded_index%3#0
debug: Removing unused variable bounded_offset%0#0
debug: Removing unused variable bounded_offset%1#0
debug: Removing unused variable bounded_offset%2#0
debug: Removing unused variable bounded_offset%3#0
debug: Removing unused variable bounded_index%8#0
debug: Removing unused variable bounded_offset%5#0
debug: Removing unused variable tmp%26#0
debug: Removing unused variable tmp%27#0
debug: Removing unused variable tmp%30#0
debug: Removing unused variable tmp%31#0
debug: Removing unused variable tmp%40#0
debug: Removing unused variable y#3
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Found equivalence set: bounded_index%0#0, end%0#0
debug: Replacing {end%0#0} with bounded_index%0#0 made 1 modifications
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.one_to_seven
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/BytesContract.ssa.opt_pass_4.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 0x6263 0x6263) to 1u
debug: Simplified (== 0x 0x) to 1u
debug: Simplified (== 0x61 0x61) to 1u
debug: Simplified (substring3 0x616263 0u 2u) to 0x6162
debug: Simplified (substring3 0x616263 1u 3u) to 0x6263
debug: Simplified (substring3 0x616263 1u 2u) to 0x62
debug: Simplified (< 6u 1u) to 0u
debug: Simplified (< 3u 0u) to 0u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%9#0
debug: Removing unused variable tmp%11#0
debug: Removing unused variable tmp%13#0
debug: Removing unused variable bounded_index%4#0
debug: Removing unused variable bounded_index%5#0
debug: Removing unused variable bounded_index%6#0
debug: Removing unused variable bounded_index%7#0
debug: Removing unused variable bounded_index%9#0
debug: Removing unused variable bounded_index%10#0
debug: Removing unused variable tmp%41#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.one_to_seven
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/BytesContract.ssa.opt_pass_5.ir
debug: Begin optimization pass 6/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 0x6162 0x6162) to 1u
debug: Simplified (== 0x6263 0x6263) to 1u
debug: Simplified (== 0x62 0x62) to 1u
debug: Simplified (select 6u 1u 0u) to 6u
debug: Simplified (select 3u 0u 0u) to 3u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%10#0
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%14#0
debug: Removing unused variable tmp%15#0
debug: Removing unused variable tmp%17#0
debug: Removing unused variable tmp%19#0
debug: Removing unused variable end_before_start%0#0
debug: Removing unused variable end_before_start%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.one_to_seven
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/BytesContract.ssa.opt_pass_6.ir
debug: Begin optimization pass 7/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (substring3 0x31323334353637 1u 6u) to 0x3233343536
debug: Simplified (substring3 0x616263 0u 3u) to 0x616263
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%16#0
debug: Removing unused variable tmp%18#0
debug: Removing unused variable tmp%20#0
debug: Removing unused variable end%0#0
debug: Removing unused variable end%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.one_to_seven
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/BytesContract.ssa.opt_pass_7.ir
debug: Begin optimization pass 8/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 0x3233343536 0x3233343536) to 1u
debug: Simplified (== 0x616263 0x616263) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%21#0
debug: Removing unused variable tmp%23#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.one_to_seven
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/BytesContract.ssa.opt_pass_8.ir
debug: Begin optimization pass 9/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%22#0
debug: Removing unused variable tmp%24#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.one_to_seven
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/BytesContract.ssa.opt_pass_9.ir
debug: Begin optimization pass 10/100
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_slicing_with_uint64
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.one_to_seven
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.check_end_before_start_slicing
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 10, ending loop
debug: Removing Phis from test_cases.stubs.bytes.BytesContract.approval_program
debug: Removing Phis from test_cases.stubs.bytes.check_slicing_with_uint64
debug: Removing Phis from test_cases.stubs.bytes.one_to_seven
debug: Removing Phis from test_cases.stubs.bytes.check_end_before_start_slicing
debug: Removing Phis from test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Coalescing local variables in test_cases.stubs.bytes.BytesContract.approval_program using strategy RootOperandGrouping
debug: Coalescing ternary_result%9#0 with [ternary_result%9#5, ternary_result%9#1, ternary_result%9#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in test_cases.stubs.bytes.check_slicing_with_uint64 using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.stubs.bytes.one_to_seven using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.stubs.bytes.check_end_before_start_slicing using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Coalescing local variables in test_cases.stubs.bytes.BytesContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.bytes.BytesContract.approval_program
debug: Sequentializing parallel copies in test_cases.stubs.bytes.check_slicing_with_uint64
debug: Sequentializing parallel copies in test_cases.stubs.bytes.one_to_seven
debug: Sequentializing parallel copies in test_cases.stubs.bytes.check_end_before_start_slicing
debug: Sequentializing parallel copies in test_cases.stubs.bytes.BytesContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to stubs/out/BytesContract.destructured.ir
debug: Output IR to stubs/out/StringContract.ssa.ir
info: Optimizing test_cases.stubs.string.StringContract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.string.StringContract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (len "") to 0u
debug: Simplified (len " ") to 1u
debug: Simplified (concat "a" "b") to "ab"
debug: Simplified (concat "a" "b") to "ab"
debug: Simplified (concat "a" "b") to "ab"
debug: Simplified (!= "" " ") to 1u
debug: Simplified (concat "c" "d") to "cd"
debug: Simplified (len "") to 0u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "") to 0u
debug: Simplified (len "a") to 1u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "a") to 1u
debug: Simplified (len "ab") to 2u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "ab") to 2u
debug: Simplified (len "b") to 1u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "b") to 1u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (concat "abcdefg" "!") to "abcdefg!"
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "") to 0u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "") to 0u
debug: Simplified (len "") to 0u
debug: Simplified (len "g") to 1u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "g") to 1u
debug: Simplified (len "g") to 1u
debug: Simplified (len "fg") to 2u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "fg") to 2u
debug: Simplified (len "fg") to 2u
debug: Simplified (len "f") to 1u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "f") to 1u
debug: Simplified (len "f") to 1u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (concat "!" "abcdefg") to "!abcdefg"
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (len "abcdefg") to 7u
debug: Simplified (concat "d" ".") to "d."
debug: Simplified (concat "d" ".") to "d."
debug: Simplified (concat "d" ".") to "d."
debug: Simplified (concat "d" ".") to "d."
debug: Simplified (concat "d" "") to "d"
debug: Simplified (concat tmp%115#0 "") to tmp%115#0
debug: Simplified (== "d" "d") to 1u
debug: Simplified (== "d" "d") to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable empty#0
debug: Removing unused variable non_empty#0
debug: Removing unused variable c#0
debug: Removing unused variable alpha#0
debug: Removing unused variable awst_tmp%0#0
debug: Removing unused variable awst_tmp%1#0
debug: Removing unused variable awst_tmp%2#0
debug: Removing unused variable awst_tmp%3#0
debug: Removing unused variable awst_tmp%5#0
debug: Removing unused variable awst_tmp%6#0
debug: Removing unused variable awst_tmp%7#0
debug: Removing unused variable awst_tmp%8#0
debug: Removing unused variable d#0
debug: Removing unused variable e#0
debug: Removing unused variable f#0
debug: Removing unused variable awst_tmp%10#0
debug: Removing unused variable awst_tmp%11#0
debug: Removing unused variable awst_tmp%12#0
debug: Removing unused variable awst_tmp%13#0
debug: Removing unused variable awst_tmp%14#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%91#0: uint64 = (len awst_tmp%9#0) with copy of existing registers [Register(ir_type=uint64, name='tmp%89', version=0, source_location=stubs/string.py:38:19-46)]
debug: Replacing redundant declaration let tmp%41#0: uint64 = (len awst_tmp%4#0) with copy of existing registers [Register(ir_type=uint64, name='tmp%38', version=0, source_location=stubs/string.py:31:19-48)]
debug: Replacing redundant declaration let tmp%89#0: uint64 = (len awst_tmp%9#0) with copy of existing registers [Register(ir_type=uint64, name='tmp%85', version=0, source_location=stubs/string.py:38:19-46)]
debug: Found equivalence set: tmp%38#0, tmp%41#0
debug: Replacing {tmp%41#0} with tmp%38#0 made 1 modifications
debug: Found equivalence set: tmp%85#0, tmp%89#0, tmp%91#0
debug: Replacing {tmp%89#0, tmp%91#0} with tmp%85#0 made 2 modifications
debug: Found equivalence set: tmp%115#0, tmp%116#0
debug: Replacing {tmp%116#0} with tmp%115#0 made 1 modifications
debug: Optimizing subroutine algopy_lib_bytes.is_substring
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Replacing redundant declaration let tmp%4#0: uint64 = (len item#0) with copy of existing registers [Register(ir_type=uint64, name='tmp%0', version=0, source_location=<algopy>/algopy_lib_bytes.py:11:18-29)]
debug: Found equivalence set: tmp%0#0, tmp%4#0
debug: Replacing {tmp%4#0} with tmp%0#0 made 1 modifications
debug: Replacing redundant declaration let tmp%5#0: uint64 = (+ start#1 tmp%0#0) with copy of existing registers [Register(ir_type=uint64, name='tmp%1', version=0, source_location=<algopy>/algopy_lib_bytes.py:11:10-29)]
debug: Found equivalence set: tmp%1#0, tmp%5#0
debug: Replacing {tmp%5#0} with tmp%1#0 made 1 modifications
debug: Optimizing subroutine test_cases.stubs.string.StringContract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/StringContract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.stubs.string.StringContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (! 0u) to 1u
debug: Simplified (== "ab" "ab") to 1u
debug: Simplified (== "ab" "ab") to 1u
debug: Simplified (== "ab" "ab") to 1u
debug: Simplified (concat "cd" "e") to "cde"
debug: Simplified (> 0u 7u) to 0u
debug: Simplified (extract3 "abcdefg" 0u 0u) to ""
debug: Simplified (> 1u 7u) to 0u
debug: Simplified (extract3 "abcdefg" 0u 1u) to "a"
debug: Simplified (> 2u 7u) to 0u
debug: Simplified (extract3 "abcdefg" 0u 2u) to "ab"
debug: Simplified (> 1u 7u) to 0u
debug: Simplified (extract3 "abcdefg" 0u 1u) to "a"
debug: Simplified (> 7u 7u) to 0u
debug: Simplified (extract3 "abcdefg" 0u 7u) to "abcdefg"
debug: Simplified (len "abcdefg!") to 8u
debug: Simplified (> 0u 7u) to 0u
debug: Simplified (- 7u 0u) to 7u
debug: Simplified (> 1u 7u) to 0u
debug: Simplified (- 7u 1u) to 6u
debug: Simplified (> 2u 7u) to 0u
debug: Simplified (- 7u 2u) to 5u
debug: Simplified (> 1u 7u) to 0u
debug: Simplified (- 7u 1u) to 6u
debug: Simplified (> 7u 7u) to 0u
debug: Simplified (- 7u 7u) to 0u
debug: Simplified (len "!abcdefg") to 8u
debug: Simplified (concat "d." "e") to "d.e"
debug: Simplified (concat "d." "e") to "d.e"
debug: Simplified (concat "d." "e") to "d.e"
debug: Simplified (concat "d." "e") to "d.e"
debug: Simplified (concat "d" "e") to "de"
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable reinterpret_bool%0#0
debug: Removing unused variable reinterpret_bool%1#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable c#1
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%13#0
debug: Removing unused variable tmp%15#0
debug: Removing unused variable tmp%17#0
debug: Removing unused variable tmp%18#0
debug: Removing unused variable tmp%20#0
debug: Removing unused variable tmp%22#0
debug: Removing unused variable tmp%23#0
debug: Removing unused variable tmp%25#0
debug: Removing unused variable tmp%27#0
debug: Removing unused variable tmp%28#0
debug: Removing unused variable tmp%30#0
debug: Removing unused variable tmp%33#0
debug: Removing unused variable tmp%34#0
debug: Removing unused variable tmp%36#0
debug: Removing unused variable awst_tmp%4#0
debug: Removing unused variable tmp%39#0
debug: Removing unused variable tmp%44#0
debug: Removing unused variable tmp%45#0
debug: Removing unused variable tmp%47#0
debug: Removing unused variable tmp%48#0
debug: Removing unused variable tmp%50#0
debug: Removing unused variable tmp%52#0
debug: Removing unused variable tmp%53#0
debug: Removing unused variable tmp%55#0
debug: Removing unused variable tmp%56#0
debug: Removing unused variable tmp%58#0
debug: Removing unused variable tmp%60#0
debug: Removing unused variable tmp%61#0
debug: Removing unused variable tmp%63#0
debug: Removing unused variable tmp%64#0
debug: Removing unused variable tmp%66#0
debug: Removing unused variable tmp%68#0
debug: Removing unused variable tmp%69#0
debug: Removing unused variable tmp%71#0
debug: Removing unused variable tmp%72#0
debug: Removing unused variable tmp%74#0
debug: Removing unused variable tmp%77#0
debug: Removing unused variable tmp%78#0
debug: Removing unused variable tmp%80#0
debug: Removing unused variable tmp%81#0
debug: Removing unused variable tmp%83#0
debug: Removing unused variable awst_tmp%9#0
debug: Removing unused variable tmp%86#0
debug: Removing unused variable tmp%88#0
debug: Removing unused variable tmp%94#0
debug: Removing unused variable tmp%99#0
debug: Removing unused variable tmp%104#0
debug: Removing unused variable tmp%109#0
debug: Removing unused variable tmp%114#0
debug: Removing unused variable tmp%119#0
debug: Removing unused variable tmp%120#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_bytes.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.string.StringContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/StringContract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.stubs.string.StringContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== "cde" "cde") to 1u
debug: Simplified (== "" "") to 1u
debug: Simplified (== "a" "a") to 1u
debug: Simplified (== "ab" "ab") to 1u
debug: Simplified (== "a" "b") to 0u
debug: Simplified (== "abcdefg" "abcdefg") to 1u
debug: Simplified (> 8u 7u) to 1u
debug: Simplified (extract3 "abcdefg" 0u 8u) to "abcdefg"
debug: Simplified (extract3 "abcdefg" 7u 0u) to ""
debug: Simplified (extract3 "abcdefg" 6u 1u) to "g"
debug: Simplified (extract3 "abcdefg" 5u 2u) to "fg"
debug: Simplified (extract3 "abcdefg" 6u 1u) to "g"
debug: Simplified (extract3 "abcdefg" 0u 7u) to "abcdefg"
debug: Simplified (> 8u 7u) to 1u
debug: Simplified (concat "d.e" ".") to "d.e."
debug: Simplified (concat "d.e" ".") to "d.e."
debug: Simplified (concat "d.e" ".") to "d.e."
debug: Simplified (concat "d.e" ".") to "d.e."
debug: Simplified (concat "de" "f") to "def"
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%6#0
debug: Removing unused variable c#2
debug: Removing unused variable tmp%14#0
debug: Removing unused variable tmp%16#0
debug: Removing unused variable tmp%19#0
debug: Removing unused variable tmp%21#0
debug: Removing unused variable tmp%24#0
debug: Removing unused variable tmp%26#0
debug: Removing unused variable tmp%29#0
debug: Removing unused variable tmp%31#0
debug: Removing unused variable tmp%35#0
debug: Removing unused variable tmp%37#0
debug: Removing unused variable tmp%38#0
debug: Removing unused variable tmp%46#0
debug: Removing unused variable tmp%49#0
debug: Removing unused variable tmp%54#0
debug: Removing unused variable tmp%57#0
debug: Removing unused variable tmp%62#0
debug: Removing unused variable tmp%65#0
debug: Removing unused variable tmp%70#0
debug: Removing unused variable tmp%73#0
debug: Removing unused variable tmp%79#0
debug: Removing unused variable tmp%82#0
debug: Removing unused variable tmp%85#0
debug: Removing unused variable tmp%95#0
debug: Removing unused variable tmp%100#0
debug: Removing unused variable tmp%105#0
debug: Removing unused variable tmp%110#0
debug: Removing unused variable tmp%115#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0: // L5 from goto 0u ? block@1 : block@2 to goto block@2
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@3: // ternary_merge_L26 from goto 0u ? block@4 : block@5 to goto block@5
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@6: // ternary_merge_L27 from goto 0u ? block@7 : block@8 to goto block@8
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@9: // ternary_merge_L28 from goto 0u ? block@10 : block@11 to goto block@11
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@12: // ternary_merge_L29 from goto 0u ? block@13 : block@14 to goto block@14
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@18: // ternary_merge_L31 from goto 0u ? block@19 : block@20 to goto block@20
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@21: // ternary_merge_L33 from goto 0u ? block@22 : block@23 to goto block@23
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@24: // ternary_merge_L34 from goto 0u ? block@25 : block@26 to goto block@26
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@27: // ternary_merge_L35 from goto 0u ? block@28 : block@29 to goto block@29
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@30: // ternary_merge_L36 from goto 0u ? block@31 : block@32 to goto block@32
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // ternary_false_L26 with block@0: // L5 in block@3: // ternary_merge_L26
debug: Merged linear block@2: // ternary_false_L26 into block@0: // L5
debug: Replaced predecessor block@5: // ternary_false_L27 with block@3: // ternary_merge_L26 in block@6: // ternary_merge_L27
debug: Merged linear block@5: // ternary_false_L27 into block@3: // ternary_merge_L26
debug: Replaced predecessor block@8: // ternary_false_L28 with block@6: // ternary_merge_L27 in block@9: // ternary_merge_L28
debug: Merged linear block@8: // ternary_false_L28 into block@6: // ternary_merge_L27
debug: Replaced predecessor block@11: // ternary_false_L29 with block@9: // ternary_merge_L28 in block@12: // ternary_merge_L29
debug: Merged linear block@11: // ternary_false_L29 into block@9: // ternary_merge_L28
debug: Replaced predecessor block@14: // ternary_false_L30 with block@12: // ternary_merge_L29 in block@15: // ternary_merge_L30
debug: Merged linear block@14: // ternary_false_L30 into block@12: // ternary_merge_L29
debug: Replaced predecessor block@20: // ternary_false_L33 with block@18: // ternary_merge_L31 in block@21: // ternary_merge_L33
debug: Merged linear block@20: // ternary_false_L33 into block@18: // ternary_merge_L31
debug: Replaced predecessor block@23: // ternary_false_L34 with block@21: // ternary_merge_L33 in block@24: // ternary_merge_L34
debug: Merged linear block@23: // ternary_false_L34 into block@21: // ternary_merge_L33
debug: Replaced predecessor block@26: // ternary_false_L35 with block@24: // ternary_merge_L34 in block@27: // ternary_merge_L35
debug: Merged linear block@26: // ternary_false_L35 into block@24: // ternary_merge_L34
debug: Replaced predecessor block@29: // ternary_false_L36 with block@27: // ternary_merge_L35 in block@30: // ternary_merge_L36
debug: Merged linear block@29: // ternary_false_L36 into block@27: // ternary_merge_L35
debug: Replaced predecessor block@32: // ternary_false_L37 with block@30: // ternary_merge_L36 in block@33: // ternary_merge_L37
debug: Merged linear block@32: // ternary_false_L37 into block@30: // ternary_merge_L36
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@1: // ternary_true_L26, block@4: // ternary_true_L27, block@7: // ternary_true_L28, block@10: // ternary_true_L29, block@13: // ternary_true_L30, block@19: // ternary_true_L33, block@22: // ternary_true_L34, block@25: // ternary_true_L35, block@28: // ternary_true_L36, block@31: // ternary_true_L37
debug: Removed unreachable predecessors from block@3: // ternary_merge_L26
debug: Removed unreachable predecessors from block@6: // ternary_merge_L27
debug: Removed unreachable predecessors from block@9: // ternary_merge_L28
debug: Removed unreachable predecessors from block@12: // ternary_merge_L29
debug: Removed unreachable predecessors from block@15: // ternary_merge_L30
debug: Removed unreachable predecessors from block@21: // ternary_merge_L33
debug: Removed unreachable predecessors from block@24: // ternary_merge_L34
debug: Removed unreachable predecessors from block@27: // ternary_merge_L35
debug: Removed unreachable predecessors from block@30: // ternary_merge_L36
debug: Removed unreachable predecessors from block@33: // ternary_merge_L37
debug: Removing unreachable phi arguments: ternary_result%0#0 <- block@1
debug: Replacing trivial Phi node: let ternary_result%0#2: bool = φ(ternary_result%0#1 <- block@0) (ternary_result%0#2) with ternary_result%0#1
debug: Deleting Phi assignment: let ternary_result%0#2: bool = φ(ternary_result%0#1 <- block@0)
debug: Removing unreachable phi arguments: ternary_result%1#0 <- block@4
debug: Replacing trivial Phi node: let ternary_result%1#2: bool = φ(ternary_result%1#1 <- block@3) (ternary_result%1#2) with ternary_result%1#1
debug: Deleting Phi assignment: let ternary_result%1#2: bool = φ(ternary_result%1#1 <- block@3)
debug: Removing unreachable phi arguments: ternary_result%2#0 <- block@7
debug: Replacing trivial Phi node: let ternary_result%2#2: bool = φ(ternary_result%2#1 <- block@6) (ternary_result%2#2) with ternary_result%2#1
debug: Deleting Phi assignment: let ternary_result%2#2: bool = φ(ternary_result%2#1 <- block@6)
debug: Removing unreachable phi arguments: ternary_result%3#0 <- block@10
debug: Replacing trivial Phi node: let ternary_result%3#2: bool = φ(ternary_result%3#1 <- block@9) (ternary_result%3#2) with ternary_result%3#1
debug: Deleting Phi assignment: let ternary_result%3#2: bool = φ(ternary_result%3#1 <- block@9)
debug: Removing unreachable phi arguments: ternary_result%4#0 <- block@13
debug: Replacing trivial Phi node: let ternary_result%4#2: bool = φ(ternary_result%4#1 <- block@12) (ternary_result%4#2) with ternary_result%4#1
debug: Deleting Phi assignment: let ternary_result%4#2: bool = φ(ternary_result%4#1 <- block@12)
debug: Removing unreachable phi arguments: ternary_result%6#0 <- block@19
debug: Replacing trivial Phi node: let ternary_result%6#2: bool = φ(ternary_result%6#1 <- block@18) (ternary_result%6#2) with ternary_result%6#1
debug: Deleting Phi assignment: let ternary_result%6#2: bool = φ(ternary_result%6#1 <- block@18)
debug: Removing unreachable phi arguments: ternary_result%7#0 <- block@22
debug: Replacing trivial Phi node: let ternary_result%7#2: bool = φ(ternary_result%7#1 <- block@21) (ternary_result%7#2) with ternary_result%7#1
debug: Deleting Phi assignment: let ternary_result%7#2: bool = φ(ternary_result%7#1 <- block@21)
debug: Removing unreachable phi arguments: ternary_result%8#0 <- block@25
debug: Replacing trivial Phi node: let ternary_result%8#2: bool = φ(ternary_result%8#1 <- block@24) (ternary_result%8#2) with ternary_result%8#1
debug: Deleting Phi assignment: let ternary_result%8#2: bool = φ(ternary_result%8#1 <- block@24)
debug: Removing unreachable phi arguments: ternary_result%9#0 <- block@28
debug: Replacing trivial Phi node: let ternary_result%9#2: bool = φ(ternary_result%9#1 <- block@27) (ternary_result%9#2) with ternary_result%9#1
debug: Deleting Phi assignment: let ternary_result%9#2: bool = φ(ternary_result%9#1 <- block@27)
debug: Removing unreachable phi arguments: ternary_result%10#0 <- block@31
debug: Replacing trivial Phi node: let ternary_result%10#2: bool = φ(ternary_result%10#1 <- block@30) (ternary_result%10#2) with ternary_result%10#1
debug: Deleting Phi assignment: let ternary_result%10#2: bool = φ(ternary_result%10#1 <- block@30)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_bytes.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.string.StringContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/StringContract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.stubs.string.StringContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (! 0u) to 1u
debug: Simplified (== "abcdefg" "abcdefg!") to 0u
debug: Simplified (== "" "") to 1u
debug: Simplified (== "g" "g") to 1u
debug: Simplified (== "fg" "fg") to 1u
debug: Simplified (== "g" "f") to 0u
debug: Simplified (== "abcdefg" "abcdefg") to 1u
debug: Simplified (concat "d.e." "f") to "d.e.f"
debug: Simplified (concat "d.e." "f") to "d.e.f"
debug: Simplified (concat "d.e." "f") to "d.e.f"
debug: Simplified (concat "d.e." "f") to "d.e.f"
debug: Simplified (== "def" "def") to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%8#0
debug: Removing unused variable ternary_result%0#1
debug: Removing unused variable ternary_result%1#1
debug: Removing unused variable ternary_result%2#1
debug: Removing unused variable ternary_result%3#1
debug: Removing unused variable ternary_result%4#1
debug: Removing unused variable tmp%40#0
debug: Removing unused variable tmp%42#0
debug: Removing unused variable tmp%51#0
debug: Removing unused variable tmp%59#0
debug: Removing unused variable tmp%67#0
debug: Removing unused variable tmp%75#0
debug: Removing unused variable tmp%84#0
debug: Removing unused variable tmp%87#0
debug: Removing unused variable tmp%96#0
debug: Removing unused variable tmp%101#0
debug: Removing unused variable tmp%106#0
debug: Removing unused variable tmp%111#0
debug: Removing unused variable tmp%117#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@15: // ternary_merge_L30 from goto 1u ? block@16 : block@17 to goto block@16
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@33: // ternary_merge_L37 from goto 1u ? block@34 : block@35 to goto block@34
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // ternary_merge_L26 with block@0: // L5 in block@6: // ternary_merge_L27
debug: Merged linear block@3: // ternary_merge_L26 into block@0: // L5
debug: Replaced predecessor block@6: // ternary_merge_L27 with block@0: // L5 in block@9: // ternary_merge_L28
debug: Merged linear block@6: // ternary_merge_L27 into block@0: // L5
debug: Replaced predecessor block@9: // ternary_merge_L28 with block@0: // L5 in block@12: // ternary_merge_L29
debug: Merged linear block@9: // ternary_merge_L28 into block@0: // L5
debug: Replaced predecessor block@12: // ternary_merge_L29 with block@0: // L5 in block@15: // ternary_merge_L30
debug: Merged linear block@12: // ternary_merge_L29 into block@0: // L5
debug: Replaced predecessor block@15: // ternary_merge_L30 with block@0: // L5 in block@16: // ternary_true_L31
debug: Merged linear block@15: // ternary_merge_L30 into block@0: // L5
debug: Replaced predecessor block@16: // ternary_true_L31 with block@0: // L5 in block@18: // ternary_merge_L31
debug: Merged linear block@16: // ternary_true_L31 into block@0: // L5
debug: Replaced predecessor block@21: // ternary_merge_L33 with block@18: // ternary_merge_L31 in block@24: // ternary_merge_L34
debug: Merged linear block@21: // ternary_merge_L33 into block@18: // ternary_merge_L31
debug: Replaced predecessor block@24: // ternary_merge_L34 with block@18: // ternary_merge_L31 in block@27: // ternary_merge_L35
debug: Merged linear block@24: // ternary_merge_L34 into block@18: // ternary_merge_L31
debug: Replaced predecessor block@27: // ternary_merge_L35 with block@18: // ternary_merge_L31 in block@30: // ternary_merge_L36
debug: Merged linear block@27: // ternary_merge_L35 into block@18: // ternary_merge_L31
debug: Replaced predecessor block@30: // ternary_merge_L36 with block@18: // ternary_merge_L31 in block@33: // ternary_merge_L37
debug: Merged linear block@30: // ternary_merge_L36 into block@18: // ternary_merge_L31
debug: Replaced predecessor block@33: // ternary_merge_L37 with block@18: // ternary_merge_L31 in block@34: // ternary_true_L38
debug: Merged linear block@33: // ternary_merge_L37 into block@18: // ternary_merge_L31
debug: Replaced predecessor block@34: // ternary_true_L38 with block@18: // ternary_merge_L31 in block@36: // ternary_merge_L38
debug: Merged linear block@34: // ternary_true_L38 into block@18: // ternary_merge_L31
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@17: // ternary_false_L31, block@35: // ternary_false_L38
debug: Removed unreachable predecessors from block@18: // ternary_merge_L31
debug: Removed unreachable predecessors from block@36: // ternary_merge_L38
debug: Removing unreachable phi arguments: ternary_result%5#1 <- block@17
debug: Replacing trivial Phi node: let ternary_result%5#2: bool = φ(ternary_result%5#0 <- block@0) (ternary_result%5#2) with ternary_result%5#0
debug: Deleting Phi assignment: let ternary_result%5#2: bool = φ(ternary_result%5#0 <- block@0)
debug: Removing unreachable phi arguments: ternary_result%11#1 <- block@35
debug: Replacing trivial Phi node: let ternary_result%11#2: bool = φ(ternary_result%11#0 <- block@18) (ternary_result%11#2) with ternary_result%11#0
debug: Deleting Phi assignment: let ternary_result%11#2: bool = φ(ternary_result%11#0 <- block@18)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_bytes.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.string.StringContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/StringContract.ssa.opt_pass_4.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine test_cases.stubs.string.StringContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (== "d.e.f" "d.e.f") to 1u
debug: Simplified (== "d.e.f" "d.e.f") to 1u
debug: Simplified (== "d.e.f" "d.e.f") to 1u
debug: Simplified (== "d.e.f" "d.e.f") to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%32#0
debug: Removing unused variable ternary_result%5#0
debug: Removing unused variable ternary_result%6#1
debug: Removing unused variable ternary_result%7#1
debug: Removing unused variable ternary_result%8#1
debug: Removing unused variable ternary_result%9#1
debug: Removing unused variable ternary_result%10#1
debug: Removing unused variable ternary_result%11#0
debug: Removing unused variable tmp%97#0
debug: Removing unused variable tmp%102#0
debug: Removing unused variable tmp%107#0
debug: Removing unused variable tmp%112#0
debug: Removing unused variable tmp%118#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@18: // ternary_merge_L31 with block@0: // L5 in block@36: // ternary_merge_L38
debug: Merged linear block@18: // ternary_merge_L31 into block@0: // L5
debug: Replaced predecessor block@36: // ternary_merge_L38 with block@0: // L5 in block@38: // ternary_false_L49
debug: Replaced predecessor block@36: // ternary_merge_L38 with block@0: // L5 in block@37: // ternary_true_L49
debug: Merged linear block@36: // ternary_merge_L38 into block@0: // L5
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_bytes.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.string.StringContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/StringContract.ssa.opt_pass_5.ir
debug: Begin optimization pass 6/100
debug: Optimizing subroutine test_cases.stubs.string.StringContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%43#0
debug: Removing unused variable tmp%76#0
debug: Removing unused variable tmp%93#0
debug: Removing unused variable tmp%98#0
debug: Removing unused variable tmp%103#0
debug: Removing unused variable tmp%108#0
debug: Removing unused variable tmp%113#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_bytes.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.string.StringContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/StringContract.ssa.opt_pass_6.ir
debug: Begin optimization pass 7/100
debug: Optimizing subroutine test_cases.stubs.string.StringContract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine algopy_lib_bytes.is_substring
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.string.StringContract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 7, ending loop
debug: Removing Phis from test_cases.stubs.string.StringContract.approval_program
debug: Removing Phis from algopy_lib_bytes.is_substring
debug: Removing Phis from test_cases.stubs.string.StringContract.clear_state_program
debug: Coalescing local variables in test_cases.stubs.string.StringContract.approval_program using strategy RootOperandGrouping
debug: Coalescing ternary_result%12#0 with [ternary_result%12#5, ternary_result%12#1, ternary_result%12#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in algopy_lib_bytes.is_substring using strategy RootOperandGrouping
debug: Coalescing start#0 with [start#5, start#1, start#2]
debug: Coalescing resulted in 9 replacement/s
debug: Coalescing local variables in test_cases.stubs.string.StringContract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.string.StringContract.approval_program
debug: Sequentializing parallel copies in algopy_lib_bytes.is_substring
debug: Sequentializing parallel copies in test_cases.stubs.string.StringContract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to stubs/out/StringContract.destructured.ir
debug: Output IR to stubs/out/Uint64Contract.ssa.ir
info: Optimizing test_cases.stubs.uint64.Uint64Contract at level 1
debug: Begin optimization pass 1/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (! 0u) to 1u
debug: Simplified (< 1u 5u) to 1u
debug: Simplified (> 5u 1u) to 1u
debug: Simplified (<= 1u 1u) to 1u
debug: Simplified (>= 5u 5u) to 1u
debug: Simplified (+ 1u 5u) to 6u
debug: Simplified (+ 5u 60u) to 65u
debug: Simplified (- 60u 5u) to 55u
debug: Simplified (/ 60u 5u) to 12u
debug: Simplified (* 5u 60u) to 300u
debug: Simplified (exp 5u 3u) to 125u
debug: Simplified (shl 1u 2u) to 4u
debug: Simplified (shr 5u 3u) to 0u
debug: Simplified (== tmp%23#0 0u) to (! tmp%23#0)
debug: Simplified (~ 1u) to 18446744073709551614u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== ternary_result%1#2 0u) to (! ternary_result%1#2)
debug: Simplified (== ternary_result%2#2 0u) to (! ternary_result%2#2)
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (& 1u 5u) to 1u
debug: Simplified (| 60u 5u) to 61u
debug: Simplified (^ 60u 5u) to 57u
debug: Simplified (& 254u 31u) to 30u
debug: Simplified (sqrt 17u) to 4u
debug: Simplified (sqrt 16u) to 4u
debug: Simplified (== 1u 1u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable ternary_result%0#2
debug: Removing unused variable ternary_result%3#2
debug: Removing unused variable ternary_result%4#2
debug: Removing unused variable ternary_result%7#2
debug: Removing unused variable zero#0
debug: Removing unused variable one#0
debug: Removing unused variable two#0
debug: Removing unused variable five#0
debug: Removing unused variable three#0
debug: Removing unused variable sixty#0
debug: Removing unused variable reinterpret_bool%0#0
debug: Removing unused variable reinterpret_bool%1#0
debug: Removing unused variable c#0
debug: Removing unused variable true#0
debug: Removing unused variable false#0
debug: Removing unused variable reinterpret_bool%2#0
debug: Removing unused variable reinterpret_bool%3#0
debug: Removing unused variable reinterpret_bool%4#0
debug: Removing unused variable reinterpret_bool%5#0
debug: Removing unused variable reinterpret_bool%6#0
debug: Removing unused variable reinterpret_bool%7#0
debug: Removing unused variable reinterpret_bool%8#0
debug: Removing unused variable reinterpret_bool%9#0
debug: Removing unused variable y#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@0: // L5 from goto 1u ? block@2 : block@1 to goto block@2
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@3: // ternary_merge_L55 from goto 1u ? block@5 : block@4 to goto block@5
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@6: // ternary_merge_L56 from goto 0u ? block@8 : block@7 to goto block@7
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@9: // ternary_merge_L57 from goto 0u ? block@11 : block@10 to goto block@10
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@12: // ternary_merge_L58 from goto 1u ? block@13 : block@14 to goto block@13
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@15: // ternary_merge_L59 from goto 1u ? block@16 : block@17 to goto block@16
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@18: // ternary_merge_L60 from goto 0u ? block@19 : block@20 to goto block@20
debug: simplifying conditional branch with a constant into a goto
debug: simplified terminator of block@21: // ternary_merge_L61 from goto 0u ? block@22 : block@23 to goto block@23
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@2: // ternary_false_L55 with block@0: // L5 in block@3: // ternary_merge_L55
debug: Merged linear block@2: // ternary_false_L55 into block@0: // L5
debug: Replaced predecessor block@5: // ternary_false_L56 with block@3: // ternary_merge_L55 in block@6: // ternary_merge_L56
debug: Merged linear block@5: // ternary_false_L56 into block@3: // ternary_merge_L55
debug: Replaced predecessor block@7: // ternary_true_L57 with block@6: // ternary_merge_L56 in block@9: // ternary_merge_L57
debug: Merged linear block@7: // ternary_true_L57 into block@6: // ternary_merge_L56
debug: Replaced predecessor block@10: // ternary_true_L58 with block@9: // ternary_merge_L57 in block@12: // ternary_merge_L58
debug: Merged linear block@10: // ternary_true_L58 into block@9: // ternary_merge_L57
debug: Replaced predecessor block@13: // ternary_true_L59 with block@12: // ternary_merge_L58 in block@15: // ternary_merge_L59
debug: Merged linear block@13: // ternary_true_L59 into block@12: // ternary_merge_L58
debug: Replaced predecessor block@16: // ternary_true_L60 with block@15: // ternary_merge_L59 in block@18: // ternary_merge_L60
debug: Merged linear block@16: // ternary_true_L60 into block@15: // ternary_merge_L59
debug: Replaced predecessor block@20: // ternary_false_L61 with block@18: // ternary_merge_L60 in block@21: // ternary_merge_L61
debug: Merged linear block@20: // ternary_false_L61 into block@18: // ternary_merge_L60
debug: Replaced predecessor block@23: // ternary_false_L62 with block@21: // ternary_merge_L61 in block@24: // ternary_merge_L62
debug: Merged linear block@23: // ternary_false_L62 into block@21: // ternary_merge_L61
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Removing unreachable blocks: block@1: // ternary_true_L55, block@4: // ternary_true_L56, block@8: // ternary_false_L57, block@11: // ternary_false_L58, block@14: // ternary_false_L59, block@17: // ternary_false_L60, block@19: // ternary_true_L61, block@22: // ternary_true_L62
debug: Removed unreachable predecessors from block@3: // ternary_merge_L55
debug: Removed unreachable predecessors from block@6: // ternary_merge_L56
debug: Removed unreachable predecessors from block@9: // ternary_merge_L57
debug: Removed unreachable predecessors from block@12: // ternary_merge_L58
debug: Removed unreachable predecessors from block@15: // ternary_merge_L59
debug: Removed unreachable predecessors from block@18: // ternary_merge_L60
debug: Removed unreachable predecessors from block@21: // ternary_merge_L61
debug: Removed unreachable predecessors from block@24: // ternary_merge_L62
debug: Removing unreachable phi arguments: ternary_result%1#0 <- block@4
debug: Replacing trivial Phi node: let ternary_result%1#2: uint64 = φ(ternary_result%1#1 <- block@3) (ternary_result%1#2) with ternary_result%1#1
debug: Deleting Phi assignment: let ternary_result%1#2: uint64 = φ(ternary_result%1#1 <- block@3)
debug: Removing unreachable phi arguments: ternary_result%2#1 <- block@8
debug: Replacing trivial Phi node: let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@6) (ternary_result%2#2) with ternary_result%2#0
debug: Deleting Phi assignment: let ternary_result%2#2: uint64 = φ(ternary_result%2#0 <- block@6)
debug: Removing unreachable phi arguments: ternary_result%5#1 <- block@17
debug: Replacing trivial Phi node: let ternary_result%5#2: uint64 = φ(ternary_result%5#0 <- block@15) (ternary_result%5#2) with ternary_result%5#0
debug: Deleting Phi assignment: let ternary_result%5#2: uint64 = φ(ternary_result%5#0 <- block@15)
debug: Removing unreachable phi arguments: ternary_result%6#0 <- block@19
debug: Replacing trivial Phi node: let ternary_result%6#2: uint64 = φ(ternary_result%6#1 <- block@18) (ternary_result%6#2) with ternary_result%6#1
debug: Deleting Phi assignment: let ternary_result%6#2: uint64 = φ(ternary_result%6#1 <- block@18)
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Splitting parallel copies prior to optimization
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 0u 0u) to 1u
debug: Simplified (== 0u 0u) to (! 0u)
debug: Simplified (! 0u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable reinterpret_uint64%0#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/Uint64Contract.ssa.opt_pass_1.ir
debug: Begin optimization pass 2/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 6u 6u) to 1u
debug: Simplified (== 65u 65u) to 1u
debug: Simplified (== 55u 55u) to 1u
debug: Simplified (- 65u 5u) to 60u
debug: Simplified (== 12u 12u) to 1u
debug: Simplified (== 300u 300u) to 1u
debug: Simplified (== 125u 125u) to 1u
debug: Simplified (== 4u 4u) to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (== 18446744073709551614u 18446744073709551614u) to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (! 0u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 1u 1u) to 1u
debug: Simplified (== 61u 61u) to 1u
debug: Simplified (== 57u 57u) to 1u
debug: Simplified (== 30u 30u) to 1u
debug: Simplified (| 30u 54u) to 62u
debug: Simplified (== 4u 4u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Removing unused variable tmp%2#0
debug: Removing unused variable tmp%3#0
debug: Removing unused variable tmp%4#0
debug: Removing unused variable tmp%5#0
debug: Removing unused variable c#1
debug: Removing unused variable tmp%8#0
debug: Removing unused variable tmp%11#0
debug: Removing unused variable tmp%14#0
debug: Removing unused variable tmp%16#0
debug: Removing unused variable tmp%19#0
debug: Removing unused variable tmp%23#0
debug: Removing unused variable tmp%25#0
debug: Removing unused variable ternary_result%0#1
debug: Removing unused variable tmp%27#0
debug: Removing unused variable ternary_result%1#1
debug: Removing unused variable ternary_result%2#0
debug: Removing unused variable ternary_result%3#0
debug: Removing unused variable tmp%30#0
debug: Removing unused variable ternary_result%4#0
debug: Removing unused variable tmp%31#0
debug: Removing unused variable ternary_result%5#0
debug: Removing unused variable ternary_result%6#1
debug: Removing unused variable ternary_result%7#1
debug: Removing unused variable tmp%34#0
debug: Removing unused variable tmp%35#0
debug: Removing unused variable tmp%37#0
debug: Removing unused variable tmp%39#0
debug: Removing unused variable y#1
debug: Removing unused variable tmp%44#0
debug: Removing unused variable tmp%45#0
debug: Removing unused variable tmp%47#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Replaced predecessor block@3: // ternary_merge_L55 with block@0: // L5 in block@6: // ternary_merge_L56
debug: Merged linear block@3: // ternary_merge_L55 into block@0: // L5
debug: Replaced predecessor block@6: // ternary_merge_L56 with block@0: // L5 in block@9: // ternary_merge_L57
debug: Merged linear block@6: // ternary_merge_L56 into block@0: // L5
debug: Replaced predecessor block@9: // ternary_merge_L57 with block@0: // L5 in block@12: // ternary_merge_L58
debug: Merged linear block@9: // ternary_merge_L57 into block@0: // L5
debug: Replaced predecessor block@12: // ternary_merge_L58 with block@0: // L5 in block@15: // ternary_merge_L59
debug: Merged linear block@12: // ternary_merge_L58 into block@0: // L5
debug: Replaced predecessor block@15: // ternary_merge_L59 with block@0: // L5 in block@18: // ternary_merge_L60
debug: Merged linear block@15: // ternary_merge_L59 into block@0: // L5
debug: Replaced predecessor block@18: // ternary_merge_L60 with block@0: // L5 in block@21: // ternary_merge_L61
debug: Merged linear block@18: // ternary_merge_L60 into block@0: // L5
debug: Replaced predecessor block@21: // ternary_merge_L61 with block@0: // L5 in block@24: // ternary_merge_L62
debug: Merged linear block@21: // ternary_merge_L61 into block@0: // L5
debug: Replaced predecessor block@24: // ternary_merge_L62 with block@0: // L5 in block@26: // ternary_false_L80
debug: Replaced predecessor block@24: // ternary_merge_L62 with block@0: // L5 in block@25: // ternary_true_L80
debug: Merged linear block@24: // ternary_merge_L62 into block@0: // L5
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%0#0
debug: Removing unused variable tmp%1#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/Uint64Contract.ssa.opt_pass_2.ir
debug: Begin optimization pass 3/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 60u 60u) to 1u
debug: Simplified (/ 60u 5u) to 12u
debug: Simplified (== 62u 62u) to 1u
debug: Simplified (^ 62u 255u) to 193u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%6#0
debug: Removing unused variable tmp%7#0
debug: Removing unused variable tmp%9#0
debug: Removing unused variable c#2
debug: Removing unused variable tmp%12#0
debug: Removing unused variable tmp%15#0
debug: Removing unused variable tmp%17#0
debug: Removing unused variable tmp%20#0
debug: Removing unused variable tmp%24#0
debug: Removing unused variable tmp%26#0
debug: Removing unused variable tmp%28#0
debug: Removing unused variable tmp%29#0
debug: Removing unused variable tmp%32#0
debug: Removing unused variable tmp%33#0
debug: Removing unused variable tmp%36#0
debug: Removing unused variable tmp%38#0
debug: Removing unused variable tmp%40#0
debug: Removing unused variable tmp%41#0
debug: Removing unused variable y#2
debug: Removing unused variable tmp%46#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/Uint64Contract.ssa.opt_pass_3.ir
debug: Begin optimization pass 4/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 12u 12u) to 1u
debug: Simplified (exp 12u 2u) to 144u
debug: Simplified (== 193u 193u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%10#0
debug: Removing unused variable c#3
debug: Removing unused variable tmp%42#0
debug: Removing unused variable y#3
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/Uint64Contract.ssa.opt_pass_4.ir
debug: Begin optimization pass 5/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 144u 144u) to 1u
debug: Simplified (shr 144u 6u) to 2u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%13#0
debug: Removing unused variable c#4
debug: Removing unused variable tmp%43#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/Uint64Contract.ssa.opt_pass_5.ir
debug: Begin optimization pass 6/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 2u 2u) to 1u
debug: Simplified (shl 2u 6u) to 128u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%18#0
debug: Removing unused variable c#5
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/Uint64Contract.ssa.opt_pass_6.ir
debug: Begin optimization pass 7/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Simplified (== 128u 128u) to 1u
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%21#0
debug: Removing unused variable c#6
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/Uint64Contract.ssa.opt_pass_7.ir
debug: Begin optimization pass 8/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Removing unused variable tmp%22#0
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Output IR to stubs/out/Uint64Contract.ssa.opt_pass_8.ir
debug: Begin optimization pass 9/100
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: Optimizing subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Optimizer: Constant Replacer
debug: Optimizer: Copy Propagation
debug: Optimizer: Intrinsic Simplifier
debug: Optimizer: Remove Unused Variables
debug: Optimizer: Inner Txn Field Replacer
debug: Optimizer: Simplify Control Ops
debug: Optimizer: Remove Linear Jump
debug: Optimizer: Remove Empty Blocks
debug: Optimizer: Remove Unreachable Blocks
debug: Optimizer: Repeated Expression Elimination
debug: No optimizations performed in pass 9, ending loop
debug: Removing Phis from test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Removing Phis from test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Coalescing local variables in test_cases.stubs.uint64.Uint64Contract.approval_program using strategy RootOperandGrouping
debug: Coalescing ternary_result%8#0 with [ternary_result%8#5, ternary_result%8#1, ternary_result%8#2]
debug: Coalescing resulted in 7 replacement/s
debug: Coalescing local variables in test_cases.stubs.uint64.Uint64Contract.clear_state_program using strategy RootOperandGrouping
debug: Coalescing resulted in 0 replacement/s
debug: Sequentializing parallel copies in test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Sequentializing parallel copies in test_cases.stubs.uint64.Uint64Contract.clear_state_program
debug: Performing post-SSA optimizations
debug: Output IR to stubs/out/Uint64Contract.destructured.ir
debug: Inserted main_block@0.ops[10]: 'store reinterpret_bool%0#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[12]: 'load reinterpret_bool%0#0' with 'load reinterpret_bool%0#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@3.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@3.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.stubs.biguint.BigUIntContract.approval_program
debug: Allocated 1 variable/s to x-stack: ternary_result%0#0
debug: shared x-stack for main_ternary_true@1 -> main_ternary_merge@3: ternary_result%0#0
debug: shared x-stack for main_ternary_false@2 -> main_ternary_merge@3: ternary_result%0#0
debug: Inserted compare_biguints_block@0.ops[3]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted compare_biguints_block@0.ops[10]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[12]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted compare_biguints_block@0.ops[17]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[19]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted compare_biguints_block@0.ops[24]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[26]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted compare_biguints_block@0.ops[31]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced compare_biguints_block@0.ops[33]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[8]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[13]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[15]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[20]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[22]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[6]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[13]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted compare_biguint_vs_uint64_block@0.ops[14]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced compare_biguint_vs_uint64_block@0.ops[21]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[6]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[8]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[13]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[15]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[20]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[22]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[6]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[13]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted compare_uint64_vs_biguint_block@0.ops[14]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced compare_uint64_vs_biguint_block@0.ops[21]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[5]: 'store reinterpret_bool%11#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[7]: 'load reinterpret_bool%11#0' with 'load reinterpret_bool%11#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@30.ops[3]: 'store tmp%42#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@30.ops[5]: 'load tmp%42#0' with 'load tmp%42#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.stubs.bytes.BytesContract.approval_program
debug: Allocated 1 variable/s to x-stack: ternary_result%9#0
debug: shared x-stack for main_ternary_true@28 -> main_ternary_merge@30: ternary_result%9#0
debug: shared x-stack for main_ternary_false@29 -> main_ternary_merge@30: ternary_result%9#0
debug: Inserted check_slicing_with_uint64_block@0.ops[16]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[18]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[21]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[23]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[27]: 'store bounded_index%0#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[28]: 'load bounded_index%0#0' with 'load bounded_index%0#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[30]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[32]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[35]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[37]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[43]: 'store tmp%4#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[45]: 'load tmp%4#0' with 'load tmp%4#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[48]: 'store tmp%5#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[50]: 'load tmp%5#0' with 'load tmp%5#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[53]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[55]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[70]: 'store bounded_index%5#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[72]: 'load bounded_index%5#0' with 'load bounded_index%5#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[85]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[87]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[90]: 'store tmp%8#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[92]: 'load tmp%8#0' with 'load tmp%8#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[116]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[118]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[121]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[123]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[2]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[5]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[12]: 'store bounded_index%0#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[15]: 'load bounded_index%0#0' with 'load bounded_index%0#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[59]: 'store length%3#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[62]: 'load length%3#0' with 'load length%3#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[69]: 'store bounded_index%4#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[72]: 'load bounded_index%4#0' with 'load bounded_index%4#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[7]: 'store is_out_of_bounds%0#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[11]: 'load is_out_of_bounds%0#0' with 'load is_out_of_bounds%0#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[65]: 'store is_out_of_bounds%4#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[69]: 'load is_out_of_bounds%4#0' with 'load is_out_of_bounds%4#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[81]: 'store end_before_start%1#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[85]: 'load end_before_start%1#0' with 'load end_before_start%1#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[87]: 'store end%1#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[91]: 'load end%1#0' with 'load end%1#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[105]: 'store is_out_of_bounds%6#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[109]: 'load is_out_of_bounds%6#0' with 'load is_out_of_bounds%6#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[115]: 'store is_out_of_bounds%7#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[119]: 'load is_out_of_bounds%7#0' with 'load is_out_of_bounds%7#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[121]: 'store bounded_index%7#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[125]: 'load bounded_index%7#0' with 'load bounded_index%7#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[6]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[11]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[65]: 'store length%3#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[70]: 'load length%3#0' with 'load length%3#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[71]: 'store length%3#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[76]: 'load length%3#0' with 'load length%3#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[78]: 'store bounded_index%4#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[83]: 'load bounded_index%4#0' with 'load bounded_index%4#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[83]: 'store bounded_index%5#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[88]: 'load bounded_index%5#0' with 'load bounded_index%5#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[85]: 'store bounded_index%4#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[90]: 'load bounded_index%4#0' with 'load bounded_index%4#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[110]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[115]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[121]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[126]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[91]: 'store bounded_index%4#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[97]: 'load bounded_index%4#0' with 'load bounded_index%4#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[117]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[122]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[12]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[19]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[19]: 'store bounded_index%0#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[32]: 'load bounded_index%0#0' with 'load bounded_index%0#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[35]: 'store bounded_index%0#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[48]: 'load bounded_index%0#0' with 'load bounded_index%0#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[123]: 'store bounded_index%6#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[138]: 'load bounded_index%6#0' with 'load bounded_index%6#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[63]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[100]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Inserted check_slicing_with_uint64_block@0.ops[21]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_slicing_with_uint64_block@0.ops[115]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[20]: 'store bounded_index%1#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[22]: 'load bounded_index%1#0' with 'load bounded_index%1#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[35]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[37]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[40]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[42]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[60]: 'store bounded_index%3#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[62]: 'load bounded_index%3#0' with 'load bounded_index%3#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[75]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[77]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[80]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[82]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[2]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[5]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[57]: 'store bounded_offset%1#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[60]: 'load bounded_offset%1#0' with 'load bounded_offset%1#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[7]: 'store is_out_of_bounds%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[11]: 'load is_out_of_bounds%0#0' with 'load is_out_of_bounds%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[17]: 'store is_out_of_bounds%1#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[21]: 'load is_out_of_bounds%1#0' with 'load is_out_of_bounds%1#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[28]: 'store end_before_start%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[32]: 'load end_before_start%0#0' with 'load end_before_start%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[34]: 'store end%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[38]: 'load end%0#0' with 'load end%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[56]: 'store is_out_of_bounds%3#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[60]: 'load is_out_of_bounds%3#0' with 'load is_out_of_bounds%3#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[72]: 'store end_before_start%1#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[76]: 'load end_before_start%1#0' with 'load end_before_start%1#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[78]: 'store end%1#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[82]: 'load end%1#0' with 'load end%1#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[6]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[11]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[17]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[22]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[28]: 'store bounded_index%1#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[33]: 'load bounded_index%1#0' with 'load bounded_index%1#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[30]: 'store bounded_index%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[35]: 'load bounded_index%0#0' with 'load bounded_index%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[59]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[64]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[65]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[70]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[76]: 'store bounded_index%3#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[81]: 'load bounded_index%3#0' with 'load bounded_index%3#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[78]: 'store bounded_index%2#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[83]: 'load bounded_index%2#0' with 'load bounded_index%2#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[12]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[17]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[37]: 'store bounded_index%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[43]: 'load bounded_index%0#0' with 'load bounded_index%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[56]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[61]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[87]: 'store bounded_index%2#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[93]: 'load bounded_index%2#0' with 'load bounded_index%2#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[15]: 'store bounded_index%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[31]: 'load bounded_index%0#0' with 'load bounded_index%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[45]: 'store bounded_index%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[59]: 'load bounded_index%0#0' with 'load bounded_index%0#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[61]: 'store bounded_index%2#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[83]: 'load bounded_index%2#0' with 'load bounded_index%2#0 from l-stack (no copy)'
debug: Inserted check_end_before_start_slicing_block@0.ops[25]: 'store length%0#0 to l-stack (copy)'
debug: Replaced check_end_before_start_slicing_block@0.ops[58]: 'load length%0#0' with 'load length%0#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[3]: 'store tmp%9#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[5]: 'load tmp%9#0' with 'load tmp%9#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[10]: 'store tmp%10#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[12]: 'load tmp%10#0' with 'load tmp%10#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[14]: 'store tmp%11#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[16]: 'load tmp%11#0' with 'load tmp%11#0 from l-stack (no copy)'
debug: Inserted main_block@0.ops[19]: 'store reinterpret_bool%2#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[21]: 'load reinterpret_bool%2#0' with 'load reinterpret_bool%2#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@39.ops[3]: 'store tmp%121#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@39.ops[5]: 'load tmp%121#0' with 'load tmp%121#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.stubs.string.StringContract.approval_program
debug: Allocated 1 variable/s to x-stack: ternary_result%12#0
debug: shared x-stack for main_ternary_true@37 -> main_ternary_merge@39: ternary_result%12#0
debug: shared x-stack for main_ternary_false@38 -> main_ternary_merge@39: ternary_result%12#0
debug: Inserted is_substring_while_top@1.ops[13]: 'store tmp%3#0 to l-stack (copy)'
debug: Replaced is_substring_while_top@1.ops[15]: 'load tmp%3#0' with 'load tmp%3#0 from l-stack (no copy)'
debug: Inserted is_substring_while_top@1.ops[2]: 'store tmp%0#0 to l-stack (copy)'
debug: Replaced is_substring_while_top@1.ops[5]: 'load tmp%0#0' with 'load tmp%0#0 from l-stack (no copy)'
debug: Inserted is_substring_while_top@1.ops[10]: 'store tmp%2#0 to l-stack (copy)'
debug: Replaced is_substring_while_top@1.ops[13]: 'load tmp%2#0' with 'load tmp%2#0 from l-stack (no copy)'
debug: Inserted is_substring_while_top@1.ops[7]: 'store tmp%1#0 to l-stack (copy)'
debug: Replaced is_substring_while_top@1.ops[13]: 'load tmp%1#0' with 'load tmp%1#0 from l-stack (no copy)'
debug: Inserted is_substring_while_body@2.ops[8]: 'store tmp%7#0 to l-stack (copy)'
debug: Replaced is_substring_while_body@2.ops[10]: 'load tmp%7#0' with 'load tmp%7#0 from l-stack (no copy)'
debug: Inserted is_substring_while_body@2.ops[4]: 'store tmp%6#0 to l-stack (copy)'
debug: Replaced is_substring_while_body@2.ops[7]: 'load tmp%6#0' with 'load tmp%6#0 from l-stack (no copy)'
debug: Found 3 edge set/s for algopy_lib_bytes.is_substring
debug: algopy_lib_bytes.is_substring f-stack entry: ['tmp%1#0']
debug: algopy_lib_bytes.is_substring f-stack on first store: ['start#0']
debug: Inserted main_block@0.ops[1]: 'store reinterpret_bool%10#0 to l-stack (copy)'
debug: Replaced main_block@0.ops[3]: 'load reinterpret_bool%10#0' with 'load reinterpret_bool%10#0 from l-stack (no copy)'
debug: Inserted main_ternary_merge@27.ops[3]: 'store tmp%48#0 to l-stack (copy)'
debug: Replaced main_ternary_merge@27.ops[5]: 'load tmp%48#0' with 'load tmp%48#0 from l-stack (no copy)'
debug: Found 2 edge set/s for test_cases.stubs.uint64.Uint64Contract.approval_program
debug: Allocated 1 variable/s to x-stack: ternary_result%8#0
debug: shared x-stack for main_ternary_true@25 -> main_ternary_merge@27: ternary_result%8#0
debug: shared x-stack for main_ternary_false@26 -> main_ternary_merge@27: ternary_result%8#0
info: Writing stubs/out/BigUIntContract.approval.teal
info: Writing stubs/out/BigUIntContract.clear.teal
info: Writing stubs/out/BytesContract.approval.teal
info: Writing stubs/out/BytesContract.clear.teal
info: Writing stubs/out/StringContract.approval.teal
info: Writing stubs/out/StringContract.clear.teal
info: Writing stubs/out/Uint64Contract.approval.teal
info: Writing stubs/out/Uint64Contract.clear.teal