{
  "version": 3,
  "sources": [
    "../uint64.py"
  ],
  "mappings": ";;;;;;;;;;AAMc;AAMC;AAAA;AAAP;AAPO;AAQA;AAAA;AAAP;AAPM;AAEC;AAOA;AAAP;AAPO;AAFD;AAUC;AAAP;AAVM;AAAA;AAWC;AAAP;AATO;AAAA;AAUA;AAAP;AAZM;AAEC;AAYA;AAAc;;AAAd;AAAP;AAZO;AAEC;AAaR;AACO;AAAK;;AAAL;AAAP;AAdQ;AAFD;AAkBA;AAAgB;;AAAhB;AAAP;AAlBO;AAmBP;AACO;AAAK;AAAL;AAAP;AAlBQ;AAFD;AAsBA;AAAiB;;AAAjB;AAAP;AAtBO;AAuBP;AAEO;AAAK;;AAAL;AAAP;AAzBO;AAEC;AAyBD;AAAgB;;;AAAhB;AAAP;AA3BO;AACC;;AA4BD;AAAe;;AAAf;AAAP;AAEM;;AAAN;AAEO;AAAK;;;AAAL;AAAP;AAnCM;AACA;;AAoCC;AAAc;;AAAd;AAAP;AACM;;AAAN;AACO;AAAK;;AAAL;AAAP;AACM;;AAAN;AACY;;;AAAL;AAAP;AAvCO;AACC;;AAuCD;AAAiB;AAAjB;AAAP;AA1CM;AA4CC;AAAQ;;;;;;;;;;;AAAR;AAAP;AAEO;AAEC;AAAA;AAFD;AAAA;AAEC;;AAAA;AAFD;AAEC;AAAR;AAFO;AAGC;AAAA;AAFA;AADD;AAGC;;AAAA;AAFA;AAEA;AAAR;AAFQ;AAGA;AAAA;AAJD;AACC;AAGA;;AAAA;AAHA;AAGA;AAAR;AAHQ;AAIA;AAAA;AAJA;AAAA;AAIA;;AAAA;AAJA;AAIA;AAAR;AALO;AAMC;AAAA;AAND;AAAA;AAMC;;AAAA;AAND;AAMC;AAAR;AANO;AAOC;AAAA;AANA;AADD;AAOC;;AAAA;AAPD;AAOC;AAAR;AANQ;AAOA;AAAA;AARD;AACC;AAOA;;AAAA;AARD;AAQC;AAAR;AAPQ;AAQA;AAAA;AARA;AAAA;AAQA;;AAAA;AARA;AAQA;AAAR;AAvDM;AAEC;AAuDA;AAzDD;AAyDC;AAAP;AArDQ;AAFD;AAwDA;AAAgB;;AAAhB;AAAP;AAtDQ;AAFD;AAyDA;AAAgB;;AAAhB;AAAP;AAEI;;;AACC;;AAAL;AACO;AAAK;;AAAL;AAAP;AACK;;AAAL;AACO;AAAK;;AAAL;AAAP;AACK;;;AAAL;AACY;;;AAAL;AAAP;AAEe;;AAAR;AAA+B;;AAAR;AAAvB;AAAP;AArEM;AAAA;AAuEC;AAAP;AAEmB;;AAAA;AAAA;AAAZ;AAAA;AAAO;;AAAA;AAAiC;AAAjC;AAAd;AAEO;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "test_cases.stubs.uint64.Uint64Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 5 60"
    },
    "7": {
      "op": "b block@0"
    },
    "10": {
      "block": "block@0",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "11": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "1"
      ],
      "stack_out": [
        "1",
        "0"
      ]
    },
    "12": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "13": {
      "error": "Any non-zero number should be Truthy",
      "op": "assert // Any non-zero number should be Truthy",
      "stack_out": []
    },
    "14": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "15": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "16": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "17": {
      "error": "Zero should beFalsy",
      "op": "assert // Zero should beFalsy",
      "stack_out": []
    },
    "18": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "19": {
      "op": "intc_2 // 5",
      "defined_out": [
        "1",
        "5"
      ],
      "stack_out": [
        "1",
        "5"
      ]
    },
    "20": {
      "op": "<",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "21": {
      "op": "assert",
      "stack_out": []
    },
    "22": {
      "op": "intc_2 // 5",
      "stack_out": [
        "5"
      ]
    },
    "23": {
      "op": "intc_0 // 1",
      "stack_out": [
        "5",
        "1"
      ]
    },
    "24": {
      "op": ">",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "25": {
      "op": "assert",
      "stack_out": []
    },
    "26": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "27": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "28": {
      "op": "<=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "29": {
      "op": "assert",
      "stack_out": []
    },
    "30": {
      "op": "intc_2 // 5",
      "stack_out": [
        "5"
      ]
    },
    "31": {
      "op": "intc_2 // 5",
      "stack_out": [
        "5",
        "5"
      ]
    },
    "32": {
      "op": ">=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "33": {
      "op": "assert",
      "stack_out": []
    },
    "34": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "35": {
      "op": "intc_2 // 5",
      "stack_out": [
        "1",
        "5"
      ]
    },
    "36": {
      "op": "+",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "37": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "6"
      ]
    },
    "39": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "40": {
      "op": "assert",
      "stack_out": []
    },
    "41": {
      "op": "intc_2 // 5",
      "stack_out": [
        "5"
      ]
    },
    "42": {
      "op": "intc_3 // 60",
      "defined_out": [
        "5",
        "60"
      ],
      "stack_out": [
        "5",
        "60"
      ]
    },
    "43": {
      "op": "+",
      "defined_out": [
        "c#1"
      ],
      "stack_out": [
        "c#1"
      ]
    },
    "44": {
      "op": "dup",
      "defined_out": [
        "c#1",
        "c#1 (copy)"
      ],
      "stack_out": [
        "c#1",
        "c#1 (copy)"
      ]
    },
    "45": {
      "op": "pushint 65 // 65",
      "defined_out": [
        "65",
        "c#1",
        "c#1 (copy)"
      ],
      "stack_out": [
        "c#1",
        "c#1 (copy)",
        "65"
      ]
    },
    "47": {
      "op": "==",
      "defined_out": [
        "c#1",
        "tmp%9#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%9#0"
      ]
    },
    "48": {
      "op": "assert",
      "stack_out": [
        "c#1"
      ]
    },
    "49": {
      "op": "intc_3 // 60",
      "stack_out": [
        "c#1",
        "60"
      ]
    },
    "50": {
      "op": "intc_2 // 5",
      "stack_out": [
        "c#1",
        "60",
        "5"
      ]
    },
    "51": {
      "op": "-",
      "defined_out": [
        "c#1",
        "tmp%10#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%10#0"
      ]
    },
    "52": {
      "op": "pushint 55 // 55",
      "defined_out": [
        "55",
        "c#1",
        "tmp%10#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%10#0",
        "55"
      ]
    },
    "54": {
      "op": "==",
      "defined_out": [
        "c#1",
        "tmp%11#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%11#0"
      ]
    },
    "55": {
      "op": "assert",
      "stack_out": [
        "c#1"
      ]
    },
    "56": {
      "op": "intc_2 // 5",
      "stack_out": [
        "c#1",
        "5"
      ]
    },
    "57": {
      "op": "-",
      "defined_out": [
        "c#1"
      ],
      "stack_out": [
        "c#1"
      ]
    },
    "58": {
      "op": "dup",
      "stack_out": [
        "c#1",
        "c#1 (copy)"
      ]
    },
    "59": {
      "op": "intc_3 // 60",
      "stack_out": [
        "c#1",
        "c#1 (copy)",
        "60"
      ]
    },
    "60": {
      "op": "==",
      "defined_out": [
        "c#1",
        "tmp%13#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%13#0"
      ]
    },
    "61": {
      "op": "assert",
      "stack_out": [
        "c#1"
      ]
    },
    "62": {
      "op": "intc_3 // 60",
      "stack_out": [
        "c#1",
        "60"
      ]
    },
    "63": {
      "op": "intc_2 // 5",
      "stack_out": [
        "c#1",
        "60",
        "5"
      ]
    },
    "64": {
      "op": "/",
      "defined_out": [
        "c#1",
        "tmp%14#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%14#0"
      ]
    },
    "65": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "c#1",
        "tmp%14#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%14#0",
        "12"
      ]
    },
    "67": {
      "op": "==",
      "defined_out": [
        "c#1",
        "tmp%15#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%15#0"
      ]
    },
    "68": {
      "op": "assert",
      "stack_out": [
        "c#1"
      ]
    },
    "69": {
      "op": "intc_2 // 5",
      "stack_out": [
        "c#1",
        "5"
      ]
    },
    "70": {
      "op": "/",
      "defined_out": [
        "c#1"
      ],
      "stack_out": [
        "c#1"
      ]
    },
    "71": {
      "op": "dup",
      "stack_out": [
        "c#1",
        "c#1 (copy)"
      ]
    },
    "72": {
      "op": "pushint 12 // 12",
      "stack_out": [
        "c#1",
        "c#1 (copy)",
        "12"
      ]
    },
    "74": {
      "op": "==",
      "defined_out": [
        "c#1",
        "tmp%17#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%17#0"
      ]
    },
    "75": {
      "op": "assert",
      "stack_out": [
        "c#1"
      ]
    },
    "76": {
      "op": "intc_2 // 5",
      "stack_out": [
        "c#1",
        "5"
      ]
    },
    "77": {
      "op": "intc_3 // 60",
      "stack_out": [
        "c#1",
        "5",
        "60"
      ]
    },
    "78": {
      "op": "*",
      "defined_out": [
        "c#1",
        "tmp%18#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%18#0"
      ]
    },
    "79": {
      "op": "pushint 300 // 300",
      "defined_out": [
        "300",
        "c#1",
        "tmp%18#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%18#0",
        "300"
      ]
    },
    "82": {
      "op": "==",
      "defined_out": [
        "c#1",
        "tmp%19#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%19#0"
      ]
    },
    "83": {
      "op": "assert",
      "stack_out": [
        "c#1"
      ]
    },
    "84": {
      "op": "intc_2 // 5",
      "stack_out": [
        "c#1",
        "5"
      ]
    },
    "85": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "5",
        "c#1"
      ],
      "stack_out": [
        "c#1",
        "5",
        "3"
      ]
    },
    "87": {
      "op": "exp",
      "defined_out": [
        "c#1",
        "tmp%20#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%20#0"
      ]
    },
    "88": {
      "op": "pushint 125 // 125",
      "defined_out": [
        "125",
        "c#1",
        "tmp%20#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%20#0",
        "125"
      ]
    },
    "90": {
      "op": "==",
      "defined_out": [
        "c#1",
        "tmp%21#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%21#0"
      ]
    },
    "91": {
      "op": "assert",
      "stack_out": [
        "c#1"
      ]
    },
    "92": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "c#1"
      ],
      "stack_out": [
        "c#1",
        "2"
      ]
    },
    "94": {
      "op": "exp",
      "defined_out": [
        "c#1"
      ],
      "stack_out": [
        "c#1"
      ]
    },
    "95": {
      "op": "dup",
      "stack_out": [
        "c#1",
        "c#1 (copy)"
      ]
    },
    "96": {
      "op": "pushint 144 // 144",
      "defined_out": [
        "144",
        "c#1",
        "c#1 (copy)"
      ],
      "stack_out": [
        "c#1",
        "c#1 (copy)",
        "144"
      ]
    },
    "99": {
      "op": "==",
      "defined_out": [
        "c#1",
        "tmp%23#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%23#0"
      ]
    },
    "100": {
      "op": "assert",
      "stack_out": [
        "c#1"
      ]
    },
    "101": {
      "op": "intc_0 // 1",
      "stack_out": [
        "c#1",
        "1"
      ]
    },
    "102": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "c#1",
        "1",
        "2"
      ]
    },
    "104": {
      "op": "shl",
      "defined_out": [
        "c#1",
        "tmp%24#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%24#0"
      ]
    },
    "105": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "c#1",
        "tmp%24#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%24#0",
        "4"
      ]
    },
    "107": {
      "op": "==",
      "defined_out": [
        "c#1",
        "tmp%25#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%25#0"
      ]
    },
    "108": {
      "op": "assert",
      "stack_out": [
        "c#1"
      ]
    },
    "109": {
      "op": "pushint 6 // 6",
      "stack_out": [
        "c#1",
        "6"
      ]
    },
    "111": {
      "op": "shr",
      "defined_out": [
        "c#1"
      ],
      "stack_out": [
        "c#1"
      ]
    },
    "112": {
      "op": "dup",
      "stack_out": [
        "c#1",
        "c#1 (copy)"
      ]
    },
    "113": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "c#1",
        "c#1 (copy)",
        "2"
      ]
    },
    "115": {
      "op": "==",
      "defined_out": [
        "c#1",
        "tmp%27#0"
      ],
      "stack_out": [
        "c#1",
        "tmp%27#0"
      ]
    },
    "116": {
      "op": "assert",
      "stack_out": [
        "c#1"
      ]
    },
    "117": {
      "op": "pushint 6 // 6",
      "stack_out": [
        "c#1",
        "6"
      ]
    },
    "119": {
      "op": "shl",
      "defined_out": [
        "c#1"
      ],
      "stack_out": [
        "c#1"
      ]
    },
    "120": {
      "op": "pushint 128 // 128",
      "defined_out": [
        "128",
        "c#1"
      ],
      "stack_out": [
        "c#1",
        "128"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "124": {
      "op": "assert",
      "stack_out": []
    },
    "125": {
      "op": "intc_2 // 5",
      "stack_out": [
        "5"
      ]
    },
    "126": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "5",
        "3"
      ]
    },
    "128": {
      "op": "shr",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "129": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%30#0",
        "0"
      ]
    },
    "130": {
      "op": "==",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "131": {
      "op": "assert",
      "stack_out": []
    },
    "132": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "133": {
      "op": "~",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "134": {
      "op": "pushint 18446744073709551614 // 18446744073709551614",
      "defined_out": [
        "18446744073709551614",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "18446744073709551614"
      ]
    },
    "145": {
      "op": "==",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "146": {
      "op": "assert",
      "stack_out": []
    },
    "147": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "148": {
      "op": "intc_1 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "149": {
      "op": "==",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "150": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%34#0",
        "1"
      ]
    },
    "151": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%34#0",
        "1",
        "1"
      ]
    },
    "152": {
      "op": "uncover 2",
      "stack_out": [
        "1",
        "1",
        "tmp%34#0"
      ]
    },
    "154": {
      "op": "select",
      "defined_out": [
        "select%0#0"
      ],
      "stack_out": [
        "select%0#0"
      ]
    },
    "155": {
      "op": "intc_0 // 1",
      "stack_out": [
        "select%0#0",
        "1"
      ]
    },
    "156": {
      "op": "==",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "157": {
      "op": "assert",
      "stack_out": []
    },
    "158": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "159": {
      "op": "intc_1 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "160": {
      "op": "==",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "161": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%36#0",
        "0"
      ]
    },
    "162": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%36#0",
        "0",
        "1"
      ]
    },
    "163": {
      "op": "uncover 2",
      "stack_out": [
        "0",
        "1",
        "tmp%36#0"
      ]
    },
    "165": {
      "op": "select",
      "defined_out": [
        "select%1#0"
      ],
      "stack_out": [
        "select%1#0"
      ]
    },
    "166": {
      "op": "intc_1 // 0",
      "stack_out": [
        "select%1#0",
        "0"
      ]
    },
    "167": {
      "op": "==",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "168": {
      "op": "assert",
      "stack_out": []
    },
    "169": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "170": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "171": {
      "op": "==",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "172": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%38#0",
        "1"
      ]
    },
    "173": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%38#0",
        "1",
        "0"
      ]
    },
    "174": {
      "op": "uncover 2",
      "stack_out": [
        "1",
        "0",
        "tmp%38#0"
      ]
    },
    "176": {
      "op": "select",
      "defined_out": [
        "select%2#0"
      ],
      "stack_out": [
        "select%2#0"
      ]
    },
    "177": {
      "op": "intc_1 // 0",
      "stack_out": [
        "select%2#0",
        "0"
      ]
    },
    "178": {
      "op": "==",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "179": {
      "op": "assert",
      "stack_out": []
    },
    "180": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "181": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "182": {
      "op": "==",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "183": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%40#0",
        "0"
      ]
    },
    "184": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%40#0",
        "0",
        "0"
      ]
    },
    "185": {
      "op": "uncover 2",
      "stack_out": [
        "0",
        "0",
        "tmp%40#0"
      ]
    },
    "187": {
      "op": "select",
      "defined_out": [
        "select%3#0"
      ],
      "stack_out": [
        "select%3#0"
      ]
    },
    "188": {
      "op": "intc_1 // 0",
      "stack_out": [
        "select%3#0",
        "0"
      ]
    },
    "189": {
      "op": "==",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "190": {
      "op": "assert",
      "stack_out": []
    },
    "191": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "192": {
      "op": "intc_1 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "193": {
      "op": "!=",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "194": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%42#0",
        "1"
      ]
    },
    "195": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%42#0",
        "1",
        "1"
      ]
    },
    "196": {
      "op": "uncover 2",
      "stack_out": [
        "1",
        "1",
        "tmp%42#0"
      ]
    },
    "198": {
      "op": "select",
      "defined_out": [
        "select%4#0"
      ],
      "stack_out": [
        "select%4#0"
      ]
    },
    "199": {
      "op": "intc_0 // 1",
      "stack_out": [
        "select%4#0",
        "1"
      ]
    },
    "200": {
      "op": "==",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "201": {
      "op": "assert",
      "stack_out": []
    },
    "202": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "203": {
      "op": "intc_1 // 0",
      "stack_out": [
        "1",
        "0"
      ]
    },
    "204": {
      "op": "!=",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "205": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%44#0",
        "0"
      ]
    },
    "206": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%44#0",
        "0",
        "1"
      ]
    },
    "207": {
      "op": "uncover 2",
      "stack_out": [
        "0",
        "1",
        "tmp%44#0"
      ]
    },
    "209": {
      "op": "select",
      "defined_out": [
        "select%5#0"
      ],
      "stack_out": [
        "select%5#0"
      ]
    },
    "210": {
      "op": "intc_0 // 1",
      "stack_out": [
        "select%5#0",
        "1"
      ]
    },
    "211": {
      "op": "==",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "212": {
      "op": "assert",
      "stack_out": []
    },
    "213": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "214": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "215": {
      "op": "!=",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "216": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%46#0",
        "1"
      ]
    },
    "217": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%46#0",
        "1",
        "0"
      ]
    },
    "218": {
      "op": "uncover 2",
      "stack_out": [
        "1",
        "0",
        "tmp%46#0"
      ]
    },
    "220": {
      "op": "select",
      "defined_out": [
        "select%6#0"
      ],
      "stack_out": [
        "select%6#0"
      ]
    },
    "221": {
      "op": "intc_0 // 1",
      "stack_out": [
        "select%6#0",
        "1"
      ]
    },
    "222": {
      "op": "==",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "223": {
      "op": "assert",
      "stack_out": []
    },
    "224": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "225": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0",
        "0"
      ]
    },
    "226": {
      "op": "!=",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "227": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%48#0",
        "0"
      ]
    },
    "228": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%48#0",
        "0",
        "0"
      ]
    },
    "229": {
      "op": "uncover 2",
      "stack_out": [
        "0",
        "0",
        "tmp%48#0"
      ]
    },
    "231": {
      "op": "select",
      "defined_out": [
        "select%7#0"
      ],
      "stack_out": [
        "select%7#0"
      ]
    },
    "232": {
      "op": "intc_1 // 0",
      "stack_out": [
        "select%7#0",
        "0"
      ]
    },
    "233": {
      "op": "==",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "234": {
      "op": "assert",
      "stack_out": []
    },
    "235": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "236": {
      "op": "intc_2 // 5",
      "stack_out": [
        "1",
        "5"
      ]
    },
    "237": {
      "op": "&",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "238": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%50#0",
        "1"
      ]
    },
    "239": {
      "op": "==",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "240": {
      "op": "assert",
      "stack_out": []
    },
    "241": {
      "op": "intc_3 // 60",
      "stack_out": [
        "60"
      ]
    },
    "242": {
      "op": "intc_2 // 5",
      "stack_out": [
        "60",
        "5"
      ]
    },
    "243": {
      "op": "|",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "244": {
      "op": "pushint 61 // 61",
      "defined_out": [
        "61",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "61"
      ]
    },
    "246": {
      "op": "==",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "247": {
      "op": "assert",
      "stack_out": []
    },
    "248": {
      "op": "intc_3 // 60",
      "stack_out": [
        "60"
      ]
    },
    "249": {
      "op": "intc_2 // 5",
      "stack_out": [
        "60",
        "5"
      ]
    },
    "250": {
      "op": "^",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "251": {
      "op": "pushint 57 // 57",
      "defined_out": [
        "57",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "57"
      ]
    },
    "253": {
      "op": "==",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "254": {
      "op": "assert",
      "stack_out": []
    },
    "255": {
      "op": "pushint 254 // 254",
      "defined_out": [
        "254"
      ],
      "stack_out": [
        "254"
      ]
    },
    "258": {
      "op": "pushint 31 // 31",
      "defined_out": [
        "254",
        "31"
      ],
      "stack_out": [
        "254",
        "31"
      ]
    },
    "260": {
      "op": "&",
      "defined_out": [
        "y#1"
      ],
      "stack_out": [
        "y#1"
      ]
    },
    "261": {
      "op": "dup",
      "defined_out": [
        "y#1",
        "y#1 (copy)"
      ],
      "stack_out": [
        "y#1",
        "y#1 (copy)"
      ]
    },
    "262": {
      "op": "pushint 30 // 30",
      "defined_out": [
        "30",
        "y#1",
        "y#1 (copy)"
      ],
      "stack_out": [
        "y#1",
        "y#1 (copy)",
        "30"
      ]
    },
    "264": {
      "op": "==",
      "defined_out": [
        "tmp%57#0",
        "y#1"
      ],
      "stack_out": [
        "y#1",
        "tmp%57#0"
      ]
    },
    "265": {
      "op": "assert",
      "stack_out": [
        "y#1"
      ]
    },
    "266": {
      "op": "pushint 54 // 54",
      "defined_out": [
        "54",
        "y#1"
      ],
      "stack_out": [
        "y#1",
        "54"
      ]
    },
    "268": {
      "op": "|",
      "defined_out": [
        "y#1"
      ],
      "stack_out": [
        "y#1"
      ]
    },
    "269": {
      "op": "dup",
      "stack_out": [
        "y#1",
        "y#1 (copy)"
      ]
    },
    "270": {
      "op": "pushint 62 // 62",
      "defined_out": [
        "62",
        "y#1",
        "y#1 (copy)"
      ],
      "stack_out": [
        "y#1",
        "y#1 (copy)",
        "62"
      ]
    },
    "272": {
      "op": "==",
      "defined_out": [
        "tmp%59#0",
        "y#1"
      ],
      "stack_out": [
        "y#1",
        "tmp%59#0"
      ]
    },
    "273": {
      "op": "assert",
      "stack_out": [
        "y#1"
      ]
    },
    "274": {
      "op": "pushint 255 // 255",
      "defined_out": [
        "255",
        "y#1"
      ],
      "stack_out": [
        "y#1",
        "255"
      ]
    },
    "277": {
      "op": "^",
      "defined_out": [
        "y#1"
      ],
      "stack_out": [
        "y#1"
      ]
    },
    "278": {
      "op": "pushint 193 // 193",
      "defined_out": [
        "193",
        "y#1"
      ],
      "stack_out": [
        "y#1",
        "193"
      ]
    },
    "281": {
      "op": "==",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "282": {
      "op": "assert",
      "stack_out": []
    },
    "283": {
      "op": "pushint 17 // 17",
      "defined_out": [
        "17"
      ],
      "stack_out": [
        "17"
      ]
    },
    "285": {
      "op": "sqrt",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "286": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "16"
      ]
    },
    "288": {
      "op": "sqrt",
      "defined_out": [
        "tmp%62#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%62#0",
        "tmp%63#0"
      ]
    },
    "289": {
      "op": "==",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "290": {
      "op": "assert",
      "stack_out": []
    },
    "291": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "292": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1",
        "1"
      ]
    },
    "293": {
      "op": "==",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "294": {
      "op": "assert",
      "stack_out": []
    },
    "295": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "297": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%66#0",
        "0"
      ]
    },
    "298": {
      "op": "!=",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "299": {
      "op": "intc_2 // 5",
      "stack_out": [
        "tmp%67#0",
        "5"
      ]
    },
    "300": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%67#0",
        "5",
        "1"
      ]
    },
    "301": {
      "op": "uncover 2",
      "stack_out": [
        "5",
        "1",
        "tmp%67#0"
      ]
    },
    "303": {
      "op": "select",
      "defined_out": [
        "select%8#0"
      ],
      "stack_out": [
        "select%8#0"
      ]
    },
    "304": {
      "op": "intc_2 // 5",
      "stack_out": [
        "select%8#0",
        "5"
      ]
    },
    "305": {
      "op": "==",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "306": {
      "error": "constructor expressions supported",
      "op": "assert // constructor expressions supported",
      "stack_out": []
    },
    "307": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "308": {
      "op": "return",
      "stack_out": []
    }
  }
}