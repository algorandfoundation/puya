#pragma version 10

test_cases.stubs.bytes.BytesContract.approval_program:
    // stubs/bytes.py:6
    // base_64 = Bytes.from_base64("QmFzZSA2NCBlbmNvZGVk")
    byte base64 QmFzZSA2NCBlbmNvZGVk
    // stubs/bytes.py:7
    // assert base_64 == Bytes(b"Base 64 encoded")
    byte "Base 64 encoded"
    ==
    assert
    // stubs/bytes.py:8
    // base_32 = Bytes.from_base32("IJQXGZJAGMZCAZLOMNXWIZLE")
    byte base32 IJQXGZJAGMZCAZLOMNXWIZLE
    // stubs/bytes.py:9
    // assert base_32 == Bytes(b"Base 32 encoded")
    byte "Base 32 encoded"
    ==
    assert
    // stubs/bytes.py:10
    // base_16 = Bytes.from_hex("4261736520313620656E636F646564")
    byte 0x4261736520313620656e636f646564
    // stubs/bytes.py:11
    // assert base_16 == Bytes(b"Base 16 encoded")
    byte "Base 16 encoded"
    ==
    assert
    // stubs/bytes.py:6
    // base_64 = Bytes.from_base64("QmFzZSA2NCBlbmNvZGVk")
    byte base64 QmFzZSA2NCBlbmNvZGVk
    // stubs/bytes.py:14
    // assert base_64, "Non empty bytes should be Truthy"
    len
    assert // Non empty bytes should be Truthy
    // stubs/bytes.py:13
    // empty = Bytes(b"")
    byte ""
    // stubs/bytes.py:15
    // assert not empty, "Empty bytes should be Falsy"
    len
    !
    assert // Empty bytes should be Falsy
    // stubs/bytes.py:17
    // assert Bytes(b"a") + Bytes(b"b") == Bytes(b"ab")
    byte "a"
    byte "b"
    concat
    byte "ab"
    ==
    assert
    // stubs/bytes.py:19
    // c = Bytes(b"c")
    byte "c"
    // stubs/bytes.py:20
    // c += b"d"
    byte "d"
    concat
    // stubs/bytes.py:21
    // assert c == Bytes(b"cd")
    byte "cd"
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:24
    // assert abc[0] == b"a"
    extract 0 1
    byte "a"
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:26
    // assert abc[1:] == b"bc"
    len
    int 1
    dig 1
    >=
    int 1
    dig 2
    uncover 2
    select
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:26
    // assert abc[1:] == b"bc"
    uncover 1
    uncover 2
    substring3
    byte "bc"
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:27
    // assert abc[1:1] == b""
    len
    int 1
    dig 1
    >=
    int 1
    dig 2
    uncover 2
    select
    cover 1
    int 1
    dig 1
    >=
    int 1
    uncover 2
    uncover 2
    select
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:27
    // assert abc[1:1] == b""
    uncover 2
    uncover 2
    substring3
    byte ""
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:28
    // assert abc[:1] == b"a"
    len
    int 1
    dig 1
    >=
    int 1
    uncover 2
    uncover 2
    select
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:28
    // assert abc[:1] == b"a"
    int 0
    uncover 2
    substring3
    byte "a"
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:29
    // assert abc[:-1] == b"ab"
    len
    int 1
    dig 1
    >=
    int 1
    dig 2
    uncover 2
    select
    -
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:29
    // assert abc[:-1] == b"ab"
    int 0
    uncover 2
    substring3
    byte "ab"
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:30
    // assert abc[-2:] == b"bc"
    len
    int 2
    dig 1
    >=
    int 2
    dig 2
    uncover 2
    select
    dig 1
    uncover 1
    -
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:30
    // assert abc[-2:] == b"bc"
    uncover 1
    uncover 2
    substring3
    byte "bc"
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:31
    // assert abc[-2:-1] == b"b"
    len
    int 2
    dig 1
    >=
    int 2
    dig 2
    uncover 2
    select
    dig 1
    uncover 1
    -
    cover 1
    int 1
    dig 1
    >=
    int 1
    dig 2
    uncover 2
    select
    -
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:31
    // assert abc[-2:-1] == b"b"
    uncover 2
    uncover 2
    substring3
    byte "b"
    ==
    assert
    // stubs/bytes.py:32
    // assert Bytes(b"1234567")[1:-1] == b"23456"
    byte "1234567"
    len
    int 1
    dig 1
    >=
    int 1
    dig 2
    uncover 2
    select
    cover 1
    int 1
    dig 1
    >=
    int 1
    dig 2
    uncover 2
    select
    -
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    byte "1234567"
    uncover 2
    uncover 2
    substring3
    byte "23456"
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:33
    // assert abc[-10:10] == b"abc"
    len
    int 10
    dig 1
    >=
    int 10
    dig 2
    uncover 2
    select
    dig 1
    uncover 1
    -
    cover 1
    int 10
    dig 1
    >=
    int 10
    uncover 2
    uncover 2
    select
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:33
    // assert abc[-10:10] == b"abc"
    uncover 2
    uncover 2
    substring3
    byte "abc"
    ==
    assert
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"
    // stubs/bytes.py:38
    // x = (true and true) == true
    len
    bnz main_ternary_false@2
    b main_ternary_merge@3

main_ternary_false@2:

main_ternary_merge@3:
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"
    byte "1"
    // stubs/bytes.py:38
    // x = (true and true) == true
    ==
    // stubs/bytes.py:39
    // assert x
    assert
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"
    // stubs/bytes.py:40
    // assert (true and true) == true
    len
    bnz main_ternary_false@5
    b main_ternary_merge@6

main_ternary_false@5:

main_ternary_merge@6:
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"
    byte "1"
    // stubs/bytes.py:40
    // assert (true and true) == true
    ==
    assert
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"
    // stubs/bytes.py:41
    // assert (true and false) == false
    len
    bnz main_ternary_false@8
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"
    b main_ternary_merge@9

main_ternary_false@8:
    // stubs/bytes.py:36
    // false = Bytes(b"")
    byte ""

main_ternary_merge@9:
    // stubs/bytes.py:36
    // false = Bytes(b"")
    byte ""
    // stubs/bytes.py:41
    // assert (true and false) == false
    ==
    assert
    // stubs/bytes.py:36
    // false = Bytes(b"")
    byte ""
    // stubs/bytes.py:42
    // assert (false and true) == false
    len
    bnz main_ternary_false@11
    // stubs/bytes.py:36
    // false = Bytes(b"")
    byte ""
    b main_ternary_merge@12

main_ternary_false@11:
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"

main_ternary_merge@12:
    // stubs/bytes.py:36
    // false = Bytes(b"")
    byte ""
    // stubs/bytes.py:42
    // assert (false and true) == false
    ==
    assert
    // stubs/bytes.py:36
    // false = Bytes(b"")
    byte ""
    // stubs/bytes.py:43
    // assert (false and false) == false
    len
    bnz main_ternary_false@14
    b main_ternary_merge@15

main_ternary_false@14:

main_ternary_merge@15:
    // stubs/bytes.py:36
    // false = Bytes(b"")
    byte ""
    byte ""
    // stubs/bytes.py:43
    // assert (false and false) == false
    ==
    assert
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"
    // stubs/bytes.py:44
    // assert (true or true) == true
    len
    bz main_ternary_false@17
    b main_ternary_merge@18

main_ternary_false@17:

main_ternary_merge@18:
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"
    byte "1"
    // stubs/bytes.py:44
    // assert (true or true) == true
    ==
    assert
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"
    // stubs/bytes.py:45
    // assert (true or false) == true
    len
    bz main_ternary_false@20
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"
    b main_ternary_merge@21

main_ternary_false@20:
    // stubs/bytes.py:36
    // false = Bytes(b"")
    byte ""

main_ternary_merge@21:
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"
    // stubs/bytes.py:45
    // assert (true or false) == true
    ==
    assert
    // stubs/bytes.py:36
    // false = Bytes(b"")
    byte ""
    // stubs/bytes.py:46
    // assert (false or true) == true
    len
    bz main_ternary_false@23
    // stubs/bytes.py:36
    // false = Bytes(b"")
    byte ""
    b main_ternary_merge@24

main_ternary_false@23:
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"

main_ternary_merge@24:
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"
    // stubs/bytes.py:46
    // assert (false or true) == true
    ==
    assert
    // stubs/bytes.py:36
    // false = Bytes(b"")
    byte ""
    // stubs/bytes.py:47
    // assert (false or false) == false
    len
    bz main_ternary_false@26
    b main_ternary_merge@27

main_ternary_false@26:

main_ternary_merge@27:
    // stubs/bytes.py:36
    // false = Bytes(b"")
    byte ""
    byte ""
    // stubs/bytes.py:47
    // assert (false or false) == false
    ==
    assert
    // stubs/bytes.py:50
    // Bytes.from_hex("00"),
    byte 0x00
    // stubs/bytes.py:51
    // Bytes.from_hex("0F"),
    byte 0x0f
    // stubs/bytes.py:56
    // assert a & b == a
    b&
    // stubs/bytes.py:50
    // Bytes.from_hex("00"),
    byte 0x00
    // stubs/bytes.py:56
    // assert a & b == a
    ==
    assert
    // stubs/bytes.py:51
    // Bytes.from_hex("0F"),
    byte 0x0f
    // stubs/bytes.py:52
    // Bytes.from_hex("F0"),
    byte 0xf0
    // stubs/bytes.py:57
    // assert b | c == d
    b|
    // stubs/bytes.py:53
    // Bytes.from_hex("FF"),
    byte 0xff
    // stubs/bytes.py:57
    // assert b | c == d
    ==
    assert
    // stubs/bytes.py:51
    // Bytes.from_hex("0F"),
    byte 0x0f
    // stubs/bytes.py:53
    // Bytes.from_hex("FF"),
    byte 0xff
    // stubs/bytes.py:58
    // assert b ^ d == c
    b^
    // stubs/bytes.py:52
    // Bytes.from_hex("F0"),
    byte 0xf0
    // stubs/bytes.py:58
    // assert b ^ d == c
    ==
    assert
    // stubs/bytes.py:50
    // Bytes.from_hex("00"),
    byte 0x00
    // stubs/bytes.py:53
    // Bytes.from_hex("FF"),
    byte 0xff
    // stubs/bytes.py:61
    // y &= d
    b&
    // stubs/bytes.py:62
    // assert y == a
    dup
    // stubs/bytes.py:50
    // Bytes.from_hex("00"),
    byte 0x00
    // stubs/bytes.py:62
    // assert y == a
    ==
    assert
    // stubs/bytes.py:53
    // Bytes.from_hex("FF"),
    byte 0xff
    // stubs/bytes.py:63
    // y |= d
    b|
    // stubs/bytes.py:64
    // assert y == d
    dup
    // stubs/bytes.py:53
    // Bytes.from_hex("FF"),
    byte 0xff
    // stubs/bytes.py:64
    // assert y == d
    ==
    assert
    // stubs/bytes.py:52
    // Bytes.from_hex("F0"),
    byte 0xf0
    // stubs/bytes.py:65
    // y ^= c
    b^
    // stubs/bytes.py:51
    // Bytes.from_hex("0F"),
    byte 0x0f
    // stubs/bytes.py:66
    // assert y == b
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:68
    // check_slicing_with_uint64(abc)
    callsub check_slicing_with_uint64
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    // stubs/bytes.py:69
    // check_end_before_start_slicing(abc)
    callsub check_end_before_start_slicing
    // stubs/bytes.py:71
    // return UInt64(1)
    int 1
    return


// test_cases.stubs.bytes.check_slicing_with_uint64(abc: bytes) -> void:
check_slicing_with_uint64:
    // stubs/bytes.py:77-78
    // @subroutine
    // def check_slicing_with_uint64(abc: Bytes) -> None:
    proto 1 0
    // stubs/bytes.py:81
    // assert abc[one:] == b"bc"
    frame_dig -1
    len
    // stubs/bytes.py:79
    // one = UInt64(1)
    int 1
    // stubs/bytes.py:81
    // assert abc[one:] == b"bc"
    dig 1
    >=
    // stubs/bytes.py:79
    // one = UInt64(1)
    int 1
    // stubs/bytes.py:81
    // assert abc[one:] == b"bc"
    dig 2
    uncover 2
    select
    frame_dig -1
    uncover 1
    uncover 2
    substring3
    byte "bc"
    ==
    assert
    // stubs/bytes.py:82
    // assert abc[one:one] == b""
    frame_dig -1
    len
    // stubs/bytes.py:79
    // one = UInt64(1)
    int 1
    // stubs/bytes.py:82
    // assert abc[one:one] == b""
    dig 1
    >=
    // stubs/bytes.py:79
    // one = UInt64(1)
    int 1
    // stubs/bytes.py:82
    // assert abc[one:one] == b""
    dig 2
    uncover 2
    select
    cover 1
    // stubs/bytes.py:79
    // one = UInt64(1)
    int 1
    // stubs/bytes.py:82
    // assert abc[one:one] == b""
    dig 1
    >=
    // stubs/bytes.py:79
    // one = UInt64(1)
    int 1
    // stubs/bytes.py:82
    // assert abc[one:one] == b""
    uncover 2
    uncover 2
    select
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    byte ""
    ==
    assert
    // stubs/bytes.py:83
    // assert abc[:one] == b"a"
    frame_dig -1
    len
    // stubs/bytes.py:79
    // one = UInt64(1)
    int 1
    // stubs/bytes.py:83
    // assert abc[:one] == b"a"
    dig 1
    >=
    // stubs/bytes.py:79
    // one = UInt64(1)
    int 1
    // stubs/bytes.py:83
    // assert abc[:one] == b"a"
    uncover 2
    uncover 2
    select
    frame_dig -1
    int 0
    uncover 2
    substring3
    byte "a"
    ==
    assert
    // stubs/bytes.py:84
    // assert one_to_seven()[one:-1] == b"23456"
    callsub one_to_seven
    dup
    len
    // stubs/bytes.py:79
    // one = UInt64(1)
    int 1
    // stubs/bytes.py:84
    // assert one_to_seven()[one:-1] == b"23456"
    dig 1
    >=
    // stubs/bytes.py:79
    // one = UInt64(1)
    int 1
    // stubs/bytes.py:84
    // assert one_to_seven()[one:-1] == b"23456"
    dig 2
    uncover 2
    select
    cover 1
    int 1
    dig 1
    >=
    int 1
    dig 2
    uncover 2
    select
    -
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    byte "23456"
    ==
    assert
    // stubs/bytes.py:85
    // assert abc[UInt64(0) : ten] == b"abc"
    frame_dig -1
    len
    int 0
    dig 1
    >=
    int 0
    dig 2
    uncover 2
    select
    cover 1
    // stubs/bytes.py:80
    // ten = UInt64(10)
    int 10
    // stubs/bytes.py:85
    // assert abc[UInt64(0) : ten] == b"abc"
    dig 1
    >=
    // stubs/bytes.py:80
    // ten = UInt64(10)
    int 10
    // stubs/bytes.py:85
    // assert abc[UInt64(0) : ten] == b"abc"
    uncover 2
    uncover 2
    select
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    byte "abc"
    ==
    assert
    retsub


// test_cases.stubs.bytes.one_to_seven() -> bytes:
one_to_seven:
    // stubs/bytes.py:97-98
    // @subroutine
    // def one_to_seven() -> Bytes:
    proto 0 1
    // stubs/bytes.py:99
    // log("one_to_seven called")
    byte "one_to_seven called"
    log
    // stubs/bytes.py:100
    // return Bytes(b"1234567")
    byte "1234567"
    retsub


// test_cases.stubs.bytes.check_end_before_start_slicing(abc: bytes) -> void:
check_end_before_start_slicing:
    // stubs/bytes.py:88-89
    // @subroutine
    // def check_end_before_start_slicing(abc: Bytes) -> None:
    proto 1 0
    // stubs/bytes.py:90
    // assert abc[10:1] == b""
    frame_dig -1
    len
    int 10
    dig 1
    >=
    int 10
    dig 2
    uncover 2
    select
    cover 1
    int 1
    dig 1
    >=
    int 1
    uncover 2
    uncover 2
    select
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    byte ""
    ==
    assert
    // stubs/bytes.py:91
    // assert abc[-10:-12] == b""
    frame_dig -1
    len
    int 10
    dig 1
    >=
    int 10
    dig 2
    uncover 2
    select
    dig 1
    uncover 1
    -
    cover 1
    int 12
    dig 1
    >=
    int 12
    dig 2
    uncover 2
    select
    -
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    byte ""
    ==
    assert
    // stubs/bytes.py:94
    // assert abc[ten:one] == b""
    frame_dig -1
    len
    // stubs/bytes.py:93
    // ten = UInt64(10)
    int 10
    // stubs/bytes.py:94
    // assert abc[ten:one] == b""
    dig 1
    >=
    // stubs/bytes.py:93
    // ten = UInt64(10)
    int 10
    // stubs/bytes.py:94
    // assert abc[ten:one] == b""
    dig 2
    uncover 2
    select
    cover 1
    // stubs/bytes.py:92
    // one = UInt64(1)
    int 1
    // stubs/bytes.py:94
    // assert abc[ten:one] == b""
    dig 1
    >=
    // stubs/bytes.py:92
    // one = UInt64(1)
    int 1
    // stubs/bytes.py:94
    // assert abc[ten:one] == b""
    uncover 2
    uncover 2
    select
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    byte ""
    ==
    assert
    retsub
