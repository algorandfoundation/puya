#pragma version 11
#pragma typetrack false

// test_cases.stubs.bytes.BytesContract.approval_program() -> uint64:
main:
    intcblock 1 0 10 2
    bytecblock 0x 0x31 0x616263 0xff 0x61 0x00 0x0f 0x4261736520363420656e636f646564 0x6263 0x31323334353637 0xf0 0x4261736520333220656e636f646564 0x4261736520313620656e636f646564 0x6162 0x3233343536 0x6e6f2061726773
    b main_block@0

main_block@0:
    // stubs/bytes.py:6
    // base_64 = Bytes.from_base64("QmFzZSA2NCBlbmNvZGVk")
    bytec 7 // base64(QmFzZSA2NCBlbmNvZGVk)
    // stubs/bytes.py:7
    // assert base_64 == Bytes(b"Base 64 encoded")
    bytec 7 // 0x4261736520363420656e636f646564
    ==
    assert
    // stubs/bytes.py:8
    // base_32 = Bytes.from_base32("IJQXGZJAGMZCAZLOMNXWIZLE")
    bytec 11 // base32(IJQXGZJAGMZCAZLOMNXWIZLE)
    // stubs/bytes.py:9
    // assert base_32 == Bytes(b"Base 32 encoded")
    bytec 11 // 0x4261736520333220656e636f646564
    ==
    assert
    // stubs/bytes.py:10
    // base_16 = Bytes.from_hex("4261736520313620656E636F646564")
    bytec 12 // 0x4261736520313620656e636f646564
    // stubs/bytes.py:11
    // assert base_16 == Bytes(b"Base 16 encoded")
    bytec 12 // 0x4261736520313620656e636f646564
    ==
    assert
    // stubs/bytes.py:6
    // base_64 = Bytes.from_base64("QmFzZSA2NCBlbmNvZGVk")
    bytec 7 // base64(QmFzZSA2NCBlbmNvZGVk)
    // stubs/bytes.py:14
    // assert base_64, "Non empty bytes should be Truthy"
    len
    intc_1 // 0
    !=
    assert // Non empty bytes should be Truthy
    // stubs/bytes.py:13
    // empty = Bytes(b"")
    bytec_0 // 0x
    // stubs/bytes.py:15
    // assert not empty, "Empty bytes should be Falsy"
    len
    intc_1 // 0
    ==
    assert // Empty bytes should be Falsy
    // stubs/bytes.py:17
    // assert Bytes(b"a") + Bytes(b"b") == Bytes(b"ab")
    bytec 4 // 0x61
    pushbytes 0x62
    concat
    bytec 13 // 0x6162
    ==
    assert
    // stubs/bytes.py:19
    // c = Bytes(b"c")
    pushbytes 0x63
    // stubs/bytes.py:20
    // c += b"d"
    pushbytes 0x64
    concat
    // stubs/bytes.py:21
    // assert c == Bytes(b"cd")
    pushbytes 0x6364
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:24
    // assert abc[0] == b"a"
    intc_1 // 0
    intc_0 // 1
    extract3
    bytec 4 // 0x61
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:26
    // assert abc[1:] == b"bc"
    len
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    dig 2
    uncover 2
    select
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:26
    // assert abc[1:] == b"bc"
    uncover 1
    uncover 2
    substring3
    bytec 8 // 0x6263
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:27
    // assert abc[1:1] == b""
    len
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    dig 2
    uncover 2
    select
    cover 1
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    uncover 2
    uncover 2
    select
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:27
    // assert abc[1:1] == b""
    uncover 2
    uncover 2
    substring3
    bytec_0 // 0x
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:28
    // assert abc[:1] == b"a"
    len
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    uncover 2
    uncover 2
    select
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:28
    // assert abc[:1] == b"a"
    intc_1 // 0
    uncover 2
    substring3
    bytec 4 // 0x61
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:29
    // assert abc[:-1] == b"ab"
    len
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    dig 2
    uncover 2
    select
    -
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:29
    // assert abc[:-1] == b"ab"
    intc_1 // 0
    uncover 2
    substring3
    bytec 13 // 0x6162
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:30
    // assert abc[-2:] == b"bc"
    len
    intc_3 // 2
    dig 1
    >=
    intc_3 // 2
    dig 2
    uncover 2
    select
    dig 1
    uncover 1
    -
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:30
    // assert abc[-2:] == b"bc"
    uncover 1
    uncover 2
    substring3
    bytec 8 // 0x6263
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:31
    // assert abc[-2:-1] == b"b"
    len
    intc_3 // 2
    dig 1
    >=
    intc_3 // 2
    dig 2
    uncover 2
    select
    dig 1
    uncover 1
    -
    cover 1
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    dig 2
    uncover 2
    select
    -
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:31
    // assert abc[-2:-1] == b"b"
    uncover 2
    uncover 2
    substring3
    pushbytes 0x62
    ==
    assert
    // stubs/bytes.py:32
    // assert Bytes(b"1234567")[1:-1] == b"23456"
    bytec 9 // 0x31323334353637
    len
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    dig 2
    uncover 2
    select
    cover 1
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    dig 2
    uncover 2
    select
    -
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    bytec 9 // 0x31323334353637
    uncover 2
    uncover 2
    substring3
    bytec 14 // 0x3233343536
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:33
    // assert abc[-10:10] == b"abc"
    len
    intc_2 // 10
    dig 1
    >=
    intc_2 // 10
    dig 2
    uncover 2
    select
    dig 1
    uncover 1
    -
    cover 1
    intc_2 // 10
    dig 1
    >=
    intc_2 // 10
    uncover 2
    uncover 2
    select
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:33
    // assert abc[-10:10] == b"abc"
    uncover 2
    uncover 2
    substring3
    bytec_2 // 0x616263
    ==
    assert
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:38
    // x = (true and true) == true
    len
    intc_1 // 0
    ==
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    bytec_1 // 0x31
    // stubs/bytes.py:38
    // x = (true and true) == true
    uncover 2
    select
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:38
    // x = (true and true) == true
    ==
    // stubs/bytes.py:39
    // assert x
    assert
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:40
    // assert (true and true) == true
    len
    intc_1 // 0
    ==
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    bytec_1 // 0x31
    // stubs/bytes.py:40
    // assert (true and true) == true
    uncover 2
    select
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:40
    // assert (true and true) == true
    ==
    assert
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:41
    // assert (true and false) == false
    len
    intc_1 // 0
    ==
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:41
    // assert (true and false) == false
    uncover 2
    select
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    // stubs/bytes.py:41
    // assert (true and false) == false
    ==
    assert
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    // stubs/bytes.py:42
    // assert (false and true) == false
    len
    intc_1 // 0
    ==
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    // stubs/bytes.py:42
    // assert (false and true) == false
    uncover 2
    select
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    // stubs/bytes.py:42
    // assert (false and true) == false
    ==
    assert
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    // stubs/bytes.py:43
    // assert (false and false) == false
    len
    intc_1 // 0
    ==
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    bytec_0 // 0x
    // stubs/bytes.py:43
    // assert (false and false) == false
    uncover 2
    select
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    // stubs/bytes.py:43
    // assert (false and false) == false
    ==
    assert
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:44
    // assert (true or true) == true
    len
    intc_1 // 0
    !=
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    bytec_1 // 0x31
    // stubs/bytes.py:44
    // assert (true or true) == true
    uncover 2
    select
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:44
    // assert (true or true) == true
    ==
    assert
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:45
    // assert (true or false) == true
    len
    intc_1 // 0
    !=
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:45
    // assert (true or false) == true
    uncover 2
    select
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:45
    // assert (true or false) == true
    ==
    assert
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    // stubs/bytes.py:46
    // assert (false or true) == true
    len
    intc_1 // 0
    !=
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    // stubs/bytes.py:46
    // assert (false or true) == true
    uncover 2
    select
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    bytec_1 // 0x31
    // stubs/bytes.py:46
    // assert (false or true) == true
    ==
    assert
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    // stubs/bytes.py:47
    // assert (false or false) == false
    len
    intc_1 // 0
    !=
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    bytec_0 // 0x
    // stubs/bytes.py:47
    // assert (false or false) == false
    uncover 2
    select
    // stubs/bytes.py:36
    // false = Bytes(b"")
    bytec_0 // 0x
    // stubs/bytes.py:47
    // assert (false or false) == false
    ==
    assert
    // stubs/bytes.py:50
    // Bytes.from_hex("00"),
    bytec 5 // 0x00
    // stubs/bytes.py:51
    // Bytes.from_hex("0F"),
    bytec 6 // 0x0f
    // stubs/bytes.py:56
    // assert a & b == a
    b&
    // stubs/bytes.py:50
    // Bytes.from_hex("00"),
    bytec 5 // 0x00
    // stubs/bytes.py:56
    // assert a & b == a
    ==
    assert
    // stubs/bytes.py:51
    // Bytes.from_hex("0F"),
    bytec 6 // 0x0f
    // stubs/bytes.py:52
    // Bytes.from_hex("F0"),
    bytec 10 // 0xf0
    // stubs/bytes.py:57
    // assert b | c == d
    b|
    // stubs/bytes.py:53
    // Bytes.from_hex("FF"),
    bytec_3 // 0xff
    // stubs/bytes.py:57
    // assert b | c == d
    ==
    assert
    // stubs/bytes.py:51
    // Bytes.from_hex("0F"),
    bytec 6 // 0x0f
    // stubs/bytes.py:53
    // Bytes.from_hex("FF"),
    bytec_3 // 0xff
    // stubs/bytes.py:58
    // assert b ^ d == c
    b^
    // stubs/bytes.py:52
    // Bytes.from_hex("F0"),
    bytec 10 // 0xf0
    // stubs/bytes.py:58
    // assert b ^ d == c
    ==
    assert
    // stubs/bytes.py:50
    // Bytes.from_hex("00"),
    bytec 5 // 0x00
    // stubs/bytes.py:53
    // Bytes.from_hex("FF"),
    bytec_3 // 0xff
    // stubs/bytes.py:61
    // y &= d
    b&
    // stubs/bytes.py:62
    // assert y == a
    dup
    // stubs/bytes.py:50
    // Bytes.from_hex("00"),
    bytec 5 // 0x00
    // stubs/bytes.py:62
    // assert y == a
    ==
    assert
    // stubs/bytes.py:53
    // Bytes.from_hex("FF"),
    bytec_3 // 0xff
    // stubs/bytes.py:63
    // y |= d
    b|
    // stubs/bytes.py:64
    // assert y == d
    dup
    // stubs/bytes.py:53
    // Bytes.from_hex("FF"),
    bytec_3 // 0xff
    // stubs/bytes.py:64
    // assert y == d
    ==
    assert
    // stubs/bytes.py:52
    // Bytes.from_hex("F0"),
    bytec 10 // 0xf0
    // stubs/bytes.py:65
    // y ^= c
    b^
    // stubs/bytes.py:51
    // Bytes.from_hex("0F"),
    bytec 6 // 0x0f
    // stubs/bytes.py:66
    // assert y == b
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:68
    // check_slicing_with_uint64(abc)
    callsub check_slicing_with_uint64
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    bytec_2 // 0x616263
    // stubs/bytes.py:69
    // check_end_before_start_slicing(abc)
    callsub check_end_before_start_slicing
    // stubs/bytes.py:72
    // Bytes(b"args" if Txn.num_app_args else b"no args") == b"no args"
    txn NumAppArgs
    intc_1 // 0
    !=
    bytec 15 // 0x6e6f2061726773
    pushbytes 0x61726773
    uncover 2
    select
    bytec 15 // 0x6e6f2061726773
    ==
    // stubs/bytes.py:71-73
    // assert (
    //     Bytes(b"args" if Txn.num_app_args else b"no args") == b"no args"
    // ), "constructor expressions supported"
    assert // constructor expressions supported
    // stubs/bytes.py:75
    // return UInt64(1)
    intc_0 // 1
    return


// test_cases.stubs.bytes.check_slicing_with_uint64(abc: bytes) -> void:
check_slicing_with_uint64:
    // stubs/bytes.py:81-82
    // @subroutine
    // def check_slicing_with_uint64(abc: Bytes) -> None:
    proto 1 0
    b check_slicing_with_uint64_block@0

check_slicing_with_uint64_block@0:
    // stubs/bytes.py:85
    // assert abc[one:] == b"bc"
    frame_dig -1
    len
    // stubs/bytes.py:83
    // one = UInt64(1)
    intc_0 // 1
    // stubs/bytes.py:85
    // assert abc[one:] == b"bc"
    dig 1
    >=
    // stubs/bytes.py:83
    // one = UInt64(1)
    intc_0 // 1
    // stubs/bytes.py:85
    // assert abc[one:] == b"bc"
    dig 2
    uncover 2
    select
    frame_dig -1
    uncover 1
    uncover 2
    substring3
    bytec 8 // 0x6263
    ==
    assert
    // stubs/bytes.py:86
    // assert abc[one:one] == b""
    frame_dig -1
    len
    // stubs/bytes.py:83
    // one = UInt64(1)
    intc_0 // 1
    // stubs/bytes.py:86
    // assert abc[one:one] == b""
    dig 1
    >=
    // stubs/bytes.py:83
    // one = UInt64(1)
    intc_0 // 1
    // stubs/bytes.py:86
    // assert abc[one:one] == b""
    dig 2
    uncover 2
    select
    cover 1
    // stubs/bytes.py:83
    // one = UInt64(1)
    intc_0 // 1
    // stubs/bytes.py:86
    // assert abc[one:one] == b""
    dig 1
    >=
    // stubs/bytes.py:83
    // one = UInt64(1)
    intc_0 // 1
    // stubs/bytes.py:86
    // assert abc[one:one] == b""
    uncover 2
    uncover 2
    select
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    bytec_0 // 0x
    ==
    assert
    // stubs/bytes.py:87
    // assert abc[:one] == b"a"
    frame_dig -1
    len
    // stubs/bytes.py:83
    // one = UInt64(1)
    intc_0 // 1
    // stubs/bytes.py:87
    // assert abc[:one] == b"a"
    dig 1
    >=
    // stubs/bytes.py:83
    // one = UInt64(1)
    intc_0 // 1
    // stubs/bytes.py:87
    // assert abc[:one] == b"a"
    uncover 2
    uncover 2
    select
    frame_dig -1
    intc_1 // 0
    uncover 2
    substring3
    bytec 4 // 0x61
    ==
    assert
    // stubs/bytes.py:88
    // assert one_to_seven()[one:-1] == b"23456"
    callsub one_to_seven
    dup
    len
    // stubs/bytes.py:83
    // one = UInt64(1)
    intc_0 // 1
    // stubs/bytes.py:88
    // assert one_to_seven()[one:-1] == b"23456"
    dig 1
    >=
    // stubs/bytes.py:83
    // one = UInt64(1)
    intc_0 // 1
    // stubs/bytes.py:88
    // assert one_to_seven()[one:-1] == b"23456"
    dig 2
    uncover 2
    select
    cover 1
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    dig 2
    uncover 2
    select
    -
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    uncover 2
    uncover 2
    uncover 2
    substring3
    bytec 14 // 0x3233343536
    ==
    assert
    // stubs/bytes.py:89
    // assert abc[UInt64(0) : ten] == b"abc"
    frame_dig -1
    len
    intc_1 // 0
    dig 1
    >=
    intc_1 // 0
    dig 2
    uncover 2
    select
    cover 1
    // stubs/bytes.py:84
    // ten = UInt64(10)
    intc_2 // 10
    // stubs/bytes.py:89
    // assert abc[UInt64(0) : ten] == b"abc"
    dig 1
    >=
    // stubs/bytes.py:84
    // ten = UInt64(10)
    intc_2 // 10
    // stubs/bytes.py:89
    // assert abc[UInt64(0) : ten] == b"abc"
    uncover 2
    uncover 2
    select
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    bytec_2 // 0x616263
    ==
    assert
    retsub


// test_cases.stubs.bytes.check_end_before_start_slicing(abc: bytes) -> void:
check_end_before_start_slicing:
    // stubs/bytes.py:92-93
    // @subroutine
    // def check_end_before_start_slicing(abc: Bytes) -> None:
    proto 1 0
    b check_end_before_start_slicing_block@0

check_end_before_start_slicing_block@0:
    // stubs/bytes.py:94
    // assert abc[10:1] == b""
    frame_dig -1
    len
    intc_2 // 10
    dig 1
    >=
    intc_2 // 10
    dig 2
    uncover 2
    select
    cover 1
    intc_0 // 1
    dig 1
    >=
    intc_0 // 1
    uncover 2
    uncover 2
    select
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    bytec_0 // 0x
    ==
    assert
    // stubs/bytes.py:95
    // assert abc[-10:-12] == b""
    frame_dig -1
    len
    intc_2 // 10
    dig 1
    >=
    intc_2 // 10
    dig 2
    uncover 2
    select
    dig 1
    uncover 1
    -
    cover 1
    pushint 12 // 12
    dig 1
    >=
    pushint 12 // 12
    dig 2
    uncover 2
    select
    -
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    bytec_0 // 0x
    ==
    assert
    // stubs/bytes.py:98
    // assert abc[ten:one] == b""
    frame_dig -1
    len
    // stubs/bytes.py:97
    // ten = UInt64(10)
    intc_2 // 10
    // stubs/bytes.py:98
    // assert abc[ten:one] == b""
    dig 1
    >=
    // stubs/bytes.py:97
    // ten = UInt64(10)
    intc_2 // 10
    // stubs/bytes.py:98
    // assert abc[ten:one] == b""
    dig 2
    uncover 2
    select
    cover 1
    // stubs/bytes.py:96
    // one = UInt64(1)
    intc_0 // 1
    // stubs/bytes.py:98
    // assert abc[ten:one] == b""
    dig 1
    >=
    // stubs/bytes.py:96
    // one = UInt64(1)
    intc_0 // 1
    // stubs/bytes.py:98
    // assert abc[ten:one] == b""
    uncover 2
    uncover 2
    select
    dup
    dig 2
    <
    uncover 1
    dig 2
    uncover 2
    select
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    bytec_0 // 0x
    ==
    assert
    retsub


// test_cases.stubs.bytes.one_to_seven() -> bytes:
one_to_seven:
    b one_to_seven_block@0

one_to_seven_block@0:
    // stubs/bytes.py:103
    // log("one_to_seven called")
    pushbytes "one_to_seven called"
    log
    // stubs/bytes.py:104
    // return Bytes(b"1234567")
    bytec 9 // 0x31323334353637
    retsub
