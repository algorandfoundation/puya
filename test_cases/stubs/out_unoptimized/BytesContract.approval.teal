#pragma version 10

test_cases.stubs.bytes.BytesContract.approval_program:
    int 0
    dup
    byte ""
    dupn 8
    // stubs/bytes.py:6
    // base_64 = Bytes.from_base64("QmFzZSA2NCBlbmNvZGVk")
    byte base64 QmFzZSA2NCBlbmNvZGVk
    // stubs/bytes.py:7
    // assert base_64 == Bytes(b"Base 64 encoded")
    dup
    byte "Base 64 encoded"
    ==
    assert
    // stubs/bytes.py:8
    // base_32 = Bytes.from_base32("IJQXGZJAGMZCAZLOMNXWIZLE")
    byte base32 IJQXGZJAGMZCAZLOMNXWIZLE
    // stubs/bytes.py:9
    // assert base_32 == Bytes(b"Base 32 encoded")
    byte "Base 32 encoded"
    ==
    assert
    // stubs/bytes.py:10
    // base_16 = Bytes.from_hex("4261736520313620656E636F646564")
    byte 0x4261736520313620656e636f646564
    // stubs/bytes.py:11
    // assert base_16 == Bytes(b"Base 16 encoded")
    byte "Base 16 encoded"
    ==
    assert
    // stubs/bytes.py:13
    // empty = Bytes(b"")
    byte ""
    // stubs/bytes.py:14
    // assert base_64, "Non empty bytes should be Truthy"
    swap
    len
    assert // Non empty bytes should be Truthy
    // stubs/bytes.py:15
    // assert not empty, "Empty bytes should be Falsy"
    len
    !
    assert // Empty bytes should be Falsy
    // stubs/bytes.py:17
    // assert Bytes(b"a") + Bytes(b"b") == Bytes(b"ab")
    byte "a"
    byte "b"
    concat
    byte "ab"
    ==
    assert
    // stubs/bytes.py:19
    // c = Bytes(b"c")
    byte "c"
    // stubs/bytes.py:20
    // c += b"d"
    byte "d"
    concat
    // stubs/bytes.py:21
    // assert c == Bytes(b"cd")
    byte "cd"
    ==
    assert
    // stubs/bytes.py:23
    // abc = Bytes(b"abc")
    byte "abc"
    dup
    swap
    // stubs/bytes.py:24
    // assert abc[0] == b"a"
    dup
    extract 0 1
    byte "a"
    ==
    assert
    // stubs/bytes.py:26
    // assert abc[1:] == b"bc"
    len
    dup
    swap
    int 1
    swap
    <
    bz main_ternary_false@2
    int 1
    b main_ternary_merge@3

main_ternary_false@2:
    // stubs/bytes.py:26
    // assert abc[1:] == b"bc"
    dup

main_ternary_merge@3:
    // stubs/bytes.py:26
    // assert abc[1:] == b"bc"
    dig 2
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    byte "bc"
    ==
    assert
    // stubs/bytes.py:27
    // assert abc[1:1] == b""
    len
    dup
    bury 12
    int 1
    swap
    <
    bz main_ternary_false@5
    int 1
    bury 5
    b main_ternary_merge@6

main_ternary_false@5:
    // stubs/bytes.py:27
    // assert abc[1:1] == b""
    dig 10
    bury 5

main_ternary_merge@6:
    // stubs/bytes.py:27
    // assert abc[1:1] == b""
    dig 1
    len
    dup
    bury 12
    int 1
    swap
    <
    bz main_ternary_false@8
    int 1
    b main_ternary_merge@9

main_ternary_false@8:
    // stubs/bytes.py:27
    // assert abc[1:1] == b""
    dig 10

main_ternary_merge@9:
    // stubs/bytes.py:27
    // assert abc[1:1] == b""
    dig 2
    dup
    dig 7
    uncover 3
    substring3
    byte ""
    ==
    assert
    // stubs/bytes.py:28
    // assert abc[:1] == b"a"
    len
    dup
    bury 11
    int 1
    swap
    <
    bz main_ternary_false@11
    int 1
    b main_ternary_merge@12

main_ternary_false@11:
    // stubs/bytes.py:28
    // assert abc[:1] == b"a"
    dig 9

main_ternary_merge@12:
    // stubs/bytes.py:28
    // assert abc[:1] == b"a"
    dig 2
    dup
    int 0
    uncover 3
    substring3
    byte "a"
    ==
    assert
    // stubs/bytes.py:29
    // assert abc[:-1] == b"ab"
    len
    dup
    bury 10
    int 1
    swap
    <
    bz main_ternary_false@14
    dig 8
    int 1
    -
    b main_ternary_merge@15

main_ternary_false@14:
    // stubs/bytes.py:29
    // assert abc[:-1] == b"ab"
    int 0

main_ternary_merge@15:
    // stubs/bytes.py:29
    // assert abc[:-1] == b"ab"
    dig 2
    dup
    int 0
    uncover 3
    substring3
    byte "ab"
    ==
    assert
    // stubs/bytes.py:30
    // assert abc[-2:] == b"bc"
    len
    dup
    bury 9
    int 2
    swap
    <
    bz main_ternary_false@17
    dig 7
    int 2
    -
    b main_ternary_merge@18

main_ternary_false@17:
    // stubs/bytes.py:30
    // assert abc[-2:] == b"bc"
    int 0

main_ternary_merge@18:
    // stubs/bytes.py:30
    // assert abc[-2:] == b"bc"
    dig 2
    dup
    len
    swap
    dup
    uncover 3
    uncover 3
    substring3
    byte "bc"
    ==
    assert
    // stubs/bytes.py:31
    // assert abc[-2:-1] == b"b"
    len
    dup
    bury 8
    int 2
    swap
    <
    bz main_ternary_false@20
    dig 6
    int 2
    -
    bury 4
    b main_ternary_merge@21

main_ternary_false@20:
    // stubs/bytes.py:31
    // assert abc[-2:-1] == b"b"
    int 0
    bury 4

main_ternary_merge@21:
    // stubs/bytes.py:31
    // assert abc[-2:-1] == b"b"
    dig 1
    len
    dup
    bury 8
    int 1
    swap
    <
    bz main_ternary_false@23
    dig 6
    int 1
    -
    b main_ternary_merge@24

main_ternary_false@23:
    // stubs/bytes.py:31
    // assert abc[-2:-1] == b"b"
    int 0

main_ternary_merge@24:
    // stubs/bytes.py:31
    // assert abc[-2:-1] == b"b"
    dig 2
    dup
    dig 6
    uncover 3
    substring3
    byte "b"
    ==
    assert
    // stubs/bytes.py:32
    // assert Bytes(b"1234567")[1:-1] == b"23456"
    byte "1234567"
    int 1
    int 6
    substring3
    byte "23456"
    ==
    assert
    // stubs/bytes.py:33
    // assert abc[-10:10] == b"abc"
    len
    dup
    bury 7
    int 10
    swap
    <
    bz main_ternary_false@26
    dig 5
    int 10
    -
    bury 3
    b main_ternary_merge@27

main_ternary_false@26:
    // stubs/bytes.py:33
    // assert abc[-10:10] == b"abc"
    int 0
    bury 3

main_ternary_merge@27:
    // stubs/bytes.py:33
    // assert abc[-10:10] == b"abc"
    dig 1
    len
    dup
    bury 7
    int 10
    swap
    <
    bz main_ternary_false@29
    int 10
    b main_ternary_merge@30

main_ternary_false@29:
    // stubs/bytes.py:33
    // assert abc[-10:10] == b"abc"
    dig 5

main_ternary_merge@30:
    // stubs/bytes.py:33
    // assert abc[-10:10] == b"abc"
    dig 2
    dig 4
    uncover 2
    substring3
    byte "abc"
    ==
    assert
    // stubs/bytes.py:35
    // true = Bytes(b"1")
    byte "1"
    dup
    bury 13
    // stubs/bytes.py:36
    // false = Bytes(b"")
    byte ""
    bury 14
    // stubs/bytes.py:38
    // x = (true and true) == true
    len
    bnz main_ternary_false@32
    dig 11
    b main_ternary_merge@33

main_ternary_false@32:
    // stubs/bytes.py:38
    // x = (true and true) == true
    dig 11

main_ternary_merge@33:
    // stubs/bytes.py:38
    // x = (true and true) == true
    dig 12
    dup
    cover 2
    ==
    // stubs/bytes.py:39
    // assert x
    assert
    // stubs/bytes.py:40
    // assert (true and true) == true
    len
    bnz main_ternary_false@35
    dig 11
    b main_ternary_merge@36

main_ternary_false@35:
    // stubs/bytes.py:40
    // assert (true and true) == true
    dig 11

main_ternary_merge@36:
    // stubs/bytes.py:40
    // assert (true and true) == true
    dig 12
    dup
    cover 2
    ==
    assert
    // stubs/bytes.py:41
    // assert (true and false) == false
    len
    bnz main_ternary_false@38
    dig 11
    b main_ternary_merge@39

main_ternary_false@38:
    // stubs/bytes.py:41
    // assert (true and false) == false
    dig 12

main_ternary_merge@39:
    // stubs/bytes.py:41
    // assert (true and false) == false
    dig 13
    dup
    cover 2
    ==
    assert
    // stubs/bytes.py:42
    // assert (false and true) == false
    len
    bnz main_ternary_false@41
    dig 12
    b main_ternary_merge@42

main_ternary_false@41:
    // stubs/bytes.py:42
    // assert (false and true) == false
    dig 11

main_ternary_merge@42:
    // stubs/bytes.py:42
    // assert (false and true) == false
    dig 13
    dup
    cover 2
    ==
    assert
    // stubs/bytes.py:43
    // assert (false and false) == false
    len
    bnz main_ternary_false@44
    dig 12
    b main_ternary_merge@45

main_ternary_false@44:
    // stubs/bytes.py:43
    // assert (false and false) == false
    dig 12

main_ternary_merge@45:
    // stubs/bytes.py:43
    // assert (false and false) == false
    dig 13
    ==
    assert
    // stubs/bytes.py:44
    // assert (true or true) == true
    dig 11
    len
    bz main_ternary_false@47
    dig 11
    b main_ternary_merge@48

main_ternary_false@47:
    // stubs/bytes.py:44
    // assert (true or true) == true
    dig 11

main_ternary_merge@48:
    // stubs/bytes.py:44
    // assert (true or true) == true
    dig 12
    dup
    cover 2
    ==
    assert
    // stubs/bytes.py:45
    // assert (true or false) == true
    len
    bz main_ternary_false@50
    dig 11
    b main_ternary_merge@51

main_ternary_false@50:
    // stubs/bytes.py:45
    // assert (true or false) == true
    dig 12

main_ternary_merge@51:
    // stubs/bytes.py:45
    // assert (true or false) == true
    dig 12
    ==
    assert
    // stubs/bytes.py:46
    // assert (false or true) == true
    dig 12
    len
    bz main_ternary_false@53
    dig 12
    b main_ternary_merge@54

main_ternary_false@53:
    // stubs/bytes.py:46
    // assert (false or true) == true
    dig 11

main_ternary_merge@54:
    // stubs/bytes.py:46
    // assert (false or true) == true
    dig 12
    ==
    assert
    // stubs/bytes.py:47
    // assert (false or false) == false
    dig 12
    len
    bz main_ternary_false@56
    dig 12
    b main_ternary_merge@57

main_ternary_false@56:
    // stubs/bytes.py:47
    // assert (false or false) == false
    dig 12

main_ternary_merge@57:
    // stubs/bytes.py:47
    // assert (false or false) == false
    dig 13
    ==
    assert
    // stubs/bytes.py:50
    // Bytes.from_hex("00"),
    byte 0x00
    // stubs/bytes.py:51
    // Bytes.from_hex("0F"),
    byte 0x0f
    // stubs/bytes.py:52
    // Bytes.from_hex("F0"),
    byte 0xf0
    // stubs/bytes.py:49-54
    // a, b, c, d = (
    //     Bytes.from_hex("00"),
    //     Bytes.from_hex("0F"),
    //     Bytes.from_hex("F0"),
    //     Bytes.from_hex("FF"),
    // )
    cover 2
    // stubs/bytes.py:53
    // Bytes.from_hex("FF"),
    byte 0xff
    // stubs/bytes.py:49-54
    // a, b, c, d = (
    //     Bytes.from_hex("00"),
    //     Bytes.from_hex("0F"),
    //     Bytes.from_hex("F0"),
    //     Bytes.from_hex("FF"),
    // )
    cover 3
    // stubs/bytes.py:56
    // assert a & b == a
    dig 1
    dig 1
    b&
    dig 2
    ==
    assert
    // stubs/bytes.py:57
    // assert b | c == d
    dup
    dig 3
    b|
    dig 4
    ==
    assert
    // stubs/bytes.py:58
    // assert b ^ d == c
    dup
    dig 4
    b^
    dig 3
    ==
    assert
    // stubs/bytes.py:60
    // y = a
    dig 1
    // stubs/bytes.py:61
    // y &= d
    dig 4
    b&
    // stubs/bytes.py:62
    // assert y == a
    dup
    uncover 3
    ==
    assert
    // stubs/bytes.py:63
    // y |= d
    dig 3
    b|
    // stubs/bytes.py:64
    // assert y == d
    dup
    uncover 4
    ==
    assert
    // stubs/bytes.py:65
    // y ^= c
    uncover 2
    b^
    // stubs/bytes.py:66
    // assert y == b
    swap
    ==
    assert
    // stubs/bytes.py:68
    // return UInt64(1)
    int 1
    return
