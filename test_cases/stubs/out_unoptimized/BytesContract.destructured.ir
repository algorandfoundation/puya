contract test_cases.stubs.bytes.BytesContract:
    program approval:
        subroutine test_cases.stubs.bytes.BytesContract.approval_program() -> uint64:
            block@0: // L5
                let base_64#0: bytes = QmFzZSA2NCBlbmNvZGVk
                let tmp%0#0: uint64 = (== base_64#0 "Base 64 encoded")
                (assert tmp%0#0)
                let base_32#0: bytes = IJQXGZJAGMZCAZLOMNXWIZLE
                let tmp%1#0: uint64 = (== base_32#0 "Base 32 encoded")
                (assert tmp%1#0)
                let base_16#0: bytes = 0x4261736520313620656e636f646564
                let tmp%2#0: uint64 = (== base_16#0 "Base 16 encoded")
                (assert tmp%2#0)
                let empty#0: bytes = ""
                let tmp%3#0: uint64 = (len base_64#0)
                (assert tmp%3#0) // Non empty bytes should be Truthy
                let tmp%4#0: uint64 = (len empty#0)
                let tmp%5#0: uint64 = (! tmp%4#0)
                (assert tmp%5#0) // Empty bytes should be Falsy
                let tmp%6#0: bytes = (concat "a" "b")
                let tmp%7#0: uint64 = (== tmp%6#0 "ab")
                (assert tmp%7#0)
                let c#0: bytes = "c"
                let c#0: bytes = (concat c#0 "d")
                let tmp%8#0: uint64 = (== c#0 "cd")
                (assert tmp%8#0)
                let abc#0: bytes = "abc"
                let tmp%9#0: bytes = ((extract 0 1) abc#0)
                let tmp%10#0: uint64 = (== tmp%9#0 "a")
                (assert tmp%10#0)
                let awst_tmp%11#0: bytes = abc#0
                let tmp%12#0: uint64 = (len awst_tmp%11#0)
                let tmp%13#0: uint64 = (len awst_tmp%11#0)
                let tmp%14#0: uint64 = (< 1u tmp%13#0)
                let tmp%15#0: any = (select tmp%12#0 1u tmp%14#0)
                let base_length%16#0: uint64 = (len awst_tmp%11#0)
                let tmp%17#0: bytes = (substring3 awst_tmp%11#0 tmp%15#0 base_length%16#0)
                let tmp%18#0: uint64 = (== tmp%17#0 "bc")
                (assert tmp%18#0)
                let awst_tmp%19#0: bytes = abc#0
                let tmp%20#0: uint64 = (len awst_tmp%19#0)
                let tmp%21#0: uint64 = (len awst_tmp%19#0)
                let tmp%22#0: uint64 = (< 1u tmp%21#0)
                let tmp%23#0: any = (select tmp%20#0 1u tmp%22#0)
                let tmp%24#0: uint64 = (len awst_tmp%19#0)
                let tmp%25#0: uint64 = (len awst_tmp%19#0)
                let tmp%26#0: uint64 = (< 1u tmp%25#0)
                let tmp%27#0: any = (select tmp%24#0 1u tmp%26#0)
                let tmp%28#0: bytes = (substring3 awst_tmp%19#0 tmp%23#0 tmp%27#0)
                let tmp%29#0: uint64 = (== tmp%28#0 "")
                (assert tmp%29#0)
                let awst_tmp%30#0: bytes = abc#0
                let tmp%31#0: uint64 = (len awst_tmp%30#0)
                let tmp%32#0: uint64 = (len awst_tmp%30#0)
                let tmp%33#0: uint64 = (< 1u tmp%32#0)
                let tmp%34#0: any = (select tmp%31#0 1u tmp%33#0)
                let tmp%35#0: bytes = (substring3 awst_tmp%30#0 0u tmp%34#0)
                let tmp%36#0: uint64 = (== tmp%35#0 "a")
                (assert tmp%36#0)
                let awst_tmp%37#0: bytes = abc#0
                let tmp%38#0: uint64 = (len awst_tmp%37#0)
                let tmp%39#0: uint64 = (len awst_tmp%37#0)
                let tmp%40#0: uint64 = (len awst_tmp%37#0)
                let tmp%41#0: uint64 = (< 1u tmp%40#0)
                let tmp%42#0: any = (select tmp%39#0 1u tmp%41#0)
                let tmp%43#0: uint64 = (- tmp%38#0 tmp%42#0)
                let tmp%44#0: bytes = (substring3 awst_tmp%37#0 0u tmp%43#0)
                let tmp%45#0: uint64 = (== tmp%44#0 "ab")
                (assert tmp%45#0)
                let awst_tmp%46#0: bytes = abc#0
                let tmp%47#0: uint64 = (len awst_tmp%46#0)
                let tmp%48#0: uint64 = (len awst_tmp%46#0)
                let tmp%49#0: uint64 = (len awst_tmp%46#0)
                let tmp%50#0: uint64 = (< 2u tmp%49#0)
                let tmp%51#0: any = (select tmp%48#0 2u tmp%50#0)
                let tmp%52#0: uint64 = (- tmp%47#0 tmp%51#0)
                let base_length%53#0: uint64 = (len awst_tmp%46#0)
                let tmp%54#0: bytes = (substring3 awst_tmp%46#0 tmp%52#0 base_length%53#0)
                let tmp%55#0: uint64 = (== tmp%54#0 "bc")
                (assert tmp%55#0)
                let awst_tmp%56#0: bytes = abc#0
                let tmp%57#0: uint64 = (len awst_tmp%56#0)
                let tmp%58#0: uint64 = (len awst_tmp%56#0)
                let tmp%59#0: uint64 = (len awst_tmp%56#0)
                let tmp%60#0: uint64 = (< 2u tmp%59#0)
                let tmp%61#0: any = (select tmp%58#0 2u tmp%60#0)
                let tmp%62#0: uint64 = (- tmp%57#0 tmp%61#0)
                let tmp%63#0: uint64 = (len awst_tmp%56#0)
                let tmp%64#0: uint64 = (len awst_tmp%56#0)
                let tmp%65#0: uint64 = (len awst_tmp%56#0)
                let tmp%66#0: uint64 = (< 1u tmp%65#0)
                let tmp%67#0: any = (select tmp%64#0 1u tmp%66#0)
                let tmp%68#0: uint64 = (- tmp%63#0 tmp%67#0)
                let tmp%69#0: bytes = (substring3 awst_tmp%56#0 tmp%62#0 tmp%68#0)
                let tmp%70#0: uint64 = (== tmp%69#0 "b")
                (assert tmp%70#0)
                let awst_tmp%71#0: bytes = "1234567"
                let tmp%72#0: uint64 = (len awst_tmp%71#0)
                let tmp%73#0: uint64 = (len awst_tmp%71#0)
                let tmp%74#0: uint64 = (< 1u tmp%73#0)
                let tmp%75#0: any = (select tmp%72#0 1u tmp%74#0)
                let tmp%76#0: uint64 = (len awst_tmp%71#0)
                let tmp%77#0: uint64 = (len awst_tmp%71#0)
                let tmp%78#0: uint64 = (len awst_tmp%71#0)
                let tmp%79#0: uint64 = (< 1u tmp%78#0)
                let tmp%80#0: any = (select tmp%77#0 1u tmp%79#0)
                let tmp%81#0: uint64 = (- tmp%76#0 tmp%80#0)
                let tmp%82#0: bytes = (substring3 awst_tmp%71#0 tmp%75#0 tmp%81#0)
                let tmp%83#0: uint64 = (== tmp%82#0 "23456")
                (assert tmp%83#0)
                let awst_tmp%84#0: bytes = abc#0
                let tmp%85#0: uint64 = (len awst_tmp%84#0)
                let tmp%86#0: uint64 = (len awst_tmp%84#0)
                let tmp%87#0: uint64 = (len awst_tmp%84#0)
                let tmp%88#0: uint64 = (< 10u tmp%87#0)
                let tmp%89#0: any = (select tmp%86#0 10u tmp%88#0)
                let tmp%90#0: uint64 = (- tmp%85#0 tmp%89#0)
                let tmp%91#0: uint64 = (len awst_tmp%84#0)
                let tmp%92#0: uint64 = (len awst_tmp%84#0)
                let tmp%93#0: uint64 = (< 10u tmp%92#0)
                let tmp%94#0: any = (select tmp%91#0 10u tmp%93#0)
                let tmp%95#0: bytes = (substring3 awst_tmp%84#0 tmp%90#0 tmp%94#0)
                let tmp%96#0: uint64 = (== tmp%95#0 "abc")
                (assert tmp%96#0)
                let true#0: bytes = "1"
                let false#0: bytes = ""
                let tmp%97#0: uint64 = (len true#0)
                goto tmp%97#0 ? block@2 : block@1
            block@1: // ternary_true_L38
                let ternary_result%98#0: bytes = true#0
                goto block@3
            block@2: // ternary_false_L38
                let ternary_result%98#0: bytes = true#0
                goto block@3
            block@3: // ternary_merge_L38
                let x#0: uint64 = (== ternary_result%98#0 true#0)
                (assert x#0)
                let tmp%99#0: uint64 = (len true#0)
                goto tmp%99#0 ? block@5 : block@4
            block@4: // ternary_true_L40
                let ternary_result%100#0: bytes = true#0
                goto block@6
            block@5: // ternary_false_L40
                let ternary_result%100#0: bytes = true#0
                goto block@6
            block@6: // ternary_merge_L40
                let tmp%101#0: uint64 = (== ternary_result%100#0 true#0)
                (assert tmp%101#0)
                let tmp%102#0: uint64 = (len true#0)
                goto tmp%102#0 ? block@8 : block@7
            block@7: // ternary_true_L41
                let ternary_result%103#0: bytes = true#0
                goto block@9
            block@8: // ternary_false_L41
                let ternary_result%103#0: bytes = false#0
                goto block@9
            block@9: // ternary_merge_L41
                let tmp%104#0: uint64 = (== ternary_result%103#0 false#0)
                (assert tmp%104#0)
                let tmp%105#0: uint64 = (len false#0)
                goto tmp%105#0 ? block@11 : block@10
            block@10: // ternary_true_L42
                let ternary_result%106#0: bytes = false#0
                goto block@12
            block@11: // ternary_false_L42
                let ternary_result%106#0: bytes = true#0
                goto block@12
            block@12: // ternary_merge_L42
                let tmp%107#0: uint64 = (== ternary_result%106#0 false#0)
                (assert tmp%107#0)
                let tmp%108#0: uint64 = (len false#0)
                goto tmp%108#0 ? block@14 : block@13
            block@13: // ternary_true_L43
                let ternary_result%109#0: bytes = false#0
                goto block@15
            block@14: // ternary_false_L43
                let ternary_result%109#0: bytes = false#0
                goto block@15
            block@15: // ternary_merge_L43
                let tmp%110#0: uint64 = (== ternary_result%109#0 false#0)
                (assert tmp%110#0)
                let tmp%111#0: uint64 = (len true#0)
                goto tmp%111#0 ? block@16 : block@17
            block@16: // ternary_true_L44
                let ternary_result%112#0: bytes = true#0
                goto block@18
            block@17: // ternary_false_L44
                let ternary_result%112#0: bytes = true#0
                goto block@18
            block@18: // ternary_merge_L44
                let tmp%113#0: uint64 = (== ternary_result%112#0 true#0)
                (assert tmp%113#0)
                let tmp%114#0: uint64 = (len true#0)
                goto tmp%114#0 ? block@19 : block@20
            block@19: // ternary_true_L45
                let ternary_result%115#0: bytes = true#0
                goto block@21
            block@20: // ternary_false_L45
                let ternary_result%115#0: bytes = false#0
                goto block@21
            block@21: // ternary_merge_L45
                let tmp%116#0: uint64 = (== ternary_result%115#0 true#0)
                (assert tmp%116#0)
                let tmp%117#0: uint64 = (len false#0)
                goto tmp%117#0 ? block@22 : block@23
            block@22: // ternary_true_L46
                let ternary_result%118#0: bytes = false#0
                goto block@24
            block@23: // ternary_false_L46
                let ternary_result%118#0: bytes = true#0
                goto block@24
            block@24: // ternary_merge_L46
                let tmp%119#0: uint64 = (== ternary_result%118#0 true#0)
                (assert tmp%119#0)
                let tmp%120#0: uint64 = (len false#0)
                goto tmp%120#0 ? block@25 : block@26
            block@25: // ternary_true_L47
                let ternary_result%121#0: bytes = false#0
                goto block@27
            block@26: // ternary_false_L47
                let ternary_result%121#0: bytes = false#0
                goto block@27
            block@27: // ternary_merge_L47
                let tmp%122#0: uint64 = (== ternary_result%121#0 false#0)
                (assert tmp%122#0)
                let a#0: bytes = 0x00
                let b#0: bytes = 0x0f
                let c#0: bytes = 0xf0
                let d#0: bytes = 0xff
                let tmp%123#0: bytes = (b& a#0 b#0)
                let tmp%124#0: uint64 = (== tmp%123#0 a#0)
                (assert tmp%124#0)
                let tmp%125#0: bytes = (b| b#0 c#0)
                let tmp%126#0: uint64 = (== tmp%125#0 d#0)
                (assert tmp%126#0)
                let tmp%127#0: bytes = (b^ b#0 d#0)
                let tmp%128#0: uint64 = (== tmp%127#0 c#0)
                (assert tmp%128#0)
                let y#0: bytes = a#0
                let y#0: bytes = (b& y#0 d#0)
                let tmp%129#0: uint64 = (== y#0 a#0)
                (assert tmp%129#0)
                let y#0: bytes = (b| y#0 d#0)
                let tmp%130#0: uint64 = (== y#0 d#0)
                (assert tmp%130#0)
                let y#0: bytes = (b^ y#0 c#0)
                let tmp%131#0: uint64 = (== y#0 b#0)
                (assert tmp%131#0)
                test_cases.stubs.bytes.check_slicing_with_uint64(abc#0)
                return 1u
        
        subroutine test_cases.stubs.bytes.check_slicing_with_uint64(abc: bytes) -> void:
            block@0: // L76
                let one#0: uint64 = 1u
                let ten#0: uint64 = 10u
                let awst_tmp%0#0: bytes = abc#0
                let tmp%1#0: uint64 = (len awst_tmp%0#0)
                let awst_tmp%2#0: uint64 = one#0
                let tmp%3#0: uint64 = (len awst_tmp%0#0)
                let tmp%4#0: uint64 = (< awst_tmp%2#0 tmp%3#0)
                let tmp%5#0: any = (select tmp%1#0 awst_tmp%2#0 tmp%4#0)
                let base_length%6#0: uint64 = (len awst_tmp%0#0)
                let tmp%7#0: bytes = (substring3 awst_tmp%0#0 tmp%5#0 base_length%6#0)
                let tmp%8#0: uint64 = (== tmp%7#0 "bc")
                (assert tmp%8#0)
                let awst_tmp%9#0: bytes = abc#0
                let tmp%10#0: uint64 = (len awst_tmp%9#0)
                let awst_tmp%11#0: uint64 = one#0
                let tmp%12#0: uint64 = (len awst_tmp%9#0)
                let tmp%13#0: uint64 = (< awst_tmp%11#0 tmp%12#0)
                let tmp%14#0: any = (select tmp%10#0 awst_tmp%11#0 tmp%13#0)
                let tmp%15#0: uint64 = (len awst_tmp%9#0)
                let awst_tmp%16#0: uint64 = one#0
                let tmp%17#0: uint64 = (len awst_tmp%9#0)
                let tmp%18#0: uint64 = (< awst_tmp%16#0 tmp%17#0)
                let tmp%19#0: any = (select tmp%15#0 awst_tmp%16#0 tmp%18#0)
                let tmp%20#0: bytes = (substring3 awst_tmp%9#0 tmp%14#0 tmp%19#0)
                let tmp%21#0: uint64 = (== tmp%20#0 "")
                (assert tmp%21#0)
                let awst_tmp%22#0: bytes = abc#0
                let tmp%23#0: uint64 = (len awst_tmp%22#0)
                let awst_tmp%24#0: uint64 = one#0
                let tmp%25#0: uint64 = (len awst_tmp%22#0)
                let tmp%26#0: uint64 = (< awst_tmp%24#0 tmp%25#0)
                let tmp%27#0: any = (select tmp%23#0 awst_tmp%24#0 tmp%26#0)
                let tmp%28#0: bytes = (substring3 awst_tmp%22#0 0u tmp%27#0)
                let tmp%29#0: uint64 = (== tmp%28#0 "a")
                (assert tmp%29#0)
                let awst_tmp%30#0: bytes = test_cases.stubs.bytes.one_to_seven()
                let tmp%31#0: uint64 = (len awst_tmp%30#0)
                let awst_tmp%32#0: uint64 = one#0
                let tmp%33#0: uint64 = (len awst_tmp%30#0)
                let tmp%34#0: uint64 = (< awst_tmp%32#0 tmp%33#0)
                let tmp%35#0: any = (select tmp%31#0 awst_tmp%32#0 tmp%34#0)
                let tmp%36#0: uint64 = (len awst_tmp%30#0)
                let tmp%37#0: uint64 = (len awst_tmp%30#0)
                let tmp%38#0: uint64 = (len awst_tmp%30#0)
                let tmp%39#0: uint64 = (< 1u tmp%38#0)
                let tmp%40#0: any = (select tmp%37#0 1u tmp%39#0)
                let tmp%41#0: uint64 = (- tmp%36#0 tmp%40#0)
                let tmp%42#0: bytes = (substring3 awst_tmp%30#0 tmp%35#0 tmp%41#0)
                let tmp%43#0: uint64 = (== tmp%42#0 "23456")
                (assert tmp%43#0)
                let awst_tmp%44#0: bytes = abc#0
                let tmp%45#0: uint64 = (len awst_tmp%44#0)
                let awst_tmp%46#0: uint64 = 0u
                let tmp%47#0: uint64 = (len awst_tmp%44#0)
                let tmp%48#0: uint64 = (< awst_tmp%46#0 tmp%47#0)
                let tmp%49#0: any = (select tmp%45#0 awst_tmp%46#0 tmp%48#0)
                let tmp%50#0: uint64 = (len awst_tmp%44#0)
                let awst_tmp%51#0: uint64 = ten#0
                let tmp%52#0: uint64 = (len awst_tmp%44#0)
                let tmp%53#0: uint64 = (< awst_tmp%51#0 tmp%52#0)
                let tmp%54#0: any = (select tmp%50#0 awst_tmp%51#0 tmp%53#0)
                let tmp%55#0: bytes = (substring3 awst_tmp%44#0 tmp%49#0 tmp%54#0)
                let tmp%56#0: uint64 = (== tmp%55#0 "abc")
                (assert tmp%56#0)
                return 
        
        subroutine test_cases.stubs.bytes.one_to_seven() -> bytes:
            block@0: // L87
                (log "one_to_seven called")
                return "1234567"
    
    program clear-state:
        subroutine test_cases.stubs.bytes.BytesContract.clear_state_program() -> uint64:
            block@0: // L72
                return 1u