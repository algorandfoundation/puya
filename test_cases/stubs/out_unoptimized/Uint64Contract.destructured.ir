contract test_cases.stubs.uint64.Uint64Contract:
    program approval:
        subroutine test_cases.stubs.uint64.Uint64Contract.approval_program() -> uint64:
            block@0: // L5
                let zero#0: uint64 = 0u
                let one#0: uint64 = 1u
                let two#0: uint64 = 2u
                let five#0: uint64 = 5u
                let three#0: uint64 = 3u
                let sixty#0: uint64 = 60u
                (assert one#0) // Any non-zero number should be Truthy
                let tmp%0#0: uint64 = (! zero#0)
                (assert tmp%0#0) // Zero should beFalsy
                let tmp%1#0: uint64 = (< one#0 five#0)
                (assert tmp%1#0)
                let tmp%2#0: uint64 = (> five#0 one#0)
                (assert tmp%2#0)
                let tmp%3#0: uint64 = (<= one#0 one#0)
                (assert tmp%3#0)
                let tmp%4#0: uint64 = (>= five#0 five#0)
                (assert tmp%4#0)
                let tmp%5#0: uint64 = (+ one#0 five#0)
                let tmp%6#0: uint64 = (== tmp%5#0 6u)
                (assert tmp%6#0)
                let c#0: uint64 = five#0
                let c#0: uint64 = (+ c#0 sixty#0)
                let tmp%7#0: uint64 = (== c#0 65u)
                (assert tmp%7#0)
                let tmp%8#0: uint64 = (- sixty#0 five#0)
                let tmp%9#0: uint64 = (== tmp%8#0 55u)
                (assert tmp%9#0)
                let c#0: uint64 = (- c#0 five#0)
                let tmp%10#0: uint64 = (== c#0 60u)
                (assert tmp%10#0)
                let tmp%11#0: uint64 = (/ sixty#0 five#0)
                let tmp%12#0: uint64 = (== tmp%11#0 12u)
                (assert tmp%12#0)
                let c#0: uint64 = (/ c#0 five#0)
                let tmp%13#0: uint64 = (== c#0 12u)
                (assert tmp%13#0)
                let tmp%14#0: uint64 = (* five#0 sixty#0)
                let tmp%15#0: uint64 = (== tmp%14#0 300u)
                (assert tmp%15#0)
                let tmp%16#0: uint64 = (exp five#0 three#0)
                let tmp%17#0: uint64 = (== tmp%16#0 125u)
                (assert tmp%17#0)
                let c#0: uint64 = (exp c#0 2u)
                let tmp%18#0: uint64 = (== c#0 144u)
                (assert tmp%18#0)
                let tmp%19#0: uint64 = (shl one#0 two#0)
                let tmp%20#0: uint64 = (== tmp%19#0 4u)
                (assert tmp%20#0)
                let c#0: uint64 = (shr c#0 6u)
                let tmp%21#0: uint64 = (== c#0 2u)
                (assert tmp%21#0)
                let c#0: uint64 = (shl c#0 6u)
                let tmp%22#0: uint64 = (== c#0 128u)
                (assert tmp%22#0)
                let tmp%23#0: uint64 = (shr five#0 three#0)
                let tmp%24#0: uint64 = (== tmp%23#0 0u)
                (assert tmp%24#0)
                let tmp%25#0: uint64 = (~ one#0)
                let tmp%26#0: uint64 = (== tmp%25#0 18446744073709551614u)
                (assert tmp%26#0)
                let true#0: uint64 = 1u
                let false#0: uint64 = 0u
                goto true#0 ? block@2 : block@1
            block@1: // ternary_true_L55
                let ternary_result%0#0: uint64 = true#0
                goto block@3
            block@2: // ternary_false_L55
                let ternary_result%0#0: uint64 = true#0
                goto block@3
            block@3: // ternary_merge_L55
                let tmp%27#0: uint64 = (== ternary_result%0#0 true#0)
                (assert tmp%27#0)
                goto true#0 ? block@5 : block@4
            block@4: // ternary_true_L56
                let ternary_result%1#0: uint64 = true#0
                goto block@6
            block@5: // ternary_false_L56
                let ternary_result%1#0: uint64 = false#0
                goto block@6
            block@6: // ternary_merge_L56
                let tmp%28#0: uint64 = (== ternary_result%1#0 false#0)
                (assert tmp%28#0)
                goto false#0 ? block@8 : block@7
            block@7: // ternary_true_L57
                let ternary_result%2#0: uint64 = false#0
                goto block@9
            block@8: // ternary_false_L57
                let ternary_result%2#0: uint64 = true#0
                goto block@9
            block@9: // ternary_merge_L57
                let tmp%29#0: uint64 = (== ternary_result%2#0 false#0)
                (assert tmp%29#0)
                goto false#0 ? block@11 : block@10
            block@10: // ternary_true_L58
                let ternary_result%3#0: uint64 = false#0
                goto block@12
            block@11: // ternary_false_L58
                let ternary_result%3#0: uint64 = false#0
                goto block@12
            block@12: // ternary_merge_L58
                let tmp%30#0: uint64 = (== ternary_result%3#0 false#0)
                (assert tmp%30#0)
                goto true#0 ? block@13 : block@14
            block@13: // ternary_true_L59
                let ternary_result%4#0: uint64 = true#0
                goto block@15
            block@14: // ternary_false_L59
                let ternary_result%4#0: uint64 = true#0
                goto block@15
            block@15: // ternary_merge_L59
                let tmp%31#0: uint64 = (== ternary_result%4#0 true#0)
                (assert tmp%31#0)
                goto true#0 ? block@16 : block@17
            block@16: // ternary_true_L60
                let ternary_result%5#0: uint64 = true#0
                goto block@18
            block@17: // ternary_false_L60
                let ternary_result%5#0: uint64 = false#0
                goto block@18
            block@18: // ternary_merge_L60
                let tmp%32#0: uint64 = (== ternary_result%5#0 true#0)
                (assert tmp%32#0)
                goto false#0 ? block@19 : block@20
            block@19: // ternary_true_L61
                let ternary_result%6#0: uint64 = false#0
                goto block@21
            block@20: // ternary_false_L61
                let ternary_result%6#0: uint64 = true#0
                goto block@21
            block@21: // ternary_merge_L61
                let tmp%33#0: uint64 = (== ternary_result%6#0 true#0)
                (assert tmp%33#0)
                goto false#0 ? block@22 : block@23
            block@22: // ternary_true_L62
                let ternary_result%7#0: uint64 = false#0
                goto block@24
            block@23: // ternary_false_L62
                let ternary_result%7#0: uint64 = false#0
                goto block@24
            block@24: // ternary_merge_L62
                let tmp%34#0: uint64 = (== ternary_result%7#0 false#0)
                (assert tmp%34#0)
                let tmp%35#0: uint64 = (& one#0 five#0)
                let tmp%36#0: uint64 = (== tmp%35#0 one#0)
                (assert tmp%36#0)
                let tmp%37#0: uint64 = (| sixty#0 five#0)
                let tmp%38#0: uint64 = (== tmp%37#0 61u)
                (assert tmp%38#0)
                let tmp%39#0: uint64 = (^ sixty#0 five#0)
                let tmp%40#0: uint64 = (== tmp%39#0 57u)
                (assert tmp%40#0)
                let y#0: uint64 = 254u
                let y#0: uint64 = (& y#0 31u)
                let tmp%41#0: uint64 = (== y#0 30u)
                (assert tmp%41#0)
                let y#0: uint64 = (| y#0 54u)
                let tmp%42#0: uint64 = (== y#0 62u)
                (assert tmp%42#0)
                let y#0: uint64 = (^ y#0 255u)
                let tmp%43#0: uint64 = (== y#0 193u)
                (assert tmp%43#0)
                let tmp%44#0: uint64 = (sqrt 17u)
                let tmp%45#0: uint64 = (sqrt 16u)
                let tmp%46#0: uint64 = (== tmp%44#0 tmp%45#0)
                (assert tmp%46#0)
                let tmp%47#0: uint64 = (== one#0 one#0)
                (assert tmp%47#0)
                return 1u
    
    program clear-state:
        subroutine test_cases.stubs.uint64.Uint64Contract.clear_state_program() -> uint64:
            block@0: // L82
                let tmp%0#0: uint64 = (== 0u 0u)
                (assert tmp%0#0)
                return 1u