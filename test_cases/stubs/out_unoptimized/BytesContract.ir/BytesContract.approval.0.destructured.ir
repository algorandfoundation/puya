main test_cases.stubs.bytes.BytesContract.approval_program:
    block@0: // L5
        let tmp%0#0: bool = (== QmFzZSA2NCBlbmNvZGVk 0x4261736520363420656e636f646564)
        (assert tmp%0#0)
        let tmp%1#0: bool = (== IJQXGZJAGMZCAZLOMNXWIZLE 0x4261736520333220656e636f646564)
        (assert tmp%1#0)
        let tmp%2#0: bool = (== 0x4261736520313620656e636f646564 0x4261736520313620656e636f646564)
        (assert tmp%2#0)
        let tmp%3#0: uint64 = (len QmFzZSA2NCBlbmNvZGVk)
        let tmp%4#0: bool = (!= tmp%3#0 0u)
        (assert tmp%4#0) // Non empty bytes should be Truthy
        let tmp%5#0: uint64 = (len 0x)
        let tmp%6#0: bool = (== tmp%5#0 0u)
        (assert tmp%6#0) // Empty bytes should be Falsy
        let tmp%7#0: bytes = (concat 0x61 0x62)
        let tmp%8#0: bool = (== tmp%7#0 0x6162)
        (assert tmp%8#0)
        let c#1: bytes = (concat 0x63 0x64)
        let tmp%9#0: bool = (== c#1 0x6364)
        (assert tmp%9#0)
        let tmp%10#0: bytes = ((extract 0 1) 0x616263)
        let tmp%11#0: bool = (== tmp%10#0 0x61)
        (assert tmp%11#0)
        let length%0#0: uint64 = (len 0x616263)
        let is_out_of_bounds%0#0: bool = (>= 1u length%0#0)
        let bounded_index%0#0: uint64 = (select 1u length%0#0 is_out_of_bounds%0#0)
        let tmp%12#0: bytes = (substring3 0x616263 bounded_index%0#0 length%0#0)
        let tmp%13#0: bool = (== tmp%12#0 0x6263)
        (assert tmp%13#0)
        let length%1#0: uint64 = (len 0x616263)
        let is_out_of_bounds%1#0: bool = (>= 1u length%1#0)
        let bounded_index%1#0: uint64 = (select 1u length%1#0 is_out_of_bounds%1#0)
        let is_out_of_bounds%2#0: bool = (>= 1u length%1#0)
        let bounded_index%2#0: uint64 = (select 1u length%1#0 is_out_of_bounds%2#0)
        let tmp%14#0: bytes = (substring3 0x616263 bounded_index%1#0 bounded_index%2#0)
        let tmp%15#0: bool = (== tmp%14#0 0x)
        (assert tmp%15#0)
        let length%2#0: uint64 = (len 0x616263)
        let is_out_of_bounds%3#0: bool = (>= 1u length%2#0)
        let bounded_index%3#0: uint64 = (select 1u length%2#0 is_out_of_bounds%3#0)
        let tmp%16#0: bytes = (substring3 0x616263 0u bounded_index%3#0)
        let tmp%17#0: bool = (== tmp%16#0 0x61)
        (assert tmp%17#0)
        let length%3#0: uint64 = (len 0x616263)
        let is_out_of_bounds%4#0: bool = (>= 1u length%3#0)
        let bounded_offset%0#0: uint64 = (select 1u length%3#0 is_out_of_bounds%4#0)
        let bounded_index%4#0: uint64 = (- length%3#0 bounded_offset%0#0)
        let tmp%18#0: bytes = (substring3 0x616263 0u bounded_index%4#0)
        let tmp%19#0: bool = (== tmp%18#0 0x6162)
        (assert tmp%19#0)
        let length%4#0: uint64 = (len 0x616263)
        let is_out_of_bounds%5#0: bool = (>= 2u length%4#0)
        let bounded_offset%1#0: uint64 = (select 2u length%4#0 is_out_of_bounds%5#0)
        let bounded_index%5#0: uint64 = (- length%4#0 bounded_offset%1#0)
        let tmp%20#0: bytes = (substring3 0x616263 bounded_index%5#0 length%4#0)
        let tmp%21#0: bool = (== tmp%20#0 0x6263)
        (assert tmp%21#0)
        let length%5#0: uint64 = (len 0x616263)
        let is_out_of_bounds%6#0: bool = (>= 2u length%5#0)
        let bounded_offset%2#0: uint64 = (select 2u length%5#0 is_out_of_bounds%6#0)
        let bounded_index%6#0: uint64 = (- length%5#0 bounded_offset%2#0)
        let is_out_of_bounds%7#0: bool = (>= 1u length%5#0)
        let bounded_offset%3#0: uint64 = (select 1u length%5#0 is_out_of_bounds%7#0)
        let bounded_index%7#0: uint64 = (- length%5#0 bounded_offset%3#0)
        let tmp%22#0: bytes = (substring3 0x616263 bounded_index%6#0 bounded_index%7#0)
        let tmp%23#0: bool = (== tmp%22#0 0x62)
        (assert tmp%23#0)
        let length%6#0: uint64 = (len 0x31323334353637)
        let is_out_of_bounds%8#0: bool = (>= 1u length%6#0)
        let bounded_index%8#0: uint64 = (select 1u length%6#0 is_out_of_bounds%8#0)
        let is_out_of_bounds%9#0: bool = (>= 1u length%6#0)
        let bounded_offset%4#0: uint64 = (select 1u length%6#0 is_out_of_bounds%9#0)
        let bounded_index%9#0: uint64 = (- length%6#0 bounded_offset%4#0)
        let end_before_start%0#0: bool = (< bounded_index%9#0 bounded_index%8#0)
        let end%0#0: uint64 = (select bounded_index%9#0 bounded_index%8#0 end_before_start%0#0)
        let tmp%24#0: bytes = (substring3 0x31323334353637 bounded_index%8#0 end%0#0)
        let tmp%25#0: bool = (== tmp%24#0 0x3233343536)
        (assert tmp%25#0)
        let length%7#0: uint64 = (len 0x616263)
        let is_out_of_bounds%10#0: bool = (>= 10u length%7#0)
        let bounded_offset%5#0: uint64 = (select 10u length%7#0 is_out_of_bounds%10#0)
        let bounded_index%10#0: uint64 = (- length%7#0 bounded_offset%5#0)
        let is_out_of_bounds%11#0: bool = (>= 10u length%7#0)
        let bounded_index%11#0: uint64 = (select 10u length%7#0 is_out_of_bounds%11#0)
        let end_before_start%1#0: bool = (< bounded_index%11#0 bounded_index%10#0)
        let end%1#0: uint64 = (select bounded_index%11#0 bounded_index%10#0 end_before_start%1#0)
        let tmp%26#0: bytes = (substring3 0x616263 bounded_index%10#0 end%1#0)
        let tmp%27#0: bool = (== tmp%26#0 0x616263)
        (assert tmp%27#0)
        let tmp%28#0: uint64 = (len 0x31)
        let tmp%29#0: bool = (== tmp%28#0 0u)
        let tmp%30#0: bytes = (select 0x31 0x31 tmp%29#0)
        let x#0: bool = (== tmp%30#0 0x31)
        (assert x#0)
        let tmp%31#0: uint64 = (len 0x31)
        let tmp%32#0: bool = (== tmp%31#0 0u)
        let tmp%33#0: bytes = (select 0x31 0x31 tmp%32#0)
        let tmp%34#0: bool = (== tmp%33#0 0x31)
        (assert tmp%34#0)
        let tmp%35#0: uint64 = (len 0x31)
        let tmp%36#0: bool = (== tmp%35#0 0u)
        let tmp%37#0: bytes = (select 0x 0x31 tmp%36#0)
        let tmp%38#0: bool = (== tmp%37#0 0x)
        (assert tmp%38#0)
        let tmp%39#0: uint64 = (len 0x)
        let tmp%40#0: bool = (== tmp%39#0 0u)
        let tmp%41#0: bytes = (select 0x31 0x tmp%40#0)
        let tmp%42#0: bool = (== tmp%41#0 0x)
        (assert tmp%42#0)
        let tmp%43#0: uint64 = (len 0x)
        let tmp%44#0: bool = (== tmp%43#0 0u)
        let tmp%45#0: bytes = (select 0x 0x tmp%44#0)
        let tmp%46#0: bool = (== tmp%45#0 0x)
        (assert tmp%46#0)
        let tmp%47#0: uint64 = (len 0x31)
        let tmp%48#0: bool = (!= tmp%47#0 0u)
        let tmp%49#0: bytes = (select 0x31 0x31 tmp%48#0)
        let tmp%50#0: bool = (== tmp%49#0 0x31)
        (assert tmp%50#0)
        let tmp%51#0: uint64 = (len 0x31)
        let tmp%52#0: bool = (!= tmp%51#0 0u)
        let tmp%53#0: bytes = (select 0x 0x31 tmp%52#0)
        let tmp%54#0: bool = (== tmp%53#0 0x31)
        (assert tmp%54#0)
        let tmp%55#0: uint64 = (len 0x)
        let tmp%56#0: bool = (!= tmp%55#0 0u)
        let tmp%57#0: bytes = (select 0x31 0x tmp%56#0)
        let tmp%58#0: bool = (== tmp%57#0 0x31)
        (assert tmp%58#0)
        let tmp%59#0: uint64 = (len 0x)
        let tmp%60#0: bool = (!= tmp%59#0 0u)
        let tmp%61#0: bytes = (select 0x 0x tmp%60#0)
        let tmp%62#0: bool = (== tmp%61#0 0x)
        (assert tmp%62#0)
        let tmp%63#0: bytes = (b& 0x00 0x0f)
        let tmp%64#0: bool = (== tmp%63#0 0x00)
        (assert tmp%64#0)
        let tmp%65#0: bytes = (b| 0x0f 0xf0)
        let tmp%66#0: bool = (== tmp%65#0 0xff)
        (assert tmp%66#0)
        let tmp%67#0: bytes = (b^ 0x0f 0xff)
        let tmp%68#0: bool = (== tmp%67#0 0xf0)
        (assert tmp%68#0)
        let y#1: bytes = (b& 0x00 0xff)
        let tmp%69#0: bool = (== y#1 0x00)
        (assert tmp%69#0)
        let y#1: bytes = (b| y#1 0xff)
        let tmp%70#0: bool = (== y#1 0xff)
        (assert tmp%70#0)
        let y#1: bytes = (b^ y#1 0xf0)
        let tmp%71#0: bool = (== y#1 0x0f)
        (assert tmp%71#0)
        test_cases.stubs.bytes.check_slicing_with_uint64(0x616263)
        test_cases.stubs.bytes.check_end_before_start_slicing(0x616263)
        let tmp%72#0: uint64 = (txn NumAppArgs)
        let tmp%73#0: bool = (!= tmp%72#0 0u)
        let tmp%74#0: bytes = (select 0x6e6f2061726773 0x61726773 tmp%73#0)
        let tmp%75#0: bool = (== tmp%74#0 0x6e6f2061726773)
        (assert tmp%75#0) // constructor expressions supported
        return 1u

subroutine test_cases.stubs.bytes.check_slicing_with_uint64(abc: bytes) -> void:
    block@0: // L81
        let length%0#0: uint64 = (len abc#0)
        let is_out_of_bounds%0#0: bool = (>= 1u length%0#0)
        let bounded_index%0#0: uint64 = (select 1u length%0#0 is_out_of_bounds%0#0)
        let tmp%0#0: bytes = (substring3 abc#0 bounded_index%0#0 length%0#0)
        let tmp%1#0: bool = (== tmp%0#0 0x6263)
        (assert tmp%1#0)
        let length%1#0: uint64 = (len abc#0)
        let is_out_of_bounds%1#0: bool = (>= 1u length%1#0)
        let bounded_index%1#0: uint64 = (select 1u length%1#0 is_out_of_bounds%1#0)
        let is_out_of_bounds%2#0: bool = (>= 1u length%1#0)
        let bounded_index%2#0: uint64 = (select 1u length%1#0 is_out_of_bounds%2#0)
        let end_before_start%0#0: bool = (< bounded_index%2#0 bounded_index%1#0)
        let end%0#0: uint64 = (select bounded_index%2#0 bounded_index%1#0 end_before_start%0#0)
        let tmp%2#0: bytes = (substring3 abc#0 bounded_index%1#0 end%0#0)
        let tmp%3#0: bool = (== tmp%2#0 0x)
        (assert tmp%3#0)
        let length%2#0: uint64 = (len abc#0)
        let is_out_of_bounds%3#0: bool = (>= 1u length%2#0)
        let bounded_index%3#0: uint64 = (select 1u length%2#0 is_out_of_bounds%3#0)
        let tmp%4#0: bytes = (substring3 abc#0 0u bounded_index%3#0)
        let tmp%5#0: bool = (== tmp%4#0 0x61)
        (assert tmp%5#0)
        let tmp%6#0: bytes = test_cases.stubs.bytes.one_to_seven()
        let length%3#0: uint64 = (len tmp%6#0)
        let is_out_of_bounds%4#0: bool = (>= 1u length%3#0)
        let bounded_index%4#0: uint64 = (select 1u length%3#0 is_out_of_bounds%4#0)
        let is_out_of_bounds%5#0: bool = (>= 1u length%3#0)
        let bounded_offset%0#0: uint64 = (select 1u length%3#0 is_out_of_bounds%5#0)
        let bounded_index%5#0: uint64 = (- length%3#0 bounded_offset%0#0)
        let end_before_start%1#0: bool = (< bounded_index%5#0 bounded_index%4#0)
        let end%1#0: uint64 = (select bounded_index%5#0 bounded_index%4#0 end_before_start%1#0)
        let tmp%7#0: bytes = (substring3 tmp%6#0 bounded_index%4#0 end%1#0)
        let tmp%8#0: bool = (== tmp%7#0 0x3233343536)
        (assert tmp%8#0)
        let length%4#0: uint64 = (len abc#0)
        let is_out_of_bounds%6#0: bool = (>= 0u length%4#0)
        let bounded_index%6#0: uint64 = (select 0u length%4#0 is_out_of_bounds%6#0)
        let is_out_of_bounds%7#0: bool = (>= 10u length%4#0)
        let bounded_index%7#0: uint64 = (select 10u length%4#0 is_out_of_bounds%7#0)
        let tmp%9#0: bytes = (substring3 abc#0 bounded_index%6#0 bounded_index%7#0)
        let tmp%10#0: bool = (== tmp%9#0 0x616263)
        (assert tmp%10#0)
        return 

subroutine test_cases.stubs.bytes.check_end_before_start_slicing(abc: bytes) -> void:
    block@0: // L92
        let length%0#0: uint64 = (len abc#0)
        let is_out_of_bounds%0#0: bool = (>= 10u length%0#0)
        let bounded_index%0#0: uint64 = (select 10u length%0#0 is_out_of_bounds%0#0)
        let is_out_of_bounds%1#0: bool = (>= 1u length%0#0)
        let bounded_index%1#0: uint64 = (select 1u length%0#0 is_out_of_bounds%1#0)
        let end_before_start%0#0: bool = (< bounded_index%1#0 bounded_index%0#0)
        let end%0#0: uint64 = (select bounded_index%1#0 bounded_index%0#0 end_before_start%0#0)
        let tmp%0#0: bytes = (substring3 abc#0 bounded_index%0#0 end%0#0)
        let tmp%1#0: bool = (== tmp%0#0 0x)
        (assert tmp%1#0)
        let length%1#0: uint64 = (len abc#0)
        let is_out_of_bounds%2#0: bool = (>= 10u length%1#0)
        let bounded_offset%0#0: uint64 = (select 10u length%1#0 is_out_of_bounds%2#0)
        let bounded_index%2#0: uint64 = (- length%1#0 bounded_offset%0#0)
        let is_out_of_bounds%3#0: bool = (>= 12u length%1#0)
        let bounded_offset%1#0: uint64 = (select 12u length%1#0 is_out_of_bounds%3#0)
        let bounded_index%3#0: uint64 = (- length%1#0 bounded_offset%1#0)
        let end_before_start%1#0: bool = (< bounded_index%3#0 bounded_index%2#0)
        let end%1#0: uint64 = (select bounded_index%3#0 bounded_index%2#0 end_before_start%1#0)
        let tmp%2#0: bytes = (substring3 abc#0 bounded_index%2#0 end%1#0)
        let tmp%3#0: bool = (== tmp%2#0 0x)
        (assert tmp%3#0)
        let length%2#0: uint64 = (len abc#0)
        let is_out_of_bounds%4#0: bool = (>= 10u length%2#0)
        let bounded_index%4#0: uint64 = (select 10u length%2#0 is_out_of_bounds%4#0)
        let is_out_of_bounds%5#0: bool = (>= 1u length%2#0)
        let bounded_index%5#0: uint64 = (select 1u length%2#0 is_out_of_bounds%5#0)
        let end_before_start%2#0: bool = (< bounded_index%5#0 bounded_index%4#0)
        let end%2#0: uint64 = (select bounded_index%5#0 bounded_index%4#0 end_before_start%2#0)
        let tmp%4#0: bytes = (substring3 abc#0 bounded_index%4#0 end%2#0)
        let tmp%5#0: bool = (== tmp%4#0 0x)
        (assert tmp%5#0)
        return 

subroutine test_cases.stubs.bytes.one_to_seven() -> bytes:
    block@0: // L101
        (log "one_to_seven called")
        return 0x31323334353637