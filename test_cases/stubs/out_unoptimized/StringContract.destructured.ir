contract test_cases.stubs.string.StringContract:
    program approval:
        subroutine test_cases.stubs.string.StringContract.approval_program() -> uint64:
            block@0: // L5
                let empty#0: bytes = ""
                let tmp%0#0: uint64 = (len empty#0)
                let tmp%1#0: uint64 = (! tmp%0#0)
                (assert tmp%1#0) // Empty bytes should be False
                let non_empty#0: bytes = " "
                let tmp%2#0: uint64 = (len non_empty#0)
                (assert tmp%2#0) // Non-empty bytes should be True
                let tmp%3#0: bytes = (concat "a" "b")
                let tmp%4#0: uint64 = (== tmp%3#0 "ab")
                (assert tmp%4#0)
                let tmp%5#0: bytes = (concat "a" "b")
                let tmp%6#0: uint64 = (== tmp%5#0 "ab")
                (assert tmp%6#0)
                let tmp%7#0: bytes = (concat "a" "b")
                let tmp%8#0: uint64 = (== tmp%7#0 "ab")
                (assert tmp%8#0)
                let tmp%9#0: uint64 = (!= empty#0 non_empty#0)
                (assert tmp%9#0)
                let c#0: bytes = "c"
                let c#0: bytes = (concat c#0 "d")
                let c#0: bytes = (concat c#0 "e")
                let tmp%10#0: uint64 = (== c#0 "cde")
                (assert tmp%10#0)
                let tmp%11#0: uint64 = puyapy_lib_bytes.is_substring("brown fox", "The quick brown fox jumped over the lazy dog")
                (assert tmp%11#0)
                let tmp%12#0: uint64 = puyapy_lib_bytes.is_substring("red fox", "The quick brown fox jumped over the lazy dog")
                let tmp%13#0: uint64 = (! tmp%12#0)
                (assert tmp%13#0)
                return 1u
        
        subroutine puyapy_lib_bytes.is_substring(item: bytes, sequence: bytes) -> uint64:
            block@0: // L4
                let start#0: uint64 = 0u
                goto block@1
            block@1: // while_top_L11
                let tmp%0#0: uint64 = (len item#0)
                let tmp%1#0: uint64 = (+ start#0 tmp%0#0)
                let tmp%2#0: uint64 = (len sequence#0)
                let tmp%3#0: uint64 = (<= tmp%1#0 tmp%2#0)
                goto tmp%3#0 ? block@2 : block@5
            block@2: // while_body_L11
                let tmp%4#0: uint64 = (len item#0)
                let tmp%5#0: uint64 = (+ start#0 tmp%4#0)
                let tmp%6#0: bytes = (substring3 sequence#0 start#0 tmp%5#0)
                let tmp%7#0: uint64 = (== item#0 tmp%6#0)
                goto tmp%7#0 ? block@3 : block@4
            block@3: // if_body_L12
                return 1u
            block@4: // after_if_else_L12
                let start#0: uint64 = (+ start#0 1u)
                goto block@1
            block@5: // after_while_L11
                return 0u
    
    program clear-state:
        subroutine test_cases.stubs.string.StringContract.clear_state_program() -> uint64:
            block@0: // L27
                return 1u