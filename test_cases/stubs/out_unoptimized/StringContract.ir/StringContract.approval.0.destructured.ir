main test_cases.stubs.string.StringContract.approval_program:
    block@0: // L5
        let tmp%0#0: uint64 = (len "")
        let tmp%1#0: bool = (== tmp%0#0 0u)
        (assert tmp%1#0) // Empty bytes should be False
        let tmp%2#0: uint64 = (len " ")
        let tmp%3#0: bool = (!= tmp%2#0 0u)
        (assert tmp%3#0) // Non-empty bytes should be True
        let tmp%4#0: bytes = (concat "a" "b")
        let tmp%5#0: bool = (== tmp%4#0 "ab")
        (assert tmp%5#0)
        let tmp%6#0: bytes = (concat "a" "b")
        let tmp%7#0: bool = (== tmp%6#0 "ab")
        (assert tmp%7#0)
        let tmp%8#0: bytes = (concat "a" "b")
        let tmp%9#0: bool = (== tmp%8#0 "ab")
        (assert tmp%9#0)
        let tmp%10#0: bool = (!= "" " ")
        (assert tmp%10#0)
        let c#1: string = (concat "c" "d")
        let c#1: string = (concat c#1 "e")
        let tmp%11#0: bool = (== c#1 "cde")
        (assert tmp%11#0)
        let tmp%12#0: bool = _puya_lib.bytes_.is_substring("brown fox", "The quick brown fox jumped over the lazy dog")
        (assert tmp%12#0)
        let tmp%13#0: bool = _puya_lib.bytes_.is_substring("red fox", "The quick brown fox jumped over the lazy dog")
        let tmp%14#0: bool = (! tmp%13#0)
        (assert tmp%14#0)
        let tmp%15#0: uint64 = (len "")
        let tmp%16#0: uint64 = (len "abcdefg")
        let tmp%17#0: bool = (> tmp%15#0 tmp%16#0)
        goto tmp%17#0 ? block@1 : block@2
    block@1: // ternary_true_L26
        let ternary_result%0#0: bool = 0u
        goto block@3
    block@2: // ternary_false_L26
        let tmp%18#0: string = (extract3 "abcdefg" 0u tmp%15#0)
        let ternary_result%0#0: bool = (== tmp%18#0 "")
        goto block@3
    block@3: // ternary_merge_L26
        (assert ternary_result%0#0)
        let tmp%19#0: uint64 = (len "a")
        let tmp%20#0: uint64 = (len "abcdefg")
        let tmp%21#0: bool = (> tmp%19#0 tmp%20#0)
        goto tmp%21#0 ? block@4 : block@5
    block@4: // ternary_true_L27
        let ternary_result%1#0: bool = 0u
        goto block@6
    block@5: // ternary_false_L27
        let tmp%22#0: string = (extract3 "abcdefg" 0u tmp%19#0)
        let ternary_result%1#0: bool = (== tmp%22#0 "a")
        goto block@6
    block@6: // ternary_merge_L27
        (assert ternary_result%1#0)
        let tmp%23#0: uint64 = (len "ab")
        let tmp%24#0: uint64 = (len "abcdefg")
        let tmp%25#0: bool = (> tmp%23#0 tmp%24#0)
        goto tmp%25#0 ? block@7 : block@8
    block@7: // ternary_true_L28
        let ternary_result%2#0: bool = 0u
        goto block@9
    block@8: // ternary_false_L28
        let tmp%26#0: string = (extract3 "abcdefg" 0u tmp%23#0)
        let ternary_result%2#0: bool = (== tmp%26#0 "ab")
        goto block@9
    block@9: // ternary_merge_L28
        (assert ternary_result%2#0)
        let tmp%27#0: uint64 = (len "b")
        let tmp%28#0: uint64 = (len "abcdefg")
        let tmp%29#0: bool = (> tmp%27#0 tmp%28#0)
        goto tmp%29#0 ? block@10 : block@11
    block@10: // ternary_true_L29
        let ternary_result%3#0: bool = 0u
        goto block@12
    block@11: // ternary_false_L29
        let tmp%30#0: string = (extract3 "abcdefg" 0u tmp%27#0)
        let ternary_result%3#0: bool = (== tmp%30#0 "b")
        goto block@12
    block@12: // ternary_merge_L29
        let tmp%31#0: bool = (! ternary_result%3#0)
        (assert tmp%31#0)
        let tmp%32#0: uint64 = (len "abcdefg")
        let tmp%33#0: uint64 = (len "abcdefg")
        let tmp%34#0: bool = (> tmp%32#0 tmp%33#0)
        goto tmp%34#0 ? block@13 : block@14
    block@13: // ternary_true_L30
        let ternary_result%4#0: bool = 0u
        goto block@15
    block@14: // ternary_false_L30
        let tmp%35#0: string = (extract3 "abcdefg" 0u tmp%32#0)
        let ternary_result%4#0: bool = (== tmp%35#0 "abcdefg")
        goto block@15
    block@15: // ternary_merge_L30
        (assert ternary_result%4#0)
        let awst_tmp%0#0: bytes = (concat "abcdefg" "!")
        let tmp%36#0: uint64 = (len awst_tmp%0#0)
        let tmp%37#0: uint64 = (len "abcdefg")
        let tmp%38#0: bool = (> tmp%36#0 tmp%37#0)
        goto tmp%38#0 ? block@16 : block@17
    block@16: // ternary_true_L31
        let ternary_result%5#0: bool = 0u
        goto block@18
    block@17: // ternary_false_L31
        let tmp%39#0: string = (extract3 "abcdefg" 0u tmp%36#0)
        let ternary_result%5#0: bool = (== tmp%39#0 awst_tmp%0#0)
        goto block@18
    block@18: // ternary_merge_L31
        let tmp%40#0: bool = (! ternary_result%5#0)
        (assert tmp%40#0)
        let tmp%41#0: uint64 = (len "")
        let tmp%42#0: uint64 = (len "abcdefg")
        let tmp%43#0: bool = (> tmp%41#0 tmp%42#0)
        goto tmp%43#0 ? block@19 : block@20
    block@19: // ternary_true_L33
        let ternary_result%6#0: bool = 0u
        goto block@21
    block@20: // ternary_false_L33
        let tmp%44#0: uint64 = (- tmp%42#0 tmp%41#0)
        let tmp%45#0: string = (extract3 "abcdefg" tmp%44#0 tmp%41#0)
        let ternary_result%6#0: bool = (== tmp%45#0 "")
        goto block@21
    block@21: // ternary_merge_L33
        (assert ternary_result%6#0)
        let tmp%46#0: uint64 = (len "g")
        let tmp%47#0: uint64 = (len "abcdefg")
        let tmp%48#0: bool = (> tmp%46#0 tmp%47#0)
        goto tmp%48#0 ? block@22 : block@23
    block@22: // ternary_true_L34
        let ternary_result%7#0: bool = 0u
        goto block@24
    block@23: // ternary_false_L34
        let tmp%49#0: uint64 = (- tmp%47#0 tmp%46#0)
        let tmp%50#0: string = (extract3 "abcdefg" tmp%49#0 tmp%46#0)
        let ternary_result%7#0: bool = (== tmp%50#0 "g")
        goto block@24
    block@24: // ternary_merge_L34
        (assert ternary_result%7#0)
        let tmp%51#0: uint64 = (len "fg")
        let tmp%52#0: uint64 = (len "abcdefg")
        let tmp%53#0: bool = (> tmp%51#0 tmp%52#0)
        goto tmp%53#0 ? block@25 : block@26
    block@25: // ternary_true_L35
        let ternary_result%8#0: bool = 0u
        goto block@27
    block@26: // ternary_false_L35
        let tmp%54#0: uint64 = (- tmp%52#0 tmp%51#0)
        let tmp%55#0: string = (extract3 "abcdefg" tmp%54#0 tmp%51#0)
        let ternary_result%8#0: bool = (== tmp%55#0 "fg")
        goto block@27
    block@27: // ternary_merge_L35
        (assert ternary_result%8#0)
        let tmp%56#0: uint64 = (len "f")
        let tmp%57#0: uint64 = (len "abcdefg")
        let tmp%58#0: bool = (> tmp%56#0 tmp%57#0)
        goto tmp%58#0 ? block@28 : block@29
    block@28: // ternary_true_L36
        let ternary_result%9#0: bool = 0u
        goto block@30
    block@29: // ternary_false_L36
        let tmp%59#0: uint64 = (- tmp%57#0 tmp%56#0)
        let tmp%60#0: string = (extract3 "abcdefg" tmp%59#0 tmp%56#0)
        let ternary_result%9#0: bool = (== tmp%60#0 "f")
        goto block@30
    block@30: // ternary_merge_L36
        let tmp%61#0: bool = (! ternary_result%9#0)
        (assert tmp%61#0)
        let tmp%62#0: uint64 = (len "abcdefg")
        let tmp%63#0: uint64 = (len "abcdefg")
        let tmp%64#0: bool = (> tmp%62#0 tmp%63#0)
        goto tmp%64#0 ? block@31 : block@32
    block@31: // ternary_true_L37
        let ternary_result%10#0: bool = 0u
        goto block@33
    block@32: // ternary_false_L37
        let tmp%65#0: uint64 = (- tmp%63#0 tmp%62#0)
        let tmp%66#0: string = (extract3 "abcdefg" tmp%65#0 tmp%62#0)
        let ternary_result%10#0: bool = (== tmp%66#0 "abcdefg")
        goto block@33
    block@33: // ternary_merge_L37
        (assert ternary_result%10#0)
        let awst_tmp%1#0: bytes = (concat "!" "abcdefg")
        let tmp%67#0: uint64 = (len awst_tmp%1#0)
        let tmp%68#0: uint64 = (len "abcdefg")
        let tmp%69#0: bool = (> tmp%67#0 tmp%68#0)
        goto tmp%69#0 ? block@34 : block@35
    block@34: // ternary_true_L38
        let ternary_result%11#0: bool = 0u
        goto block@36
    block@35: // ternary_false_L38
        let tmp%70#0: uint64 = (- tmp%68#0 tmp%67#0)
        let tmp%71#0: string = (extract3 "abcdefg" tmp%70#0 tmp%67#0)
        let ternary_result%11#0: bool = (== tmp%71#0 awst_tmp%1#0)
        goto block@36
    block@36: // ternary_merge_L38
        let tmp%72#0: bool = (! ternary_result%11#0)
        (assert tmp%72#0)
        let tmp%73#0: bytes = (concat "d" ".")
        let tmp%74#0: string = (concat tmp%73#0 "e")
        let tmp%75#0: bytes = (concat tmp%74#0 ".")
        let tmp%76#0: string = (concat tmp%75#0 "f")
        let tmp%77#0: bool = (== tmp%76#0 "d.e.f")
        (assert tmp%77#0)
        let tmp%78#0: bytes = (concat "d" ".")
        let tmp%79#0: string = (concat tmp%78#0 "e")
        let tmp%80#0: bytes = (concat tmp%79#0 ".")
        let tmp%81#0: string = (concat tmp%80#0 "f")
        let tmp%82#0: bool = (== tmp%81#0 "d.e.f")
        (assert tmp%82#0)
        let tmp%83#0: bytes = (concat "d" ".")
        let tmp%84#0: string = (concat tmp%83#0 "e")
        let tmp%85#0: bytes = (concat tmp%84#0 ".")
        let tmp%86#0: string = (concat tmp%85#0 "f")
        let tmp%87#0: bool = (== tmp%86#0 "d.e.f")
        (assert tmp%87#0)
        let tmp%88#0: bytes = (concat "d" ".")
        let tmp%89#0: string = (concat tmp%88#0 "e")
        let tmp%90#0: bytes = (concat tmp%89#0 ".")
        let tmp%91#0: string = (concat tmp%90#0 "f")
        let tmp%92#0: bool = (== tmp%91#0 "d.e.f")
        (assert tmp%92#0)
        let tmp%93#0: bytes = (concat "d" "")
        let tmp%94#0: string = (concat tmp%93#0 "e")
        let tmp%95#0: bytes = (concat tmp%94#0 "")
        let tmp%96#0: string = (concat tmp%95#0 "f")
        let tmp%97#0: bool = (== tmp%96#0 "def")
        (assert tmp%97#0)
        let tmp%98#0: bool = (== "d" "d")
        (assert tmp%98#0)
        let tmp%99#0: bool = (== "d" "d")
        (assert tmp%99#0)
        let tmp%100#0: uint64 = (txn NumAppArgs)
        let tmp%101#0: bool = (!= tmp%100#0 0u)
        goto tmp%101#0 ? block@37 : block@38
    block@37: // ternary_true_L49
        let ternary_result%12#0: string = "args"
        goto block@39
    block@38: // ternary_false_L49
        let ternary_result%12#0: string = "no args"
        goto block@39
    block@39: // ternary_merge_L49
        let tmp%102#0: bool = (== ternary_result%12#0 "no args")
        (assert tmp%102#0) // constructor expressions supported
        return 1u

subroutine _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> bool:
    block@0: // L4
        let start#0: uint64 = 0u
        goto block@1
    block@1: // while_top_L11
        let tmp%0#0: uint64 = (len item#0)
        let tmp%1#0: uint64 = (+ start#0 tmp%0#0)
        let tmp%2#0: uint64 = (len sequence#0)
        let tmp%3#0: bool = (<= tmp%1#0 tmp%2#0)
        goto tmp%3#0 ? block@2 : block@5
    block@2: // while_body_L12
        let tmp%4#0: uint64 = (len item#0)
        let tmp%5#0: uint64 = (+ start#0 tmp%4#0)
        let tmp%6#0: bytes = (substring3 sequence#0 start#0 tmp%5#0)
        let tmp%7#0: bool = (== item#0 tmp%6#0)
        goto tmp%7#0 ? block@3 : block@4
    block@3: // if_body_L13
        return 1u
    block@4: // after_if_else_L12
        let start#0: uint64 = (+ start#0 1u)
        goto block@1
    block@5: // after_while_L11
        return 0u