main test_cases.stubs.biguint.BigUIntContract.approval_program:
    block@0: // L5
        test_cases.stubs.biguint.compare_biguints(1b, 2b)
        test_cases.stubs.biguint.compare_biguint_vs_uint64(1b, 2u)
        test_cases.stubs.biguint.compare_uint64_vs_biguint(1u, 2b)
        let tmp%0#0: uint64 = (txn NumAppArgs)
        let tmp%1#0: bool = (!= tmp%0#0 0u)
        let tmp%2#0: biguint = (select 5b 1b tmp%1#0)
        let tmp%3#0: bool = (b== tmp%2#0 5b)
        (assert tmp%3#0) // constructor expressions supported
        let tmp%4#0: biguint = (bsqrt 9b)
        let tmp%5#0: biguint = (bsqrt 10b)
        let tmp%6#0: bool = (b== tmp%4#0 tmp%5#0)
        (assert tmp%6#0)
        let tmp%7#0: bool = (b== 1b 1b)
        (assert tmp%7#0)
        return 1u

subroutine test_cases.stubs.biguint.compare_biguints(one: biguint, two: biguint) -> void:
    block@0: // L20
        let tmp%0#0: bool = (b< one#0 two#0)
        (assert tmp%0#0)
        let tmp%1#0: bool = (b<= one#0 two#0)
        (assert tmp%1#0)
        let tmp%2#0: bool = (b== one#0 one#0)
        (assert tmp%2#0)
        let tmp%3#0: bool = (b> two#0 one#0)
        (assert tmp%3#0)
        let tmp%4#0: bool = (b>= two#0 one#0)
        (assert tmp%4#0)
        let tmp%5#0: bool = (b!= one#0 two#0)
        (assert tmp%5#0)
        return 

subroutine test_cases.stubs.biguint.compare_biguint_vs_uint64(one: biguint, two: uint64) -> void:
    block@0: // L30
        let tmp%0#0: biguint = (itob two#0)
        let tmp%1#0: bool = (b< one#0 tmp%0#0)
        (assert tmp%1#0)
        let tmp%2#0: biguint = (itob two#0)
        let tmp%3#0: bool = (b<= one#0 tmp%2#0)
        (assert tmp%3#0)
        let tmp%4#0: bool = (b== one#0 one#0)
        (assert tmp%4#0)
        let tmp%5#0: biguint = (itob two#0)
        let tmp%6#0: bool = (b< one#0 tmp%5#0)
        (assert tmp%6#0)
        let tmp%7#0: biguint = (itob two#0)
        let tmp%8#0: bool = (b<= one#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: biguint = (itob two#0)
        let tmp%10#0: bool = (b!= one#0 tmp%9#0)
        (assert tmp%10#0)
        return 

subroutine test_cases.stubs.biguint.compare_uint64_vs_biguint(one: uint64, two: biguint) -> void:
    block@0: // L40
        let tmp%0#0: biguint = (itob one#0)
        let tmp%1#0: bool = (b> two#0 tmp%0#0)
        (assert tmp%1#0)
        let tmp%2#0: biguint = (itob one#0)
        let tmp%3#0: bool = (b>= two#0 tmp%2#0)
        (assert tmp%3#0)
        let tmp%4#0: bool = (== one#0 one#0)
        (assert tmp%4#0)
        let tmp%5#0: biguint = (itob one#0)
        let tmp%6#0: bool = (b> two#0 tmp%5#0)
        (assert tmp%6#0)
        let tmp%7#0: biguint = (itob one#0)
        let tmp%8#0: bool = (b>= two#0 tmp%7#0)
        (assert tmp%8#0)
        let tmp%9#0: biguint = (itob one#0)
        let tmp%10#0: bool = (b!= two#0 tmp%9#0)
        (assert tmp%10#0)
        return 