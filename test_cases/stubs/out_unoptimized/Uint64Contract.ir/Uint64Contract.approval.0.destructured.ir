main test_cases.stubs.uint64.Uint64Contract.approval_program:
    block@0: // L5
        let tmp%0#0: bool = (!= 1u 0u)
        (assert tmp%0#0) // Any non-zero number should be Truthy
        let tmp%1#0: bool = (== 0u 0u)
        (assert tmp%1#0) // Zero should beFalsy
        let tmp%2#0: bool = (< 1u 5u)
        (assert tmp%2#0)
        let tmp%3#0: bool = (> 5u 1u)
        (assert tmp%3#0)
        let tmp%4#0: bool = (<= 1u 1u)
        (assert tmp%4#0)
        let tmp%5#0: bool = (>= 5u 5u)
        (assert tmp%5#0)
        let tmp%6#0: uint64 = (+ 1u 5u)
        let tmp%7#0: bool = (== tmp%6#0 6u)
        (assert tmp%7#0)
        let materialized_values%0#0: uint64 = (+ 5u 60u)
        let c#1: uint64 = materialized_values%0#0
        let tmp%8#0: bool = (== c#1 65u)
        (assert tmp%8#0)
        let tmp%9#0: uint64 = (- 60u 5u)
        let tmp%10#0: bool = (== tmp%9#0 55u)
        (assert tmp%10#0)
        let materialized_values%1#0: uint64 = (- c#1 5u)
        let c#1: uint64 = materialized_values%1#0
        let tmp%11#0: bool = (== c#1 60u)
        (assert tmp%11#0)
        let tmp%12#0: uint64 = (/ 60u 5u)
        let tmp%13#0: bool = (== tmp%12#0 12u)
        (assert tmp%13#0)
        let materialized_values%2#0: uint64 = (/ c#1 5u)
        let c#1: uint64 = materialized_values%2#0
        let tmp%14#0: bool = (== c#1 12u)
        (assert tmp%14#0)
        let tmp%15#0: uint64 = (* 5u 60u)
        let tmp%16#0: bool = (== tmp%15#0 300u)
        (assert tmp%16#0)
        let tmp%17#0: uint64 = (exp 5u 3u)
        let tmp%18#0: bool = (== tmp%17#0 125u)
        (assert tmp%18#0)
        let materialized_values%3#0: uint64 = (exp c#1 2u)
        let c#1: uint64 = materialized_values%3#0
        let tmp%19#0: bool = (== c#1 144u)
        (assert tmp%19#0)
        let tmp%20#0: uint64 = (shl 1u 2u)
        let tmp%21#0: bool = (== tmp%20#0 4u)
        (assert tmp%21#0)
        let materialized_values%4#0: uint64 = (shr c#1 6u)
        let c#1: uint64 = materialized_values%4#0
        let tmp%22#0: bool = (== c#1 2u)
        (assert tmp%22#0)
        let materialized_values%5#0: uint64 = (shl c#1 6u)
        let c#1: uint64 = materialized_values%5#0
        let tmp%23#0: bool = (== c#1 128u)
        (assert tmp%23#0)
        let tmp%24#0: uint64 = (shr 5u 3u)
        let tmp%25#0: bool = (== tmp%24#0 0u)
        (assert tmp%25#0)
        let tmp%26#0: uint64 = (~ 1u)
        let tmp%27#0: bool = (== tmp%26#0 18446744073709551614u)
        (assert tmp%27#0)
        let tmp%28#0: bool = (== 1u 0u)
        let select%0#0: uint64 = (select 1u 1u tmp%28#0)
        let tmp%29#0: bool = (== select%0#0 1u)
        (assert tmp%29#0)
        let tmp%30#0: bool = (== 1u 0u)
        let select%1#0: uint64 = (select 0u 1u tmp%30#0)
        let tmp%31#0: bool = (== select%1#0 0u)
        (assert tmp%31#0)
        let tmp%32#0: bool = (== 0u 0u)
        let select%2#0: uint64 = (select 1u 0u tmp%32#0)
        let tmp%33#0: bool = (== select%2#0 0u)
        (assert tmp%33#0)
        let tmp%34#0: bool = (== 0u 0u)
        let select%3#0: uint64 = (select 0u 0u tmp%34#0)
        let tmp%35#0: bool = (== select%3#0 0u)
        (assert tmp%35#0)
        let tmp%36#0: bool = (!= 1u 0u)
        let select%4#0: uint64 = (select 1u 1u tmp%36#0)
        let tmp%37#0: bool = (== select%4#0 1u)
        (assert tmp%37#0)
        let tmp%38#0: bool = (!= 1u 0u)
        let select%5#0: uint64 = (select 0u 1u tmp%38#0)
        let tmp%39#0: bool = (== select%5#0 1u)
        (assert tmp%39#0)
        let tmp%40#0: bool = (!= 0u 0u)
        let select%6#0: uint64 = (select 1u 0u tmp%40#0)
        let tmp%41#0: bool = (== select%6#0 1u)
        (assert tmp%41#0)
        let tmp%42#0: bool = (!= 0u 0u)
        let select%7#0: uint64 = (select 0u 0u tmp%42#0)
        let tmp%43#0: bool = (== select%7#0 0u)
        (assert tmp%43#0)
        let tmp%44#0: uint64 = (& 1u 5u)
        let tmp%45#0: bool = (== tmp%44#0 1u)
        (assert tmp%45#0)
        let tmp%46#0: uint64 = (| 60u 5u)
        let tmp%47#0: bool = (== tmp%46#0 61u)
        (assert tmp%47#0)
        let tmp%48#0: uint64 = (^ 60u 5u)
        let tmp%49#0: bool = (== tmp%48#0 57u)
        (assert tmp%49#0)
        let materialized_values%6#0: uint64 = (& 254u 31u)
        let y#1: uint64 = materialized_values%6#0
        let tmp%50#0: bool = (== y#1 30u)
        (assert tmp%50#0)
        let materialized_values%7#0: uint64 = (| y#1 54u)
        let y#1: uint64 = materialized_values%7#0
        let tmp%51#0: bool = (== y#1 62u)
        (assert tmp%51#0)
        let materialized_values%8#0: uint64 = (^ y#1 255u)
        let y#1: uint64 = materialized_values%8#0
        let tmp%52#0: bool = (== y#1 193u)
        (assert tmp%52#0)
        let tmp%53#0: uint64 = (sqrt 17u)
        let tmp%54#0: uint64 = (sqrt 16u)
        let tmp%55#0: bool = (== tmp%53#0 tmp%54#0)
        (assert tmp%55#0)
        let tmp%56#0: bool = (== 1u 1u)
        (assert tmp%56#0)
        let tmp%57#0: uint64 = (txn NumAppArgs)
        let tmp%58#0: bool = (!= tmp%57#0 0u)
        let select%8#0: uint64 = (select 5u 1u tmp%58#0)
        let tmp%59#0: bool = (== select%8#0 5u)
        (assert tmp%59#0) // constructor expressions supported
        return 1u