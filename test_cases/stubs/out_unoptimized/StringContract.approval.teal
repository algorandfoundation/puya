#pragma version 10

test_cases.stubs.string.StringContract.approval_program:
    int 0
    dupn 21
    // stubs/string.py:6
    // empty = String()
    byte ""
    // stubs/string.py:7
    // assert not empty, "Empty bytes should be False"
    dup
    len
    !
    assert // Empty bytes should be False
    // stubs/string.py:8
    // non_empty = String(" ")
    byte " "
    // stubs/string.py:9
    // assert non_empty, "Non-empty bytes should be True"
    dup
    len
    assert // Non-empty bytes should be True
    // stubs/string.py:11
    // assert String("a") + "b" == "ab"
    byte "a"
    byte "b"
    concat
    byte "ab"
    ==
    assert
    // stubs/string.py:12
    // assert String("a") + "b" == String("ab")
    byte "a"
    byte "b"
    concat
    byte "ab"
    ==
    assert
    // stubs/string.py:13
    // assert "a" + String("b") == String("ab")
    byte "a"
    byte "b"
    concat
    byte "ab"
    ==
    assert
    // stubs/string.py:15
    // assert empty != non_empty
    !=
    assert
    // stubs/string.py:17
    // c = String("c")
    byte "c"
    // stubs/string.py:18
    // c += "d"
    byte "d"
    concat
    // stubs/string.py:19
    // c += String("e")
    byte "e"
    concat
    // stubs/string.py:20
    // assert c == "cde"
    byte "cde"
    ==
    assert
    // stubs/string.py:22
    // assert "brown fox" in String("The quick brown fox jumped over the lazy dog")
    byte "brown fox"
    byte "The quick brown fox jumped over the lazy dog"
    callsub is_substring
    assert
    // stubs/string.py:23
    // assert String("red fox") not in String("The quick brown fox jumped over the lazy dog")
    byte "red fox"
    byte "The quick brown fox jumped over the lazy dog"
    callsub is_substring
    !
    assert
    // stubs/string.py:25
    // alpha = String("abcdefg")
    byte "abcdefg"
    dup
    swap
    // stubs/string.py:26
    // assert alpha.startswith("")
    byte ""
    dup
    cover 2
    len
    swap
    dup
    cover 2
    len
    >
    bz main_ternary_false@2
    int 0
    b main_ternary_merge@3

main_ternary_false@2:
    // stubs/string.py:26
    // assert alpha.startswith("")
    dig 1
    dup
    len
    dig 2
    int 0
    uncover 2
    extract3
    swap
    ==

main_ternary_merge@3:
    // stubs/string.py:26
    // assert alpha.startswith("")
    assert
    // stubs/string.py:27
    // assert alpha.startswith("a")
    byte "a"
    dup
    bury 16
    len
    dig 3
    dup
    bury 12
    len
    >
    bz main_ternary_false@5
    int 0
    b main_ternary_merge@6

main_ternary_false@5:
    // stubs/string.py:27
    // assert alpha.startswith("a")
    dig 14
    dup
    len
    dig 11
    int 0
    uncover 2
    extract3
    swap
    ==

main_ternary_merge@6:
    // stubs/string.py:27
    // assert alpha.startswith("a")
    assert
    // stubs/string.py:28
    // assert alpha.startswith("ab")
    byte "ab"
    dup
    bury 10
    len
    dig 3
    dup
    bury 10
    len
    >
    bz main_ternary_false@8
    int 0
    b main_ternary_merge@9

main_ternary_false@8:
    // stubs/string.py:28
    // assert alpha.startswith("ab")
    dig 8
    dup
    len
    dig 9
    int 0
    uncover 2
    extract3
    swap
    ==

main_ternary_merge@9:
    // stubs/string.py:28
    // assert alpha.startswith("ab")
    assert
    // stubs/string.py:29
    // assert not alpha.startswith("b")
    byte "b"
    dup
    bury 8
    len
    dig 3
    dup
    bury 8
    len
    >
    bz main_ternary_false@11
    int 0
    b main_ternary_merge@12

main_ternary_false@11:
    // stubs/string.py:29
    // assert not alpha.startswith("b")
    dig 6
    dup
    len
    dig 7
    int 0
    uncover 2
    extract3
    swap
    ==

main_ternary_merge@12:
    // stubs/string.py:29
    // assert not alpha.startswith("b")
    !
    assert
    // stubs/string.py:30
    // assert alpha.startswith(alpha)
    dig 2
    dup
    dup
    bury 7
    len
    swap
    dup
    bury 6
    len
    >
    bz main_ternary_false@14
    int 0
    b main_ternary_merge@15

main_ternary_false@14:
    // stubs/string.py:30
    // assert alpha.startswith(alpha)
    dig 4
    dup
    len
    dig 5
    int 0
    uncover 2
    extract3
    swap
    ==

main_ternary_merge@15:
    // stubs/string.py:30
    // assert alpha.startswith(alpha)
    assert
    // stubs/string.py:31
    // assert not alpha.startswith(alpha + "!")
    dig 2
    dup
    byte "!"
    concat
    dup
    bury 27
    len
    swap
    dup
    bury 26
    len
    >
    bz main_ternary_false@17
    int 0
    b main_ternary_merge@18

main_ternary_false@17:
    // stubs/string.py:31
    // assert not alpha.startswith(alpha + "!")
    dig 24
    dup
    len
    dig 25
    int 0
    uncover 2
    extract3
    swap
    ==

main_ternary_merge@18:
    // stubs/string.py:31
    // assert not alpha.startswith(alpha + "!")
    !
    assert
    // stubs/string.py:33
    // assert alpha.endswith("")
    byte ""
    dup
    bury 24
    len
    dig 3
    dup
    bury 24
    len
    >
    bz main_ternary_false@20
    int 0
    b main_ternary_merge@21

main_ternary_false@20:
    // stubs/string.py:33
    // assert alpha.endswith("")
    dig 21
    dup
    len
    dig 24
    dup
    cover 2
    len
    -
    dig 1
    len
    uncover 3
    uncover 2
    uncover 2
    extract3
    swap
    ==

main_ternary_merge@21:
    // stubs/string.py:33
    // assert alpha.endswith("")
    assert
    // stubs/string.py:34
    // assert alpha.endswith("g")
    byte "g"
    dup
    bury 22
    len
    dig 3
    dup
    bury 22
    len
    >
    bz main_ternary_false@23
    int 0
    b main_ternary_merge@24

main_ternary_false@23:
    // stubs/string.py:34
    // assert alpha.endswith("g")
    dig 19
    dup
    len
    dig 22
    dup
    cover 2
    len
    -
    dig 1
    len
    uncover 3
    uncover 2
    uncover 2
    extract3
    swap
    ==

main_ternary_merge@24:
    // stubs/string.py:34
    // assert alpha.endswith("g")
    assert
    // stubs/string.py:35
    // assert alpha.endswith("fg")
    byte "fg"
    dup
    bury 20
    len
    dig 3
    dup
    bury 20
    len
    >
    bz main_ternary_false@26
    int 0
    b main_ternary_merge@27

main_ternary_false@26:
    // stubs/string.py:35
    // assert alpha.endswith("fg")
    dig 17
    dup
    len
    dig 20
    dup
    cover 2
    len
    -
    dig 1
    len
    uncover 3
    uncover 2
    uncover 2
    extract3
    swap
    ==

main_ternary_merge@27:
    // stubs/string.py:35
    // assert alpha.endswith("fg")
    assert
    // stubs/string.py:36
    // assert not alpha.endswith("f")
    byte "f"
    dup
    bury 18
    len
    dig 3
    dup
    bury 18
    len
    >
    bz main_ternary_false@29
    int 0
    b main_ternary_merge@30

main_ternary_false@29:
    // stubs/string.py:36
    // assert not alpha.endswith("f")
    dig 15
    dup
    len
    dig 18
    dup
    cover 2
    len
    -
    dig 1
    len
    uncover 3
    uncover 2
    uncover 2
    extract3
    swap
    ==

main_ternary_merge@30:
    // stubs/string.py:36
    // assert not alpha.endswith("f")
    !
    assert
    // stubs/string.py:37
    // assert alpha.endswith(alpha)
    dig 2
    dup
    dup
    bury 16
    len
    swap
    dup
    bury 15
    len
    >
    bz main_ternary_false@32
    int 0
    b main_ternary_merge@33

main_ternary_false@32:
    // stubs/string.py:37
    // assert alpha.endswith(alpha)
    dig 12
    dup
    len
    dig 15
    dup
    cover 2
    len
    -
    dig 1
    len
    uncover 3
    uncover 2
    uncover 2
    extract3
    swap
    ==

main_ternary_merge@33:
    // stubs/string.py:37
    // assert alpha.endswith(alpha)
    assert
    // stubs/string.py:38
    // assert not alpha.endswith("!" + alpha)
    byte "!"
    dig 3
    dup
    cover 2
    concat
    dup
    bury 14
    len
    swap
    dup
    bury 13
    len
    >
    bz main_ternary_false@35
    int 0
    b main_ternary_merge@36

main_ternary_false@35:
    // stubs/string.py:38
    // assert not alpha.endswith("!" + alpha)
    dig 10
    dup
    len
    dig 13
    dup
    cover 2
    len
    -
    dig 1
    len
    uncover 3
    uncover 2
    uncover 2
    extract3
    swap
    ==

main_ternary_merge@36:
    // stubs/string.py:38
    // assert not alpha.endswith("!" + alpha)
    !
    assert
    // stubs/string.py:40
    // d, e, f = String("d"), String("e"), String("f")
    byte "d"
    byte "e"
    swap
    byte "f"
    cover 2
    // stubs/string.py:41
    // assert String(".").join((d, e, f)) == "d.e.f"
    dup
    cover 2
    dig 1
    cover 2
    dig 4
    cover 2
    byte "."
    uncover 5
    dig 1
    concat
    uncover 5
    concat
    swap
    concat
    uncover 3
    concat
    byte "d.e.f"
    ==
    assert
    // stubs/string.py:42
    // assert String("").join((d, e, f)) == "def"
    dup
    uncover 2
    swap
    uncover 3
    cover 2
    byte ""
    dup
    cover 2
    concat
    uncover 2
    concat
    swap
    concat
    swap
    concat
    byte "def"
    ==
    assert
    // stubs/string.py:43
    // assert String(".").join((d,)) == "d"
    dup
    byte "d"
    ==
    assert
    // stubs/string.py:44
    // assert String("").join((d,)) == "d"
    byte "d"
    ==
    assert
    // stubs/string.py:46
    // return True
    int 1
    return


// puyapy_lib_bytes.is_substring(item: bytes, sequence: bytes) -> uint64:
is_substring:
    // <puya>/puyapy_lib_bytes.py:4-5
    proto 2 1
    // <puya>/puyapy_lib_bytes.py:10
    int 0

is_substring_while_top@1:
    // <puya>/puyapy_lib_bytes.py:11
    frame_dig -2
    len
    frame_dig 0
    swap
    +
    frame_dig -1
    len
    <=
    bz is_substring_after_while@5
    // <puya>/puyapy_lib_bytes.py:12
    frame_dig -2
    len
    frame_dig 0
    dup
    cover 2
    swap
    +
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -2
    swap
    ==
    bz is_substring_after_if_else@4
    // <puya>/puyapy_lib_bytes.py:13
    int 1
    swap
    retsub

is_substring_after_if_else@4:
    // <puya>/puyapy_lib_bytes.py:14
    frame_dig 0
    int 1
    +
    frame_bury 0
    b is_substring_while_top@1

is_substring_after_while@5:
    // <puya>/puyapy_lib_bytes.py:15
    int 0
    swap
    retsub
