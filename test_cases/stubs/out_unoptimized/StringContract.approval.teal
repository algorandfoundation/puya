#pragma version 10
#pragma typetrack false

// test_cases.stubs.string.StringContract.approval_program() -> uint64:
main:
    intcblock 0 1
    bytecblock "abcdefg" "" "d" "." "f" "e" "a" "b" "ab" "d.e.f" "The quick brown fox jumped over the lazy dog" "fg" "no args"
    intc_0 // 0
    dup
    bytec_1 // ""
    dupn 16

main_block@0:
    // stubs/string.py:6
    // empty = String()
    bytec_1 // ""
    // stubs/string.py:7
    // assert not empty, "Empty bytes should be False"
    len
    intc_0 // 0
    ==
    assert // Empty bytes should be False
    // stubs/string.py:8
    // non_empty = String(" ")
    pushbytes " "
    // stubs/string.py:9
    // assert non_empty, "Non-empty bytes should be True"
    len
    intc_0 // 0
    !=
    assert // Non-empty bytes should be True
    // stubs/string.py:11
    // assert String("a") + "b" == "ab"
    bytec 6 // "a"
    bytec 7 // "b"
    concat
    bytec 8 // "ab"
    ==
    assert
    // stubs/string.py:12
    // assert String("a") + "b" == String("ab")
    bytec 6 // "a"
    bytec 7 // "b"
    concat
    bytec 8 // "ab"
    ==
    assert
    // stubs/string.py:13
    // assert "a" + String("b") == String("ab")
    bytec 6 // "a"
    bytec 7 // "b"
    concat
    bytec 8 // "ab"
    ==
    assert
    // stubs/string.py:6
    // empty = String()
    bytec_1 // ""
    // stubs/string.py:8
    // non_empty = String(" ")
    pushbytes " "
    // stubs/string.py:15
    // assert empty != non_empty
    !=
    assert
    // stubs/string.py:17
    // c = String("c")
    pushbytes "c"
    // stubs/string.py:18
    // c += "d"
    bytec_2 // "d"
    concat
    // stubs/string.py:19
    // c += String("e")
    bytec 5 // "e"
    concat
    // stubs/string.py:20
    // assert c == "cde"
    pushbytes "cde"
    ==
    assert
    // stubs/string.py:22
    // assert "brown fox" in String("The quick brown fox jumped over the lazy dog")
    pushbytes "brown fox"
    bytec 10 // "The quick brown fox jumped over the lazy dog"
    callsub is_substring
    assert
    // stubs/string.py:23
    // assert String("red fox") not in String("The quick brown fox jumped over the lazy dog")
    pushbytes "red fox"
    bytec 10 // "The quick brown fox jumped over the lazy dog"
    callsub is_substring
    !
    assert
    // stubs/string.py:26
    // assert alpha.startswith("")
    bytec_1 // ""
    len
    dup
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:26
    // assert alpha.startswith("")
    len
    >
    bz main_ternary_false@2

main_ternary_true@1:
    // stubs/string.py:26
    // assert alpha.startswith("")
    intc_0 // 0

main_ternary_merge@3:
    // stubs/string.py:26
    // assert alpha.startswith("")
    assert
    // stubs/string.py:27
    // assert alpha.startswith("a")
    bytec 6 // "a"
    len
    dup
    bury 19
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:27
    // assert alpha.startswith("a")
    len
    >
    bz main_ternary_false@5

main_ternary_true@4:
    // stubs/string.py:27
    // assert alpha.startswith("a")
    intc_0 // 0

main_ternary_merge@6:
    // stubs/string.py:27
    // assert alpha.startswith("a")
    assert
    // stubs/string.py:28
    // assert alpha.startswith("ab")
    bytec 8 // "ab"
    len
    dup
    bury 18
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:28
    // assert alpha.startswith("ab")
    len
    >
    bz main_ternary_false@8

main_ternary_true@7:
    // stubs/string.py:28
    // assert alpha.startswith("ab")
    intc_0 // 0

main_ternary_merge@9:
    // stubs/string.py:28
    // assert alpha.startswith("ab")
    assert
    // stubs/string.py:29
    // assert not alpha.startswith("b")
    bytec 7 // "b"
    len
    dup
    bury 17
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:29
    // assert not alpha.startswith("b")
    len
    >
    bz main_ternary_false@11

main_ternary_true@10:
    // stubs/string.py:29
    // assert not alpha.startswith("b")
    intc_0 // 0

main_ternary_merge@12:
    // stubs/string.py:29
    // assert not alpha.startswith("b")
    !
    assert
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:30
    // assert alpha.startswith(alpha)
    len
    dup
    bury 16
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:30
    // assert alpha.startswith(alpha)
    len
    >
    bz main_ternary_false@14

main_ternary_true@13:
    // stubs/string.py:30
    // assert alpha.startswith(alpha)
    intc_0 // 0

main_ternary_merge@15:
    // stubs/string.py:30
    // assert alpha.startswith(alpha)
    assert
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:31
    // assert not alpha.startswith(alpha + "!")
    pushbytes "!"
    concat
    dup
    bury 21
    len
    dup
    bury 15
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:31
    // assert not alpha.startswith(alpha + "!")
    len
    >
    bz main_ternary_false@17

main_ternary_true@16:
    // stubs/string.py:31
    // assert not alpha.startswith(alpha + "!")
    intc_0 // 0

main_ternary_merge@18:
    // stubs/string.py:31
    // assert not alpha.startswith(alpha + "!")
    !
    assert
    // stubs/string.py:33
    // assert alpha.endswith("")
    bytec_1 // ""
    len
    dup
    bury 14
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:33
    // assert alpha.endswith("")
    len
    dup
    bury 14
    >
    bz main_ternary_false@20

main_ternary_true@19:
    // stubs/string.py:33
    // assert alpha.endswith("")
    intc_0 // 0

main_ternary_merge@21:
    // stubs/string.py:33
    // assert alpha.endswith("")
    assert
    // stubs/string.py:34
    // assert alpha.endswith("g")
    pushbytes "g"
    len
    dup
    bury 12
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:34
    // assert alpha.endswith("g")
    len
    dup
    bury 12
    >
    bz main_ternary_false@23

main_ternary_true@22:
    // stubs/string.py:34
    // assert alpha.endswith("g")
    intc_0 // 0

main_ternary_merge@24:
    // stubs/string.py:34
    // assert alpha.endswith("g")
    assert
    // stubs/string.py:35
    // assert alpha.endswith("fg")
    bytec 11 // "fg"
    len
    dup
    bury 10
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:35
    // assert alpha.endswith("fg")
    len
    dup
    bury 10
    >
    bz main_ternary_false@26

main_ternary_true@25:
    // stubs/string.py:35
    // assert alpha.endswith("fg")
    intc_0 // 0

main_ternary_merge@27:
    // stubs/string.py:35
    // assert alpha.endswith("fg")
    assert
    // stubs/string.py:36
    // assert not alpha.endswith("f")
    bytec 4 // "f"
    len
    dup
    bury 8
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:36
    // assert not alpha.endswith("f")
    len
    dup
    bury 8
    >
    bz main_ternary_false@29

main_ternary_true@28:
    // stubs/string.py:36
    // assert not alpha.endswith("f")
    intc_0 // 0

main_ternary_merge@30:
    // stubs/string.py:36
    // assert not alpha.endswith("f")
    !
    assert
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:37
    // assert alpha.endswith(alpha)
    len
    dup
    bury 6
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:37
    // assert alpha.endswith(alpha)
    len
    dup
    bury 6
    >
    bz main_ternary_false@32

main_ternary_true@31:
    // stubs/string.py:37
    // assert alpha.endswith(alpha)
    intc_0 // 0

main_ternary_merge@33:
    // stubs/string.py:37
    // assert alpha.endswith(alpha)
    assert
    // stubs/string.py:38
    // assert not alpha.endswith("!" + alpha)
    pushbytes "!"
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:38
    // assert not alpha.endswith("!" + alpha)
    concat
    dup
    bury 20
    len
    dup
    bury 4
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:38
    // assert not alpha.endswith("!" + alpha)
    len
    dup
    bury 4
    >
    bz main_ternary_false@35

main_ternary_true@34:
    // stubs/string.py:38
    // assert not alpha.endswith("!" + alpha)
    intc_0 // 0

main_ternary_merge@36:
    // stubs/string.py:38
    // assert not alpha.endswith("!" + alpha)
    !
    assert
    // stubs/string.py:40
    // d, e, f = String("d"), String("e"), String("f")
    bytec_2 // "d"
    // stubs/string.py:41
    // assert String(".").join((d, e, f)) == "d.e.f"
    bytec_3 // "."
    concat
    // stubs/string.py:40
    // d, e, f = String("d"), String("e"), String("f")
    bytec 5 // "e"
    // stubs/string.py:41
    // assert String(".").join((d, e, f)) == "d.e.f"
    concat
    bytec_3 // "."
    concat
    // stubs/string.py:40
    // d, e, f = String("d"), String("e"), String("f")
    bytec 4 // "f"
    // stubs/string.py:41
    // assert String(".").join((d, e, f)) == "d.e.f"
    concat
    bytec 9 // "d.e.f"
    ==
    assert
    // stubs/string.py:40
    // d, e, f = String("d"), String("e"), String("f")
    bytec_2 // "d"
    // stubs/string.py:42
    // assert String(".").join((d, "e", f)) == "d.e.f"
    bytec_3 // "."
    concat
    bytec 5 // "e"
    concat
    bytec_3 // "."
    concat
    // stubs/string.py:40
    // d, e, f = String("d"), String("e"), String("f")
    bytec 4 // "f"
    // stubs/string.py:42
    // assert String(".").join((d, "e", f)) == "d.e.f"
    concat
    bytec 9 // "d.e.f"
    ==
    assert
    // stubs/string.py:43
    // assert String(".").join(("d", "e", "f")) == "d.e.f"
    bytec_2 // "d"
    bytec_3 // "."
    concat
    bytec 5 // "e"
    concat
    bytec_3 // "."
    concat
    bytec 4 // "f"
    concat
    bytec 9 // "d.e.f"
    ==
    assert
    // stubs/string.py:44
    // assert String(".").join(tuple("def")) == "d.e.f"
    bytec_2 // "d"
    bytec_3 // "."
    concat
    bytec 5 // "e"
    concat
    bytec_3 // "."
    concat
    bytec 4 // "f"
    concat
    bytec 9 // "d.e.f"
    ==
    assert
    // stubs/string.py:40
    // d, e, f = String("d"), String("e"), String("f")
    bytec_2 // "d"
    // stubs/string.py:45
    // assert String("").join((d, e, f)) == "def"
    bytec_1 // ""
    concat
    // stubs/string.py:40
    // d, e, f = String("d"), String("e"), String("f")
    bytec 5 // "e"
    // stubs/string.py:45
    // assert String("").join((d, e, f)) == "def"
    concat
    bytec_1 // ""
    concat
    // stubs/string.py:40
    // d, e, f = String("d"), String("e"), String("f")
    bytec 4 // "f"
    // stubs/string.py:45
    // assert String("").join((d, e, f)) == "def"
    concat
    pushbytes "def"
    ==
    assert
    // stubs/string.py:40
    // d, e, f = String("d"), String("e"), String("f")
    bytec_2 // "d"
    // stubs/string.py:46
    // assert String(".").join((d,)) == "d"
    dup
    ==
    assert
    // stubs/string.py:40
    // d, e, f = String("d"), String("e"), String("f")
    bytec_2 // "d"
    // stubs/string.py:47
    // assert String("").join((d,)) == "d"
    dup
    ==
    assert
    // stubs/string.py:49
    // String("args" if Txn.num_app_args else "no args") == "no args"
    txn NumAppArgs
    intc_0 // 0
    !=
    bz main_ternary_false@38

main_ternary_true@37:
    // stubs/string.py:49
    // String("args" if Txn.num_app_args else "no args") == "no args"
    pushbytes "args"

main_ternary_merge@39:
    // stubs/string.py:49
    // String("args" if Txn.num_app_args else "no args") == "no args"
    bytec 12 // "no args"
    ==
    // stubs/string.py:48-50
    // assert (
    //     String("args" if Txn.num_app_args else "no args") == "no args"
    // ), "constructor expressions supported"
    assert // constructor expressions supported
    // stubs/string.py:52
    // return True
    intc_1 // 1
    return

main_ternary_false@38:
    // stubs/string.py:49
    // String("args" if Txn.num_app_args else "no args") == "no args"
    bytec 12 // "no args"
    b main_ternary_merge@39

main_ternary_false@35:
    // stubs/string.py:38
    // assert not alpha.endswith("!" + alpha)
    dig 1
    dig 3
    dup
    cover 2
    -
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:38
    // assert not alpha.endswith("!" + alpha)
    swap
    uncover 2
    extract3
    dig 19
    ==
    b main_ternary_merge@36

main_ternary_false@32:
    // stubs/string.py:37
    // assert alpha.endswith(alpha)
    dig 3
    dig 5
    dup
    cover 2
    -
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:37
    // assert alpha.endswith(alpha)
    swap
    uncover 2
    extract3
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:37
    // assert alpha.endswith(alpha)
    ==
    b main_ternary_merge@33

main_ternary_false@29:
    // stubs/string.py:36
    // assert not alpha.endswith("f")
    dig 5
    dig 7
    dup
    cover 2
    -
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:36
    // assert not alpha.endswith("f")
    swap
    uncover 2
    extract3
    bytec 4 // "f"
    ==
    b main_ternary_merge@30

main_ternary_false@26:
    // stubs/string.py:35
    // assert alpha.endswith("fg")
    dig 7
    dig 9
    dup
    cover 2
    -
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:35
    // assert alpha.endswith("fg")
    swap
    uncover 2
    extract3
    bytec 11 // "fg"
    ==
    b main_ternary_merge@27

main_ternary_false@23:
    // stubs/string.py:34
    // assert alpha.endswith("g")
    dig 9
    dig 11
    dup
    cover 2
    -
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:34
    // assert alpha.endswith("g")
    swap
    uncover 2
    extract3
    pushbytes "g"
    ==
    b main_ternary_merge@24

main_ternary_false@20:
    // stubs/string.py:33
    // assert alpha.endswith("")
    dig 11
    dig 13
    dup
    cover 2
    -
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:33
    // assert alpha.endswith("")
    swap
    uncover 2
    extract3
    bytec_1 // ""
    ==
    b main_ternary_merge@21

main_ternary_false@17:
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:31
    // assert not alpha.startswith(alpha + "!")
    intc_0 // 0
    dig 15
    extract3
    dig 20
    ==
    b main_ternary_merge@18

main_ternary_false@14:
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:30
    // assert alpha.startswith(alpha)
    intc_0 // 0
    dig 16
    extract3
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:30
    // assert alpha.startswith(alpha)
    ==
    b main_ternary_merge@15

main_ternary_false@11:
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:29
    // assert not alpha.startswith("b")
    intc_0 // 0
    dig 17
    extract3
    bytec 7 // "b"
    ==
    b main_ternary_merge@12

main_ternary_false@8:
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:28
    // assert alpha.startswith("ab")
    intc_0 // 0
    dig 18
    extract3
    bytec 8 // "ab"
    ==
    b main_ternary_merge@9

main_ternary_false@5:
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:27
    // assert alpha.startswith("a")
    intc_0 // 0
    dig 19
    extract3
    bytec 6 // "a"
    ==
    b main_ternary_merge@6

main_ternary_false@2:
    // stubs/string.py:25
    // alpha = String("abcdefg")
    bytec_0 // "abcdefg"
    // stubs/string.py:26
    // assert alpha.startswith("")
    intc_0 // 0
    dig 2
    extract3
    bytec_1 // ""
    ==
    b main_ternary_merge@3


// _puya_lib.bytes_.is_substring(item: bytes, sequence: bytes) -> uint64:
is_substring:
    proto 2 1

is_substring_block@0:
    intc_0 // 0

is_substring_while_top@1:
    frame_dig -2
    len
    frame_dig 0
    +
    frame_dig -1
    len
    <=
    bz is_substring_after_while@5

is_substring_while_body@2:
    frame_dig -2
    len
    frame_dig 0
    dup
    cover 2
    +
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -2
    ==
    bz is_substring_after_if_else@4

is_substring_if_body@3:
    intc_1 // 1
    swap
    retsub

is_substring_after_if_else@4:
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b is_substring_while_top@1

is_substring_after_while@5:
    intc_0 // 0
    swap
    retsub
