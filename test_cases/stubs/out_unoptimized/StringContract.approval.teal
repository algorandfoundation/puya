#pragma version 10

test_cases.stubs.string.StringContract.approval_program:
    // stubs/string.py:6
    // empty = String()
    byte ""
    // stubs/string.py:7
    // assert not empty, "Empty bytes should be False"
    dup
    len
    !
    assert // Empty bytes should be False
    // stubs/string.py:8
    // non_empty = String(" ")
    byte " "
    // stubs/string.py:9
    // assert non_empty, "Non-empty bytes should be True"
    dup
    len
    assert // Non-empty bytes should be True
    // stubs/string.py:11
    // assert String("a") + "b" == "ab"
    byte "a"
    byte "b"
    concat
    byte "ab"
    ==
    assert
    // stubs/string.py:12
    // assert String("a") + "b" == String("ab")
    byte "a"
    byte "b"
    concat
    byte "ab"
    ==
    assert
    // stubs/string.py:13
    // assert "a" + String("b") == String("ab")
    byte "a"
    byte "b"
    concat
    byte "ab"
    ==
    assert
    // stubs/string.py:15
    // assert empty != non_empty
    !=
    assert
    // stubs/string.py:17
    // c = String("c")
    byte "c"
    // stubs/string.py:18
    // c += "d"
    byte "d"
    concat
    // stubs/string.py:19
    // c += String("e")
    byte "e"
    concat
    // stubs/string.py:20
    // assert c == "cde"
    byte "cde"
    ==
    assert
    // stubs/string.py:22
    // assert "brown fox" in String("The quick brown fox jumped over the lazy dog")
    byte "brown fox"
    byte "The quick brown fox jumped over the lazy dog"
    callsub is_substring
    assert
    // stubs/string.py:23
    // assert String("red fox") not in String("The quick brown fox jumped over the lazy dog")
    byte "red fox"
    byte "The quick brown fox jumped over the lazy dog"
    callsub is_substring
    !
    assert
    // stubs/string.py:25
    // return True
    int 1
    return


// puyapy_lib_bytes.is_substring(item: bytes, sequence: bytes) -> uint64:
is_substring:
    // <puya>/puyapy_lib_bytes.py:4-5
    proto 2 1
    // <puya>/puyapy_lib_bytes.py:10
    int 0

is_substring_while_top@1:
    // <puya>/puyapy_lib_bytes.py:11
    frame_dig -2
    len
    frame_dig 0
    swap
    +
    frame_dig -1
    len
    <=
    bz is_substring_after_while@5
    // <puya>/puyapy_lib_bytes.py:12
    frame_dig -2
    len
    frame_dig 0
    dup
    cover 2
    swap
    +
    frame_dig -1
    uncover 2
    uncover 2
    substring3
    frame_dig -2
    swap
    ==
    bz is_substring_after_if_else@4
    // <puya>/puyapy_lib_bytes.py:13
    int 1
    swap
    retsub

is_substring_after_if_else@4:
    // <puya>/puyapy_lib_bytes.py:14
    frame_dig 0
    int 1
    +
    frame_bury 0
    b is_substring_while_top@1

is_substring_after_while@5:
    // <puya>/puyapy_lib_bytes.py:15
    int 0
    swap
    retsub
