#pragma version 10

test_cases.stubs.uint64.Uint64Contract.approval_program:
    // stubs/uint64.py:6
    // zero = UInt64(0)
    int 0
    // stubs/uint64.py:7
    // one = UInt64(1)
    int 1
    dup
    cover 2
    // stubs/uint64.py:8
    // two = UInt64(2)
    int 2
    cover 2
    // stubs/uint64.py:9
    // five = UInt64(5)
    int 5
    dup
    cover 3
    cover 4
    // stubs/uint64.py:10
    // three = UInt64(3)
    int 3
    cover 3
    // stubs/uint64.py:11
    // sixty = UInt64(60)
    int 60
    dup
    cover 4
    cover 6
    // stubs/uint64.py:13
    // assert one, "Any non-zero number should be Truthy"
    dup
    assert // Any non-zero number should be Truthy
    // stubs/uint64.py:14
    // assert not zero, "Zero should beFalsy"
    swap
    !
    assert // Zero should beFalsy
    // stubs/uint64.py:16
    // assert one < five
    dup
    dig 2
    <
    assert
    // stubs/uint64.py:17
    // assert five > one
    dig 1
    dig 1
    >
    assert
    // stubs/uint64.py:18
    // assert one <= one  # noqa: PLR0124
    dup
    dig 1
    <=
    assert
    // stubs/uint64.py:19
    // assert five >= five  # noqa: PLR0124
    dig 1
    dig 2
    >=
    assert
    // stubs/uint64.py:21
    // assert one + five == 6
    dup
    dig 2
    +
    int 6
    ==
    assert
    // stubs/uint64.py:23
    // c = five
    dig 1
    // stubs/uint64.py:24
    // c += sixty
    dig 3
    +
    // stubs/uint64.py:25
    // assert c == 65
    dup
    int 65
    ==
    assert
    // stubs/uint64.py:27
    // assert sixty - five == 55
    dig 3
    dig 3
    -
    int 55
    ==
    assert
    // stubs/uint64.py:28
    // c -= five
    dig 2
    -
    // stubs/uint64.py:29
    // assert c == 60
    dup
    int 60
    ==
    assert
    // stubs/uint64.py:31
    // assert sixty // five == 12
    dig 3
    dig 3
    /
    int 12
    ==
    assert
    // stubs/uint64.py:32
    // c //= five
    dig 2
    /
    // stubs/uint64.py:34
    // assert c == 12
    dup
    int 12
    ==
    assert
    // stubs/uint64.py:36
    // assert five * sixty == 300
    dig 2
    uncover 4
    *
    int 300
    ==
    assert
    // stubs/uint64.py:38
    // assert five**three == 125
    dig 2
    dig 4
    exp
    int 125
    ==
    assert
    // stubs/uint64.py:40
    // c **= 2
    int 2
    exp
    // stubs/uint64.py:42
    // assert c == 144
    dup
    int 144
    ==
    assert
    // stubs/uint64.py:44
    // assert one << two == 4
    dig 1
    uncover 5
    shl
    int 4
    ==
    assert
    // stubs/uint64.py:45
    // c >>= 6
    int 6
    shr
    // stubs/uint64.py:46
    // assert c == 2
    dup
    int 2
    ==
    assert
    // stubs/uint64.py:47
    // c <<= 6
    int 6
    shl
    // stubs/uint64.py:48
    // assert c == 128
    int 128
    ==
    assert
    // stubs/uint64.py:49
    // assert five >> three == 0
    swap
    uncover 2
    shr
    int 0
    ==
    assert
    // stubs/uint64.py:51
    // assert ~one == 0xFFFFFFFFFFFFFFFE
    ~
    int 18446744073709551614
    ==
    assert
    // stubs/uint64.py:53
    // true = UInt64(1)
    int 1
    dup
    swap
    // stubs/uint64.py:54
    // false = UInt64(0)
    int 0
    swap
    // stubs/uint64.py:55
    // assert (true and true) == true
    bnz main_ternary_false@2
    dig 1
    b main_ternary_merge@3

main_ternary_false@2:
    // stubs/uint64.py:55
    // assert (true and true) == true
    dig 1

main_ternary_merge@3:
    // stubs/uint64.py:55
    // assert (true and true) == true
    dig 2
    dup
    cover 2
    ==
    assert
    // stubs/uint64.py:56
    // assert (true and false) == false
    bnz main_ternary_false@5
    dig 1
    b main_ternary_merge@6

main_ternary_false@5:
    // stubs/uint64.py:56
    // assert (true and false) == false
    dup

main_ternary_merge@6:
    // stubs/uint64.py:56
    // assert (true and false) == false
    dig 1
    dup
    cover 2
    ==
    assert
    // stubs/uint64.py:57
    // assert (false and true) == false
    bnz main_ternary_false@8
    dup
    b main_ternary_merge@9

main_ternary_false@8:
    // stubs/uint64.py:57
    // assert (false and true) == false
    dig 1

main_ternary_merge@9:
    // stubs/uint64.py:57
    // assert (false and true) == false
    dig 1
    dup
    cover 2
    ==
    assert
    // stubs/uint64.py:58
    // assert (false and false) == false
    bnz main_ternary_false@11
    dup
    b main_ternary_merge@12

main_ternary_false@11:
    // stubs/uint64.py:58
    // assert (false and false) == false
    dup

main_ternary_merge@12:
    // stubs/uint64.py:58
    // assert (false and false) == false
    dig 1
    ==
    assert
    // stubs/uint64.py:59
    // assert (true or true) == true
    dig 1
    bz main_ternary_false@14
    dig 1
    b main_ternary_merge@15

main_ternary_false@14:
    // stubs/uint64.py:59
    // assert (true or true) == true
    dig 1

main_ternary_merge@15:
    // stubs/uint64.py:59
    // assert (true or true) == true
    dig 2
    dup
    cover 2
    ==
    assert
    // stubs/uint64.py:60
    // assert (true or false) == true
    bz main_ternary_false@17
    dig 1
    b main_ternary_merge@18

main_ternary_false@17:
    // stubs/uint64.py:60
    // assert (true or false) == true
    dup

main_ternary_merge@18:
    // stubs/uint64.py:60
    // assert (true or false) == true
    dig 2
    ==
    assert
    // stubs/uint64.py:61
    // assert (false or true) == true
    dup
    bz main_ternary_false@20
    dup
    b main_ternary_merge@21

main_ternary_false@20:
    // stubs/uint64.py:61
    // assert (false or true) == true
    dig 1

main_ternary_merge@21:
    // stubs/uint64.py:61
    // assert (false or true) == true
    dig 2
    ==
    assert
    // stubs/uint64.py:62
    // assert (false or false) == false
    dup
    bz main_ternary_false@23
    dup
    b main_ternary_merge@24

main_ternary_false@23:
    // stubs/uint64.py:62
    // assert (false or false) == false
    dup

main_ternary_merge@24:
    // stubs/uint64.py:62
    // assert (false or false) == false
    dig 1
    ==
    assert
    // stubs/uint64.py:64
    // assert one & five == one
    dig 4
    dup
    dig 5
    dup
    cover 3
    &
    swap
    ==
    assert
    // stubs/uint64.py:65
    // assert sixty | five == 61
    dig 3
    dup
    cover 2
    dig 1
    |
    int 61
    ==
    assert
    // stubs/uint64.py:66
    // assert sixty ^ five == 57
    ^
    int 57
    ==
    assert
    // stubs/uint64.py:68
    // y = UInt64(0b11111110)
    int 254
    // stubs/uint64.py:69
    // y &= UInt64(0b00011111)
    int 31
    &
    // stubs/uint64.py:70
    // assert y == 0b00011110
    dup
    int 30
    ==
    assert
    // stubs/uint64.py:71
    // y |= 0b00110110
    int 54
    |
    // stubs/uint64.py:72
    // assert y == 0b00111110
    dup
    int 62
    ==
    assert
    // stubs/uint64.py:73
    // y ^= 0b11111111
    int 255
    ^
    // stubs/uint64.py:74
    // assert y == 0b11000001
    int 193
    ==
    assert
    // stubs/uint64.py:76
    // return UInt64(1)
    int 1
    return
