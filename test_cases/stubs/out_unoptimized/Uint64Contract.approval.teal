#pragma version 10

test_cases.stubs.uint64.Uint64Contract.approval_program:
    intcblock 1 0 5 60
    // stubs/uint64.py:7
    // one = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:13
    // assert one, "Any non-zero number should be Truthy"
    intc_1 // 0
    !=
    assert // Any non-zero number should be Truthy
    // stubs/uint64.py:6
    // zero = UInt64(0)
    intc_1 // 0
    // stubs/uint64.py:14
    // assert not zero, "Zero should beFalsy"
    dup
    ==
    assert // Zero should beFalsy
    // stubs/uint64.py:7
    // one = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:16
    // assert one < five
    <
    assert
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:7
    // one = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:17
    // assert five > one
    >
    assert
    // stubs/uint64.py:7
    // one = UInt64(1)
    intc_0 // 1
    dup
    // stubs/uint64.py:18
    // assert one <= one  # noqa: PLR0124
    <=
    assert
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    dup
    // stubs/uint64.py:19
    // assert five >= five  # noqa: PLR0124
    >=
    assert
    // stubs/uint64.py:7
    // one = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:21
    // assert one + five == 6
    +
    pushint 6 // 6
    ==
    assert
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:11
    // sixty = UInt64(60)
    intc_3 // 60
    // stubs/uint64.py:24
    // c += sixty
    +
    // stubs/uint64.py:25
    // assert c == 65
    dup
    pushint 65 // 65
    ==
    assert
    // stubs/uint64.py:11
    // sixty = UInt64(60)
    intc_3 // 60
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:27
    // assert sixty - five == 55
    -
    pushint 55 // 55
    ==
    assert
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:28
    // c -= five
    -
    // stubs/uint64.py:29
    // assert c == 60
    dup
    intc_3 // 60
    ==
    assert
    // stubs/uint64.py:11
    // sixty = UInt64(60)
    intc_3 // 60
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:31
    // assert sixty // five == 12
    /
    pushint 12 // 12
    ==
    assert
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:32
    // c //= five
    /
    // stubs/uint64.py:34
    // assert c == 12
    dup
    pushint 12 // 12
    ==
    assert
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:11
    // sixty = UInt64(60)
    intc_3 // 60
    // stubs/uint64.py:36
    // assert five * sixty == 300
    *
    pushint 300 // 300
    ==
    assert
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:10
    // three = UInt64(3)
    pushint 3 // 3
    // stubs/uint64.py:38
    // assert five**three == 125
    exp
    pushint 125 // 125
    ==
    assert
    // stubs/uint64.py:40
    // c **= 2
    pushint 2 // 2
    exp
    // stubs/uint64.py:42
    // assert c == 144
    dup
    pushint 144 // 144
    ==
    assert
    // stubs/uint64.py:7
    // one = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:8
    // two = UInt64(2)
    pushint 2 // 2
    // stubs/uint64.py:44
    // assert one << two == 4
    shl
    pushint 4 // 4
    ==
    assert
    // stubs/uint64.py:45
    // c >>= 6
    pushint 6 // 6
    shr
    // stubs/uint64.py:46
    // assert c == 2
    dup
    pushint 2 // 2
    ==
    assert
    // stubs/uint64.py:47
    // c <<= 6
    pushint 6 // 6
    shl
    // stubs/uint64.py:48
    // assert c == 128
    pushint 128 // 128
    ==
    assert
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:10
    // three = UInt64(3)
    pushint 3 // 3
    // stubs/uint64.py:49
    // assert five >> three == 0
    shr
    intc_1 // 0
    ==
    assert
    // stubs/uint64.py:7
    // one = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:51
    // assert ~one == 0xFFFFFFFFFFFFFFFE
    ~
    pushint 18446744073709551614 // 18446744073709551614
    ==
    assert
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:55
    // assert (true and true) == true
    intc_1 // 0
    ==
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    dup
    // stubs/uint64.py:55
    // assert (true and true) == true
    uncover 2
    select
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:55
    // assert (true and true) == true
    ==
    assert
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:56
    // assert (true and false) == false
    intc_1 // 0
    ==
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:56
    // assert (true and false) == false
    uncover 2
    select
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    // stubs/uint64.py:56
    // assert (true and false) == false
    ==
    assert
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    // stubs/uint64.py:57
    // assert (false and true) == false
    dup
    ==
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    // stubs/uint64.py:57
    // assert (false and true) == false
    uncover 2
    select
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    // stubs/uint64.py:57
    // assert (false and true) == false
    ==
    assert
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    // stubs/uint64.py:58
    // assert (false and false) == false
    dup
    ==
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    dup
    // stubs/uint64.py:58
    // assert (false and false) == false
    uncover 2
    select
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    // stubs/uint64.py:58
    // assert (false and false) == false
    ==
    assert
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:59
    // assert (true or true) == true
    intc_1 // 0
    !=
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    dup
    // stubs/uint64.py:59
    // assert (true or true) == true
    uncover 2
    select
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:59
    // assert (true or true) == true
    ==
    assert
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:60
    // assert (true or false) == true
    intc_1 // 0
    !=
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:60
    // assert (true or false) == true
    uncover 2
    select
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:60
    // assert (true or false) == true
    ==
    assert
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    // stubs/uint64.py:61
    // assert (false or true) == true
    dup
    !=
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    // stubs/uint64.py:61
    // assert (false or true) == true
    uncover 2
    select
    // stubs/uint64.py:53
    // true = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:61
    // assert (false or true) == true
    ==
    assert
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    // stubs/uint64.py:62
    // assert (false or false) == false
    dup
    !=
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    dup
    // stubs/uint64.py:62
    // assert (false or false) == false
    uncover 2
    select
    // stubs/uint64.py:54
    // false = UInt64(0)
    intc_1 // 0
    // stubs/uint64.py:62
    // assert (false or false) == false
    ==
    assert
    // stubs/uint64.py:7
    // one = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:64
    // assert one & five == one
    &
    // stubs/uint64.py:7
    // one = UInt64(1)
    intc_0 // 1
    // stubs/uint64.py:64
    // assert one & five == one
    ==
    assert
    // stubs/uint64.py:11
    // sixty = UInt64(60)
    intc_3 // 60
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:65
    // assert sixty | five == 61
    |
    pushint 61 // 61
    ==
    assert
    // stubs/uint64.py:11
    // sixty = UInt64(60)
    intc_3 // 60
    // stubs/uint64.py:9
    // five = UInt64(5)
    intc_2 // 5
    // stubs/uint64.py:66
    // assert sixty ^ five == 57
    ^
    pushint 57 // 57
    ==
    assert
    // stubs/uint64.py:68
    // y = UInt64(0b11111110)
    pushint 254 // 254
    // stubs/uint64.py:69
    // y &= UInt64(0b00011111)
    pushint 31 // 31
    &
    // stubs/uint64.py:70
    // assert y == 0b00011110
    dup
    pushint 30 // 30
    ==
    assert
    // stubs/uint64.py:71
    // y |= 0b00110110
    pushint 54 // 54
    |
    // stubs/uint64.py:72
    // assert y == 0b00111110
    dup
    pushint 62 // 62
    ==
    assert
    // stubs/uint64.py:73
    // y ^= 0b11111111
    pushint 255 // 255
    ^
    // stubs/uint64.py:74
    // assert y == 0b11000001
    pushint 193 // 193
    ==
    assert
    // stubs/uint64.py:76
    // assert op.sqrt(UInt64(17)) == op.sqrt(16)
    pushint 17 // 17
    sqrt
    pushint 16 // 16
    sqrt
    ==
    assert
    // stubs/uint64.py:7
    // one = UInt64(1)
    intc_0 // 1
    dup
    // stubs/uint64.py:78
    // assert one == +one
    ==
    assert
    // stubs/uint64.py:80
    // assert UInt64(1 if Txn.num_app_args else 5) == 5, "constructor expressions supported"
    txn NumAppArgs
    intc_1 // 0
    !=
    intc_2 // 5
    intc_0 // 1
    uncover 2
    select
    intc_2 // 5
    ==
    assert // constructor expressions supported
    // stubs/uint64.py:82
    // return UInt64(1)
    intc_0 // 1
    return
